
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c0a4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  0801c378  0801c378  0002c378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cacc  0801cacc  0002cacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801cad4  0801cad4  0002cad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cad8  0801cad8  0002cad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801cadc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f6c  240002d4  0801cdb0  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003240  0801cdb0  00033240  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003803d  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000611f  00000000  00000000  0006833f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b70  00000000  00000000  0006e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000028f8  00000000  00000000  00070fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003efb5  00000000  00000000  000738c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a121  00000000  00000000  000b287d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eaed  00000000  00000000  000ec99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026b48b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d294  00000000  00000000  0026b4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c35c 	.word	0x0801c35c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801c35c 	.word	0x0801c35c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9ac 	b.w	8000ac8 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	4604      	mov	r4, r0
 8000800:	468e      	mov	lr, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d14d      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000806:	428a      	cmp	r2, r1
 8000808:	4694      	mov	ip, r2
 800080a:	d969      	bls.n	80008e0 <__udivmoddi4+0xe8>
 800080c:	fab2 f282 	clz	r2, r2
 8000810:	b152      	cbz	r2, 8000828 <__udivmoddi4+0x30>
 8000812:	fa01 f302 	lsl.w	r3, r1, r2
 8000816:	f1c2 0120 	rsb	r1, r2, #32
 800081a:	fa20 f101 	lsr.w	r1, r0, r1
 800081e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000822:	ea41 0e03 	orr.w	lr, r1, r3
 8000826:	4094      	lsls	r4, r2
 8000828:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800082c:	0c21      	lsrs	r1, r4, #16
 800082e:	fbbe f6f8 	udiv	r6, lr, r8
 8000832:	fa1f f78c 	uxth.w	r7, ip
 8000836:	fb08 e316 	mls	r3, r8, r6, lr
 800083a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800083e:	fb06 f107 	mul.w	r1, r6, r7
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f106 30ff 	add.w	r0, r6, #4294967295
 800084e:	f080 811f 	bcs.w	8000a90 <__udivmoddi4+0x298>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 811c 	bls.w	8000a90 <__udivmoddi4+0x298>
 8000858:	3e02      	subs	r6, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb3 f0f8 	udiv	r0, r3, r8
 8000864:	fb08 3310 	mls	r3, r8, r0, r3
 8000868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086c:	fb00 f707 	mul.w	r7, r0, r7
 8000870:	42a7      	cmp	r7, r4
 8000872:	d90a      	bls.n	800088a <__udivmoddi4+0x92>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 33ff 	add.w	r3, r0, #4294967295
 800087c:	f080 810a 	bcs.w	8000a94 <__udivmoddi4+0x29c>
 8000880:	42a7      	cmp	r7, r4
 8000882:	f240 8107 	bls.w	8000a94 <__udivmoddi4+0x29c>
 8000886:	4464      	add	r4, ip
 8000888:	3802      	subs	r0, #2
 800088a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800088e:	1be4      	subs	r4, r4, r7
 8000890:	2600      	movs	r6, #0
 8000892:	b11d      	cbz	r5, 800089c <__udivmoddi4+0xa4>
 8000894:	40d4      	lsrs	r4, r2
 8000896:	2300      	movs	r3, #0
 8000898:	e9c5 4300 	strd	r4, r3, [r5]
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0xc2>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	f000 80ef 	beq.w	8000a8a <__udivmoddi4+0x292>
 80008ac:	2600      	movs	r6, #0
 80008ae:	e9c5 0100 	strd	r0, r1, [r5]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	fab3 f683 	clz	r6, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d14a      	bne.n	8000958 <__udivmoddi4+0x160>
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xd4>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 80f9 	bhi.w	8000abe <__udivmoddi4+0x2c6>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb61 0303 	sbc.w	r3, r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	469e      	mov	lr, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e0      	beq.n	800089c <__udivmoddi4+0xa4>
 80008da:	e9c5 4e00 	strd	r4, lr, [r5]
 80008de:	e7dd      	b.n	800089c <__udivmoddi4+0xa4>
 80008e0:	b902      	cbnz	r2, 80008e4 <__udivmoddi4+0xec>
 80008e2:	deff      	udf	#255	; 0xff
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 8092 	bne.w	8000a12 <__udivmoddi4+0x21a>
 80008ee:	eba1 010c 	sub.w	r1, r1, ip
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2601      	movs	r6, #1
 80008fc:	0c20      	lsrs	r0, r4, #16
 80008fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000902:	fb07 1113 	mls	r1, r7, r3, r1
 8000906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090a:	fb0e f003 	mul.w	r0, lr, r3
 800090e:	4288      	cmp	r0, r1
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x12c>
 8000912:	eb1c 0101 	adds.w	r1, ip, r1
 8000916:	f103 38ff 	add.w	r8, r3, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x12a>
 800091c:	4288      	cmp	r0, r1
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2c0>
 8000922:	4643      	mov	r3, r8
 8000924:	1a09      	subs	r1, r1, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb1 f0f7 	udiv	r0, r1, r7
 800092c:	fb07 1110 	mls	r1, r7, r0, r1
 8000930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x156>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 31ff 	add.w	r1, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x154>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2ca>
 800094c:	4608      	mov	r0, r1
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	e79c      	b.n	8000892 <__udivmoddi4+0x9a>
 8000958:	f1c6 0720 	rsb	r7, r6, #32
 800095c:	40b3      	lsls	r3, r6
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa20 f407 	lsr.w	r4, r0, r7
 800096a:	fa01 f306 	lsl.w	r3, r1, r6
 800096e:	431c      	orrs	r4, r3
 8000970:	40f9      	lsrs	r1, r7
 8000972:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000976:	fa00 f306 	lsl.w	r3, r0, r6
 800097a:	fbb1 f8f9 	udiv	r8, r1, r9
 800097e:	0c20      	lsrs	r0, r4, #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fb09 1118 	mls	r1, r9, r8, r1
 8000988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098c:	fb08 f00e 	mul.w	r0, r8, lr
 8000990:	4288      	cmp	r0, r1
 8000992:	fa02 f206 	lsl.w	r2, r2, r6
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b8>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2bc>
 80009a4:	4288      	cmp	r0, r1
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2bc>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009b8:	fb09 1110 	mls	r1, r9, r0, r1
 80009bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c4:	458e      	cmp	lr, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1e2>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2b4>
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2b4>
 80009d6:	3802      	subs	r0, #2
 80009d8:	4461      	add	r1, ip
 80009da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009de:	fba0 9402 	umull	r9, r4, r0, r2
 80009e2:	eba1 010e 	sub.w	r1, r1, lr
 80009e6:	42a1      	cmp	r1, r4
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46a6      	mov	lr, r4
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x2a4>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x2a0>
 80009f0:	b15d      	cbz	r5, 8000a0a <__udivmoddi4+0x212>
 80009f2:	ebb3 0208 	subs.w	r2, r3, r8
 80009f6:	eb61 010e 	sbc.w	r1, r1, lr
 80009fa:	fa01 f707 	lsl.w	r7, r1, r7
 80009fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000a02:	40f1      	lsrs	r1, r6
 8000a04:	431f      	orrs	r7, r3
 8000a06:	e9c5 7100 	strd	r7, r1, [r5]
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	40d8      	lsrs	r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4301      	orrs	r1, r0
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a30:	fb07 3610 	mls	r6, r7, r0, r3
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	fa04 f402 	lsl.w	r4, r4, r2
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x260>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a50:	429e      	cmp	r6, r3
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	b289      	uxth	r1, r1
 8000a5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a60:	fb07 3316 	mls	r3, r7, r6, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb06 f30e 	mul.w	r3, r6, lr
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x28a>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7e:	3e02      	subs	r6, #2
 8000a80:	4461      	add	r1, ip
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0x104>
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e705      	b.n	800089c <__udivmoddi4+0xa4>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e3      	b.n	800085c <__udivmoddi4+0x64>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6f8      	b.n	800088a <__udivmoddi4+0x92>
 8000a98:	454b      	cmp	r3, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f8>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f8>
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x28a>
 8000aac:	4620      	mov	r0, r4
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1e2>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x260>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b8>
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x12c>
 8000abe:	4630      	mov	r0, r6
 8000ac0:	e709      	b.n	80008d6 <__udivmoddi4+0xde>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x156>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HG2_Write_Register+0x48>)
 8000ae4:	f007 fca6 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ae8:	1df9      	adds	r1, r7, #7
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2201      	movs	r2, #1
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <HG2_Write_Register+0x4c>)
 8000af0:	f00e fa22 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000af4:	1db9      	adds	r1, r7, #6
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	2201      	movs	r2, #1
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <HG2_Write_Register+0x4c>)
 8000afc:	f00e fa1c 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <HG2_Write_Register+0x48>)
 8000b08:	f007 fc94 	bl	8008434 <HAL_GPIO_WritePin>

}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58020c00 	.word	0x58020c00
 8000b18:	24001040 	.word	0x24001040

08000b1c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LG2_Read_Register+0x50>)
 8000b38:	f007 fc7c 	bl	8008434 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b3c:	1df9      	adds	r1, r7, #7
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	2201      	movs	r2, #1
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <LG2_Read_Register+0x54>)
 8000b44:	f00e f9f8 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b48:	f107 010f 	add.w	r1, r7, #15
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <LG2_Read_Register+0x54>)
 8000b52:	f00e fbed 	bl	800f330 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <LG2_Read_Register+0x50>)
 8000b5e:	f007 fc69 	bl	8008434 <HAL_GPIO_WritePin>

	return reg_value;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58020c00 	.word	0x58020c00
 8000b70:	24001040 	.word	0x24001040

08000b74 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LG2_Write_Register+0x48>)
 8000b8c:	f007 fc52 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b90:	1df9      	adds	r1, r7, #7
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2201      	movs	r2, #1
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <LG2_Write_Register+0x4c>)
 8000b98:	f00e f9ce 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b9c:	1db9      	adds	r1, r7, #6
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <LG2_Write_Register+0x4c>)
 8000ba4:	f00e f9c8 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <LG2_Write_Register+0x48>)
 8000bb0:	f007 fc40 	bl	8008434 <HAL_GPIO_WritePin>

}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	58020c00 	.word	0x58020c00
 8000bc0:	24001040 	.word	0x24001040
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000bce:	2022      	movs	r0, #34	; 0x22
 8000bd0:	f7ff ffa4 	bl	8000b1c <LG2_Read_Register>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bd8:	2023      	movs	r0, #35	; 0x23
 8000bda:	f7ff ff9f 	bl	8000b1c <LG2_Read_Register>
 8000bde:	4603      	mov	r3, r0
 8000be0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000be2:	79bb      	ldrb	r3, [r7, #6]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 8000bf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bfc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c00:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c28 <LG2_Get_Gyro_X+0x60>
 8000c04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c08:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c30 <LG2_Get_Gyro_X+0x68>
 8000c0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c14:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	ee07 3a90 	vmov	s15, r3
}
 8000c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	40dfffc0 	.word	0x40dfffc0
 8000c30:	00000000 	.word	0x00000000
 8000c34:	406f4000 	.word	0x406f4000

08000c38 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c3e:	2024      	movs	r0, #36	; 0x24
 8000c40:	f7ff ff6c 	bl	8000b1c <LG2_Read_Register>
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c48:	2025      	movs	r0, #37	; 0x25
 8000c4a:	f7ff ff67 	bl	8000b1c <LG2_Read_Register>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 8000c60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c70:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c98 <LG2_Get_Gyro_Y+0x60>
 8000c74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c78:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ca0 <LG2_Get_Gyro_Y+0x68>
 8000c7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c84:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	ee07 3a90 	vmov	s15, r3
}
 8000c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40dfffc0 	.word	0x40dfffc0
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	406f4000 	.word	0x406f4000

08000ca8 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f7ff ff34 	bl	8000b1c <LG2_Read_Register>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000cb8:	2027      	movs	r0, #39	; 0x27
 8000cba:	f7ff ff2f 	bl	8000b1c <LG2_Read_Register>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 8000cd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ce0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000d08 <LG2_Get_Gyro_Z+0x60>
 8000ce4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ce8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000d10 <LG2_Get_Gyro_Z+0x68>
 8000cec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cf4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	ee07 3a90 	vmov	s15, r3
}
 8000cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	40dfffc0 	.word	0x40dfffc0
 8000d10:	00000000 	.word	0x00000000
 8000d14:	406f4000 	.word	0x406f4000

08000d18 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000d24:	ed97 7a00 	vldr	s14, [r7]
 8000d28:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000d98 <setServo+0x80>
 8000d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d30:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d9c <setServo+0x84>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000da0 <setServo+0x88>
 8000d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d81a      	bhi.n	8000d88 <setServo+0x70>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <setServo+0x40>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d71 	.word	0x08000d71
 8000d60:	08000d79 	.word	0x08000d79
 8000d64:	08000d81 	.word	0x08000d81
		case 1:
			TIM4->CCR4 = timerVal;
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <setServo+0x8c>)
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000d6e:	e00c      	b.n	8000d8a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <setServo+0x8c>)
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000d76:	e008      	b.n	8000d8a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <setServo+0x8c>)
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000d7e:	e004      	b.n	8000d8a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <setServo+0x8c>)
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000d86:	e000      	b.n	8000d8a <setServo+0x72>

		default:
			break;
 8000d88:	bf00      	nop
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	43340000 	.word	0x43340000
 8000d9c:	457a0000 	.word	0x457a0000
 8000da0:	453b8000 	.word	0x453b8000
 8000da4:	40000800 	.word	0x40000800

08000da8 <setLEDs>:

void setLEDs(void) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
 8000db2:	e181      	b.n	80010b8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000db4:	4aa1      	ldr	r2, [pc, #644]	; (800103c <setLEDs+0x294>)
 8000db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	f200 8177 	bhi.w	80010b0 <setLEDs+0x308>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <setLEDs+0x20>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000dd9 	.word	0x08000dd9
 8000dcc:	08000e89 	.word	0x08000e89
 8000dd0:	08000f39 	.word	0x08000f39
 8000dd4:	08000fe9 	.word	0x08000fe9
		case 0:
			for (int j = 0; j < 3; j++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
 8000ddc:	e042      	b.n	8000e64 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de2:	e039      	b.n	8000e58 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000de4:	4996      	ldr	r1, [pc, #600]	; (8001040 <setLEDs+0x298>)
 8000de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000df0:	4413      	add	r3, r2
 8000df2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfa:	fa41 f202 	asr.w	r2, r1, r2
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d013      	beq.n	8000e2c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	00da      	lsls	r2, r3, #3
 8000e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0a:	18d1      	adds	r1, r2, r3
 8000e0c:	4a8b      	ldr	r2, [pc, #556]	; (800103c <setLEDs+0x294>)
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3308      	adds	r3, #8
 8000e22:	4a88      	ldr	r2, [pc, #544]	; (8001044 <setLEDs+0x29c>)
 8000e24:	213c      	movs	r1, #60	; 0x3c
 8000e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e2a:	e012      	b.n	8000e52 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	00da      	lsls	r2, r3, #3
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	18d1      	adds	r1, r2, r3
 8000e34:	4a81      	ldr	r2, [pc, #516]	; (800103c <setLEDs+0x294>)
 8000e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	3308      	adds	r3, #8
 8000e4a:	4a7e      	ldr	r2, [pc, #504]	; (8001044 <setLEDs+0x29c>)
 8000e4c:	211e      	movs	r1, #30
 8000e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	3301      	adds	r3, #1
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	ddc2      	ble.n	8000de4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	3301      	adds	r3, #1
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	ddb9      	ble.n	8000dde <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6e:	e007      	b.n	8000e80 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000e70:	4a74      	ldr	r2, [pc, #464]	; (8001044 <setLEDs+0x29c>)
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	2100      	movs	r1, #0
 8000e76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	2bb1      	cmp	r3, #177	; 0xb1
 8000e84:	ddf4      	ble.n	8000e70 <setLEDs+0xc8>
			}
			break;
 8000e86:	e114      	b.n	80010b2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8c:	e042      	b.n	8000f14 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
 8000e92:	e039      	b.n	8000f08 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000e94:	496a      	ldr	r1, [pc, #424]	; (8001040 <setLEDs+0x298>)
 8000e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	6a3a      	ldr	r2, [r7, #32]
 8000eaa:	fa41 f202 	asr.w	r2, r1, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d013      	beq.n	8000edc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	00da      	lsls	r2, r3, #3
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	18d1      	adds	r1, r2, r3
 8000ebc:	4a5f      	ldr	r2, [pc, #380]	; (800103c <setLEDs+0x294>)
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	4a5d      	ldr	r2, [pc, #372]	; (8001048 <setLEDs+0x2a0>)
 8000ed4:	213c      	movs	r1, #60	; 0x3c
 8000ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000eda:	e012      	b.n	8000f02 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	00da      	lsls	r2, r3, #3
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	18d1      	adds	r1, r2, r3
 8000ee4:	4a55      	ldr	r2, [pc, #340]	; (800103c <setLEDs+0x294>)
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3308      	adds	r3, #8
 8000efa:	4a53      	ldr	r2, [pc, #332]	; (8001048 <setLEDs+0x2a0>)
 8000efc:	211e      	movs	r1, #30
 8000efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	3301      	adds	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	ddc2      	ble.n	8000e94 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	ddb9      	ble.n	8000e8e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e007      	b.n	8000f30 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000f20:	4a49      	ldr	r2, [pc, #292]	; (8001048 <setLEDs+0x2a0>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	2100      	movs	r1, #0
 8000f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2bb1      	cmp	r3, #177	; 0xb1
 8000f34:	ddf4      	ble.n	8000f20 <setLEDs+0x178>
			}
			break;
 8000f36:	e0bc      	b.n	80010b2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	e042      	b.n	8000fc4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e039      	b.n	8000fb8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000f44:	493e      	ldr	r1, [pc, #248]	; (8001040 <setLEDs+0x298>)
 8000f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4413      	add	r3, r2
 8000f52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	fa41 f202 	asr.w	r2, r1, r2
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	00da      	lsls	r2, r3, #3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	18d1      	adds	r1, r2, r3
 8000f6c:	4a33      	ldr	r2, [pc, #204]	; (800103c <setLEDs+0x294>)
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3308      	adds	r3, #8
 8000f82:	4a32      	ldr	r2, [pc, #200]	; (800104c <setLEDs+0x2a4>)
 8000f84:	213c      	movs	r1, #60	; 0x3c
 8000f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f8a:	e012      	b.n	8000fb2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	00da      	lsls	r2, r3, #3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	18d1      	adds	r1, r2, r3
 8000f94:	4a29      	ldr	r2, [pc, #164]	; (800103c <setLEDs+0x294>)
 8000f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3308      	adds	r3, #8
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <setLEDs+0x2a4>)
 8000fac:	211e      	movs	r1, #30
 8000fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	ddc2      	ble.n	8000f44 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	ddb9      	ble.n	8000f3e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000fca:	2338      	movs	r3, #56	; 0x38
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	e007      	b.n	8000fe0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	; (800104c <setLEDs+0x2a4>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2b69      	cmp	r3, #105	; 0x69
 8000fe4:	ddf4      	ble.n	8000fd0 <setLEDs+0x228>
			}
			break;
 8000fe6:	e064      	b.n	80010b2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e04e      	b.n	800108c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	e045      	b.n	8001080 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000ff4:	4912      	ldr	r1, [pc, #72]	; (8001040 <setLEDs+0x298>)
 8000ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	fa41 f202 	asr.w	r2, r1, r2
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01f      	beq.n	8001054 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	00da      	lsls	r2, r3, #3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	18d1      	adds	r1, r2, r3
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <setLEDs+0x294>)
 800101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	3308      	adds	r3, #8
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <setLEDs+0x2a8>)
 8001034:	213c      	movs	r1, #60	; 0x3c
 8001036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800103a:	e01e      	b.n	800107a <setLEDs+0x2d2>
 800103c:	0801c550 	.word	0x0801c550
 8001040:	24000bd0 	.word	0x24000bd0
 8001044:	240002f0 	.word	0x240002f0
 8001048:	240005b8 	.word	0x240005b8
 800104c:	24000880 	.word	0x24000880
 8001050:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	00da      	lsls	r2, r3, #3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	18d1      	adds	r1, r2, r3
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <setLEDs+0x350>)
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <setLEDs+0x354>)
 8001074:	211e      	movs	r1, #30
 8001076:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b07      	cmp	r3, #7
 8001084:	ddb6      	ble.n	8000ff4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3301      	adds	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b02      	cmp	r3, #2
 8001090:	ddad      	ble.n	8000fee <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8001092:	2338      	movs	r3, #56	; 0x38
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e007      	b.n	80010a8 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <setLEDs+0x354>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2100      	movs	r1, #0
 800109e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b69      	cmp	r3, #105	; 0x69
 80010ac:	ddf4      	ble.n	8001098 <setLEDs+0x2f0>
			}
			break;
 80010ae:	e000      	b.n	80010b2 <setLEDs+0x30a>
		default:
			break;
 80010b0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80010b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b4:	3301      	adds	r3, #1
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	2b0d      	cmp	r3, #13
 80010bc:	f77f ae7a 	ble.w	8000db4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 80010c0:	23b2      	movs	r3, #178	; 0xb2
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <setLEDs+0x358>)
 80010c4:	210c      	movs	r1, #12
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <setLEDs+0x35c>)
 80010c8:	f00e fd1e 	bl	800fb08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 80010cc:	23b2      	movs	r3, #178	; 0xb2
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <setLEDs+0x360>)
 80010d0:	2108      	movs	r1, #8
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <setLEDs+0x364>)
 80010d4:	f00e fd18 	bl	800fb08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 80010d8:	236a      	movs	r3, #106	; 0x6a
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <setLEDs+0x368>)
 80010dc:	2104      	movs	r1, #4
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <setLEDs+0x36c>)
 80010e0:	f00e fd12 	bl	800fb08 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 80010e4:	236a      	movs	r3, #106	; 0x6a
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <setLEDs+0x354>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <setLEDs+0x36c>)
 80010ec:	f00e fd0c 	bl	800fb08 <HAL_TIM_PWM_Start_DMA>

}
 80010f0:	bf00      	nop
 80010f2:	3738      	adds	r7, #56	; 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	0801c550 	.word	0x0801c550
 80010fc:	24000a28 	.word	0x24000a28
 8001100:	240002f0 	.word	0x240002f0
 8001104:	24001234 	.word	0x24001234
 8001108:	240005b8 	.word	0x240005b8
 800110c:	24001150 	.word	0x24001150
 8001110:	24000880 	.word	0x24000880
 8001114:	2400119c 	.word	0x2400119c

08001118 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoRA_Read_Register+0x48>)
 800112a:	f007 f983 	bl	8008434 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800112e:	1df9      	adds	r1, r7, #7
 8001130:	2364      	movs	r3, #100	; 0x64
 8001132:	2201      	movs	r2, #1
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <LoRA_Read_Register+0x4c>)
 8001136:	f00d feff 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 800113a:	f107 010f 	add.w	r1, r7, #15
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	2201      	movs	r2, #1
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <LoRA_Read_Register+0x4c>)
 8001144:	f00e f8f4 	bl	800f330 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <LoRA_Read_Register+0x48>)
 8001150:	f007 f970 	bl	8008434 <HAL_GPIO_WritePin>

	return reg_value;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	58020000 	.word	0x58020000
 8001164:	240010c8 	.word	0x240010c8

08001168 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <LoRA_Write_Register+0x54>)
 800118a:	f007 f953 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800118e:	1df9      	adds	r1, r7, #7
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	2201      	movs	r2, #1
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <LoRA_Write_Register+0x58>)
 8001196:	f00d fecf 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 800119a:	1db9      	adds	r1, r7, #6
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	2201      	movs	r2, #1
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <LoRA_Write_Register+0x58>)
 80011a2:	f00d fec9 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <LoRA_Write_Register+0x54>)
 80011ae:	f007 f941 	bl	8008434 <HAL_GPIO_WritePin>

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58020000 	.word	0x58020000
 80011c0:	240010c8 	.word	0x240010c8

080011c4 <LoRA_sleep>:


void LoRA_sleep(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff ffcc 	bl	8001168 <LoRA_Write_Register>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	17c8      	asrs	r0, r1, #31
 80011e0:	460a      	mov	r2, r1
 80011e2:	4603      	mov	r3, r0
 80011e4:	1355      	asrs	r5, r2, #13
 80011e6:	04d4      	lsls	r4, r2, #19
 80011e8:	4a18      	ldr	r2, [pc, #96]	; (800124c <LoRA_set_frequency+0x78>)
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fab1 	bl	8000758 <__aeabi_uldivmod>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80011fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	0c02      	lsrs	r2, r0, #16
 800120c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001210:	0c0b      	lsrs	r3, r1, #16
 8001212:	b2d3      	uxtb	r3, r2
 8001214:	4619      	mov	r1, r3
 8001216:	2006      	movs	r0, #6
 8001218:	f7ff ffa6 	bl	8001168 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 800121c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	0a02      	lsrs	r2, r0, #8
 800122a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800122e:	0a0b      	lsrs	r3, r1, #8
 8001230:	b2d3      	uxtb	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	2007      	movs	r0, #7
 8001236:	f7ff ff97 	bl	8001168 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800123a:	7a3b      	ldrb	r3, [r7, #8]
 800123c:	4619      	mov	r1, r3
 800123e:	2008      	movs	r0, #8
 8001240:	f7ff ff92 	bl	8001168 <LoRA_Write_Register>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bdb0      	pop	{r4, r5, r7, pc}
 800124c:	01e84800 	.word	0x01e84800

08001250 <LoRA_idle>:

void LoRA_idle(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001254:	2181      	movs	r1, #129	; 0x81
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff ff86 	bl	8001168 <LoRA_Write_Register>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 800126a:	231b      	movs	r3, #27
 800126c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b78      	cmp	r3, #120	; 0x78
 8001272:	d809      	bhi.n	8001288 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3b2d      	subs	r3, #45	; 0x2d
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <LoRA_setOCP+0x60>)
 800127a:	fb82 1203 	smull	r1, r2, r2, r3
 800127e:	1052      	asrs	r2, r2, #1
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e00b      	b.n	80012a0 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2bf0      	cmp	r3, #240	; 0xf0
 800128c:	d808      	bhi.n	80012a0 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	331e      	adds	r3, #30
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoRA_setOCP+0x60>)
 8001294:	fb82 1203 	smull	r1, r2, r2, r3
 8001298:	1092      	asrs	r2, r2, #2
 800129a:	17db      	asrs	r3, r3, #31
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4619      	mov	r1, r3
 80012b0:	200b      	movs	r0, #11
 80012b2:	f7ff ff59 	bl	8001168 <LoRA_Write_Register>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	66666667 	.word	0x66666667

080012c4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b11      	cmp	r3, #17
 80012d0:	dd0f      	ble.n	80012f2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b14      	cmp	r3, #20
 80012d6:	dd01      	ble.n	80012dc <LoRA_setTxPower+0x18>
        level = 20;
 80012d8:	2314      	movs	r3, #20
 80012da:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b03      	subs	r3, #3
 80012e0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80012e2:	2187      	movs	r1, #135	; 0x87
 80012e4:	204d      	movs	r0, #77	; 0x4d
 80012e6:	f7ff ff3f 	bl	8001168 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80012ea:	208c      	movs	r0, #140	; 0x8c
 80012ec:	f7ff ffb8 	bl	8001260 <LoRA_setOCP>
 80012f0:	e00b      	b.n	800130a <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	dc01      	bgt.n	80012fc <LoRA_setTxPower+0x38>
        level = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80012fc:	2184      	movs	r1, #132	; 0x84
 80012fe:	204d      	movs	r0, #77	; 0x4d
 8001300:	f7ff ff32 	bl	8001168 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8001304:	2064      	movs	r0, #100	; 0x64
 8001306:	f7ff ffab 	bl	8001260 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3b02      	subs	r3, #2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001318:	b25b      	sxtb	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	2009      	movs	r0, #9
 8001320:	f7ff ff22 	bl	8001168 <LoRA_Write_Register>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8001330:	201d      	movs	r0, #29
 8001332:	f7ff fef1 	bl	8001118 <LoRA_Read_Register>
 8001336:	4603      	mov	r3, r0
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	201d      	movs	r0, #29
 8001342:	f7ff ff11 	bl	8001168 <LoRA_Write_Register>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <LoRA_begin>:

void LoRA_begin(long frequency){
 800134c:	b580      	push	{r7, lr}
 800134e:	b09c      	sub	sp, #112	; 0x70
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	2101      	movs	r1, #1
 8001358:	4822      	ldr	r0, [pc, #136]	; (80013e4 <LoRA_begin+0x98>)
 800135a:	f007 f86b 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001364:	4820      	ldr	r0, [pc, #128]	; (80013e8 <LoRA_begin+0x9c>)
 8001366:	f007 f865 	bl	8008434 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800136a:	2042      	movs	r0, #66	; 0x42
 800136c:	f7ff fed4 	bl	8001118 <LoRA_Read_Register>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8001376:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	491b      	ldr	r1, [pc, #108]	; (80013ec <LoRA_begin+0xa0>)
 8001380:	4618      	mov	r0, r3
 8001382:	f016 fea7 	bl	80180d4 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ffca 	bl	8000324 <strlen>
 8001390:	4602      	mov	r2, r0
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f015 fbb7 	bl	8016b0c <CDC_Transmit_HS>

	LoRA_sleep();
 800139e:	f7ff ff11 	bl	80011c4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <LoRA_begin+0xa4>)
 80013a4:	f7ff ff16 	bl	80011d4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	200f      	movs	r0, #15
 80013ac:	f7ff fedc 	bl	8001168 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 80013b0:	2100      	movs	r1, #0
 80013b2:	200e      	movs	r0, #14
 80013b4:	f7ff fed8 	bl	8001168 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 80013b8:	200c      	movs	r0, #12
 80013ba:	f7ff fead 	bl	8001118 <LoRA_Read_Register>
 80013be:	4603      	mov	r3, r0
 80013c0:	f043 0303 	orr.w	r3, r3, #3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4619      	mov	r1, r3
 80013c8:	200c      	movs	r0, #12
 80013ca:	f7ff fecd 	bl	8001168 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 80013ce:	2104      	movs	r1, #4
 80013d0:	2026      	movs	r0, #38	; 0x26
 80013d2:	f7ff fec9 	bl	8001168 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 80013d6:	2011      	movs	r0, #17
 80013d8:	f7ff ff74 	bl	80012c4 <LoRA_setTxPower>

}
 80013dc:	bf00      	nop
 80013de:	3770      	adds	r7, #112	; 0x70
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58020000 	.word	0x58020000
 80013ec:	0801c378 	.word	0x0801c378
 80013f0:	33bca100 	.word	0x33bca100

080013f4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 80013f8:	f7ff ff98 	bl	800132c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	200d      	movs	r0, #13
 8001400:	f7ff feb2 	bl	8001168 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8001404:	2100      	movs	r1, #0
 8001406:	2022      	movs	r0, #34	; 0x22
 8001408:	f7ff feae 	bl	8001168 <LoRA_Write_Register>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001414:	2183      	movs	r1, #131	; 0x83
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fea6 	bl	8001168 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800141c:	bf00      	nop
 800141e:	2012      	movs	r0, #18
 8001420:	f7ff fe7a 	bl	8001118 <LoRA_Read_Register>
 8001424:	4603      	mov	r3, r0
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f7      	beq.n	800141e <LoRA_endPacket+0xe>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800142e:	2108      	movs	r1, #8
 8001430:	2012      	movs	r0, #18
 8001432:	f7ff fe99 	bl	8001168 <LoRA_Write_Register>

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <LoRA_parsePacket>:


int LoRA_parsePacket(){
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001444:	2012      	movs	r0, #18
 8001446:	f7ff fe67 	bl	8001118 <LoRA_Read_Register>
 800144a:	4603      	mov	r3, r0
 800144c:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800144e:	f7ff ff6d 	bl	800132c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	2012      	movs	r0, #18
 800145a:	f7ff fe85 	bl	8001168 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	2b00      	cmp	r3, #0
 8001466:	d014      	beq.n	8001492 <LoRA_parsePacket+0x58>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001472:	2013      	movs	r0, #19
 8001474:	f7ff fe50 	bl	8001118 <LoRA_Read_Register>
 8001478:	4603      	mov	r3, r0
 800147a:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800147c:	2010      	movs	r0, #16
 800147e:	f7ff fe4b 	bl	8001118 <LoRA_Read_Register>
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	200d      	movs	r0, #13
 8001488:	f7ff fe6e 	bl	8001168 <LoRA_Write_Register>
		LoRA_idle();
 800148c:	f7ff fee0 	bl	8001250 <LoRA_idle>
 8001490:	e00d      	b.n	80014ae <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fe40 	bl	8001118 <LoRA_Read_Register>
 8001498:	4603      	mov	r3, r0
 800149a:	2b86      	cmp	r3, #134	; 0x86
 800149c:	d007      	beq.n	80014ae <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800149e:	2100      	movs	r1, #0
 80014a0:	200d      	movs	r0, #13
 80014a2:	f7ff fe61 	bl	8001168 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80014a6:	2186      	movs	r1, #134	; 0x86
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fe5d 	bl	8001168 <LoRA_Write_Register>
	}
	return packetLenght;
 80014ae:	687b      	ldr	r3, [r7, #4]

}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 80014c0:	f7ff ff98 	bl	80013f4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e00a      	b.n	80014e0 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fe47 	bl	8001168 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7fe ff1f 	bl	8000324 <strlen>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d8ed      	bhi.n	80014ca <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7fe ff18 	bl	8000324 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	2022      	movs	r0, #34	; 0x22
 80014fc:	f7ff fe34 	bl	8001168 <LoRA_Write_Register>
    LoRA_endPacket();
 8001500:	f7ff ff86 	bl	8001410 <LoRA_endPacket>
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <create_matrix>:
        }
    }
}

matrix create_matrix(int rows, int collums, double * data)
{
 800150c:	b490      	push	{r4, r7}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
    matrix result;
    result.nu_rows=rows;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	617b      	str	r3, [r7, #20]
    result.nu_col=collums;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	61bb      	str	r3, [r7, #24]
    result.data=data;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	61fb      	str	r3, [r7, #28]
    return result;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	461c      	mov	r4, r3
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bc90      	pop	{r4, r7}
 800153e:	4770      	bx	lr

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001548:	4b47      	ldr	r3, [pc, #284]	; (8001668 <main+0x128>)
 800154a:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 800154e:	461d      	mov	r5, r3
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001558:	c403      	stmia	r4!, {r0, r1}
 800155a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f002 fc24 	bl	8003da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 fc64 	bl	8001e2c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001564:	f000 fcde 	bl	8001f24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f001 fa42 	bl	80029f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f001 f9e0 	bl	8002930 <MX_DMA_Init>
  MX_SPI3_Init();
 8001570:	f000 ff5e 	bl	8002430 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001574:	f000 fdee 	bl	8002154 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001578:	f001 f98e 	bl	8002898 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157c:	f000 fd04 	bl	8001f88 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001580:	f001 f868 	bl	8002654 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001584:	f000 fd78 	bl	8002078 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001588:	f000 fefc 	bl	8002384 <MX_SPI2_Init>
  MX_I2C2_Init();
 800158c:	f000 fe46 	bl	800221c <MX_I2C2_Init>
  MX_TIM2_Init();
 8001590:	f000 ffa4 	bl	80024dc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001594:	f001 f8da 	bl	800274c <MX_TIM5_Init>
  MX_TIM3_Init();
 8001598:	f000 fff8 	bl	800258c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800159c:	f015 f9f6 	bl	801698c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80015a0:	f000 fe9a 	bl	80022d8 <MX_SPI1_Init>
  MX_UART4_Init();
 80015a4:	f001 f92c 	bl	8002800 <MX_UART4_Init>
  MX_FATFS_Init();
 80015a8:	f012 ff84 	bl	80144b4 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80015ac:	f000 fe76 	bl	800229c <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
	const double SPEED = 2.0/2000;
 80015b6:	a32a      	add	r3, pc, #168	; (adr r3, 8001660 <main+0x120>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 80015d0:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <main+0x12c>)
 80015da:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80015de:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ea:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80015ee:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80015f2:	213c      	movs	r1, #60	; 0x3c
 80015f4:	2010      	movs	r0, #16
 80015f6:	f7ff fabd 	bl	8000b74 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80015fa:	2130      	movs	r1, #48	; 0x30
 80015fc:	2011      	movs	r0, #17
 80015fe:	f7ff fab9 	bl	8000b74 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001602:	2104      	movs	r1, #4
 8001604:	2013      	movs	r0, #19
 8001606:	f7ff fab5 	bl	8000b74 <LG2_Write_Register>

	HAL_Delay(3000);
 800160a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800160e:	f002 fc5d 	bl	8003ecc <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001612:	21bf      	movs	r1, #191	; 0xbf
 8001614:	201c      	movs	r0, #28
 8001616:	f7ff fa59 	bl	8000acc <HG2_Write_Register>
	HAL_Delay(2);
 800161a:	2002      	movs	r0, #2
 800161c:	f002 fc56 	bl	8003ecc <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001620:	2158      	movs	r1, #88	; 0x58
 8001622:	201b      	movs	r0, #27
 8001624:	f7ff fa52 	bl	8000acc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001628:	21d8      	movs	r1, #216	; 0xd8
 800162a:	201b      	movs	r0, #27
 800162c:	f7ff fa4e 	bl	8000acc <HG2_Write_Register>

	float rotZ = 0;
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8001638:	6013      	str	r3, [r2, #0]
	//uint32_t lastTime = 0;

	float calOmegaX = 0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8001642:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800164c:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8001656:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800165e:	e038      	b.n	80016d2 <main+0x192>
 8001660:	d2f1a9fc 	.word	0xd2f1a9fc
 8001664:	3f50624d 	.word	0x3f50624d
 8001668:	0801c450 	.word	0x0801c450
 800166c:	3ff00000 	.word	0x3ff00000
 8001670:	43fa0000 	.word	0x43fa0000
		calOmegaX += LG2_Get_Gyro_X();
 8001674:	f7ff faa8 	bl	8000bc8 <LG2_Get_Gyro_X>
 8001678:	eeb0 7a40 	vmov.f32	s14, s0
 800167c:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001688:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800168c:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 8001690:	f7ff fad2 	bl	8000c38 <LG2_Get_Gyro_Y>
 8001694:	eeb0 7a40 	vmov.f32	s14, s0
 8001698:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80016a8:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80016ac:	f7ff fafc 	bl	8000ca8 <LG2_Get_Gyro_Z>
 80016b0:	eeb0 7a40 	vmov.f32	s14, s0
 80016b4:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016c0:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80016c4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80016c8:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80016d2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80016d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016da:	dbcb      	blt.n	8001674 <main+0x134>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80016dc:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	ed5f 6a1e 	vldr	s13, [pc, #-120]	; 8001670 <main+0x130>
 80016e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ec:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80016f0:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80016f4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80016f8:	ed93 7a00 	vldr	s14, [r3]
 80016fc:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 8001670 <main+0x130>
 8001700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001704:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001708:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800170c:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8001670 <main+0x130>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8001720:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	2101      	movs	r1, #1
 8001728:	48c7      	ldr	r0, [pc, #796]	; (8001a48 <main+0x508>)
 800172a:	f006 fe83 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800172e:	20c8      	movs	r0, #200	; 0xc8
 8001730:	f002 fbcc 	bl	8003ecc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	48c3      	ldr	r0, [pc, #780]	; (8001a48 <main+0x508>)
 800173a:	f006 fe7b 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800173e:	20c8      	movs	r0, #200	; 0xc8
 8001740:	f002 fbc4 	bl	8003ecc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	2101      	movs	r1, #1
 8001748:	48bf      	ldr	r0, [pc, #764]	; (8001a48 <main+0x508>)
 800174a:	f006 fe73 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800174e:	20c8      	movs	r0, #200	; 0xc8
 8001750:	f002 fbbc 	bl	8003ecc <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	2104      	movs	r1, #4
 8001758:	48bc      	ldr	r0, [pc, #752]	; (8001a4c <main+0x50c>)
 800175a:	f006 fe6b 	bl	8008434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	2108      	movs	r1, #8
 8001762:	48ba      	ldr	r0, [pc, #744]	; (8001a4c <main+0x50c>)
 8001764:	f006 fe66 	bl	8008434 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001768:	2100      	movs	r1, #0
 800176a:	48b9      	ldr	r0, [pc, #740]	; (8001a50 <main+0x510>)
 800176c:	f00e f8b0 	bl	800f8d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001770:	2104      	movs	r1, #4
 8001772:	48b7      	ldr	r0, [pc, #732]	; (8001a50 <main+0x510>)
 8001774:	f00e f8ac 	bl	800f8d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001778:	2108      	movs	r1, #8
 800177a:	48b5      	ldr	r0, [pc, #724]	; (8001a50 <main+0x510>)
 800177c:	f00e f8a8 	bl	800f8d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001780:	210c      	movs	r1, #12
 8001782:	48b3      	ldr	r0, [pc, #716]	; (8001a50 <main+0x510>)
 8001784:	f00e f8a4 	bl	800f8d0 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001788:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8001a54 <main+0x514>
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fac3 	bl	8000d18 <setServo>
    setServo(2, 180);
 8001792:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8001a58 <main+0x518>
 8001796:	2002      	movs	r0, #2
 8001798:	f7ff fabe 	bl	8000d18 <setServo>
    setServo(3, 0);
 800179c:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8001a5c <main+0x51c>
 80017a0:	2003      	movs	r0, #3
 80017a2:	f7ff fab9 	bl	8000d18 <setServo>
    setServo(4, 45);
 80017a6:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8001a60 <main+0x520>
 80017aa:	2004      	movs	r0, #4
 80017ac:	f7ff fab4 	bl	8000d18 <setServo>

    LoRA_begin(868000000);
 80017b0:	48ac      	ldr	r0, [pc, #688]	; (8001a64 <main+0x524>)
 80017b2:	f7ff fdcb 	bl	800134c <LoRA_begin>

    //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

    double angular_change[3]={0,0,0};
 80017b6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80017ba:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]
 80017ca:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80017ce:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80017de:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80017e2:	f5a3 7128 	sub.w	r1, r3, #672	; 0x2a0
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double current[9] = {1,0,0,0,1,0,0,0,1};
 80017f2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80017f6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80017fa:	4a9b      	ldr	r2, [pc, #620]	; (8001a68 <main+0x528>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	4611      	mov	r1, r2
 8001800:	2348      	movs	r3, #72	; 0x48
 8001802:	461a      	mov	r2, r3
 8001804:	f015 fe00 	bl	8017408 <memcpy>
    double x[3]= {1,0,0};
 8001808:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800180c:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b95      	ldr	r3, [pc, #596]	; (8001a6c <main+0x52c>)
 8001816:	e9c1 2300 	strd	r2, r3, [r1]
 800181a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800181e:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800182e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001832:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double y[3]= {0,1,0};
 8001842:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001846:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9c1 2300 	strd	r2, r3, [r1]
 8001856:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800185a:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b82      	ldr	r3, [pc, #520]	; (8001a6c <main+0x52c>)
 8001864:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001868:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800186c:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double z[3]= {0,0,1};
 800187c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001880:	f5a3 714c 	sub.w	r1, r3, #816	; 0x330
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c1 2300 	strd	r2, r3, [r1]
 8001890:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001894:	f5a3 714c 	sub.w	r1, r3, #816	; 0x330
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80018a4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80018a8:	f5a3 714c 	sub.w	r1, r3, #816	; 0x330
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b6e      	ldr	r3, [pc, #440]	; (8001a6c <main+0x52c>)
 80018b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    matrix current_matrix = create_matrix(3,3,&current);
 80018b6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80018ba:	f5a3 704f 	sub.w	r0, r3, #828	; 0x33c
 80018be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018c2:	2203      	movs	r2, #3
 80018c4:	2103      	movs	r1, #3
 80018c6:	f7ff fe21 	bl	800150c <create_matrix>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
	long last_packet = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	int ARMED = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	long lastTime = HAL_GetTick();
 80018dc:	f002 faea 	bl	8003eb4 <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	long lastPrint = HAL_GetTick();
 80018e6:	f002 fae5 	bl	8003eb4 <HAL_GetTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 80018f0:	f002 fae0 	bl	8003eb4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001904:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001a70 <main+0x530>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001910:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001914:	f002 face 	bl	8003eb4 <HAL_GetTick>
 8001918:	4603      	mov	r3, r0
 800191a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458

		//write_EEPROM(1, 1);

	     // Start ADC Conversion
		//HAL_Delay(100);
		if(HAL_GetTick() - last_packet > 1000){
 800191e:	f002 fac9 	bl	8003eb4 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800192e:	d902      	bls.n	8001936 <main+0x3f6>
			connected = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
		}

		if(connected){
 8001936:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <main+0x412>
			LED_Color_Data[2][0] = 255;
 800193e:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <main+0x534>)
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	619a      	str	r2, [r3, #24]
			LED_Color_Data[2][1] = 0;
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <main+0x534>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
			LED_Color_Data[2][2] = 0;
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <main+0x534>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
 8001950:	e008      	b.n	8001964 <main+0x424>
		}else{
			LED_Color_Data[2][0] = 120;
 8001952:	4b48      	ldr	r3, [pc, #288]	; (8001a74 <main+0x534>)
 8001954:	2278      	movs	r2, #120	; 0x78
 8001956:	619a      	str	r2, [r3, #24]
			LED_Color_Data[2][1] = 255;
 8001958:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <main+0x534>)
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	61da      	str	r2, [r3, #28]
			LED_Color_Data[2][2] = 0;
 800195e:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <main+0x534>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
		}

		if(!ARMED){
 8001964:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d143      	bne.n	80019f4 <main+0x4b4>
			HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2102      	movs	r1, #2
 8001970:	4841      	ldr	r0, [pc, #260]	; (8001a78 <main+0x538>)
 8001972:	f006 fd5f 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2104      	movs	r1, #4
 800197a:	483f      	ldr	r0, [pc, #252]	; (8001a78 <main+0x538>)
 800197c:	f006 fd5a 	bl	8008434 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2102      	movs	r1, #2
 8001984:	483d      	ldr	r0, [pc, #244]	; (8001a7c <main+0x53c>)
 8001986:	f006 fd55 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001990:	483b      	ldr	r0, [pc, #236]	; (8001a80 <main+0x540>)
 8001992:	f006 fd4f 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199c:	4838      	ldr	r0, [pc, #224]	; (8001a80 <main+0x540>)
 800199e:	f006 fd49 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a8:	4835      	ldr	r0, [pc, #212]	; (8001a80 <main+0x540>)
 80019aa:	f006 fd43 	bl	8008434 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2102      	movs	r1, #2
 80019b2:	4826      	ldr	r0, [pc, #152]	; (8001a4c <main+0x50c>)
 80019b4:	f006 fd3e 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019be:	4831      	ldr	r0, [pc, #196]	; (8001a84 <main+0x544>)
 80019c0:	f006 fd38 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ca:	482e      	ldr	r0, [pc, #184]	; (8001a84 <main+0x544>)
 80019cc:	f006 fd32 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d6:	482b      	ldr	r0, [pc, #172]	; (8001a84 <main+0x544>)
 80019d8:	f006 fd2c 	bl	8008434 <HAL_GPIO_WritePin>

			LED_Color_Data[7][0] = 255;
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <main+0x534>)
 80019de:	22ff      	movs	r2, #255	; 0xff
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
			LED_Color_Data[7][1] = 0;
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <main+0x534>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58
			LED_Color_Data[7][2] = 0;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <main+0x534>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	65da      	str	r2, [r3, #92]	; 0x5c
			setLEDs();
 80019ee:	f7ff f9db 	bl	8000da8 <setLEDs>
 80019f2:	e014      	b.n	8001a1e <main+0x4de>
		}else{

			HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2102      	movs	r1, #2
 80019f8:	481f      	ldr	r0, [pc, #124]	; (8001a78 <main+0x538>)
 80019fa:	f006 fd1b 	bl	8008434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	2104      	movs	r1, #4
 8001a02:	481d      	ldr	r0, [pc, #116]	; (8001a78 <main+0x538>)
 8001a04:	f006 fd16 	bl	8008434 <HAL_GPIO_WritePin>


			LED_Color_Data[7][0] = 0;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <main+0x534>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
			LED_Color_Data[7][1] = 255;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <main+0x534>)
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58
			LED_Color_Data[7][2] = 0;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <main+0x534>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	65da      	str	r2, [r3, #92]	; 0x5c
			setLEDs();
 8001a1a:	f7ff f9c5 	bl	8000da8 <setLEDs>
		}

		int packet_lenght = LoRA_parsePacket();
 8001a1e:	f7ff fd0c 	bl	800143a <LoRA_parsePacket>
 8001a22:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
		char LoRA_data[50];
		if(packet_lenght){
 8001a26:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f43f af60 	beq.w	80018f0 <main+0x3b0>


			connected = 1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
			last_packet = HAL_GetTick();
 8001a36:	f002 fa3d 	bl	8003eb4 <HAL_GetTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
			for(int i = 0; i < packet_lenght; i++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001a46:	e032      	b.n	8001aae <main+0x56e>
 8001a48:	58020c00 	.word	0x58020c00
 8001a4c:	58021800 	.word	0x58021800
 8001a50:	240011e8 	.word	0x240011e8
 8001a54:	42b40000 	.word	0x42b40000
 8001a58:	43340000 	.word	0x43340000
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	42340000 	.word	0x42340000
 8001a64:	33bca100 	.word	0x33bca100
 8001a68:	0801c470 	.word	0x0801c470
 8001a6c:	3ff00000 	.word	0x3ff00000
 8001a70:	447a0000 	.word	0x447a0000
 8001a74:	24000bd0 	.word	0x24000bd0
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	58021400 	.word	0x58021400
 8001a84:	58021000 	.word	0x58021000
				LoRA_data[i] = LoRA_Read_Register(0x00);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fb45 	bl	8001118 <LoRA_Read_Register>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001a96:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 8001a9a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001a9e:	4413      	add	r3, r2
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < packet_lenght; i++){
 8001aa4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001aae:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001ab2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbe6      	blt.n	8001a88 <main+0x548>
			}
			LoRA_data[packet_lenght] = '\0';
 8001aba:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001abe:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 8001ac2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001ac6:	4413      	add	r3, r2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		    //sprintf( data_gyro,  "%d   %d\n", strlen(LoRA_data), packet_lenght);
		    //CDC_Transmit_HS(data_gyro, strlen(data_gyro));

			//CDC_Transmit_HS(LoRA_data, packet_lenght);

		    if(strcmp(LoRA_data, "ARM") == 0){
 8001acc:	463b      	mov	r3, r7
 8001ace:	49c5      	ldr	r1, [pc, #788]	; (8001de4 <main+0x8a4>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fc1d 	bl	8000310 <strcmp>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <main+0x5ac>
		    	ARMED = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
		    	setLEDs();
 8001ae2:	f7ff f961 	bl	8000da8 <setLEDs>
		    	LoRA_sendPacket("ARM SUCCESS");
 8001ae6:	48c0      	ldr	r0, [pc, #768]	; (8001de8 <main+0x8a8>)
 8001ae8:	f7ff fce6 	bl	80014b8 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "DISARM") == 0){
 8001aec:	463b      	mov	r3, r7
 8001aee:	49bf      	ldr	r1, [pc, #764]	; (8001dec <main+0x8ac>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fc0d 	bl	8000310 <strcmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <main+0x5c8>
		    	ARMED = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
		    	LoRA_sendPacket("DISARM SUCCESS");
 8001b02:	48bb      	ldr	r0, [pc, #748]	; (8001df0 <main+0x8b0>)
 8001b04:	f7ff fcd8 	bl	80014b8 <LoRA_sendPacket>
		    }
		    if(strcmp(LoRA_data, "CONT") == 0){
 8001b08:	463b      	mov	r3, r7
 8001b0a:	49ba      	ldr	r1, [pc, #744]	; (8001df4 <main+0x8b4>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fbff 	bl	8000310 <strcmp>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f040 808f 	bne.w	8001c38 <main+0x6f8>

		    	char cont_str[150];
		    	uint8_t CONTS[8];
		    	CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	48b6      	ldr	r0, [pc, #728]	; (8001df8 <main+0x8b8>)
 8001b1e:	f006 fc71 	bl	8008404 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b2a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001b2e:	701a      	strb	r2, [r3, #0]
		    	CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b34:	48b1      	ldr	r0, [pc, #708]	; (8001dfc <main+0x8bc>)
 8001b36:	f006 fc65 	bl	8008404 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b42:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001b46:	705a      	strb	r2, [r3, #1]
		    	CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b4c:	48ab      	ldr	r0, [pc, #684]	; (8001dfc <main+0x8bc>)
 8001b4e:	f006 fc59 	bl	8008404 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b5a:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001b5e:	709a      	strb	r2, [r3, #2]
		    	CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001b60:	2101      	movs	r1, #1
 8001b62:	48a7      	ldr	r0, [pc, #668]	; (8001e00 <main+0x8c0>)
 8001b64:	f006 fc4e 	bl	8008404 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b70:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001b74:	70da      	strb	r2, [r3, #3]
		    	CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	48a2      	ldr	r0, [pc, #648]	; (8001e04 <main+0x8c4>)
 8001b7a:	f006 fc43 	bl	8008404 <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b86:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001b8a:	711a      	strb	r2, [r3, #4]
		    	CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b90:	489c      	ldr	r0, [pc, #624]	; (8001e04 <main+0x8c4>)
 8001b92:	f006 fc37 	bl	8008404 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001b9e:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001ba2:	715a      	strb	r2, [r3, #5]
		    	CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba8:	4896      	ldr	r0, [pc, #600]	; (8001e04 <main+0x8c4>)
 8001baa:	f006 fc2b 	bl	8008404 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001bb6:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001bba:	719a      	strb	r2, [r3, #6]
		    	CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc0:	4890      	ldr	r0, [pc, #576]	; (8001e04 <main+0x8c4>)
 8001bc2:	f006 fc1f 	bl	8008404 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001bce:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8001bd2:	71da      	strb	r2, [r3, #7]

	    		char message[100];
		    	for(int i=0; i<8; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001bda:	e029      	b.n	8001c30 <main+0x6f0>
		    	{
		    		if(CONTS[i])
 8001bdc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001be0:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8001be4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <main+0x6c4>
		    		{
		    			sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 8001bf0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bfa:	4983      	ldr	r1, [pc, #524]	; (8001e08 <main+0x8c8>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f016 fa69 	bl	80180d4 <siprintf>
 8001c02:	e008      	b.n	8001c16 <main+0x6d6>
		    		}
		    		else
		    		{
		    			sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 8001c04:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c0e:	497f      	ldr	r1, [pc, #508]	; (8001e0c <main+0x8cc>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f016 fa5f 	bl	80180d4 <siprintf>
		    		}

		    		LoRA_sendPacket(message);
 8001c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc4c 	bl	80014b8 <LoRA_sendPacket>
		    		HAL_Delay(100);
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	f002 f953 	bl	8003ecc <HAL_Delay>
		    	for(int i=0; i<8; i++)
 8001c26:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001c30:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c34:	2b07      	cmp	r3, #7
 8001c36:	ddd1      	ble.n	8001bdc <main+0x69c>


		    }


        if(strcmp(LoRA_data, "STATIC_FIRE") == 0)
 8001c38:	463b      	mov	r3, r7
 8001c3a:	4975      	ldr	r1, [pc, #468]	; (8001e10 <main+0x8d0>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fb67 	bl	8000310 <strcmp>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d15c      	bne.n	8001d02 <main+0x7c2>
        {
          if(ARMED)
 8001c48:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d058      	beq.n	8001d02 <main+0x7c2>
          {
            LoRA_sendPacket("PYRO 1 FIRED");
 8001c50:	4870      	ldr	r0, [pc, #448]	; (8001e14 <main+0x8d4>)
 8001c52:	f7ff fc31 	bl	80014b8 <LoRA_sendPacket>
            //HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 1);
            char LoRA_data[50];
            int logging = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
            while(logging)
 8001c5c:	e04d      	b.n	8001cfa <main+0x7ba>
            {
            	int packet_lenght;
            	long startTime = HAL_GetTick();
 8001c5e:	f002 f929 	bl	8003eb4 <HAL_GetTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
            	while( HAL_GetTick() - startTime < 10){
 8001c68:	e006      	b.n	8001c78 <main+0x738>
            		packet_lenght = LoRA_parsePacket();
 8001c6a:	f7ff fbe6 	bl	800143a <LoRA_parsePacket>
 8001c6e:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
                	HAL_Delay(0.1);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f002 f92a 	bl	8003ecc <HAL_Delay>
            	while( HAL_GetTick() - startTime < 10){
 8001c78:	f002 f91c 	bl	8003eb4 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	d9f0      	bls.n	8001c6a <main+0x72a>
            }
              if(packet_lenght)
 8001c88:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d031      	beq.n	8001cf4 <main+0x7b4>
              {
                //flush data from buffer
                //last_packet = HAL_GetTick();
                for(int i = 0; i < packet_lenght; i++){
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001c96:	e012      	b.n	8001cbe <main+0x77e>
                  LoRA_data[i] = LoRA_Read_Register(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fa3d 	bl	8001118 <LoRA_Read_Register>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001ca6:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8001caa:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001cae:	4413      	add	r3, r2
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < packet_lenght; i++){
 8001cb4:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001cbe:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8001cc2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbe6      	blt.n	8001c98 <main+0x758>
                }
                LoRA_data[packet_lenght] = '\0';
 8001cca:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001cce:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8001cd2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
                if(strcmp(LoRA_data, "STOP") == 0)
 8001cdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce0:	494d      	ldr	r1, [pc, #308]	; (8001e18 <main+0x8d8>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fb14 	bl	8000310 <strcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <main+0x7b4>
                {
                  logging=0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
                }
              }
              LoRA_sendPacket("Fake data: 21231, 99999");
 8001cf4:	4849      	ldr	r0, [pc, #292]	; (8001e1c <main+0x8dc>)
 8001cf6:	f7ff fbdf 	bl	80014b8 <LoRA_sendPacket>
            while(logging)
 8001cfa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ad      	bne.n	8001c5e <main+0x71e>
        }


		    int channel_num;
		    char fire_data[50];
		    sscanf(LoRA_data, "%s %d", fire_data, &channel_num);
 8001d02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	4944      	ldr	r1, [pc, #272]	; (8001e20 <main+0x8e0>)
 8001d0e:	f016 fa01 	bl	8018114 <siscanf>
		    if(strcmp(fire_data, "FIRE") == 0){
 8001d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d16:	4943      	ldr	r1, [pc, #268]	; (8001e24 <main+0x8e4>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe faf9 	bl	8000310 <strcmp>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f ade5 	bne.w	80018f0 <main+0x3b0>
		    	if(ARMED){
 8001d26:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d053      	beq.n	8001dd6 <main+0x896>
					switch (channel_num) {
 8001d2e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001d32:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	d84f      	bhi.n	8001dde <main+0x89e>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <main+0x804>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d65 	.word	0x08001d65
 8001d48:	08001d77 	.word	0x08001d77
 8001d4c:	08001d85 	.word	0x08001d85
 8001d50:	08001d93 	.word	0x08001d93
 8001d54:	08001da1 	.word	0x08001da1
 8001d58:	08001dad 	.word	0x08001dad
 8001d5c:	08001dbb 	.word	0x08001dbb
 8001d60:	08001dc9 	.word	0x08001dc9
						case 1:
				    		LoRA_sendPacket("PYRO 1 FIRED");
 8001d64:	482b      	ldr	r0, [pc, #172]	; (8001e14 <main+0x8d4>)
 8001d66:	f7ff fba7 	bl	80014b8 <LoRA_sendPacket>

							HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 1);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	4822      	ldr	r0, [pc, #136]	; (8001df8 <main+0x8b8>)
 8001d70:	f006 fb60 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001d74:	e034      	b.n	8001de0 <main+0x8a0>
						case 2:
							HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 1);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7c:	481f      	ldr	r0, [pc, #124]	; (8001dfc <main+0x8bc>)
 8001d7e:	f006 fb59 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001d82:	e02d      	b.n	8001de0 <main+0x8a0>
						case 3:
							HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8a:	481c      	ldr	r0, [pc, #112]	; (8001dfc <main+0x8bc>)
 8001d8c:	f006 fb52 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001d90:	e026      	b.n	8001de0 <main+0x8a0>
						case 4:
							HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 1);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d98:	4818      	ldr	r0, [pc, #96]	; (8001dfc <main+0x8bc>)
 8001d9a:	f006 fb4b 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001d9e:	e01f      	b.n	8001de0 <main+0x8a0>

						case 5:
							HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	2102      	movs	r1, #2
 8001da4:	4816      	ldr	r0, [pc, #88]	; (8001e00 <main+0x8c0>)
 8001da6:	f006 fb45 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001daa:	e019      	b.n	8001de0 <main+0x8a0>
						case 6:
							HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db2:	4814      	ldr	r0, [pc, #80]	; (8001e04 <main+0x8c4>)
 8001db4:	f006 fb3e 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001db8:	e012      	b.n	8001de0 <main+0x8a0>
						case 7:
							HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 1);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <main+0x8c4>)
 8001dc2:	f006 fb37 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001dc6:	e00b      	b.n	8001de0 <main+0x8a0>
						case 8:
							HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <main+0x8c4>)
 8001dd0:	f006 fb30 	bl	8008434 <HAL_GPIO_WritePin>
							break;
 8001dd4:	e004      	b.n	8001de0 <main+0x8a0>
						default:
							break;
					}
		    	}else{
		    		LoRA_sendPacket("CANNOT FIRE, BOARD NOT ARMED");
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <main+0x8e8>)
 8001dd8:	f7ff fb6e 	bl	80014b8 <LoRA_sendPacket>
 8001ddc:	e588      	b.n	80018f0 <main+0x3b0>
							break;
 8001dde:	bf00      	nop
	while (1) {
 8001de0:	e586      	b.n	80018f0 <main+0x3b0>
 8001de2:	bf00      	nop
 8001de4:	0801c37c 	.word	0x0801c37c
 8001de8:	0801c380 	.word	0x0801c380
 8001dec:	0801c38c 	.word	0x0801c38c
 8001df0:	0801c394 	.word	0x0801c394
 8001df4:	0801c3a4 	.word	0x0801c3a4
 8001df8:	58020400 	.word	0x58020400
 8001dfc:	58021400 	.word	0x58021400
 8001e00:	58021800 	.word	0x58021800
 8001e04:	58021000 	.word	0x58021000
 8001e08:	0801c3ac 	.word	0x0801c3ac
 8001e0c:	0801c3cc 	.word	0x0801c3cc
 8001e10:	0801c3e4 	.word	0x0801c3e4
 8001e14:	0801c3f0 	.word	0x0801c3f0
 8001e18:	0801c400 	.word	0x0801c400
 8001e1c:	0801c408 	.word	0x0801c408
 8001e20:	0801c420 	.word	0x0801c420
 8001e24:	0801c428 	.word	0x0801c428
 8001e28:	0801c430 	.word	0x0801c430

08001e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09c      	sub	sp, #112	; 0x70
 8001e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	224c      	movs	r2, #76	; 0x4c
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f015 faf2 	bl	8017424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2220      	movs	r2, #32
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f015 faec 	bl	8017424 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f007 feeb 	bl	8009c28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <SystemClock_Config+0xf4>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <SystemClock_Config+0xf4>)
 8001e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <SystemClock_Config+0xf4>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e72:	bf00      	nop
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <SystemClock_Config+0xf4>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e80:	d1f8      	bne.n	8001e74 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001e82:	2323      	movs	r3, #35	; 0x23
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001e90:	2340      	movs	r3, #64	; 0x40
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001eac:	230c      	movs	r3, #12
 8001eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f007 fef9 	bl	8009cbc <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ed0:	f000 ff02 	bl	8002cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	233f      	movs	r3, #63	; 0x3f
 8001ed6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ee4:	2340      	movs	r3, #64	; 0x40
 8001ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ef2:	2340      	movs	r3, #64	; 0x40
 8001ef4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f008 fab8 	bl	800a470 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001f06:	f000 fee7 	bl	8002cd8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001f0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2000      	movs	r0, #0
 8001f12:	f008 fc63 	bl	800a7dc <HAL_RCC_MCOConfig>
}
 8001f16:	bf00      	nop
 8001f18:	3770      	adds	r7, #112	; 0x70
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	58024800 	.word	0x58024800

08001f24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b0ae      	sub	sp, #184	; 0xb8
 8001f28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	22b8      	movs	r2, #184	; 0xb8
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f015 fa77 	bl	8017424 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001f36:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f42:	2304      	movs	r3, #4
 8001f44:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f46:	230c      	movs	r3, #12
 8001f48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f66:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4618      	mov	r0, r3
 8001f72:	f008 fe73 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001f7c:	f000 feac 	bl	8002cd8 <Error_Handler>
  }
}
 8001f80:	bf00      	nop
 8001f82:	37b8      	adds	r7, #184	; 0xb8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2224      	movs	r2, #36	; 0x24
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f015 fa3f 	bl	8017424 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fa8:	4a31      	ldr	r2, [pc, #196]	; (8002070 <MX_ADC1_Init+0xe8>)
 8001faa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fae:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001fb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_ADC1_Init+0xe4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_ADC1_Init+0xe4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_ADC1_Init+0xe4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_ADC1_Init+0xe4>)
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002006:	4819      	ldr	r0, [pc, #100]	; (800206c <MX_ADC1_Init+0xe4>)
 8002008:	f002 f9e0 	bl	80043cc <HAL_ADC_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002012:	f000 fe61 	bl	8002cd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	4619      	mov	r1, r3
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <MX_ADC1_Init+0xe4>)
 8002022:	f003 fa1b 	bl	800545c <HAL_ADCEx_MultiModeConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800202c:	f000 fe54 	bl	8002cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <MX_ADC1_Init+0xec>)
 8002032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002034:	2306      	movs	r3, #6
 8002036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002038:	2303      	movs	r3, #3
 800203a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800203c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002040:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002042:	2304      	movs	r3, #4
 8002044:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_ADC1_Init+0xe4>)
 8002056:	f002 fbc1 	bl	80047dc <HAL_ADC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002060:	f000 fe3a 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	24000c78 	.word	0x24000c78
 8002070:	40022000 	.word	0x40022000
 8002074:	2a000400 	.word	0x2a000400

08002078 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2224      	movs	r2, #36	; 0x24
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f015 f9cd 	bl	8017424 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <MX_ADC3_Init+0xd0>)
 800208c:	4a2f      	ldr	r2, [pc, #188]	; (800214c <MX_ADC3_Init+0xd4>)
 800208e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <MX_ADC3_Init+0xd0>)
 8002092:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002096:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <MX_ADC3_Init+0xd0>)
 800209a:	2208      	movs	r2, #8
 800209c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020ac:	2204      	movs	r2, #4
 80020ae:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <MX_ADC3_Init+0xd0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020fe:	4812      	ldr	r0, [pc, #72]	; (8002148 <MX_ADC3_Init+0xd0>)
 8002100:	f002 f964 	bl	80043cc <HAL_ADC_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800210a:	f000 fde5 	bl	8002cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MX_ADC3_Init+0xd8>)
 8002110:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002112:	2306      	movs	r3, #6
 8002114:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800211a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800211e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002120:	2304      	movs	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_ADC3_Init+0xd0>)
 8002132:	f002 fb53 	bl	80047dc <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 800213c:	f000 fdcc 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	24000ce8 	.word	0x24000ce8
 800214c:	58026000 	.word	0x58026000
 8002150:	04300002 	.word	0x04300002

08002154 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 800215a:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <MX_FDCAN3_Init+0xc4>)
 800215c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 800216c:	2200      	movs	r2, #0
 800216e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002172:	2200      	movs	r2, #0
 8002174:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8002176:	4b27      	ldr	r3, [pc, #156]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002178:	2200      	movs	r2, #0
 800217a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 800217e:	2210      	movs	r2, #16
 8002180:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002184:	2201      	movs	r2, #1
 8002186:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 800218a:	2202      	movs	r2, #2
 800218c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002190:	2202      	movs	r2, #2
 8002192:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002196:	2201      	movs	r2, #1
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 800219c:	2201      	movs	r2, #1
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80021a0:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021c6:	2204      	movs	r2, #4
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021d8:	2200      	movs	r2, #0
 80021da:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021de:	2204      	movs	r2, #4
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 80021fc:	2204      	movs	r2, #4
 80021fe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_FDCAN3_Init+0xc0>)
 8002202:	f005 fbf3 	bl	80079ec <HAL_FDCAN_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 800220c:	f000 fd64 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	24000e48 	.word	0x24000e48
 8002218:	4000d400 	.word	0x4000d400

0800221c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_I2C2_Init+0x74>)
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <MX_I2C2_Init+0x78>)
 8002224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_I2C2_Init+0x74>)
 8002228:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <MX_I2C2_Init+0x7c>)
 800222a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_I2C2_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_I2C2_Init+0x74>)
 8002234:	2201      	movs	r2, #1
 8002236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_I2C2_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_I2C2_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_I2C2_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_I2C2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_I2C2_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <MX_I2C2_Init+0x74>)
 8002258:	f006 f906 	bl	8008468 <HAL_I2C_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002262:	f000 fd39 	bl	8002cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <MX_I2C2_Init+0x74>)
 800226a:	f006 f98d 	bl	8008588 <HAL_I2CEx_ConfigAnalogFilter>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002274:	f000 fd30 	bl	8002cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002278:	2100      	movs	r1, #0
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_I2C2_Init+0x74>)
 800227c:	f006 f9cf 	bl	800861e <HAL_I2CEx_ConfigDigitalFilter>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002286:	f000 fd27 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	24000ee8 	.word	0x24000ee8
 8002294:	40005800 	.word	0x40005800
 8002298:	20303e5d 	.word	0x20303e5d

0800229c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_SDMMC2_SD_Init+0x34>)
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <MX_SDMMC2_SD_Init+0x38>)
 80022a4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_SDMMC2_SD_Init+0x34>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_SDMMC2_SD_Init+0x34>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <MX_SDMMC2_SD_Init+0x34>)
 80022b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b8:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <MX_SDMMC2_SD_Init+0x34>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <MX_SDMMC2_SD_Init+0x34>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	24000f3c 	.word	0x24000f3c
 80022d4:	48022400 	.word	0x48022400

080022d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <MX_SPI1_Init+0xa4>)
 80022de:	4a28      	ldr	r2, [pc, #160]	; (8002380 <MX_SPI1_Init+0xa8>)
 80022e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <MX_SPI1_Init+0xa4>)
 80022e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <MX_SPI1_Init+0xa4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <MX_SPI1_Init+0xa4>)
 80022f2:	2207      	movs	r2, #7
 80022f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_SPI1_Init+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <MX_SPI1_Init+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <MX_SPI1_Init+0xa4>)
 8002304:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002308:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MX_SPI1_Init+0xa4>)
 800230c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002310:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <MX_SPI1_Init+0xa4>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_SPI1_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <MX_SPI1_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_SPI1_Init+0xa4>)
 8002326:	2200      	movs	r2, #0
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <MX_SPI1_Init+0xa4>)
 800232c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002330:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <MX_SPI1_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_SPI1_Init+0xa4>)
 800233a:	2200      	movs	r2, #0
 800233c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_SPI1_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <MX_SPI1_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_SPI1_Init+0xa4>)
 800234c:	2200      	movs	r2, #0
 800234e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <MX_SPI1_Init+0xa4>)
 8002352:	2200      	movs	r2, #0
 8002354:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_SPI1_Init+0xa4>)
 8002358:	2200      	movs	r2, #0
 800235a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <MX_SPI1_Init+0xa4>)
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_SPI1_Init+0xa4>)
 8002364:	2200      	movs	r2, #0
 8002366:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002368:	4804      	ldr	r0, [pc, #16]	; (800237c <MX_SPI1_Init+0xa4>)
 800236a:	f00c fcc1 	bl	800ecf0 <HAL_SPI_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002374:	f000 fcb0 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	24000fb8 	.word	0x24000fb8
 8002380:	40013000 	.word	0x40013000

08002384 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <MX_SPI2_Init+0xa4>)
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <MX_SPI2_Init+0xa8>)
 800238c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <MX_SPI2_Init+0xa4>)
 8002390:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002394:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <MX_SPI2_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <MX_SPI2_Init+0xa4>)
 800239e:	2207      	movs	r2, #7
 80023a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023b8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80023bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <MX_SPI2_Init+0xa4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_SPI2_Init+0xa4>)
 8002404:	2200      	movs	r2, #0
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MX_SPI2_Init+0xa4>)
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_SPI2_Init+0xa4>)
 8002410:	2200      	movs	r2, #0
 8002412:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_SPI2_Init+0xa4>)
 8002416:	f00c fc6b 	bl	800ecf0 <HAL_SPI_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002420:	f000 fc5a 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	24001040 	.word	0x24001040
 800242c:	40003800 	.word	0x40003800

08002430 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <MX_SPI3_Init+0xa8>)
 8002438:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800243c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002440:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800244a:	2207      	movs	r2, #7
 800244c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800245c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002460:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002464:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002468:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002478:	2200      	movs	r2, #0
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800247e:	2200      	movs	r2, #0
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800248c:	2200      	movs	r2, #0
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024c2:	f00c fc15 	bl	800ecf0 <HAL_SPI_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80024cc:	f000 fc04 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	240010c8 	.word	0x240010c8
 80024d8:	40003c00 	.word	0x40003c00

080024dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e2:	f107 031c 	add.w	r3, r7, #28
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ee:	463b      	mov	r3, r7
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_TIM2_Init+0xac>)
 8002502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_TIM2_Init+0xac>)
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_TIM2_Init+0xac>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <MX_TIM2_Init+0xac>)
 8002516:	225a      	movs	r2, #90	; 0x5a
 8002518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM2_Init+0xac>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM2_Init+0xac>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002526:	4818      	ldr	r0, [pc, #96]	; (8002588 <MX_TIM2_Init+0xac>)
 8002528:	f00d f97b 	bl	800f822 <HAL_TIM_PWM_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002532:	f000 fbd1 	bl	8002cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800253e:	f107 031c 	add.w	r3, r7, #28
 8002542:	4619      	mov	r1, r3
 8002544:	4810      	ldr	r0, [pc, #64]	; (8002588 <MX_TIM2_Init+0xac>)
 8002546:	f00e fc01 	bl	8010d4c <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002550:	f000 fbc2 	bl	8002cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002554:	2360      	movs	r3, #96	; 0x60
 8002556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002564:	463b      	mov	r3, r7
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	4807      	ldr	r0, [pc, #28]	; (8002588 <MX_TIM2_Init+0xac>)
 800256c:	f00d fe20 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002576:	f000 fbaf 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800257a:	4803      	ldr	r0, [pc, #12]	; (8002588 <MX_TIM2_Init+0xac>)
 800257c:	f001 f8a0 	bl	80036c0 <HAL_TIM_MspPostInit>

}
 8002580:	bf00      	nop
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	24001150 	.word	0x24001150

0800258c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259e:	463b      	mov	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	615a      	str	r2, [r3, #20]
 80025ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <MX_TIM3_Init+0xc0>)
 80025b2:	4a27      	ldr	r2, [pc, #156]	; (8002650 <MX_TIM3_Init+0xc4>)
 80025b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <MX_TIM3_Init+0xc0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <MX_TIM3_Init+0xc0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_TIM3_Init+0xc0>)
 80025c4:	225a      	movs	r2, #90	; 0x5a
 80025c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_TIM3_Init+0xc0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <MX_TIM3_Init+0xc0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025d4:	481d      	ldr	r0, [pc, #116]	; (800264c <MX_TIM3_Init+0xc0>)
 80025d6:	f00d f924 	bl	800f822 <HAL_TIM_PWM_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025e0:	f000 fb7a 	bl	8002cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	4816      	ldr	r0, [pc, #88]	; (800264c <MX_TIM3_Init+0xc0>)
 80025f4:	f00e fbaa 	bl	8010d4c <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025fe:	f000 fb6b 	bl	8002cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002602:	2360      	movs	r3, #96	; 0x60
 8002604:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002612:	463b      	mov	r3, r7
 8002614:	2200      	movs	r2, #0
 8002616:	4619      	mov	r1, r3
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <MX_TIM3_Init+0xc0>)
 800261a:	f00d fdc9 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002624:	f000 fb58 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	2204      	movs	r2, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4807      	ldr	r0, [pc, #28]	; (800264c <MX_TIM3_Init+0xc0>)
 8002630:	f00d fdbe 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800263a:	f000 fb4d 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800263e:	4803      	ldr	r0, [pc, #12]	; (800264c <MX_TIM3_Init+0xc0>)
 8002640:	f001 f83e 	bl	80036c0 <HAL_TIM_MspPostInit>

}
 8002644:	bf00      	nop
 8002646:	3728      	adds	r7, #40	; 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	2400119c 	.word	0x2400119c
 8002650:	40000400 	.word	0x40000400

08002654 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002666:	463b      	mov	r3, r7
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <MX_TIM4_Init+0xf0>)
 800267a:	4a33      	ldr	r2, [pc, #204]	; (8002748 <MX_TIM4_Init+0xf4>)
 800267c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <MX_TIM4_Init+0xf0>)
 8002680:	221c      	movs	r2, #28
 8002682:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <MX_TIM4_Init+0xf0>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <MX_TIM4_Init+0xf0>)
 800268c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002690:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <MX_TIM4_Init+0xf0>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <MX_TIM4_Init+0xf0>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800269e:	4829      	ldr	r0, [pc, #164]	; (8002744 <MX_TIM4_Init+0xf0>)
 80026a0:	f00d f8bf 	bl	800f822 <HAL_TIM_PWM_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80026aa:	f000 fb15 	bl	8002cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	4821      	ldr	r0, [pc, #132]	; (8002744 <MX_TIM4_Init+0xf0>)
 80026be:	f00e fb45 	bl	8010d4c <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80026c8:	f000 fb06 	bl	8002cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026cc:	2360      	movs	r3, #96	; 0x60
 80026ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	4818      	ldr	r0, [pc, #96]	; (8002744 <MX_TIM4_Init+0xf0>)
 80026e4:	f00d fd64 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80026ee:	f000 faf3 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2204      	movs	r2, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4812      	ldr	r0, [pc, #72]	; (8002744 <MX_TIM4_Init+0xf0>)
 80026fa:	f00d fd59 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002704:	f000 fae8 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002708:	463b      	mov	r3, r7
 800270a:	2208      	movs	r2, #8
 800270c:	4619      	mov	r1, r3
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_TIM4_Init+0xf0>)
 8002710:	f00d fd4e 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800271a:	f000 fadd 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800271e:	463b      	mov	r3, r7
 8002720:	220c      	movs	r2, #12
 8002722:	4619      	mov	r1, r3
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <MX_TIM4_Init+0xf0>)
 8002726:	f00d fd43 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002730:	f000 fad2 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002734:	4803      	ldr	r0, [pc, #12]	; (8002744 <MX_TIM4_Init+0xf0>)
 8002736:	f000 ffc3 	bl	80036c0 <HAL_TIM_MspPostInit>

}
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	240011e8 	.word	0x240011e8
 8002748:	40000800 	.word	0x40000800

0800274c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800275e:	463b      	mov	r3, r7
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
 800276c:	615a      	str	r2, [r3, #20]
 800276e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <MX_TIM5_Init+0xac>)
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <MX_TIM5_Init+0xb0>)
 8002774:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <MX_TIM5_Init+0xac>)
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <MX_TIM5_Init+0xac>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <MX_TIM5_Init+0xac>)
 8002784:	225a      	movs	r2, #90	; 0x5a
 8002786:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <MX_TIM5_Init+0xac>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <MX_TIM5_Init+0xac>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002794:	4818      	ldr	r0, [pc, #96]	; (80027f8 <MX_TIM5_Init+0xac>)
 8002796:	f00d f844 	bl	800f822 <HAL_TIM_PWM_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80027a0:	f000 fa9a 	bl	8002cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	4619      	mov	r1, r3
 80027b2:	4811      	ldr	r0, [pc, #68]	; (80027f8 <MX_TIM5_Init+0xac>)
 80027b4:	f00e faca 	bl	8010d4c <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80027be:	f000 fa8b 	bl	8002cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c2:	2360      	movs	r3, #96	; 0x60
 80027c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027d2:	463b      	mov	r3, r7
 80027d4:	220c      	movs	r2, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	4807      	ldr	r0, [pc, #28]	; (80027f8 <MX_TIM5_Init+0xac>)
 80027da:	f00d fce9 	bl	80101b0 <HAL_TIM_PWM_ConfigChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80027e4:	f000 fa78 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027e8:	4803      	ldr	r0, [pc, #12]	; (80027f8 <MX_TIM5_Init+0xac>)
 80027ea:	f000 ff69 	bl	80036c0 <HAL_TIM_MspPostInit>

}
 80027ee:	bf00      	nop
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	24001234 	.word	0x24001234
 80027fc:	40000c00 	.word	0x40000c00

08002800 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <MX_UART4_Init+0x90>)
 8002806:	4a23      	ldr	r2, [pc, #140]	; (8002894 <MX_UART4_Init+0x94>)
 8002808:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <MX_UART4_Init+0x90>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <MX_UART4_Init+0x90>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <MX_UART4_Init+0x90>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <MX_UART4_Init+0x90>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <MX_UART4_Init+0x90>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <MX_UART4_Init+0x90>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <MX_UART4_Init+0x90>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <MX_UART4_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <MX_UART4_Init+0x90>)
 800283e:	2200      	movs	r2, #0
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <MX_UART4_Init+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002848:	4811      	ldr	r0, [pc, #68]	; (8002890 <MX_UART4_Init+0x90>)
 800284a:	f00e fb39 	bl	8010ec0 <HAL_UART_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002854:	f000 fa40 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002858:	2100      	movs	r1, #0
 800285a:	480d      	ldr	r0, [pc, #52]	; (8002890 <MX_UART4_Init+0x90>)
 800285c:	f00f fc3f 	bl	80120de <HAL_UARTEx_SetTxFifoThreshold>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002866:	f000 fa37 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800286a:	2100      	movs	r1, #0
 800286c:	4808      	ldr	r0, [pc, #32]	; (8002890 <MX_UART4_Init+0x90>)
 800286e:	f00f fc74 	bl	801215a <HAL_UARTEx_SetRxFifoThreshold>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002878:	f000 fa2e 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800287c:	4804      	ldr	r0, [pc, #16]	; (8002890 <MX_UART4_Init+0x90>)
 800287e:	f00f fbf5 	bl	801206c <HAL_UARTEx_DisableFifoMode>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002888:	f000 fa26 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	240014d8 	.word	0x240014d8
 8002894:	40004c00 	.word	0x40004c00

08002898 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <MX_USART6_UART_Init+0x90>)
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <MX_USART6_UART_Init+0x94>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028be:	220c      	movs	r2, #12
 80028c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028e0:	4811      	ldr	r0, [pc, #68]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028e2:	f00e faed 	bl	8010ec0 <HAL_UART_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80028ec:	f000 f9f4 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f0:	2100      	movs	r1, #0
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <MX_USART6_UART_Init+0x90>)
 80028f4:	f00f fbf3 	bl	80120de <HAL_UARTEx_SetTxFifoThreshold>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80028fe:	f000 f9eb 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002902:	2100      	movs	r1, #0
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <MX_USART6_UART_Init+0x90>)
 8002906:	f00f fc28 	bl	801215a <HAL_UARTEx_SetRxFifoThreshold>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002910:	f000 f9e2 	bl	8002cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <MX_USART6_UART_Init+0x90>)
 8002916:	f00f fba9 	bl	801206c <HAL_UARTEx_DisableFifoMode>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002920:	f000 f9da 	bl	8002cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2400156c 	.word	0x2400156c
 800292c:	40011400 	.word	0x40011400

08002930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <MX_DMA_Init+0xbc>)
 8002938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800293c:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <MX_DMA_Init+0xbc>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <MX_DMA_Init+0xbc>)
 8002948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <MX_DMA_Init+0xbc>)
 8002956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800295a:	4a24      	ldr	r2, [pc, #144]	; (80029ec <MX_DMA_Init+0xbc>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <MX_DMA_Init+0xbc>)
 8002966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	200b      	movs	r0, #11
 8002978:	f002 ff2d 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800297c:	200b      	movs	r0, #11
 800297e:	f002 ff44 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	200c      	movs	r0, #12
 8002988:	f002 ff25 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800298c:	200c      	movs	r0, #12
 800298e:	f002 ff3c 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	200d      	movs	r0, #13
 8002998:	f002 ff1d 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800299c:	200d      	movs	r0, #13
 800299e:	f002 ff34 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	200e      	movs	r0, #14
 80029a8:	f002 ff15 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029ac:	200e      	movs	r0, #14
 80029ae:	f002 ff2c 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2100      	movs	r1, #0
 80029b6:	200f      	movs	r0, #15
 80029b8:	f002 ff0d 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80029bc:	200f      	movs	r0, #15
 80029be:	f002 ff24 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2010      	movs	r0, #16
 80029c8:	f002 ff05 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029cc:	2010      	movs	r0, #16
 80029ce:	f002 ff1c 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2046      	movs	r0, #70	; 0x46
 80029d8:	f002 fefd 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80029dc:	2046      	movs	r0, #70	; 0x46
 80029de:	f002 ff14 	bl	800580a <HAL_NVIC_EnableIRQ>

}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400

080029f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
 8002a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a06:	4bac      	ldr	r3, [pc, #688]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	4aaa      	ldr	r2, [pc, #680]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a0e:	f043 0310 	orr.w	r3, r3, #16
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a16:	4ba8      	ldr	r3, [pc, #672]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a24:	4ba4      	ldr	r3, [pc, #656]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2a:	4aa3      	ldr	r2, [pc, #652]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a2c:	f043 0320 	orr.w	r3, r3, #32
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a34:	4ba0      	ldr	r3, [pc, #640]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a42:	4b9d      	ldr	r3, [pc, #628]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a48:	4a9b      	ldr	r2, [pc, #620]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a52:	4b99      	ldr	r3, [pc, #612]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a60:	4b95      	ldr	r3, [pc, #596]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	4a94      	ldr	r2, [pc, #592]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a70:	4b91      	ldr	r3, [pc, #580]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b8e      	ldr	r3, [pc, #568]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a84:	4a8c      	ldr	r2, [pc, #560]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8e:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa2:	4a85      	ldr	r2, [pc, #532]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aac:	4b82      	ldr	r3, [pc, #520]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aba:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac0:	4a7d      	ldr	r2, [pc, #500]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aca:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad8:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ade:	4a76      	ldr	r2, [pc, #472]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae8:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <MX_GPIO_Init+0x2c8>)
 8002aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	f241 5104 	movw	r1, #5380	; 0x1504
 8002afc:	486f      	ldr	r0, [pc, #444]	; (8002cbc <MX_GPIO_Init+0x2cc>)
 8002afe:	f005 fc99 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002b02:	2200      	movs	r2, #0
 8002b04:	f248 0106 	movw	r1, #32774	; 0x8006
 8002b08:	486d      	ldr	r0, [pc, #436]	; (8002cc0 <MX_GPIO_Init+0x2d0>)
 8002b0a:	f005 fc93 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2130      	movs	r1, #48	; 0x30
 8002b12:	486c      	ldr	r0, [pc, #432]	; (8002cc4 <MX_GPIO_Init+0x2d4>)
 8002b14:	f005 fc8e 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	486a      	ldr	r0, [pc, #424]	; (8002cc8 <MX_GPIO_Init+0x2d8>)
 8002b1e:	f005 fc89 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002b28:	4868      	ldr	r0, [pc, #416]	; (8002ccc <MX_GPIO_Init+0x2dc>)
 8002b2a:	f005 fc83 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	210e      	movs	r1, #14
 8002b32:	4867      	ldr	r0, [pc, #412]	; (8002cd0 <MX_GPIO_Init+0x2e0>)
 8002b34:	f005 fc7e 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f240 3101 	movw	r1, #769	; 0x301
 8002b3e:	4865      	ldr	r0, [pc, #404]	; (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002b40:	f005 fc78 	bl	8008434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002b44:	f241 5304 	movw	r3, #5380	; 0x1504
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4857      	ldr	r0, [pc, #348]	; (8002cbc <MX_GPIO_Init+0x2cc>)
 8002b5e:	f005 faa9 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002b62:	f248 0306 	movw	r3, #32774	; 0x8006
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4851      	ldr	r0, [pc, #324]	; (8002cc0 <MX_GPIO_Init+0x2d0>)
 8002b7c:	f005 fa9a 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b80:	2330      	movs	r3, #48	; 0x30
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b94:	4619      	mov	r1, r3
 8002b96:	484b      	ldr	r0, [pc, #300]	; (8002cc4 <MX_GPIO_Init+0x2d4>)
 8002b98:	f005 fa8c 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4845      	ldr	r0, [pc, #276]	; (8002cc8 <MX_GPIO_Init+0x2d8>)
 8002bb4:	f005 fa7e 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002bb8:	2304      	movs	r3, #4
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc8:	4619      	mov	r1, r3
 8002bca:	483f      	ldr	r0, [pc, #252]	; (8002cc8 <MX_GPIO_Init+0x2d8>)
 8002bcc:	f005 fa72 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002bd0:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	4619      	mov	r1, r3
 8002be8:	4838      	ldr	r0, [pc, #224]	; (8002ccc <MX_GPIO_Init+0x2dc>)
 8002bea:	f005 fa63 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002bee:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c00:	4619      	mov	r1, r3
 8002c02:	4832      	ldr	r0, [pc, #200]	; (8002ccc <MX_GPIO_Init+0x2dc>)
 8002c04:	f005 fa56 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	482d      	ldr	r0, [pc, #180]	; (8002cd0 <MX_GPIO_Init+0x2e0>)
 8002c1c:	f005 fa4a 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002c20:	230e      	movs	r3, #14
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4826      	ldr	r0, [pc, #152]	; (8002cd0 <MX_GPIO_Init+0x2e0>)
 8002c38:	f005 fa3c 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002c3c:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4e:	4619      	mov	r1, r3
 8002c50:	481a      	ldr	r0, [pc, #104]	; (8002cbc <MX_GPIO_Init+0x2cc>)
 8002c52:	f005 fa2f 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002c56:	f240 3301 	movw	r3, #769	; 0x301
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4819      	ldr	r0, [pc, #100]	; (8002cd4 <MX_GPIO_Init+0x2e4>)
 8002c70:	f005 fa20 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002c74:	2310      	movs	r3, #16
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4812      	ldr	r0, [pc, #72]	; (8002cd0 <MX_GPIO_Init+0x2e0>)
 8002c88:	f005 fa14 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_GPIO_Init+0x2d0>)
 8002caa:	f005 fa03 	bl	80080b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cae:	bf00      	nop
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	58021000 	.word	0x58021000
 8002cc0:	58020000 	.word	0x58020000
 8002cc4:	58020800 	.word	0x58020800
 8002cc8:	58020400 	.word	0x58020400
 8002ccc:	58021400 	.word	0x58021400
 8002cd0:	58021800 	.word	0x58021800
 8002cd4:	58020c00 	.word	0x58020c00

08002cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cdc:	b672      	cpsid	i
}
 8002cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ce0:	e7fe      	b.n	8002ce0 <Error_Handler+0x8>
	...

08002ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_MspInit+0x30>)
 8002cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_MspInit+0x30>)
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_MspInit+0x30>)
 8002cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	58024400 	.word	0x58024400

08002d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08c      	sub	sp, #48	; 0x30
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <HAL_ADC_MspInit+0x194>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d159      	bne.n	8002dee <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d40:	4a5b      	ldr	r2, [pc, #364]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d4a:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d58:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5e:	4a54      	ldr	r2, [pc, #336]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d68:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	484a      	ldr	r0, [pc, #296]	; (8002eb4 <HAL_ADC_MspInit+0x19c>)
 8002d8a:	f005 f993 	bl	80080b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002d8e:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002d90:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <HAL_ADC_MspInit+0x1a4>)
 8002d92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d94:	4b48      	ldr	r3, [pc, #288]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002d96:	2209      	movs	r2, #9
 8002d98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002da6:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002db6:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002db8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dd0:	4839      	ldr	r0, [pc, #228]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002dd2:	f002 fd35 	bl	8005840 <HAL_DMA_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002ddc:	f7ff ff7c 	bl	8002cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002de4:	659a      	str	r2, [r3, #88]	; 0x58
 8002de6:	4a34      	ldr	r2, [pc, #208]	; (8002eb8 <HAL_ADC_MspInit+0x1a0>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002dec:	e059      	b.n	8002ea2 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a33      	ldr	r2, [pc, #204]	; (8002ec0 <HAL_ADC_MspInit+0x1a8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d154      	bne.n	8002ea2 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1c:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_ADC_MspInit+0x198>)
 8002e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002e34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002e38:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002e3c:	f001 f86a 	bl	8003f14 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002e40:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e42:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <HAL_ADC_MspInit+0x1b0>)
 8002e44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e48:	2273      	movs	r2, #115	; 0x73
 8002e4a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e66:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e6e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e76:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e7e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e86:	480f      	ldr	r0, [pc, #60]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e88:	f002 fcda 	bl	8005840 <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002e92:	f7ff ff21 	bl	8002cd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_ADC_MspInit+0x1ac>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ea2:	bf00      	nop
 8002ea4:	3730      	adds	r7, #48	; 0x30
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58020800 	.word	0x58020800
 8002eb8:	24000d58 	.word	0x24000d58
 8002ebc:	40020088 	.word	0x40020088
 8002ec0:	58026000 	.word	0x58026000
 8002ec4:	24000dd0 	.word	0x24000dd0
 8002ec8:	400204b8 	.word	0x400204b8

08002ecc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0b8      	sub	sp, #224	; 0xe0
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	22b8      	movs	r2, #184	; 0xb8
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f014 fa99 	bl	8017424 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_FDCAN_MspInit+0xc4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d144      	bne.n	8002f86 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002efc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4618      	mov	r0, r3
 8002f12:	f007 fea3 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002f1c:	f7ff fedc 	bl	8002cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_FDCAN_MspInit+0xc8>)
 8002f22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f26:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_FDCAN_MspInit+0xc8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_FDCAN_MspInit+0xc8>)
 8002f32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_FDCAN_MspInit+0xc8>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <HAL_FDCAN_MspInit+0xc8>)
 8002f46:	f043 0320 	orr.w	r3, r3, #32
 8002f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_FDCAN_MspInit+0xc8>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f5c:	23c0      	movs	r3, #192	; 0xc0
 8002f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002f74:	2302      	movs	r3, #2
 8002f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	; (8002f98 <HAL_FDCAN_MspInit+0xcc>)
 8002f82:	f005 f897 	bl	80080b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	37e0      	adds	r7, #224	; 0xe0
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	4000d400 	.word	0x4000d400
 8002f94:	58024400 	.word	0x58024400
 8002f98:	58021400 	.word	0x58021400

08002f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0b8      	sub	sp, #224	; 0xe0
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	22b8      	movs	r2, #184	; 0xb8
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f014 fa31 	bl	8017424 <memset>
  if(hi2c->Instance==I2C2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a26      	ldr	r2, [pc, #152]	; (8003060 <HAL_I2C_MspInit+0xc4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d145      	bne.n	8003058 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002fcc:	f04f 0208 	mov.w	r2, #8
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fde:	f107 0310 	add.w	r3, r7, #16
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f007 fe3a 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002fee:	f7ff fe73 	bl	8002cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <HAL_I2C_MspInit+0xc8>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_I2C_MspInit+0xc8>)
 8002ffa:	f043 0320 	orr.w	r3, r3, #32
 8002ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_I2C_MspInit+0xc8>)
 8003004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003010:	2303      	movs	r3, #3
 8003012:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003016:	2312      	movs	r3, #18
 8003018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003028:	2304      	movs	r3, #4
 800302a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800302e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003032:	4619      	mov	r1, r3
 8003034:	480c      	ldr	r0, [pc, #48]	; (8003068 <HAL_I2C_MspInit+0xcc>)
 8003036:	f005 f83d 	bl	80080b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_I2C_MspInit+0xc8>)
 800303c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003040:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_I2C_MspInit+0xc8>)
 8003042:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003046:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_I2C_MspInit+0xc8>)
 800304c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003058:	bf00      	nop
 800305a:	37e0      	adds	r7, #224	; 0xe0
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40005800 	.word	0x40005800
 8003064:	58024400 	.word	0x58024400
 8003068:	58021400 	.word	0x58021400

0800306c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0ba      	sub	sp, #232	; 0xe8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003084:	f107 0318 	add.w	r3, r7, #24
 8003088:	22b8      	movs	r2, #184	; 0xb8
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f014 f9c9 	bl	8017424 <memset>
  if(hsd->Instance==SDMMC2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a5d      	ldr	r2, [pc, #372]	; (800320c <HAL_SD_MspInit+0x1a0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	f040 80b3 	bne.w	8003204 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800309e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ae:	f107 0318 	add.w	r3, r7, #24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f007 fdd2 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80030be:	f7ff fe0b 	bl	8002cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80030c2:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 80030c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030c8:	4a51      	ldr	r2, [pc, #324]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 80030ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ce:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80030d2:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 80030d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e0:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 80030e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e6:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f0:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030fe:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 8003100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003104:	4a42      	ldr	r2, [pc, #264]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 8003106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_SD_MspInit+0x1a4>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800311c:	2340      	movs	r3, #64	; 0x40
 800311e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2303      	movs	r3, #3
 8003130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003134:	230b      	movs	r3, #11
 8003136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800313e:	4619      	mov	r1, r3
 8003140:	4834      	ldr	r0, [pc, #208]	; (8003214 <HAL_SD_MspInit+0x1a8>)
 8003142:	f004 ffb7 	bl	80080b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003152:	2301      	movs	r3, #1
 8003154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800315e:	230b      	movs	r3, #11
 8003160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003168:	4619      	mov	r1, r3
 800316a:	482a      	ldr	r0, [pc, #168]	; (8003214 <HAL_SD_MspInit+0x1a8>)
 800316c:	f004 ffa2 	bl	80080b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317e:	2301      	movs	r3, #1
 8003180:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800318a:	230b      	movs	r3, #11
 800318c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003190:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003194:	4619      	mov	r1, r3
 8003196:	4820      	ldr	r0, [pc, #128]	; (8003218 <HAL_SD_MspInit+0x1ac>)
 8003198:	f004 ff8c 	bl	80080b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800319c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80031b6:	230b      	movs	r3, #11
 80031b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4815      	ldr	r0, [pc, #84]	; (8003218 <HAL_SD_MspInit+0x1ac>)
 80031c4:	f004 ff76 	bl	80080b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031dc:	2303      	movs	r3, #3
 80031de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80031e2:	230a      	movs	r3, #10
 80031e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031ec:	4619      	mov	r1, r3
 80031ee:	480a      	ldr	r0, [pc, #40]	; (8003218 <HAL_SD_MspInit+0x1ac>)
 80031f0:	f004 ff60 	bl	80080b4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	207c      	movs	r0, #124	; 0x7c
 80031fa:	f002 faec 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80031fe:	207c      	movs	r0, #124	; 0x7c
 8003200:	f002 fb03 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003204:	bf00      	nop
 8003206:	37e8      	adds	r7, #232	; 0xe8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	48022400 	.word	0x48022400
 8003210:	58024400 	.word	0x58024400
 8003214:	58020c00 	.word	0x58020c00
 8003218:	58021800 	.word	0x58021800

0800321c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	; 0x38
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4f      	ldr	r2, [pc, #316]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12e      	bne.n	800329c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800323e:	4b4f      	ldr	r3, [pc, #316]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003244:	4a4d      	ldr	r2, [pc, #308]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_SPI_MspInit+0x160>)
 800325e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003262:	4a46      	ldr	r2, [pc, #280]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_SPI_MspInit+0x160>)
 800326e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800327a:	23e0      	movs	r3, #224	; 0xe0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327e:	2302      	movs	r3, #2
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	2300      	movs	r3, #0
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800328a:	2305      	movs	r3, #5
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003292:	4619      	mov	r1, r3
 8003294:	483a      	ldr	r0, [pc, #232]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003296:	f004 ff0d 	bl	80080b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800329a:	e068      	b.n	800336e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_SPI_MspInit+0x168>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d12f      	bne.n	8003306 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_SPI_MspInit+0x160>)
 80032a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ac:	4a33      	ldr	r2, [pc, #204]	; (800337c <HAL_SPI_MspInit+0x160>)
 80032ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032b6:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_SPI_MspInit+0x160>)
 80032b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_SPI_MspInit+0x160>)
 80032c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ca:	4a2c      	ldr	r2, [pc, #176]	; (800337c <HAL_SPI_MspInit+0x160>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_SPI_MspInit+0x160>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032e2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f0:	2300      	movs	r3, #0
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032f4:	2305      	movs	r3, #5
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fc:	4619      	mov	r1, r3
 80032fe:	4822      	ldr	r0, [pc, #136]	; (8003388 <HAL_SPI_MspInit+0x16c>)
 8003300:	f004 fed8 	bl	80080b4 <HAL_GPIO_Init>
}
 8003304:	e033      	b.n	800336e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a20      	ldr	r2, [pc, #128]	; (800338c <HAL_SPI_MspInit+0x170>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d12e      	bne.n	800336e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003316:	4a19      	ldr	r2, [pc, #100]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003334:	4a11      	ldr	r2, [pc, #68]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800334c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800335e:	2306      	movs	r3, #6
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003366:	4619      	mov	r1, r3
 8003368:	4809      	ldr	r0, [pc, #36]	; (8003390 <HAL_SPI_MspInit+0x174>)
 800336a:	f004 fea3 	bl	80080b4 <HAL_GPIO_Init>
}
 800336e:	bf00      	nop
 8003370:	3738      	adds	r7, #56	; 0x38
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40013000 	.word	0x40013000
 800337c:	58024400 	.word	0x58024400
 8003380:	58020000 	.word	0x58020000
 8003384:	40003800 	.word	0x40003800
 8003388:	58020400 	.word	0x58020400
 800338c:	40003c00 	.word	0x40003c00
 8003390:	58020800 	.word	0x58020800

08003394 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b4:	d15d      	bne.n	8003472 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b6:	4b8e      	ldr	r3, [pc, #568]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033bc:	4a8c      	ldr	r2, [pc, #560]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033c6:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	4b86      	ldr	r3, [pc, #536]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033da:	4a85      	ldr	r2, [pc, #532]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e4:	4b82      	ldr	r3, [pc, #520]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003402:	2301      	movs	r3, #1
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	4879      	ldr	r0, [pc, #484]	; (80035f4 <HAL_TIM_PWM_MspInit+0x260>)
 800340e:	f004 fe51 	bl	80080b4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003412:	4b79      	ldr	r3, [pc, #484]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003414:	4a79      	ldr	r2, [pc, #484]	; (80035fc <HAL_TIM_PWM_MspInit+0x268>)
 8003416:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003418:	4b77      	ldr	r3, [pc, #476]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 800341a:	2214      	movs	r2, #20
 800341c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003420:	2240      	movs	r2, #64	; 0x40
 8003422:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800342a:	4b73      	ldr	r3, [pc, #460]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 800342c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003430:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003432:	4b71      	ldr	r3, [pc, #452]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003438:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800343a:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 800343c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003440:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003442:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003444:	2200      	movs	r2, #0
 8003446:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003448:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 800344a:	2200      	movs	r2, #0
 800344c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800344e:	4b6a      	ldr	r3, [pc, #424]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003450:	2200      	movs	r2, #0
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003454:	4868      	ldr	r0, [pc, #416]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003456:	f002 f9f3 	bl	8005840 <HAL_DMA_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003460:	f7ff fc3a 	bl	8002cd8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a64      	ldr	r2, [pc, #400]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
 800346a:	4a63      	ldr	r2, [pc, #396]	; (80035f8 <HAL_TIM_PWM_MspInit+0x264>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003470:	e119      	b.n	80036a6 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a62      	ldr	r2, [pc, #392]	; (8003600 <HAL_TIM_PWM_MspInit+0x26c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d16d      	bne.n	8003558 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800347c:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 800347e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003482:	4a5b      	ldr	r2, [pc, #364]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348c:	4b58      	ldr	r3, [pc, #352]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 800348e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800349a:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 800349c:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_TIM_PWM_MspInit+0x274>)
 800349e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80034a0:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034a2:	2218      	movs	r2, #24
 80034a4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034a6:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ac:	4b55      	ldr	r3, [pc, #340]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80034b2:	4b54      	ldr	r3, [pc, #336]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ba:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034c2:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80034d0:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034d8:	2200      	movs	r2, #0
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80034dc:	4849      	ldr	r0, [pc, #292]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034de:	f002 f9af 	bl	8005840 <HAL_DMA_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80034e8:	f7ff fbf6 	bl	8002cd8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a45      	ldr	r2, [pc, #276]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
 80034f2:	4a44      	ldr	r2, [pc, #272]	; (8003604 <HAL_TIM_PWM_MspInit+0x270>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80034f8:	4b44      	ldr	r3, [pc, #272]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 80034fa:	4a45      	ldr	r2, [pc, #276]	; (8003610 <HAL_TIM_PWM_MspInit+0x27c>)
 80034fc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80034fe:	4b43      	ldr	r3, [pc, #268]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003500:	2217      	movs	r2, #23
 8003502:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003504:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800350a:	4b40      	ldr	r3, [pc, #256]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 800350c:	2200      	movs	r2, #0
 800350e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003516:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003518:	4b3c      	ldr	r3, [pc, #240]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 800351a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800351e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003520:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003526:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800353a:	4834      	ldr	r0, [pc, #208]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 800353c:	f002 f980 	bl	8005840 <HAL_DMA_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003546:	f7ff fbc7 	bl	8002cd8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2f      	ldr	r2, [pc, #188]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
 8003550:	4a2e      	ldr	r2, [pc, #184]	; (800360c <HAL_TIM_PWM_MspInit+0x278>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003556:	e0a6      	b.n	80036a6 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_TIM_PWM_MspInit+0x280>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d15e      	bne.n	8003620 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003568:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8003574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_TIM_PWM_MspInit+0x288>)
 8003584:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 8003588:	221f      	movs	r2, #31
 800358a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003592:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 800359a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ae:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035be:	2200      	movs	r2, #0
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80035c2:	4815      	ldr	r0, [pc, #84]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035c4:	f002 f93c 	bl	8005840 <HAL_DMA_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80035ce:	f7ff fb83 	bl	8002cd8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80035d8:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <HAL_TIM_PWM_MspInit+0x284>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	201e      	movs	r0, #30
 80035e4:	f002 f8f7 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035e8:	201e      	movs	r0, #30
 80035ea:	f002 f90e 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 80035ee:	e05a      	b.n	80036a6 <HAL_TIM_PWM_MspInit+0x312>
 80035f0:	58024400 	.word	0x58024400
 80035f4:	58020000 	.word	0x58020000
 80035f8:	24001280 	.word	0x24001280
 80035fc:	40020028 	.word	0x40020028
 8003600:	40000400 	.word	0x40000400
 8003604:	240012f8 	.word	0x240012f8
 8003608:	40020058 	.word	0x40020058
 800360c:	24001370 	.word	0x24001370
 8003610:	40020070 	.word	0x40020070
 8003614:	40000800 	.word	0x40000800
 8003618:	240013e8 	.word	0x240013e8
 800361c:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <HAL_TIM_PWM_MspInit+0x31c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d13d      	bne.n	80036a6 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_TIM_PWM_MspInit+0x320>)
 800362c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_TIM_PWM_MspInit+0x320>)
 8003632:	f043 0308 	orr.w	r3, r3, #8
 8003636:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_TIM_PWM_MspInit+0x320>)
 800363c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_TIM_PWM_MspInit+0x328>)
 800364c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 8003650:	223a      	movs	r2, #58	; 0x3a
 8003652:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 800365c:	2200      	movs	r2, #0
 800365e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 8003662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003666:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 800366a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800366e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 8003672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003676:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 8003686:	2200      	movs	r2, #0
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800368a:	480b      	ldr	r0, [pc, #44]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 800368c:	f002 f8d8 	bl	8005840 <HAL_DMA_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003696:	f7ff fb1f 	bl	8002cd8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <HAL_TIM_PWM_MspInit+0x324>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036a6:	bf00      	nop
 80036a8:	3730      	adds	r7, #48	; 0x30
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	58024400 	.word	0x58024400
 80036b8:	24001460 	.word	0x24001460
 80036bc:	40020040 	.word	0x40020040

080036c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d120      	bne.n	8003724 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e2:	4b52      	ldr	r3, [pc, #328]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 80036e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e8:	4a50      	ldr	r2, [pc, #320]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f2:	4b4e      	ldr	r3, [pc, #312]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 80036f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800370a:	2302      	movs	r3, #2
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370e:	2300      	movs	r3, #0
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003712:	2301      	movs	r3, #1
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 031c 	add.w	r3, r7, #28
 800371a:	4619      	mov	r1, r3
 800371c:	4844      	ldr	r0, [pc, #272]	; (8003830 <HAL_TIM_MspPostInit+0x170>)
 800371e:	f004 fcc9 	bl	80080b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003722:	e07f      	b.n	8003824 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a42      	ldr	r2, [pc, #264]	; (8003834 <HAL_TIM_MspPostInit+0x174>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d11f      	bne.n	800376e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372e:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003734:	4a3d      	ldr	r2, [pc, #244]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800373e:	4b3b      	ldr	r3, [pc, #236]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 8003740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800374c:	2330      	movs	r3, #48	; 0x30
 800374e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003754:	2302      	movs	r3, #2
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800375c:	2302      	movs	r3, #2
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	4619      	mov	r1, r3
 8003766:	4832      	ldr	r0, [pc, #200]	; (8003830 <HAL_TIM_MspPostInit+0x170>)
 8003768:	f004 fca4 	bl	80080b4 <HAL_GPIO_Init>
}
 800376c:	e05a      	b.n	8003824 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_TIM_MspPostInit+0x178>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d131      	bne.n	80037dc <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 800377a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800377e:	4a2b      	ldr	r2, [pc, #172]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 800378a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003796:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800379a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037a8:	2302      	movs	r3, #2
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	4619      	mov	r1, r3
 80037b2:	4822      	ldr	r0, [pc, #136]	; (800383c <HAL_TIM_MspPostInit+0x17c>)
 80037b4:	f004 fc7e 	bl	80080b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037c2:	2302      	movs	r3, #2
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ca:	2302      	movs	r3, #2
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	4619      	mov	r1, r3
 80037d4:	4819      	ldr	r0, [pc, #100]	; (800383c <HAL_TIM_MspPostInit+0x17c>)
 80037d6:	f004 fc6d 	bl	80080b4 <HAL_GPIO_Init>
}
 80037da:	e023      	b.n	8003824 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_TIM_MspPostInit+0x180>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d11e      	bne.n	8003824 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 80037e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_TIM_MspPostInit+0x16c>)
 80037f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003804:	2308      	movs	r3, #8
 8003806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800380c:	2302      	movs	r3, #2
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003810:	2300      	movs	r3, #0
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003814:	2302      	movs	r3, #2
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	4619      	mov	r1, r3
 800381e:	4809      	ldr	r0, [pc, #36]	; (8003844 <HAL_TIM_MspPostInit+0x184>)
 8003820:	f004 fc48 	bl	80080b4 <HAL_GPIO_Init>
}
 8003824:	bf00      	nop
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	58020400 	.word	0x58020400
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	58020c00 	.word	0x58020c00
 8003840:	40000c00 	.word	0x40000c00
 8003844:	58020000 	.word	0x58020000

08003848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b0ba      	sub	sp, #232	; 0xe8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003860:	f107 0318 	add.w	r3, r7, #24
 8003864:	22b8      	movs	r2, #184	; 0xb8
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f013 fddb 	bl	8017424 <memset>
  if(huart->Instance==UART4)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_UART_MspInit+0x160>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d147      	bne.n	8003908 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003878:	f04f 0202 	mov.w	r2, #2
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388a:	f107 0318 	add.w	r3, r7, #24
 800388e:	4618      	mov	r0, r3
 8003890:	f007 f9e4 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800389a:	f7ff fa1d 	bl	8002cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_UART_MspInit+0x164>)
 80038a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a4:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_UART_MspInit+0x164>)
 80038a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_UART_MspInit+0x164>)
 80038b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_UART_MspInit+0x164>)
 80038be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c2:	4a3a      	ldr	r2, [pc, #232]	; (80039ac <HAL_UART_MspInit+0x164>)
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038cc:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_UART_MspInit+0x164>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038f4:	2308      	movs	r3, #8
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038fe:	4619      	mov	r1, r3
 8003900:	482b      	ldr	r0, [pc, #172]	; (80039b0 <HAL_UART_MspInit+0x168>)
 8003902:	f004 fbd7 	bl	80080b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003906:	e04a      	b.n	800399e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <HAL_UART_MspInit+0x16c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d145      	bne.n	800399e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003912:	f04f 0201 	mov.w	r2, #1
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003924:	f107 0318 	add.w	r3, r7, #24
 8003928:	4618      	mov	r0, r3
 800392a:	f007 f997 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003934:	f7ff f9d0 	bl	8002cd8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_UART_MspInit+0x164>)
 800393a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800393e:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_UART_MspInit+0x164>)
 8003940:	f043 0320 	orr.w	r3, r3, #32
 8003944:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_UART_MspInit+0x164>)
 800394a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_UART_MspInit+0x164>)
 8003958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <HAL_UART_MspInit+0x164>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_UART_MspInit+0x164>)
 8003968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397a:	2302      	movs	r3, #2
 800397c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800398c:	2307      	movs	r3, #7
 800398e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003992:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003996:	4619      	mov	r1, r3
 8003998:	4807      	ldr	r0, [pc, #28]	; (80039b8 <HAL_UART_MspInit+0x170>)
 800399a:	f004 fb8b 	bl	80080b4 <HAL_GPIO_Init>
}
 800399e:	bf00      	nop
 80039a0:	37e8      	adds	r7, #232	; 0xe8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40004c00 	.word	0x40004c00
 80039ac:	58024400 	.word	0x58024400
 80039b0:	58020400 	.word	0x58020400
 80039b4:	40011400 	.word	0x40011400
 80039b8:	58020800 	.word	0x58020800

080039bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <NMI_Handler+0x4>

080039c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <HardFault_Handler+0x4>

080039c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <MemManage_Handler+0x4>

080039ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d2:	e7fe      	b.n	80039d2 <BusFault_Handler+0x4>

080039d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d8:	e7fe      	b.n	80039d8 <UsageFault_Handler+0x4>

080039da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a08:	f000 fa40 	bl	8003e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <DMA1_Stream0_IRQHandler+0x10>)
 8003a16:	f002 fcd7 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	240013e8 	.word	0x240013e8

08003a24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <DMA1_Stream1_IRQHandler+0x10>)
 8003a2a:	f002 fccd 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	24001280 	.word	0x24001280

08003a38 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DMA1_Stream2_IRQHandler+0x10>)
 8003a3e:	f002 fcc3 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	24001460 	.word	0x24001460

08003a4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <DMA1_Stream3_IRQHandler+0x10>)
 8003a52:	f002 fcb9 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	240012f8 	.word	0x240012f8

08003a60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <DMA1_Stream4_IRQHandler+0x10>)
 8003a66:	f002 fcaf 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	24001370 	.word	0x24001370

08003a74 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <DMA1_Stream5_IRQHandler+0x10>)
 8003a7a:	f002 fca5 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	24000d58 	.word	0x24000d58

08003a88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <TIM4_IRQHandler+0x10>)
 8003a8e:	f00c fa6f 	bl	800ff70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	240011e8 	.word	0x240011e8

08003a9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <DMA2_Stream7_IRQHandler+0x10>)
 8003aa2:	f002 fc91 	bl	80063c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000dd0 	.word	0x24000dd0

08003ab0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <OTG_HS_IRQHandler+0x10>)
 8003ab6:	f004 ff57 	bl	8008968 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24002b04 	.word	0x24002b04

08003ac4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <SDMMC2_IRQHandler+0x10>)
 8003aca:	f009 ff1d 	bl	800d908 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24000f3c 	.word	0x24000f3c

08003ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return 1;
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_kill>:

int _kill(int pid, int sig)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003af2:	f013 fc5f 	bl	80173b4 <__errno>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2216      	movs	r2, #22
 8003afa:	601a      	str	r2, [r3, #0]
  return -1;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_exit>:

void _exit (int status)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ffe7 	bl	8003ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b1a:	e7fe      	b.n	8003b1a <_exit+0x12>

08003b1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e00a      	b.n	8003b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b2e:	f3af 8000 	nop.w
 8003b32:	4601      	mov	r1, r0
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	60ba      	str	r2, [r7, #8]
 8003b3a:	b2ca      	uxtb	r2, r1
 8003b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dbf0      	blt.n	8003b2e <_read+0x12>
  }

  return len;
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e009      	b.n	8003b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	60ba      	str	r2, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf1      	blt.n	8003b68 <_write+0x12>
  }
  return len;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_close>:

int _close(int file)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_isatty>:

int _isatty(int file)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <_sbrk+0x5c>)
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <_sbrk+0x60>)
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_sbrk+0x64>)
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <_sbrk+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d207      	bcs.n	8003c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c28:	f013 fbc4 	bl	80173b4 <__errno>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	220c      	movs	r2, #12
 8003c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e009      	b.n	8003c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <_sbrk+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <_sbrk+0x64>)
 8003c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	24050000 	.word	0x24050000
 8003c58:	00000800 	.word	0x00000800
 8003c5c:	24001600 	.word	0x24001600
 8003c60:	24003240 	.word	0x24003240

08003c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <SystemInit+0xd0>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	4a31      	ldr	r2, [pc, #196]	; (8003d34 <SystemInit+0xd0>)
 8003c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <SystemInit+0xd4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d807      	bhi.n	8003c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <SystemInit+0xd4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <SystemInit+0xd4>)
 8003c8e:	f043 0307 	orr.w	r3, r3, #7
 8003c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <SystemInit+0xd8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <SystemInit+0xd8>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <SystemInit+0xd8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <SystemInit+0xd8>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4924      	ldr	r1, [pc, #144]	; (8003d3c <SystemInit+0xd8>)
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <SystemInit+0xdc>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <SystemInit+0xd4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <SystemInit+0xd4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 030f 	bic.w	r3, r3, #15
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <SystemInit+0xd4>)
 8003cc8:	f043 0307 	orr.w	r3, r3, #7
 8003ccc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <SystemInit+0xd8>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <SystemInit+0xd8>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <SystemInit+0xd8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <SystemInit+0xd8>)
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <SystemInit+0xe0>)
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <SystemInit+0xd8>)
 8003ce8:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <SystemInit+0xe4>)
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <SystemInit+0xd8>)
 8003cee:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <SystemInit+0xe8>)
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <SystemInit+0xd8>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <SystemInit+0xd8>)
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <SystemInit+0xe8>)
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <SystemInit+0xd8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <SystemInit+0xd8>)
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <SystemInit+0xe8>)
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <SystemInit+0xd8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <SystemInit+0xd8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <SystemInit+0xd8>)
 8003d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <SystemInit+0xd8>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <SystemInit+0xec>)
 8003d24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00
 8003d38:	52002000 	.word	0x52002000
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d44:	02020200 	.word	0x02020200
 8003d48:	01ff0000 	.word	0x01ff0000
 8003d4c:	01010280 	.word	0x01010280
 8003d50:	52004000 	.word	0x52004000

08003d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d58:	f7ff ff84 	bl	8003c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d5c:	480c      	ldr	r0, [pc, #48]	; (8003d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d64:	e002      	b.n	8003d6c <LoopCopyDataInit>

08003d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6a:	3304      	adds	r3, #4

08003d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d70:	d3f9      	bcc.n	8003d66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d74:	4c0a      	ldr	r4, [pc, #40]	; (8003da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d78:	e001      	b.n	8003d7e <LoopFillZerobss>

08003d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d7c:	3204      	adds	r2, #4

08003d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d80:	d3fb      	bcc.n	8003d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d82:	f013 fb1d 	bl	80173c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d86:	f7fd fbdb 	bl	8001540 <main>
  bx  lr
 8003d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d8c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003d90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003d94:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8003d98:	0801cadc 	.word	0x0801cadc
  ldr r2, =_sbss
 8003d9c:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8003da0:	24003240 	.word	0x24003240

08003da4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <ADC3_IRQHandler>
	...

08003da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dae:	2003      	movs	r0, #3
 8003db0:	f001 fd06 	bl	80057c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003db4:	f006 fd7c 	bl	800a8b0 <HAL_RCC_GetSysClockFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_Init+0x68>)
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	4913      	ldr	r1, [pc, #76]	; (8003e14 <HAL_Init+0x6c>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_Init+0x68>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_Init+0x6c>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_Init+0x70>)
 8003dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_Init+0x74>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df2:	200f      	movs	r0, #15
 8003df4:	f000 f814 	bl	8003e20 <HAL_InitTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e002      	b.n	8003e08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e02:	f7fe ff6f 	bl	8002ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58024400 	.word	0x58024400
 8003e14:	0801c5c0 	.word	0x0801c5c0
 8003e18:	24000004 	.word	0x24000004
 8003e1c:	24000000 	.word	0x24000000

08003e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_InitTick+0x60>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e021      	b.n	8003e78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_InitTick+0x64>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_InitTick+0x60>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fceb 	bl	8005826 <HAL_SYSTICK_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00e      	b.n	8003e78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b0f      	cmp	r3, #15
 8003e5e:	d80a      	bhi.n	8003e76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e60:	2200      	movs	r2, #0
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	f001 fcb5 	bl	80057d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e6c:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <HAL_InitTick+0x68>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	2400000c 	.word	0x2400000c
 8003e84:	24000000 	.word	0x24000000
 8003e88:	24000008 	.word	0x24000008

08003e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_IncTick+0x20>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_IncTick+0x24>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <HAL_IncTick+0x24>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	2400000c 	.word	0x2400000c
 8003eb0:	24001604 	.word	0x24001604

08003eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_GetTick+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	24001604 	.word	0x24001604

08003ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7ff ffee 	bl	8003eb4 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d005      	beq.n	8003ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_Delay+0x44>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ef2:	bf00      	nop
 8003ef4:	f7ff ffde 	bl	8003eb4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d8f7      	bhi.n	8003ef4 <HAL_Delay+0x28>
  {
  }
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2400000c 	.word	0x2400000c

08003f14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	401a      	ands	r2, r3
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	58000400 	.word	0x58000400

08003f40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3360      	adds	r3, #96	; 0x60
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <LL_ADC_SetOffset+0x60>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10b      	bne.n	8003fe4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003fe2:	e00b      	b.n	8003ffc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	58026000 	.word	0x58026000

0800400c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3360      	adds	r3, #96	; 0x60
 800401a:	461a      	mov	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	611a      	str	r2, [r3, #16]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3360      	adds	r3, #96	; 0x60
 8004084:	461a      	mov	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	601a      	str	r2, [r3, #0]
  }
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	58026000 	.word	0x58026000

080040b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10e      	bne.n	80040e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3360      	adds	r3, #96	; 0x60
 80040c8:	461a      	mov	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	58026000 	.word	0x58026000

080040f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <LL_ADC_SetOffsetSign+0x40>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10e      	bne.n	8004126 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3360      	adds	r3, #96	; 0x60
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	431a      	orrs	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	58026000 	.word	0x58026000

08004138 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3360      	adds	r3, #96	; 0x60
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <LL_ADC_SetOffsetState+0x50>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	431a      	orrs	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800416a:	e007      	b.n	800417c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	431a      	orrs	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	58026000 	.word	0x58026000

0800418c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3330      	adds	r3, #48	; 0x30
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	4413      	add	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	211f      	movs	r1, #31
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0e9b      	lsrs	r3, r3, #26
 80041c4:	f003 011f 	and.w	r1, r3, #31
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	431a      	orrs	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3314      	adds	r3, #20
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	4413      	add	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0d1b      	lsrs	r3, r3, #20
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2107      	movs	r1, #7
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0d1b      	lsrs	r3, r3, #20
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d115      	bne.n	800427c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0318 	and.w	r3, r3, #24
 8004266:	4914      	ldr	r1, [pc, #80]	; (80042b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004268:	40d9      	lsrs	r1, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	400b      	ands	r3, r1
 800426e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800427a:	e014      	b.n	80042a6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0318 	and.w	r3, r3, #24
 8004292:	4909      	ldr	r1, [pc, #36]	; (80042b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004294:	40d9      	lsrs	r1, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	400b      	ands	r3, r1
 800429a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	58026000 	.word	0x58026000
 80042b8:	000fffff 	.word	0x000fffff

080042bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6093      	str	r3, [r2, #8]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	5fffffc0 	.word	0x5fffffc0

080042e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f4:	d101      	bne.n	80042fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <LL_ADC_EnableInternalRegulator+0x24>)
 8004316:	4013      	ands	r3, r2
 8004318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	6fffffc0 	.word	0x6fffffc0

08004330 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004344:	d101      	bne.n	800434a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <LL_ADC_IsEnabled+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_IsEnabled+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d101      	bne.n	8004396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1ee      	b.n	80047c4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fe fc8f 	bl	8002d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff67 	bl	80042e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff4d 	bl	80042bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ff82 	bl	8004330 <LL_ADC_IsInternalRegulatorEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d114      	bne.n	800445c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff66 	bl	8004308 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800443c:	4b8e      	ldr	r3, [pc, #568]	; (8004678 <HAL_ADC_Init+0x2ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	4a8e      	ldr	r2, [pc, #568]	; (800467c <HAL_ADC_Init+0x2b0>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	3301      	adds	r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800444e:	e002      	b.n	8004456 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	3b01      	subs	r3, #1
 8004454:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f9      	bne.n	8004450 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff65 	bl	8004330 <LL_ADC_IsInternalRegulatorEnabled>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10d      	bne.n	8004488 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004470:	f043 0210 	orr.w	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447c:	f043 0201 	orr.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff76 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 8004492:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 8188 	bne.w	80047b2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 8184 	bne.w	80047b2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044b2:	f043 0202 	orr.w	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff4a 	bl	8004358 <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d136      	bne.n	8004538 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6c      	ldr	r2, [pc, #432]	; (8004680 <HAL_ADC_Init+0x2b4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_ADC_Init+0x112>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a6a      	ldr	r2, [pc, #424]	; (8004684 <HAL_ADC_Init+0x2b8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10e      	bne.n	80044fc <HAL_ADC_Init+0x130>
 80044de:	4868      	ldr	r0, [pc, #416]	; (8004680 <HAL_ADC_Init+0x2b4>)
 80044e0:	f7ff ff3a 	bl	8004358 <LL_ADC_IsEnabled>
 80044e4:	4604      	mov	r4, r0
 80044e6:	4867      	ldr	r0, [pc, #412]	; (8004684 <HAL_ADC_Init+0x2b8>)
 80044e8:	f7ff ff36 	bl	8004358 <LL_ADC_IsEnabled>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4323      	orrs	r3, r4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_ADC_Init+0x142>
 80044fc:	4862      	ldr	r0, [pc, #392]	; (8004688 <HAL_ADC_Init+0x2bc>)
 80044fe:	f7ff ff2b 	bl	8004358 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d012      	beq.n	8004538 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5a      	ldr	r2, [pc, #360]	; (8004680 <HAL_ADC_Init+0x2b4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_ADC_Init+0x15a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a58      	ldr	r2, [pc, #352]	; (8004684 <HAL_ADC_Init+0x2b8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_ADC_Init+0x15e>
 8004526:	4a59      	ldr	r2, [pc, #356]	; (800468c <HAL_ADC_Init+0x2c0>)
 8004528:	e000      	b.n	800452c <HAL_ADC_Init+0x160>
 800452a:	4a59      	ldr	r2, [pc, #356]	; (8004690 <HAL_ADC_Init+0x2c4>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7ff fd04 	bl	8003f40 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a52      	ldr	r2, [pc, #328]	; (8004688 <HAL_ADC_Init+0x2bc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d129      	bne.n	8004596 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7e5b      	ldrb	r3, [r3, #25]
 8004546:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800454c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004552:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d013      	beq.n	8004584 <HAL_ADC_Init+0x1b8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d00d      	beq.n	8004580 <HAL_ADC_Init+0x1b4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b1c      	cmp	r3, #28
 800456a:	d007      	beq.n	800457c <HAL_ADC_Init+0x1b0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b18      	cmp	r3, #24
 8004572:	d101      	bne.n	8004578 <HAL_ADC_Init+0x1ac>
 8004574:	2318      	movs	r3, #24
 8004576:	e006      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 8004578:	2300      	movs	r3, #0
 800457a:	e004      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 800457c:	2310      	movs	r3, #16
 800457e:	e002      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 8004580:	2308      	movs	r3, #8
 8004582:	e000      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 8004584:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004586:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e00e      	b.n	80045b4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7e5b      	ldrb	r3, [r3, #25]
 800459a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d106      	bne.n	80045cc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	3b01      	subs	r3, #1
 80045c4:	045b      	lsls	r3, r3, #17
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a26      	ldr	r2, [pc, #152]	; (8004688 <HAL_ADC_Init+0x2bc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d115      	bne.n	800461e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	4b26      	ldr	r3, [pc, #152]	; (8004694 <HAL_ADC_Init+0x2c8>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	430b      	orrs	r3, r1
 8004604:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	611a      	str	r2, [r3, #16]
 800461c:	e009      	b.n	8004632 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <HAL_ADC_Init+0x2cc>)
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fea1 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 800463c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff feae 	bl	80043a4 <LL_ADC_INJ_IsConversionOngoing>
 8004648:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 808e 	bne.w	800476e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 808a 	bne.w	800476e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <HAL_ADC_Init+0x2bc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d11b      	bne.n	800469c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7e1b      	ldrb	r3, [r3, #24]
 8004668:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004670:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e018      	b.n	80046aa <HAL_ADC_Init+0x2de>
 8004678:	24000000 	.word	0x24000000
 800467c:	053e2d63 	.word	0x053e2d63
 8004680:	40022000 	.word	0x40022000
 8004684:	40022100 	.word	0x40022100
 8004688:	58026000 	.word	0x58026000
 800468c:	40022300 	.word	0x40022300
 8004690:	58026300 	.word	0x58026300
 8004694:	fff04007 	.word	0xfff04007
 8004698:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7e1b      	ldrb	r3, [r3, #24]
 80046a0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_ADC_Init+0x400>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d137      	bne.n	8004738 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_ADC_Init+0x404>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d116      	bne.n	8004706 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_ADC_Init+0x408>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046ea:	4311      	orrs	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046f6:	430a      	orrs	r2, r1
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	611a      	str	r2, [r3, #16]
 8004704:	e020      	b.n	8004748 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_ADC_Init+0x40c>)
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004714:	3a01      	subs	r2, #1
 8004716:	0411      	lsls	r1, r2, #16
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004728:	430a      	orrs	r2, r1
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	611a      	str	r2, [r3, #16]
 8004736:	e007      	b.n	8004748 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_ADC_Init+0x404>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d002      	beq.n	800476e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fd63 	bl	8005234 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10c      	bne.n	8004790 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f023 010f 	bic.w	r1, r3, #15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
 800478e:	e007      	b.n	80047a0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 020f 	bic.w	r2, r2, #15
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	f023 0303 	bic.w	r3, r3, #3
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60
 80047b0:	e007      	b.n	80047c2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3724      	adds	r7, #36	; 0x24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	ffffbffc 	.word	0xffffbffc
 80047d0:	58026000 	.word	0x58026000
 80047d4:	fc00f81f 	.word	0xfc00f81f
 80047d8:	fc00f81e 	.word	0xfc00f81e

080047dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b0b9      	sub	sp, #228	; 0xe4
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4aa9      	ldr	r2, [pc, #676]	; (8004aa4 <HAL_ADC_ConfigChannel+0x2c8>)
 80047fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d102      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x34>
 800480a:	2302      	movs	r3, #2
 800480c:	f000 bcfa 	b.w	8005204 <HAL_ADC_ConfigChannel+0xa28>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fdae 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 84de 	bne.w	80051e6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a9e      	ldr	r2, [pc, #632]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d033      	beq.n	800489c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800483c:	2b00      	cmp	r3, #0
 800483e:	d108      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x76>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0e9b      	lsrs	r3, r3, #26
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2201      	movs	r2, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	e01d      	b.n	800488e <HAL_ADC_ConfigChannel+0xb2>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800486a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800486e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e004      	b.n	8004884 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800487a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2201      	movs	r2, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	69d1      	ldr	r1, [r2, #28]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	430b      	orrs	r3, r1
 800489a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	f7ff fc6f 	bl	800418c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fd63 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 80048b8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fd6f 	bl	80043a4 <LL_ADC_INJ_IsConversionOngoing>
 80048c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 8270 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 826b 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f7ff fc7a 	bl	80041e4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6c      	ldr	r2, [pc, #432]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10d      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	08db      	lsrs	r3, r3, #3
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004914:	e032      	b.n	800497c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_ADC_ConfigChannel+0x2d0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800491e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004922:	d10b      	bne.n	800493c <HAL_ADC_ConfigChannel+0x160>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	e01d      	b.n	8004978 <HAL_ADC_ConfigChannel+0x19c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x186>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	e00a      	b.n	8004978 <HAL_ADC_ConfigChannel+0x19c>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d048      	beq.n	8004a16 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6919      	ldr	r1, [r3, #16]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004994:	f7ff fb08 	bl	8003fa8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d119      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6919      	ldr	r1, [r3, #16]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f7ff fba0 	bl	80040f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6919      	ldr	r1, [r3, #16]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1f0>
 80049c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ca:	e000      	b.n	80049ce <HAL_ADC_ConfigChannel+0x1f2>
 80049cc:	2300      	movs	r3, #0
 80049ce:	461a      	mov	r2, r3
 80049d0:	f7ff fb6e 	bl	80040b0 <LL_ADC_SetOffsetSaturation>
 80049d4:	e1ee      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d102      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x212>
 80049e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ec:	e000      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x214>
 80049ee:	2300      	movs	r3, #0
 80049f0:	461a      	mov	r2, r3
 80049f2:	f7ff fb3b 	bl	800406c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6919      	ldr	r1, [r3, #16]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7e1b      	ldrb	r3, [r3, #24]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x230>
 8004a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a0a:	e000      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x232>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7ff fb12 	bl	8004038 <LL_ADC_SetDataRightShift>
 8004a14:	e1ce      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 8181 	bne.w	8004d24 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff faef 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x272>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fae4 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004a44:	4603      	mov	r3, r0
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	f003 021f 	and.w	r2, r3, #31
 8004a4c:	e01e      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x2b0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fad9 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	e004      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004a80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a84:	fab3 f383 	clz	r3, r3
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x2d4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e9b      	lsrs	r3, r3, #26
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	e01e      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x306>
 8004aa4:	47ff0000 	.word	0x47ff0000
 8004aa8:	58026000 	.word	0x58026000
 8004aac:	5c001000 	.word	0x5c001000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	e004      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d106      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fb22 	bl	8004138 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fa86 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x344>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fa7b 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004b16:	4603      	mov	r3, r0
 8004b18:	0e9b      	lsrs	r3, r3, #26
 8004b1a:	f003 021f 	and.w	r2, r3, #31
 8004b1e:	e01e      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x382>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fa70 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e004      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x39a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	0e9b      	lsrs	r3, r3, #26
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	e018      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x3cc>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	e004      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fabf 	bl	8004138 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fa23 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x40a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fa18 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	e01e      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x448>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fa0d 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004c14:	2320      	movs	r3, #32
 8004c16:	e004      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x460>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	e014      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x48a>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	e004      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d106      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2102      	movs	r1, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fa60 	bl	8004138 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff f9c4 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x4c8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2103      	movs	r1, #3
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff f9b9 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	f003 021f 	and.w	r2, r3, #31
 8004ca2:	e017      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x4f8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2103      	movs	r1, #3
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f9ae 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	e003      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x510>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	0e9b      	lsrs	r3, r3, #26
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	e011      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x534>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e003      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d14f      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2103      	movs	r1, #3
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fa0b 	bl	8004138 <LL_ADC_SetOffsetState>
 8004d22:	e047      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	069b      	lsls	r3, r3, #26
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d107      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	069b      	lsls	r3, r3, #26
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d107      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d6a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d8e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	069b      	lsls	r3, r3, #26
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d107      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004db2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff facd 	bl	8004358 <LL_ADC_IsEnabled>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8219 	bne.w	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7ff fa32 	bl	800423c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4aa1      	ldr	r2, [pc, #644]	; (8005064 <HAL_ADC_ConfigChannel+0x888>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f040 812e 	bne.w	8005040 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x630>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0e9b      	lsrs	r3, r3, #26
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	bf94      	ite	ls
 8004e04:	2301      	movls	r3, #1
 8004e06:	2300      	movhi	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e019      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x664>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004e24:	2320      	movs	r3, #32
 8004e26:	e003      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2b09      	cmp	r3, #9
 8004e38:	bf94      	ite	ls
 8004e3a:	2301      	movls	r3, #1
 8004e3c:	2300      	movhi	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d079      	beq.n	8004f38 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x684>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	3301      	adds	r3, #1
 8004e58:	069b      	lsls	r3, r3, #26
 8004e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e5e:	e015      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x6b0>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	069b      	lsls	r3, r3, #26
 8004e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x6d0>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0e9b      	lsrs	r3, r3, #26
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	e017      	b.n	8004edc <HAL_ADC_ConfigChannel+0x700>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	e003      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	ea42 0103 	orr.w	r1, r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x726>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0e9b      	lsrs	r3, r3, #26
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	051b      	lsls	r3, r3, #20
 8004f00:	e018      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x758>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e003      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 021f 	and.w	r2, r3, #31
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f34:	430b      	orrs	r3, r1
 8004f36:	e07e      	b.n	8005036 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x778>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	069b      	lsls	r3, r3, #26
 8004f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f52:	e015      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x7a4>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	fa93 f3a3 	rbit	r3, r3
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	e003      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	069b      	lsls	r3, r3, #26
 8004f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x7c4>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0e9b      	lsrs	r3, r3, #26
 8004f92:	3301      	adds	r3, #1
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	e017      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x7f4>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	61bb      	str	r3, [r7, #24]
  return result;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004fb8:	2320      	movs	r3, #32
 8004fba:	e003      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x820>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0e9b      	lsrs	r3, r3, #26
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3b1e      	subs	r3, #30
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	e01b      	b.n	8005034 <HAL_ADC_ConfigChannel+0x858>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	60fb      	str	r3, [r7, #12]
  return result;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	f003 021f 	and.w	r2, r3, #31
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	3b1e      	subs	r3, #30
 800502e:	051b      	lsls	r3, r3, #20
 8005030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005034:	430b      	orrs	r3, r1
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	4619      	mov	r1, r3
 800503c:	f7ff f8d2 	bl	80041e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f280 80d7 	bge.w	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a06      	ldr	r2, [pc, #24]	; (8005068 <HAL_ADC_ConfigChannel+0x88c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_ADC_ConfigChannel+0x882>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_ADC_ConfigChannel+0x890>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10a      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x898>
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_ADC_ConfigChannel+0x894>)
 8005060:	e009      	b.n	8005076 <HAL_ADC_ConfigChannel+0x89a>
 8005062:	bf00      	nop
 8005064:	47ff0000 	.word	0x47ff0000
 8005068:	40022000 	.word	0x40022000
 800506c:	40022100 	.word	0x40022100
 8005070:	40022300 	.word	0x40022300
 8005074:	4b65      	ldr	r3, [pc, #404]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe ff88 	bl	8003f8c <LL_ADC_GetCommonPathInternalCh>
 800507c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a62      	ldr	r2, [pc, #392]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_ADC_ConfigChannel+0x8b8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a61      	ldr	r2, [pc, #388]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10e      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x8d6>
 8005094:	485e      	ldr	r0, [pc, #376]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 8005096:	f7ff f95f 	bl	8004358 <LL_ADC_IsEnabled>
 800509a:	4604      	mov	r4, r0
 800509c:	485d      	ldr	r0, [pc, #372]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 800509e:	f7ff f95b 	bl	8004358 <LL_ADC_IsEnabled>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4323      	orrs	r3, r4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e008      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x8e8>
 80050b2:	4859      	ldr	r0, [pc, #356]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 80050b4:	f7ff f950 	bl	8004358 <LL_ADC_IsEnabled>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8084 	beq.w	80051d2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a53      	ldr	r2, [pc, #332]	; (800521c <HAL_ADC_ConfigChannel+0xa40>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d132      	bne.n	800513a <HAL_ADC_ConfigChannel+0x95e>
 80050d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d12c      	bne.n	800513a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a4c      	ldr	r2, [pc, #304]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	f040 8086 	bne.w	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a47      	ldr	r2, [pc, #284]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_ADC_ConfigChannel+0x924>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a46      	ldr	r2, [pc, #280]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x928>
 8005100:	4a47      	ldr	r2, [pc, #284]	; (8005220 <HAL_ADC_ConfigChannel+0xa44>)
 8005102:	e000      	b.n	8005106 <HAL_ADC_ConfigChannel+0x92a>
 8005104:	4a41      	ldr	r2, [pc, #260]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800510a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe ff28 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005116:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_ADC_ConfigChannel+0xa48>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	4a42      	ldr	r2, [pc, #264]	; (8005228 <HAL_ADC_ConfigChannel+0xa4c>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	3301      	adds	r3, #1
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800512a:	e002      	b.n	8005132 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3b01      	subs	r3, #1
 8005130:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f9      	bne.n	800512c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005138:	e05e      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3b      	ldr	r2, [pc, #236]	; (800522c <HAL_ADC_ConfigChannel+0xa50>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d120      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x9aa>
 8005144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11a      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a30      	ldr	r2, [pc, #192]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d14e      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_ADC_ConfigChannel+0x992>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d101      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x996>
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <HAL_ADC_ConfigChannel+0xa44>)
 8005170:	e000      	b.n	8005174 <HAL_ADC_ConfigChannel+0x998>
 8005172:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 8005174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fef1 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005184:	e038      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a29      	ldr	r2, [pc, #164]	; (8005230 <HAL_ADC_ConfigChannel+0xa54>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d133      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
 8005190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d12d      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d128      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a19      	ldr	r2, [pc, #100]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_ADC_ConfigChannel+0x9de>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a17      	ldr	r2, [pc, #92]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_ADC_ConfigChannel+0x9e2>
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_ADC_ConfigChannel+0xa44>)
 80051bc:	e000      	b.n	80051c0 <HAL_ADC_ConfigChannel+0x9e4>
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7fe fecb 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
 80051d0:	e012      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80051e4:	e008      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005200:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005204:	4618      	mov	r0, r3
 8005206:	37e4      	adds	r7, #228	; 0xe4
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}
 800520c:	58026300 	.word	0x58026300
 8005210:	40022000 	.word	0x40022000
 8005214:	40022100 	.word	0x40022100
 8005218:	58026000 	.word	0x58026000
 800521c:	c7520000 	.word	0xc7520000
 8005220:	40022300 	.word	0x40022300
 8005224:	24000000 	.word	0x24000000
 8005228:	053e2d63 	.word	0x053e2d63
 800522c:	c3210000 	.word	0xc3210000
 8005230:	cb840000 	.word	0xcb840000

08005234 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6c      	ldr	r2, [pc, #432]	; (80053f4 <ADC_ConfigureBoostMode+0x1c0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <ADC_ConfigureBoostMode+0x1c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6b      	ldr	r2, [pc, #428]	; (80053f8 <ADC_ConfigureBoostMode+0x1c4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d109      	bne.n	8005264 <ADC_ConfigureBoostMode+0x30>
 8005250:	4b6a      	ldr	r3, [pc, #424]	; (80053fc <ADC_ConfigureBoostMode+0x1c8>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <ADC_ConfigureBoostMode+0x42>
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <ADC_ConfigureBoostMode+0x1cc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01c      	beq.n	80052b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800527a:	f005 fc93 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800527e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005288:	d010      	beq.n	80052ac <ADC_ConfigureBoostMode+0x78>
 800528a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800528e:	d873      	bhi.n	8005378 <ADC_ConfigureBoostMode+0x144>
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d002      	beq.n	800529c <ADC_ConfigureBoostMode+0x68>
 8005296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800529a:	d16d      	bne.n	8005378 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	60fb      	str	r3, [r7, #12]
        break;
 80052aa:	e068      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	089b      	lsrs	r3, r3, #2
 80052b0:	60fb      	str	r3, [r7, #12]
        break;
 80052b2:	e064      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f006 fe6e 	bl	800bf9c <HAL_RCCEx_GetPeriphCLKFreq>
 80052c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052ca:	d051      	beq.n	8005370 <ADC_ConfigureBoostMode+0x13c>
 80052cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052d0:	d854      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052d6:	d047      	beq.n	8005368 <ADC_ConfigureBoostMode+0x134>
 80052d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052dc:	d84e      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052e2:	d03d      	beq.n	8005360 <ADC_ConfigureBoostMode+0x12c>
 80052e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052e8:	d848      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ee:	d033      	beq.n	8005358 <ADC_ConfigureBoostMode+0x124>
 80052f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f4:	d842      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052fa:	d029      	beq.n	8005350 <ADC_ConfigureBoostMode+0x11c>
 80052fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005300:	d83c      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 8005302:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005306:	d01a      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005308:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800530c:	d836      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 800530e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005312:	d014      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005314:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005318:	d830      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531e:	d00e      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005324:	d82a      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 8005326:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800532a:	d008      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 800532c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005330:	d824      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 8005332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005336:	d002      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005338:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800533c:	d11e      	bne.n	800537c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	0c9b      	lsrs	r3, r3, #18
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	60fb      	str	r3, [r7, #12]
        break;
 800534e:	e016      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
        break;
 8005356:	e012      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	60fb      	str	r3, [r7, #12]
        break;
 800535e:	e00e      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	60fb      	str	r3, [r7, #12]
        break;
 8005366:	e00a      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	09db      	lsrs	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]
        break;
 800536e:	e006      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	60fb      	str	r3, [r7, #12]
        break;
 8005376:	e002      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800537c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <ADC_ConfigureBoostMode+0x1d0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d808      	bhi.n	800539e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800539a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800539c:	e025      	b.n	80053ea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <ADC_ConfigureBoostMode+0x1d4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d80a      	bhi.n	80053bc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	e016      	b.n	80053ea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a13      	ldr	r2, [pc, #76]	; (800540c <ADC_ConfigureBoostMode+0x1d8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d80a      	bhi.n	80053da <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	e007      	b.n	80053ea <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80053e8:	609a      	str	r2, [r3, #8]
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40022000 	.word	0x40022000
 80053f8:	40022100 	.word	0x40022100
 80053fc:	40022300 	.word	0x40022300
 8005400:	58026300 	.word	0x58026300
 8005404:	005f5e10 	.word	0x005f5e10
 8005408:	00bebc20 	.word	0x00bebc20
 800540c:	017d7840 	.word	0x017d7840

08005410 <LL_ADC_IsEnabled>:
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <LL_ADC_IsEnabled+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_ADC_IsEnabled+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_ADC_REG_IsConversionOngoing>:
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b04      	cmp	r3, #4
 8005448:	d101      	bne.n	800544e <LL_ADC_REG_IsConversionOngoing+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b0a3      	sub	sp, #140	; 0x8c
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005476:	2302      	movs	r3, #2
 8005478:	e0c1      	b.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a5e      	ldr	r2, [pc, #376]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d102      	bne.n	800549a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005494:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e001      	b.n	800549e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0a0      	b.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ffb9 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 80054c4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ffb2 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 8081 	bne.w	80055dc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80054da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d17c      	bne.n	80055dc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a48      	ldr	r2, [pc, #288]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a46      	ldr	r2, [pc, #280]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80054f6:	4b46      	ldr	r3, [pc, #280]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054f8:	e000      	b.n	80054fc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80054fa:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054fc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d039      	beq.n	800557a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	431a      	orrs	r2, r3
 8005514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005516:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a39      	ldr	r2, [pc, #228]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10e      	bne.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800552c:	4836      	ldr	r0, [pc, #216]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800552e:	f7ff ff6f 	bl	8005410 <LL_ADC_IsEnabled>
 8005532:	4604      	mov	r4, r0
 8005534:	4835      	ldr	r0, [pc, #212]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005536:	f7ff ff6b 	bl	8005410 <LL_ADC_IsEnabled>
 800553a:	4603      	mov	r3, r0
 800553c:	4323      	orrs	r3, r4
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e008      	b.n	800555c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800554a:	4833      	ldr	r0, [pc, #204]	; (8005618 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800554c:	f7ff ff60 	bl	8005410 <LL_ADC_IsEnabled>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d047      	beq.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	4b2d      	ldr	r3, [pc, #180]	; (800561c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005566:	4013      	ands	r3, r2
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	6811      	ldr	r1, [r2, #0]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	6892      	ldr	r2, [r2, #8]
 8005570:	430a      	orrs	r2, r1
 8005572:	431a      	orrs	r2, r3
 8005574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005576:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005578:	e03a      	b.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800557a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005584:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10e      	bne.n	80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800559a:	481b      	ldr	r0, [pc, #108]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800559c:	f7ff ff38 	bl	8005410 <LL_ADC_IsEnabled>
 80055a0:	4604      	mov	r4, r0
 80055a2:	481a      	ldr	r0, [pc, #104]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055a4:	f7ff ff34 	bl	8005410 <LL_ADC_IsEnabled>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4323      	orrs	r3, r4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e008      	b.n	80055ca <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80055b8:	4817      	ldr	r0, [pc, #92]	; (8005618 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80055ba:	f7ff ff29 	bl	8005410 <LL_ADC_IsEnabled>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055da:	e009      	b.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80055ee:	e000      	b.n	80055f2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80055fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80055fe:	4618      	mov	r0, r3
 8005600:	378c      	adds	r7, #140	; 0x8c
 8005602:	46bd      	mov	sp, r7
 8005604:	bd90      	pop	{r4, r7, pc}
 8005606:	bf00      	nop
 8005608:	40022000 	.word	0x40022000
 800560c:	40022100 	.word	0x40022100
 8005610:	40022300 	.word	0x40022300
 8005614:	58026300 	.word	0x58026300
 8005618:	58026000 	.word	0x58026000
 800561c:	fffff0e0 	.word	0xfffff0e0

08005620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <__NVIC_SetPriorityGrouping+0x40>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800563c:	4013      	ands	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <__NVIC_SetPriorityGrouping+0x44>)
 800564a:	4313      	orrs	r3, r2
 800564c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <__NVIC_SetPriorityGrouping+0x40>)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	60d3      	str	r3, [r2, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00
 8005664:	05fa0000 	.word	0x05fa0000

08005668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <__NVIC_GetPriorityGrouping+0x18>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	f003 0307 	and.w	r3, r3, #7
}
 8005676:	4618      	mov	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	e000ed00 	.word	0xe000ed00

08005684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800568e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	db0b      	blt.n	80056ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	f003 021f 	and.w	r2, r3, #31
 800569c:	4907      	ldr	r1, [pc, #28]	; (80056bc <__NVIC_EnableIRQ+0x38>)
 800569e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2001      	movs	r0, #1
 80056a6:	fa00 f202 	lsl.w	r2, r0, r2
 80056aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000e100 	.word	0xe000e100

080056c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	6039      	str	r1, [r7, #0]
 80056ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db0a      	blt.n	80056ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	490c      	ldr	r1, [pc, #48]	; (800570c <__NVIC_SetPriority+0x4c>)
 80056da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056de:	0112      	lsls	r2, r2, #4
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	440b      	add	r3, r1
 80056e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e8:	e00a      	b.n	8005700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4908      	ldr	r1, [pc, #32]	; (8005710 <__NVIC_SetPriority+0x50>)
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	3b04      	subs	r3, #4
 80056f8:	0112      	lsls	r2, r2, #4
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	440b      	add	r3, r1
 80056fe:	761a      	strb	r2, [r3, #24]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000e100 	.word	0xe000e100
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f1c3 0307 	rsb	r3, r3, #7
 800572e:	2b04      	cmp	r3, #4
 8005730:	bf28      	it	cs
 8005732:	2304      	movcs	r3, #4
 8005734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3304      	adds	r3, #4
 800573a:	2b06      	cmp	r3, #6
 800573c:	d902      	bls.n	8005744 <NVIC_EncodePriority+0x30>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3b03      	subs	r3, #3
 8005742:	e000      	b.n	8005746 <NVIC_EncodePriority+0x32>
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005748:	f04f 32ff 	mov.w	r2, #4294967295
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	401a      	ands	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800575c:	f04f 31ff 	mov.w	r1, #4294967295
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	43d9      	mvns	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800576c:	4313      	orrs	r3, r2
         );
}
 800576e:	4618      	mov	r0, r3
 8005770:	3724      	adds	r7, #36	; 0x24
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800578c:	d301      	bcc.n	8005792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800578e:	2301      	movs	r3, #1
 8005790:	e00f      	b.n	80057b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <SysTick_Config+0x40>)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579a:	210f      	movs	r1, #15
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	f7ff ff8e 	bl	80056c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <SysTick_Config+0x40>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <SysTick_Config+0x40>)
 80057ac:	2207      	movs	r2, #7
 80057ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000e010 	.word	0xe000e010

080057c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff29 	bl	8005620 <__NVIC_SetPriorityGrouping>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	4603      	mov	r3, r0
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057e4:	f7ff ff40 	bl	8005668 <__NVIC_GetPriorityGrouping>
 80057e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f7ff ff90 	bl	8005714 <NVIC_EncodePriority>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff ff5f 	bl	80056c0 <__NVIC_SetPriority>
}
 8005802:	bf00      	nop
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff33 	bl	8005684 <__NVIC_EnableIRQ>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ffa4 	bl	800577c <SysTick_Config>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005848:	f7fe fb34 	bl	8003eb4 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e314      	b.n	8005e82 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a66      	ldr	r2, [pc, #408]	; (80059f8 <HAL_DMA_Init+0x1b8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d04a      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a65      	ldr	r2, [pc, #404]	; (80059fc <HAL_DMA_Init+0x1bc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d045      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a63      	ldr	r2, [pc, #396]	; (8005a00 <HAL_DMA_Init+0x1c0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d040      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a62      	ldr	r2, [pc, #392]	; (8005a04 <HAL_DMA_Init+0x1c4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d03b      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a60      	ldr	r2, [pc, #384]	; (8005a08 <HAL_DMA_Init+0x1c8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d036      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5f      	ldr	r2, [pc, #380]	; (8005a0c <HAL_DMA_Init+0x1cc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d031      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5d      	ldr	r2, [pc, #372]	; (8005a10 <HAL_DMA_Init+0x1d0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02c      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5c      	ldr	r2, [pc, #368]	; (8005a14 <HAL_DMA_Init+0x1d4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d027      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5a      	ldr	r2, [pc, #360]	; (8005a18 <HAL_DMA_Init+0x1d8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d022      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a59      	ldr	r2, [pc, #356]	; (8005a1c <HAL_DMA_Init+0x1dc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d01d      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a57      	ldr	r2, [pc, #348]	; (8005a20 <HAL_DMA_Init+0x1e0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a56      	ldr	r2, [pc, #344]	; (8005a24 <HAL_DMA_Init+0x1e4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a54      	ldr	r2, [pc, #336]	; (8005a28 <HAL_DMA_Init+0x1e8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a53      	ldr	r2, [pc, #332]	; (8005a2c <HAL_DMA_Init+0x1ec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a51      	ldr	r2, [pc, #324]	; (8005a30 <HAL_DMA_Init+0x1f0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a50      	ldr	r2, [pc, #320]	; (8005a34 <HAL_DMA_Init+0x1f4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_DMA_Init+0xbc>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_DMA_Init+0xbe>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 813c 	beq.w	8005b7c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a37      	ldr	r2, [pc, #220]	; (80059f8 <HAL_DMA_Init+0x1b8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d04a      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a36      	ldr	r2, [pc, #216]	; (80059fc <HAL_DMA_Init+0x1bc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d045      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_DMA_Init+0x1c0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d040      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <HAL_DMA_Init+0x1c4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d03b      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a31      	ldr	r2, [pc, #196]	; (8005a08 <HAL_DMA_Init+0x1c8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d036      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a30      	ldr	r2, [pc, #192]	; (8005a0c <HAL_DMA_Init+0x1cc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d031      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2e      	ldr	r2, [pc, #184]	; (8005a10 <HAL_DMA_Init+0x1d0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d02c      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <HAL_DMA_Init+0x1d4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d027      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_DMA_Init+0x1d8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d022      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_DMA_Init+0x1dc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d01d      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_DMA_Init+0x1e0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d018      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <HAL_DMA_Init+0x1e4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <HAL_DMA_Init+0x1e8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00e      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <HAL_DMA_Init+0x1ec>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_DMA_Init+0x1f0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <HAL_DMA_Init+0x1f4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d108      	bne.n	80059c6 <HAL_DMA_Init+0x186>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <HAL_DMA_Init+0x196>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059d6:	e02f      	b.n	8005a38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d8:	f7fe fa6c 	bl	8003eb4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d928      	bls.n	8005a38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e244      	b.n	8005e82 <HAL_DMA_Init+0x642>
 80059f8:	40020010 	.word	0x40020010
 80059fc:	40020028 	.word	0x40020028
 8005a00:	40020040 	.word	0x40020040
 8005a04:	40020058 	.word	0x40020058
 8005a08:	40020070 	.word	0x40020070
 8005a0c:	40020088 	.word	0x40020088
 8005a10:	400200a0 	.word	0x400200a0
 8005a14:	400200b8 	.word	0x400200b8
 8005a18:	40020410 	.word	0x40020410
 8005a1c:	40020428 	.word	0x40020428
 8005a20:	40020440 	.word	0x40020440
 8005a24:	40020458 	.word	0x40020458
 8005a28:	40020470 	.word	0x40020470
 8005a2c:	40020488 	.word	0x40020488
 8005a30:	400204a0 	.word	0x400204a0
 8005a34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1c8      	bne.n	80059d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4b84      	ldr	r3, [pc, #528]	; (8005c64 <HAL_DMA_Init+0x424>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d107      	bne.n	8005a9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	4313      	orrs	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b28      	cmp	r3, #40	; 0x28
 8005aa2:	d903      	bls.n	8005aac <HAL_DMA_Init+0x26c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8005aaa:	d91f      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab2:	d903      	bls.n	8005abc <HAL_DMA_Init+0x27c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b42      	cmp	r3, #66	; 0x42
 8005aba:	d917      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b46      	cmp	r3, #70	; 0x46
 8005ac2:	d903      	bls.n	8005acc <HAL_DMA_Init+0x28c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b48      	cmp	r3, #72	; 0x48
 8005aca:	d90f      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b4e      	cmp	r3, #78	; 0x4e
 8005ad2:	d903      	bls.n	8005adc <HAL_DMA_Init+0x29c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b52      	cmp	r3, #82	; 0x52
 8005ada:	d907      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b73      	cmp	r3, #115	; 0x73
 8005ae2:	d905      	bls.n	8005af0 <HAL_DMA_Init+0x2b0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b77      	cmp	r3, #119	; 0x77
 8005aea:	d801      	bhi.n	8005af0 <HAL_DMA_Init+0x2b0>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_Init+0x2b2>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 0307 	bic.w	r3, r3, #7
 8005b14:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d117      	bne.n	8005b58 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fdcc 	bl	80076d8 <DMA_CheckFifoParam>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e194      	b.n	8005e82 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fd07 	bl	8007574 <DMA_CalcBaseAndBitshift>
 8005b66:	4603      	mov	r3, r0
 8005b68:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	223f      	movs	r2, #63	; 0x3f
 8005b74:	409a      	lsls	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	e0ca      	b.n	8005d12 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a39      	ldr	r2, [pc, #228]	; (8005c68 <HAL_DMA_Init+0x428>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <HAL_DMA_Init+0x42c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d01d      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a36      	ldr	r2, [pc, #216]	; (8005c70 <HAL_DMA_Init+0x430>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a35      	ldr	r2, [pc, #212]	; (8005c74 <HAL_DMA_Init+0x434>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <HAL_DMA_Init+0x438>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <HAL_DMA_Init+0x43c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a30      	ldr	r2, [pc, #192]	; (8005c80 <HAL_DMA_Init+0x440>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a2f      	ldr	r2, [pc, #188]	; (8005c84 <HAL_DMA_Init+0x444>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d101      	bne.n	8005bd0 <HAL_DMA_Init+0x390>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_DMA_Init+0x392>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8094 	beq.w	8005d00 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <HAL_DMA_Init+0x428>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d021      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a21      	ldr	r2, [pc, #132]	; (8005c6c <HAL_DMA_Init+0x42c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d01c      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <HAL_DMA_Init+0x430>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <HAL_DMA_Init+0x434>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d012      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <HAL_DMA_Init+0x438>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00d      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_DMA_Init+0x43c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d008      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <HAL_DMA_Init+0x440>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_DMA_Init+0x444>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <HAL_DMA_Init+0x448>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d01d      	beq.n	8005c8c <HAL_DMA_Init+0x44c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d102      	bne.n	8005c5e <HAL_DMA_Init+0x41e>
 8005c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c5c:	e017      	b.n	8005c8e <HAL_DMA_Init+0x44e>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e015      	b.n	8005c8e <HAL_DMA_Init+0x44e>
 8005c62:	bf00      	nop
 8005c64:	fe10803f 	.word	0xfe10803f
 8005c68:	58025408 	.word	0x58025408
 8005c6c:	5802541c 	.word	0x5802541c
 8005c70:	58025430 	.word	0x58025430
 8005c74:	58025444 	.word	0x58025444
 8005c78:	58025458 	.word	0x58025458
 8005c7c:	5802546c 	.word	0x5802546c
 8005c80:	58025480 	.word	0x58025480
 8005c84:	58025494 	.word	0x58025494
 8005c88:	fffe000f 	.word	0xfffe000f
 8005c8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68d2      	ldr	r2, [r2, #12]
 8005c92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005cbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b6e      	ldr	r3, [pc, #440]	; (8005e8c <HAL_DMA_Init+0x64c>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a6e      	ldr	r2, [pc, #440]	; (8005e90 <HAL_DMA_Init+0x650>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	009a      	lsls	r2, r3, #2
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fc45 	bl	8007574 <DMA_CalcBaseAndBitshift>
 8005cea:	4603      	mov	r3, r0
 8005cec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	e008      	b.n	8005d12 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2203      	movs	r2, #3
 8005d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e0b7      	b.n	8005e82 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a5f      	ldr	r2, [pc, #380]	; (8005e94 <HAL_DMA_Init+0x654>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d072      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a5d      	ldr	r2, [pc, #372]	; (8005e98 <HAL_DMA_Init+0x658>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d06d      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5c      	ldr	r2, [pc, #368]	; (8005e9c <HAL_DMA_Init+0x65c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d068      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5a      	ldr	r2, [pc, #360]	; (8005ea0 <HAL_DMA_Init+0x660>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d063      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a59      	ldr	r2, [pc, #356]	; (8005ea4 <HAL_DMA_Init+0x664>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d05e      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a57      	ldr	r2, [pc, #348]	; (8005ea8 <HAL_DMA_Init+0x668>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d059      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a56      	ldr	r2, [pc, #344]	; (8005eac <HAL_DMA_Init+0x66c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d054      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a54      	ldr	r2, [pc, #336]	; (8005eb0 <HAL_DMA_Init+0x670>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d04f      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a53      	ldr	r2, [pc, #332]	; (8005eb4 <HAL_DMA_Init+0x674>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d04a      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a51      	ldr	r2, [pc, #324]	; (8005eb8 <HAL_DMA_Init+0x678>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d045      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a50      	ldr	r2, [pc, #320]	; (8005ebc <HAL_DMA_Init+0x67c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d040      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a4e      	ldr	r2, [pc, #312]	; (8005ec0 <HAL_DMA_Init+0x680>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d03b      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a4d      	ldr	r2, [pc, #308]	; (8005ec4 <HAL_DMA_Init+0x684>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d036      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a4b      	ldr	r2, [pc, #300]	; (8005ec8 <HAL_DMA_Init+0x688>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d031      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4a      	ldr	r2, [pc, #296]	; (8005ecc <HAL_DMA_Init+0x68c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d02c      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a48      	ldr	r2, [pc, #288]	; (8005ed0 <HAL_DMA_Init+0x690>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d027      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a47      	ldr	r2, [pc, #284]	; (8005ed4 <HAL_DMA_Init+0x694>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a45      	ldr	r2, [pc, #276]	; (8005ed8 <HAL_DMA_Init+0x698>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01d      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a44      	ldr	r2, [pc, #272]	; (8005edc <HAL_DMA_Init+0x69c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a42      	ldr	r2, [pc, #264]	; (8005ee0 <HAL_DMA_Init+0x6a0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a41      	ldr	r2, [pc, #260]	; (8005ee4 <HAL_DMA_Init+0x6a4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <HAL_DMA_Init+0x6a8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3e      	ldr	r2, [pc, #248]	; (8005eec <HAL_DMA_Init+0x6ac>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <HAL_DMA_Init+0x6b0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_DMA_Init+0x5c6>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_DMA_Init+0x5c8>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d032      	beq.n	8005e72 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 fcdf 	bl	80077d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2b80      	cmp	r3, #128	; 0x80
 8005e18:	d102      	bne.n	8005e20 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d010      	beq.n	8005e60 <HAL_DMA_Init+0x620>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d80c      	bhi.n	8005e60 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 fd5c 	bl	8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	e008      	b.n	8005e72 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	a7fdabf8 	.word	0xa7fdabf8
 8005e90:	cccccccd 	.word	0xcccccccd
 8005e94:	40020010 	.word	0x40020010
 8005e98:	40020028 	.word	0x40020028
 8005e9c:	40020040 	.word	0x40020040
 8005ea0:	40020058 	.word	0x40020058
 8005ea4:	40020070 	.word	0x40020070
 8005ea8:	40020088 	.word	0x40020088
 8005eac:	400200a0 	.word	0x400200a0
 8005eb0:	400200b8 	.word	0x400200b8
 8005eb4:	40020410 	.word	0x40020410
 8005eb8:	40020428 	.word	0x40020428
 8005ebc:	40020440 	.word	0x40020440
 8005ec0:	40020458 	.word	0x40020458
 8005ec4:	40020470 	.word	0x40020470
 8005ec8:	40020488 	.word	0x40020488
 8005ecc:	400204a0 	.word	0x400204a0
 8005ed0:	400204b8 	.word	0x400204b8
 8005ed4:	58025408 	.word	0x58025408
 8005ed8:	5802541c 	.word	0x5802541c
 8005edc:	58025430 	.word	0x58025430
 8005ee0:	58025444 	.word	0x58025444
 8005ee4:	58025458 	.word	0x58025458
 8005ee8:	5802546c 	.word	0x5802546c
 8005eec:	58025480 	.word	0x58025480
 8005ef0:	58025494 	.word	0x58025494

08005ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e226      	b.n	800635e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_DMA_Start_IT+0x2a>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e21f      	b.n	800635e <HAL_DMA_Start_IT+0x46a>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	f040 820a 	bne.w	8006348 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a68      	ldr	r2, [pc, #416]	; (80060e8 <HAL_DMA_Start_IT+0x1f4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04a      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a66      	ldr	r2, [pc, #408]	; (80060ec <HAL_DMA_Start_IT+0x1f8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d045      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_DMA_Start_IT+0x1fc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d040      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a63      	ldr	r2, [pc, #396]	; (80060f4 <HAL_DMA_Start_IT+0x200>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d03b      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a62      	ldr	r2, [pc, #392]	; (80060f8 <HAL_DMA_Start_IT+0x204>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d036      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a60      	ldr	r2, [pc, #384]	; (80060fc <HAL_DMA_Start_IT+0x208>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d031      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a5f      	ldr	r2, [pc, #380]	; (8006100 <HAL_DMA_Start_IT+0x20c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02c      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5d      	ldr	r2, [pc, #372]	; (8006104 <HAL_DMA_Start_IT+0x210>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d027      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5c      	ldr	r2, [pc, #368]	; (8006108 <HAL_DMA_Start_IT+0x214>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5a      	ldr	r2, [pc, #360]	; (800610c <HAL_DMA_Start_IT+0x218>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a59      	ldr	r2, [pc, #356]	; (8006110 <HAL_DMA_Start_IT+0x21c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a57      	ldr	r2, [pc, #348]	; (8006114 <HAL_DMA_Start_IT+0x220>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a56      	ldr	r2, [pc, #344]	; (8006118 <HAL_DMA_Start_IT+0x224>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a54      	ldr	r2, [pc, #336]	; (800611c <HAL_DMA_Start_IT+0x228>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a53      	ldr	r2, [pc, #332]	; (8006120 <HAL_DMA_Start_IT+0x22c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_DMA_Start_IT+0xee>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a51      	ldr	r2, [pc, #324]	; (8006124 <HAL_DMA_Start_IT+0x230>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d108      	bne.n	8005ff4 <HAL_DMA_Start_IT+0x100>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e007      	b.n	8006004 <HAL_DMA_Start_IT+0x110>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f001 f906 	bl	800721c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a34      	ldr	r2, [pc, #208]	; (80060e8 <HAL_DMA_Start_IT+0x1f4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d04a      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a33      	ldr	r2, [pc, #204]	; (80060ec <HAL_DMA_Start_IT+0x1f8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d045      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a31      	ldr	r2, [pc, #196]	; (80060f0 <HAL_DMA_Start_IT+0x1fc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d040      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a30      	ldr	r2, [pc, #192]	; (80060f4 <HAL_DMA_Start_IT+0x200>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d03b      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2e      	ldr	r2, [pc, #184]	; (80060f8 <HAL_DMA_Start_IT+0x204>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d036      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <HAL_DMA_Start_IT+0x208>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d031      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <HAL_DMA_Start_IT+0x20c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d02c      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a2a      	ldr	r2, [pc, #168]	; (8006104 <HAL_DMA_Start_IT+0x210>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d027      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a28      	ldr	r2, [pc, #160]	; (8006108 <HAL_DMA_Start_IT+0x214>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d022      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a27      	ldr	r2, [pc, #156]	; (800610c <HAL_DMA_Start_IT+0x218>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d01d      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a25      	ldr	r2, [pc, #148]	; (8006110 <HAL_DMA_Start_IT+0x21c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d018      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a24      	ldr	r2, [pc, #144]	; (8006114 <HAL_DMA_Start_IT+0x220>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a22      	ldr	r2, [pc, #136]	; (8006118 <HAL_DMA_Start_IT+0x224>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a21      	ldr	r2, [pc, #132]	; (800611c <HAL_DMA_Start_IT+0x228>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_DMA_Start_IT+0x22c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_DMA_Start_IT+0x1bc>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_DMA_Start_IT+0x230>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d101      	bne.n	80060b4 <HAL_DMA_Start_IT+0x1c0>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_DMA_Start_IT+0x1c2>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d036      	beq.n	8006128 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f023 021e 	bic.w	r2, r3, #30
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0216 	orr.w	r2, r2, #22
 80060cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03e      	beq.n	8006154 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0208 	orr.w	r2, r2, #8
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e035      	b.n	8006154 <HAL_DMA_Start_IT+0x260>
 80060e8:	40020010 	.word	0x40020010
 80060ec:	40020028 	.word	0x40020028
 80060f0:	40020040 	.word	0x40020040
 80060f4:	40020058 	.word	0x40020058
 80060f8:	40020070 	.word	0x40020070
 80060fc:	40020088 	.word	0x40020088
 8006100:	400200a0 	.word	0x400200a0
 8006104:	400200b8 	.word	0x400200b8
 8006108:	40020410 	.word	0x40020410
 800610c:	40020428 	.word	0x40020428
 8006110:	40020440 	.word	0x40020440
 8006114:	40020458 	.word	0x40020458
 8006118:	40020470 	.word	0x40020470
 800611c:	40020488 	.word	0x40020488
 8006120:	400204a0 	.word	0x400204a0
 8006124:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 020e 	bic.w	r2, r3, #14
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 020a 	orr.w	r2, r2, #10
 800613a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0204 	orr.w	r2, r2, #4
 8006152:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a83      	ldr	r2, [pc, #524]	; (8006368 <HAL_DMA_Start_IT+0x474>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d072      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a82      	ldr	r2, [pc, #520]	; (800636c <HAL_DMA_Start_IT+0x478>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d06d      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a80      	ldr	r2, [pc, #512]	; (8006370 <HAL_DMA_Start_IT+0x47c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d068      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7f      	ldr	r2, [pc, #508]	; (8006374 <HAL_DMA_Start_IT+0x480>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d063      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7d      	ldr	r2, [pc, #500]	; (8006378 <HAL_DMA_Start_IT+0x484>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d05e      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a7c      	ldr	r2, [pc, #496]	; (800637c <HAL_DMA_Start_IT+0x488>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d059      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a7a      	ldr	r2, [pc, #488]	; (8006380 <HAL_DMA_Start_IT+0x48c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d054      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a79      	ldr	r2, [pc, #484]	; (8006384 <HAL_DMA_Start_IT+0x490>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d04f      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a77      	ldr	r2, [pc, #476]	; (8006388 <HAL_DMA_Start_IT+0x494>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d04a      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a76      	ldr	r2, [pc, #472]	; (800638c <HAL_DMA_Start_IT+0x498>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d045      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a74      	ldr	r2, [pc, #464]	; (8006390 <HAL_DMA_Start_IT+0x49c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d040      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a73      	ldr	r2, [pc, #460]	; (8006394 <HAL_DMA_Start_IT+0x4a0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d03b      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a71      	ldr	r2, [pc, #452]	; (8006398 <HAL_DMA_Start_IT+0x4a4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d036      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a70      	ldr	r2, [pc, #448]	; (800639c <HAL_DMA_Start_IT+0x4a8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d031      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a6e      	ldr	r2, [pc, #440]	; (80063a0 <HAL_DMA_Start_IT+0x4ac>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d02c      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a6d      	ldr	r2, [pc, #436]	; (80063a4 <HAL_DMA_Start_IT+0x4b0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d027      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a6b      	ldr	r2, [pc, #428]	; (80063a8 <HAL_DMA_Start_IT+0x4b4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6a      	ldr	r2, [pc, #424]	; (80063ac <HAL_DMA_Start_IT+0x4b8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d01d      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a68      	ldr	r2, [pc, #416]	; (80063b0 <HAL_DMA_Start_IT+0x4bc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a67      	ldr	r2, [pc, #412]	; (80063b4 <HAL_DMA_Start_IT+0x4c0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a65      	ldr	r2, [pc, #404]	; (80063b8 <HAL_DMA_Start_IT+0x4c4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a64      	ldr	r2, [pc, #400]	; (80063bc <HAL_DMA_Start_IT+0x4c8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a62      	ldr	r2, [pc, #392]	; (80063c0 <HAL_DMA_Start_IT+0x4cc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_DMA_Start_IT+0x350>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a61      	ldr	r2, [pc, #388]	; (80063c4 <HAL_DMA_Start_IT+0x4d0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <HAL_DMA_Start_IT+0x354>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_DMA_Start_IT+0x356>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d01a      	beq.n	8006284 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800626a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006282:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a37      	ldr	r2, [pc, #220]	; (8006368 <HAL_DMA_Start_IT+0x474>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d04a      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a36      	ldr	r2, [pc, #216]	; (800636c <HAL_DMA_Start_IT+0x478>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d045      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a34      	ldr	r2, [pc, #208]	; (8006370 <HAL_DMA_Start_IT+0x47c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d040      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a33      	ldr	r2, [pc, #204]	; (8006374 <HAL_DMA_Start_IT+0x480>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d03b      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a31      	ldr	r2, [pc, #196]	; (8006378 <HAL_DMA_Start_IT+0x484>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d036      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a30      	ldr	r2, [pc, #192]	; (800637c <HAL_DMA_Start_IT+0x488>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d031      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2e      	ldr	r2, [pc, #184]	; (8006380 <HAL_DMA_Start_IT+0x48c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d02c      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <HAL_DMA_Start_IT+0x490>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d027      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <HAL_DMA_Start_IT+0x494>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2a      	ldr	r2, [pc, #168]	; (800638c <HAL_DMA_Start_IT+0x498>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d01d      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a28      	ldr	r2, [pc, #160]	; (8006390 <HAL_DMA_Start_IT+0x49c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a27      	ldr	r2, [pc, #156]	; (8006394 <HAL_DMA_Start_IT+0x4a0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a25      	ldr	r2, [pc, #148]	; (8006398 <HAL_DMA_Start_IT+0x4a4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a24      	ldr	r2, [pc, #144]	; (800639c <HAL_DMA_Start_IT+0x4a8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	; (80063a0 <HAL_DMA_Start_IT+0x4ac>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_DMA_Start_IT+0x430>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_DMA_Start_IT+0x4b0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <HAL_DMA_Start_IT+0x442>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e012      	b.n	800635c <HAL_DMA_Start_IT+0x468>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0201 	orr.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e009      	b.n	800635c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800635c:	7dfb      	ldrb	r3, [r7, #23]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40020010 	.word	0x40020010
 800636c:	40020028 	.word	0x40020028
 8006370:	40020040 	.word	0x40020040
 8006374:	40020058 	.word	0x40020058
 8006378:	40020070 	.word	0x40020070
 800637c:	40020088 	.word	0x40020088
 8006380:	400200a0 	.word	0x400200a0
 8006384:	400200b8 	.word	0x400200b8
 8006388:	40020410 	.word	0x40020410
 800638c:	40020428 	.word	0x40020428
 8006390:	40020440 	.word	0x40020440
 8006394:	40020458 	.word	0x40020458
 8006398:	40020470 	.word	0x40020470
 800639c:	40020488 	.word	0x40020488
 80063a0:	400204a0 	.word	0x400204a0
 80063a4:	400204b8 	.word	0x400204b8
 80063a8:	58025408 	.word	0x58025408
 80063ac:	5802541c 	.word	0x5802541c
 80063b0:	58025430 	.word	0x58025430
 80063b4:	58025444 	.word	0x58025444
 80063b8:	58025458 	.word	0x58025458
 80063bc:	5802546c 	.word	0x5802546c
 80063c0:	58025480 	.word	0x58025480
 80063c4:	58025494 	.word	0x58025494

080063c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063d4:	4b67      	ldr	r3, [pc, #412]	; (8006574 <HAL_DMA_IRQHandler+0x1ac>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a67      	ldr	r2, [pc, #412]	; (8006578 <HAL_DMA_IRQHandler+0x1b0>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	0a9b      	lsrs	r3, r3, #10
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a5f      	ldr	r2, [pc, #380]	; (800657c <HAL_DMA_IRQHandler+0x1b4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a5d      	ldr	r2, [pc, #372]	; (8006580 <HAL_DMA_IRQHandler+0x1b8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5c      	ldr	r2, [pc, #368]	; (8006584 <HAL_DMA_IRQHandler+0x1bc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5a      	ldr	r2, [pc, #360]	; (8006588 <HAL_DMA_IRQHandler+0x1c0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a59      	ldr	r2, [pc, #356]	; (800658c <HAL_DMA_IRQHandler+0x1c4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a57      	ldr	r2, [pc, #348]	; (8006590 <HAL_DMA_IRQHandler+0x1c8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a56      	ldr	r2, [pc, #344]	; (8006594 <HAL_DMA_IRQHandler+0x1cc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a54      	ldr	r2, [pc, #336]	; (8006598 <HAL_DMA_IRQHandler+0x1d0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a53      	ldr	r2, [pc, #332]	; (800659c <HAL_DMA_IRQHandler+0x1d4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a51      	ldr	r2, [pc, #324]	; (80065a0 <HAL_DMA_IRQHandler+0x1d8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a50      	ldr	r2, [pc, #320]	; (80065a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a4e      	ldr	r2, [pc, #312]	; (80065a8 <HAL_DMA_IRQHandler+0x1e0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a4d      	ldr	r2, [pc, #308]	; (80065ac <HAL_DMA_IRQHandler+0x1e4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a4b      	ldr	r2, [pc, #300]	; (80065b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4a      	ldr	r2, [pc, #296]	; (80065b4 <HAL_DMA_IRQHandler+0x1ec>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_IRQHandler+0xd2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a48      	ldr	r2, [pc, #288]	; (80065b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d101      	bne.n	800649e <HAL_DMA_IRQHandler+0xd6>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_DMA_IRQHandler+0xd8>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 842b 	beq.w	8006cfc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2208      	movs	r2, #8
 80064b0:	409a      	lsls	r2, r3
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80a2 	beq.w	8006600 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2e      	ldr	r2, [pc, #184]	; (800657c <HAL_DMA_IRQHandler+0x1b4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d04a      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a2d      	ldr	r2, [pc, #180]	; (8006580 <HAL_DMA_IRQHandler+0x1b8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d045      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <HAL_DMA_IRQHandler+0x1bc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d040      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <HAL_DMA_IRQHandler+0x1c0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d03b      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a28      	ldr	r2, [pc, #160]	; (800658c <HAL_DMA_IRQHandler+0x1c4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d036      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_DMA_IRQHandler+0x1c8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d031      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	; (8006594 <HAL_DMA_IRQHandler+0x1cc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d02c      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a24      	ldr	r2, [pc, #144]	; (8006598 <HAL_DMA_IRQHandler+0x1d0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d027      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <HAL_DMA_IRQHandler+0x1d4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d022      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_DMA_IRQHandler+0x1d8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d01d      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <HAL_DMA_IRQHandler+0x1dc>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d018      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1e      	ldr	r2, [pc, #120]	; (80065a8 <HAL_DMA_IRQHandler+0x1e0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <HAL_DMA_IRQHandler+0x1e4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00e      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <HAL_DMA_IRQHandler+0x1e8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d009      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a19      	ldr	r2, [pc, #100]	; (80065b4 <HAL_DMA_IRQHandler+0x1ec>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <HAL_DMA_IRQHandler+0x194>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_DMA_IRQHandler+0x1f0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d12f      	bne.n	80065bc <HAL_DMA_IRQHandler+0x1f4>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	e02e      	b.n	80065d0 <HAL_DMA_IRQHandler+0x208>
 8006572:	bf00      	nop
 8006574:	24000000 	.word	0x24000000
 8006578:	1b4e81b5 	.word	0x1b4e81b5
 800657c:	40020010 	.word	0x40020010
 8006580:	40020028 	.word	0x40020028
 8006584:	40020040 	.word	0x40020040
 8006588:	40020058 	.word	0x40020058
 800658c:	40020070 	.word	0x40020070
 8006590:	40020088 	.word	0x40020088
 8006594:	400200a0 	.word	0x400200a0
 8006598:	400200b8 	.word	0x400200b8
 800659c:	40020410 	.word	0x40020410
 80065a0:	40020428 	.word	0x40020428
 80065a4:	40020440 	.word	0x40020440
 80065a8:	40020458 	.word	0x40020458
 80065ac:	40020470 	.word	0x40020470
 80065b0:	40020488 	.word	0x40020488
 80065b4:	400204a0 	.word	0x400204a0
 80065b8:	400204b8 	.word	0x400204b8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf14      	ite	ne
 80065ca:	2301      	movne	r3, #1
 80065cc:	2300      	moveq	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d015      	beq.n	8006600 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0204 	bic.w	r2, r2, #4
 80065e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2208      	movs	r2, #8
 80065ee:	409a      	lsls	r2, r3
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	f043 0201 	orr.w	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d06e      	beq.n	80066f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a69      	ldr	r2, [pc, #420]	; (80067c0 <HAL_DMA_IRQHandler+0x3f8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d04a      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a67      	ldr	r2, [pc, #412]	; (80067c4 <HAL_DMA_IRQHandler+0x3fc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d045      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a66      	ldr	r2, [pc, #408]	; (80067c8 <HAL_DMA_IRQHandler+0x400>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d040      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a64      	ldr	r2, [pc, #400]	; (80067cc <HAL_DMA_IRQHandler+0x404>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d03b      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a63      	ldr	r2, [pc, #396]	; (80067d0 <HAL_DMA_IRQHandler+0x408>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d036      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a61      	ldr	r2, [pc, #388]	; (80067d4 <HAL_DMA_IRQHandler+0x40c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d031      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a60      	ldr	r2, [pc, #384]	; (80067d8 <HAL_DMA_IRQHandler+0x410>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d02c      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5e      	ldr	r2, [pc, #376]	; (80067dc <HAL_DMA_IRQHandler+0x414>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d027      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5d      	ldr	r2, [pc, #372]	; (80067e0 <HAL_DMA_IRQHandler+0x418>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d022      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5b      	ldr	r2, [pc, #364]	; (80067e4 <HAL_DMA_IRQHandler+0x41c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d01d      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5a      	ldr	r2, [pc, #360]	; (80067e8 <HAL_DMA_IRQHandler+0x420>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a58      	ldr	r2, [pc, #352]	; (80067ec <HAL_DMA_IRQHandler+0x424>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a57      	ldr	r2, [pc, #348]	; (80067f0 <HAL_DMA_IRQHandler+0x428>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a55      	ldr	r2, [pc, #340]	; (80067f4 <HAL_DMA_IRQHandler+0x42c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a54      	ldr	r2, [pc, #336]	; (80067f8 <HAL_DMA_IRQHandler+0x430>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_DMA_IRQHandler+0x2ee>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a52      	ldr	r2, [pc, #328]	; (80067fc <HAL_DMA_IRQHandler+0x434>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10a      	bne.n	80066cc <HAL_DMA_IRQHandler+0x304>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	bf14      	ite	ne
 80066c4:	2301      	movne	r3, #1
 80066c6:	2300      	moveq	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	e003      	b.n	80066d4 <HAL_DMA_IRQHandler+0x30c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00d      	beq.n	80066f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	2201      	movs	r2, #1
 80066e2:	409a      	lsls	r2, r3
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ec:	f043 0202 	orr.w	r2, r3, #2
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	2204      	movs	r2, #4
 80066fe:	409a      	lsls	r2, r3
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	4013      	ands	r3, r2
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 808f 	beq.w	8006828 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <HAL_DMA_IRQHandler+0x3f8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d04a      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <HAL_DMA_IRQHandler+0x3fc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d045      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <HAL_DMA_IRQHandler+0x400>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d040      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <HAL_DMA_IRQHandler+0x404>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d03b      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <HAL_DMA_IRQHandler+0x408>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d036      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a24      	ldr	r2, [pc, #144]	; (80067d4 <HAL_DMA_IRQHandler+0x40c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d031      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <HAL_DMA_IRQHandler+0x410>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d02c      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a21      	ldr	r2, [pc, #132]	; (80067dc <HAL_DMA_IRQHandler+0x414>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d027      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <HAL_DMA_IRQHandler+0x418>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <HAL_DMA_IRQHandler+0x41c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <HAL_DMA_IRQHandler+0x420>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_DMA_IRQHandler+0x424>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <HAL_DMA_IRQHandler+0x428>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <HAL_DMA_IRQHandler+0x42c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <HAL_DMA_IRQHandler+0x430>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_DMA_IRQHandler+0x3e2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <HAL_DMA_IRQHandler+0x434>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d12a      	bne.n	8006800 <HAL_DMA_IRQHandler+0x438>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e023      	b.n	8006808 <HAL_DMA_IRQHandler+0x440>
 80067c0:	40020010 	.word	0x40020010
 80067c4:	40020028 	.word	0x40020028
 80067c8:	40020040 	.word	0x40020040
 80067cc:	40020058 	.word	0x40020058
 80067d0:	40020070 	.word	0x40020070
 80067d4:	40020088 	.word	0x40020088
 80067d8:	400200a0 	.word	0x400200a0
 80067dc:	400200b8 	.word	0x400200b8
 80067e0:	40020410 	.word	0x40020410
 80067e4:	40020428 	.word	0x40020428
 80067e8:	40020440 	.word	0x40020440
 80067ec:	40020458 	.word	0x40020458
 80067f0:	40020470 	.word	0x40020470
 80067f4:	40020488 	.word	0x40020488
 80067f8:	400204a0 	.word	0x400204a0
 80067fc:	400204b8 	.word	0x400204b8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2204      	movs	r2, #4
 8006816:	409a      	lsls	r2, r3
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006820:	f043 0204 	orr.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2210      	movs	r2, #16
 8006832:	409a      	lsls	r2, r3
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 80a6 	beq.w	800698a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a85      	ldr	r2, [pc, #532]	; (8006a58 <HAL_DMA_IRQHandler+0x690>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d04a      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a83      	ldr	r2, [pc, #524]	; (8006a5c <HAL_DMA_IRQHandler+0x694>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d045      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a82      	ldr	r2, [pc, #520]	; (8006a60 <HAL_DMA_IRQHandler+0x698>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d040      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a80      	ldr	r2, [pc, #512]	; (8006a64 <HAL_DMA_IRQHandler+0x69c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d03b      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a7f      	ldr	r2, [pc, #508]	; (8006a68 <HAL_DMA_IRQHandler+0x6a0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d036      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a7d      	ldr	r2, [pc, #500]	; (8006a6c <HAL_DMA_IRQHandler+0x6a4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d031      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a7c      	ldr	r2, [pc, #496]	; (8006a70 <HAL_DMA_IRQHandler+0x6a8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d02c      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7a      	ldr	r2, [pc, #488]	; (8006a74 <HAL_DMA_IRQHandler+0x6ac>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d027      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a79      	ldr	r2, [pc, #484]	; (8006a78 <HAL_DMA_IRQHandler+0x6b0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d022      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a77      	ldr	r2, [pc, #476]	; (8006a7c <HAL_DMA_IRQHandler+0x6b4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01d      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a76      	ldr	r2, [pc, #472]	; (8006a80 <HAL_DMA_IRQHandler+0x6b8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a74      	ldr	r2, [pc, #464]	; (8006a84 <HAL_DMA_IRQHandler+0x6bc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a73      	ldr	r2, [pc, #460]	; (8006a88 <HAL_DMA_IRQHandler+0x6c0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a71      	ldr	r2, [pc, #452]	; (8006a8c <HAL_DMA_IRQHandler+0x6c4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a70      	ldr	r2, [pc, #448]	; (8006a90 <HAL_DMA_IRQHandler+0x6c8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_DMA_IRQHandler+0x516>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a6e      	ldr	r2, [pc, #440]	; (8006a94 <HAL_DMA_IRQHandler+0x6cc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d10a      	bne.n	80068f4 <HAL_DMA_IRQHandler+0x52c>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e009      	b.n	8006908 <HAL_DMA_IRQHandler+0x540>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d03e      	beq.n	800698a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2210      	movs	r2, #16
 8006916:	409a      	lsls	r2, r3
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d108      	bne.n	800694a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d024      	beq.n	800698a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
 8006948:	e01f      	b.n	800698a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
 800695a:	e016      	b.n	800698a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0208 	bic.w	r2, r2, #8
 8006978:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2220      	movs	r2, #32
 8006994:	409a      	lsls	r2, r3
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	4013      	ands	r3, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8110 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a2c      	ldr	r2, [pc, #176]	; (8006a58 <HAL_DMA_IRQHandler+0x690>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d04a      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <HAL_DMA_IRQHandler+0x694>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d045      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a29      	ldr	r2, [pc, #164]	; (8006a60 <HAL_DMA_IRQHandler+0x698>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d040      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a28      	ldr	r2, [pc, #160]	; (8006a64 <HAL_DMA_IRQHandler+0x69c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d03b      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <HAL_DMA_IRQHandler+0x6a0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d036      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <HAL_DMA_IRQHandler+0x6a4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d031      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a23      	ldr	r2, [pc, #140]	; (8006a70 <HAL_DMA_IRQHandler+0x6a8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d02c      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <HAL_DMA_IRQHandler+0x6ac>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d027      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <HAL_DMA_IRQHandler+0x6b0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d022      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <HAL_DMA_IRQHandler+0x6b4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d01d      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <HAL_DMA_IRQHandler+0x6b8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d018      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <HAL_DMA_IRQHandler+0x6bc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1a      	ldr	r2, [pc, #104]	; (8006a88 <HAL_DMA_IRQHandler+0x6c0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <HAL_DMA_IRQHandler+0x6c4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <HAL_DMA_IRQHandler+0x6c8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x678>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <HAL_DMA_IRQHandler+0x6cc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d12b      	bne.n	8006a98 <HAL_DMA_IRQHandler+0x6d0>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bf14      	ite	ne
 8006a4e:	2301      	movne	r3, #1
 8006a50:	2300      	moveq	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	e02a      	b.n	8006aac <HAL_DMA_IRQHandler+0x6e4>
 8006a56:	bf00      	nop
 8006a58:	40020010 	.word	0x40020010
 8006a5c:	40020028 	.word	0x40020028
 8006a60:	40020040 	.word	0x40020040
 8006a64:	40020058 	.word	0x40020058
 8006a68:	40020070 	.word	0x40020070
 8006a6c:	40020088 	.word	0x40020088
 8006a70:	400200a0 	.word	0x400200a0
 8006a74:	400200b8 	.word	0x400200b8
 8006a78:	40020410 	.word	0x40020410
 8006a7c:	40020428 	.word	0x40020428
 8006a80:	40020440 	.word	0x40020440
 8006a84:	40020458 	.word	0x40020458
 8006a88:	40020470 	.word	0x40020470
 8006a8c:	40020488 	.word	0x40020488
 8006a90:	400204a0 	.word	0x400204a0
 8006a94:	400204b8 	.word	0x400204b8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf14      	ite	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	2300      	moveq	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8087 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab6:	f003 031f 	and.w	r3, r3, #31
 8006aba:	2220      	movs	r2, #32
 8006abc:	409a      	lsls	r2, r3
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d139      	bne.n	8006b42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0216 	bic.w	r2, r2, #22
 8006adc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <HAL_DMA_IRQHandler+0x736>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0208 	bic.w	r2, r2, #8
 8006b0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	223f      	movs	r2, #63	; 0x3f
 8006b18:	409a      	lsls	r2, r3
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 834a 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
          }
          return;
 8006b40:	e344      	b.n	80071cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d018      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d108      	bne.n	8006b70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02c      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4798      	blx	r3
 8006b6e:	e027      	b.n	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d023      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	e01e      	b.n	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0210 	bic.w	r2, r2, #16
 8006b9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8306 	beq.w	80071d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8088 	beq.w	8006ce8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a7a      	ldr	r2, [pc, #488]	; (8006dd0 <HAL_DMA_IRQHandler+0xa08>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d04a      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a79      	ldr	r2, [pc, #484]	; (8006dd4 <HAL_DMA_IRQHandler+0xa0c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d045      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a77      	ldr	r2, [pc, #476]	; (8006dd8 <HAL_DMA_IRQHandler+0xa10>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d040      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a76      	ldr	r2, [pc, #472]	; (8006ddc <HAL_DMA_IRQHandler+0xa14>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d03b      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a74      	ldr	r2, [pc, #464]	; (8006de0 <HAL_DMA_IRQHandler+0xa18>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d036      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a73      	ldr	r2, [pc, #460]	; (8006de4 <HAL_DMA_IRQHandler+0xa1c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d031      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a71      	ldr	r2, [pc, #452]	; (8006de8 <HAL_DMA_IRQHandler+0xa20>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d02c      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a70      	ldr	r2, [pc, #448]	; (8006dec <HAL_DMA_IRQHandler+0xa24>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d027      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6e      	ldr	r2, [pc, #440]	; (8006df0 <HAL_DMA_IRQHandler+0xa28>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d022      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a6d      	ldr	r2, [pc, #436]	; (8006df4 <HAL_DMA_IRQHandler+0xa2c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d01d      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6b      	ldr	r2, [pc, #428]	; (8006df8 <HAL_DMA_IRQHandler+0xa30>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d018      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a6a      	ldr	r2, [pc, #424]	; (8006dfc <HAL_DMA_IRQHandler+0xa34>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a68      	ldr	r2, [pc, #416]	; (8006e00 <HAL_DMA_IRQHandler+0xa38>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a67      	ldr	r2, [pc, #412]	; (8006e04 <HAL_DMA_IRQHandler+0xa3c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d009      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a65      	ldr	r2, [pc, #404]	; (8006e08 <HAL_DMA_IRQHandler+0xa40>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x8b8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a64      	ldr	r2, [pc, #400]	; (8006e0c <HAL_DMA_IRQHandler+0xa44>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d108      	bne.n	8006c92 <HAL_DMA_IRQHandler+0x8ca>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e007      	b.n	8006ca2 <HAL_DMA_IRQHandler+0x8da>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d307      	bcc.n	8006cbe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f2      	bne.n	8006ca2 <HAL_DMA_IRQHandler+0x8da>
 8006cbc:	e000      	b.n	8006cc0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cbe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cd6:	e003      	b.n	8006ce0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8272 	beq.w	80071d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	e26c      	b.n	80071d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a43      	ldr	r2, [pc, #268]	; (8006e10 <HAL_DMA_IRQHandler+0xa48>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d022      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a42      	ldr	r2, [pc, #264]	; (8006e14 <HAL_DMA_IRQHandler+0xa4c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d01d      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a40      	ldr	r2, [pc, #256]	; (8006e18 <HAL_DMA_IRQHandler+0xa50>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d018      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a3f      	ldr	r2, [pc, #252]	; (8006e1c <HAL_DMA_IRQHandler+0xa54>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a3d      	ldr	r2, [pc, #244]	; (8006e20 <HAL_DMA_IRQHandler+0xa58>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00e      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3c      	ldr	r2, [pc, #240]	; (8006e24 <HAL_DMA_IRQHandler+0xa5c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d009      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <HAL_DMA_IRQHandler+0xa60>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d004      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x984>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a39      	ldr	r2, [pc, #228]	; (8006e2c <HAL_DMA_IRQHandler+0xa64>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d101      	bne.n	8006d50 <HAL_DMA_IRQHandler+0x988>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <HAL_DMA_IRQHandler+0x98a>
 8006d50:	2300      	movs	r3, #0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 823f 	beq.w	80071d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2204      	movs	r2, #4
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80cd 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xb48>
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80c7 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d049      	beq.n	8006e30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8210 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db8:	e20a      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8206 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dcc:	e200      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe08>
 8006dce:	bf00      	nop
 8006dd0:	40020010 	.word	0x40020010
 8006dd4:	40020028 	.word	0x40020028
 8006dd8:	40020040 	.word	0x40020040
 8006ddc:	40020058 	.word	0x40020058
 8006de0:	40020070 	.word	0x40020070
 8006de4:	40020088 	.word	0x40020088
 8006de8:	400200a0 	.word	0x400200a0
 8006dec:	400200b8 	.word	0x400200b8
 8006df0:	40020410 	.word	0x40020410
 8006df4:	40020428 	.word	0x40020428
 8006df8:	40020440 	.word	0x40020440
 8006dfc:	40020458 	.word	0x40020458
 8006e00:	40020470 	.word	0x40020470
 8006e04:	40020488 	.word	0x40020488
 8006e08:	400204a0 	.word	0x400204a0
 8006e0c:	400204b8 	.word	0x400204b8
 8006e10:	58025408 	.word	0x58025408
 8006e14:	5802541c 	.word	0x5802541c
 8006e18:	58025430 	.word	0x58025430
 8006e1c:	58025444 	.word	0x58025444
 8006e20:	58025458 	.word	0x58025458
 8006e24:	5802546c 	.word	0x5802546c
 8006e28:	58025480 	.word	0x58025480
 8006e2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d160      	bne.n	8006efc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a7f      	ldr	r2, [pc, #508]	; (800703c <HAL_DMA_IRQHandler+0xc74>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d04a      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7d      	ldr	r2, [pc, #500]	; (8007040 <HAL_DMA_IRQHandler+0xc78>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d045      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7c      	ldr	r2, [pc, #496]	; (8007044 <HAL_DMA_IRQHandler+0xc7c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d040      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a7a      	ldr	r2, [pc, #488]	; (8007048 <HAL_DMA_IRQHandler+0xc80>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d03b      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a79      	ldr	r2, [pc, #484]	; (800704c <HAL_DMA_IRQHandler+0xc84>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d036      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a77      	ldr	r2, [pc, #476]	; (8007050 <HAL_DMA_IRQHandler+0xc88>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d031      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a76      	ldr	r2, [pc, #472]	; (8007054 <HAL_DMA_IRQHandler+0xc8c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d02c      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a74      	ldr	r2, [pc, #464]	; (8007058 <HAL_DMA_IRQHandler+0xc90>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d027      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a73      	ldr	r2, [pc, #460]	; (800705c <HAL_DMA_IRQHandler+0xc94>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d022      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a71      	ldr	r2, [pc, #452]	; (8007060 <HAL_DMA_IRQHandler+0xc98>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01d      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a70      	ldr	r2, [pc, #448]	; (8007064 <HAL_DMA_IRQHandler+0xc9c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a6e      	ldr	r2, [pc, #440]	; (8007068 <HAL_DMA_IRQHandler+0xca0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a6d      	ldr	r2, [pc, #436]	; (800706c <HAL_DMA_IRQHandler+0xca4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a6b      	ldr	r2, [pc, #428]	; (8007070 <HAL_DMA_IRQHandler+0xca8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6a      	ldr	r2, [pc, #424]	; (8007074 <HAL_DMA_IRQHandler+0xcac>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_DMA_IRQHandler+0xb12>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a68      	ldr	r2, [pc, #416]	; (8007078 <HAL_DMA_IRQHandler+0xcb0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <HAL_DMA_IRQHandler+0xb24>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0208 	bic.w	r2, r2, #8
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e007      	b.n	8006efc <HAL_DMA_IRQHandler+0xb34>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0204 	bic.w	r2, r2, #4
 8006efa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8165 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f0e:	e15f      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2202      	movs	r2, #2
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80c5 	beq.w	80070b0 <HAL_DMA_IRQHandler+0xce8>
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 80bf 	beq.w	80070b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f36:	f003 031f 	and.w	r3, r3, #31
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d018      	beq.n	8006f7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 813a 	beq.w	80071d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f68:	e134      	b.n	80071d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8130 	beq.w	80071d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7c:	e12a      	b.n	80071d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f003 0320 	and.w	r3, r3, #32
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 8089 	bne.w	800709c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2b      	ldr	r2, [pc, #172]	; (800703c <HAL_DMA_IRQHandler+0xc74>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d04a      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a29      	ldr	r2, [pc, #164]	; (8007040 <HAL_DMA_IRQHandler+0xc78>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d045      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a28      	ldr	r2, [pc, #160]	; (8007044 <HAL_DMA_IRQHandler+0xc7c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d040      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a26      	ldr	r2, [pc, #152]	; (8007048 <HAL_DMA_IRQHandler+0xc80>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d03b      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a25      	ldr	r2, [pc, #148]	; (800704c <HAL_DMA_IRQHandler+0xc84>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d036      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a23      	ldr	r2, [pc, #140]	; (8007050 <HAL_DMA_IRQHandler+0xc88>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d031      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a22      	ldr	r2, [pc, #136]	; (8007054 <HAL_DMA_IRQHandler+0xc8c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d02c      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a20      	ldr	r2, [pc, #128]	; (8007058 <HAL_DMA_IRQHandler+0xc90>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d027      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1f      	ldr	r2, [pc, #124]	; (800705c <HAL_DMA_IRQHandler+0xc94>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1d      	ldr	r2, [pc, #116]	; (8007060 <HAL_DMA_IRQHandler+0xc98>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01d      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1c      	ldr	r2, [pc, #112]	; (8007064 <HAL_DMA_IRQHandler+0xc9c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	; (8007068 <HAL_DMA_IRQHandler+0xca0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <HAL_DMA_IRQHandler+0xca4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a17      	ldr	r2, [pc, #92]	; (8007070 <HAL_DMA_IRQHandler+0xca8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a16      	ldr	r2, [pc, #88]	; (8007074 <HAL_DMA_IRQHandler+0xcac>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_DMA_IRQHandler+0xc62>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a14      	ldr	r2, [pc, #80]	; (8007078 <HAL_DMA_IRQHandler+0xcb0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d128      	bne.n	800707c <HAL_DMA_IRQHandler+0xcb4>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0214 	bic.w	r2, r2, #20
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e027      	b.n	800708c <HAL_DMA_IRQHandler+0xcc4>
 800703c:	40020010 	.word	0x40020010
 8007040:	40020028 	.word	0x40020028
 8007044:	40020040 	.word	0x40020040
 8007048:	40020058 	.word	0x40020058
 800704c:	40020070 	.word	0x40020070
 8007050:	40020088 	.word	0x40020088
 8007054:	400200a0 	.word	0x400200a0
 8007058:	400200b8 	.word	0x400200b8
 800705c:	40020410 	.word	0x40020410
 8007060:	40020428 	.word	0x40020428
 8007064:	40020440 	.word	0x40020440
 8007068:	40020458 	.word	0x40020458
 800706c:	40020470 	.word	0x40020470
 8007070:	40020488 	.word	0x40020488
 8007074:	400204a0 	.word	0x400204a0
 8007078:	400204b8 	.word	0x400204b8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 020a 	bic.w	r2, r2, #10
 800708a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 8097 	beq.w	80071d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ae:	e091      	b.n	80071d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b4:	f003 031f 	and.w	r3, r3, #31
 80070b8:	2208      	movs	r2, #8
 80070ba:	409a      	lsls	r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4013      	ands	r3, r2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8088 	beq.w	80071d6 <HAL_DMA_IRQHandler+0xe0e>
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8082 	beq.w	80071d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a41      	ldr	r2, [pc, #260]	; (80071dc <HAL_DMA_IRQHandler+0xe14>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d04a      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a3f      	ldr	r2, [pc, #252]	; (80071e0 <HAL_DMA_IRQHandler+0xe18>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d045      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3e      	ldr	r2, [pc, #248]	; (80071e4 <HAL_DMA_IRQHandler+0xe1c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d040      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3c      	ldr	r2, [pc, #240]	; (80071e8 <HAL_DMA_IRQHandler+0xe20>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d03b      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a3b      	ldr	r2, [pc, #236]	; (80071ec <HAL_DMA_IRQHandler+0xe24>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d036      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a39      	ldr	r2, [pc, #228]	; (80071f0 <HAL_DMA_IRQHandler+0xe28>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d031      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a38      	ldr	r2, [pc, #224]	; (80071f4 <HAL_DMA_IRQHandler+0xe2c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d02c      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a36      	ldr	r2, [pc, #216]	; (80071f8 <HAL_DMA_IRQHandler+0xe30>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d027      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a35      	ldr	r2, [pc, #212]	; (80071fc <HAL_DMA_IRQHandler+0xe34>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d022      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a33      	ldr	r2, [pc, #204]	; (8007200 <HAL_DMA_IRQHandler+0xe38>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01d      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a32      	ldr	r2, [pc, #200]	; (8007204 <HAL_DMA_IRQHandler+0xe3c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a30      	ldr	r2, [pc, #192]	; (8007208 <HAL_DMA_IRQHandler+0xe40>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2f      	ldr	r2, [pc, #188]	; (800720c <HAL_DMA_IRQHandler+0xe44>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2d      	ldr	r2, [pc, #180]	; (8007210 <HAL_DMA_IRQHandler+0xe48>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2c      	ldr	r2, [pc, #176]	; (8007214 <HAL_DMA_IRQHandler+0xe4c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_DMA_IRQHandler+0xdaa>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2a      	ldr	r2, [pc, #168]	; (8007218 <HAL_DMA_IRQHandler+0xe50>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d108      	bne.n	8007184 <HAL_DMA_IRQHandler+0xdbc>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 021c 	bic.w	r2, r2, #28
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e007      	b.n	8007194 <HAL_DMA_IRQHandler+0xdcc>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 020e 	bic.w	r2, r2, #14
 8007192:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	2201      	movs	r2, #1
 800719e:	409a      	lsls	r2, r3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
 80071ca:	e004      	b.n	80071d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071cc:	bf00      	nop
 80071ce:	e002      	b.n	80071d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d0:	bf00      	nop
 80071d2:	e000      	b.n	80071d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071d6:	3728      	adds	r7, #40	; 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40020010 	.word	0x40020010
 80071e0:	40020028 	.word	0x40020028
 80071e4:	40020040 	.word	0x40020040
 80071e8:	40020058 	.word	0x40020058
 80071ec:	40020070 	.word	0x40020070
 80071f0:	40020088 	.word	0x40020088
 80071f4:	400200a0 	.word	0x400200a0
 80071f8:	400200b8 	.word	0x400200b8
 80071fc:	40020410 	.word	0x40020410
 8007200:	40020428 	.word	0x40020428
 8007204:	40020440 	.word	0x40020440
 8007208:	40020458 	.word	0x40020458
 800720c:	40020470 	.word	0x40020470
 8007210:	40020488 	.word	0x40020488
 8007214:	400204a0 	.word	0x400204a0
 8007218:	400204b8 	.word	0x400204b8

0800721c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007234:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a7f      	ldr	r2, [pc, #508]	; (8007438 <DMA_SetConfig+0x21c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d072      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a7d      	ldr	r2, [pc, #500]	; (800743c <DMA_SetConfig+0x220>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d06d      	beq.n	8007326 <DMA_SetConfig+0x10a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7c      	ldr	r2, [pc, #496]	; (8007440 <DMA_SetConfig+0x224>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d068      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a7a      	ldr	r2, [pc, #488]	; (8007444 <DMA_SetConfig+0x228>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d063      	beq.n	8007326 <DMA_SetConfig+0x10a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a79      	ldr	r2, [pc, #484]	; (8007448 <DMA_SetConfig+0x22c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d05e      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a77      	ldr	r2, [pc, #476]	; (800744c <DMA_SetConfig+0x230>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d059      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a76      	ldr	r2, [pc, #472]	; (8007450 <DMA_SetConfig+0x234>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d054      	beq.n	8007326 <DMA_SetConfig+0x10a>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a74      	ldr	r2, [pc, #464]	; (8007454 <DMA_SetConfig+0x238>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d04f      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a73      	ldr	r2, [pc, #460]	; (8007458 <DMA_SetConfig+0x23c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d04a      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a71      	ldr	r2, [pc, #452]	; (800745c <DMA_SetConfig+0x240>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d045      	beq.n	8007326 <DMA_SetConfig+0x10a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a70      	ldr	r2, [pc, #448]	; (8007460 <DMA_SetConfig+0x244>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d040      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a6e      	ldr	r2, [pc, #440]	; (8007464 <DMA_SetConfig+0x248>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d03b      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a6d      	ldr	r2, [pc, #436]	; (8007468 <DMA_SetConfig+0x24c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d036      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a6b      	ldr	r2, [pc, #428]	; (800746c <DMA_SetConfig+0x250>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d031      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6a      	ldr	r2, [pc, #424]	; (8007470 <DMA_SetConfig+0x254>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d02c      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a68      	ldr	r2, [pc, #416]	; (8007474 <DMA_SetConfig+0x258>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d027      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a67      	ldr	r2, [pc, #412]	; (8007478 <DMA_SetConfig+0x25c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a65      	ldr	r2, [pc, #404]	; (800747c <DMA_SetConfig+0x260>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a64      	ldr	r2, [pc, #400]	; (8007480 <DMA_SetConfig+0x264>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a62      	ldr	r2, [pc, #392]	; (8007484 <DMA_SetConfig+0x268>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <DMA_SetConfig+0x10a>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a61      	ldr	r2, [pc, #388]	; (8007488 <DMA_SetConfig+0x26c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a5f      	ldr	r2, [pc, #380]	; (800748c <DMA_SetConfig+0x270>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <DMA_SetConfig+0x10a>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a5e      	ldr	r2, [pc, #376]	; (8007490 <DMA_SetConfig+0x274>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <DMA_SetConfig+0x10a>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a5c      	ldr	r2, [pc, #368]	; (8007494 <DMA_SetConfig+0x278>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d101      	bne.n	800732a <DMA_SetConfig+0x10e>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <DMA_SetConfig+0x110>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00d      	beq.n	800734c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007338:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800734a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a39      	ldr	r2, [pc, #228]	; (8007438 <DMA_SetConfig+0x21c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d04a      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a38      	ldr	r2, [pc, #224]	; (800743c <DMA_SetConfig+0x220>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d045      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a36      	ldr	r2, [pc, #216]	; (8007440 <DMA_SetConfig+0x224>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d040      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a35      	ldr	r2, [pc, #212]	; (8007444 <DMA_SetConfig+0x228>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d03b      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a33      	ldr	r2, [pc, #204]	; (8007448 <DMA_SetConfig+0x22c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d036      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a32      	ldr	r2, [pc, #200]	; (800744c <DMA_SetConfig+0x230>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d031      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a30      	ldr	r2, [pc, #192]	; (8007450 <DMA_SetConfig+0x234>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d02c      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2f      	ldr	r2, [pc, #188]	; (8007454 <DMA_SetConfig+0x238>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d027      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2d      	ldr	r2, [pc, #180]	; (8007458 <DMA_SetConfig+0x23c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d022      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2c      	ldr	r2, [pc, #176]	; (800745c <DMA_SetConfig+0x240>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d01d      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2a      	ldr	r2, [pc, #168]	; (8007460 <DMA_SetConfig+0x244>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d018      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a29      	ldr	r2, [pc, #164]	; (8007464 <DMA_SetConfig+0x248>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d013      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a27      	ldr	r2, [pc, #156]	; (8007468 <DMA_SetConfig+0x24c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00e      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a26      	ldr	r2, [pc, #152]	; (800746c <DMA_SetConfig+0x250>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d009      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a24      	ldr	r2, [pc, #144]	; (8007470 <DMA_SetConfig+0x254>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d004      	beq.n	80073ec <DMA_SetConfig+0x1d0>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a23      	ldr	r2, [pc, #140]	; (8007474 <DMA_SetConfig+0x258>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d101      	bne.n	80073f0 <DMA_SetConfig+0x1d4>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <DMA_SetConfig+0x1d6>
 80073f0:	2300      	movs	r3, #0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d059      	beq.n	80074aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	223f      	movs	r2, #63	; 0x3f
 8007400:	409a      	lsls	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007414:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d138      	bne.n	8007498 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007436:	e086      	b.n	8007546 <DMA_SetConfig+0x32a>
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8
 8007478:	58025408 	.word	0x58025408
 800747c:	5802541c 	.word	0x5802541c
 8007480:	58025430 	.word	0x58025430
 8007484:	58025444 	.word	0x58025444
 8007488:	58025458 	.word	0x58025458
 800748c:	5802546c 	.word	0x5802546c
 8007490:	58025480 	.word	0x58025480
 8007494:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	60da      	str	r2, [r3, #12]
}
 80074a8:	e04d      	b.n	8007546 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a29      	ldr	r2, [pc, #164]	; (8007554 <DMA_SetConfig+0x338>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a27      	ldr	r2, [pc, #156]	; (8007558 <DMA_SetConfig+0x33c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a26      	ldr	r2, [pc, #152]	; (800755c <DMA_SetConfig+0x340>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a24      	ldr	r2, [pc, #144]	; (8007560 <DMA_SetConfig+0x344>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a23      	ldr	r2, [pc, #140]	; (8007564 <DMA_SetConfig+0x348>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a21      	ldr	r2, [pc, #132]	; (8007568 <DMA_SetConfig+0x34c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a20      	ldr	r2, [pc, #128]	; (800756c <DMA_SetConfig+0x350>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <DMA_SetConfig+0x2de>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a1e      	ldr	r2, [pc, #120]	; (8007570 <DMA_SetConfig+0x354>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d101      	bne.n	80074fe <DMA_SetConfig+0x2e2>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <DMA_SetConfig+0x2e4>
 80074fe:	2300      	movs	r3, #0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	2201      	movs	r2, #1
 800750e:	409a      	lsls	r2, r3
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d108      	bne.n	8007536 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	60da      	str	r2, [r3, #12]
}
 8007534:	e007      	b.n	8007546 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	60da      	str	r2, [r3, #12]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	58025408 	.word	0x58025408
 8007558:	5802541c 	.word	0x5802541c
 800755c:	58025430 	.word	0x58025430
 8007560:	58025444 	.word	0x58025444
 8007564:	58025458 	.word	0x58025458
 8007568:	5802546c 	.word	0x5802546c
 800756c:	58025480 	.word	0x58025480
 8007570:	58025494 	.word	0x58025494

08007574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a42      	ldr	r2, [pc, #264]	; (800768c <DMA_CalcBaseAndBitshift+0x118>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d04a      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a41      	ldr	r2, [pc, #260]	; (8007690 <DMA_CalcBaseAndBitshift+0x11c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d045      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a3f      	ldr	r2, [pc, #252]	; (8007694 <DMA_CalcBaseAndBitshift+0x120>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d040      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a3e      	ldr	r2, [pc, #248]	; (8007698 <DMA_CalcBaseAndBitshift+0x124>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d03b      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a3c      	ldr	r2, [pc, #240]	; (800769c <DMA_CalcBaseAndBitshift+0x128>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d036      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a3b      	ldr	r2, [pc, #236]	; (80076a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d031      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a39      	ldr	r2, [pc, #228]	; (80076a4 <DMA_CalcBaseAndBitshift+0x130>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d02c      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a38      	ldr	r2, [pc, #224]	; (80076a8 <DMA_CalcBaseAndBitshift+0x134>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d027      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a36      	ldr	r2, [pc, #216]	; (80076ac <DMA_CalcBaseAndBitshift+0x138>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d022      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a35      	ldr	r2, [pc, #212]	; (80076b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d01d      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a33      	ldr	r2, [pc, #204]	; (80076b4 <DMA_CalcBaseAndBitshift+0x140>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d018      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a32      	ldr	r2, [pc, #200]	; (80076b8 <DMA_CalcBaseAndBitshift+0x144>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d013      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a30      	ldr	r2, [pc, #192]	; (80076bc <DMA_CalcBaseAndBitshift+0x148>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00e      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a2f      	ldr	r2, [pc, #188]	; (80076c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d009      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a2d      	ldr	r2, [pc, #180]	; (80076c4 <DMA_CalcBaseAndBitshift+0x150>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <DMA_CalcBaseAndBitshift+0xa8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <DMA_CalcBaseAndBitshift+0x154>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d101      	bne.n	8007620 <DMA_CalcBaseAndBitshift+0xac>
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <DMA_CalcBaseAndBitshift+0xae>
 8007620:	2300      	movs	r3, #0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d024      	beq.n	8007670 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	3b10      	subs	r3, #16
 800762e:	4a27      	ldr	r2, [pc, #156]	; (80076cc <DMA_CalcBaseAndBitshift+0x158>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	091b      	lsrs	r3, r3, #4
 8007636:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	4a24      	ldr	r2, [pc, #144]	; (80076d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007640:	5cd3      	ldrb	r3, [r2, r3]
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b03      	cmp	r3, #3
 800764c:	d908      	bls.n	8007660 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007656:	4013      	ands	r3, r2
 8007658:	1d1a      	adds	r2, r3, #4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	659a      	str	r2, [r3, #88]	; 0x58
 800765e:	e00d      	b.n	800767c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007668:	4013      	ands	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6593      	str	r3, [r2, #88]	; 0x58
 800766e:	e005      	b.n	800767c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	40020010 	.word	0x40020010
 8007690:	40020028 	.word	0x40020028
 8007694:	40020040 	.word	0x40020040
 8007698:	40020058 	.word	0x40020058
 800769c:	40020070 	.word	0x40020070
 80076a0:	40020088 	.word	0x40020088
 80076a4:	400200a0 	.word	0x400200a0
 80076a8:	400200b8 	.word	0x400200b8
 80076ac:	40020410 	.word	0x40020410
 80076b0:	40020428 	.word	0x40020428
 80076b4:	40020440 	.word	0x40020440
 80076b8:	40020458 	.word	0x40020458
 80076bc:	40020470 	.word	0x40020470
 80076c0:	40020488 	.word	0x40020488
 80076c4:	400204a0 	.word	0x400204a0
 80076c8:	400204b8 	.word	0x400204b8
 80076cc:	aaaaaaab 	.word	0xaaaaaaab
 80076d0:	0801c5d0 	.word	0x0801c5d0
 80076d4:	fffffc00 	.word	0xfffffc00

080076d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d120      	bne.n	800772e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d858      	bhi.n	80077a6 <DMA_CheckFifoParam+0xce>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <DMA_CheckFifoParam+0x24>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	0800771f 	.word	0x0800771f
 8007704:	0800770d 	.word	0x0800770d
 8007708:	080077a7 	.word	0x080077a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d048      	beq.n	80077aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800771c:	e045      	b.n	80077aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007726:	d142      	bne.n	80077ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800772c:	e03f      	b.n	80077ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007736:	d123      	bne.n	8007780 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	2b03      	cmp	r3, #3
 800773e:	d838      	bhi.n	80077b2 <DMA_CheckFifoParam+0xda>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <DMA_CheckFifoParam+0x70>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007759 	.word	0x08007759
 800774c:	0800775f 	.word	0x0800775f
 8007750:	08007759 	.word	0x08007759
 8007754:	08007771 	.word	0x08007771
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
        break;
 800775c:	e030      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d025      	beq.n	80077b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800776e:	e022      	b.n	80077b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007778:	d11f      	bne.n	80077ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800777e:	e01c      	b.n	80077ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	2b02      	cmp	r3, #2
 8007786:	d902      	bls.n	800778e <DMA_CheckFifoParam+0xb6>
 8007788:	2b03      	cmp	r3, #3
 800778a:	d003      	beq.n	8007794 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800778c:	e018      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
        break;
 8007792:	e015      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
    break;
 80077a4:	e00b      	b.n	80077be <DMA_CheckFifoParam+0xe6>
        break;
 80077a6:	bf00      	nop
 80077a8:	e00a      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e008      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        break;
 80077ae:	bf00      	nop
 80077b0:	e006      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        break;
 80077b2:	bf00      	nop
 80077b4:	e004      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        break;
 80077b6:	bf00      	nop
 80077b8:	e002      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
        break;
 80077ba:	bf00      	nop
 80077bc:	e000      	b.n	80077c0 <DMA_CheckFifoParam+0xe8>
    break;
 80077be:	bf00      	nop
    }
  }

  return status;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a38      	ldr	r2, [pc, #224]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d022      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a36      	ldr	r2, [pc, #216]	; (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01d      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a35      	ldr	r2, [pc, #212]	; (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d018      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a33      	ldr	r2, [pc, #204]	; (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d013      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a32      	ldr	r2, [pc, #200]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00e      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a30      	ldr	r2, [pc, #192]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d009      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2f      	ldr	r2, [pc, #188]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d004      	beq.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a2d      	ldr	r2, [pc, #180]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d101      	bne.n	8007832 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800782e:	2301      	movs	r3, #1
 8007830:	e000      	b.n	8007834 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007832:	2300      	movs	r3, #0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01a      	beq.n	800786e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	3b08      	subs	r3, #8
 8007840:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	091b      	lsrs	r3, r3, #4
 8007848:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a24      	ldr	r2, [pc, #144]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800785c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2201      	movs	r2, #1
 8007866:	409a      	lsls	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800786c:	e024      	b.n	80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	b2db      	uxtb	r3, r3
 8007874:	3b10      	subs	r3, #16
 8007876:	4a1e      	ldr	r2, [pc, #120]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	091b      	lsrs	r3, r3, #4
 800787e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4a1c      	ldr	r2, [pc, #112]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d806      	bhi.n	8007896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d902      	bls.n	8007896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3308      	adds	r3, #8
 8007894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4b18      	ldr	r3, [pc, #96]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a16      	ldr	r2, [pc, #88]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	2201      	movs	r2, #1
 80078b2:	409a      	lsls	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	58025408 	.word	0x58025408
 80078c8:	5802541c 	.word	0x5802541c
 80078cc:	58025430 	.word	0x58025430
 80078d0:	58025444 	.word	0x58025444
 80078d4:	58025458 	.word	0x58025458
 80078d8:	5802546c 	.word	0x5802546c
 80078dc:	58025480 	.word	0x58025480
 80078e0:	58025494 	.word	0x58025494
 80078e4:	cccccccd 	.word	0xcccccccd
 80078e8:	16009600 	.word	0x16009600
 80078ec:	58025880 	.word	0x58025880
 80078f0:	aaaaaaab 	.word	0xaaaaaaab
 80078f4:	400204b8 	.word	0x400204b8
 80078f8:	4002040f 	.word	0x4002040f
 80078fc:	10008200 	.word	0x10008200
 8007900:	40020880 	.word	0x40020880

08007904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d04a      	beq.n	80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b08      	cmp	r3, #8
 800791e:	d847      	bhi.n	80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a25      	ldr	r2, [pc, #148]	; (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d022      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a24      	ldr	r2, [pc, #144]	; (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d01d      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a22      	ldr	r2, [pc, #136]	; (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d018      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a21      	ldr	r2, [pc, #132]	; (80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1f      	ldr	r2, [pc, #124]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00e      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1e      	ldr	r2, [pc, #120]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d009      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1c      	ldr	r2, [pc, #112]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d004      	beq.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d101      	bne.n	8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007974:	2300      	movs	r3, #0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4b17      	ldr	r3, [pc, #92]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a15      	ldr	r2, [pc, #84]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800798c:	671a      	str	r2, [r3, #112]	; 0x70
 800798e:	e009      	b.n	80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	2201      	movs	r2, #1
 80079aa:	409a      	lsls	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	58025408 	.word	0x58025408
 80079c0:	5802541c 	.word	0x5802541c
 80079c4:	58025430 	.word	0x58025430
 80079c8:	58025444 	.word	0x58025444
 80079cc:	58025458 	.word	0x58025458
 80079d0:	5802546c 	.word	0x5802546c
 80079d4:	58025480 	.word	0x58025480
 80079d8:	58025494 	.word	0x58025494
 80079dc:	1600963f 	.word	0x1600963f
 80079e0:	58025940 	.word	0x58025940
 80079e4:	1000823f 	.word	0x1000823f
 80079e8:	40020940 	.word	0x40020940

080079ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b098      	sub	sp, #96	; 0x60
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80079f4:	4a84      	ldr	r2, [pc, #528]	; (8007c08 <HAL_FDCAN_Init+0x21c>)
 80079f6:	f107 030c 	add.w	r3, r7, #12
 80079fa:	4611      	mov	r1, r2
 80079fc:	224c      	movs	r2, #76	; 0x4c
 80079fe:	4618      	mov	r0, r3
 8007a00:	f00f fd02 	bl	8017408 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e1c6      	b.n	8007d9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a7e      	ldr	r2, [pc, #504]	; (8007c0c <HAL_FDCAN_Init+0x220>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d106      	bne.n	8007a26 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7fb fa46 	bl	8002ecc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0210 	bic.w	r2, r2, #16
 8007a4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a50:	f7fc fa30 	bl	8003eb4 <HAL_GetTick>
 8007a54:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a56:	e014      	b.n	8007a82 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a58:	f7fc fa2c 	bl	8003eb4 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b0a      	cmp	r3, #10
 8007a64:	d90d      	bls.n	8007a82 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a6c:	f043 0201 	orr.w	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e18c      	b.n	8007d9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f003 0308 	and.w	r3, r3, #8
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d0e3      	beq.n	8007a58 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa0:	f7fc fa08 	bl	8003eb4 <HAL_GetTick>
 8007aa4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007aa6:	e014      	b.n	8007ad2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007aa8:	f7fc fa04 	bl	8003eb4 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b0a      	cmp	r3, #10
 8007ab4:	d90d      	bls.n	8007ad2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007abc:	f043 0201 	orr.w	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2203      	movs	r2, #3
 8007aca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e164      	b.n	8007d9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0e3      	beq.n	8007aa8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0202 	orr.w	r2, r2, #2
 8007aee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	7c1b      	ldrb	r3, [r3, #16]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d108      	bne.n	8007b0a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b06:	619a      	str	r2, [r3, #24]
 8007b08:	e007      	b.n	8007b1a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b18:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7c5b      	ldrb	r3, [r3, #17]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d108      	bne.n	8007b34 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	699a      	ldr	r2, [r3, #24]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b30:	619a      	str	r2, [r3, #24]
 8007b32:	e007      	b.n	8007b44 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b42:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	7c9b      	ldrb	r3, [r3, #18]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d108      	bne.n	8007b5e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b5a:	619a      	str	r2, [r3, #24]
 8007b5c:	e007      	b.n	8007b6e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b6c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007b92:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0210 	bic.w	r2, r2, #16
 8007ba2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d108      	bne.n	8007bbe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0204 	orr.w	r2, r2, #4
 8007bba:	619a      	str	r2, [r3, #24]
 8007bbc:	e030      	b.n	8007c20 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d02c      	beq.n	8007c20 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d020      	beq.n	8007c10 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bdc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0210 	orr.w	r2, r2, #16
 8007bec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d114      	bne.n	8007c20 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699a      	ldr	r2, [r3, #24]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0220 	orr.w	r2, r2, #32
 8007c04:	619a      	str	r2, [r3, #24]
 8007c06:	e00b      	b.n	8007c20 <HAL_FDCAN_Init+0x234>
 8007c08:	0801c4bc 	.word	0x0801c4bc
 8007c0c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0220 	orr.w	r2, r2, #32
 8007c1e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c30:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c38:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c48:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c4a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c54:	d115      	bne.n	8007c82 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	3b01      	subs	r3, #1
 8007c62:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c64:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c6e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	3b01      	subs	r3, #1
 8007c78:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c7e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c80:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca8:	4413      	add	r3, r2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d011      	beq.n	8007cd2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007cb6:	f023 0107 	bic.w	r1, r3, #7
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	3360      	adds	r3, #96	; 0x60
 8007cc2:	443b      	add	r3, r7
 8007cc4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ce2:	f023 0107 	bic.w	r1, r3, #7
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	3360      	adds	r3, #96	; 0x60
 8007cee:	443b      	add	r3, r7
 8007cf0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d012      	beq.n	8007d2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	3360      	adds	r3, #96	; 0x60
 8007d1a:	443b      	add	r3, r7
 8007d1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d20:	011a      	lsls	r2, r3, #4
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d012      	beq.n	8007d5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	3360      	adds	r3, #96	; 0x60
 8007d48:	443b      	add	r3, r7
 8007d4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d4e:	021a      	lsls	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a11      	ldr	r2, [pc, #68]	; (8007da4 <HAL_FDCAN_Init+0x3b8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d107      	bne.n	8007d74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f022 0203 	bic.w	r2, r2, #3
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f80b 	bl	8007da8 <FDCAN_CalcultateRamBlockAddresses>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007d98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3760      	adds	r7, #96	; 0x60
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	4000a000 	.word	0x4000a000

08007da8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007dbe:	4ba7      	ldr	r3, [pc, #668]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	0091      	lsls	r1, r2, #2
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	430b      	orrs	r3, r1
 8007dcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	041a      	lsls	r2, r3, #16
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4413      	add	r3, r2
 8007df4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dfe:	4b97      	ldr	r3, [pc, #604]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0091      	lsls	r1, r2, #2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e18:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e20:	041a      	lsls	r2, r3, #16
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007e40:	4b86      	ldr	r3, [pc, #536]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	0091      	lsls	r1, r2, #2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	041a      	lsls	r2, r3, #16
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e76:	fb02 f303 	mul.w	r3, r2, r3
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e88:	4b74      	ldr	r3, [pc, #464]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	0091      	lsls	r1, r2, #2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	430b      	orrs	r3, r1
 8007e96:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ea2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eaa:	041a      	lsls	r2, r3, #16
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ebe:	fb02 f303 	mul.w	r3, r2, r3
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ed0:	4b62      	ldr	r3, [pc, #392]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	0091      	lsls	r1, r2, #2
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6812      	ldr	r2, [r2, #0]
 8007edc:	430b      	orrs	r3, r1
 8007ede:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007eea:	fb02 f303 	mul.w	r3, r2, r3
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007efc:	4b57      	ldr	r3, [pc, #348]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007efe:	4013      	ands	r3, r2
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	0091      	lsls	r1, r2, #2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f16:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1e:	041a      	lsls	r2, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	4413      	add	r3, r2
 8007f34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007f3e:	4b47      	ldr	r3, [pc, #284]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0091      	lsls	r1, r2, #2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6812      	ldr	r2, [r2, #0]
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f58:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f60:	041a      	lsls	r2, r3, #16
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f74:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7c:	061a      	lsls	r2, r3, #24
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8c:	4b34      	ldr	r3, [pc, #208]	; (8008060 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007f8e:	4413      	add	r3, r2
 8007f90:	009a      	lsls	r2, r3, #2
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	441a      	add	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	441a      	add	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	441a      	add	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007fda:	fb01 f303 	mul.w	r3, r1, r3
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	441a      	add	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800803e:	fb01 f303 	mul.w	r3, r1, r3
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008052:	4a04      	ldr	r2, [pc, #16]	; (8008064 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d915      	bls.n	8008084 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008058:	e006      	b.n	8008068 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800805a:	bf00      	nop
 800805c:	ffff0003 	.word	0xffff0003
 8008060:	10002b00 	.word	0x10002b00
 8008064:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800806e:	f043 0220 	orr.w	r2, r3, #32
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2203      	movs	r2, #3
 800807c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e010      	b.n	80080a6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	e005      	b.n	8008098 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3304      	adds	r3, #4
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d3f3      	bcc.n	800808c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b089      	sub	sp, #36	; 0x24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080c2:	4b86      	ldr	r3, [pc, #536]	; (80082dc <HAL_GPIO_Init+0x228>)
 80080c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080c6:	e18c      	b.n	80083e2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	2101      	movs	r1, #1
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	fa01 f303 	lsl.w	r3, r1, r3
 80080d4:	4013      	ands	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 817e 	beq.w	80083dc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d005      	beq.n	80080f8 <HAL_GPIO_Init+0x44>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 0303 	and.w	r3, r3, #3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d130      	bne.n	800815a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	2203      	movs	r2, #3
 8008104:	fa02 f303 	lsl.w	r3, r2, r3
 8008108:	43db      	mvns	r3, r3
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	4013      	ands	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	fa02 f303 	lsl.w	r3, r2, r3
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	4313      	orrs	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800812e:	2201      	movs	r2, #1
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	43db      	mvns	r3, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4013      	ands	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	091b      	lsrs	r3, r3, #4
 8008144:	f003 0201 	and.w	r2, r3, #1
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	4313      	orrs	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	2b03      	cmp	r3, #3
 8008164:	d017      	beq.n	8008196 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	2203      	movs	r2, #3
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43db      	mvns	r3, r3
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	4013      	ands	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	4313      	orrs	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d123      	bne.n	80081ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	08da      	lsrs	r2, r3, #3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3208      	adds	r2, #8
 80081aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	220f      	movs	r2, #15
 80081ba:	fa02 f303 	lsl.w	r3, r2, r3
 80081be:	43db      	mvns	r3, r3
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	4013      	ands	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	4313      	orrs	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	08da      	lsrs	r2, r3, #3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3208      	adds	r2, #8
 80081e4:	69b9      	ldr	r1, [r7, #24]
 80081e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	2203      	movs	r2, #3
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	43db      	mvns	r3, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4013      	ands	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f003 0203 	and.w	r2, r3, #3
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	4313      	orrs	r3, r2
 8008216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 80d8 	beq.w	80083dc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800822c:	4b2c      	ldr	r3, [pc, #176]	; (80082e0 <HAL_GPIO_Init+0x22c>)
 800822e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008232:	4a2b      	ldr	r2, [pc, #172]	; (80082e0 <HAL_GPIO_Init+0x22c>)
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800823c:	4b28      	ldr	r3, [pc, #160]	; (80082e0 <HAL_GPIO_Init+0x22c>)
 800823e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800824a:	4a26      	ldr	r2, [pc, #152]	; (80082e4 <HAL_GPIO_Init+0x230>)
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	089b      	lsrs	r3, r3, #2
 8008250:	3302      	adds	r3, #2
 8008252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	220f      	movs	r2, #15
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	43db      	mvns	r3, r3
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	4013      	ands	r3, r2
 800826c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1d      	ldr	r2, [pc, #116]	; (80082e8 <HAL_GPIO_Init+0x234>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d04a      	beq.n	800830c <HAL_GPIO_Init+0x258>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <HAL_GPIO_Init+0x238>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d02b      	beq.n	80082d6 <HAL_GPIO_Init+0x222>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <HAL_GPIO_Init+0x23c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d025      	beq.n	80082d2 <HAL_GPIO_Init+0x21e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <HAL_GPIO_Init+0x240>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01f      	beq.n	80082ce <HAL_GPIO_Init+0x21a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <HAL_GPIO_Init+0x244>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d019      	beq.n	80082ca <HAL_GPIO_Init+0x216>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <HAL_GPIO_Init+0x248>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <HAL_GPIO_Init+0x212>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a17      	ldr	r2, [pc, #92]	; (8008300 <HAL_GPIO_Init+0x24c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00d      	beq.n	80082c2 <HAL_GPIO_Init+0x20e>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a16      	ldr	r2, [pc, #88]	; (8008304 <HAL_GPIO_Init+0x250>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d007      	beq.n	80082be <HAL_GPIO_Init+0x20a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a15      	ldr	r2, [pc, #84]	; (8008308 <HAL_GPIO_Init+0x254>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d101      	bne.n	80082ba <HAL_GPIO_Init+0x206>
 80082b6:	2309      	movs	r3, #9
 80082b8:	e029      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082ba:	230a      	movs	r3, #10
 80082bc:	e027      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082be:	2307      	movs	r3, #7
 80082c0:	e025      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082c2:	2306      	movs	r3, #6
 80082c4:	e023      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082c6:	2305      	movs	r3, #5
 80082c8:	e021      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082ca:	2304      	movs	r3, #4
 80082cc:	e01f      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082ce:	2303      	movs	r3, #3
 80082d0:	e01d      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082d2:	2302      	movs	r3, #2
 80082d4:	e01b      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e019      	b.n	800830e <HAL_GPIO_Init+0x25a>
 80082da:	bf00      	nop
 80082dc:	58000080 	.word	0x58000080
 80082e0:	58024400 	.word	0x58024400
 80082e4:	58000400 	.word	0x58000400
 80082e8:	58020000 	.word	0x58020000
 80082ec:	58020400 	.word	0x58020400
 80082f0:	58020800 	.word	0x58020800
 80082f4:	58020c00 	.word	0x58020c00
 80082f8:	58021000 	.word	0x58021000
 80082fc:	58021400 	.word	0x58021400
 8008300:	58021800 	.word	0x58021800
 8008304:	58021c00 	.word	0x58021c00
 8008308:	58022400 	.word	0x58022400
 800830c:	2300      	movs	r3, #0
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	f002 0203 	and.w	r2, r2, #3
 8008314:	0092      	lsls	r2, r2, #2
 8008316:	4093      	lsls	r3, r2
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	4313      	orrs	r3, r2
 800831c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800831e:	4938      	ldr	r1, [pc, #224]	; (8008400 <HAL_GPIO_Init+0x34c>)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	3302      	adds	r3, #2
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800832c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	43db      	mvns	r3, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	4013      	ands	r3, r2
 800833c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800835a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	43db      	mvns	r3, r3
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	43db      	mvns	r3, r3
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	4013      	ands	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	43db      	mvns	r3, r3
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	4013      	ands	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	3301      	adds	r3, #1
 80083e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f47f ae6b 	bne.w	80080c8 <HAL_GPIO_Init+0x14>
  }
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	3724      	adds	r7, #36	; 0x24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	58000400 	.word	0x58000400

08008404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	887b      	ldrh	r3, [r7, #2]
 8008416:	4013      	ands	r3, r2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
 8008420:	e001      	b.n	8008426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	807b      	strh	r3, [r7, #2]
 8008440:	4613      	mov	r3, r2
 8008442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008444:	787b      	ldrb	r3, [r7, #1]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800844a:	887a      	ldrh	r2, [r7, #2]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008450:	e003      	b.n	800845a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008452:	887b      	ldrh	r3, [r7, #2]
 8008454:	041a      	lsls	r2, r3, #16
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	619a      	str	r2, [r3, #24]
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e07f      	b.n	800857a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d106      	bne.n	8008494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fa fd84 	bl	8002f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2224      	movs	r2, #36	; 0x24
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	e006      	b.n	80084f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d104      	bne.n	8008502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6859      	ldr	r1, [r3, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <HAL_I2C_Init+0x11c>)
 800850e:	430b      	orrs	r3, r1
 8008510:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008520:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691a      	ldr	r2, [r3, #16]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	69d9      	ldr	r1, [r3, #28]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1a      	ldr	r2, [r3, #32]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	02008000 	.word	0x02008000

08008588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b20      	cmp	r3, #32
 800859c:	d138      	bne.n	8008610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e032      	b.n	8008612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2224      	movs	r2, #36	; 0x24
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b20      	cmp	r3, #32
 8008632:	d139      	bne.n	80086a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800863a:	2b01      	cmp	r3, #1
 800863c:	d101      	bne.n	8008642 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800863e:	2302      	movs	r3, #2
 8008640:	e033      	b.n	80086aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2224      	movs	r2, #36	; 0x24
 800864e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008670:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0201 	orr.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e000      	b.n	80086aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086a8:	2302      	movs	r3, #2
  }
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b8:	b08f      	sub	sp, #60	; 0x3c
 80086ba:	af0a      	add	r7, sp, #40	; 0x28
 80086bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e116      	b.n	80088f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f00e fb5a 	bl	8016d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2203      	movs	r2, #3
 80086ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f00a fc9f 	bl	801304a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	687e      	ldr	r6, [r7, #4]
 8008714:	466d      	mov	r5, sp
 8008716:	f106 0410 	add.w	r4, r6, #16
 800871a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800871c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800871e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008726:	e885 0003 	stmia.w	r5, {r0, r1}
 800872a:	1d33      	adds	r3, r6, #4
 800872c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800872e:	6838      	ldr	r0, [r7, #0]
 8008730:	f00a fb6a 	bl	8012e08 <USB_CoreInit>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e0d7      	b.n	80088f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2100      	movs	r1, #0
 800874c:	4618      	mov	r0, r3
 800874e:	f00a fc8d 	bl	801306c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
 8008756:	e04a      	b.n	80087ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	333d      	adds	r3, #61	; 0x3d
 8008768:	2201      	movs	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800876c:	7bfa      	ldrb	r2, [r7, #15]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	333c      	adds	r3, #60	; 0x3c
 800877c:	7bfa      	ldrb	r2, [r7, #15]
 800877e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	b298      	uxth	r0, r3
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	3356      	adds	r3, #86	; 0x56
 8008794:	4602      	mov	r2, r0
 8008796:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008798:	7bfa      	ldrb	r2, [r7, #15]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3340      	adds	r3, #64	; 0x40
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	3344      	adds	r3, #68	; 0x44
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	3348      	adds	r3, #72	; 0x48
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087d4:	7bfa      	ldrb	r2, [r7, #15]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	334c      	adds	r3, #76	; 0x4c
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	3301      	adds	r3, #1
 80087ec:	73fb      	strb	r3, [r7, #15]
 80087ee:	7bfa      	ldrb	r2, [r7, #15]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3af      	bcc.n	8008758 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e044      	b.n	8008888 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80087fe:	7bfa      	ldrb	r2, [r7, #15]
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008814:	7bfa      	ldrb	r2, [r7, #15]
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008826:	7bfa      	ldrb	r2, [r7, #15]
 8008828:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800882a:	7bfa      	ldrb	r2, [r7, #15]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008840:	7bfa      	ldrb	r2, [r7, #15]
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008856:	7bfa      	ldrb	r2, [r7, #15]
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800886c:	7bfa      	ldrb	r2, [r7, #15]
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	3301      	adds	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d3b5      	bcc.n	80087fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	687e      	ldr	r6, [r7, #4]
 800889a:	466d      	mov	r5, sp
 800889c:	f106 0410 	add.w	r4, r6, #16
 80088a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80088b0:	1d33      	adds	r3, r6, #4
 80088b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088b4:	6838      	ldr	r0, [r7, #0]
 80088b6:	f00a fc25 	bl	8013104 <USB_DevInit>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e014      	b.n	80088f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d102      	bne.n	80088ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 f96f 	bl	8009bc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f00b fc67 	bl	80141c2 <USB_DevDisconnect>

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_PCD_Start+0x1c>
 8008916:	2302      	movs	r3, #2
 8008918:	e022      	b.n	8008960 <HAL_PCD_Start+0x62>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008932:	2b01      	cmp	r3, #1
 8008934:	d105      	bne.n	8008942 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f00a fb6e 	bl	8013028 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f00b fc15 	bl	8014180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008968:	b590      	push	{r4, r7, lr}
 800896a:	b08d      	sub	sp, #52	; 0x34
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f00b fcd3 	bl	801432a <USB_GetMode>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 84b7 	bne.w	80092fa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4618      	mov	r0, r3
 8008992:	f00b fc37 	bl	8014204 <USB_ReadInterrupts>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 84ad 	beq.w	80092f8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	0a1b      	lsrs	r3, r3, #8
 80089a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f00b fc24 	bl	8014204 <USB_ReadInterrupts>
 80089bc:	4603      	mov	r3, r0
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d107      	bne.n	80089d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695a      	ldr	r2, [r3, #20]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f002 0202 	and.w	r2, r2, #2
 80089d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f00b fc12 	bl	8014204 <USB_ReadInterrupts>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d161      	bne.n	8008aae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0210 	bic.w	r2, r2, #16
 80089f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	f003 020f 	and.w	r2, r3, #15
 8008a06:	4613      	mov	r3, r2
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	3304      	adds	r3, #4
 8008a18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	0c5b      	lsrs	r3, r3, #17
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d124      	bne.n	8008a70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d035      	beq.n	8008a9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	091b      	lsrs	r3, r3, #4
 8008a3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	6a38      	ldr	r0, [r7, #32]
 8008a46:	f00b fa49 	bl	8013edc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	091b      	lsrs	r3, r3, #4
 8008a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a56:	441a      	add	r2, r3
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	695a      	ldr	r2, [r3, #20]
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	091b      	lsrs	r3, r3, #4
 8008a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a68:	441a      	add	r2, r3
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	615a      	str	r2, [r3, #20]
 8008a6e:	e016      	b.n	8008a9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	0c5b      	lsrs	r3, r3, #17
 8008a74:	f003 030f 	and.w	r3, r3, #15
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	d110      	bne.n	8008a9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a82:	2208      	movs	r2, #8
 8008a84:	4619      	mov	r1, r3
 8008a86:	6a38      	ldr	r0, [r7, #32]
 8008a88:	f00b fa28 	bl	8013edc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	091b      	lsrs	r3, r3, #4
 8008a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a98:	441a      	add	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0210 	orr.w	r2, r2, #16
 8008aac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f00b fba6 	bl	8014204 <USB_ReadInterrupts>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008abe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ac2:	f040 80a7 	bne.w	8008c14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f00b fbab 	bl	801422a <USB_ReadDevAllOutEpInterrupt>
 8008ad4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008ad6:	e099      	b.n	8008c0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 808e 	beq.w	8008c00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f00b fbcf 	bl	8014292 <USB_ReadDevOutEPInterrupt>
 8008af4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00c      	beq.n	8008b1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2301      	movs	r3, #1
 8008b10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fed1 	bl	80098bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b30:	461a      	mov	r2, r3
 8008b32:	2308      	movs	r3, #8
 8008b34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 ffa7 	bl	8009a8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b54:	461a      	mov	r2, r3
 8008b56:	2310      	movs	r3, #16
 8008b58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d030      	beq.n	8008bc6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d109      	bne.n	8008b84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	4613      	mov	r3, r2
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	4413      	add	r3, r2
 8008b96:	3304      	adds	r3, #4
 8008b98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	78db      	ldrb	r3, [r3, #3]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d108      	bne.n	8008bb4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f00e f9ec 	bl	8016f8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2320      	movs	r3, #32
 8008be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	3301      	adds	r3, #1
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	085b      	lsrs	r3, r3, #1
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f47f af62 	bne.w	8008ad8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f00b faf3 	bl	8014204 <USB_ReadInterrupts>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c28:	f040 80db 	bne.w	8008de2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f00b fb14 	bl	801425e <USB_ReadDevAllInEpInterrupt>
 8008c36:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c3c:	e0cd      	b.n	8008dda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80c2 	beq.w	8008dce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f00b fb3a 	bl	80142ce <USB_ReadDevInEPInterrupt>
 8008c5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d057      	beq.n	8008d16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	43db      	mvns	r3, r3
 8008c80:	69f9      	ldr	r1, [r7, #28]
 8008c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c86:	4013      	ands	r3, r2
 8008c88:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c96:	461a      	mov	r2, r3
 8008c98:	2301      	movs	r3, #1
 8008c9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d132      	bne.n	8008d0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca8:	4613      	mov	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	440b      	add	r3, r1
 8008cb2:	3348      	adds	r3, #72	; 0x48
 8008cb4:	6819      	ldr	r1, [r3, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4403      	add	r3, r0
 8008cc4:	3344      	adds	r3, #68	; 0x44
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4419      	add	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cce:	4613      	mov	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4403      	add	r3, r0
 8008cd8:	3348      	adds	r3, #72	; 0x48
 8008cda:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d113      	bne.n	8008d0a <HAL_PCD_IRQHandler+0x3a2>
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	4413      	add	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	334c      	adds	r3, #76	; 0x4c
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d108      	bne.n	8008d0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d02:	461a      	mov	r2, r3
 8008d04:	2101      	movs	r1, #1
 8008d06:	f00b fb43 	bl	8014390 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f00e f8b6 	bl	8016e82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d008      	beq.n	8008d32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	2308      	movs	r3, #8
 8008d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f003 0310 	and.w	r3, r3, #16
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d008      	beq.n	8008d4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2310      	movs	r3, #16
 8008d4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	461a      	mov	r2, r3
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d023      	beq.n	8008dbc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d76:	6a38      	ldr	r0, [r7, #32]
 8008d78:	f00a fb22 	bl	80133c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	4613      	mov	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	3338      	adds	r3, #56	; 0x38
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	78db      	ldrb	r3, [r3, #3]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d108      	bne.n	8008daa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f00e f903 	bl	8016fb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db6:	461a      	mov	r2, r3
 8008db8:	2302      	movs	r3, #2
 8008dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fcea 	bl	80097a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f47f af2e 	bne.w	8008c3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f00b fa0c 	bl	8014204 <USB_ReadInterrupts>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df6:	d122      	bne.n	8008e3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e06:	f023 0301 	bic.w	r3, r3, #1
 8008e0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d108      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fef5 	bl	8009c10 <HAL_PCDEx_LPM_Callback>
 8008e26:	e002      	b.n	8008e2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f00e f8a1 	bl	8016f70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f00b f9de 	bl	8014204 <USB_ReadInterrupts>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e52:	d112      	bne.n	8008e7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d102      	bne.n	8008e6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f00e f85d 	bl	8016f24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f00b f9c0 	bl	8014204 <USB_ReadInterrupts>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e8e:	d121      	bne.n	8008ed4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695a      	ldr	r2, [r3, #20]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008e9e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d111      	bne.n	8008ece <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb8:	089b      	lsrs	r3, r3, #2
 8008eba:	f003 020f 	and.w	r2, r3, #15
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fea2 	bl	8009c10 <HAL_PCDEx_LPM_Callback>
 8008ecc:	e002      	b.n	8008ed4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f00e f828 	bl	8016f24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f00b f993 	bl	8014204 <USB_ReadInterrupts>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee8:	f040 80b7 	bne.w	800905a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008efa:	f023 0301 	bic.w	r3, r3, #1
 8008efe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2110      	movs	r1, #16
 8008f06:	4618      	mov	r0, r3
 8008f08:	f00a fa5a 	bl	80133c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f10:	e046      	b.n	8008fa0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	461a      	mov	r2, r3
 8008f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d3b3      	bcc.n	8008f12 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008fbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d016      	beq.n	8008ff4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fd6:	f043 030b 	orr.w	r3, r3, #11
 8008fda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fec:	f043 030b 	orr.w	r3, r3, #11
 8008ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ff2:	e015      	b.n	8009020 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	695a      	ldr	r2, [r3, #20]
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009002:	4619      	mov	r1, r3
 8009004:	f242 032b 	movw	r3, #8235	; 0x202b
 8009008:	4313      	orrs	r3, r2
 800900a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800901a:	f043 030b 	orr.w	r3, r3, #11
 800901e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800902e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009032:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009044:	461a      	mov	r2, r3
 8009046:	f00b f9a3 	bl	8014390 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	695a      	ldr	r2, [r3, #20]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f00b f8d0 	bl	8014204 <USB_ReadInterrupts>
 8009064:	4603      	mov	r3, r0
 8009066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800906a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906e:	d124      	bne.n	80090ba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f00b f967 	bl	8014348 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f00a fa1b 	bl	80134ba <USB_GetDevSpeed>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681c      	ldr	r4, [r3, #0]
 8009090:	f001 fd88 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 8009094:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800909a:	b2db      	uxtb	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	4620      	mov	r0, r4
 80090a0:	f009 ff20 	bl	8012ee4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f00d ff14 	bl	8016ed2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80090b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	f00b f8a0 	bl	8014204 <USB_ReadInterrupts>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d10a      	bne.n	80090e4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f00d fef1 	bl	8016eb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695a      	ldr	r2, [r3, #20]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f002 0208 	and.w	r2, r2, #8
 80090e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f00b f88b 	bl	8014204 <USB_ReadInterrupts>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f4:	2b80      	cmp	r3, #128	; 0x80
 80090f6:	d122      	bne.n	800913e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009104:	2301      	movs	r3, #1
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
 8009108:	e014      	b.n	8009134 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910e:	4613      	mov	r3, r2
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	440b      	add	r3, r1
 8009118:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d105      	bne.n	800912e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	b2db      	uxtb	r3, r3
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fb09 	bl	8009740 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	3301      	adds	r3, #1
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913a:	429a      	cmp	r2, r3
 800913c:	d3e5      	bcc.n	800910a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f00b f85e 	bl	8014204 <USB_ReadInterrupts>
 8009148:	4603      	mov	r3, r0
 800914a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800914e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009152:	d13b      	bne.n	80091cc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009154:	2301      	movs	r3, #1
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
 8009158:	e02b      	b.n	80091b2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	4613      	mov	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	3340      	adds	r3, #64	; 0x40
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d115      	bne.n	80091ac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009180:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009182:	2b00      	cmp	r3, #0
 8009184:	da12      	bge.n	80091ac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918a:	4613      	mov	r3, r2
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	440b      	add	r3, r1
 8009194:	333f      	adds	r3, #63	; 0x3f
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	b2db      	uxtb	r3, r3
 800919e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 faca 	bl	8009740 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	3301      	adds	r3, #1
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d3ce      	bcc.n	800915a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80091ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f00b f817 	bl	8014204 <USB_ReadInterrupts>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091e0:	d155      	bne.n	800928e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091e2:	2301      	movs	r3, #1
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
 80091e6:	e045      	b.n	8009274 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fc:	4613      	mov	r3, r2
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	440b      	add	r3, r1
 8009206:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d12e      	bne.n	800926e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009210:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009212:	2b00      	cmp	r3, #0
 8009214:	da2b      	bge.n	800926e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009222:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009226:	429a      	cmp	r2, r3
 8009228:	d121      	bne.n	800926e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800923c:	2201      	movs	r2, #1
 800923e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800926a:	6053      	str	r3, [r2, #4]
            break;
 800926c:	e007      	b.n	800927e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	3301      	adds	r3, #1
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927a:	429a      	cmp	r2, r3
 800927c:	d3b4      	bcc.n	80091e8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	695a      	ldr	r2, [r3, #20]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800928c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4618      	mov	r0, r3
 8009294:	f00a ffb6 	bl	8014204 <USB_ReadInterrupts>
 8009298:	4603      	mov	r3, r0
 800929a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800929e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a2:	d10a      	bne.n	80092ba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f00d fe95 	bl	8016fd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80092b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f00a ffa0 	bl	8014204 <USB_ReadInterrupts>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	d115      	bne.n	80092fa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f00d fe85 	bl	8016ff0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6859      	ldr	r1, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	605a      	str	r2, [r3, #4]
 80092f6:	e000      	b.n	80092fa <HAL_PCD_IRQHandler+0x992>
      return;
 80092f8:	bf00      	nop
    }
  }
}
 80092fa:	3734      	adds	r7, #52	; 0x34
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd90      	pop	{r4, r7, pc}

08009300 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_PCD_SetAddress+0x1a>
 8009316:	2302      	movs	r3, #2
 8009318:	e013      	b.n	8009342 <HAL_PCD_SetAddress+0x42>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f00a fefe 	bl	8014134 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	4608      	mov	r0, r1
 8009354:	4611      	mov	r1, r2
 8009356:	461a      	mov	r2, r3
 8009358:	4603      	mov	r3, r0
 800935a:	70fb      	strb	r3, [r7, #3]
 800935c:	460b      	mov	r3, r1
 800935e:	803b      	strh	r3, [r7, #0]
 8009360:	4613      	mov	r3, r2
 8009362:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	da0f      	bge.n	8009390 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	f003 020f 	and.w	r2, r3, #15
 8009376:	4613      	mov	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	3338      	adds	r3, #56	; 0x38
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	3304      	adds	r3, #4
 8009386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	705a      	strb	r2, [r3, #1]
 800938e:	e00f      	b.n	80093b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	f003 020f 	and.w	r2, r3, #15
 8009396:	4613      	mov	r3, r2
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	3304      	adds	r3, #4
 80093a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	f003 030f 	and.w	r3, r3, #15
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80093bc:	883a      	ldrh	r2, [r7, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	78ba      	ldrb	r2, [r7, #2]
 80093c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80093da:	78bb      	ldrb	r3, [r7, #2]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d102      	bne.n	80093e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_PCD_EP_Open+0xaa>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e00e      	b.n	8009412 <HAL_PCD_EP_Open+0xc8>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68f9      	ldr	r1, [r7, #12]
 8009402:	4618      	mov	r0, r3
 8009404:	f00a f87e 	bl	8013504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009410:	7afb      	ldrb	r3, [r7, #11]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800942a:	2b00      	cmp	r3, #0
 800942c:	da0f      	bge.n	800944e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	4613      	mov	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	3338      	adds	r3, #56	; 0x38
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	3304      	adds	r3, #4
 8009444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	705a      	strb	r2, [r3, #1]
 800944c:	e00f      	b.n	800946e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	f003 020f 	and.w	r2, r3, #15
 8009454:	4613      	mov	r3, r2
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	4413      	add	r3, r2
 8009464:	3304      	adds	r3, #4
 8009466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	b2da      	uxtb	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_PCD_EP_Close+0x6e>
 8009484:	2302      	movs	r3, #2
 8009486:	e00e      	b.n	80094a6 <HAL_PCD_EP_Close+0x8c>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	4618      	mov	r0, r3
 8009498:	f00a f8bc 	bl	8013614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b086      	sub	sp, #24
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	460b      	mov	r3, r1
 80094bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094be:	7afb      	ldrb	r3, [r7, #11]
 80094c0:	f003 020f 	and.w	r2, r3, #15
 80094c4:	4613      	mov	r3, r2
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	3304      	adds	r3, #4
 80094d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2200      	movs	r2, #0
 80094e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2200      	movs	r2, #0
 80094ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d102      	bne.n	800950a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	6979      	ldr	r1, [r7, #20]
 8009518:	f00a f958 	bl	80137cc <USB_EPStartXfer>

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	f003 020f 	and.w	r2, r3, #15
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009548:	681b      	ldr	r3, [r3, #0]
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	460b      	mov	r3, r1
 8009564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009566:	7afb      	ldrb	r3, [r7, #11]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	3338      	adds	r3, #56	; 0x38
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	3304      	adds	r3, #4
 800957c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2200      	movs	r2, #0
 800958e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2201      	movs	r2, #1
 8009594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	b2da      	uxtb	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d102      	bne.n	80095b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6818      	ldr	r0, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	6979      	ldr	r1, [r7, #20]
 80095be:	f00a f905 	bl	80137cc <USB_EPStartXfer>

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	f003 020f 	and.w	r2, r3, #15
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d901      	bls.n	80095ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e050      	b.n	800968c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	da0f      	bge.n	8009612 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 020f 	and.w	r2, r3, #15
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	3338      	adds	r3, #56	; 0x38
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	3304      	adds	r3, #4
 8009608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	705a      	strb	r2, [r3, #1]
 8009610:	e00d      	b.n	800962e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	3304      	adds	r3, #4
 8009626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	b2da      	uxtb	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009646:	2b01      	cmp	r3, #1
 8009648:	d101      	bne.n	800964e <HAL_PCD_EP_SetStall+0x82>
 800964a:	2302      	movs	r3, #2
 800964c:	e01e      	b.n	800968c <HAL_PCD_EP_SetStall+0xc0>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4618      	mov	r0, r3
 800965e:	f00a fc95 	bl	8013f8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009662:	78fb      	ldrb	r3, [r7, #3]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	b2d9      	uxtb	r1, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800967c:	461a      	mov	r2, r3
 800967e:	f00a fe87 	bl	8014390 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	f003 020f 	and.w	r2, r3, #15
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d901      	bls.n	80096b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e042      	b.n	8009738 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	da0f      	bge.n	80096da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	f003 020f 	and.w	r2, r3, #15
 80096c0:	4613      	mov	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	3338      	adds	r3, #56	; 0x38
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	3304      	adds	r3, #4
 80096d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	705a      	strb	r2, [r3, #1]
 80096d8:	e00f      	b.n	80096fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	f003 020f 	and.w	r2, r3, #15
 80096e0:	4613      	mov	r3, r2
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	4413      	add	r3, r2
 80096f0:	3304      	adds	r3, #4
 80096f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	b2da      	uxtb	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_PCD_EP_ClrStall+0x86>
 8009716:	2302      	movs	r3, #2
 8009718:	e00e      	b.n	8009738 <HAL_PCD_EP_ClrStall+0xa4>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	4618      	mov	r0, r3
 800972a:	f00a fc9d 	bl	8014068 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800974c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009750:	2b00      	cmp	r3, #0
 8009752:	da0c      	bge.n	800976e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	f003 020f 	and.w	r2, r3, #15
 800975a:	4613      	mov	r3, r2
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	3338      	adds	r3, #56	; 0x38
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4413      	add	r3, r2
 8009768:	3304      	adds	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	e00c      	b.n	8009788 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	f003 020f 	and.w	r2, r3, #15
 8009774:	4613      	mov	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	4413      	add	r3, r2
 8009784:	3304      	adds	r3, #4
 8009786:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68f9      	ldr	r1, [r7, #12]
 800978e:	4618      	mov	r0, r3
 8009790:	f00a fabc 	bl	8013d0c <USB_EPStopXfer>
 8009794:	4603      	mov	r3, r0
 8009796:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009798:	7afb      	ldrb	r3, [r7, #11]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b08a      	sub	sp, #40	; 0x28
 80097a6:	af02      	add	r7, sp, #8
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	3338      	adds	r3, #56	; 0x38
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4413      	add	r3, r2
 80097c6:	3304      	adds	r3, #4
 80097c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	695a      	ldr	r2, [r3, #20]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d901      	bls.n	80097da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e06c      	b.n	80098b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	69fa      	ldr	r2, [r7, #28]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d902      	bls.n	80097f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	3303      	adds	r3, #3
 80097fa:	089b      	lsrs	r3, r3, #2
 80097fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80097fe:	e02b      	b.n	8009858 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	429a      	cmp	r2, r3
 8009814:	d902      	bls.n	800981c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	3303      	adds	r3, #3
 8009820:	089b      	lsrs	r3, r3, #2
 8009822:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68d9      	ldr	r1, [r3, #12]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	b2da      	uxtb	r2, r3
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009834:	b2db      	uxtb	r3, r3
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4603      	mov	r3, r0
 800983a:	6978      	ldr	r0, [r7, #20]
 800983c:	f00a fb10 	bl	8013e60 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	441a      	add	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	695a      	ldr	r2, [r3, #20]
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	441a      	add	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	b29b      	uxth	r3, r3
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	429a      	cmp	r2, r3
 800986c:	d809      	bhi.n	8009882 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	695a      	ldr	r2, [r3, #20]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009876:	429a      	cmp	r2, r3
 8009878:	d203      	bcs.n	8009882 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1be      	bne.n	8009800 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	429a      	cmp	r2, r3
 800988c:	d811      	bhi.n	80098b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	2201      	movs	r2, #1
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	43db      	mvns	r3, r3
 80098a8:	6939      	ldr	r1, [r7, #16]
 80098aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ae:	4013      	ands	r3, r2
 80098b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3720      	adds	r7, #32
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	333c      	adds	r3, #60	; 0x3c
 80098d4:	3304      	adds	r3, #4
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d17b      	bne.n	80099ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f003 0308 	and.w	r3, r3, #8
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d015      	beq.n	8009928 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	4a61      	ldr	r2, [pc, #388]	; (8009a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	f240 80b9 	bls.w	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 80b3 	beq.w	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991e:	461a      	mov	r2, r3
 8009920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009924:	6093      	str	r3, [r2, #8]
 8009926:	e0a7      	b.n	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	461a      	mov	r2, r3
 8009940:	2320      	movs	r3, #32
 8009942:	6093      	str	r3, [r2, #8]
 8009944:	e098      	b.n	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8093 	bne.w	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	4a4b      	ldr	r2, [pc, #300]	; (8009a84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d90f      	bls.n	800997a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009970:	461a      	mov	r2, r3
 8009972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009976:	6093      	str	r3, [r2, #8]
 8009978:	e07e      	b.n	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4613      	mov	r3, r2
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	4413      	add	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4413      	add	r3, r2
 800998c:	3304      	adds	r3, #4
 800998e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a1a      	ldr	r2, [r3, #32]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	0159      	lsls	r1, r3, #5
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	440b      	add	r3, r1
 800999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d114      	bne.n	80099dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6818      	ldr	r0, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099c4:	461a      	mov	r2, r3
 80099c6:	2101      	movs	r1, #1
 80099c8:	f00a fce2 	bl	8014390 <USB_EP0_OutStart>
 80099cc:	e006      	b.n	80099dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	441a      	add	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f00d fa32 	bl	8016e4c <HAL_PCD_DataOutStageCallback>
 80099e8:	e046      	b.n	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4a26      	ldr	r2, [pc, #152]	; (8009a88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d124      	bne.n	8009a3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00a      	beq.n	8009a12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a08:	461a      	mov	r2, r3
 8009a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a0e:	6093      	str	r3, [r2, #8]
 8009a10:	e032      	b.n	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d008      	beq.n	8009a2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a28:	461a      	mov	r2, r3
 8009a2a:	2320      	movs	r3, #32
 8009a2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f00d fa09 	bl	8016e4c <HAL_PCD_DataOutStageCallback>
 8009a3a:	e01d      	b.n	8009a78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d114      	bne.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	4613      	mov	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d108      	bne.n	8009a6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a64:	461a      	mov	r2, r3
 8009a66:	2100      	movs	r1, #0
 8009a68:	f00a fc92 	bl	8014390 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f00d f9ea 	bl	8016e4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3720      	adds	r7, #32
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	4f54300a 	.word	0x4f54300a
 8009a88:	4f54310a 	.word	0x4f54310a

08009a8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	333c      	adds	r3, #60	; 0x3c
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a15      	ldr	r2, [pc, #84]	; (8009b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d90e      	bls.n	8009ae0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d009      	beq.n	8009ae0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	461a      	mov	r2, r3
 8009ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ade:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f00d f9a1 	bl	8016e28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4a0a      	ldr	r2, [pc, #40]	; (8009b14 <PCD_EP_OutSetupPacket_int+0x88>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d90c      	bls.n	8009b08 <PCD_EP_OutSetupPacket_int+0x7c>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d108      	bne.n	8009b08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b00:	461a      	mov	r2, r3
 8009b02:	2101      	movs	r1, #1
 8009b04:	f00a fc44 	bl	8014390 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	4f54300a 	.word	0x4f54300a

08009b18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
 8009b24:	4613      	mov	r3, r2
 8009b26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d107      	bne.n	8009b46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009b36:	883b      	ldrh	r3, [r7, #0]
 8009b38:	0419      	lsls	r1, r3, #16
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	430a      	orrs	r2, r1
 8009b42:	629a      	str	r2, [r3, #40]	; 0x28
 8009b44:	e028      	b.n	8009b98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	0c1b      	lsrs	r3, r3, #16
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	4413      	add	r3, r2
 8009b52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b54:	2300      	movs	r3, #0
 8009b56:	73fb      	strb	r3, [r7, #15]
 8009b58:	e00d      	b.n	8009b76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	3340      	adds	r3, #64	; 0x40
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	0c1b      	lsrs	r3, r3, #16
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	3301      	adds	r3, #1
 8009b74:	73fb      	strb	r3, [r7, #15]
 8009b76:	7bfa      	ldrb	r2, [r7, #15]
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d3ec      	bcc.n	8009b5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009b80:	883b      	ldrh	r3, [r7, #0]
 8009b82:	0418      	lsls	r0, r3, #16
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6819      	ldr	r1, [r3, #0]
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4302      	orrs	r2, r0
 8009b90:	3340      	adds	r3, #64	; 0x40
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	887a      	ldrh	r2, [r7, #2]
 8009bb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <HAL_PCDEx_ActivateLPM+0x44>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	10000003 	.word	0x10000003

08009c10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c30:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <HAL_PWREx_ConfigSupply+0x70>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d00a      	beq.n	8009c52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c3c:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <HAL_PWREx_ConfigSupply+0x70>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f003 0307 	and.w	r3, r3, #7
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d001      	beq.n	8009c4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e01f      	b.n	8009c8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e01d      	b.n	8009c8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c52:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <HAL_PWREx_ConfigSupply+0x70>)
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f023 0207 	bic.w	r2, r3, #7
 8009c5a:	490f      	ldr	r1, [pc, #60]	; (8009c98 <HAL_PWREx_ConfigSupply+0x70>)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c62:	f7fa f927 	bl	8003eb4 <HAL_GetTick>
 8009c66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c68:	e009      	b.n	8009c7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c6a:	f7fa f923 	bl	8003eb4 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c78:	d901      	bls.n	8009c7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e007      	b.n	8009c8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <HAL_PWREx_ConfigSupply+0x70>)
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c8a:	d1ee      	bne.n	8009c6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	58024800 	.word	0x58024800

08009c9c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	4a04      	ldr	r2, [pc, #16]	; (8009cb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009caa:	60d3      	str	r3, [r2, #12]
}
 8009cac:	bf00      	nop
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	58024800 	.word	0x58024800

08009cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08c      	sub	sp, #48	; 0x30
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e3c8      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 8087 	beq.w	8009dea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cdc:	4b88      	ldr	r3, [pc, #544]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ce6:	4b86      	ldr	r3, [pc, #536]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	2b10      	cmp	r3, #16
 8009cf0:	d007      	beq.n	8009d02 <HAL_RCC_OscConfig+0x46>
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	2b18      	cmp	r3, #24
 8009cf6:	d110      	bne.n	8009d1a <HAL_RCC_OscConfig+0x5e>
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d10b      	bne.n	8009d1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d02:	4b7f      	ldr	r3, [pc, #508]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d06c      	beq.n	8009de8 <HAL_RCC_OscConfig+0x12c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d168      	bne.n	8009de8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e3a2      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d22:	d106      	bne.n	8009d32 <HAL_RCC_OscConfig+0x76>
 8009d24:	4b76      	ldr	r3, [pc, #472]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a75      	ldr	r2, [pc, #468]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	e02e      	b.n	8009d90 <HAL_RCC_OscConfig+0xd4>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10c      	bne.n	8009d54 <HAL_RCC_OscConfig+0x98>
 8009d3a:	4b71      	ldr	r3, [pc, #452]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a70      	ldr	r2, [pc, #448]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	4b6e      	ldr	r3, [pc, #440]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a6d      	ldr	r2, [pc, #436]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	e01d      	b.n	8009d90 <HAL_RCC_OscConfig+0xd4>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d5c:	d10c      	bne.n	8009d78 <HAL_RCC_OscConfig+0xbc>
 8009d5e:	4b68      	ldr	r3, [pc, #416]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a67      	ldr	r2, [pc, #412]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	4b65      	ldr	r3, [pc, #404]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a64      	ldr	r2, [pc, #400]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	e00b      	b.n	8009d90 <HAL_RCC_OscConfig+0xd4>
 8009d78:	4b61      	ldr	r3, [pc, #388]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a60      	ldr	r2, [pc, #384]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	4b5e      	ldr	r3, [pc, #376]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a5d      	ldr	r2, [pc, #372]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d013      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d98:	f7fa f88c 	bl	8003eb4 <HAL_GetTick>
 8009d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d9e:	e008      	b.n	8009db2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009da0:	f7fa f888 	bl	8003eb4 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2b64      	cmp	r3, #100	; 0x64
 8009dac:	d901      	bls.n	8009db2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e356      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009db2:	4b53      	ldr	r3, [pc, #332]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f0      	beq.n	8009da0 <HAL_RCC_OscConfig+0xe4>
 8009dbe:	e014      	b.n	8009dea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc0:	f7fa f878 	bl	8003eb4 <HAL_GetTick>
 8009dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dc6:	e008      	b.n	8009dda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dc8:	f7fa f874 	bl	8003eb4 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b64      	cmp	r3, #100	; 0x64
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e342      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009dda:	4b49      	ldr	r3, [pc, #292]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1f0      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x10c>
 8009de6:	e000      	b.n	8009dea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 808c 	beq.w	8009f10 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df8:	4b41      	ldr	r3, [pc, #260]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e02:	4b3f      	ldr	r3, [pc, #252]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <HAL_RCC_OscConfig+0x162>
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	2b18      	cmp	r3, #24
 8009e12:	d137      	bne.n	8009e84 <HAL_RCC_OscConfig+0x1c8>
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d132      	bne.n	8009e84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e1e:	4b38      	ldr	r3, [pc, #224]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_RCC_OscConfig+0x17a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e314      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e36:	4b32      	ldr	r3, [pc, #200]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f023 0219 	bic.w	r2, r3, #25
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	492f      	ldr	r1, [pc, #188]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e48:	f7fa f834 	bl	8003eb4 <HAL_GetTick>
 8009e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e4e:	e008      	b.n	8009e62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e50:	f7fa f830 	bl	8003eb4 <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d901      	bls.n	8009e62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e2fe      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e62:	4b27      	ldr	r3, [pc, #156]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0f0      	beq.n	8009e50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e6e:	4b24      	ldr	r3, [pc, #144]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	061b      	lsls	r3, r3, #24
 8009e7c:	4920      	ldr	r1, [pc, #128]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e82:	e045      	b.n	8009f10 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d026      	beq.n	8009eda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e8c:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f023 0219 	bic.w	r2, r3, #25
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	4919      	ldr	r1, [pc, #100]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9e:	f7fa f809 	bl	8003eb4 <HAL_GetTick>
 8009ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ea6:	f7fa f805 	bl	8003eb4 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d901      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e2d3      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009eb8:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0f0      	beq.n	8009ea6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ec4:	4b0e      	ldr	r3, [pc, #56]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	061b      	lsls	r3, r3, #24
 8009ed2:	490b      	ldr	r1, [pc, #44]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	604b      	str	r3, [r1, #4]
 8009ed8:	e01a      	b.n	8009f10 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009eda:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a08      	ldr	r2, [pc, #32]	; (8009f00 <HAL_RCC_OscConfig+0x244>)
 8009ee0:	f023 0301 	bic.w	r3, r3, #1
 8009ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee6:	f7f9 ffe5 	bl	8003eb4 <HAL_GetTick>
 8009eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009eec:	e00a      	b.n	8009f04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009eee:	f7f9 ffe1 	bl	8003eb4 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d903      	bls.n	8009f04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e2af      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
 8009f00:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f04:	4b96      	ldr	r3, [pc, #600]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1ee      	bne.n	8009eee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0310 	and.w	r3, r3, #16
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d06a      	beq.n	8009ff2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f1c:	4b90      	ldr	r3, [pc, #576]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f26:	4b8e      	ldr	r3, [pc, #568]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b08      	cmp	r3, #8
 8009f30:	d007      	beq.n	8009f42 <HAL_RCC_OscConfig+0x286>
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b18      	cmp	r3, #24
 8009f36:	d11b      	bne.n	8009f70 <HAL_RCC_OscConfig+0x2b4>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d116      	bne.n	8009f70 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f42:	4b87      	ldr	r3, [pc, #540]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_RCC_OscConfig+0x29e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	2b80      	cmp	r3, #128	; 0x80
 8009f54:	d001      	beq.n	8009f5a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e282      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f5a:	4b81      	ldr	r3, [pc, #516]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	061b      	lsls	r3, r3, #24
 8009f68:	497d      	ldr	r1, [pc, #500]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f6e:	e040      	b.n	8009ff2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d023      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009f78:	4b79      	ldr	r3, [pc, #484]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a78      	ldr	r2, [pc, #480]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f84:	f7f9 ff96 	bl	8003eb4 <HAL_GetTick>
 8009f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f8a:	e008      	b.n	8009f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009f8c:	f7f9 ff92 	bl	8003eb4 <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e260      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f9e:	4b70      	ldr	r3, [pc, #448]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0f0      	beq.n	8009f8c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009faa:	4b6d      	ldr	r3, [pc, #436]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	061b      	lsls	r3, r3, #24
 8009fb8:	4969      	ldr	r1, [pc, #420]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60cb      	str	r3, [r1, #12]
 8009fbe:	e018      	b.n	8009ff2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009fc0:	4b67      	ldr	r3, [pc, #412]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a66      	ldr	r2, [pc, #408]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fcc:	f7f9 ff72 	bl	8003eb4 <HAL_GetTick>
 8009fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fd2:	e008      	b.n	8009fe6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fd4:	f7f9 ff6e 	bl	8003eb4 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e23c      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009fe6:	4b5e      	ldr	r3, [pc, #376]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1f0      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0308 	and.w	r3, r3, #8
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d036      	beq.n	800a06c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d019      	beq.n	800a03a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a006:	4b56      	ldr	r3, [pc, #344]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a00a:	4a55      	ldr	r2, [pc, #340]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a00c:	f043 0301 	orr.w	r3, r3, #1
 800a010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a012:	f7f9 ff4f 	bl	8003eb4 <HAL_GetTick>
 800a016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a018:	e008      	b.n	800a02c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a01a:	f7f9 ff4b 	bl	8003eb4 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b02      	cmp	r3, #2
 800a026:	d901      	bls.n	800a02c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e219      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a02c:	4b4c      	ldr	r3, [pc, #304]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a02e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a030:	f003 0302 	and.w	r3, r3, #2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0f0      	beq.n	800a01a <HAL_RCC_OscConfig+0x35e>
 800a038:	e018      	b.n	800a06c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a03a:	4b49      	ldr	r3, [pc, #292]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03e:	4a48      	ldr	r2, [pc, #288]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a040:	f023 0301 	bic.w	r3, r3, #1
 800a044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a046:	f7f9 ff35 	bl	8003eb4 <HAL_GetTick>
 800a04a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a04c:	e008      	b.n	800a060 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a04e:	f7f9 ff31 	bl	8003eb4 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d901      	bls.n	800a060 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e1ff      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a060:	4b3f      	ldr	r3, [pc, #252]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1f0      	bne.n	800a04e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0320 	and.w	r3, r3, #32
 800a074:	2b00      	cmp	r3, #0
 800a076:	d036      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d019      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a080:	4b37      	ldr	r3, [pc, #220]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a36      	ldr	r2, [pc, #216]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a08a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a08c:	f7f9 ff12 	bl	8003eb4 <HAL_GetTick>
 800a090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a094:	f7f9 ff0e 	bl	8003eb4 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e1dc      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0a6:	4b2e      	ldr	r3, [pc, #184]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f0      	beq.n	800a094 <HAL_RCC_OscConfig+0x3d8>
 800a0b2:	e018      	b.n	800a0e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0b4:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a29      	ldr	r2, [pc, #164]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a0ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0c0:	f7f9 fef8 	bl	8003eb4 <HAL_GetTick>
 800a0c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0c8:	f7f9 fef4 	bl	8003eb4 <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e1c2      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0da:	4b21      	ldr	r3, [pc, #132]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1f0      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 8086 	beq.w	800a200 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a0f4:	4b1b      	ldr	r3, [pc, #108]	; (800a164 <HAL_RCC_OscConfig+0x4a8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a1a      	ldr	r2, [pc, #104]	; (800a164 <HAL_RCC_OscConfig+0x4a8>)
 800a0fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a100:	f7f9 fed8 	bl	8003eb4 <HAL_GetTick>
 800a104:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a106:	e008      	b.n	800a11a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a108:	f7f9 fed4 	bl	8003eb4 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b64      	cmp	r3, #100	; 0x64
 800a114:	d901      	bls.n	800a11a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e1a2      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a11a:	4b12      	ldr	r3, [pc, #72]	; (800a164 <HAL_RCC_OscConfig+0x4a8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0f0      	beq.n	800a108 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d106      	bne.n	800a13c <HAL_RCC_OscConfig+0x480>
 800a12e:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a132:	4a0b      	ldr	r2, [pc, #44]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a134:	f043 0301 	orr.w	r3, r3, #1
 800a138:	6713      	str	r3, [r2, #112]	; 0x70
 800a13a:	e032      	b.n	800a1a2 <HAL_RCC_OscConfig+0x4e6>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d111      	bne.n	800a168 <HAL_RCC_OscConfig+0x4ac>
 800a144:	4b06      	ldr	r3, [pc, #24]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a148:	4a05      	ldr	r2, [pc, #20]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	6713      	str	r3, [r2, #112]	; 0x70
 800a150:	4b03      	ldr	r3, [pc, #12]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a154:	4a02      	ldr	r2, [pc, #8]	; (800a160 <HAL_RCC_OscConfig+0x4a4>)
 800a156:	f023 0304 	bic.w	r3, r3, #4
 800a15a:	6713      	str	r3, [r2, #112]	; 0x70
 800a15c:	e021      	b.n	800a1a2 <HAL_RCC_OscConfig+0x4e6>
 800a15e:	bf00      	nop
 800a160:	58024400 	.word	0x58024400
 800a164:	58024800 	.word	0x58024800
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	2b05      	cmp	r3, #5
 800a16e:	d10c      	bne.n	800a18a <HAL_RCC_OscConfig+0x4ce>
 800a170:	4b83      	ldr	r3, [pc, #524]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a174:	4a82      	ldr	r2, [pc, #520]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a176:	f043 0304 	orr.w	r3, r3, #4
 800a17a:	6713      	str	r3, [r2, #112]	; 0x70
 800a17c:	4b80      	ldr	r3, [pc, #512]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a180:	4a7f      	ldr	r2, [pc, #508]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a182:	f043 0301 	orr.w	r3, r3, #1
 800a186:	6713      	str	r3, [r2, #112]	; 0x70
 800a188:	e00b      	b.n	800a1a2 <HAL_RCC_OscConfig+0x4e6>
 800a18a:	4b7d      	ldr	r3, [pc, #500]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	4a7c      	ldr	r2, [pc, #496]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a190:	f023 0301 	bic.w	r3, r3, #1
 800a194:	6713      	str	r3, [r2, #112]	; 0x70
 800a196:	4b7a      	ldr	r3, [pc, #488]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19a:	4a79      	ldr	r2, [pc, #484]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a19c:	f023 0304 	bic.w	r3, r3, #4
 800a1a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d015      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1aa:	f7f9 fe83 	bl	8003eb4 <HAL_GetTick>
 800a1ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1b0:	e00a      	b.n	800a1c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b2:	f7f9 fe7f 	bl	8003eb4 <HAL_GetTick>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e14b      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1c8:	4b6d      	ldr	r3, [pc, #436]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0ee      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x4f6>
 800a1d4:	e014      	b.n	800a200 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1d6:	f7f9 fe6d 	bl	8003eb4 <HAL_GetTick>
 800a1da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1dc:	e00a      	b.n	800a1f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1de:	f7f9 fe69 	bl	8003eb4 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d901      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e135      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a1f4:	4b62      	ldr	r3, [pc, #392]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1ee      	bne.n	800a1de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 812a 	beq.w	800a45e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a20a:	4b5d      	ldr	r3, [pc, #372]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a212:	2b18      	cmp	r3, #24
 800a214:	f000 80ba 	beq.w	800a38c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	f040 8095 	bne.w	800a34c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a222:	4b57      	ldr	r3, [pc, #348]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a56      	ldr	r2, [pc, #344]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a22c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a22e:	f7f9 fe41 	bl	8003eb4 <HAL_GetTick>
 800a232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a234:	e008      	b.n	800a248 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a236:	f7f9 fe3d 	bl	8003eb4 <HAL_GetTick>
 800a23a:	4602      	mov	r2, r0
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	2b02      	cmp	r3, #2
 800a242:	d901      	bls.n	800a248 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e10b      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a248:	4b4d      	ldr	r3, [pc, #308]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1f0      	bne.n	800a236 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a254:	4b4a      	ldr	r3, [pc, #296]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a258:	4b4a      	ldr	r3, [pc, #296]	; (800a384 <HAL_RCC_OscConfig+0x6c8>)
 800a25a:	4013      	ands	r3, r2
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a264:	0112      	lsls	r2, r2, #4
 800a266:	430a      	orrs	r2, r1
 800a268:	4945      	ldr	r1, [pc, #276]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	628b      	str	r3, [r1, #40]	; 0x28
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	3b01      	subs	r3, #1
 800a274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27c:	3b01      	subs	r3, #1
 800a27e:	025b      	lsls	r3, r3, #9
 800a280:	b29b      	uxth	r3, r3
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	3b01      	subs	r3, #1
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a290:	431a      	orrs	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a296:	3b01      	subs	r3, #1
 800a298:	061b      	lsls	r3, r3, #24
 800a29a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a29e:	4938      	ldr	r1, [pc, #224]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a2a4:	4b36      	ldr	r3, [pc, #216]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	4a35      	ldr	r2, [pc, #212]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2aa:	f023 0301 	bic.w	r3, r3, #1
 800a2ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2b0:	4b33      	ldr	r3, [pc, #204]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2b4:	4b34      	ldr	r3, [pc, #208]	; (800a388 <HAL_RCC_OscConfig+0x6cc>)
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2bc:	00d2      	lsls	r2, r2, #3
 800a2be:	4930      	ldr	r1, [pc, #192]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a2c4:	4b2e      	ldr	r3, [pc, #184]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	f023 020c 	bic.w	r2, r3, #12
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d0:	492b      	ldr	r1, [pc, #172]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a2d6:	4b2a      	ldr	r3, [pc, #168]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2da:	f023 0202 	bic.w	r2, r3, #2
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e2:	4927      	ldr	r1, [pc, #156]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2e8:	4b25      	ldr	r3, [pc, #148]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4a24      	ldr	r2, [pc, #144]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f4:	4b22      	ldr	r3, [pc, #136]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	4a21      	ldr	r2, [pc, #132]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a2fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a300:	4b1f      	ldr	r3, [pc, #124]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a1e      	ldr	r2, [pc, #120]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a30a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a30c:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a318:	4b19      	ldr	r3, [pc, #100]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a18      	ldr	r2, [pc, #96]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a31e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a324:	f7f9 fdc6 	bl	8003eb4 <HAL_GetTick>
 800a328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a32a:	e008      	b.n	800a33e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a32c:	f7f9 fdc2 	bl	8003eb4 <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b02      	cmp	r3, #2
 800a338:	d901      	bls.n	800a33e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e090      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a33e:	4b10      	ldr	r3, [pc, #64]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0f0      	beq.n	800a32c <HAL_RCC_OscConfig+0x670>
 800a34a:	e088      	b.n	800a45e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a34c:	4b0c      	ldr	r3, [pc, #48]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0b      	ldr	r2, [pc, #44]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a358:	f7f9 fdac 	bl	8003eb4 <HAL_GetTick>
 800a35c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a360:	f7f9 fda8 	bl	8003eb4 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e076      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <HAL_RCC_OscConfig+0x6c4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f0      	bne.n	800a360 <HAL_RCC_OscConfig+0x6a4>
 800a37e:	e06e      	b.n	800a45e <HAL_RCC_OscConfig+0x7a2>
 800a380:	58024400 	.word	0x58024400
 800a384:	fffffc0c 	.word	0xfffffc0c
 800a388:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a38c:	4b36      	ldr	r3, [pc, #216]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a390:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a392:	4b35      	ldr	r3, [pc, #212]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a396:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d031      	beq.n	800a404 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f003 0203 	and.w	r2, r3, #3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d12a      	bne.n	800a404 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	091b      	lsrs	r3, r3, #4
 800a3b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d122      	bne.n	800a404 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d11a      	bne.n	800a404 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	0a5b      	lsrs	r3, r3, #9
 800a3d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d111      	bne.n	800a404 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	0c1b      	lsrs	r3, r3, #16
 800a3e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d108      	bne.n	800a404 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	0e1b      	lsrs	r3, r3, #24
 800a3f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a400:	429a      	cmp	r2, r3
 800a402:	d001      	beq.n	800a408 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e02b      	b.n	800a460 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a408:	4b17      	ldr	r3, [pc, #92]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40c:	08db      	lsrs	r3, r3, #3
 800a40e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a412:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d01f      	beq.n	800a45e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	4a11      	ldr	r2, [pc, #68]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a42a:	f7f9 fd43 	bl	8003eb4 <HAL_GetTick>
 800a42e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a430:	bf00      	nop
 800a432:	f7f9 fd3f 	bl	8003eb4 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d0f9      	beq.n	800a432 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a442:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <HAL_RCC_OscConfig+0x7b0>)
 800a444:	4013      	ands	r3, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a44a:	00d2      	lsls	r2, r2, #3
 800a44c:	4906      	ldr	r1, [pc, #24]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a456:	4a04      	ldr	r2, [pc, #16]	; (800a468 <HAL_RCC_OscConfig+0x7ac>)
 800a458:	f043 0301 	orr.w	r3, r3, #1
 800a45c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3730      	adds	r7, #48	; 0x30
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	58024400 	.word	0x58024400
 800a46c:	ffff0007 	.word	0xffff0007

0800a470 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e19c      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a484:	4b8a      	ldr	r3, [pc, #552]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d910      	bls.n	800a4b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a492:	4b87      	ldr	r3, [pc, #540]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f023 020f 	bic.w	r2, r3, #15
 800a49a:	4985      	ldr	r1, [pc, #532]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4a2:	4b83      	ldr	r3, [pc, #524]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d001      	beq.n	800a4b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e184      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d010      	beq.n	800a4e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	4b7b      	ldr	r3, [pc, #492]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d908      	bls.n	800a4e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4d0:	4b78      	ldr	r3, [pc, #480]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	4975      	ldr	r1, [pc, #468]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0308 	and.w	r3, r3, #8
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d010      	beq.n	800a510 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	4b70      	ldr	r3, [pc, #448]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d908      	bls.n	800a510 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4fe:	4b6d      	ldr	r3, [pc, #436]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	496a      	ldr	r1, [pc, #424]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d010      	beq.n	800a53e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	4b64      	ldr	r3, [pc, #400]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a528:	429a      	cmp	r2, r3
 800a52a:	d908      	bls.n	800a53e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a52c:	4b61      	ldr	r3, [pc, #388]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	495e      	ldr	r1, [pc, #376]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b00      	cmp	r3, #0
 800a548:	d010      	beq.n	800a56c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	69da      	ldr	r2, [r3, #28]
 800a54e:	4b59      	ldr	r3, [pc, #356]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a556:	429a      	cmp	r2, r3
 800a558:	d908      	bls.n	800a56c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a55a:	4b56      	ldr	r3, [pc, #344]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	4953      	ldr	r1, [pc, #332]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d010      	beq.n	800a59a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	4b4d      	ldr	r3, [pc, #308]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	429a      	cmp	r2, r3
 800a586:	d908      	bls.n	800a59a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a588:	4b4a      	ldr	r3, [pc, #296]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	f023 020f 	bic.w	r2, r3, #15
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4947      	ldr	r1, [pc, #284]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a596:	4313      	orrs	r3, r2
 800a598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d055      	beq.n	800a652 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5a6:	4b43      	ldr	r3, [pc, #268]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	4940      	ldr	r1, [pc, #256]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d107      	bne.n	800a5d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5c0:	4b3c      	ldr	r3, [pc, #240]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d121      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e0f6      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d107      	bne.n	800a5e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5d8:	4b36      	ldr	r3, [pc, #216]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d115      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e0ea      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d107      	bne.n	800a600 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5f0:	4b30      	ldr	r3, [pc, #192]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0de      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a600:	4b2c      	ldr	r3, [pc, #176]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e0d6      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a610:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f023 0207 	bic.w	r2, r3, #7
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4925      	ldr	r1, [pc, #148]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a622:	f7f9 fc47 	bl	8003eb4 <HAL_GetTick>
 800a626:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a628:	e00a      	b.n	800a640 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a62a:	f7f9 fc43 	bl	8003eb4 <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	f241 3288 	movw	r2, #5000	; 0x1388
 800a638:	4293      	cmp	r3, r2
 800a63a:	d901      	bls.n	800a640 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e0be      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a640:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	429a      	cmp	r2, r3
 800a650:	d1eb      	bne.n	800a62a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d010      	beq.n	800a680 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d208      	bcs.n	800a680 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a66e:	4b11      	ldr	r3, [pc, #68]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f023 020f 	bic.w	r2, r3, #15
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	490e      	ldr	r1, [pc, #56]	; (800a6b4 <HAL_RCC_ClockConfig+0x244>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a680:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 030f 	and.w	r3, r3, #15
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d214      	bcs.n	800a6b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a68e:	4b08      	ldr	r3, [pc, #32]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f023 020f 	bic.w	r2, r3, #15
 800a696:	4906      	ldr	r1, [pc, #24]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a69e:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <HAL_RCC_ClockConfig+0x240>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d005      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e086      	b.n	800a7be <HAL_RCC_ClockConfig+0x34e>
 800a6b0:	52002000 	.word	0x52002000
 800a6b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d010      	beq.n	800a6e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	4b3f      	ldr	r3, [pc, #252]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d208      	bcs.n	800a6e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	4939      	ldr	r1, [pc, #228]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d010      	beq.n	800a714 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695a      	ldr	r2, [r3, #20]
 800a6f6:	4b34      	ldr	r3, [pc, #208]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d208      	bcs.n	800a714 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a702:	4b31      	ldr	r3, [pc, #196]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	492e      	ldr	r1, [pc, #184]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a710:	4313      	orrs	r3, r2
 800a712:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0310 	and.w	r3, r3, #16
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d010      	beq.n	800a742 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d208      	bcs.n	800a742 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a730:	4b25      	ldr	r3, [pc, #148]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	4922      	ldr	r1, [pc, #136]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d010      	beq.n	800a770 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	4b1d      	ldr	r3, [pc, #116]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d208      	bcs.n	800a770 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a75e:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	4917      	ldr	r1, [pc, #92]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a770:	f000 f89e 	bl	800a8b0 <HAL_RCC_GetSysClockFreq>
 800a774:	4602      	mov	r2, r0
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	4912      	ldr	r1, [pc, #72]	; (800a7cc <HAL_RCC_ClockConfig+0x35c>)
 800a782:	5ccb      	ldrb	r3, [r1, r3]
 800a784:	f003 031f 	and.w	r3, r3, #31
 800a788:	fa22 f303 	lsr.w	r3, r2, r3
 800a78c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a78e:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <HAL_RCC_ClockConfig+0x358>)
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	4a0d      	ldr	r2, [pc, #52]	; (800a7cc <HAL_RCC_ClockConfig+0x35c>)
 800a798:	5cd3      	ldrb	r3, [r2, r3]
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a4:	4a0a      	ldr	r2, [pc, #40]	; (800a7d0 <HAL_RCC_ClockConfig+0x360>)
 800a7a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7a8:	4a0a      	ldr	r2, [pc, #40]	; (800a7d4 <HAL_RCC_ClockConfig+0x364>)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <HAL_RCC_ClockConfig+0x368>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f9 fb34 	bl	8003e20 <HAL_InitTick>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	0801c5c0 	.word	0x0801c5c0
 800a7d0:	24000004 	.word	0x24000004
 800a7d4:	24000000 	.word	0x24000000
 800a7d8:	24000008 	.word	0x24000008

0800a7dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	; 0x30
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d12a      	bne.n	800a844 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a7ee:	4b2d      	ldr	r3, [pc, #180]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a7f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7f4:	4a2b      	ldr	r2, [pc, #172]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7fe:	4b29      	ldr	r3, [pc, #164]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	61bb      	str	r3, [r7, #24]
 800a80a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a80c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a812:	2302      	movs	r3, #2
 800a814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a816:	2303      	movs	r3, #3
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a81e:	2300      	movs	r3, #0
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a822:	f107 031c 	add.w	r3, r7, #28
 800a826:	4619      	mov	r1, r3
 800a828:	481f      	ldr	r0, [pc, #124]	; (800a8a8 <HAL_RCC_MCOConfig+0xcc>)
 800a82a:	f7fd fc43 	bl	80080b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a82e:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a836:	68b9      	ldr	r1, [r7, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	430b      	orrs	r3, r1
 800a83c:	4919      	ldr	r1, [pc, #100]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a842:	e02a      	b.n	800a89a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a844:	4b17      	ldr	r3, [pc, #92]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a84a:	4a16      	ldr	r2, [pc, #88]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a84c:	f043 0304 	orr.w	r3, r3, #4
 800a850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a854:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a85a:	f003 0304 	and.w	r3, r3, #4
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a862:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a868:	2302      	movs	r3, #2
 800a86a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a86c:	2303      	movs	r3, #3
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	2300      	movs	r3, #0
 800a872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a874:	2300      	movs	r3, #0
 800a876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a878:	f107 031c 	add.w	r3, r7, #28
 800a87c:	4619      	mov	r1, r3
 800a87e:	480b      	ldr	r0, [pc, #44]	; (800a8ac <HAL_RCC_MCOConfig+0xd0>)
 800a880:	f7fd fc18 	bl	80080b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	01d9      	lsls	r1, r3, #7
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	430b      	orrs	r3, r1
 800a894:	4903      	ldr	r1, [pc, #12]	; (800a8a4 <HAL_RCC_MCOConfig+0xc8>)
 800a896:	4313      	orrs	r3, r2
 800a898:	610b      	str	r3, [r1, #16]
}
 800a89a:	bf00      	nop
 800a89c:	3730      	adds	r7, #48	; 0x30
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	58024400 	.word	0x58024400
 800a8a8:	58020000 	.word	0x58020000
 800a8ac:	58020800 	.word	0x58020800

0800a8b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b089      	sub	sp, #36	; 0x24
 800a8b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8b6:	4bb3      	ldr	r3, [pc, #716]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8be:	2b18      	cmp	r3, #24
 800a8c0:	f200 8155 	bhi.w	800ab6e <HAL_RCC_GetSysClockFreq+0x2be>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a931 	.word	0x0800a931
 800a8d0:	0800ab6f 	.word	0x0800ab6f
 800a8d4:	0800ab6f 	.word	0x0800ab6f
 800a8d8:	0800ab6f 	.word	0x0800ab6f
 800a8dc:	0800ab6f 	.word	0x0800ab6f
 800a8e0:	0800ab6f 	.word	0x0800ab6f
 800a8e4:	0800ab6f 	.word	0x0800ab6f
 800a8e8:	0800ab6f 	.word	0x0800ab6f
 800a8ec:	0800a957 	.word	0x0800a957
 800a8f0:	0800ab6f 	.word	0x0800ab6f
 800a8f4:	0800ab6f 	.word	0x0800ab6f
 800a8f8:	0800ab6f 	.word	0x0800ab6f
 800a8fc:	0800ab6f 	.word	0x0800ab6f
 800a900:	0800ab6f 	.word	0x0800ab6f
 800a904:	0800ab6f 	.word	0x0800ab6f
 800a908:	0800ab6f 	.word	0x0800ab6f
 800a90c:	0800a95d 	.word	0x0800a95d
 800a910:	0800ab6f 	.word	0x0800ab6f
 800a914:	0800ab6f 	.word	0x0800ab6f
 800a918:	0800ab6f 	.word	0x0800ab6f
 800a91c:	0800ab6f 	.word	0x0800ab6f
 800a920:	0800ab6f 	.word	0x0800ab6f
 800a924:	0800ab6f 	.word	0x0800ab6f
 800a928:	0800ab6f 	.word	0x0800ab6f
 800a92c:	0800a963 	.word	0x0800a963
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a930:	4b94      	ldr	r3, [pc, #592]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a93c:	4b91      	ldr	r3, [pc, #580]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	08db      	lsrs	r3, r3, #3
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	4a90      	ldr	r2, [pc, #576]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a948:	fa22 f303 	lsr.w	r3, r2, r3
 800a94c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a94e:	e111      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a950:	4b8d      	ldr	r3, [pc, #564]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a952:	61bb      	str	r3, [r7, #24]
      break;
 800a954:	e10e      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a956:	4b8d      	ldr	r3, [pc, #564]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a958:	61bb      	str	r3, [r7, #24]
      break;
 800a95a:	e10b      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a95c:	4b8c      	ldr	r3, [pc, #560]	; (800ab90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a95e:	61bb      	str	r3, [r7, #24]
      break;
 800a960:	e108      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a962:	4b88      	ldr	r3, [pc, #544]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a96c:	4b85      	ldr	r3, [pc, #532]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	091b      	lsrs	r3, r3, #4
 800a972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a976:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a978:	4b82      	ldr	r3, [pc, #520]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a982:	4b80      	ldr	r3, [pc, #512]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a986:	08db      	lsrs	r3, r3, #3
 800a988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 80e1 	beq.w	800ab68 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	f000 8083 	beq.w	800aab4 <HAL_RCC_GetSysClockFreq+0x204>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	f200 80a1 	bhi.w	800aaf8 <HAL_RCC_GetSysClockFreq+0x248>
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <HAL_RCC_GetSysClockFreq+0x114>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d056      	beq.n	800aa70 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9c2:	e099      	b.n	800aaf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9c4:	4b6f      	ldr	r3, [pc, #444]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d02d      	beq.n	800aa2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9d0:	4b6c      	ldr	r3, [pc, #432]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	4a6b      	ldr	r2, [pc, #428]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fa:	4b62      	ldr	r3, [pc, #392]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa2a:	e087      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3e:	4b51      	ldr	r3, [pc, #324]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa52:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa6e:	e065      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b40      	ldr	r3, [pc, #256]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aab2:	e043      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aba0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac6:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aada:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaf6:	e021      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0a:	4b1e      	ldr	r3, [pc, #120]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab3c:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	0a5b      	lsrs	r3, r3, #9
 800ab42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab46:	3301      	adds	r3, #1
 800ab48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab60:	ee17 3a90 	vmov	r3, s15
 800ab64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab66:	e005      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61bb      	str	r3, [r7, #24]
      break;
 800ab6c:	e002      	b.n	800ab74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab70:	61bb      	str	r3, [r7, #24]
      break;
 800ab72:	bf00      	nop
  }

  return sysclockfreq;
 800ab74:	69bb      	ldr	r3, [r7, #24]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3724      	adds	r7, #36	; 0x24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	58024400 	.word	0x58024400
 800ab88:	03d09000 	.word	0x03d09000
 800ab8c:	003d0900 	.word	0x003d0900
 800ab90:	02faf080 	.word	0x02faf080
 800ab94:	46000000 	.word	0x46000000
 800ab98:	4c742400 	.word	0x4c742400
 800ab9c:	4a742400 	.word	0x4a742400
 800aba0:	4c3ebc20 	.word	0x4c3ebc20

0800aba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abaa:	f7ff fe81 	bl	800a8b0 <HAL_RCC_GetSysClockFreq>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b10      	ldr	r3, [pc, #64]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x50>)
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	0a1b      	lsrs	r3, r3, #8
 800abb6:	f003 030f 	and.w	r3, r3, #15
 800abba:	490f      	ldr	r1, [pc, #60]	; (800abf8 <HAL_RCC_GetHCLKFreq+0x54>)
 800abbc:	5ccb      	ldrb	r3, [r1, r3]
 800abbe:	f003 031f 	and.w	r3, r3, #31
 800abc2:	fa22 f303 	lsr.w	r3, r2, r3
 800abc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x50>)
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <HAL_RCC_GetHCLKFreq+0x54>)
 800abd2:	5cd3      	ldrb	r3, [r2, r3]
 800abd4:	f003 031f 	and.w	r3, r3, #31
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	fa22 f303 	lsr.w	r3, r2, r3
 800abde:	4a07      	ldr	r2, [pc, #28]	; (800abfc <HAL_RCC_GetHCLKFreq+0x58>)
 800abe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abe2:	4a07      	ldr	r2, [pc, #28]	; (800ac00 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abe8:	4b04      	ldr	r3, [pc, #16]	; (800abfc <HAL_RCC_GetHCLKFreq+0x58>)
 800abea:	681b      	ldr	r3, [r3, #0]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	58024400 	.word	0x58024400
 800abf8:	0801c5c0 	.word	0x0801c5c0
 800abfc:	24000004 	.word	0x24000004
 800ac00:	24000000 	.word	0x24000000

0800ac04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac08:	f7ff ffcc 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b06      	ldr	r3, [pc, #24]	; (800ac28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	091b      	lsrs	r3, r3, #4
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	4904      	ldr	r1, [pc, #16]	; (800ac2c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac1a:	5ccb      	ldrb	r3, [r1, r3]
 800ac1c:	f003 031f 	and.w	r3, r3, #31
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	58024400 	.word	0x58024400
 800ac2c:	0801c5c0 	.word	0x0801c5c0

0800ac30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac34:	f7ff ffb6 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4b06      	ldr	r3, [pc, #24]	; (800ac54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	4904      	ldr	r1, [pc, #16]	; (800ac58 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac46:	5ccb      	ldrb	r3, [r1, r3]
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	58024400 	.word	0x58024400
 800ac58:	0801c5c0 	.word	0x0801c5c0

0800ac5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac60:	b0c6      	sub	sp, #280	; 0x118
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ac80:	2500      	movs	r5, #0
 800ac82:	ea54 0305 	orrs.w	r3, r4, r5
 800ac86:	d049      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ac88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac92:	d02f      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ac94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac98:	d828      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ac9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac9e:	d01a      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aca4:	d822      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800acaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acae:	d007      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acb0:	e01c      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb2:	4bab      	ldr	r3, [pc, #684]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	4aaa      	ldr	r2, [pc, #680]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acbe:	e01a      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc4:	3308      	adds	r3, #8
 800acc6:	2102      	movs	r1, #2
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 fa49 	bl	800d160 <RCCEx_PLL2_Config>
 800acce:	4603      	mov	r3, r0
 800acd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acd4:	e00f      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acda:	3328      	adds	r3, #40	; 0x28
 800acdc:	2102      	movs	r1, #2
 800acde:	4618      	mov	r0, r3
 800ace0:	f002 faf0 	bl	800d2c4 <RCCEx_PLL3_Config>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acea:	e004      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800acf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acfe:	4b98      	ldr	r3, [pc, #608]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad0c:	4a94      	ldr	r2, [pc, #592]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	6513      	str	r3, [r2, #80]	; 0x50
 800ad12:	e003      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad28:	f04f 0900 	mov.w	r9, #0
 800ad2c:	ea58 0309 	orrs.w	r3, r8, r9
 800ad30:	d047      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d82a      	bhi.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad3c:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad42:	bf00      	nop
 800ad44:	0800ad59 	.word	0x0800ad59
 800ad48:	0800ad67 	.word	0x0800ad67
 800ad4c:	0800ad7d 	.word	0x0800ad7d
 800ad50:	0800ad9b 	.word	0x0800ad9b
 800ad54:	0800ad9b 	.word	0x0800ad9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad58:	4b81      	ldr	r3, [pc, #516]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	4a80      	ldr	r2, [pc, #512]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad64:	e01a      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f002 f9f6 	bl	800d160 <RCCEx_PLL2_Config>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad7a:	e00f      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad80:	3328      	adds	r3, #40	; 0x28
 800ad82:	2100      	movs	r1, #0
 800ad84:	4618      	mov	r0, r3
 800ad86:	f002 fa9d 	bl	800d2c4 <RCCEx_PLL3_Config>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad90:	e004      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad98:	e000      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ad9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ada4:	4b6e      	ldr	r3, [pc, #440]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ada6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada8:	f023 0107 	bic.w	r1, r3, #7
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb2:	4a6b      	ldr	r2, [pc, #428]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adb4:	430b      	orrs	r3, r1
 800adb6:	6513      	str	r3, [r2, #80]	; 0x50
 800adb8:	e003      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800adce:	f04f 0b00 	mov.w	fp, #0
 800add2:	ea5a 030b 	orrs.w	r3, sl, fp
 800add6:	d05b      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800add8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800addc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ade0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ade4:	d03b      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ade6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800adea:	d834      	bhi.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800adec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adf0:	d037      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800adf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adf6:	d82e      	bhi.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800adf8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adfc:	d033      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800adfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae02:	d828      	bhi.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae08:	d01a      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ae0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae0e:	d822      	bhi.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ae14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae18:	d007      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ae1a:	e01c      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae1c:	4b50      	ldr	r3, [pc, #320]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	4a4f      	ldr	r2, [pc, #316]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae28:	e01e      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2e:	3308      	adds	r3, #8
 800ae30:	2100      	movs	r1, #0
 800ae32:	4618      	mov	r0, r3
 800ae34:	f002 f994 	bl	800d160 <RCCEx_PLL2_Config>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae3e:	e013      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae44:	3328      	adds	r3, #40	; 0x28
 800ae46:	2100      	movs	r1, #0
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f002 fa3b 	bl	800d2c4 <RCCEx_PLL3_Config>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae54:	e008      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae5c:	e004      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae5e:	bf00      	nop
 800ae60:	e002      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ae70:	4b3b      	ldr	r3, [pc, #236]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae74:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae80:	4a37      	ldr	r2, [pc, #220]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae82:	430b      	orrs	r3, r1
 800ae84:	6593      	str	r3, [r2, #88]	; 0x58
 800ae86:	e003      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ae9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aea0:	2300      	movs	r3, #0
 800aea2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aea6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4313      	orrs	r3, r2
 800aeae:	d05d      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aeb8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aebc:	d03b      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aebe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aec2:	d834      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aec8:	d037      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aeca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aece:	d82e      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aed0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aed4:	d033      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aeda:	d828      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aee0:	d01a      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aee6:	d822      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aeec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aef0:	d007      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aef2:	e01c      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef4:	4b1a      	ldr	r3, [pc, #104]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	4a19      	ldr	r2, [pc, #100]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aefa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aefe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af00:	e01e      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af06:	3308      	adds	r3, #8
 800af08:	2100      	movs	r1, #0
 800af0a:	4618      	mov	r0, r3
 800af0c:	f002 f928 	bl	800d160 <RCCEx_PLL2_Config>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af16:	e013      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1c:	3328      	adds	r3, #40	; 0x28
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f002 f9cf 	bl	800d2c4 <RCCEx_PLL3_Config>
 800af26:	4603      	mov	r3, r0
 800af28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af2c:	e008      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af34:	e004      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af36:	bf00      	nop
 800af38:	e002      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af3a:	bf00      	nop
 800af3c:	e000      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10d      	bne.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af48:	4b05      	ldr	r3, [pc, #20]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af58:	4a01      	ldr	r2, [pc, #4]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af5a:	430b      	orrs	r3, r1
 800af5c:	6593      	str	r3, [r2, #88]	; 0x58
 800af5e:	e005      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800af60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800af78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af7c:	2300      	movs	r3, #0
 800af7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800af82:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800af86:	460b      	mov	r3, r1
 800af88:	4313      	orrs	r3, r2
 800af8a:	d03a      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af92:	2b30      	cmp	r3, #48	; 0x30
 800af94:	d01f      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800af96:	2b30      	cmp	r3, #48	; 0x30
 800af98:	d819      	bhi.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	d00c      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800af9e:	2b20      	cmp	r3, #32
 800afa0:	d815      	bhi.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d019      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afa6:	2b10      	cmp	r3, #16
 800afa8:	d111      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afaa:	4baa      	ldr	r3, [pc, #680]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	4aa9      	ldr	r2, [pc, #676]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800afb6:	e011      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbc:	3308      	adds	r3, #8
 800afbe:	2102      	movs	r1, #2
 800afc0:	4618      	mov	r0, r3
 800afc2:	f002 f8cd 	bl	800d160 <RCCEx_PLL2_Config>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800afcc:	e006      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afd4:	e002      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800afda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10a      	bne.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800afe4:	4b9b      	ldr	r3, [pc, #620]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aff2:	4a98      	ldr	r2, [pc, #608]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aff4:	430b      	orrs	r3, r1
 800aff6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aff8:	e003      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800affe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b00e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b012:	2300      	movs	r3, #0
 800b014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b018:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b01c:	460b      	mov	r3, r1
 800b01e:	4313      	orrs	r3, r2
 800b020:	d051      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b02c:	d035      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b02e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b032:	d82e      	bhi.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b038:	d031      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b03a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b03e:	d828      	bhi.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b044:	d01a      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b04a:	d822      	bhi.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b054:	d007      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b056:	e01c      	b.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b058:	4b7e      	ldr	r3, [pc, #504]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	4a7d      	ldr	r2, [pc, #500]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b064:	e01c      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06a:	3308      	adds	r3, #8
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f002 f876 	bl	800d160 <RCCEx_PLL2_Config>
 800b074:	4603      	mov	r3, r0
 800b076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b07a:	e011      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b080:	3328      	adds	r3, #40	; 0x28
 800b082:	2100      	movs	r1, #0
 800b084:	4618      	mov	r0, r3
 800b086:	f002 f91d 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b090:	e006      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b098:	e002      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b09a:	bf00      	nop
 800b09c:	e000      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b09e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0a8:	4b6a      	ldr	r3, [pc, #424]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b6:	4a67      	ldr	r2, [pc, #412]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0b8:	430b      	orrs	r3, r1
 800b0ba:	6513      	str	r3, [r2, #80]	; 0x50
 800b0bc:	e003      	b.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b0d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	d053      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0f0:	d033      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b0f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0f6:	d82c      	bhi.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b0f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0fc:	d02f      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b0fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b102:	d826      	bhi.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b108:	d02b      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b10a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b10e:	d820      	bhi.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b114:	d012      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b11a:	d81a      	bhi.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d022      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b124:	d115      	bne.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12a:	3308      	adds	r3, #8
 800b12c:	2101      	movs	r1, #1
 800b12e:	4618      	mov	r0, r3
 800b130:	f002 f816 	bl	800d160 <RCCEx_PLL2_Config>
 800b134:	4603      	mov	r3, r0
 800b136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b13a:	e015      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b140:	3328      	adds	r3, #40	; 0x28
 800b142:	2101      	movs	r1, #1
 800b144:	4618      	mov	r0, r3
 800b146:	f002 f8bd 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b14a:	4603      	mov	r3, r0
 800b14c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b150:	e00a      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b158:	e006      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b15a:	bf00      	nop
 800b15c:	e004      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b15e:	bf00      	nop
 800b160:	e002      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b162:	bf00      	nop
 800b164:	e000      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b166:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b168:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b170:	4b38      	ldr	r3, [pc, #224]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b174:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b17e:	4a35      	ldr	r2, [pc, #212]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b180:	430b      	orrs	r3, r1
 800b182:	6513      	str	r3, [r2, #80]	; 0x50
 800b184:	e003      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b186:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b18a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b19a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	d058      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1ba:	d033      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b1bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1c0:	d82c      	bhi.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c6:	d02f      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b1c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1cc:	d826      	bhi.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1d2:	d02b      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b1d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1d8:	d820      	bhi.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1de:	d012      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b1e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1e4:	d81a      	bhi.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d022      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b1ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ee:	d115      	bne.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 ffb1 	bl	800d160 <RCCEx_PLL2_Config>
 800b1fe:	4603      	mov	r3, r0
 800b200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b204:	e015      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20a:	3328      	adds	r3, #40	; 0x28
 800b20c:	2101      	movs	r1, #1
 800b20e:	4618      	mov	r0, r3
 800b210:	f002 f858 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b21a:	e00a      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b222:	e006      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b224:	bf00      	nop
 800b226:	e004      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b228:	bf00      	nop
 800b22a:	e002      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b22c:	bf00      	nop
 800b22e:	e000      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b230:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b232:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10e      	bne.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b23a:	4b06      	ldr	r3, [pc, #24]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b24a:	4a02      	ldr	r2, [pc, #8]	; (800b254 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b24c:	430b      	orrs	r3, r1
 800b24e:	6593      	str	r3, [r2, #88]	; 0x58
 800b250:	e006      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b252:	bf00      	nop
 800b254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b258:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b25c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b26c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b270:	2300      	movs	r3, #0
 800b272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b276:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4313      	orrs	r3, r2
 800b27e:	d037      	beq.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b28a:	d00e      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b28c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b290:	d816      	bhi.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d018      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b29a:	d111      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b29c:	4bc4      	ldr	r3, [pc, #784]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	4ac3      	ldr	r2, [pc, #780]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2a8:	e00f      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f001 ff54 	bl	800d160 <RCCEx_PLL2_Config>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2be:	e004      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2c6:	e000      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b2c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10a      	bne.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2d2:	4bb7      	ldr	r3, [pc, #732]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e0:	4ab3      	ldr	r2, [pc, #716]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	6513      	str	r3, [r2, #80]	; 0x50
 800b2e6:	e003      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b300:	2300      	movs	r3, #0
 800b302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b306:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b30a:	460b      	mov	r3, r1
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d039      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b316:	2b03      	cmp	r3, #3
 800b318:	d81c      	bhi.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b31a:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b35d 	.word	0x0800b35d
 800b324:	0800b331 	.word	0x0800b331
 800b328:	0800b33f 	.word	0x0800b33f
 800b32c:	0800b35d 	.word	0x0800b35d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b330:	4b9f      	ldr	r3, [pc, #636]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	4a9e      	ldr	r2, [pc, #632]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b33a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b33c:	e00f      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b342:	3308      	adds	r3, #8
 800b344:	2102      	movs	r1, #2
 800b346:	4618      	mov	r0, r3
 800b348:	f001 ff0a 	bl	800d160 <RCCEx_PLL2_Config>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b352:	e004      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b35a:	e000      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b35c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b366:	4b92      	ldr	r3, [pc, #584]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36a:	f023 0103 	bic.w	r1, r3, #3
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b374:	4a8e      	ldr	r2, [pc, #568]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b376:	430b      	orrs	r3, r1
 800b378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b37a:	e003      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b380:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b394:	2300      	movs	r3, #0
 800b396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b39a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	f000 8099 	beq.w	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3a6:	4b83      	ldr	r3, [pc, #524]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a82      	ldr	r2, [pc, #520]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3b2:	f7f8 fd7f 	bl	8003eb4 <HAL_GetTick>
 800b3b6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ba:	e00b      	b.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3bc:	f7f8 fd7a 	bl	8003eb4 <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2b64      	cmp	r3, #100	; 0x64
 800b3ca:	d903      	bls.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3d2:	e005      	b.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3d4:	4b77      	ldr	r3, [pc, #476]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0ed      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b3e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d173      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b3e8:	4b71      	ldr	r3, [pc, #452]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3f4:	4053      	eors	r3, r2
 800b3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d015      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b3fe:	4b6c      	ldr	r3, [pc, #432]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b40a:	4b69      	ldr	r3, [pc, #420]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40e:	4a68      	ldr	r2, [pc, #416]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b414:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b416:	4b66      	ldr	r3, [pc, #408]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41a:	4a65      	ldr	r2, [pc, #404]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b41c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b420:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b422:	4a63      	ldr	r2, [pc, #396]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b428:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b436:	d118      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b438:	f7f8 fd3c 	bl	8003eb4 <HAL_GetTick>
 800b43c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b440:	e00d      	b.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b442:	f7f8 fd37 	bl	8003eb4 <HAL_GetTick>
 800b446:	4602      	mov	r2, r0
 800b448:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b44c:	1ad2      	subs	r2, r2, r3
 800b44e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b452:	429a      	cmp	r2, r3
 800b454:	d903      	bls.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b456:	2303      	movs	r3, #3
 800b458:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b45c:	e005      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b45e:	4b54      	ldr	r3, [pc, #336]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b462:	f003 0302 	and.w	r3, r3, #2
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0eb      	beq.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b46a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d129      	bne.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b482:	d10e      	bne.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b484:	4b4a      	ldr	r3, [pc, #296]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b494:	091a      	lsrs	r2, r3, #4
 800b496:	4b48      	ldr	r3, [pc, #288]	; (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b498:	4013      	ands	r3, r2
 800b49a:	4a45      	ldr	r2, [pc, #276]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b49c:	430b      	orrs	r3, r1
 800b49e:	6113      	str	r3, [r2, #16]
 800b4a0:	e005      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b4a2:	4b43      	ldr	r3, [pc, #268]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	4a42      	ldr	r2, [pc, #264]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4ac:	6113      	str	r3, [r2, #16]
 800b4ae:	4b40      	ldr	r3, [pc, #256]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4be:	4a3c      	ldr	r2, [pc, #240]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4c0:	430b      	orrs	r3, r1
 800b4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800b4c4:	e008      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b4c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b4ce:	e003      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f002 0301 	and.w	r3, r2, #1
 800b4e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	f000 808f 	beq.w	800b618 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b500:	2b28      	cmp	r3, #40	; 0x28
 800b502:	d871      	bhi.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b504:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50a:	bf00      	nop
 800b50c:	0800b5f1 	.word	0x0800b5f1
 800b510:	0800b5e9 	.word	0x0800b5e9
 800b514:	0800b5e9 	.word	0x0800b5e9
 800b518:	0800b5e9 	.word	0x0800b5e9
 800b51c:	0800b5e9 	.word	0x0800b5e9
 800b520:	0800b5e9 	.word	0x0800b5e9
 800b524:	0800b5e9 	.word	0x0800b5e9
 800b528:	0800b5e9 	.word	0x0800b5e9
 800b52c:	0800b5bd 	.word	0x0800b5bd
 800b530:	0800b5e9 	.word	0x0800b5e9
 800b534:	0800b5e9 	.word	0x0800b5e9
 800b538:	0800b5e9 	.word	0x0800b5e9
 800b53c:	0800b5e9 	.word	0x0800b5e9
 800b540:	0800b5e9 	.word	0x0800b5e9
 800b544:	0800b5e9 	.word	0x0800b5e9
 800b548:	0800b5e9 	.word	0x0800b5e9
 800b54c:	0800b5d3 	.word	0x0800b5d3
 800b550:	0800b5e9 	.word	0x0800b5e9
 800b554:	0800b5e9 	.word	0x0800b5e9
 800b558:	0800b5e9 	.word	0x0800b5e9
 800b55c:	0800b5e9 	.word	0x0800b5e9
 800b560:	0800b5e9 	.word	0x0800b5e9
 800b564:	0800b5e9 	.word	0x0800b5e9
 800b568:	0800b5e9 	.word	0x0800b5e9
 800b56c:	0800b5f1 	.word	0x0800b5f1
 800b570:	0800b5e9 	.word	0x0800b5e9
 800b574:	0800b5e9 	.word	0x0800b5e9
 800b578:	0800b5e9 	.word	0x0800b5e9
 800b57c:	0800b5e9 	.word	0x0800b5e9
 800b580:	0800b5e9 	.word	0x0800b5e9
 800b584:	0800b5e9 	.word	0x0800b5e9
 800b588:	0800b5e9 	.word	0x0800b5e9
 800b58c:	0800b5f1 	.word	0x0800b5f1
 800b590:	0800b5e9 	.word	0x0800b5e9
 800b594:	0800b5e9 	.word	0x0800b5e9
 800b598:	0800b5e9 	.word	0x0800b5e9
 800b59c:	0800b5e9 	.word	0x0800b5e9
 800b5a0:	0800b5e9 	.word	0x0800b5e9
 800b5a4:	0800b5e9 	.word	0x0800b5e9
 800b5a8:	0800b5e9 	.word	0x0800b5e9
 800b5ac:	0800b5f1 	.word	0x0800b5f1
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	58024800 	.word	0x58024800
 800b5b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f001 fdcb 	bl	800d160 <RCCEx_PLL2_Config>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5d0:	e00f      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d6:	3328      	adds	r3, #40	; 0x28
 800b5d8:	2101      	movs	r1, #1
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f001 fe72 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b5e6:	e004      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5ee:	e000      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b5f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10a      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b5fa:	4bbf      	ldr	r3, [pc, #764]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b608:	4abb      	ldr	r2, [pc, #748]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b60a:	430b      	orrs	r3, r1
 800b60c:	6553      	str	r3, [r2, #84]	; 0x54
 800b60e:	e003      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b610:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b614:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	f002 0302 	and.w	r3, r2, #2
 800b624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b628:	2300      	movs	r3, #0
 800b62a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b62e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b632:	460b      	mov	r3, r1
 800b634:	4313      	orrs	r3, r2
 800b636:	d041      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b63e:	2b05      	cmp	r3, #5
 800b640:	d824      	bhi.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b642:	a201      	add	r2, pc, #4	; (adr r2, 800b648 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b648:	0800b695 	.word	0x0800b695
 800b64c:	0800b661 	.word	0x0800b661
 800b650:	0800b677 	.word	0x0800b677
 800b654:	0800b695 	.word	0x0800b695
 800b658:	0800b695 	.word	0x0800b695
 800b65c:	0800b695 	.word	0x0800b695
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b664:	3308      	adds	r3, #8
 800b666:	2101      	movs	r1, #1
 800b668:	4618      	mov	r0, r3
 800b66a:	f001 fd79 	bl	800d160 <RCCEx_PLL2_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b674:	e00f      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67a:	3328      	adds	r3, #40	; 0x28
 800b67c:	2101      	movs	r1, #1
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 fe20 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b684:	4603      	mov	r3, r0
 800b686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b68a:	e004      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b692:	e000      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b696:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b69e:	4b96      	ldr	r3, [pc, #600]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	f023 0107 	bic.w	r1, r3, #7
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ac:	4a92      	ldr	r2, [pc, #584]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6ae:	430b      	orrs	r3, r1
 800b6b0:	6553      	str	r3, [r2, #84]	; 0x54
 800b6b2:	e003      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f002 0304 	and.w	r3, r2, #4
 800b6c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	d044      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e4:	2b05      	cmp	r3, #5
 800b6e6:	d825      	bhi.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b6e8:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ee:	bf00      	nop
 800b6f0:	0800b73d 	.word	0x0800b73d
 800b6f4:	0800b709 	.word	0x0800b709
 800b6f8:	0800b71f 	.word	0x0800b71f
 800b6fc:	0800b73d 	.word	0x0800b73d
 800b700:	0800b73d 	.word	0x0800b73d
 800b704:	0800b73d 	.word	0x0800b73d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70c:	3308      	adds	r3, #8
 800b70e:	2101      	movs	r1, #1
 800b710:	4618      	mov	r0, r3
 800b712:	f001 fd25 	bl	800d160 <RCCEx_PLL2_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b71c:	e00f      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b722:	3328      	adds	r3, #40	; 0x28
 800b724:	2101      	movs	r1, #1
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fdcc 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b732:	e004      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b73a:	e000      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10b      	bne.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b746:	4b6c      	ldr	r3, [pc, #432]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b74a:	f023 0107 	bic.w	r1, r3, #7
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b756:	4a68      	ldr	r2, [pc, #416]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b758:	430b      	orrs	r3, r1
 800b75a:	6593      	str	r3, [r2, #88]	; 0x58
 800b75c:	e003      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b762:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f002 0320 	and.w	r3, r2, #32
 800b772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b776:	2300      	movs	r3, #0
 800b778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b77c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b780:	460b      	mov	r3, r1
 800b782:	4313      	orrs	r3, r2
 800b784:	d055      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b78e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b792:	d033      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b798:	d82c      	bhi.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b79e:	d02f      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a4:	d826      	bhi.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7aa:	d02b      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b7ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7b0:	d820      	bhi.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b6:	d012      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b7b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7bc:	d81a      	bhi.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d022      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b7c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7c6:	d115      	bne.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f001 fcc5 	bl	800d160 <RCCEx_PLL2_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7dc:	e015      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e2:	3328      	adds	r3, #40	; 0x28
 800b7e4:	2102      	movs	r1, #2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f001 fd6c 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b7f2:	e00a      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7fa:	e006      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b7fc:	bf00      	nop
 800b7fe:	e004      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b800:	bf00      	nop
 800b802:	e002      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b804:	bf00      	nop
 800b806:	e000      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b80a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10b      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b812:	4b39      	ldr	r3, [pc, #228]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b816:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b822:	4a35      	ldr	r2, [pc, #212]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b824:	430b      	orrs	r3, r1
 800b826:	6553      	str	r3, [r2, #84]	; 0x54
 800b828:	e003      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b82e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b83e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b842:	2300      	movs	r3, #0
 800b844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b848:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b84c:	460b      	mov	r3, r1
 800b84e:	4313      	orrs	r3, r2
 800b850:	d058      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b85a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b85e:	d033      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b860:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b864:	d82c      	bhi.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b86a:	d02f      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b870:	d826      	bhi.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b876:	d02b      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b87c:	d820      	bhi.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b87e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b882:	d012      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b888:	d81a      	bhi.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d022      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b88e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b892:	d115      	bne.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b898:	3308      	adds	r3, #8
 800b89a:	2100      	movs	r1, #0
 800b89c:	4618      	mov	r0, r3
 800b89e:	f001 fc5f 	bl	800d160 <RCCEx_PLL2_Config>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8a8:	e015      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ae:	3328      	adds	r3, #40	; 0x28
 800b8b0:	2102      	movs	r1, #2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f001 fd06 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8be:	e00a      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8c6:	e006      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8c8:	bf00      	nop
 800b8ca:	e004      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8cc:	bf00      	nop
 800b8ce:	e002      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8d0:	bf00      	nop
 800b8d2:	e000      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10e      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8de:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8ee:	4a02      	ldr	r2, [pc, #8]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8f4:	e006      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b8f6:	bf00      	nop
 800b8f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b900:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b914:	2300      	movs	r3, #0
 800b916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b91a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b91e:	460b      	mov	r3, r1
 800b920:	4313      	orrs	r3, r2
 800b922:	d055      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b92c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b930:	d033      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b932:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b936:	d82c      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b93c:	d02f      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b93e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b942:	d826      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b944:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b948:	d02b      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b94a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b94e:	d820      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b954:	d012      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b95a:	d81a      	bhi.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d022      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b964:	d115      	bne.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	3308      	adds	r3, #8
 800b96c:	2100      	movs	r1, #0
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 fbf6 	bl	800d160 <RCCEx_PLL2_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b97a:	e015      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	3328      	adds	r3, #40	; 0x28
 800b982:	2102      	movs	r1, #2
 800b984:	4618      	mov	r0, r3
 800b986:	f001 fc9d 	bl	800d2c4 <RCCEx_PLL3_Config>
 800b98a:	4603      	mov	r3, r0
 800b98c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b990:	e00a      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b998:	e006      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b99a:	bf00      	nop
 800b99c:	e004      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b99e:	bf00      	nop
 800b9a0:	e002      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9a2:	bf00      	nop
 800b9a4:	e000      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10b      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9b0:	4ba0      	ldr	r3, [pc, #640]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9c0:	4a9c      	ldr	r2, [pc, #624]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9c2:	430b      	orrs	r3, r1
 800b9c4:	6593      	str	r3, [r2, #88]	; 0x58
 800b9c6:	e003      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f002 0308 	and.w	r3, r2, #8
 800b9dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b9e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	d01e      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9fc:	d10c      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba02:	3328      	adds	r3, #40	; 0x28
 800ba04:	2102      	movs	r1, #2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 fc5c 	bl	800d2c4 <RCCEx_PLL3_Config>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ba18:	4b86      	ldr	r3, [pc, #536]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba28:	4a82      	ldr	r2, [pc, #520]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f002 0310 	and.w	r3, r2, #16
 800ba3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba44:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	d01e      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba5a:	d10c      	bne.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba60:	3328      	adds	r3, #40	; 0x28
 800ba62:	2102      	movs	r1, #2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 fc2d 	bl	800d2c4 <RCCEx_PLL3_Config>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba76:	4b6f      	ldr	r3, [pc, #444]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba86:	4a6b      	ldr	r2, [pc, #428]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba88:	430b      	orrs	r3, r1
 800ba8a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ba98:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800baa2:	460b      	mov	r3, r1
 800baa4:	4313      	orrs	r3, r2
 800baa6:	d03e      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bab4:	d022      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baba:	d81b      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bac4:	d00b      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bac6:	e015      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bacc:	3308      	adds	r3, #8
 800bace:	2100      	movs	r1, #0
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 fb45 	bl	800d160 <RCCEx_PLL2_Config>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800badc:	e00f      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae2:	3328      	adds	r3, #40	; 0x28
 800bae4:	2102      	movs	r1, #2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 fbec 	bl	800d2c4 <RCCEx_PLL3_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800baf2:	e004      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bafa:	e000      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bafe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10b      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb06:	4b4b      	ldr	r3, [pc, #300]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb16:	4a47      	ldr	r2, [pc, #284]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb1c:	e003      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb32:	673b      	str	r3, [r7, #112]	; 0x70
 800bb34:	2300      	movs	r3, #0
 800bb36:	677b      	str	r3, [r7, #116]	; 0x74
 800bb38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	d03b      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb4e:	d01f      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb54:	d818      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bb56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb5a:	d003      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bb5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb60:	d007      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bb62:	e011      	b.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb64:	4b33      	ldr	r3, [pc, #204]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	4a32      	ldr	r2, [pc, #200]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb70:	e00f      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb76:	3328      	adds	r3, #40	; 0x28
 800bb78:	2101      	movs	r1, #1
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 fba2 	bl	800d2c4 <RCCEx_PLL3_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bb86:	e004      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb8e:	e000      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bb90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10b      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb9a:	4b26      	ldr	r3, [pc, #152]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbaa:	4a22      	ldr	r2, [pc, #136]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbac:	430b      	orrs	r3, r1
 800bbae:	6553      	str	r3, [r2, #84]	; 0x54
 800bbb0:	e003      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bbc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbc8:	2300      	movs	r3, #0
 800bbca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbcc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	d034      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d003      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe4:	d007      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bbe6:	e011      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbe8:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbec:	4a11      	ldr	r2, [pc, #68]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bbf4:	e00e      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	2102      	movs	r1, #2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f001 faae 	bl	800d160 <RCCEx_PLL2_Config>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc0a:	e003      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10d      	bne.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2a:	4a02      	ldr	r2, [pc, #8]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2c:	430b      	orrs	r3, r1
 800bc2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc30:	e006      	b.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bc32:	bf00      	nop
 800bc34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bc4c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc4e:	2300      	movs	r3, #0
 800bc50:	667b      	str	r3, [r7, #100]	; 0x64
 800bc52:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bc56:	460b      	mov	r3, r1
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	d00c      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc60:	3328      	adds	r3, #40	; 0x28
 800bc62:	2102      	movs	r1, #2
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 fb2d 	bl	800d2c4 <RCCEx_PLL3_Config>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bc82:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc84:	2300      	movs	r3, #0
 800bc86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	d036      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc9c:	d018      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bc9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bca2:	d811      	bhi.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca8:	d014      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bcaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcae:	d80b      	bhi.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d011      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bcb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb8:	d106      	bne.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcba:	4bb7      	ldr	r3, [pc, #732]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbe:	4ab6      	ldr	r2, [pc, #728]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bcc6:	e008      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcce:	e004      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bcd0:	bf00      	nop
 800bcd2:	e002      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bcd4:	bf00      	nop
 800bcd6:	e000      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bcd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bce2:	4bad      	ldr	r3, [pc, #692]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bcea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcf0:	4aa9      	ldr	r2, [pc, #676]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcf2:	430b      	orrs	r3, r1
 800bcf4:	6553      	str	r3, [r2, #84]	; 0x54
 800bcf6:	e003      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd0c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd0e:	2300      	movs	r3, #0
 800bd10:	657b      	str	r3, [r7, #84]	; 0x54
 800bd12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bd16:	460b      	mov	r3, r1
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	d009      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd1c:	4b9e      	ldr	r3, [pc, #632]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd2a:	4a9b      	ldr	r2, [pc, #620]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd2c:	430b      	orrs	r3, r1
 800bd2e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bd3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd3e:	2300      	movs	r3, #0
 800bd40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bd46:	460b      	mov	r3, r1
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	d009      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd4c:	4b92      	ldr	r3, [pc, #584]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd50:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd5a:	4a8f      	ldr	r2, [pc, #572]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bd6c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd6e:	2300      	movs	r3, #0
 800bd70:	647b      	str	r3, [r7, #68]	; 0x44
 800bd72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bd76:	460b      	mov	r3, r1
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	d00e      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd7c:	4b86      	ldr	r3, [pc, #536]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	4a85      	ldr	r2, [pc, #532]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd86:	6113      	str	r3, [r2, #16]
 800bd88:	4b83      	ldr	r3, [pc, #524]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd8a:	6919      	ldr	r1, [r3, #16]
 800bd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd94:	4a80      	ldr	r2, [pc, #512]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd96:	430b      	orrs	r3, r1
 800bd98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bda6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bda8:	2300      	movs	r3, #0
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	d009      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bdb6:	4b78      	ldr	r3, [pc, #480]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc4:	4a74      	ldr	r2, [pc, #464]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdc6:	430b      	orrs	r3, r1
 800bdc8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bdd6:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd8:	2300      	movs	r3, #0
 800bdda:	637b      	str	r3, [r7, #52]	; 0x34
 800bddc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bde0:	460b      	mov	r3, r1
 800bde2:	4313      	orrs	r3, r2
 800bde4:	d00a      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bde6:	4b6c      	ldr	r3, [pc, #432]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf6:	4a68      	ldr	r2, [pc, #416]	; (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	2100      	movs	r1, #0
 800be06:	62b9      	str	r1, [r7, #40]	; 0x28
 800be08:	f003 0301 	and.w	r3, r3, #1
 800be0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be12:	460b      	mov	r3, r1
 800be14:	4313      	orrs	r3, r2
 800be16:	d011      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be1c:	3308      	adds	r3, #8
 800be1e:	2100      	movs	r1, #0
 800be20:	4618      	mov	r0, r3
 800be22:	f001 f99d 	bl	800d160 <RCCEx_PLL2_Config>
 800be26:	4603      	mov	r3, r0
 800be28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	2100      	movs	r1, #0
 800be46:	6239      	str	r1, [r7, #32]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
 800be4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be52:	460b      	mov	r3, r1
 800be54:	4313      	orrs	r3, r2
 800be56:	d011      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5c:	3308      	adds	r3, #8
 800be5e:	2101      	movs	r1, #1
 800be60:	4618      	mov	r0, r3
 800be62:	f001 f97d 	bl	800d160 <RCCEx_PLL2_Config>
 800be66:	4603      	mov	r3, r0
 800be68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be70:	2b00      	cmp	r3, #0
 800be72:	d003      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	2100      	movs	r1, #0
 800be86:	61b9      	str	r1, [r7, #24]
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	61fb      	str	r3, [r7, #28]
 800be8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800be92:	460b      	mov	r3, r1
 800be94:	4313      	orrs	r3, r2
 800be96:	d011      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9c:	3308      	adds	r3, #8
 800be9e:	2102      	movs	r1, #2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 f95d 	bl	800d160 <RCCEx_PLL2_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800beac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	2100      	movs	r1, #0
 800bec6:	6139      	str	r1, [r7, #16]
 800bec8:	f003 0308 	and.w	r3, r3, #8
 800becc:	617b      	str	r3, [r7, #20]
 800bece:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bed2:	460b      	mov	r3, r1
 800bed4:	4313      	orrs	r3, r2
 800bed6:	d011      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bedc:	3328      	adds	r3, #40	; 0x28
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 f9ef 	bl	800d2c4 <RCCEx_PLL3_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800beec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bef8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800befc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	2100      	movs	r1, #0
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	f003 0310 	and.w	r3, r3, #16
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf12:	460b      	mov	r3, r1
 800bf14:	4313      	orrs	r3, r2
 800bf16:	d011      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf1c:	3328      	adds	r3, #40	; 0x28
 800bf1e:	2101      	movs	r1, #1
 800bf20:	4618      	mov	r0, r3
 800bf22:	f001 f9cf 	bl	800d2c4 <RCCEx_PLL3_Config>
 800bf26:	4603      	mov	r3, r0
 800bf28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	2100      	movs	r1, #0
 800bf46:	6039      	str	r1, [r7, #0]
 800bf48:	f003 0320 	and.w	r3, r3, #32
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf52:	460b      	mov	r3, r1
 800bf54:	4313      	orrs	r3, r2
 800bf56:	d011      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf5c:	3328      	adds	r3, #40	; 0x28
 800bf5e:	2102      	movs	r1, #2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 f9af 	bl	800d2c4 <RCCEx_PLL3_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bf7c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d101      	bne.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bf84:	2300      	movs	r3, #0
 800bf86:	e000      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bf90:	46bd      	mov	sp, r7
 800bf92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf96:	bf00      	nop
 800bf98:	58024400 	.word	0x58024400

0800bf9c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b090      	sub	sp, #64	; 0x40
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfaa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bfae:	430b      	orrs	r3, r1
 800bfb0:	f040 8094 	bne.w	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bfb4:	4b9b      	ldr	r3, [pc, #620]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb8:	f003 0307 	and.w	r3, r3, #7
 800bfbc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	f200 8087 	bhi.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bfc6:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800bfe1 	.word	0x0800bfe1
 800bfd0:	0800c009 	.word	0x0800c009
 800bfd4:	0800c031 	.word	0x0800c031
 800bfd8:	0800c0cd 	.word	0x0800c0cd
 800bfdc:	0800c059 	.word	0x0800c059
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfe0:	4b90      	ldr	r3, [pc, #576]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfec:	d108      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 ff62 	bl	800cebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bffc:	f000 bc93 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c000:	2300      	movs	r3, #0
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c004:	f000 bc8f 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c008:	4b86      	ldr	r3, [pc, #536]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c014:	d108      	bne.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c016:	f107 0318 	add.w	r3, r7, #24
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 fca6 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c024:	f000 bc7f 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c028:	2300      	movs	r3, #0
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02c:	f000 bc7b 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c030:	4b7c      	ldr	r3, [pc, #496]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c03c:	d108      	bne.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c03e:	f107 030c 	add.w	r3, r7, #12
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fde6 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c04c:	f000 bc6b 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c054:	f000 bc67 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c058:	4b72      	ldr	r3, [pc, #456]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c05a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c05c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c060:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c062:	4b70      	ldr	r3, [pc, #448]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f003 0304 	and.w	r3, r3, #4
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	d10c      	bne.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c070:	2b00      	cmp	r3, #0
 800c072:	d109      	bne.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c074:	4b6b      	ldr	r3, [pc, #428]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	08db      	lsrs	r3, r3, #3
 800c07a:	f003 0303 	and.w	r3, r3, #3
 800c07e:	4a6a      	ldr	r2, [pc, #424]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c080:	fa22 f303 	lsr.w	r3, r2, r3
 800c084:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c086:	e01f      	b.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c088:	4b66      	ldr	r3, [pc, #408]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c094:	d106      	bne.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c09c:	d102      	bne.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c09e:	4b63      	ldr	r3, [pc, #396]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a2:	e011      	b.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0a4:	4b5f      	ldr	r3, [pc, #380]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0b0:	d106      	bne.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0b8:	d102      	bne.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ba:	4b5d      	ldr	r3, [pc, #372]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0be:	e003      	b.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0c4:	f000 bc2f 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0c8:	f000 bc2d 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0cc:	4b59      	ldr	r3, [pc, #356]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d0:	f000 bc29 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	f000 bc25 	b.w	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c0e4:	430b      	orrs	r3, r1
 800c0e6:	f040 80a7 	bne.w	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c0ea:	4b4e      	ldr	r3, [pc, #312]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c0f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0fa:	d054      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c102:	f200 808b 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c10c:	f000 8083 	beq.w	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c116:	f200 8081 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c120:	d02f      	beq.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c128:	d878      	bhi.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c136:	d012      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c138:	e070      	b.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c13a:	4b3a      	ldr	r3, [pc, #232]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c146:	d107      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c14c:	4618      	mov	r0, r3
 800c14e:	f000 feb5 	bl	800cebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c156:	e3e6      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c15c:	e3e3      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c15e:	4b31      	ldr	r3, [pc, #196]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c16a:	d107      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c16c:	f107 0318 	add.w	r3, r7, #24
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fbfb 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17a:	e3d4      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c180:	e3d1      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c182:	4b28      	ldr	r3, [pc, #160]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c18a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c18e:	d107      	bne.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c190:	f107 030c 	add.w	r3, r7, #12
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fd3d 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19e:	e3c2      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a4:	e3bf      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1a6:	4b1f      	ldr	r3, [pc, #124]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1b0:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d10c      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d109      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1c2:	4b18      	ldr	r3, [pc, #96]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	08db      	lsrs	r3, r3, #3
 800c1c8:	f003 0303 	and.w	r3, r3, #3
 800c1cc:	4a16      	ldr	r2, [pc, #88]	; (800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d4:	e01e      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1d6:	4b13      	ldr	r3, [pc, #76]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1e2:	d106      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ea:	d102      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1ec:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f0:	e010      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1f2:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1fe:	d106      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c206:	d102      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c208:	4b09      	ldr	r3, [pc, #36]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c20c:	e002      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c212:	e388      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c214:	e387      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c216:	4b07      	ldr	r3, [pc, #28]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21a:	e384      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c220:	e381      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c222:	bf00      	nop
 800c224:	58024400 	.word	0x58024400
 800c228:	03d09000 	.word	0x03d09000
 800c22c:	003d0900 	.word	0x003d0900
 800c230:	02faf080 	.word	0x02faf080
 800c234:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c240:	430b      	orrs	r3, r1
 800c242:	f040 809c 	bne.w	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c246:	4b9e      	ldr	r3, [pc, #632]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c24a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c24e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c256:	d054      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c25e:	f200 808b 	bhi.w	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c268:	f000 8083 	beq.w	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c272:	f200 8081 	bhi.w	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c27c:	d02f      	beq.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c284:	d878      	bhi.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c292:	d012      	beq.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c294:	e070      	b.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c296:	4b8a      	ldr	r3, [pc, #552]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c29e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a2:	d107      	bne.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fe07 	bl	800cebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b2:	e338      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b8:	e335      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ba:	4b81      	ldr	r3, [pc, #516]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2c6:	d107      	bne.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2c8:	f107 0318 	add.w	r3, r7, #24
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 fb4d 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d6:	e326      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2dc:	e323      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2de:	4b78      	ldr	r3, [pc, #480]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ea:	d107      	bne.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2ec:	f107 030c 	add.w	r3, r7, #12
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 fc8f 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fa:	e314      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c300:	e311      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c302:	4b6f      	ldr	r3, [pc, #444]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c30a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c30c:	4b6c      	ldr	r3, [pc, #432]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0304 	and.w	r3, r3, #4
 800c314:	2b04      	cmp	r3, #4
 800c316:	d10c      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c31e:	4b68      	ldr	r3, [pc, #416]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	08db      	lsrs	r3, r3, #3
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	4a66      	ldr	r2, [pc, #408]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c32a:	fa22 f303 	lsr.w	r3, r2, r3
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c330:	e01e      	b.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c332:	4b63      	ldr	r3, [pc, #396]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c33e:	d106      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c346:	d102      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c348:	4b5f      	ldr	r3, [pc, #380]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c34c:	e010      	b.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c34e:	4b5c      	ldr	r3, [pc, #368]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c35a:	d106      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c362:	d102      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c364:	4b59      	ldr	r3, [pc, #356]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c368:	e002      	b.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c36e:	e2da      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c370:	e2d9      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c372:	4b57      	ldr	r3, [pc, #348]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c376:	e2d6      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37c:	e2d3      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c382:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c386:	430b      	orrs	r3, r1
 800c388:	f040 80a7 	bne.w	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c38c:	4b4c      	ldr	r3, [pc, #304]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c390:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c394:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c39c:	d055      	beq.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3a4:	f200 8096 	bhi.w	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3ae:	f000 8084 	beq.w	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3b8:	f200 808c 	bhi.w	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3c2:	d030      	beq.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3ca:	f200 8083 	bhi.w	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3da:	d012      	beq.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c3dc:	e07a      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3de:	4b38      	ldr	r3, [pc, #224]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3ea:	d107      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 fd63 	bl	800cebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3fa:	e294      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c400:	e291      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c402:	4b2f      	ldr	r3, [pc, #188]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c40e:	d107      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c410:	f107 0318 	add.w	r3, r7, #24
 800c414:	4618      	mov	r0, r3
 800c416:	f000 faa9 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41e:	e282      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e27f      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c426:	4b26      	ldr	r3, [pc, #152]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c432:	d107      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c434:	f107 030c 	add.w	r3, r7, #12
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fbeb 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c442:	e270      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e26d      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c44a:	4b1d      	ldr	r3, [pc, #116]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c452:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c454:	4b1a      	ldr	r3, [pc, #104]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d10c      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c466:	4b16      	ldr	r3, [pc, #88]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	08db      	lsrs	r3, r3, #3
 800c46c:	f003 0303 	and.w	r3, r3, #3
 800c470:	4a14      	ldr	r2, [pc, #80]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c472:	fa22 f303 	lsr.w	r3, r2, r3
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c478:	e01e      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c47a:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c486:	d106      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c48e:	d102      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c494:	e010      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c496:	4b0a      	ldr	r3, [pc, #40]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a2:	d106      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4aa:	d102      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ac:	4b07      	ldr	r3, [pc, #28]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b0:	e002      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4b6:	e236      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4b8:	e235      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ba:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4be:	e232      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4c0:	58024400 	.word	0x58024400
 800c4c4:	03d09000 	.word	0x03d09000
 800c4c8:	003d0900 	.word	0x003d0900
 800c4cc:	02faf080 	.word	0x02faf080
 800c4d0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d8:	e225      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	f040 8085 	bne.w	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c4e8:	4b9c      	ldr	r3, [pc, #624]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c4f0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4f8:	d06b      	beq.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c500:	d874      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c508:	d056      	beq.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c510:	d86c      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c518:	d03b      	beq.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c520:	d864      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c528:	d021      	beq.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c530:	d85c      	bhi.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c53e:	d004      	beq.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c540:	e054      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c542:	f7fe fb5f 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 800c546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c548:	e1ed      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c54a:	4b84      	ldr	r3, [pc, #528]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c556:	d107      	bne.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c558:	f107 0318 	add.w	r3, r7, #24
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 fa05 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c566:	e1de      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e1db      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c56e:	4b7b      	ldr	r3, [pc, #492]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c57a:	d107      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c57c:	f107 030c 	add.w	r3, r7, #12
 800c580:	4618      	mov	r0, r3
 800c582:	f000 fb47 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58a:	e1cc      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c590:	e1c9      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c592:	4b72      	ldr	r3, [pc, #456]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0304 	and.w	r3, r3, #4
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	d109      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c59e:	4b6f      	ldr	r3, [pc, #444]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	08db      	lsrs	r3, r3, #3
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	4a6d      	ldr	r2, [pc, #436]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b0:	e1b9      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b6:	e1b6      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5b8:	4b68      	ldr	r3, [pc, #416]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5c4:	d102      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c5c6:	4b67      	ldr	r3, [pc, #412]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ca:	e1ac      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d0:	e1a9      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5d2:	4b62      	ldr	r3, [pc, #392]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5de:	d102      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c5e0:	4b61      	ldr	r3, [pc, #388]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e4:	e19f      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ea:	e19c      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f0:	e199      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c5f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	d173      	bne.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c5fe:	4b57      	ldr	r3, [pc, #348]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c606:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c60e:	d02f      	beq.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c616:	d863      	bhi.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c624:	d012      	beq.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c626:	e05b      	b.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c628:	4b4c      	ldr	r3, [pc, #304]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c634:	d107      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c636:	f107 0318 	add.w	r3, r7, #24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 f996 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c644:	e16f      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64a:	e16c      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c64c:	4b43      	ldr	r3, [pc, #268]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c658:	d107      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c65a:	f107 030c 	add.w	r3, r7, #12
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 fad8 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c668:	e15d      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c66e:	e15a      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c670:	4b3a      	ldr	r3, [pc, #232]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c678:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c67a:	4b38      	ldr	r3, [pc, #224]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 0304 	and.w	r3, r3, #4
 800c682:	2b04      	cmp	r3, #4
 800c684:	d10c      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d109      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c68c:	4b33      	ldr	r3, [pc, #204]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	08db      	lsrs	r3, r3, #3
 800c692:	f003 0303 	and.w	r3, r3, #3
 800c696:	4a32      	ldr	r2, [pc, #200]	; (800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c698:	fa22 f303 	lsr.w	r3, r2, r3
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c69e:	e01e      	b.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6a0:	4b2e      	ldr	r3, [pc, #184]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ac:	d106      	bne.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6b4:	d102      	bne.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6b6:	4b2b      	ldr	r3, [pc, #172]	; (800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ba:	e010      	b.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6bc:	4b27      	ldr	r3, [pc, #156]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6c8:	d106      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6d0:	d102      	bne.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6d2:	4b25      	ldr	r3, [pc, #148]	; (800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6d6:	e002      	b.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6dc:	e123      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c6de:	e122      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e11f      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c6e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ea:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	d13c      	bne.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c6f2:	4b1a      	ldr	r3, [pc, #104]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d004      	beq.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c708:	d012      	beq.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c70a:	e023      	b.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c70c:	4b13      	ldr	r3, [pc, #76]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c718:	d107      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fbcc 	bl	800cebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c728:	e0fd      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c72e:	e0fa      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c730:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c73c:	d107      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c73e:	f107 0318 	add.w	r3, r7, #24
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f912 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74c:	e0eb      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c752:	e0e8      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c758:	e0e5      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c75a:	bf00      	nop
 800c75c:	58024400 	.word	0x58024400
 800c760:	03d09000 	.word	0x03d09000
 800c764:	003d0900 	.word	0x003d0900
 800c768:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c76c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c770:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c774:	430b      	orrs	r3, r1
 800c776:	f040 8085 	bne.w	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c77a:	4b6d      	ldr	r3, [pc, #436]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c77e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c782:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c78a:	d06b      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c792:	d874      	bhi.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c79a:	d056      	beq.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7a2:	d86c      	bhi.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7aa:	d03b      	beq.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7b2:	d864      	bhi.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ba:	d021      	beq.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7c2:	d85c      	bhi.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d004      	beq.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7d0:	d004      	beq.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c7d2:	e054      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c7d4:	f000 f8b4 	bl	800c940 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7da:	e0a4      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7dc:	4b54      	ldr	r3, [pc, #336]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7e8:	d107      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7ea:	f107 0318 	add.w	r3, r7, #24
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 f8bc 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f8:	e095      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fe:	e092      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c800:	4b4b      	ldr	r3, [pc, #300]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c80c:	d107      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c80e:	f107 030c 	add.w	r3, r7, #12
 800c812:	4618      	mov	r0, r3
 800c814:	f000 f9fe 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81c:	e083      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c822:	e080      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c824:	4b42      	ldr	r3, [pc, #264]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0304 	and.w	r3, r3, #4
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	d109      	bne.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c830:	4b3f      	ldr	r3, [pc, #252]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	08db      	lsrs	r3, r3, #3
 800c836:	f003 0303 	and.w	r3, r3, #3
 800c83a:	4a3e      	ldr	r2, [pc, #248]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c83c:	fa22 f303 	lsr.w	r3, r2, r3
 800c840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c842:	e070      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c848:	e06d      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c84a:	4b39      	ldr	r3, [pc, #228]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c856:	d102      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c858:	4b37      	ldr	r3, [pc, #220]	; (800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85c:	e063      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c862:	e060      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c864:	4b32      	ldr	r3, [pc, #200]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c86c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c870:	d102      	bne.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c872:	4b32      	ldr	r3, [pc, #200]	; (800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c876:	e056      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87c:	e053      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c882:	e050      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c888:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c88c:	430b      	orrs	r3, r1
 800c88e:	d148      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c890:	4b27      	ldr	r3, [pc, #156]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c898:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a0:	d02a      	beq.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a8:	d838      	bhi.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d004      	beq.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8b6:	d00d      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c8b8:	e030      	b.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8c6:	d102      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c8c8:	4b1c      	ldr	r3, [pc, #112]	; (800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8cc:	e02b      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d2:	e028      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8d4:	4b16      	ldr	r3, [pc, #88]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8e0:	d107      	bne.n	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 fae8 	bl	800cebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f0:	e019      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f6:	e016      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8f8:	4b0d      	ldr	r3, [pc, #52]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c904:	d107      	bne.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c906:	f107 0318 	add.w	r3, r7, #24
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 f82e 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c914:	e007      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c91a:	e004      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c920:	e001      	b.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3740      	adds	r7, #64	; 0x40
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	58024400 	.word	0x58024400
 800c934:	03d09000 	.word	0x03d09000
 800c938:	003d0900 	.word	0x003d0900
 800c93c:	02faf080 	.word	0x02faf080

0800c940 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c944:	f7fe f92e 	bl	800aba4 <HAL_RCC_GetHCLKFreq>
 800c948:	4602      	mov	r2, r0
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	091b      	lsrs	r3, r3, #4
 800c950:	f003 0307 	and.w	r3, r3, #7
 800c954:	4904      	ldr	r1, [pc, #16]	; (800c968 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c956:	5ccb      	ldrb	r3, [r1, r3]
 800c958:	f003 031f 	and.w	r3, r3, #31
 800c95c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c960:	4618      	mov	r0, r3
 800c962:	bd80      	pop	{r7, pc}
 800c964:	58024400 	.word	0x58024400
 800c968:	0801c5c0 	.word	0x0801c5c0

0800c96c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b089      	sub	sp, #36	; 0x24
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c974:	4ba1      	ldr	r3, [pc, #644]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c978:	f003 0303 	and.w	r3, r3, #3
 800c97c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c97e:	4b9f      	ldr	r3, [pc, #636]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c982:	0b1b      	lsrs	r3, r3, #12
 800c984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c988:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c98a:	4b9c      	ldr	r3, [pc, #624]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c98e:	091b      	lsrs	r3, r3, #4
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c996:	4b99      	ldr	r3, [pc, #612]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	08db      	lsrs	r3, r3, #3
 800c99c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	fb02 f303 	mul.w	r3, r2, r3
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8111 	beq.w	800cbdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	f000 8083 	beq.w	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	f200 80a1 	bhi.w	800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d003      	beq.n	800c9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d056      	beq.n	800ca84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9d6:	e099      	b.n	800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9d8:	4b88      	ldr	r3, [pc, #544]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d02d      	beq.n	800ca40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9e4:	4b85      	ldr	r3, [pc, #532]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	08db      	lsrs	r3, r3, #3
 800c9ea:	f003 0303 	and.w	r3, r3, #3
 800c9ee:	4a84      	ldr	r2, [pc, #528]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	ee07 3a90 	vmov	s15, r3
 800c9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0e:	4b7b      	ldr	r3, [pc, #492]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca16:	ee07 3a90 	vmov	s15, r3
 800ca1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca3e:	e087      	b.n	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca52:	4b6a      	ldr	r3, [pc, #424]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5a:	ee07 3a90 	vmov	s15, r3
 800ca5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca82:	e065      	b.n	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca96:	4b59      	ldr	r3, [pc, #356]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac6:	e043      	b.n	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cada:	4b48      	ldr	r3, [pc, #288]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caea:	ed97 6a03 	vldr	s12, [r7, #12]
 800caee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb0a:	e021      	b.n	800cb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	ee07 3a90 	vmov	s15, r3
 800cb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1e:	4b37      	ldr	r3, [pc, #220]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb32:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb50:	4b2a      	ldr	r3, [pc, #168]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb54:	0a5b      	lsrs	r3, r3, #9
 800cb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb76:	ee17 2a90 	vmov	r2, s15
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb7e:	4b1f      	ldr	r3, [pc, #124]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb82:	0c1b      	lsrs	r3, r3, #16
 800cb84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb88:	ee07 3a90 	vmov	s15, r3
 800cb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb98:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba4:	ee17 2a90 	vmov	r2, s15
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbac:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb0:	0e1b      	lsrs	r3, r3, #24
 800cbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb6:	ee07 3a90 	vmov	s15, r3
 800cbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd2:	ee17 2a90 	vmov	r2, s15
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbda:	e008      	b.n	800cbee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	609a      	str	r2, [r3, #8]
}
 800cbee:	bf00      	nop
 800cbf0:	3724      	adds	r7, #36	; 0x24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	58024400 	.word	0x58024400
 800cc00:	03d09000 	.word	0x03d09000
 800cc04:	46000000 	.word	0x46000000
 800cc08:	4c742400 	.word	0x4c742400
 800cc0c:	4a742400 	.word	0x4a742400
 800cc10:	4c3ebc20 	.word	0x4c3ebc20

0800cc14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b089      	sub	sp, #36	; 0x24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc1c:	4ba1      	ldr	r3, [pc, #644]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	f003 0303 	and.w	r3, r3, #3
 800cc24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc26:	4b9f      	ldr	r3, [pc, #636]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2a:	0d1b      	lsrs	r3, r3, #20
 800cc2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc32:	4b9c      	ldr	r3, [pc, #624]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc36:	0a1b      	lsrs	r3, r3, #8
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc3e:	4b99      	ldr	r3, [pc, #612]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc42:	08db      	lsrs	r3, r3, #3
 800cc44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	fb02 f303 	mul.w	r3, r2, r3
 800cc4e:	ee07 3a90 	vmov	s15, r3
 800cc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 8111 	beq.w	800ce84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	f000 8083 	beq.w	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	f200 80a1 	bhi.w	800cdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d056      	beq.n	800cd2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc7e:	e099      	b.n	800cdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc80:	4b88      	ldr	r3, [pc, #544]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0320 	and.w	r3, r3, #32
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d02d      	beq.n	800cce8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc8c:	4b85      	ldr	r3, [pc, #532]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	08db      	lsrs	r3, r3, #3
 800cc92:	f003 0303 	and.w	r3, r3, #3
 800cc96:	4a84      	ldr	r2, [pc, #528]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc98:	fa22 f303 	lsr.w	r3, r2, r3
 800cc9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	ee07 3a90 	vmov	s15, r3
 800cca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	ee07 3a90 	vmov	s15, r3
 800ccae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb6:	4b7b      	ldr	r3, [pc, #492]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccbe:	ee07 3a90 	vmov	s15, r3
 800ccc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cce6:	e087      	b.n	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ccf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfa:	4b6a      	ldr	r3, [pc, #424]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd2a:	e065      	b.n	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3e:	4b59      	ldr	r3, [pc, #356]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd46:	ee07 3a90 	vmov	s15, r3
 800cd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6e:	e043      	b.n	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd82:	4b48      	ldr	r3, [pc, #288]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdb2:	e021      	b.n	800cdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	ee07 3a90 	vmov	s15, r3
 800cdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc6:	4b37      	ldr	r3, [pc, #220]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdce:	ee07 3a90 	vmov	s15, r3
 800cdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cdf8:	4b2a      	ldr	r3, [pc, #168]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfc:	0a5b      	lsrs	r3, r3, #9
 800cdfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce1e:	ee17 2a90 	vmov	r2, s15
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce26:	4b1f      	ldr	r3, [pc, #124]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2a:	0c1b      	lsrs	r3, r3, #16
 800ce2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce30:	ee07 3a90 	vmov	s15, r3
 800ce34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce4c:	ee17 2a90 	vmov	r2, s15
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce54:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce58:	0e1b      	lsrs	r3, r3, #24
 800ce5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5e:	ee07 3a90 	vmov	s15, r3
 800ce62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce7a:	ee17 2a90 	vmov	r2, s15
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce82:	e008      	b.n	800ce96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	609a      	str	r2, [r3, #8]
}
 800ce96:	bf00      	nop
 800ce98:	3724      	adds	r7, #36	; 0x24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	58024400 	.word	0x58024400
 800cea8:	03d09000 	.word	0x03d09000
 800ceac:	46000000 	.word	0x46000000
 800ceb0:	4c742400 	.word	0x4c742400
 800ceb4:	4a742400 	.word	0x4a742400
 800ceb8:	4c3ebc20 	.word	0x4c3ebc20

0800cebc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b089      	sub	sp, #36	; 0x24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cec4:	4ba0      	ldr	r3, [pc, #640]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	f003 0303 	and.w	r3, r3, #3
 800cecc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cece:	4b9e      	ldr	r3, [pc, #632]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ced0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced2:	091b      	lsrs	r3, r3, #4
 800ced4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ced8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ceda:	4b9b      	ldr	r3, [pc, #620]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cee4:	4b98      	ldr	r3, [pc, #608]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee8:	08db      	lsrs	r3, r3, #3
 800ceea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	fb02 f303 	mul.w	r3, r2, r3
 800cef4:	ee07 3a90 	vmov	s15, r3
 800cef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8111 	beq.w	800d12a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	f000 8083 	beq.w	800d016 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	f200 80a1 	bhi.w	800d05a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d056      	beq.n	800cfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf24:	e099      	b.n	800d05a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf26:	4b88      	ldr	r3, [pc, #544]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 0320 	and.w	r3, r3, #32
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d02d      	beq.n	800cf8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf32:	4b85      	ldr	r3, [pc, #532]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	08db      	lsrs	r3, r3, #3
 800cf38:	f003 0303 	and.w	r3, r3, #3
 800cf3c:	4a83      	ldr	r2, [pc, #524]	; (800d14c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf3e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	ee07 3a90 	vmov	s15, r3
 800cf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	ee07 3a90 	vmov	s15, r3
 800cf54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf5c:	4b7a      	ldr	r3, [pc, #488]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf64:	ee07 3a90 	vmov	s15, r3
 800cf68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf70:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf8c:	e087      	b.n	800d09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	ee07 3a90 	vmov	s15, r3
 800cf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa0:	4b69      	ldr	r3, [pc, #420]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa8:	ee07 3a90 	vmov	s15, r3
 800cfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfd0:	e065      	b.n	800d09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	ee07 3a90 	vmov	s15, r3
 800cfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d158 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe4:	4b58      	ldr	r3, [pc, #352]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d014:	e043      	b.n	800d09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	ee07 3a90 	vmov	s15, r3
 800d01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d020:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d15c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d028:	4b47      	ldr	r3, [pc, #284]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d038:	ed97 6a03 	vldr	s12, [r7, #12]
 800d03c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d058:	e021      	b.n	800d09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	ee07 3a90 	vmov	s15, r3
 800d060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d064:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d06c:	4b36      	ldr	r3, [pc, #216]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d074:	ee07 3a90 	vmov	s15, r3
 800d078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d080:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d08c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d09c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d09e:	4b2a      	ldr	r3, [pc, #168]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a2:	0a5b      	lsrs	r3, r3, #9
 800d0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a8:	ee07 3a90 	vmov	s15, r3
 800d0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0c4:	ee17 2a90 	vmov	r2, s15
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d0cc:	4b1e      	ldr	r3, [pc, #120]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d6:	ee07 3a90 	vmov	s15, r3
 800d0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f2:	ee17 2a90 	vmov	r2, s15
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d0fa:	4b13      	ldr	r3, [pc, #76]	; (800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0fe:	0e1b      	lsrs	r3, r3, #24
 800d100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d104:	ee07 3a90 	vmov	s15, r3
 800d108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d110:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d114:	edd7 6a07 	vldr	s13, [r7, #28]
 800d118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d11c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d120:	ee17 2a90 	vmov	r2, s15
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d128:	e008      	b.n	800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	609a      	str	r2, [r3, #8]
}
 800d13c:	bf00      	nop
 800d13e:	3724      	adds	r7, #36	; 0x24
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	58024400 	.word	0x58024400
 800d14c:	03d09000 	.word	0x03d09000
 800d150:	46000000 	.word	0x46000000
 800d154:	4c742400 	.word	0x4c742400
 800d158:	4a742400 	.word	0x4a742400
 800d15c:	4c3ebc20 	.word	0x4c3ebc20

0800d160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d16e:	4b53      	ldr	r3, [pc, #332]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d172:	f003 0303 	and.w	r3, r3, #3
 800d176:	2b03      	cmp	r3, #3
 800d178:	d101      	bne.n	800d17e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e099      	b.n	800d2b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d17e:	4b4f      	ldr	r3, [pc, #316]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a4e      	ldr	r2, [pc, #312]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d184:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d18a:	f7f6 fe93 	bl	8003eb4 <HAL_GetTick>
 800d18e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d190:	e008      	b.n	800d1a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d192:	f7f6 fe8f 	bl	8003eb4 <HAL_GetTick>
 800d196:	4602      	mov	r2, r0
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d901      	bls.n	800d1a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e086      	b.n	800d2b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1a4:	4b45      	ldr	r3, [pc, #276]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1f0      	bne.n	800d192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1b0:	4b42      	ldr	r3, [pc, #264]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	031b      	lsls	r3, r3, #12
 800d1be:	493f      	ldr	r1, [pc, #252]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	628b      	str	r3, [r1, #40]	; 0x28
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	025b      	lsls	r3, r3, #9
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	041b      	lsls	r3, r3, #16
 800d1e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1e6:	431a      	orrs	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	061b      	lsls	r3, r3, #24
 800d1f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1f4:	4931      	ldr	r1, [pc, #196]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1fa:	4b30      	ldr	r3, [pc, #192]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	695b      	ldr	r3, [r3, #20]
 800d206:	492d      	ldr	r1, [pc, #180]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d208:	4313      	orrs	r3, r2
 800d20a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d20c:	4b2b      	ldr	r3, [pc, #172]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d210:	f023 0220 	bic.w	r2, r3, #32
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	4928      	ldr	r1, [pc, #160]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d21a:	4313      	orrs	r3, r2
 800d21c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d21e:	4b27      	ldr	r3, [pc, #156]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d222:	4a26      	ldr	r2, [pc, #152]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d224:	f023 0310 	bic.w	r3, r3, #16
 800d228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d22c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d22e:	4b24      	ldr	r3, [pc, #144]	; (800d2c0 <RCCEx_PLL2_Config+0x160>)
 800d230:	4013      	ands	r3, r2
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	69d2      	ldr	r2, [r2, #28]
 800d236:	00d2      	lsls	r2, r2, #3
 800d238:	4920      	ldr	r1, [pc, #128]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d23e:	4b1f      	ldr	r3, [pc, #124]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	4a1e      	ldr	r2, [pc, #120]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d244:	f043 0310 	orr.w	r3, r3, #16
 800d248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d250:	4b1a      	ldr	r3, [pc, #104]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	4a19      	ldr	r2, [pc, #100]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d25a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d25c:	e00f      	b.n	800d27e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d106      	bne.n	800d272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d264:	4b15      	ldr	r3, [pc, #84]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	4a14      	ldr	r2, [pc, #80]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d26a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d26e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d270:	e005      	b.n	800d27e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d272:	4b12      	ldr	r3, [pc, #72]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d276:	4a11      	ldr	r2, [pc, #68]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d27c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d27e:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a0e      	ldr	r2, [pc, #56]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d28a:	f7f6 fe13 	bl	8003eb4 <HAL_GetTick>
 800d28e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d290:	e008      	b.n	800d2a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d292:	f7f6 fe0f 	bl	8003eb4 <HAL_GetTick>
 800d296:	4602      	mov	r2, r0
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d901      	bls.n	800d2a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	e006      	b.n	800d2b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <RCCEx_PLL2_Config+0x15c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d0f0      	beq.n	800d292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	ffff0007 	.word	0xffff0007

0800d2c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2d2:	4b53      	ldr	r3, [pc, #332]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d6:	f003 0303 	and.w	r3, r3, #3
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d101      	bne.n	800d2e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e099      	b.n	800d416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d2e2:	4b4f      	ldr	r3, [pc, #316]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a4e      	ldr	r2, [pc, #312]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d2e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ee:	f7f6 fde1 	bl	8003eb4 <HAL_GetTick>
 800d2f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2f4:	e008      	b.n	800d308 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2f6:	f7f6 fddd 	bl	8003eb4 <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	2b02      	cmp	r3, #2
 800d302:	d901      	bls.n	800d308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e086      	b.n	800d416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d308:	4b45      	ldr	r3, [pc, #276]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1f0      	bne.n	800d2f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d314:	4b42      	ldr	r3, [pc, #264]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d318:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	051b      	lsls	r3, r3, #20
 800d322:	493f      	ldr	r1, [pc, #252]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d324:	4313      	orrs	r3, r2
 800d326:	628b      	str	r3, [r1, #40]	; 0x28
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	3b01      	subs	r3, #1
 800d338:	025b      	lsls	r3, r3, #9
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	431a      	orrs	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	3b01      	subs	r3, #1
 800d344:	041b      	lsls	r3, r3, #16
 800d346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d34a:	431a      	orrs	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	691b      	ldr	r3, [r3, #16]
 800d350:	3b01      	subs	r3, #1
 800d352:	061b      	lsls	r3, r3, #24
 800d354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d358:	4931      	ldr	r1, [pc, #196]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d35a:	4313      	orrs	r3, r2
 800d35c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d35e:	4b30      	ldr	r3, [pc, #192]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	492d      	ldr	r1, [pc, #180]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d36c:	4313      	orrs	r3, r2
 800d36e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d370:	4b2b      	ldr	r3, [pc, #172]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d374:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	4928      	ldr	r1, [pc, #160]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d382:	4b27      	ldr	r3, [pc, #156]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	4a26      	ldr	r2, [pc, #152]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d38c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d38e:	4b24      	ldr	r3, [pc, #144]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d392:	4b24      	ldr	r3, [pc, #144]	; (800d424 <RCCEx_PLL3_Config+0x160>)
 800d394:	4013      	ands	r3, r2
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	69d2      	ldr	r2, [r2, #28]
 800d39a:	00d2      	lsls	r2, r2, #3
 800d39c:	4920      	ldr	r1, [pc, #128]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3a2:	4b1f      	ldr	r3, [pc, #124]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a6:	4a1e      	ldr	r2, [pc, #120]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3b4:	4b1a      	ldr	r3, [pc, #104]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	4a19      	ldr	r2, [pc, #100]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3c0:	e00f      	b.n	800d3e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d106      	bne.n	800d3d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3c8:	4b15      	ldr	r3, [pc, #84]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3cc:	4a14      	ldr	r2, [pc, #80]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d3d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3d4:	e005      	b.n	800d3e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d3d6:	4b12      	ldr	r3, [pc, #72]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3da:	4a11      	ldr	r2, [pc, #68]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d3e2:	4b0f      	ldr	r3, [pc, #60]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a0e      	ldr	r2, [pc, #56]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d3e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3ee:	f7f6 fd61 	bl	8003eb4 <HAL_GetTick>
 800d3f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3f4:	e008      	b.n	800d408 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3f6:	f7f6 fd5d 	bl	8003eb4 <HAL_GetTick>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	2b02      	cmp	r3, #2
 800d402:	d901      	bls.n	800d408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d404:	2303      	movs	r3, #3
 800d406:	e006      	b.n	800d416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d408:	4b05      	ldr	r3, [pc, #20]	; (800d420 <RCCEx_PLL3_Config+0x15c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d410:	2b00      	cmp	r3, #0
 800d412:	d0f0      	beq.n	800d3f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	58024400 	.word	0x58024400
 800d424:	ffff0007 	.word	0xffff0007

0800d428 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08a      	sub	sp, #40	; 0x28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d101      	bne.n	800d43a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	e075      	b.n	800d526 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b00      	cmp	r3, #0
 800d444:	d105      	bne.n	800d452 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7f5 fe0d 	bl	800306c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2204      	movs	r2, #4
 800d456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 f868 	bl	800d530 <HAL_SD_InitCard>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	e05d      	b.n	800d526 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d46a:	f107 0308 	add.w	r3, r7, #8
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fdaf 	bl	800dfd4 <HAL_SD_GetCardStatus>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	e052      	b.n	800d526 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d480:	7e3b      	ldrb	r3, [r7, #24]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d486:	7e7b      	ldrb	r3, [r7, #25]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d490:	2b01      	cmp	r3, #1
 800d492:	d10a      	bne.n	800d4aa <HAL_SD_Init+0x82>
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <HAL_SD_Init+0x78>
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d004      	beq.n	800d4aa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4a6:	659a      	str	r2, [r3, #88]	; 0x58
 800d4a8:	e00b      	b.n	800d4c2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d104      	bne.n	800d4bc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4b8:	659a      	str	r2, [r3, #88]	; 0x58
 800d4ba:	e002      	b.n	800d4c2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fe6d 	bl	800e1a8 <HAL_SD_ConfigWideBusOperation>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e026      	b.n	800d526 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d4d8:	f7f6 fcec 	bl	8003eb4 <HAL_GetTick>
 800d4dc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d4de:	e011      	b.n	800d504 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4e0:	f7f6 fce8 	bl	8003eb4 <HAL_GetTick>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d109      	bne.n	800d504 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4f6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d500:	2303      	movs	r3, #3
 800d502:	e010      	b.n	800d526 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 ff61 	bl	800e3cc <HAL_SD_GetCardState>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b04      	cmp	r3, #4
 800d50e:	d1e7      	bne.n	800d4e0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3728      	adds	r7, #40	; 0x28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b08d      	sub	sp, #52	; 0x34
 800d534:	af02      	add	r7, sp, #8
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d538:	2300      	movs	r3, #0
 800d53a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d53c:	2300      	movs	r3, #0
 800d53e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d540:	2300      	movs	r3, #0
 800d542:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d544:	2300      	movs	r3, #0
 800d546:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d548:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d54c:	f04f 0100 	mov.w	r1, #0
 800d550:	f7fe fd24 	bl	800bf9c <HAL_RCCEx_GetPeriphCLKFreq>
 800d554:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d109      	bne.n	800d570 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d56a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d56c:	2301      	movs	r3, #1
 800d56e:	e070      	b.n	800d652 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	0a1b      	lsrs	r3, r3, #8
 800d574:	4a39      	ldr	r2, [pc, #228]	; (800d65c <HAL_SD_InitCard+0x12c>)
 800d576:	fba2 2303 	umull	r2, r3, r2, r3
 800d57a:	091b      	lsrs	r3, r3, #4
 800d57c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681c      	ldr	r4, [r3, #0]
 800d582:	466a      	mov	r2, sp
 800d584:	f107 0318 	add.w	r3, r7, #24
 800d588:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d58c:	e882 0003 	stmia.w	r2, {r0, r1}
 800d590:	f107 030c 	add.w	r3, r7, #12
 800d594:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d596:	4620      	mov	r0, r4
 800d598:	f004 fe6c 	bl	8012274 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f004 feaf 	bl	8012304 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d005      	beq.n	800d5b8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d007      	beq.n	800d5ce <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d5be:	4a28      	ldr	r2, [pc, #160]	; (800d660 <HAL_SD_InitCard+0x130>)
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7f6 fc7f 	bl	8003ecc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 ffea 	bl	800e5a8 <SD_PowerON>
 800d5d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00b      	beq.n	800d5f4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5e8:	6a3b      	ldr	r3, [r7, #32]
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e02e      	b.n	800d652 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 ff09 	bl	800e40c <SD_InitCard>
 800d5fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00b      	beq.n	800d61a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d60e:	6a3b      	ldr	r3, [r7, #32]
 800d610:	431a      	orrs	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e01b      	b.n	800d652 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d622:	4618      	mov	r0, r3
 800d624:	f004 ff04 	bl	8012430 <SDMMC_CmdBlockLength>
 800d628:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d62a:	6a3b      	ldr	r3, [r7, #32]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00f      	beq.n	800d650 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a0b      	ldr	r2, [pc, #44]	; (800d664 <HAL_SD_InitCard+0x134>)
 800d636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	431a      	orrs	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e000      	b.n	800d652 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	372c      	adds	r7, #44	; 0x2c
 800d656:	46bd      	mov	sp, r7
 800d658:	bd90      	pop	{r4, r7, pc}
 800d65a:	bf00      	nop
 800d65c:	014f8b59 	.word	0x014f8b59
 800d660:	00012110 	.word	0x00012110
 800d664:	1fe00fff 	.word	0x1fe00fff

0800d668 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08c      	sub	sp, #48	; 0x30
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d107      	bne.n	800d690 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d684:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e08d      	b.n	800d7ac <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b01      	cmp	r3, #1
 800d69a:	f040 8086 	bne.w	800d7aa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d6a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	441a      	add	r2, r3
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d907      	bls.n	800d6c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e074      	b.n	800d7ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	025a      	lsls	r2, r3, #9
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d002      	beq.n	800d6ee <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ea:	025b      	lsls	r3, r3, #9
 800d6ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	025b      	lsls	r3, r3, #9
 800d6f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d6fa:	2390      	movs	r3, #144	; 0x90
 800d6fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6fe:	2302      	movs	r3, #2
 800d700:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d702:	2300      	movs	r3, #0
 800d704:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d706:	2300      	movs	r3, #0
 800d708:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f107 0210 	add.w	r2, r7, #16
 800d712:	4611      	mov	r1, r2
 800d714:	4618      	mov	r0, r3
 800d716:	f004 fe5f 	bl	80123d8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68da      	ldr	r2, [r3, #12]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d728:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2201      	movs	r2, #1
 800d738:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d90a      	bls.n	800d756 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2282      	movs	r2, #130	; 0x82
 800d744:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d74c:	4618      	mov	r0, r3
 800d74e:	f004 feb5 	bl	80124bc <SDMMC_CmdReadMultiBlock>
 800d752:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d754:	e009      	b.n	800d76a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2281      	movs	r2, #129	; 0x81
 800d75a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d762:	4618      	mov	r0, r3
 800d764:	f004 fe87 	bl	8012476 <SDMMC_CmdReadSingleBlock>
 800d768:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d012      	beq.n	800d796 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a0f      	ldr	r2, [pc, #60]	; (800d7b4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	431a      	orrs	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	e00a      	b.n	800d7ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d7a4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e000      	b.n	800d7ac <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d7aa:	2302      	movs	r3, #2
  }
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3730      	adds	r7, #48	; 0x30
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	1fe00fff 	.word	0x1fe00fff

0800d7b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08c      	sub	sp, #48	; 0x30
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e08d      	b.n	800d8fc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	f040 8086 	bne.w	800d8fa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	441a      	add	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d907      	bls.n	800d812 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d806:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e074      	b.n	800d8fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2203      	movs	r2, #3
 800d816:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2200      	movs	r2, #0
 800d820:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	025a      	lsls	r2, r3, #9
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	2b01      	cmp	r3, #1
 800d836:	d002      	beq.n	800d83e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	025b      	lsls	r3, r3, #9
 800d83c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d83e:	f04f 33ff 	mov.w	r3, #4294967295
 800d842:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	025b      	lsls	r3, r3, #9
 800d848:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d84a:	2390      	movs	r3, #144	; 0x90
 800d84c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d84e:	2300      	movs	r3, #0
 800d850:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d852:	2300      	movs	r3, #0
 800d854:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d856:	2300      	movs	r3, #0
 800d858:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f107 0210 	add.w	r2, r7, #16
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f004 fdb7 	bl	80123d8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d878:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2201      	movs	r2, #1
 800d888:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d90a      	bls.n	800d8a6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	22a0      	movs	r2, #160	; 0xa0
 800d894:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d89c:	4618      	mov	r0, r3
 800d89e:	f004 fe53 	bl	8012548 <SDMMC_CmdWriteMultiBlock>
 800d8a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8a4:	e009      	b.n	800d8ba <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2290      	movs	r2, #144	; 0x90
 800d8aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f004 fe25 	bl	8012502 <SDMMC_CmdWriteSingleBlock>
 800d8b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d012      	beq.n	800d8e6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a0f      	ldr	r2, [pc, #60]	; (800d904 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d8c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e00a      	b.n	800d8fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d8f4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	e000      	b.n	800d8fc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d8fa:	2302      	movs	r3, #2
  }
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3730      	adds	r7, #48	; 0x30
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	1fe00fff 	.word	0x1fe00fff

0800d908 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d008      	beq.n	800d936 <HAL_SD_IRQHandler+0x2e>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f003 0308 	and.w	r3, r3, #8
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d003      	beq.n	800d936 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 f926 	bl	800eb80 <SD_Read_IT>
 800d934:	e19a      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 80ac 	beq.w	800da9e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d94e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	4b59      	ldr	r3, [pc, #356]	; (800dac0 <HAL_SD_IRQHandler+0x1b8>)
 800d95c:	400b      	ands	r3, r1
 800d95e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d96e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68da      	ldr	r2, [r3, #12]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d97e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f003 0308 	and.w	r3, r3, #8
 800d986:	2b00      	cmp	r3, #0
 800d988:	d038      	beq.n	800d9fc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	f003 0302 	and.w	r3, r3, #2
 800d990:	2b00      	cmp	r3, #0
 800d992:	d104      	bne.n	800d99e <HAL_SD_IRQHandler+0x96>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f003 0320 	and.w	r3, r3, #32
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d011      	beq.n	800d9c2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f004 fdf4 	bl	8012590 <SDMMC_CmdStopTransfer>
 800d9a8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d008      	beq.n	800d9c2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	431a      	orrs	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f95b 	bl	800dc78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a3f      	ldr	r2, [pc, #252]	; (800dac4 <HAL_SD_IRQHandler+0x1bc>)
 800d9c8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d104      	bne.n	800d9ec <HAL_SD_IRQHandler+0xe4>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f003 0302 	and.w	r3, r3, #2
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d003      	beq.n	800d9f4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f006 fdf5 	bl	80145dc <HAL_SD_RxCpltCallback>
 800d9f2:	e13b      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f006 fde7 	bl	80145c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d9fa:	e137      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 8132 	beq.w	800dc6c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2200      	movs	r2, #0
 800da0e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2200      	movs	r2, #0
 800da16:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2200      	movs	r2, #0
 800da1e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f003 0302 	and.w	r3, r3, #2
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <HAL_SD_IRQHandler+0x12c>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f003 0320 	and.w	r3, r3, #32
 800da30:	2b00      	cmp	r3, #0
 800da32:	d011      	beq.n	800da58 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4618      	mov	r0, r3
 800da3a:	f004 fda9 	bl	8012590 <SDMMC_CmdStopTransfer>
 800da3e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d008      	beq.n	800da58 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	431a      	orrs	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f910 	bl	800dc78 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f003 0310 	and.w	r3, r3, #16
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <HAL_SD_IRQHandler+0x172>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f003 0320 	and.w	r3, r3, #32
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f006 fda4 	bl	80145c8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d105      	bne.n	800da96 <HAL_SD_IRQHandler+0x18e>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f003 0302 	and.w	r3, r3, #2
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 80eb 	beq.w	800dc6c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f006 fda0 	bl	80145dc <HAL_SD_RxCpltCallback>
}
 800da9c:	e0e6      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00d      	beq.n	800dac8 <HAL_SD_IRQHandler+0x1c0>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d008      	beq.n	800dac8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f001 f8a8 	bl	800ec0c <SD_Write_IT>
 800dabc:	e0d6      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
 800dabe:	bf00      	nop
 800dac0:	ffff3ec5 	.word	0xffff3ec5
 800dac4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dace:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f000 809d 	beq.w	800dc12 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dade:	f003 0302 	and.w	r3, r3, #2
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d005      	beq.n	800daf2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daea:	f043 0202 	orr.w	r2, r3, #2
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daf8:	f003 0308 	and.w	r3, r3, #8
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d005      	beq.n	800db0c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db04:	f043 0208 	orr.w	r2, r3, #8
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db12:	f003 0320 	and.w	r3, r3, #32
 800db16:	2b00      	cmp	r3, #0
 800db18:	d005      	beq.n	800db26 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db1e:	f043 0220 	orr.w	r2, r3, #32
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2c:	f003 0310 	and.w	r3, r3, #16
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db38:	f043 0210 	orr.w	r2, r3, #16
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a4b      	ldr	r2, [pc, #300]	; (800dc74 <HAL_SD_IRQHandler+0x36c>)
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800db56:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68da      	ldr	r2, [r3, #12]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db66:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db76:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db86:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f004 fcff 	bl	8012590 <SDMMC_CmdStopTransfer>
 800db92:	4602      	mov	r2, r0
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db98:	431a      	orrs	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68da      	ldr	r2, [r3, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbac:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbb6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f003 0308 	and.w	r3, r3, #8
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00a      	beq.n	800dbd8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f851 	bl	800dc78 <HAL_SD_ErrorCallback>
}
 800dbd6:	e049      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d044      	beq.n	800dc6c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d040      	beq.n	800dc6c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dbf8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f834 	bl	800dc78 <HAL_SD_ErrorCallback>
}
 800dc10:	e02c      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d025      	beq.n	800dc6c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc28:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc30:	f003 0304 	and.w	r3, r3, #4
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10c      	bne.n	800dc52 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f003 0320 	and.w	r3, r3, #32
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f001 f84a 	bl	800ecdc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dc48:	e010      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f001 f832 	bl	800ecb4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dc50:	e00c      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f003 0320 	and.w	r3, r3, #32
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d003      	beq.n	800dc64 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f001 f833 	bl	800ecc8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dc62:	e003      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 f81b 	bl	800eca0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dc6a:	e7ff      	b.n	800dc6c <HAL_SD_IRQHandler+0x364>
 800dc6c:	bf00      	nop
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	18000f3a 	.word	0x18000f3a

0800dc78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc9a:	0f9b      	lsrs	r3, r3, #30
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dca6:	0e9b      	lsrs	r3, r3, #26
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 030f 	and.w	r3, r3, #15
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb8:	0e1b      	lsrs	r3, r3, #24
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	f003 0303 	and.w	r3, r3, #3
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcca:	0c1b      	lsrs	r3, r3, #16
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcd6:	0a1b      	lsrs	r3, r3, #8
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcec:	0d1b      	lsrs	r3, r3, #20
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf8:	0c1b      	lsrs	r3, r3, #16
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 030f 	and.w	r3, r3, #15
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd0a:	0bdb      	lsrs	r3, r3, #15
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd1c:	0b9b      	lsrs	r3, r3, #14
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd2e:	0b5b      	lsrs	r3, r3, #13
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd40:	0b1b      	lsrs	r3, r3, #12
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2200      	movs	r2, #0
 800dd52:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d163      	bne.n	800de24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd60:	009a      	lsls	r2, r3, #2
 800dd62:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dd66:	4013      	ands	r3, r2
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800dd6c:	0f92      	lsrs	r2, r2, #30
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd78:	0edb      	lsrs	r3, r3, #27
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f003 0307 	and.w	r3, r3, #7
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd8a:	0e1b      	lsrs	r3, r3, #24
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd9c:	0d5b      	lsrs	r3, r3, #21
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddae:	0c9b      	lsrs	r3, r3, #18
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	f003 0307 	and.w	r3, r3, #7
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddc0:	0bdb      	lsrs	r3, r3, #15
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 0307 	and.w	r3, r3, #7
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	7e1b      	ldrb	r3, [r3, #24]
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	3302      	adds	r3, #2
 800dde4:	2201      	movs	r2, #1
 800dde6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ddee:	fb03 f202 	mul.w	r2, r3, r2
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	7a1b      	ldrb	r3, [r3, #8]
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	f003 030f 	and.w	r3, r3, #15
 800de00:	2201      	movs	r2, #1
 800de02:	409a      	lsls	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800de10:	0a52      	lsrs	r2, r2, #9
 800de12:	fb03 f202 	mul.w	r2, r3, r2
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de20:	655a      	str	r2, [r3, #84]	; 0x54
 800de22:	e031      	b.n	800de88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d11d      	bne.n	800de68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de30:	041b      	lsls	r3, r3, #16
 800de32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de3a:	0c1b      	lsrs	r3, r3, #16
 800de3c:	431a      	orrs	r2, r3
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	3301      	adds	r3, #1
 800de48:	029a      	lsls	r2, r3, #10
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	655a      	str	r2, [r3, #84]	; 0x54
 800de66:	e00f      	b.n	800de88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a58      	ldr	r2, [pc, #352]	; (800dfd0 <HAL_SD_GetCardCSD+0x344>)
 800de6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e09d      	b.n	800dfc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8c:	0b9b      	lsrs	r3, r3, #14
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	b2da      	uxtb	r2, r3
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de9e:	09db      	lsrs	r3, r3, #7
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec0:	0fdb      	lsrs	r3, r3, #31
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800decc:	0f5b      	lsrs	r3, r3, #29
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dede:	0e9b      	lsrs	r3, r3, #26
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def0:	0d9b      	lsrs	r3, r3, #22
 800def2:	b2db      	uxtb	r3, r3
 800def4:	f003 030f 	and.w	r3, r3, #15
 800def8:	b2da      	uxtb	r2, r3
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df02:	0d5b      	lsrs	r3, r3, #21
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	2200      	movs	r2, #0
 800df16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df1e:	0c1b      	lsrs	r3, r3, #16
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	b2da      	uxtb	r2, r3
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df32:	0bdb      	lsrs	r3, r3, #15
 800df34:	b2db      	uxtb	r3, r3
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df46:	0b9b      	lsrs	r3, r3, #14
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	f003 0301 	and.w	r3, r3, #1
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df5a:	0b5b      	lsrs	r3, r3, #13
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	b2da      	uxtb	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df6e:	0b1b      	lsrs	r3, r3, #12
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	b2da      	uxtb	r2, r3
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df82:	0a9b      	lsrs	r3, r3, #10
 800df84:	b2db      	uxtb	r3, r3
 800df86:	f003 0303 	and.w	r3, r3, #3
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df96:	0a1b      	lsrs	r3, r3, #8
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	f003 0303 	and.w	r3, r3, #3
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfaa:	085b      	lsrs	r3, r3, #1
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	1fe00fff 	.word	0x1fe00fff

0800dfd4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b094      	sub	sp, #80	; 0x50
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d101      	bne.n	800dff4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	e0a7      	b.n	800e144 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dff4:	f107 0308 	add.w	r3, r7, #8
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fb62 	bl	800e6c4 <SD_SendSDStatus>
 800e000:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e004:	2b00      	cmp	r3, #0
 800e006:	d011      	beq.n	800e02c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a4f      	ldr	r2, [pc, #316]	; (800e14c <HAL_SD_GetCardStatus+0x178>)
 800e00e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e016:	431a      	orrs	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e02a:	e070      	b.n	800e10e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	099b      	lsrs	r3, r3, #6
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 0303 	and.w	r3, r3, #3
 800e036:	b2da      	uxtb	r2, r3
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	095b      	lsrs	r3, r3, #5
 800e040:	b2db      	uxtb	r3, r3
 800e042:	f003 0301 	and.w	r3, r3, #1
 800e046:	b2da      	uxtb	r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	0a1b      	lsrs	r3, r3, #8
 800e050:	b29b      	uxth	r3, r3
 800e052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e056:	b29a      	uxth	r2, r3
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	0e1b      	lsrs	r3, r3, #24
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	4313      	orrs	r3, r2
 800e060:	b29a      	uxth	r2, r3
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	061a      	lsls	r2, r3, #24
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	021b      	lsls	r3, r3, #8
 800e06e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e072:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	0a1b      	lsrs	r3, r3, #8
 800e078:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e07c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	0e1b      	lsrs	r3, r3, #24
 800e082:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	0a1b      	lsrs	r3, r3, #8
 800e094:	b2da      	uxtb	r2, r3
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	0d1b      	lsrs	r3, r3, #20
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	f003 030f 	and.w	r3, r3, #15
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	0c1b      	lsrs	r3, r3, #16
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	0a9b      	lsrs	r3, r3, #10
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	0a1b      	lsrs	r3, r3, #8
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 0303 	and.w	r3, r3, #3
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	091b      	lsrs	r3, r3, #4
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 030f 	and.w	r3, r3, #15
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	f003 030f 	and.w	r3, r3, #15
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	0e1b      	lsrs	r3, r3, #24
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e116:	4618      	mov	r0, r3
 800e118:	f004 f98a 	bl	8012430 <SDMMC_CmdBlockLength>
 800e11c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e11e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00d      	beq.n	800e140 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a08      	ldr	r2, [pc, #32]	; (800e14c <HAL_SD_GetCardStatus+0x178>)
 800e12a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e130:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e140:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e144:	4618      	mov	r0, r3
 800e146:	3750      	adds	r7, #80	; 0x50
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	1fe00fff 	.word	0x1fe00fff

0800e150 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e1a8:	b590      	push	{r4, r7, lr}
 800e1aa:	b08d      	sub	sp, #52	; 0x34
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2203      	movs	r2, #3
 800e1bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	d02e      	beq.n	800e226 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1ce:	d106      	bne.n	800e1de <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	635a      	str	r2, [r3, #52]	; 0x34
 800e1dc:	e029      	b.n	800e232 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1e4:	d10a      	bne.n	800e1fc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 fb64 	bl	800e8b4 <SD_WideBus_Enable>
 800e1ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	635a      	str	r2, [r3, #52]	; 0x34
 800e1fa:	e01a      	b.n	800e232 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10a      	bne.n	800e218 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fba1 	bl	800e94a <SD_WideBus_Disable>
 800e208:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	431a      	orrs	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	635a      	str	r2, [r3, #52]	; 0x34
 800e216:	e00c      	b.n	800e232 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	635a      	str	r2, [r3, #52]	; 0x34
 800e224:	e005      	b.n	800e232 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e236:	2b00      	cmp	r3, #0
 800e238:	d007      	beq.n	800e24a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a5f      	ldr	r2, [pc, #380]	; (800e3bc <HAL_SD_ConfigWideBusOperation+0x214>)
 800e240:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e248:	e096      	b.n	800e378 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e24a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e24e:	f04f 0100 	mov.w	r1, #0
 800e252:	f7fd fea3 	bl	800bf9c <HAL_RCCEx_GetPeriphCLKFreq>
 800e256:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 8083 	beq.w	800e366 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	691b      	ldr	r3, [r3, #16]
 800e274:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	695a      	ldr	r2, [r3, #20]
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	4950      	ldr	r1, [pc, #320]	; (800e3c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e27e:	fba1 1303 	umull	r1, r3, r1, r3
 800e282:	0e1b      	lsrs	r3, r3, #24
 800e284:	429a      	cmp	r2, r3
 800e286:	d303      	bcc.n	800e290 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	61bb      	str	r3, [r7, #24]
 800e28e:	e05a      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e298:	d103      	bne.n	800e2a2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	61bb      	str	r3, [r7, #24]
 800e2a0:	e051      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2aa:	d126      	bne.n	800e2fa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10e      	bne.n	800e2d2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	4a43      	ldr	r2, [pc, #268]	; (800e3c4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d906      	bls.n	800e2ca <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	4a40      	ldr	r2, [pc, #256]	; (800e3c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2c4:	0e5b      	lsrs	r3, r3, #25
 800e2c6:	61bb      	str	r3, [r7, #24]
 800e2c8:	e03d      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	61bb      	str	r3, [r7, #24]
 800e2d0:	e039      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2de:	4a39      	ldr	r2, [pc, #228]	; (800e3c4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d906      	bls.n	800e2f2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	4a36      	ldr	r2, [pc, #216]	; (800e3c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ec:	0e5b      	lsrs	r3, r3, #25
 800e2ee:	61bb      	str	r3, [r7, #24]
 800e2f0:	e029      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	695b      	ldr	r3, [r3, #20]
 800e2f6:	61bb      	str	r3, [r7, #24]
 800e2f8:	e025      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10e      	bne.n	800e320 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	4a30      	ldr	r2, [pc, #192]	; (800e3c8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d906      	bls.n	800e318 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	4a2c      	ldr	r2, [pc, #176]	; (800e3c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e30e:	fba2 2303 	umull	r2, r3, r2, r3
 800e312:	0e1b      	lsrs	r3, r3, #24
 800e314:	61bb      	str	r3, [r7, #24]
 800e316:	e016      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	695b      	ldr	r3, [r3, #20]
 800e31c:	61bb      	str	r3, [r7, #24]
 800e31e:	e012      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	69fa      	ldr	r2, [r7, #28]
 800e328:	fbb2 f3f3 	udiv	r3, r2, r3
 800e32c:	4a26      	ldr	r2, [pc, #152]	; (800e3c8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d906      	bls.n	800e340 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	4a22      	ldr	r2, [pc, #136]	; (800e3c0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e336:	fba2 2303 	umull	r2, r3, r2, r3
 800e33a:	0e1b      	lsrs	r3, r3, #24
 800e33c:	61bb      	str	r3, [r7, #24]
 800e33e:	e002      	b.n	800e346 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681c      	ldr	r4, [r3, #0]
 800e34a:	466a      	mov	r2, sp
 800e34c:	f107 0314 	add.w	r3, r7, #20
 800e350:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e354:	e882 0003 	stmia.w	r2, {r0, r1}
 800e358:	f107 0308 	add.w	r3, r7, #8
 800e35c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e35e:	4620      	mov	r0, r4
 800e360:	f003 ff88 	bl	8012274 <SDMMC_Init>
 800e364:	e008      	b.n	800e378 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e372:	2301      	movs	r3, #1
 800e374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e380:	4618      	mov	r0, r3
 800e382:	f004 f855 	bl	8012430 <SDMMC_CmdBlockLength>
 800e386:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e388:	6a3b      	ldr	r3, [r7, #32]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00c      	beq.n	800e3a8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <HAL_SD_ConfigWideBusOperation+0x214>)
 800e394:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e39a:	6a3b      	ldr	r3, [r7, #32]
 800e39c:	431a      	orrs	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	372c      	adds	r7, #44	; 0x2c
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd90      	pop	{r4, r7, pc}
 800e3bc:	1fe00fff 	.word	0x1fe00fff
 800e3c0:	55e63b89 	.word	0x55e63b89
 800e3c4:	02faf080 	.word	0x02faf080
 800e3c8:	017d7840 	.word	0x017d7840

0800e3cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e3d8:	f107 030c 	add.w	r3, r7, #12
 800e3dc:	4619      	mov	r1, r3
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fa40 	bl	800e864 <SD_SendStatus>
 800e3e4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d005      	beq.n	800e3f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	431a      	orrs	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	0a5b      	lsrs	r3, r3, #9
 800e3fc:	f003 030f 	and.w	r3, r3, #15
 800e400:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e402:	693b      	ldr	r3, [r7, #16]
}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b090      	sub	sp, #64	; 0x40
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e418:	f7f5 fd4c 	bl	8003eb4 <HAL_GetTick>
 800e41c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f003 ff7f 	bl	8012326 <SDMMC_GetPowerState>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e42e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e432:	e0b5      	b.n	800e5a0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d02e      	beq.n	800e49a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4618      	mov	r0, r3
 800e442:	f004 f9ca 	bl	80127da <SDMMC_CmdSendCID>
 800e446:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <SD_InitCard+0x46>
    {
      return errorstate;
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	e0a6      	b.n	800e5a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2100      	movs	r1, #0
 800e458:	4618      	mov	r0, r3
 800e45a:	f003 ffaa 	bl	80123b2 <SDMMC_GetResponse>
 800e45e:	4602      	mov	r2, r0
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2104      	movs	r1, #4
 800e46a:	4618      	mov	r0, r3
 800e46c:	f003 ffa1 	bl	80123b2 <SDMMC_GetResponse>
 800e470:	4602      	mov	r2, r0
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2108      	movs	r1, #8
 800e47c:	4618      	mov	r0, r3
 800e47e:	f003 ff98 	bl	80123b2 <SDMMC_GetResponse>
 800e482:	4602      	mov	r2, r0
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	210c      	movs	r1, #12
 800e48e:	4618      	mov	r0, r3
 800e490:	f003 ff8f 	bl	80123b2 <SDMMC_GetResponse>
 800e494:	4602      	mov	r2, r0
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	2b03      	cmp	r3, #3
 800e4a0:	d01d      	beq.n	800e4de <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e4a2:	e019      	b.n	800e4d8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f107 020a 	add.w	r2, r7, #10
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f004 f9d2 	bl	8012858 <SDMMC_CmdSetRelAdd>
 800e4b4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4be:	e06f      	b.n	800e5a0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e4c0:	f7f5 fcf8 	bl	8003eb4 <HAL_GetTick>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	f241 3287 	movw	r2, #4999	; 0x1387
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d902      	bls.n	800e4d8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e4d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4d6:	e063      	b.n	800e5a0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e4d8:	897b      	ldrh	r3, [r7, #10]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0e2      	beq.n	800e4a4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d036      	beq.n	800e554 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e4e6:	897b      	ldrh	r3, [r7, #10]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f6:	041b      	lsls	r3, r3, #16
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	f004 f98c 	bl	8012818 <SDMMC_CmdSendCSD>
 800e500:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	2b00      	cmp	r3, #0
 800e506:	d001      	beq.n	800e50c <SD_InitCard+0x100>
    {
      return errorstate;
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	e049      	b.n	800e5a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2100      	movs	r1, #0
 800e512:	4618      	mov	r0, r3
 800e514:	f003 ff4d 	bl	80123b2 <SDMMC_GetResponse>
 800e518:	4602      	mov	r2, r0
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2104      	movs	r1, #4
 800e524:	4618      	mov	r0, r3
 800e526:	f003 ff44 	bl	80123b2 <SDMMC_GetResponse>
 800e52a:	4602      	mov	r2, r0
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2108      	movs	r1, #8
 800e536:	4618      	mov	r0, r3
 800e538:	f003 ff3b 	bl	80123b2 <SDMMC_GetResponse>
 800e53c:	4602      	mov	r2, r0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	210c      	movs	r1, #12
 800e548:	4618      	mov	r0, r3
 800e54a:	f003 ff32 	bl	80123b2 <SDMMC_GetResponse>
 800e54e:	4602      	mov	r2, r0
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2104      	movs	r1, #4
 800e55a:	4618      	mov	r0, r3
 800e55c:	f003 ff29 	bl	80123b2 <SDMMC_GetResponse>
 800e560:	4603      	mov	r3, r0
 800e562:	0d1a      	lsrs	r2, r3, #20
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e568:	f107 030c 	add.w	r3, r7, #12
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fb8c 	bl	800dc8c <HAL_SD_GetCardCSD>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d002      	beq.n	800e580 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e57a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e57e:	e00f      	b.n	800e5a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e588:	041b      	lsls	r3, r3, #16
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f004 f83b 	bl	8012608 <SDMMC_CmdSelDesel>
 800e592:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <SD_InitCard+0x192>
  {
    return errorstate;
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	e000      	b.n	800e5a0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3740      	adds	r7, #64	; 0x40
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f004 f844 	bl	801264e <SDMMC_CmdGoIdleState>
 800e5c6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d001      	beq.n	800e5d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	e072      	b.n	800e6b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f004 f857 	bl	801268a <SDMMC_CmdOperCond>
 800e5dc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5e4:	d10d      	bne.n	800e602 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f004 f82c 	bl	801264e <SDMMC_CmdGoIdleState>
 800e5f6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <SD_PowerON+0x60>
    {
      return errorstate;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	e05a      	b.n	800e6b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d137      	bne.n	800e680 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2100      	movs	r1, #0
 800e616:	4618      	mov	r0, r3
 800e618:	f004 f857 	bl	80126ca <SDMMC_CmdAppCommand>
 800e61c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d02d      	beq.n	800e680 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e628:	e046      	b.n	800e6b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2100      	movs	r1, #0
 800e630:	4618      	mov	r0, r3
 800e632:	f004 f84a 	bl	80126ca <SDMMC_CmdAppCommand>
 800e636:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	e03a      	b.n	800e6b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	491e      	ldr	r1, [pc, #120]	; (800e6c0 <SD_PowerON+0x118>)
 800e648:	4618      	mov	r0, r3
 800e64a:	f004 f861 	bl	8012710 <SDMMC_CmdAppOperCommand>
 800e64e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d002      	beq.n	800e65c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e65a:	e02d      	b.n	800e6b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2100      	movs	r1, #0
 800e662:	4618      	mov	r0, r3
 800e664:	f003 fea5 	bl	80123b2 <SDMMC_GetResponse>
 800e668:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	0fdb      	lsrs	r3, r3, #31
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d101      	bne.n	800e676 <SD_PowerON+0xce>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <SD_PowerON+0xd0>
 800e676:	2300      	movs	r3, #0
 800e678:	613b      	str	r3, [r7, #16]

    count++;
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	3301      	adds	r3, #1
 800e67e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e686:	4293      	cmp	r3, r2
 800e688:	d802      	bhi.n	800e690 <SD_PowerON+0xe8>
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d0cc      	beq.n	800e62a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e696:	4293      	cmp	r3, r2
 800e698:	d902      	bls.n	800e6a0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e69a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e69e:	e00b      	b.n	800e6b8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3718      	adds	r7, #24
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	c1100000 	.word	0xc1100000

0800e6c4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b08c      	sub	sp, #48	; 0x30
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6ce:	f7f5 fbf1 	bl	8003eb4 <HAL_GetTick>
 800e6d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2100      	movs	r1, #0
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f003 fe67 	bl	80123b2 <SDMMC_GetResponse>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6ee:	d102      	bne.n	800e6f6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6f4:	e0b0      	b.n	800e858 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2140      	movs	r1, #64	; 0x40
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f003 fe97 	bl	8012430 <SDMMC_CmdBlockLength>
 800e702:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d005      	beq.n	800e716 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	e0a0      	b.n	800e858 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e71e:	041b      	lsls	r3, r3, #16
 800e720:	4619      	mov	r1, r3
 800e722:	4610      	mov	r0, r2
 800e724:	f003 ffd1 	bl	80126ca <SDMMC_CmdAppCommand>
 800e728:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e72a:	6a3b      	ldr	r3, [r7, #32]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d005      	beq.n	800e73c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e738:	6a3b      	ldr	r3, [r7, #32]
 800e73a:	e08d      	b.n	800e858 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e73c:	f04f 33ff 	mov.w	r3, #4294967295
 800e740:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e742:	2340      	movs	r3, #64	; 0x40
 800e744:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e746:	2360      	movs	r3, #96	; 0x60
 800e748:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e74a:	2302      	movs	r3, #2
 800e74c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e74e:	2300      	movs	r3, #0
 800e750:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e752:	2301      	movs	r3, #1
 800e754:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f107 0208 	add.w	r2, r7, #8
 800e75e:	4611      	mov	r1, r2
 800e760:	4618      	mov	r0, r3
 800e762:	f003 fe39 	bl	80123d8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f004 f8b9 	bl	80128e2 <SDMMC_CmdStatusRegister>
 800e770:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d02b      	beq.n	800e7d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	e069      	b.n	800e858 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e78a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d013      	beq.n	800e7ba <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e792:	2300      	movs	r3, #0
 800e794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e796:	e00d      	b.n	800e7b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f003 fd93 	bl	80122c8 <SDMMC_ReadFIFO>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	601a      	str	r2, [r3, #0]
        pData++;
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b6:	2b07      	cmp	r3, #7
 800e7b8:	d9ee      	bls.n	800e798 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7ba:	f7f5 fb7b 	bl	8003eb4 <HAL_GetTick>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c8:	d102      	bne.n	800e7d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e7ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7ce:	e043      	b.n	800e858 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d0d2      	beq.n	800e784 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e4:	f003 0308 	and.w	r3, r3, #8
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d001      	beq.n	800e7f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	e033      	b.n	800e858 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f6:	f003 0302 	and.w	r3, r3, #2
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d001      	beq.n	800e802 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7fe:	2302      	movs	r3, #2
 800e800:	e02a      	b.n	800e858 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e808:	f003 0320 	and.w	r3, r3, #32
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d017      	beq.n	800e840 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e810:	2320      	movs	r3, #32
 800e812:	e021      	b.n	800e858 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4618      	mov	r0, r3
 800e81a:	f003 fd55 	bl	80122c8 <SDMMC_ReadFIFO>
 800e81e:	4602      	mov	r2, r0
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	601a      	str	r2, [r3, #0]
    pData++;
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	3304      	adds	r3, #4
 800e828:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e82a:	f7f5 fb43 	bl	8003eb4 <HAL_GetTick>
 800e82e:	4602      	mov	r2, r0
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e838:	d102      	bne.n	800e840 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e83a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e83e:	e00b      	b.n	800e858 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1e2      	bne.n	800e814 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a03      	ldr	r2, [pc, #12]	; (800e860 <SD_SendSDStatus+0x19c>)
 800e854:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e856:	2300      	movs	r3, #0
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3730      	adds	r7, #48	; 0x30
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	18000f3a 	.word	0x18000f3a

0800e864 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d102      	bne.n	800e87a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e878:	e018      	b.n	800e8ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e882:	041b      	lsls	r3, r3, #16
 800e884:	4619      	mov	r1, r3
 800e886:	4610      	mov	r0, r2
 800e888:	f004 f808 	bl	801289c <SDMMC_CmdSendStatus>
 800e88c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	e009      	b.n	800e8ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2100      	movs	r1, #0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f003 fd87 	bl	80123b2 <SDMMC_GetResponse>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e8bc:	2300      	movs	r3, #0
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f003 fd71 	bl	80123b2 <SDMMC_GetResponse>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8da:	d102      	bne.n	800e8e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8e0:	e02f      	b.n	800e942 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e8e2:	f107 030c 	add.w	r3, r7, #12
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f879 	bl	800e9e0 <SD_FindSCR>
 800e8ee:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	e023      	b.n	800e942 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d01c      	beq.n	800e93e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e90c:	041b      	lsls	r3, r3, #16
 800e90e:	4619      	mov	r1, r3
 800e910:	4610      	mov	r0, r2
 800e912:	f003 feda 	bl	80126ca <SDMMC_CmdAppCommand>
 800e916:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d001      	beq.n	800e922 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	e00f      	b.n	800e942 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2102      	movs	r1, #2
 800e928:	4618      	mov	r0, r3
 800e92a:	f003 ff11 	bl	8012750 <SDMMC_CmdBusWidth>
 800e92e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	e003      	b.n	800e942 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e93a:	2300      	movs	r3, #0
 800e93c:	e001      	b.n	800e942 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e93e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b086      	sub	sp, #24
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e952:	2300      	movs	r3, #0
 800e954:	60fb      	str	r3, [r7, #12]
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2100      	movs	r1, #0
 800e960:	4618      	mov	r0, r3
 800e962:	f003 fd26 	bl	80123b2 <SDMMC_GetResponse>
 800e966:	4603      	mov	r3, r0
 800e968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e96c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e970:	d102      	bne.n	800e978 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e976:	e02f      	b.n	800e9d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e978:	f107 030c 	add.w	r3, r7, #12
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 f82e 	bl	800e9e0 <SD_FindSCR>
 800e984:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	e023      	b.n	800e9d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e996:	2b00      	cmp	r3, #0
 800e998:	d01c      	beq.n	800e9d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9a2:	041b      	lsls	r3, r3, #16
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	f003 fe8f 	bl	80126ca <SDMMC_CmdAppCommand>
 800e9ac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	e00f      	b.n	800e9d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2100      	movs	r1, #0
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f003 fec6 	bl	8012750 <SDMMC_CmdBusWidth>
 800e9c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	e003      	b.n	800e9d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	e001      	b.n	800e9d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e9d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3718      	adds	r7, #24
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08e      	sub	sp, #56	; 0x38
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e9ea:	f7f5 fa63 	bl	8003eb4 <HAL_GetTick>
 800e9ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	60bb      	str	r3, [r7, #8]
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2108      	movs	r1, #8
 800ea06:	4618      	mov	r0, r3
 800ea08:	f003 fd12 	bl	8012430 <SDMMC_CmdBlockLength>
 800ea0c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	e0ad      	b.n	800eb74 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea20:	041b      	lsls	r3, r3, #16
 800ea22:	4619      	mov	r1, r3
 800ea24:	4610      	mov	r0, r2
 800ea26:	f003 fe50 	bl	80126ca <SDMMC_CmdAppCommand>
 800ea2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	e09e      	b.n	800eb74 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ea36:	f04f 33ff 	mov.w	r3, #4294967295
 800ea3a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ea3c:	2308      	movs	r3, #8
 800ea3e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ea40:	2330      	movs	r3, #48	; 0x30
 800ea42:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ea44:	2302      	movs	r3, #2
 800ea46:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f107 0210 	add.w	r2, r7, #16
 800ea58:	4611      	mov	r1, r2
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f003 fcbc 	bl	80123d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f003 fe96 	bl	8012796 <SDMMC_CmdSendSCR>
 800ea6a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d027      	beq.n	800eac2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	e07e      	b.n	800eb74 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d113      	bne.n	800eaac <SD_FindSCR+0xcc>
 800ea84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d110      	bne.n	800eaac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f003 fc1a 	bl	80122c8 <SDMMC_ReadFIFO>
 800ea94:	4603      	mov	r3, r0
 800ea96:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f003 fc13 	bl	80122c8 <SDMMC_ReadFIFO>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	60fb      	str	r3, [r7, #12]
      index++;
 800eaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eaac:	f7f5 fa02 	bl	8003eb4 <HAL_GetTick>
 800eab0:	4602      	mov	r2, r0
 800eab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaba:	d102      	bne.n	800eac2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eabc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eac0:	e058      	b.n	800eb74 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eac8:	f240 532a 	movw	r3, #1322	; 0x52a
 800eacc:	4013      	ands	r3, r2
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d0d1      	beq.n	800ea76 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead8:	f003 0308 	and.w	r3, r3, #8
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d005      	beq.n	800eaec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2208      	movs	r2, #8
 800eae6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eae8:	2308      	movs	r3, #8
 800eaea:	e043      	b.n	800eb74 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf2:	f003 0302 	and.w	r3, r3, #2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d005      	beq.n	800eb06 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2202      	movs	r2, #2
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eb02:	2302      	movs	r3, #2
 800eb04:	e036      	b.n	800eb74 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb0c:	f003 0320 	and.w	r3, r3, #32
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d005      	beq.n	800eb20 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2220      	movs	r2, #32
 800eb1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eb1c:	2320      	movs	r3, #32
 800eb1e:	e029      	b.n	800eb74 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a15      	ldr	r2, [pc, #84]	; (800eb7c <SD_FindSCR+0x19c>)
 800eb26:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	061a      	lsls	r2, r3, #24
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	021b      	lsls	r3, r3, #8
 800eb30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	0a1b      	lsrs	r3, r3, #8
 800eb3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	0e1b      	lsrs	r3, r3, #24
 800eb44:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	601a      	str	r2, [r3, #0]
    scr++;
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	061a      	lsls	r2, r3, #24
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	021b      	lsls	r3, r3, #8
 800eb58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	0a1b      	lsrs	r3, r3, #8
 800eb62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	0e1b      	lsrs	r3, r3, #24
 800eb6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb70:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3738      	adds	r7, #56	; 0x38
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	18000f3a 	.word	0x18000f3a

0800eb80 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb92:	2b1f      	cmp	r3, #31
 800eb94:	d936      	bls.n	800ec04 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]
 800eb9a:	e027      	b.n	800ebec <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f003 fb91 	bl	80122c8 <SDMMC_ReadFIFO>
 800eba6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	0a1b      	lsrs	r3, r3, #8
 800ebba:	b2da      	uxtb	r2, r3
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	0c1b      	lsrs	r3, r3, #16
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	0e1b      	lsrs	r3, r3, #24
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2b07      	cmp	r3, #7
 800ebf0:	d9d4      	bls.n	800eb9c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	693a      	ldr	r2, [r7, #16]
 800ebf6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfc:	f1a3 0220 	sub.w	r2, r3, #32
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ec04:	bf00      	nop
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	69db      	ldr	r3, [r3, #28]
 800ec18:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	2b1f      	cmp	r3, #31
 800ec20:	d93a      	bls.n	800ec98 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ec22:	2300      	movs	r3, #0
 800ec24:	617b      	str	r3, [r7, #20]
 800ec26:	e02b      	b.n	800ec80 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	3301      	adds	r3, #1
 800ec32:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	021a      	lsls	r2, r3, #8
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	3301      	adds	r3, #1
 800ec44:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	041a      	lsls	r2, r3, #16
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	3301      	adds	r3, #1
 800ec56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	061a      	lsls	r2, r3, #24
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	3301      	adds	r3, #1
 800ec68:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f107 020c 	add.w	r2, r7, #12
 800ec72:	4611      	mov	r1, r2
 800ec74:	4618      	mov	r0, r3
 800ec76:	f003 fb34 	bl	80122e2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	617b      	str	r3, [r7, #20]
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b07      	cmp	r3, #7
 800ec84:	d9d0      	bls.n	800ec28 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a1b      	ldr	r3, [r3, #32]
 800ec90:	f1a3 0220 	sub.w	r2, r3, #32
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	621a      	str	r2, [r3, #32]
  }
}
 800ec98:	bf00      	nop
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eca8:	bf00      	nop
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ecbc:	bf00      	nop
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e10f      	b.n	800ef22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a87      	ldr	r2, [pc, #540]	; (800ef2c <HAL_SPI_Init+0x23c>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d00f      	beq.n	800ed32 <HAL_SPI_Init+0x42>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4a86      	ldr	r2, [pc, #536]	; (800ef30 <HAL_SPI_Init+0x240>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d00a      	beq.n	800ed32 <HAL_SPI_Init+0x42>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a84      	ldr	r2, [pc, #528]	; (800ef34 <HAL_SPI_Init+0x244>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d005      	beq.n	800ed32 <HAL_SPI_Init+0x42>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	2b0f      	cmp	r3, #15
 800ed2c:	d901      	bls.n	800ed32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e0f7      	b.n	800ef22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 fd5a 	bl	800f7ec <SPI_GetPacketSize>
 800ed38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a7b      	ldr	r2, [pc, #492]	; (800ef2c <HAL_SPI_Init+0x23c>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d00c      	beq.n	800ed5e <HAL_SPI_Init+0x6e>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4a79      	ldr	r2, [pc, #484]	; (800ef30 <HAL_SPI_Init+0x240>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d007      	beq.n	800ed5e <HAL_SPI_Init+0x6e>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a78      	ldr	r2, [pc, #480]	; (800ef34 <HAL_SPI_Init+0x244>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d002      	beq.n	800ed5e <HAL_SPI_Init+0x6e>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b08      	cmp	r3, #8
 800ed5c:	d811      	bhi.n	800ed82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed62:	4a72      	ldr	r2, [pc, #456]	; (800ef2c <HAL_SPI_Init+0x23c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d009      	beq.n	800ed7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a70      	ldr	r2, [pc, #448]	; (800ef30 <HAL_SPI_Init+0x240>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d004      	beq.n	800ed7c <HAL_SPI_Init+0x8c>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4a6f      	ldr	r2, [pc, #444]	; (800ef34 <HAL_SPI_Init+0x244>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d104      	bne.n	800ed86 <HAL_SPI_Init+0x96>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b10      	cmp	r3, #16
 800ed80:	d901      	bls.n	800ed86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e0cd      	b.n	800ef22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d106      	bne.n	800eda0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7f4 fa3e 	bl	800321c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2202      	movs	r2, #2
 800eda4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f022 0201 	bic.w	r2, r2, #1
 800edb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800edc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	699b      	ldr	r3, [r3, #24]
 800edc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800edcc:	d119      	bne.n	800ee02 <HAL_SPI_Init+0x112>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800edd6:	d103      	bne.n	800ede0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d008      	beq.n	800edf2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10c      	bne.n	800ee02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800edec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edf0:	d107      	bne.n	800ee02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ee00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00f      	beq.n	800ee2e <HAL_SPI_Init+0x13e>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	2b06      	cmp	r3, #6
 800ee14:	d90b      	bls.n	800ee2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	e007      	b.n	800ee3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	69da      	ldr	r2, [r3, #28]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee46:	431a      	orrs	r2, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	431a      	orrs	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee50:	ea42 0103 	orr.w	r1, r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	430a      	orrs	r2, r1
 800ee5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee68:	431a      	orrs	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6e:	431a      	orrs	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	431a      	orrs	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	695b      	ldr	r3, [r3, #20]
 800ee80:	431a      	orrs	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	431a      	orrs	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	431a      	orrs	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee92:	431a      	orrs	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	689b      	ldr	r3, [r3, #8]
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee9e:	ea42 0103 	orr.w	r1, r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d113      	bne.n	800eede <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eec8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eedc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f022 0201 	bic.w	r2, r2, #1
 800eeec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00a      	beq.n	800ef10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	430a      	orrs	r2, r1
 800ef0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	40013000 	.word	0x40013000
 800ef30:	40003800 	.word	0x40003800
 800ef34:	40003c00 	.word	0x40003c00

0800ef38 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08a      	sub	sp, #40	; 0x28
 800ef3c:	af02      	add	r7, sp, #8
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	603b      	str	r3, [r7, #0]
 800ef44:	4613      	mov	r3, r2
 800ef46:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	3320      	adds	r3, #32
 800ef4e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <HAL_SPI_Transmit+0x2a>
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e1e1      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef6a:	f7f4 ffa3 	bl	8003eb4 <HAL_GetTick>
 800ef6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d007      	beq.n	800ef8c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef88:	7efb      	ldrb	r3, [r7, #27]
 800ef8a:	e1cc      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <HAL_SPI_Transmit+0x60>
 800ef92:	88fb      	ldrh	r3, [r7, #6]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d107      	bne.n	800efa8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efa4:	7efb      	ldrb	r3, [r7, #27]
 800efa6:	e1be      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2203      	movs	r2, #3
 800efac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	88fa      	ldrh	r2, [r7, #6]
 800efc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	88fa      	ldrh	r2, [r7, #6]
 800efca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2200      	movs	r2, #0
 800efe8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2200      	movs	r2, #0
 800efee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eff8:	d108      	bne.n	800f00c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	e009      	b.n	800f020 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f01e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	4b96      	ldr	r3, [pc, #600]	; (800f280 <HAL_SPI_Transmit+0x348>)
 800f028:	4013      	ands	r3, r2
 800f02a:	88f9      	ldrh	r1, [r7, #6]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	430b      	orrs	r3, r1
 800f032:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f042 0201 	orr.w	r2, r2, #1
 800f042:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f04c:	d107      	bne.n	800f05e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f05c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	68db      	ldr	r3, [r3, #12]
 800f062:	2b0f      	cmp	r3, #15
 800f064:	d947      	bls.n	800f0f6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f066:	e03f      	b.n	800f0e8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	695b      	ldr	r3, [r3, #20]
 800f06e:	f003 0302 	and.w	r3, r3, #2
 800f072:	2b02      	cmp	r3, #2
 800f074:	d114      	bne.n	800f0a0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	6812      	ldr	r2, [r2, #0]
 800f080:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f086:	1d1a      	adds	r2, r3, #4
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f092:	b29b      	uxth	r3, r3
 800f094:	3b01      	subs	r3, #1
 800f096:	b29a      	uxth	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f09e:	e023      	b.n	800f0e8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0a0:	f7f4 ff08 	bl	8003eb4 <HAL_GetTick>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d803      	bhi.n	800f0b8 <HAL_SPI_Transmit+0x180>
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b6:	d102      	bne.n	800f0be <HAL_SPI_Transmit+0x186>
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d114      	bne.n	800f0e8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f000 fac6 	bl	800f650 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e11e      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1b9      	bne.n	800f068 <HAL_SPI_Transmit+0x130>
 800f0f4:	e0f1      	b.n	800f2da <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	2b07      	cmp	r3, #7
 800f0fc:	f240 80e6 	bls.w	800f2cc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f100:	e05d      	b.n	800f1be <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	695b      	ldr	r3, [r3, #20]
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d132      	bne.n	800f176 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f116:	b29b      	uxth	r3, r3
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d918      	bls.n	800f14e <HAL_SPI_Transmit+0x216>
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f120:	2b00      	cmp	r3, #0
 800f122:	d014      	beq.n	800f14e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6812      	ldr	r2, [r2, #0]
 800f12e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f134:	1d1a      	adds	r2, r3, #4
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f140:	b29b      	uxth	r3, r3
 800f142:	3b02      	subs	r3, #2
 800f144:	b29a      	uxth	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f14c:	e037      	b.n	800f1be <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f152:	881a      	ldrh	r2, [r3, #0]
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f15c:	1c9a      	adds	r2, r3, #2
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f168:	b29b      	uxth	r3, r3
 800f16a:	3b01      	subs	r3, #1
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f174:	e023      	b.n	800f1be <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f176:	f7f4 fe9d 	bl	8003eb4 <HAL_GetTick>
 800f17a:	4602      	mov	r2, r0
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	429a      	cmp	r2, r3
 800f184:	d803      	bhi.n	800f18e <HAL_SPI_Transmit+0x256>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18c:	d102      	bne.n	800f194 <HAL_SPI_Transmit+0x25c>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d114      	bne.n	800f1be <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f000 fa5b 	bl	800f650 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2200      	movs	r2, #0
 800f19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	e0b3      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d19b      	bne.n	800f102 <HAL_SPI_Transmit+0x1ca>
 800f1ca:	e086      	b.n	800f2da <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	695b      	ldr	r3, [r3, #20]
 800f1d2:	f003 0302 	and.w	r3, r3, #2
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d154      	bne.n	800f284 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	2b03      	cmp	r3, #3
 800f1e4:	d918      	bls.n	800f218 <HAL_SPI_Transmit+0x2e0>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ea:	2b40      	cmp	r3, #64	; 0x40
 800f1ec:	d914      	bls.n	800f218 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1fe:	1d1a      	adds	r2, r3, #4
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	3b04      	subs	r3, #4
 800f20e:	b29a      	uxth	r2, r3
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f216:	e059      	b.n	800f2cc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f21e:	b29b      	uxth	r3, r3
 800f220:	2b01      	cmp	r3, #1
 800f222:	d917      	bls.n	800f254 <HAL_SPI_Transmit+0x31c>
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d013      	beq.n	800f254 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f230:	881a      	ldrh	r2, [r3, #0]
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f23a:	1c9a      	adds	r2, r3, #2
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f246:	b29b      	uxth	r3, r3
 800f248:	3b02      	subs	r3, #2
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f252:	e03b      	b.n	800f2cc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3320      	adds	r3, #32
 800f25e:	7812      	ldrb	r2, [r2, #0]
 800f260:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f266:	1c5a      	adds	r2, r3, #1
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f272:	b29b      	uxth	r3, r3
 800f274:	3b01      	subs	r3, #1
 800f276:	b29a      	uxth	r2, r3
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f27e:	e025      	b.n	800f2cc <HAL_SPI_Transmit+0x394>
 800f280:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f284:	f7f4 fe16 	bl	8003eb4 <HAL_GetTick>
 800f288:	4602      	mov	r2, r0
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	429a      	cmp	r2, r3
 800f292:	d803      	bhi.n	800f29c <HAL_SPI_Transmit+0x364>
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d102      	bne.n	800f2a2 <HAL_SPI_Transmit+0x36a>
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d114      	bne.n	800f2cc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f000 f9d4 	bl	800f650 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	e02c      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f47f af79 	bne.w	800f1cc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2108      	movs	r1, #8
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f000 fa53 	bl	800f790 <SPI_WaitOnFlagUntilTimeout>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d007      	beq.n	800f300 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f6:	f043 0220 	orr.w	r2, r3, #32
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	f000 f9a5 	bl	800f650 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d001      	beq.n	800f324 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	e000      	b.n	800f326 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f324:	7efb      	ldrb	r3, [r7, #27]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3720      	adds	r7, #32
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop

0800f330 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b088      	sub	sp, #32
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	603b      	str	r3, [r7, #0]
 800f33c:	4613      	mov	r3, r2
 800f33e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f340:	2300      	movs	r3, #0
 800f342:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	3330      	adds	r3, #48	; 0x30
 800f34a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f352:	2b01      	cmp	r3, #1
 800f354:	d101      	bne.n	800f35a <HAL_SPI_Receive+0x2a>
 800f356:	2302      	movs	r3, #2
 800f358:	e173      	b.n	800f642 <HAL_SPI_Receive+0x312>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2201      	movs	r2, #1
 800f35e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f362:	f7f4 fda7 	bl	8003eb4 <HAL_GetTick>
 800f366:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b01      	cmp	r3, #1
 800f372:	d007      	beq.n	800f384 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f374:	2302      	movs	r3, #2
 800f376:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f380:	7ffb      	ldrb	r3, [r7, #31]
 800f382:	e15e      	b.n	800f642 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d002      	beq.n	800f390 <HAL_SPI_Receive+0x60>
 800f38a:	88fb      	ldrh	r3, [r7, #6]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d107      	bne.n	800f3a0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f39c:	7ffb      	ldrb	r3, [r7, #31]
 800f39e:	e150      	b.n	800f642 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2204      	movs	r2, #4
 800f3a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	88fa      	ldrh	r2, [r7, #6]
 800f3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	88fa      	ldrh	r2, [r7, #6]
 800f3c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f3f0:	d108      	bne.n	800f404 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	e009      	b.n	800f418 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f416:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	685a      	ldr	r2, [r3, #4]
 800f41e:	4b8b      	ldr	r3, [pc, #556]	; (800f64c <HAL_SPI_Receive+0x31c>)
 800f420:	4013      	ands	r3, r2
 800f422:	88f9      	ldrh	r1, [r7, #6]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	6812      	ldr	r2, [r2, #0]
 800f428:	430b      	orrs	r3, r1
 800f42a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f042 0201 	orr.w	r2, r2, #1
 800f43a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f444:	d107      	bne.n	800f456 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f454:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	2b0f      	cmp	r3, #15
 800f45c:	d948      	bls.n	800f4f0 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f45e:	e040      	b.n	800f4e2 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	695a      	ldr	r2, [r3, #20]
 800f466:	f248 0308 	movw	r3, #32776	; 0x8008
 800f46a:	4013      	ands	r3, r2
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d014      	beq.n	800f49a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f478:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f47a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f480:	1d1a      	adds	r2, r3, #4
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	3b01      	subs	r3, #1
 800f490:	b29a      	uxth	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f498:	e023      	b.n	800f4e2 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f49a:	f7f4 fd0b 	bl	8003eb4 <HAL_GetTick>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d803      	bhi.n	800f4b2 <HAL_SPI_Receive+0x182>
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b0:	d102      	bne.n	800f4b8 <HAL_SPI_Receive+0x188>
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d114      	bne.n	800f4e2 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f000 f8c9 	bl	800f650 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2201      	movs	r2, #1
 800f4da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f4de:	2303      	movs	r3, #3
 800f4e0:	e0af      	b.n	800f642 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1b8      	bne.n	800f460 <HAL_SPI_Receive+0x130>
 800f4ee:	e095      	b.n	800f61c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	2b07      	cmp	r3, #7
 800f4f6:	f240 808b 	bls.w	800f610 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f4fa:	e03f      	b.n	800f57c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	2b01      	cmp	r3, #1
 800f508:	d114      	bne.n	800f534 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f50e:	69ba      	ldr	r2, [r7, #24]
 800f510:	8812      	ldrh	r2, [r2, #0]
 800f512:	b292      	uxth	r2, r2
 800f514:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f51a:	1c9a      	adds	r2, r3, #2
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f526:	b29b      	uxth	r3, r3
 800f528:	3b01      	subs	r3, #1
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f532:	e023      	b.n	800f57c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f534:	f7f4 fcbe 	bl	8003eb4 <HAL_GetTick>
 800f538:	4602      	mov	r2, r0
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	683a      	ldr	r2, [r7, #0]
 800f540:	429a      	cmp	r2, r3
 800f542:	d803      	bhi.n	800f54c <HAL_SPI_Receive+0x21c>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54a:	d102      	bne.n	800f552 <HAL_SPI_Receive+0x222>
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d114      	bne.n	800f57c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f000 f87c 	bl	800f650 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f578:	2303      	movs	r3, #3
 800f57a:	e062      	b.n	800f642 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f582:	b29b      	uxth	r3, r3
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1b9      	bne.n	800f4fc <HAL_SPI_Receive+0x1cc>
 800f588:	e048      	b.n	800f61c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	695b      	ldr	r3, [r3, #20]
 800f590:	f003 0301 	and.w	r3, r3, #1
 800f594:	2b01      	cmp	r3, #1
 800f596:	d117      	bne.n	800f5c8 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5a4:	7812      	ldrb	r2, [r2, #0]
 800f5a6:	b2d2      	uxtb	r2, r2
 800f5a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5c6:	e023      	b.n	800f610 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5c8:	f7f4 fc74 	bl	8003eb4 <HAL_GetTick>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d803      	bhi.n	800f5e0 <HAL_SPI_Receive+0x2b0>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5de:	d102      	bne.n	800f5e6 <HAL_SPI_Receive+0x2b6>
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d114      	bne.n	800f610 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f000 f832 	bl	800f650 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f60c:	2303      	movs	r3, #3
 800f60e:	e018      	b.n	800f642 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f616:	b29b      	uxth	r3, r3
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1b6      	bne.n	800f58a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f000 f817 	bl	800f650 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2200      	movs	r2, #0
 800f626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2201      	movs	r2, #1
 800f62e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f63c:	2301      	movs	r3, #1
 800f63e:	e000      	b.n	800f642 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f640:	7ffb      	ldrb	r3, [r7, #31]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3720      	adds	r7, #32
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	ffff0000 	.word	0xffff0000

0800f650 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	695b      	ldr	r3, [r3, #20]
 800f65e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	699a      	ldr	r2, [r3, #24]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f042 0208 	orr.w	r2, r2, #8
 800f66e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	699a      	ldr	r2, [r3, #24]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f042 0210 	orr.w	r2, r2, #16
 800f67e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f022 0201 	bic.w	r2, r2, #1
 800f68e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6919      	ldr	r1, [r3, #16]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	4b3c      	ldr	r3, [pc, #240]	; (800f78c <SPI_CloseTransfer+0x13c>)
 800f69c:	400b      	ands	r3, r1
 800f69e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	689a      	ldr	r2, [r3, #8]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f6ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	2b04      	cmp	r3, #4
 800f6ba:	d014      	beq.n	800f6e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f003 0320 	and.w	r3, r3, #32
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00f      	beq.n	800f6e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	699a      	ldr	r2, [r3, #24]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f042 0220 	orr.w	r2, r2, #32
 800f6e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	d014      	beq.n	800f71c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00f      	beq.n	800f71c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f702:	f043 0204 	orr.w	r2, r3, #4
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	699a      	ldr	r2, [r3, #24]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f71a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00f      	beq.n	800f746 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f72c:	f043 0201 	orr.w	r2, r3, #1
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	699a      	ldr	r2, [r3, #24]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f744:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00f      	beq.n	800f770 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f756:	f043 0208 	orr.w	r2, r3, #8
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	699a      	ldr	r2, [r3, #24]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f76e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f780:	bf00      	nop
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	fffffc90 	.word	0xfffffc90

0800f790 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	603b      	str	r3, [r7, #0]
 800f79c:	4613      	mov	r3, r2
 800f79e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f7a0:	e010      	b.n	800f7c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7a2:	f7f4 fb87 	bl	8003eb4 <HAL_GetTick>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	683a      	ldr	r2, [r7, #0]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d803      	bhi.n	800f7ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b8:	d102      	bne.n	800f7c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d101      	bne.n	800f7c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	e00f      	b.n	800f7e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	695a      	ldr	r2, [r3, #20]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	4013      	ands	r3, r2
 800f7ce:	68ba      	ldr	r2, [r7, #8]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	bf0c      	ite	eq
 800f7d4:	2301      	moveq	r3, #1
 800f7d6:	2300      	movne	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	461a      	mov	r2, r3
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d0df      	beq.n	800f7a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3710      	adds	r7, #16
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7f8:	095b      	lsrs	r3, r3, #5
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	3301      	adds	r3, #1
 800f804:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	3307      	adds	r3, #7
 800f80a:	08db      	lsrs	r3, r3, #3
 800f80c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	fb02 f303 	mul.w	r3, r2, r3
}
 800f816:	4618      	mov	r0, r3
 800f818:	3714      	adds	r7, #20
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr

0800f822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b082      	sub	sp, #8
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d101      	bne.n	800f834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	e049      	b.n	800f8c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d106      	bne.n	800f84e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2200      	movs	r2, #0
 800f844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7f3 fda3 	bl	8003394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2202      	movs	r2, #2
 800f852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	f000 fed1 	bl	8010608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2201      	movs	r2, #1
 800f86a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2201      	movs	r2, #1
 800f872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2201      	movs	r2, #1
 800f882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2201      	movs	r2, #1
 800f88a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2201      	movs	r2, #1
 800f892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2201      	movs	r2, #1
 800f89a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d109      	bne.n	800f8f4 <HAL_TIM_PWM_Start+0x24>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	bf14      	ite	ne
 800f8ec:	2301      	movne	r3, #1
 800f8ee:	2300      	moveq	r3, #0
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	e03c      	b.n	800f96e <HAL_TIM_PWM_Start+0x9e>
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	2b04      	cmp	r3, #4
 800f8f8:	d109      	bne.n	800f90e <HAL_TIM_PWM_Start+0x3e>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b01      	cmp	r3, #1
 800f904:	bf14      	ite	ne
 800f906:	2301      	movne	r3, #1
 800f908:	2300      	moveq	r3, #0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	e02f      	b.n	800f96e <HAL_TIM_PWM_Start+0x9e>
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	2b08      	cmp	r3, #8
 800f912:	d109      	bne.n	800f928 <HAL_TIM_PWM_Start+0x58>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	bf14      	ite	ne
 800f920:	2301      	movne	r3, #1
 800f922:	2300      	moveq	r3, #0
 800f924:	b2db      	uxtb	r3, r3
 800f926:	e022      	b.n	800f96e <HAL_TIM_PWM_Start+0x9e>
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	2b0c      	cmp	r3, #12
 800f92c:	d109      	bne.n	800f942 <HAL_TIM_PWM_Start+0x72>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b01      	cmp	r3, #1
 800f938:	bf14      	ite	ne
 800f93a:	2301      	movne	r3, #1
 800f93c:	2300      	moveq	r3, #0
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	e015      	b.n	800f96e <HAL_TIM_PWM_Start+0x9e>
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	2b10      	cmp	r3, #16
 800f946:	d109      	bne.n	800f95c <HAL_TIM_PWM_Start+0x8c>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b01      	cmp	r3, #1
 800f952:	bf14      	ite	ne
 800f954:	2301      	movne	r3, #1
 800f956:	2300      	moveq	r3, #0
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	e008      	b.n	800f96e <HAL_TIM_PWM_Start+0x9e>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b01      	cmp	r3, #1
 800f966:	bf14      	ite	ne
 800f968:	2301      	movne	r3, #1
 800f96a:	2300      	moveq	r3, #0
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d001      	beq.n	800f976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f972:	2301      	movs	r3, #1
 800f974:	e0ab      	b.n	800face <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d104      	bne.n	800f986 <HAL_TIM_PWM_Start+0xb6>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f984:	e023      	b.n	800f9ce <HAL_TIM_PWM_Start+0xfe>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	2b04      	cmp	r3, #4
 800f98a:	d104      	bne.n	800f996 <HAL_TIM_PWM_Start+0xc6>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2202      	movs	r2, #2
 800f990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f994:	e01b      	b.n	800f9ce <HAL_TIM_PWM_Start+0xfe>
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	2b08      	cmp	r3, #8
 800f99a:	d104      	bne.n	800f9a6 <HAL_TIM_PWM_Start+0xd6>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2202      	movs	r2, #2
 800f9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9a4:	e013      	b.n	800f9ce <HAL_TIM_PWM_Start+0xfe>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b0c      	cmp	r3, #12
 800f9aa:	d104      	bne.n	800f9b6 <HAL_TIM_PWM_Start+0xe6>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2202      	movs	r2, #2
 800f9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9b4:	e00b      	b.n	800f9ce <HAL_TIM_PWM_Start+0xfe>
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2b10      	cmp	r3, #16
 800f9ba:	d104      	bne.n	800f9c6 <HAL_TIM_PWM_Start+0xf6>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2202      	movs	r2, #2
 800f9c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9c4:	e003      	b.n	800f9ce <HAL_TIM_PWM_Start+0xfe>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2202      	movs	r2, #2
 800f9ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	6839      	ldr	r1, [r7, #0]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 f992 	bl	8010d00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a3d      	ldr	r2, [pc, #244]	; (800fad8 <HAL_TIM_PWM_Start+0x208>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d013      	beq.n	800fa0e <HAL_TIM_PWM_Start+0x13e>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a3c      	ldr	r2, [pc, #240]	; (800fadc <HAL_TIM_PWM_Start+0x20c>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d00e      	beq.n	800fa0e <HAL_TIM_PWM_Start+0x13e>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a3a      	ldr	r2, [pc, #232]	; (800fae0 <HAL_TIM_PWM_Start+0x210>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d009      	beq.n	800fa0e <HAL_TIM_PWM_Start+0x13e>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4a39      	ldr	r2, [pc, #228]	; (800fae4 <HAL_TIM_PWM_Start+0x214>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d004      	beq.n	800fa0e <HAL_TIM_PWM_Start+0x13e>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a37      	ldr	r2, [pc, #220]	; (800fae8 <HAL_TIM_PWM_Start+0x218>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d101      	bne.n	800fa12 <HAL_TIM_PWM_Start+0x142>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e000      	b.n	800fa14 <HAL_TIM_PWM_Start+0x144>
 800fa12:	2300      	movs	r3, #0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d007      	beq.n	800fa28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a2a      	ldr	r2, [pc, #168]	; (800fad8 <HAL_TIM_PWM_Start+0x208>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d02c      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa3a:	d027      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a2a      	ldr	r2, [pc, #168]	; (800faec <HAL_TIM_PWM_Start+0x21c>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d022      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4a29      	ldr	r2, [pc, #164]	; (800faf0 <HAL_TIM_PWM_Start+0x220>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d01d      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a27      	ldr	r2, [pc, #156]	; (800faf4 <HAL_TIM_PWM_Start+0x224>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d018      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a1f      	ldr	r2, [pc, #124]	; (800fadc <HAL_TIM_PWM_Start+0x20c>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d013      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a23      	ldr	r2, [pc, #140]	; (800faf8 <HAL_TIM_PWM_Start+0x228>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d00e      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a1b      	ldr	r2, [pc, #108]	; (800fae0 <HAL_TIM_PWM_Start+0x210>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d009      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a1f      	ldr	r2, [pc, #124]	; (800fafc <HAL_TIM_PWM_Start+0x22c>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d004      	beq.n	800fa8c <HAL_TIM_PWM_Start+0x1bc>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a1e      	ldr	r2, [pc, #120]	; (800fb00 <HAL_TIM_PWM_Start+0x230>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d115      	bne.n	800fab8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	4b1c      	ldr	r3, [pc, #112]	; (800fb04 <HAL_TIM_PWM_Start+0x234>)
 800fa94:	4013      	ands	r3, r2
 800fa96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b06      	cmp	r3, #6
 800fa9c:	d015      	beq.n	800faca <HAL_TIM_PWM_Start+0x1fa>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faa4:	d011      	beq.n	800faca <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f042 0201 	orr.w	r2, r2, #1
 800fab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fab6:	e008      	b.n	800faca <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f042 0201 	orr.w	r2, r2, #1
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	e000      	b.n	800facc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	40010000 	.word	0x40010000
 800fadc:	40010400 	.word	0x40010400
 800fae0:	40014000 	.word	0x40014000
 800fae4:	40014400 	.word	0x40014400
 800fae8:	40014800 	.word	0x40014800
 800faec:	40000400 	.word	0x40000400
 800faf0:	40000800 	.word	0x40000800
 800faf4:	40000c00 	.word	0x40000c00
 800faf8:	40001800 	.word	0x40001800
 800fafc:	4000e000 	.word	0x4000e000
 800fb00:	4000e400 	.word	0x4000e400
 800fb04:	00010007 	.word	0x00010007

0800fb08 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b086      	sub	sp, #24
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
 800fb14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d109      	bne.n	800fb34 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	bf0c      	ite	eq
 800fb2c:	2301      	moveq	r3, #1
 800fb2e:	2300      	movne	r3, #0
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	e03c      	b.n	800fbae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b04      	cmp	r3, #4
 800fb38:	d109      	bne.n	800fb4e <HAL_TIM_PWM_Start_DMA+0x46>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	bf0c      	ite	eq
 800fb46:	2301      	moveq	r3, #1
 800fb48:	2300      	movne	r3, #0
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	e02f      	b.n	800fbae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	2b08      	cmp	r3, #8
 800fb52:	d109      	bne.n	800fb68 <HAL_TIM_PWM_Start_DMA+0x60>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	2b02      	cmp	r3, #2
 800fb5e:	bf0c      	ite	eq
 800fb60:	2301      	moveq	r3, #1
 800fb62:	2300      	movne	r3, #0
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	e022      	b.n	800fbae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	2b0c      	cmp	r3, #12
 800fb6c:	d109      	bne.n	800fb82 <HAL_TIM_PWM_Start_DMA+0x7a>
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	bf0c      	ite	eq
 800fb7a:	2301      	moveq	r3, #1
 800fb7c:	2300      	movne	r3, #0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	e015      	b.n	800fbae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	2b10      	cmp	r3, #16
 800fb86:	d109      	bne.n	800fb9c <HAL_TIM_PWM_Start_DMA+0x94>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb8e:	b2db      	uxtb	r3, r3
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	bf0c      	ite	eq
 800fb94:	2301      	moveq	r3, #1
 800fb96:	2300      	movne	r3, #0
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	e008      	b.n	800fbae <HAL_TIM_PWM_Start_DMA+0xa6>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	bf0c      	ite	eq
 800fba8:	2301      	moveq	r3, #1
 800fbaa:	2300      	movne	r3, #0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	e1ba      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d109      	bne.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	bf0c      	ite	eq
 800fbc8:	2301      	moveq	r3, #1
 800fbca:	2300      	movne	r3, #0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	e03c      	b.n	800fc4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	2b04      	cmp	r3, #4
 800fbd4:	d109      	bne.n	800fbea <HAL_TIM_PWM_Start_DMA+0xe2>
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	bf0c      	ite	eq
 800fbe2:	2301      	moveq	r3, #1
 800fbe4:	2300      	movne	r3, #0
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	e02f      	b.n	800fc4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	2b08      	cmp	r3, #8
 800fbee:	d109      	bne.n	800fc04 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	bf0c      	ite	eq
 800fbfc:	2301      	moveq	r3, #1
 800fbfe:	2300      	movne	r3, #0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	e022      	b.n	800fc4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	2b0c      	cmp	r3, #12
 800fc08:	d109      	bne.n	800fc1e <HAL_TIM_PWM_Start_DMA+0x116>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	bf0c      	ite	eq
 800fc16:	2301      	moveq	r3, #1
 800fc18:	2300      	movne	r3, #0
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	e015      	b.n	800fc4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b10      	cmp	r3, #16
 800fc22:	d109      	bne.n	800fc38 <HAL_TIM_PWM_Start_DMA+0x130>
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	bf0c      	ite	eq
 800fc30:	2301      	moveq	r3, #1
 800fc32:	2300      	movne	r3, #0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	e008      	b.n	800fc4a <HAL_TIM_PWM_Start_DMA+0x142>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	bf0c      	ite	eq
 800fc44:	2301      	moveq	r3, #1
 800fc46:	2300      	movne	r3, #0
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d034      	beq.n	800fcb8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d002      	beq.n	800fc5a <HAL_TIM_PWM_Start_DMA+0x152>
 800fc54:	887b      	ldrh	r3, [r7, #2]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e166      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d104      	bne.n	800fc6e <HAL_TIM_PWM_Start_DMA+0x166>
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2202      	movs	r2, #2
 800fc68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc6c:	e026      	b.n	800fcbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	2b04      	cmp	r3, #4
 800fc72:	d104      	bne.n	800fc7e <HAL_TIM_PWM_Start_DMA+0x176>
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2202      	movs	r2, #2
 800fc78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc7c:	e01e      	b.n	800fcbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2b08      	cmp	r3, #8
 800fc82:	d104      	bne.n	800fc8e <HAL_TIM_PWM_Start_DMA+0x186>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2202      	movs	r2, #2
 800fc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc8c:	e016      	b.n	800fcbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	2b0c      	cmp	r3, #12
 800fc92:	d104      	bne.n	800fc9e <HAL_TIM_PWM_Start_DMA+0x196>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2202      	movs	r2, #2
 800fc98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc9c:	e00e      	b.n	800fcbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2b10      	cmp	r3, #16
 800fca2:	d104      	bne.n	800fcae <HAL_TIM_PWM_Start_DMA+0x1a6>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2202      	movs	r2, #2
 800fca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcac:	e006      	b.n	800fcbc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2202      	movs	r2, #2
 800fcb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fcb6:	e001      	b.n	800fcbc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	e137      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2b0c      	cmp	r3, #12
 800fcc0:	f200 80ae 	bhi.w	800fe20 <HAL_TIM_PWM_Start_DMA+0x318>
 800fcc4:	a201      	add	r2, pc, #4	; (adr r2, 800fccc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800fcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcca:	bf00      	nop
 800fccc:	0800fd01 	.word	0x0800fd01
 800fcd0:	0800fe21 	.word	0x0800fe21
 800fcd4:	0800fe21 	.word	0x0800fe21
 800fcd8:	0800fe21 	.word	0x0800fe21
 800fcdc:	0800fd49 	.word	0x0800fd49
 800fce0:	0800fe21 	.word	0x0800fe21
 800fce4:	0800fe21 	.word	0x0800fe21
 800fce8:	0800fe21 	.word	0x0800fe21
 800fcec:	0800fd91 	.word	0x0800fd91
 800fcf0:	0800fe21 	.word	0x0800fe21
 800fcf4:	0800fe21 	.word	0x0800fe21
 800fcf8:	0800fe21 	.word	0x0800fe21
 800fcfc:	0800fdd9 	.word	0x0800fdd9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd04:	4a8b      	ldr	r2, [pc, #556]	; (800ff34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fd06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0c:	4a8a      	ldr	r2, [pc, #552]	; (800ff38 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd14:	4a89      	ldr	r2, [pc, #548]	; (800ff3c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fd16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3334      	adds	r3, #52	; 0x34
 800fd24:	461a      	mov	r2, r3
 800fd26:	887b      	ldrh	r3, [r7, #2]
 800fd28:	f7f6 f8e4 	bl	8005ef4 <HAL_DMA_Start_IT>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	e0fa      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	68da      	ldr	r2, [r3, #12]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd44:	60da      	str	r2, [r3, #12]
      break;
 800fd46:	e06e      	b.n	800fe26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4c:	4a79      	ldr	r2, [pc, #484]	; (800ff34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fd4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd54:	4a78      	ldr	r2, [pc, #480]	; (800ff38 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5c:	4a77      	ldr	r2, [pc, #476]	; (800ff3c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fd5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3338      	adds	r3, #56	; 0x38
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	887b      	ldrh	r3, [r7, #2]
 800fd70:	f7f6 f8c0 	bl	8005ef4 <HAL_DMA_Start_IT>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d001      	beq.n	800fd7e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e0d6      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68da      	ldr	r2, [r3, #12]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd8c:	60da      	str	r2, [r3, #12]
      break;
 800fd8e:	e04a      	b.n	800fe26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd94:	4a67      	ldr	r2, [pc, #412]	; (800ff34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fd96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd9c:	4a66      	ldr	r2, [pc, #408]	; (800ff38 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fd9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda4:	4a65      	ldr	r2, [pc, #404]	; (800ff3c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fda6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fdac:	6879      	ldr	r1, [r7, #4]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	333c      	adds	r3, #60	; 0x3c
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	887b      	ldrh	r3, [r7, #2]
 800fdb8:	f7f6 f89c 	bl	8005ef4 <HAL_DMA_Start_IT>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e0b2      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68da      	ldr	r2, [r3, #12]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdd4:	60da      	str	r2, [r3, #12]
      break;
 800fdd6:	e026      	b.n	800fe26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fddc:	4a55      	ldr	r2, [pc, #340]	; (800ff34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fdde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fde4:	4a54      	ldr	r2, [pc, #336]	; (800ff38 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fde6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdec:	4a53      	ldr	r2, [pc, #332]	; (800ff3c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fdee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fdf4:	6879      	ldr	r1, [r7, #4]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	3340      	adds	r3, #64	; 0x40
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	887b      	ldrh	r3, [r7, #2]
 800fe00:	f7f6 f878 	bl	8005ef4 <HAL_DMA_Start_IT>
 800fe04:	4603      	mov	r3, r0
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e08e      	b.n	800ff2c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	68da      	ldr	r2, [r3, #12]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe1c:	60da      	str	r2, [r3, #12]
      break;
 800fe1e:	e002      	b.n	800fe26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fe20:	2301      	movs	r3, #1
 800fe22:	75fb      	strb	r3, [r7, #23]
      break;
 800fe24:	bf00      	nop
  }

  if (status == HAL_OK)
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d17e      	bne.n	800ff2a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2201      	movs	r2, #1
 800fe32:	68b9      	ldr	r1, [r7, #8]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 ff63 	bl	8010d00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4a40      	ldr	r2, [pc, #256]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d013      	beq.n	800fe6c <HAL_TIM_PWM_Start_DMA+0x364>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	4a3e      	ldr	r2, [pc, #248]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d00e      	beq.n	800fe6c <HAL_TIM_PWM_Start_DMA+0x364>
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4a3d      	ldr	r2, [pc, #244]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d009      	beq.n	800fe6c <HAL_TIM_PWM_Start_DMA+0x364>
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a3b      	ldr	r2, [pc, #236]	; (800ff4c <HAL_TIM_PWM_Start_DMA+0x444>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d004      	beq.n	800fe6c <HAL_TIM_PWM_Start_DMA+0x364>
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a3a      	ldr	r2, [pc, #232]	; (800ff50 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d101      	bne.n	800fe70 <HAL_TIM_PWM_Start_DMA+0x368>
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e000      	b.n	800fe72 <HAL_TIM_PWM_Start_DMA+0x36a>
 800fe70:	2300      	movs	r3, #0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d007      	beq.n	800fe86 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fe84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4a2d      	ldr	r2, [pc, #180]	; (800ff40 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d02c      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe98:	d027      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a2d      	ldr	r2, [pc, #180]	; (800ff54 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d022      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a2b      	ldr	r2, [pc, #172]	; (800ff58 <HAL_TIM_PWM_Start_DMA+0x450>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d01d      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4a2a      	ldr	r2, [pc, #168]	; (800ff5c <HAL_TIM_PWM_Start_DMA+0x454>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d018      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a21      	ldr	r2, [pc, #132]	; (800ff44 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d013      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a26      	ldr	r2, [pc, #152]	; (800ff60 <HAL_TIM_PWM_Start_DMA+0x458>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d00e      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a1d      	ldr	r2, [pc, #116]	; (800ff48 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d009      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a22      	ldr	r2, [pc, #136]	; (800ff64 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d004      	beq.n	800feea <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4a20      	ldr	r2, [pc, #128]	; (800ff68 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d115      	bne.n	800ff16 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	689a      	ldr	r2, [r3, #8]
 800fef0:	4b1e      	ldr	r3, [pc, #120]	; (800ff6c <HAL_TIM_PWM_Start_DMA+0x464>)
 800fef2:	4013      	ands	r3, r2
 800fef4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b06      	cmp	r3, #6
 800fefa:	d015      	beq.n	800ff28 <HAL_TIM_PWM_Start_DMA+0x420>
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff02:	d011      	beq.n	800ff28 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f042 0201 	orr.w	r2, r2, #1
 800ff12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff14:	e008      	b.n	800ff28 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f042 0201 	orr.w	r2, r2, #1
 800ff24:	601a      	str	r2, [r3, #0]
 800ff26:	e000      	b.n	800ff2a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff28:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ff2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3718      	adds	r7, #24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	080104f7 	.word	0x080104f7
 800ff38:	0801059f 	.word	0x0801059f
 800ff3c:	08010465 	.word	0x08010465
 800ff40:	40010000 	.word	0x40010000
 800ff44:	40010400 	.word	0x40010400
 800ff48:	40014000 	.word	0x40014000
 800ff4c:	40014400 	.word	0x40014400
 800ff50:	40014800 	.word	0x40014800
 800ff54:	40000400 	.word	0x40000400
 800ff58:	40000800 	.word	0x40000800
 800ff5c:	40000c00 	.word	0x40000c00
 800ff60:	40001800 	.word	0x40001800
 800ff64:	4000e000 	.word	0x4000e000
 800ff68:	4000e400 	.word	0x4000e400
 800ff6c:	00010007 	.word	0x00010007

0800ff70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	f003 0302 	and.w	r3, r3, #2
 800ff82:	2b02      	cmp	r3, #2
 800ff84:	d122      	bne.n	800ffcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	f003 0302 	and.w	r3, r3, #2
 800ff90:	2b02      	cmp	r3, #2
 800ff92:	d11b      	bne.n	800ffcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f06f 0202 	mvn.w	r2, #2
 800ff9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	f003 0303 	and.w	r3, r3, #3
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d003      	beq.n	800ffba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fa24 	bl	8010400 <HAL_TIM_IC_CaptureCallback>
 800ffb8:	e005      	b.n	800ffc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fa16 	bl	80103ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 fa27 	bl	8010414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	691b      	ldr	r3, [r3, #16]
 800ffd2:	f003 0304 	and.w	r3, r3, #4
 800ffd6:	2b04      	cmp	r3, #4
 800ffd8:	d122      	bne.n	8010020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	f003 0304 	and.w	r3, r3, #4
 800ffe4:	2b04      	cmp	r3, #4
 800ffe6:	d11b      	bne.n	8010020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f06f 0204 	mvn.w	r2, #4
 800fff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2202      	movs	r2, #2
 800fff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	699b      	ldr	r3, [r3, #24]
 800fffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f9fa 	bl	8010400 <HAL_TIM_IC_CaptureCallback>
 801000c:	e005      	b.n	801001a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 f9ec 	bl	80103ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 f9fd 	bl	8010414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	f003 0308 	and.w	r3, r3, #8
 801002a:	2b08      	cmp	r3, #8
 801002c:	d122      	bne.n	8010074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	f003 0308 	and.w	r3, r3, #8
 8010038:	2b08      	cmp	r3, #8
 801003a:	d11b      	bne.n	8010074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f06f 0208 	mvn.w	r2, #8
 8010044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2204      	movs	r2, #4
 801004a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	69db      	ldr	r3, [r3, #28]
 8010052:	f003 0303 	and.w	r3, r3, #3
 8010056:	2b00      	cmp	r3, #0
 8010058:	d003      	beq.n	8010062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 f9d0 	bl	8010400 <HAL_TIM_IC_CaptureCallback>
 8010060:	e005      	b.n	801006e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f9c2 	bl	80103ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f9d3 	bl	8010414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	f003 0310 	and.w	r3, r3, #16
 801007e:	2b10      	cmp	r3, #16
 8010080:	d122      	bne.n	80100c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	f003 0310 	and.w	r3, r3, #16
 801008c:	2b10      	cmp	r3, #16
 801008e:	d11b      	bne.n	80100c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f06f 0210 	mvn.w	r2, #16
 8010098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2208      	movs	r2, #8
 801009e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	69db      	ldr	r3, [r3, #28]
 80100a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d003      	beq.n	80100b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f9a6 	bl	8010400 <HAL_TIM_IC_CaptureCallback>
 80100b4:	e005      	b.n	80100c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 f998 	bl	80103ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 f9a9 	bl	8010414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d10e      	bne.n	80100f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	f003 0301 	and.w	r3, r3, #1
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d107      	bne.n	80100f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f06f 0201 	mvn.w	r2, #1
 80100ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f972 	bl	80103d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100fe:	2b80      	cmp	r3, #128	; 0x80
 8010100:	d10e      	bne.n	8010120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801010c:	2b80      	cmp	r3, #128	; 0x80
 801010e:	d107      	bne.n	8010120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 febc 	bl	8010e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801012a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801012e:	d10e      	bne.n	801014e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801013a:	2b80      	cmp	r3, #128	; 0x80
 801013c:	d107      	bne.n	801014e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 feaf 	bl	8010eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010158:	2b40      	cmp	r3, #64	; 0x40
 801015a:	d10e      	bne.n	801017a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010166:	2b40      	cmp	r3, #64	; 0x40
 8010168:	d107      	bne.n	801017a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 f961 	bl	801043c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	f003 0320 	and.w	r3, r3, #32
 8010184:	2b20      	cmp	r3, #32
 8010186:	d10e      	bne.n	80101a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	f003 0320 	and.w	r3, r3, #32
 8010192:	2b20      	cmp	r3, #32
 8010194:	d107      	bne.n	80101a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f06f 0220 	mvn.w	r2, #32
 801019e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fe6f 	bl	8010e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80101a6:	bf00      	nop
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
	...

080101b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d101      	bne.n	80101ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80101ca:	2302      	movs	r3, #2
 80101cc:	e0ff      	b.n	80103ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2201      	movs	r2, #1
 80101d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b14      	cmp	r3, #20
 80101da:	f200 80f0 	bhi.w	80103be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80101de:	a201      	add	r2, pc, #4	; (adr r2, 80101e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80101e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e4:	08010239 	.word	0x08010239
 80101e8:	080103bf 	.word	0x080103bf
 80101ec:	080103bf 	.word	0x080103bf
 80101f0:	080103bf 	.word	0x080103bf
 80101f4:	08010279 	.word	0x08010279
 80101f8:	080103bf 	.word	0x080103bf
 80101fc:	080103bf 	.word	0x080103bf
 8010200:	080103bf 	.word	0x080103bf
 8010204:	080102bb 	.word	0x080102bb
 8010208:	080103bf 	.word	0x080103bf
 801020c:	080103bf 	.word	0x080103bf
 8010210:	080103bf 	.word	0x080103bf
 8010214:	080102fb 	.word	0x080102fb
 8010218:	080103bf 	.word	0x080103bf
 801021c:	080103bf 	.word	0x080103bf
 8010220:	080103bf 	.word	0x080103bf
 8010224:	0801033d 	.word	0x0801033d
 8010228:	080103bf 	.word	0x080103bf
 801022c:	080103bf 	.word	0x080103bf
 8010230:	080103bf 	.word	0x080103bf
 8010234:	0801037d 	.word	0x0801037d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	68b9      	ldr	r1, [r7, #8]
 801023e:	4618      	mov	r0, r3
 8010240:	f000 fa88 	bl	8010754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	699a      	ldr	r2, [r3, #24]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f042 0208 	orr.w	r2, r2, #8
 8010252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	699a      	ldr	r2, [r3, #24]
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f022 0204 	bic.w	r2, r2, #4
 8010262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	6999      	ldr	r1, [r3, #24]
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	691a      	ldr	r2, [r3, #16]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	430a      	orrs	r2, r1
 8010274:	619a      	str	r2, [r3, #24]
      break;
 8010276:	e0a5      	b.n	80103c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	68b9      	ldr	r1, [r7, #8]
 801027e:	4618      	mov	r0, r3
 8010280:	f000 faf8 	bl	8010874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	699a      	ldr	r2, [r3, #24]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	699a      	ldr	r2, [r3, #24]
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80102a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6999      	ldr	r1, [r3, #24]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	691b      	ldr	r3, [r3, #16]
 80102ae:	021a      	lsls	r2, r3, #8
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	430a      	orrs	r2, r1
 80102b6:	619a      	str	r2, [r3, #24]
      break;
 80102b8:	e084      	b.n	80103c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	68b9      	ldr	r1, [r7, #8]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 fb61 	bl	8010988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	69da      	ldr	r2, [r3, #28]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f042 0208 	orr.w	r2, r2, #8
 80102d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	69da      	ldr	r2, [r3, #28]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f022 0204 	bic.w	r2, r2, #4
 80102e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	69d9      	ldr	r1, [r3, #28]
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	691a      	ldr	r2, [r3, #16]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	430a      	orrs	r2, r1
 80102f6:	61da      	str	r2, [r3, #28]
      break;
 80102f8:	e064      	b.n	80103c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	4618      	mov	r0, r3
 8010302:	f000 fbc9 	bl	8010a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	69da      	ldr	r2, [r3, #28]
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	69da      	ldr	r2, [r3, #28]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	69d9      	ldr	r1, [r3, #28]
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	021a      	lsls	r2, r3, #8
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	430a      	orrs	r2, r1
 8010338:	61da      	str	r2, [r3, #28]
      break;
 801033a:	e043      	b.n	80103c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	68b9      	ldr	r1, [r7, #8]
 8010342:	4618      	mov	r0, r3
 8010344:	f000 fc12 	bl	8010b6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f042 0208 	orr.w	r2, r2, #8
 8010356:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f022 0204 	bic.w	r2, r2, #4
 8010366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	691a      	ldr	r2, [r3, #16]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	430a      	orrs	r2, r1
 8010378:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801037a:	e023      	b.n	80103c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	68b9      	ldr	r1, [r7, #8]
 8010382:	4618      	mov	r0, r3
 8010384:	f000 fc56 	bl	8010c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	691b      	ldr	r3, [r3, #16]
 80103b2:	021a      	lsls	r2, r3, #8
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	430a      	orrs	r2, r1
 80103ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80103bc:	e002      	b.n	80103c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80103be:	2301      	movs	r3, #1
 80103c0:	75fb      	strb	r3, [r7, #23]
      break;
 80103c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80103cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3718      	adds	r7, #24
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop

080103d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010408:	bf00      	nop
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801041c:	bf00      	nop
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010430:	bf00      	nop
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010444:	bf00      	nop
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010458:	bf00      	nop
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010470:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	429a      	cmp	r2, r3
 801047a:	d107      	bne.n	801048c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2201      	movs	r2, #1
 8010480:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2201      	movs	r2, #1
 8010486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801048a:	e02a      	b.n	80104e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	429a      	cmp	r2, r3
 8010494:	d107      	bne.n	80104a6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2202      	movs	r2, #2
 801049a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2201      	movs	r2, #1
 80104a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104a4:	e01d      	b.n	80104e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d107      	bne.n	80104c0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2204      	movs	r2, #4
 80104b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2201      	movs	r2, #1
 80104ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104be:	e010      	b.n	80104e2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d107      	bne.n	80104da <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2208      	movs	r2, #8
 80104ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104d8:	e003      	b.n	80104e2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2201      	movs	r2, #1
 80104de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80104e2:	68f8      	ldr	r0, [r7, #12]
 80104e4:	f7ff ffb4 	bl	8010450 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2200      	movs	r2, #0
 80104ec:	771a      	strb	r2, [r3, #28]
}
 80104ee:	bf00      	nop
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b084      	sub	sp, #16
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010502:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	429a      	cmp	r2, r3
 801050c:	d10b      	bne.n	8010526 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2201      	movs	r2, #1
 8010512:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d136      	bne.n	801058a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2201      	movs	r2, #1
 8010520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010524:	e031      	b.n	801058a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052a:	687a      	ldr	r2, [r7, #4]
 801052c:	429a      	cmp	r2, r3
 801052e:	d10b      	bne.n	8010548 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2202      	movs	r2, #2
 8010534:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	69db      	ldr	r3, [r3, #28]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d125      	bne.n	801058a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010546:	e020      	b.n	801058a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054c:	687a      	ldr	r2, [r7, #4]
 801054e:	429a      	cmp	r2, r3
 8010550:	d10b      	bne.n	801056a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2204      	movs	r2, #4
 8010556:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	69db      	ldr	r3, [r3, #28]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d114      	bne.n	801058a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010568:	e00f      	b.n	801058a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	429a      	cmp	r2, r3
 8010572:	d10a      	bne.n	801058a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2208      	movs	r2, #8
 8010578:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	69db      	ldr	r3, [r3, #28]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d103      	bne.n	801058a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2201      	movs	r2, #1
 8010586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f7ff ff42 	bl	8010414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2200      	movs	r2, #0
 8010594:	771a      	strb	r2, [r3, #28]
}
 8010596:	bf00      	nop
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b084      	sub	sp, #16
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d103      	bne.n	80105be <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2201      	movs	r2, #1
 80105ba:	771a      	strb	r2, [r3, #28]
 80105bc:	e019      	b.n	80105f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d103      	bne.n	80105d0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2202      	movs	r2, #2
 80105cc:	771a      	strb	r2, [r3, #28]
 80105ce:	e010      	b.n	80105f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d103      	bne.n	80105e2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2204      	movs	r2, #4
 80105de:	771a      	strb	r2, [r3, #28]
 80105e0:	e007      	b.n	80105f2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d102      	bne.n	80105f2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2208      	movs	r2, #8
 80105f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f7ff ff18 	bl	8010428 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2200      	movs	r2, #0
 80105fc:	771a      	strb	r2, [r3, #28]
}
 80105fe:	bf00      	nop
 8010600:	3710      	adds	r7, #16
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
	...

08010608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	4a44      	ldr	r2, [pc, #272]	; (801072c <TIM_Base_SetConfig+0x124>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d013      	beq.n	8010648 <TIM_Base_SetConfig+0x40>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010626:	d00f      	beq.n	8010648 <TIM_Base_SetConfig+0x40>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4a41      	ldr	r2, [pc, #260]	; (8010730 <TIM_Base_SetConfig+0x128>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d00b      	beq.n	8010648 <TIM_Base_SetConfig+0x40>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	4a40      	ldr	r2, [pc, #256]	; (8010734 <TIM_Base_SetConfig+0x12c>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d007      	beq.n	8010648 <TIM_Base_SetConfig+0x40>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4a3f      	ldr	r2, [pc, #252]	; (8010738 <TIM_Base_SetConfig+0x130>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d003      	beq.n	8010648 <TIM_Base_SetConfig+0x40>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4a3e      	ldr	r2, [pc, #248]	; (801073c <TIM_Base_SetConfig+0x134>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d108      	bne.n	801065a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801064e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	4313      	orrs	r3, r2
 8010658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4a33      	ldr	r2, [pc, #204]	; (801072c <TIM_Base_SetConfig+0x124>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d027      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010668:	d023      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4a30      	ldr	r2, [pc, #192]	; (8010730 <TIM_Base_SetConfig+0x128>)
 801066e:	4293      	cmp	r3, r2
 8010670:	d01f      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4a2f      	ldr	r2, [pc, #188]	; (8010734 <TIM_Base_SetConfig+0x12c>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d01b      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4a2e      	ldr	r2, [pc, #184]	; (8010738 <TIM_Base_SetConfig+0x130>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d017      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4a2d      	ldr	r2, [pc, #180]	; (801073c <TIM_Base_SetConfig+0x134>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d013      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4a2c      	ldr	r2, [pc, #176]	; (8010740 <TIM_Base_SetConfig+0x138>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d00f      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4a2b      	ldr	r2, [pc, #172]	; (8010744 <TIM_Base_SetConfig+0x13c>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d00b      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4a2a      	ldr	r2, [pc, #168]	; (8010748 <TIM_Base_SetConfig+0x140>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d007      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4a29      	ldr	r2, [pc, #164]	; (801074c <TIM_Base_SetConfig+0x144>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d003      	beq.n	80106b2 <TIM_Base_SetConfig+0xaa>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4a28      	ldr	r2, [pc, #160]	; (8010750 <TIM_Base_SetConfig+0x148>)
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d108      	bne.n	80106c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	4313      	orrs	r3, r2
 80106c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	695b      	ldr	r3, [r3, #20]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	689a      	ldr	r2, [r3, #8]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4a10      	ldr	r2, [pc, #64]	; (801072c <TIM_Base_SetConfig+0x124>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d00f      	beq.n	8010710 <TIM_Base_SetConfig+0x108>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	4a12      	ldr	r2, [pc, #72]	; (801073c <TIM_Base_SetConfig+0x134>)
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d00b      	beq.n	8010710 <TIM_Base_SetConfig+0x108>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4a11      	ldr	r2, [pc, #68]	; (8010740 <TIM_Base_SetConfig+0x138>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d007      	beq.n	8010710 <TIM_Base_SetConfig+0x108>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	4a10      	ldr	r2, [pc, #64]	; (8010744 <TIM_Base_SetConfig+0x13c>)
 8010704:	4293      	cmp	r3, r2
 8010706:	d003      	beq.n	8010710 <TIM_Base_SetConfig+0x108>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4a0f      	ldr	r2, [pc, #60]	; (8010748 <TIM_Base_SetConfig+0x140>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d103      	bne.n	8010718 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	691a      	ldr	r2, [r3, #16]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2201      	movs	r2, #1
 801071c:	615a      	str	r2, [r3, #20]
}
 801071e:	bf00      	nop
 8010720:	3714      	adds	r7, #20
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	40010000 	.word	0x40010000
 8010730:	40000400 	.word	0x40000400
 8010734:	40000800 	.word	0x40000800
 8010738:	40000c00 	.word	0x40000c00
 801073c:	40010400 	.word	0x40010400
 8010740:	40014000 	.word	0x40014000
 8010744:	40014400 	.word	0x40014400
 8010748:	40014800 	.word	0x40014800
 801074c:	4000e000 	.word	0x4000e000
 8010750:	4000e400 	.word	0x4000e400

08010754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010754:	b480      	push	{r7}
 8010756:	b087      	sub	sp, #28
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	f023 0201 	bic.w	r2, r3, #1
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a1b      	ldr	r3, [r3, #32]
 801076e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	4b37      	ldr	r3, [pc, #220]	; (801085c <TIM_OC1_SetConfig+0x108>)
 8010780:	4013      	ands	r3, r2
 8010782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f023 0303 	bic.w	r3, r3, #3
 801078a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	4313      	orrs	r3, r2
 8010794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f023 0302 	bic.w	r3, r3, #2
 801079c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	689b      	ldr	r3, [r3, #8]
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	4313      	orrs	r3, r2
 80107a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	4a2d      	ldr	r2, [pc, #180]	; (8010860 <TIM_OC1_SetConfig+0x10c>)
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d00f      	beq.n	80107d0 <TIM_OC1_SetConfig+0x7c>
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	4a2c      	ldr	r2, [pc, #176]	; (8010864 <TIM_OC1_SetConfig+0x110>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d00b      	beq.n	80107d0 <TIM_OC1_SetConfig+0x7c>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a2b      	ldr	r2, [pc, #172]	; (8010868 <TIM_OC1_SetConfig+0x114>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d007      	beq.n	80107d0 <TIM_OC1_SetConfig+0x7c>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a2a      	ldr	r2, [pc, #168]	; (801086c <TIM_OC1_SetConfig+0x118>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d003      	beq.n	80107d0 <TIM_OC1_SetConfig+0x7c>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a29      	ldr	r2, [pc, #164]	; (8010870 <TIM_OC1_SetConfig+0x11c>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d10c      	bne.n	80107ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	f023 0308 	bic.w	r3, r3, #8
 80107d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	697a      	ldr	r2, [r7, #20]
 80107de:	4313      	orrs	r3, r2
 80107e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	f023 0304 	bic.w	r3, r3, #4
 80107e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4a1c      	ldr	r2, [pc, #112]	; (8010860 <TIM_OC1_SetConfig+0x10c>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d00f      	beq.n	8010812 <TIM_OC1_SetConfig+0xbe>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4a1b      	ldr	r2, [pc, #108]	; (8010864 <TIM_OC1_SetConfig+0x110>)
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d00b      	beq.n	8010812 <TIM_OC1_SetConfig+0xbe>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4a1a      	ldr	r2, [pc, #104]	; (8010868 <TIM_OC1_SetConfig+0x114>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d007      	beq.n	8010812 <TIM_OC1_SetConfig+0xbe>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4a19      	ldr	r2, [pc, #100]	; (801086c <TIM_OC1_SetConfig+0x118>)
 8010806:	4293      	cmp	r3, r2
 8010808:	d003      	beq.n	8010812 <TIM_OC1_SetConfig+0xbe>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4a18      	ldr	r2, [pc, #96]	; (8010870 <TIM_OC1_SetConfig+0x11c>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d111      	bne.n	8010836 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	695b      	ldr	r3, [r3, #20]
 8010826:	693a      	ldr	r2, [r7, #16]
 8010828:	4313      	orrs	r3, r2
 801082a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	699b      	ldr	r3, [r3, #24]
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	4313      	orrs	r3, r2
 8010834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	685a      	ldr	r2, [r3, #4]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	697a      	ldr	r2, [r7, #20]
 801084e:	621a      	str	r2, [r3, #32]
}
 8010850:	bf00      	nop
 8010852:	371c      	adds	r7, #28
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	fffeff8f 	.word	0xfffeff8f
 8010860:	40010000 	.word	0x40010000
 8010864:	40010400 	.word	0x40010400
 8010868:	40014000 	.word	0x40014000
 801086c:	40014400 	.word	0x40014400
 8010870:	40014800 	.word	0x40014800

08010874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010874:	b480      	push	{r7}
 8010876:	b087      	sub	sp, #28
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	f023 0210 	bic.w	r2, r3, #16
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6a1b      	ldr	r3, [r3, #32]
 801088e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	699b      	ldr	r3, [r3, #24]
 801089a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	4b34      	ldr	r3, [pc, #208]	; (8010970 <TIM_OC2_SetConfig+0xfc>)
 80108a0:	4013      	ands	r3, r2
 80108a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	021b      	lsls	r3, r3, #8
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	4313      	orrs	r3, r2
 80108b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	f023 0320 	bic.w	r3, r3, #32
 80108be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	011b      	lsls	r3, r3, #4
 80108c6:	697a      	ldr	r2, [r7, #20]
 80108c8:	4313      	orrs	r3, r2
 80108ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4a29      	ldr	r2, [pc, #164]	; (8010974 <TIM_OC2_SetConfig+0x100>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d003      	beq.n	80108dc <TIM_OC2_SetConfig+0x68>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4a28      	ldr	r2, [pc, #160]	; (8010978 <TIM_OC2_SetConfig+0x104>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d10d      	bne.n	80108f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	011b      	lsls	r3, r3, #4
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	4313      	orrs	r3, r2
 80108ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	4a1e      	ldr	r2, [pc, #120]	; (8010974 <TIM_OC2_SetConfig+0x100>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d00f      	beq.n	8010920 <TIM_OC2_SetConfig+0xac>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a1d      	ldr	r2, [pc, #116]	; (8010978 <TIM_OC2_SetConfig+0x104>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d00b      	beq.n	8010920 <TIM_OC2_SetConfig+0xac>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a1c      	ldr	r2, [pc, #112]	; (801097c <TIM_OC2_SetConfig+0x108>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d007      	beq.n	8010920 <TIM_OC2_SetConfig+0xac>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4a1b      	ldr	r2, [pc, #108]	; (8010980 <TIM_OC2_SetConfig+0x10c>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d003      	beq.n	8010920 <TIM_OC2_SetConfig+0xac>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a1a      	ldr	r2, [pc, #104]	; (8010984 <TIM_OC2_SetConfig+0x110>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d113      	bne.n	8010948 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801092e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	4313      	orrs	r3, r2
 801093a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	699b      	ldr	r3, [r3, #24]
 8010940:	009b      	lsls	r3, r3, #2
 8010942:	693a      	ldr	r2, [r7, #16]
 8010944:	4313      	orrs	r3, r2
 8010946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	68fa      	ldr	r2, [r7, #12]
 8010952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	685a      	ldr	r2, [r3, #4]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	621a      	str	r2, [r3, #32]
}
 8010962:	bf00      	nop
 8010964:	371c      	adds	r7, #28
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	feff8fff 	.word	0xfeff8fff
 8010974:	40010000 	.word	0x40010000
 8010978:	40010400 	.word	0x40010400
 801097c:	40014000 	.word	0x40014000
 8010980:	40014400 	.word	0x40014400
 8010984:	40014800 	.word	0x40014800

08010988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010988:	b480      	push	{r7}
 801098a:	b087      	sub	sp, #28
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a1b      	ldr	r3, [r3, #32]
 8010996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6a1b      	ldr	r3, [r3, #32]
 80109a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	69db      	ldr	r3, [r3, #28]
 80109ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	4b33      	ldr	r3, [pc, #204]	; (8010a80 <TIM_OC3_SetConfig+0xf8>)
 80109b4:	4013      	ands	r3, r2
 80109b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f023 0303 	bic.w	r3, r3, #3
 80109be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	4313      	orrs	r3, r2
 80109c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80109d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	021b      	lsls	r3, r3, #8
 80109d8:	697a      	ldr	r2, [r7, #20]
 80109da:	4313      	orrs	r3, r2
 80109dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	4a28      	ldr	r2, [pc, #160]	; (8010a84 <TIM_OC3_SetConfig+0xfc>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d003      	beq.n	80109ee <TIM_OC3_SetConfig+0x66>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4a27      	ldr	r2, [pc, #156]	; (8010a88 <TIM_OC3_SetConfig+0x100>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d10d      	bne.n	8010a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	021b      	lsls	r3, r3, #8
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	4313      	orrs	r3, r2
 8010a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4a1d      	ldr	r2, [pc, #116]	; (8010a84 <TIM_OC3_SetConfig+0xfc>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d00f      	beq.n	8010a32 <TIM_OC3_SetConfig+0xaa>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4a1c      	ldr	r2, [pc, #112]	; (8010a88 <TIM_OC3_SetConfig+0x100>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d00b      	beq.n	8010a32 <TIM_OC3_SetConfig+0xaa>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4a1b      	ldr	r2, [pc, #108]	; (8010a8c <TIM_OC3_SetConfig+0x104>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d007      	beq.n	8010a32 <TIM_OC3_SetConfig+0xaa>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4a1a      	ldr	r2, [pc, #104]	; (8010a90 <TIM_OC3_SetConfig+0x108>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d003      	beq.n	8010a32 <TIM_OC3_SetConfig+0xaa>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4a19      	ldr	r2, [pc, #100]	; (8010a94 <TIM_OC3_SetConfig+0x10c>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d113      	bne.n	8010a5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	695b      	ldr	r3, [r3, #20]
 8010a46:	011b      	lsls	r3, r3, #4
 8010a48:	693a      	ldr	r2, [r7, #16]
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	699b      	ldr	r3, [r3, #24]
 8010a52:	011b      	lsls	r3, r3, #4
 8010a54:	693a      	ldr	r2, [r7, #16]
 8010a56:	4313      	orrs	r3, r2
 8010a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	693a      	ldr	r2, [r7, #16]
 8010a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	685a      	ldr	r2, [r3, #4]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	621a      	str	r2, [r3, #32]
}
 8010a74:	bf00      	nop
 8010a76:	371c      	adds	r7, #28
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr
 8010a80:	fffeff8f 	.word	0xfffeff8f
 8010a84:	40010000 	.word	0x40010000
 8010a88:	40010400 	.word	0x40010400
 8010a8c:	40014000 	.word	0x40014000
 8010a90:	40014400 	.word	0x40014400
 8010a94:	40014800 	.word	0x40014800

08010a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a1b      	ldr	r3, [r3, #32]
 8010aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6a1b      	ldr	r3, [r3, #32]
 8010ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	69db      	ldr	r3, [r3, #28]
 8010abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	4b24      	ldr	r3, [pc, #144]	; (8010b54 <TIM_OC4_SetConfig+0xbc>)
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	021b      	lsls	r3, r3, #8
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	031b      	lsls	r3, r3, #12
 8010aea:	693a      	ldr	r2, [r7, #16]
 8010aec:	4313      	orrs	r3, r2
 8010aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4a19      	ldr	r2, [pc, #100]	; (8010b58 <TIM_OC4_SetConfig+0xc0>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d00f      	beq.n	8010b18 <TIM_OC4_SetConfig+0x80>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	4a18      	ldr	r2, [pc, #96]	; (8010b5c <TIM_OC4_SetConfig+0xc4>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d00b      	beq.n	8010b18 <TIM_OC4_SetConfig+0x80>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4a17      	ldr	r2, [pc, #92]	; (8010b60 <TIM_OC4_SetConfig+0xc8>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d007      	beq.n	8010b18 <TIM_OC4_SetConfig+0x80>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	4a16      	ldr	r2, [pc, #88]	; (8010b64 <TIM_OC4_SetConfig+0xcc>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d003      	beq.n	8010b18 <TIM_OC4_SetConfig+0x80>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4a15      	ldr	r2, [pc, #84]	; (8010b68 <TIM_OC4_SetConfig+0xd0>)
 8010b14:	4293      	cmp	r3, r2
 8010b16:	d109      	bne.n	8010b2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	695b      	ldr	r3, [r3, #20]
 8010b24:	019b      	lsls	r3, r3, #6
 8010b26:	697a      	ldr	r2, [r7, #20]
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	697a      	ldr	r2, [r7, #20]
 8010b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	685a      	ldr	r2, [r3, #4]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	693a      	ldr	r2, [r7, #16]
 8010b44:	621a      	str	r2, [r3, #32]
}
 8010b46:	bf00      	nop
 8010b48:	371c      	adds	r7, #28
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	feff8fff 	.word	0xfeff8fff
 8010b58:	40010000 	.word	0x40010000
 8010b5c:	40010400 	.word	0x40010400
 8010b60:	40014000 	.word	0x40014000
 8010b64:	40014400 	.word	0x40014400
 8010b68:	40014800 	.word	0x40014800

08010b6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b087      	sub	sp, #28
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a1b      	ldr	r3, [r3, #32]
 8010b7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6a1b      	ldr	r3, [r3, #32]
 8010b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	4b21      	ldr	r3, [pc, #132]	; (8010c1c <TIM_OC5_SetConfig+0xb0>)
 8010b98:	4013      	ands	r3, r2
 8010b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010bac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	689b      	ldr	r3, [r3, #8]
 8010bb2:	041b      	lsls	r3, r3, #16
 8010bb4:	693a      	ldr	r2, [r7, #16]
 8010bb6:	4313      	orrs	r3, r2
 8010bb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4a18      	ldr	r2, [pc, #96]	; (8010c20 <TIM_OC5_SetConfig+0xb4>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d00f      	beq.n	8010be2 <TIM_OC5_SetConfig+0x76>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4a17      	ldr	r2, [pc, #92]	; (8010c24 <TIM_OC5_SetConfig+0xb8>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d00b      	beq.n	8010be2 <TIM_OC5_SetConfig+0x76>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4a16      	ldr	r2, [pc, #88]	; (8010c28 <TIM_OC5_SetConfig+0xbc>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d007      	beq.n	8010be2 <TIM_OC5_SetConfig+0x76>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4a15      	ldr	r2, [pc, #84]	; (8010c2c <TIM_OC5_SetConfig+0xc0>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d003      	beq.n	8010be2 <TIM_OC5_SetConfig+0x76>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4a14      	ldr	r2, [pc, #80]	; (8010c30 <TIM_OC5_SetConfig+0xc4>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d109      	bne.n	8010bf6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010be8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	695b      	ldr	r3, [r3, #20]
 8010bee:	021b      	lsls	r3, r3, #8
 8010bf0:	697a      	ldr	r2, [r7, #20]
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	68fa      	ldr	r2, [r7, #12]
 8010c00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	685a      	ldr	r2, [r3, #4]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	621a      	str	r2, [r3, #32]
}
 8010c10:	bf00      	nop
 8010c12:	371c      	adds	r7, #28
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	fffeff8f 	.word	0xfffeff8f
 8010c20:	40010000 	.word	0x40010000
 8010c24:	40010400 	.word	0x40010400
 8010c28:	40014000 	.word	0x40014000
 8010c2c:	40014400 	.word	0x40014400
 8010c30:	40014800 	.word	0x40014800

08010c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b087      	sub	sp, #28
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6a1b      	ldr	r3, [r3, #32]
 8010c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	4b22      	ldr	r3, [pc, #136]	; (8010ce8 <TIM_OC6_SetConfig+0xb4>)
 8010c60:	4013      	ands	r3, r2
 8010c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	021b      	lsls	r3, r3, #8
 8010c6a:	68fa      	ldr	r2, [r7, #12]
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	051b      	lsls	r3, r3, #20
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	4313      	orrs	r3, r2
 8010c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	4a19      	ldr	r2, [pc, #100]	; (8010cec <TIM_OC6_SetConfig+0xb8>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d00f      	beq.n	8010cac <TIM_OC6_SetConfig+0x78>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	4a18      	ldr	r2, [pc, #96]	; (8010cf0 <TIM_OC6_SetConfig+0xbc>)
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d00b      	beq.n	8010cac <TIM_OC6_SetConfig+0x78>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4a17      	ldr	r2, [pc, #92]	; (8010cf4 <TIM_OC6_SetConfig+0xc0>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d007      	beq.n	8010cac <TIM_OC6_SetConfig+0x78>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4a16      	ldr	r2, [pc, #88]	; (8010cf8 <TIM_OC6_SetConfig+0xc4>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d003      	beq.n	8010cac <TIM_OC6_SetConfig+0x78>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	4a15      	ldr	r2, [pc, #84]	; (8010cfc <TIM_OC6_SetConfig+0xc8>)
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d109      	bne.n	8010cc0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	695b      	ldr	r3, [r3, #20]
 8010cb8:	029b      	lsls	r3, r3, #10
 8010cba:	697a      	ldr	r2, [r7, #20]
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	697a      	ldr	r2, [r7, #20]
 8010cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	693a      	ldr	r2, [r7, #16]
 8010cd8:	621a      	str	r2, [r3, #32]
}
 8010cda:	bf00      	nop
 8010cdc:	371c      	adds	r7, #28
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop
 8010ce8:	feff8fff 	.word	0xfeff8fff
 8010cec:	40010000 	.word	0x40010000
 8010cf0:	40010400 	.word	0x40010400
 8010cf4:	40014000 	.word	0x40014000
 8010cf8:	40014400 	.word	0x40014400
 8010cfc:	40014800 	.word	0x40014800

08010d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b087      	sub	sp, #28
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	f003 031f 	and.w	r3, r3, #31
 8010d12:	2201      	movs	r2, #1
 8010d14:	fa02 f303 	lsl.w	r3, r2, r3
 8010d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6a1a      	ldr	r2, [r3, #32]
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	43db      	mvns	r3, r3
 8010d22:	401a      	ands	r2, r3
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6a1a      	ldr	r2, [r3, #32]
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	f003 031f 	and.w	r3, r3, #31
 8010d32:	6879      	ldr	r1, [r7, #4]
 8010d34:	fa01 f303 	lsl.w	r3, r1, r3
 8010d38:	431a      	orrs	r2, r3
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	621a      	str	r2, [r3, #32]
}
 8010d3e:	bf00      	nop
 8010d40:	371c      	adds	r7, #28
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
	...

08010d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d101      	bne.n	8010d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d60:	2302      	movs	r3, #2
 8010d62:	e077      	b.n	8010e54 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2201      	movs	r2, #1
 8010d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a35      	ldr	r2, [pc, #212]	; (8010e60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d004      	beq.n	8010d98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4a34      	ldr	r2, [pc, #208]	; (8010e64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d108      	bne.n	8010daa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	4313      	orrs	r3, r2
 8010da8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010db0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	68fa      	ldr	r2, [r7, #12]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a25      	ldr	r2, [pc, #148]	; (8010e60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d02c      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dd6:	d027      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a22      	ldr	r2, [pc, #136]	; (8010e68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d022      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a21      	ldr	r2, [pc, #132]	; (8010e6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d01d      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a1f      	ldr	r2, [pc, #124]	; (8010e70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d018      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a1a      	ldr	r2, [pc, #104]	; (8010e64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d013      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a1b      	ldr	r2, [pc, #108]	; (8010e74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d00e      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	4a1a      	ldr	r2, [pc, #104]	; (8010e78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d009      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4a18      	ldr	r2, [pc, #96]	; (8010e7c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d004      	beq.n	8010e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4a17      	ldr	r2, [pc, #92]	; (8010e80 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d10c      	bne.n	8010e42 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	68ba      	ldr	r2, [r7, #8]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	68ba      	ldr	r2, [r7, #8]
 8010e40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2201      	movs	r2, #1
 8010e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010e52:	2300      	movs	r3, #0
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3714      	adds	r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr
 8010e60:	40010000 	.word	0x40010000
 8010e64:	40010400 	.word	0x40010400
 8010e68:	40000400 	.word	0x40000400
 8010e6c:	40000800 	.word	0x40000800
 8010e70:	40000c00 	.word	0x40000c00
 8010e74:	40001800 	.word	0x40001800
 8010e78:	40014000 	.word	0x40014000
 8010e7c:	4000e000 	.word	0x4000e000
 8010e80:	4000e400 	.word	0x4000e400

08010e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010ea0:	bf00      	nop
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr

08010eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010eb4:	bf00      	nop
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr

08010ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d101      	bne.n	8010ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e042      	b.n	8010f58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d106      	bne.n	8010eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7f2 fcaf 	bl	8003848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2224      	movs	r2, #36	; 0x24
 8010eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f022 0201 	bic.w	r2, r2, #1
 8010f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f82c 	bl	8010f60 <UART_SetConfig>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d101      	bne.n	8010f12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e022      	b.n	8010f58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d002      	beq.n	8010f20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 fe8c 	bl	8011c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	689a      	ldr	r2, [r3, #8]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f042 0201 	orr.w	r2, r2, #1
 8010f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 ff13 	bl	8011d7c <UART_CheckIdleState>
 8010f56:	4603      	mov	r3, r0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f64:	b092      	sub	sp, #72	; 0x48
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	689a      	ldr	r2, [r3, #8]
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	431a      	orrs	r2, r3
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	695b      	ldr	r3, [r3, #20]
 8010f7e:	431a      	orrs	r2, r3
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	69db      	ldr	r3, [r3, #28]
 8010f84:	4313      	orrs	r3, r2
 8010f86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	4bbe      	ldr	r3, [pc, #760]	; (8011288 <UART_SetConfig+0x328>)
 8010f90:	4013      	ands	r3, r2
 8010f92:	697a      	ldr	r2, [r7, #20]
 8010f94:	6812      	ldr	r2, [r2, #0]
 8010f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f98:	430b      	orrs	r3, r1
 8010f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	68da      	ldr	r2, [r3, #12]
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	430a      	orrs	r2, r1
 8010fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	699b      	ldr	r3, [r3, #24]
 8010fb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4ab3      	ldr	r2, [pc, #716]	; (801128c <UART_SetConfig+0x32c>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d004      	beq.n	8010fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	6a1b      	ldr	r3, [r3, #32]
 8010fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	689a      	ldr	r2, [r3, #8]
 8010fd2:	4baf      	ldr	r3, [pc, #700]	; (8011290 <UART_SetConfig+0x330>)
 8010fd4:	4013      	ands	r3, r2
 8010fd6:	697a      	ldr	r2, [r7, #20]
 8010fd8:	6812      	ldr	r2, [r2, #0]
 8010fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fdc:	430b      	orrs	r3, r1
 8010fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fe6:	f023 010f 	bic.w	r1, r3, #15
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	430a      	orrs	r2, r1
 8010ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4aa6      	ldr	r2, [pc, #664]	; (8011294 <UART_SetConfig+0x334>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d177      	bne.n	80110f0 <UART_SetConfig+0x190>
 8011000:	4ba5      	ldr	r3, [pc, #660]	; (8011298 <UART_SetConfig+0x338>)
 8011002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011008:	2b28      	cmp	r3, #40	; 0x28
 801100a:	d86d      	bhi.n	80110e8 <UART_SetConfig+0x188>
 801100c:	a201      	add	r2, pc, #4	; (adr r2, 8011014 <UART_SetConfig+0xb4>)
 801100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011012:	bf00      	nop
 8011014:	080110b9 	.word	0x080110b9
 8011018:	080110e9 	.word	0x080110e9
 801101c:	080110e9 	.word	0x080110e9
 8011020:	080110e9 	.word	0x080110e9
 8011024:	080110e9 	.word	0x080110e9
 8011028:	080110e9 	.word	0x080110e9
 801102c:	080110e9 	.word	0x080110e9
 8011030:	080110e9 	.word	0x080110e9
 8011034:	080110c1 	.word	0x080110c1
 8011038:	080110e9 	.word	0x080110e9
 801103c:	080110e9 	.word	0x080110e9
 8011040:	080110e9 	.word	0x080110e9
 8011044:	080110e9 	.word	0x080110e9
 8011048:	080110e9 	.word	0x080110e9
 801104c:	080110e9 	.word	0x080110e9
 8011050:	080110e9 	.word	0x080110e9
 8011054:	080110c9 	.word	0x080110c9
 8011058:	080110e9 	.word	0x080110e9
 801105c:	080110e9 	.word	0x080110e9
 8011060:	080110e9 	.word	0x080110e9
 8011064:	080110e9 	.word	0x080110e9
 8011068:	080110e9 	.word	0x080110e9
 801106c:	080110e9 	.word	0x080110e9
 8011070:	080110e9 	.word	0x080110e9
 8011074:	080110d1 	.word	0x080110d1
 8011078:	080110e9 	.word	0x080110e9
 801107c:	080110e9 	.word	0x080110e9
 8011080:	080110e9 	.word	0x080110e9
 8011084:	080110e9 	.word	0x080110e9
 8011088:	080110e9 	.word	0x080110e9
 801108c:	080110e9 	.word	0x080110e9
 8011090:	080110e9 	.word	0x080110e9
 8011094:	080110d9 	.word	0x080110d9
 8011098:	080110e9 	.word	0x080110e9
 801109c:	080110e9 	.word	0x080110e9
 80110a0:	080110e9 	.word	0x080110e9
 80110a4:	080110e9 	.word	0x080110e9
 80110a8:	080110e9 	.word	0x080110e9
 80110ac:	080110e9 	.word	0x080110e9
 80110b0:	080110e9 	.word	0x080110e9
 80110b4:	080110e1 	.word	0x080110e1
 80110b8:	2301      	movs	r3, #1
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e326      	b.n	801170e <UART_SetConfig+0x7ae>
 80110c0:	2304      	movs	r3, #4
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e322      	b.n	801170e <UART_SetConfig+0x7ae>
 80110c8:	2308      	movs	r3, #8
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e31e      	b.n	801170e <UART_SetConfig+0x7ae>
 80110d0:	2310      	movs	r3, #16
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e31a      	b.n	801170e <UART_SetConfig+0x7ae>
 80110d8:	2320      	movs	r3, #32
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e316      	b.n	801170e <UART_SetConfig+0x7ae>
 80110e0:	2340      	movs	r3, #64	; 0x40
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e312      	b.n	801170e <UART_SetConfig+0x7ae>
 80110e8:	2380      	movs	r3, #128	; 0x80
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e30e      	b.n	801170e <UART_SetConfig+0x7ae>
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a69      	ldr	r2, [pc, #420]	; (801129c <UART_SetConfig+0x33c>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d130      	bne.n	801115c <UART_SetConfig+0x1fc>
 80110fa:	4b67      	ldr	r3, [pc, #412]	; (8011298 <UART_SetConfig+0x338>)
 80110fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110fe:	f003 0307 	and.w	r3, r3, #7
 8011102:	2b05      	cmp	r3, #5
 8011104:	d826      	bhi.n	8011154 <UART_SetConfig+0x1f4>
 8011106:	a201      	add	r2, pc, #4	; (adr r2, 801110c <UART_SetConfig+0x1ac>)
 8011108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801110c:	08011125 	.word	0x08011125
 8011110:	0801112d 	.word	0x0801112d
 8011114:	08011135 	.word	0x08011135
 8011118:	0801113d 	.word	0x0801113d
 801111c:	08011145 	.word	0x08011145
 8011120:	0801114d 	.word	0x0801114d
 8011124:	2300      	movs	r3, #0
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e2f0      	b.n	801170e <UART_SetConfig+0x7ae>
 801112c:	2304      	movs	r3, #4
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e2ec      	b.n	801170e <UART_SetConfig+0x7ae>
 8011134:	2308      	movs	r3, #8
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e2e8      	b.n	801170e <UART_SetConfig+0x7ae>
 801113c:	2310      	movs	r3, #16
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e2e4      	b.n	801170e <UART_SetConfig+0x7ae>
 8011144:	2320      	movs	r3, #32
 8011146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801114a:	e2e0      	b.n	801170e <UART_SetConfig+0x7ae>
 801114c:	2340      	movs	r3, #64	; 0x40
 801114e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011152:	e2dc      	b.n	801170e <UART_SetConfig+0x7ae>
 8011154:	2380      	movs	r3, #128	; 0x80
 8011156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115a:	e2d8      	b.n	801170e <UART_SetConfig+0x7ae>
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4a4f      	ldr	r2, [pc, #316]	; (80112a0 <UART_SetConfig+0x340>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d130      	bne.n	80111c8 <UART_SetConfig+0x268>
 8011166:	4b4c      	ldr	r3, [pc, #304]	; (8011298 <UART_SetConfig+0x338>)
 8011168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801116a:	f003 0307 	and.w	r3, r3, #7
 801116e:	2b05      	cmp	r3, #5
 8011170:	d826      	bhi.n	80111c0 <UART_SetConfig+0x260>
 8011172:	a201      	add	r2, pc, #4	; (adr r2, 8011178 <UART_SetConfig+0x218>)
 8011174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011178:	08011191 	.word	0x08011191
 801117c:	08011199 	.word	0x08011199
 8011180:	080111a1 	.word	0x080111a1
 8011184:	080111a9 	.word	0x080111a9
 8011188:	080111b1 	.word	0x080111b1
 801118c:	080111b9 	.word	0x080111b9
 8011190:	2300      	movs	r3, #0
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e2ba      	b.n	801170e <UART_SetConfig+0x7ae>
 8011198:	2304      	movs	r3, #4
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e2b6      	b.n	801170e <UART_SetConfig+0x7ae>
 80111a0:	2308      	movs	r3, #8
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e2b2      	b.n	801170e <UART_SetConfig+0x7ae>
 80111a8:	2310      	movs	r3, #16
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e2ae      	b.n	801170e <UART_SetConfig+0x7ae>
 80111b0:	2320      	movs	r3, #32
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b6:	e2aa      	b.n	801170e <UART_SetConfig+0x7ae>
 80111b8:	2340      	movs	r3, #64	; 0x40
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111be:	e2a6      	b.n	801170e <UART_SetConfig+0x7ae>
 80111c0:	2380      	movs	r3, #128	; 0x80
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e2a2      	b.n	801170e <UART_SetConfig+0x7ae>
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4a35      	ldr	r2, [pc, #212]	; (80112a4 <UART_SetConfig+0x344>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d130      	bne.n	8011234 <UART_SetConfig+0x2d4>
 80111d2:	4b31      	ldr	r3, [pc, #196]	; (8011298 <UART_SetConfig+0x338>)
 80111d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111d6:	f003 0307 	and.w	r3, r3, #7
 80111da:	2b05      	cmp	r3, #5
 80111dc:	d826      	bhi.n	801122c <UART_SetConfig+0x2cc>
 80111de:	a201      	add	r2, pc, #4	; (adr r2, 80111e4 <UART_SetConfig+0x284>)
 80111e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111e4:	080111fd 	.word	0x080111fd
 80111e8:	08011205 	.word	0x08011205
 80111ec:	0801120d 	.word	0x0801120d
 80111f0:	08011215 	.word	0x08011215
 80111f4:	0801121d 	.word	0x0801121d
 80111f8:	08011225 	.word	0x08011225
 80111fc:	2300      	movs	r3, #0
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e284      	b.n	801170e <UART_SetConfig+0x7ae>
 8011204:	2304      	movs	r3, #4
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e280      	b.n	801170e <UART_SetConfig+0x7ae>
 801120c:	2308      	movs	r3, #8
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e27c      	b.n	801170e <UART_SetConfig+0x7ae>
 8011214:	2310      	movs	r3, #16
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e278      	b.n	801170e <UART_SetConfig+0x7ae>
 801121c:	2320      	movs	r3, #32
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e274      	b.n	801170e <UART_SetConfig+0x7ae>
 8011224:	2340      	movs	r3, #64	; 0x40
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e270      	b.n	801170e <UART_SetConfig+0x7ae>
 801122c:	2380      	movs	r3, #128	; 0x80
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e26c      	b.n	801170e <UART_SetConfig+0x7ae>
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	4a1b      	ldr	r2, [pc, #108]	; (80112a8 <UART_SetConfig+0x348>)
 801123a:	4293      	cmp	r3, r2
 801123c:	d142      	bne.n	80112c4 <UART_SetConfig+0x364>
 801123e:	4b16      	ldr	r3, [pc, #88]	; (8011298 <UART_SetConfig+0x338>)
 8011240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011242:	f003 0307 	and.w	r3, r3, #7
 8011246:	2b05      	cmp	r3, #5
 8011248:	d838      	bhi.n	80112bc <UART_SetConfig+0x35c>
 801124a:	a201      	add	r2, pc, #4	; (adr r2, 8011250 <UART_SetConfig+0x2f0>)
 801124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011250:	08011269 	.word	0x08011269
 8011254:	08011271 	.word	0x08011271
 8011258:	08011279 	.word	0x08011279
 801125c:	08011281 	.word	0x08011281
 8011260:	080112ad 	.word	0x080112ad
 8011264:	080112b5 	.word	0x080112b5
 8011268:	2300      	movs	r3, #0
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e24e      	b.n	801170e <UART_SetConfig+0x7ae>
 8011270:	2304      	movs	r3, #4
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e24a      	b.n	801170e <UART_SetConfig+0x7ae>
 8011278:	2308      	movs	r3, #8
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e246      	b.n	801170e <UART_SetConfig+0x7ae>
 8011280:	2310      	movs	r3, #16
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e242      	b.n	801170e <UART_SetConfig+0x7ae>
 8011288:	cfff69f3 	.word	0xcfff69f3
 801128c:	58000c00 	.word	0x58000c00
 8011290:	11fff4ff 	.word	0x11fff4ff
 8011294:	40011000 	.word	0x40011000
 8011298:	58024400 	.word	0x58024400
 801129c:	40004400 	.word	0x40004400
 80112a0:	40004800 	.word	0x40004800
 80112a4:	40004c00 	.word	0x40004c00
 80112a8:	40005000 	.word	0x40005000
 80112ac:	2320      	movs	r3, #32
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e22c      	b.n	801170e <UART_SetConfig+0x7ae>
 80112b4:	2340      	movs	r3, #64	; 0x40
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e228      	b.n	801170e <UART_SetConfig+0x7ae>
 80112bc:	2380      	movs	r3, #128	; 0x80
 80112be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c2:	e224      	b.n	801170e <UART_SetConfig+0x7ae>
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4ab1      	ldr	r2, [pc, #708]	; (8011590 <UART_SetConfig+0x630>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d176      	bne.n	80113bc <UART_SetConfig+0x45c>
 80112ce:	4bb1      	ldr	r3, [pc, #708]	; (8011594 <UART_SetConfig+0x634>)
 80112d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112d6:	2b28      	cmp	r3, #40	; 0x28
 80112d8:	d86c      	bhi.n	80113b4 <UART_SetConfig+0x454>
 80112da:	a201      	add	r2, pc, #4	; (adr r2, 80112e0 <UART_SetConfig+0x380>)
 80112dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112e0:	08011385 	.word	0x08011385
 80112e4:	080113b5 	.word	0x080113b5
 80112e8:	080113b5 	.word	0x080113b5
 80112ec:	080113b5 	.word	0x080113b5
 80112f0:	080113b5 	.word	0x080113b5
 80112f4:	080113b5 	.word	0x080113b5
 80112f8:	080113b5 	.word	0x080113b5
 80112fc:	080113b5 	.word	0x080113b5
 8011300:	0801138d 	.word	0x0801138d
 8011304:	080113b5 	.word	0x080113b5
 8011308:	080113b5 	.word	0x080113b5
 801130c:	080113b5 	.word	0x080113b5
 8011310:	080113b5 	.word	0x080113b5
 8011314:	080113b5 	.word	0x080113b5
 8011318:	080113b5 	.word	0x080113b5
 801131c:	080113b5 	.word	0x080113b5
 8011320:	08011395 	.word	0x08011395
 8011324:	080113b5 	.word	0x080113b5
 8011328:	080113b5 	.word	0x080113b5
 801132c:	080113b5 	.word	0x080113b5
 8011330:	080113b5 	.word	0x080113b5
 8011334:	080113b5 	.word	0x080113b5
 8011338:	080113b5 	.word	0x080113b5
 801133c:	080113b5 	.word	0x080113b5
 8011340:	0801139d 	.word	0x0801139d
 8011344:	080113b5 	.word	0x080113b5
 8011348:	080113b5 	.word	0x080113b5
 801134c:	080113b5 	.word	0x080113b5
 8011350:	080113b5 	.word	0x080113b5
 8011354:	080113b5 	.word	0x080113b5
 8011358:	080113b5 	.word	0x080113b5
 801135c:	080113b5 	.word	0x080113b5
 8011360:	080113a5 	.word	0x080113a5
 8011364:	080113b5 	.word	0x080113b5
 8011368:	080113b5 	.word	0x080113b5
 801136c:	080113b5 	.word	0x080113b5
 8011370:	080113b5 	.word	0x080113b5
 8011374:	080113b5 	.word	0x080113b5
 8011378:	080113b5 	.word	0x080113b5
 801137c:	080113b5 	.word	0x080113b5
 8011380:	080113ad 	.word	0x080113ad
 8011384:	2301      	movs	r3, #1
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e1c0      	b.n	801170e <UART_SetConfig+0x7ae>
 801138c:	2304      	movs	r3, #4
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e1bc      	b.n	801170e <UART_SetConfig+0x7ae>
 8011394:	2308      	movs	r3, #8
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e1b8      	b.n	801170e <UART_SetConfig+0x7ae>
 801139c:	2310      	movs	r3, #16
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e1b4      	b.n	801170e <UART_SetConfig+0x7ae>
 80113a4:	2320      	movs	r3, #32
 80113a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113aa:	e1b0      	b.n	801170e <UART_SetConfig+0x7ae>
 80113ac:	2340      	movs	r3, #64	; 0x40
 80113ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113b2:	e1ac      	b.n	801170e <UART_SetConfig+0x7ae>
 80113b4:	2380      	movs	r3, #128	; 0x80
 80113b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ba:	e1a8      	b.n	801170e <UART_SetConfig+0x7ae>
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a75      	ldr	r2, [pc, #468]	; (8011598 <UART_SetConfig+0x638>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d130      	bne.n	8011428 <UART_SetConfig+0x4c8>
 80113c6:	4b73      	ldr	r3, [pc, #460]	; (8011594 <UART_SetConfig+0x634>)
 80113c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113ca:	f003 0307 	and.w	r3, r3, #7
 80113ce:	2b05      	cmp	r3, #5
 80113d0:	d826      	bhi.n	8011420 <UART_SetConfig+0x4c0>
 80113d2:	a201      	add	r2, pc, #4	; (adr r2, 80113d8 <UART_SetConfig+0x478>)
 80113d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d8:	080113f1 	.word	0x080113f1
 80113dc:	080113f9 	.word	0x080113f9
 80113e0:	08011401 	.word	0x08011401
 80113e4:	08011409 	.word	0x08011409
 80113e8:	08011411 	.word	0x08011411
 80113ec:	08011419 	.word	0x08011419
 80113f0:	2300      	movs	r3, #0
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f6:	e18a      	b.n	801170e <UART_SetConfig+0x7ae>
 80113f8:	2304      	movs	r3, #4
 80113fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fe:	e186      	b.n	801170e <UART_SetConfig+0x7ae>
 8011400:	2308      	movs	r3, #8
 8011402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011406:	e182      	b.n	801170e <UART_SetConfig+0x7ae>
 8011408:	2310      	movs	r3, #16
 801140a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140e:	e17e      	b.n	801170e <UART_SetConfig+0x7ae>
 8011410:	2320      	movs	r3, #32
 8011412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011416:	e17a      	b.n	801170e <UART_SetConfig+0x7ae>
 8011418:	2340      	movs	r3, #64	; 0x40
 801141a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801141e:	e176      	b.n	801170e <UART_SetConfig+0x7ae>
 8011420:	2380      	movs	r3, #128	; 0x80
 8011422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011426:	e172      	b.n	801170e <UART_SetConfig+0x7ae>
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4a5b      	ldr	r2, [pc, #364]	; (801159c <UART_SetConfig+0x63c>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d130      	bne.n	8011494 <UART_SetConfig+0x534>
 8011432:	4b58      	ldr	r3, [pc, #352]	; (8011594 <UART_SetConfig+0x634>)
 8011434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011436:	f003 0307 	and.w	r3, r3, #7
 801143a:	2b05      	cmp	r3, #5
 801143c:	d826      	bhi.n	801148c <UART_SetConfig+0x52c>
 801143e:	a201      	add	r2, pc, #4	; (adr r2, 8011444 <UART_SetConfig+0x4e4>)
 8011440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011444:	0801145d 	.word	0x0801145d
 8011448:	08011465 	.word	0x08011465
 801144c:	0801146d 	.word	0x0801146d
 8011450:	08011475 	.word	0x08011475
 8011454:	0801147d 	.word	0x0801147d
 8011458:	08011485 	.word	0x08011485
 801145c:	2300      	movs	r3, #0
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011462:	e154      	b.n	801170e <UART_SetConfig+0x7ae>
 8011464:	2304      	movs	r3, #4
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146a:	e150      	b.n	801170e <UART_SetConfig+0x7ae>
 801146c:	2308      	movs	r3, #8
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011472:	e14c      	b.n	801170e <UART_SetConfig+0x7ae>
 8011474:	2310      	movs	r3, #16
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147a:	e148      	b.n	801170e <UART_SetConfig+0x7ae>
 801147c:	2320      	movs	r3, #32
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011482:	e144      	b.n	801170e <UART_SetConfig+0x7ae>
 8011484:	2340      	movs	r3, #64	; 0x40
 8011486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148a:	e140      	b.n	801170e <UART_SetConfig+0x7ae>
 801148c:	2380      	movs	r3, #128	; 0x80
 801148e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011492:	e13c      	b.n	801170e <UART_SetConfig+0x7ae>
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4a41      	ldr	r2, [pc, #260]	; (80115a0 <UART_SetConfig+0x640>)
 801149a:	4293      	cmp	r3, r2
 801149c:	f040 8082 	bne.w	80115a4 <UART_SetConfig+0x644>
 80114a0:	4b3c      	ldr	r3, [pc, #240]	; (8011594 <UART_SetConfig+0x634>)
 80114a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80114a8:	2b28      	cmp	r3, #40	; 0x28
 80114aa:	d86d      	bhi.n	8011588 <UART_SetConfig+0x628>
 80114ac:	a201      	add	r2, pc, #4	; (adr r2, 80114b4 <UART_SetConfig+0x554>)
 80114ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b2:	bf00      	nop
 80114b4:	08011559 	.word	0x08011559
 80114b8:	08011589 	.word	0x08011589
 80114bc:	08011589 	.word	0x08011589
 80114c0:	08011589 	.word	0x08011589
 80114c4:	08011589 	.word	0x08011589
 80114c8:	08011589 	.word	0x08011589
 80114cc:	08011589 	.word	0x08011589
 80114d0:	08011589 	.word	0x08011589
 80114d4:	08011561 	.word	0x08011561
 80114d8:	08011589 	.word	0x08011589
 80114dc:	08011589 	.word	0x08011589
 80114e0:	08011589 	.word	0x08011589
 80114e4:	08011589 	.word	0x08011589
 80114e8:	08011589 	.word	0x08011589
 80114ec:	08011589 	.word	0x08011589
 80114f0:	08011589 	.word	0x08011589
 80114f4:	08011569 	.word	0x08011569
 80114f8:	08011589 	.word	0x08011589
 80114fc:	08011589 	.word	0x08011589
 8011500:	08011589 	.word	0x08011589
 8011504:	08011589 	.word	0x08011589
 8011508:	08011589 	.word	0x08011589
 801150c:	08011589 	.word	0x08011589
 8011510:	08011589 	.word	0x08011589
 8011514:	08011571 	.word	0x08011571
 8011518:	08011589 	.word	0x08011589
 801151c:	08011589 	.word	0x08011589
 8011520:	08011589 	.word	0x08011589
 8011524:	08011589 	.word	0x08011589
 8011528:	08011589 	.word	0x08011589
 801152c:	08011589 	.word	0x08011589
 8011530:	08011589 	.word	0x08011589
 8011534:	08011579 	.word	0x08011579
 8011538:	08011589 	.word	0x08011589
 801153c:	08011589 	.word	0x08011589
 8011540:	08011589 	.word	0x08011589
 8011544:	08011589 	.word	0x08011589
 8011548:	08011589 	.word	0x08011589
 801154c:	08011589 	.word	0x08011589
 8011550:	08011589 	.word	0x08011589
 8011554:	08011581 	.word	0x08011581
 8011558:	2301      	movs	r3, #1
 801155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155e:	e0d6      	b.n	801170e <UART_SetConfig+0x7ae>
 8011560:	2304      	movs	r3, #4
 8011562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011566:	e0d2      	b.n	801170e <UART_SetConfig+0x7ae>
 8011568:	2308      	movs	r3, #8
 801156a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156e:	e0ce      	b.n	801170e <UART_SetConfig+0x7ae>
 8011570:	2310      	movs	r3, #16
 8011572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011576:	e0ca      	b.n	801170e <UART_SetConfig+0x7ae>
 8011578:	2320      	movs	r3, #32
 801157a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801157e:	e0c6      	b.n	801170e <UART_SetConfig+0x7ae>
 8011580:	2340      	movs	r3, #64	; 0x40
 8011582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011586:	e0c2      	b.n	801170e <UART_SetConfig+0x7ae>
 8011588:	2380      	movs	r3, #128	; 0x80
 801158a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158e:	e0be      	b.n	801170e <UART_SetConfig+0x7ae>
 8011590:	40011400 	.word	0x40011400
 8011594:	58024400 	.word	0x58024400
 8011598:	40007800 	.word	0x40007800
 801159c:	40007c00 	.word	0x40007c00
 80115a0:	40011800 	.word	0x40011800
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	4aad      	ldr	r2, [pc, #692]	; (8011860 <UART_SetConfig+0x900>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d176      	bne.n	801169c <UART_SetConfig+0x73c>
 80115ae:	4bad      	ldr	r3, [pc, #692]	; (8011864 <UART_SetConfig+0x904>)
 80115b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115b6:	2b28      	cmp	r3, #40	; 0x28
 80115b8:	d86c      	bhi.n	8011694 <UART_SetConfig+0x734>
 80115ba:	a201      	add	r2, pc, #4	; (adr r2, 80115c0 <UART_SetConfig+0x660>)
 80115bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c0:	08011665 	.word	0x08011665
 80115c4:	08011695 	.word	0x08011695
 80115c8:	08011695 	.word	0x08011695
 80115cc:	08011695 	.word	0x08011695
 80115d0:	08011695 	.word	0x08011695
 80115d4:	08011695 	.word	0x08011695
 80115d8:	08011695 	.word	0x08011695
 80115dc:	08011695 	.word	0x08011695
 80115e0:	0801166d 	.word	0x0801166d
 80115e4:	08011695 	.word	0x08011695
 80115e8:	08011695 	.word	0x08011695
 80115ec:	08011695 	.word	0x08011695
 80115f0:	08011695 	.word	0x08011695
 80115f4:	08011695 	.word	0x08011695
 80115f8:	08011695 	.word	0x08011695
 80115fc:	08011695 	.word	0x08011695
 8011600:	08011675 	.word	0x08011675
 8011604:	08011695 	.word	0x08011695
 8011608:	08011695 	.word	0x08011695
 801160c:	08011695 	.word	0x08011695
 8011610:	08011695 	.word	0x08011695
 8011614:	08011695 	.word	0x08011695
 8011618:	08011695 	.word	0x08011695
 801161c:	08011695 	.word	0x08011695
 8011620:	0801167d 	.word	0x0801167d
 8011624:	08011695 	.word	0x08011695
 8011628:	08011695 	.word	0x08011695
 801162c:	08011695 	.word	0x08011695
 8011630:	08011695 	.word	0x08011695
 8011634:	08011695 	.word	0x08011695
 8011638:	08011695 	.word	0x08011695
 801163c:	08011695 	.word	0x08011695
 8011640:	08011685 	.word	0x08011685
 8011644:	08011695 	.word	0x08011695
 8011648:	08011695 	.word	0x08011695
 801164c:	08011695 	.word	0x08011695
 8011650:	08011695 	.word	0x08011695
 8011654:	08011695 	.word	0x08011695
 8011658:	08011695 	.word	0x08011695
 801165c:	08011695 	.word	0x08011695
 8011660:	0801168d 	.word	0x0801168d
 8011664:	2301      	movs	r3, #1
 8011666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166a:	e050      	b.n	801170e <UART_SetConfig+0x7ae>
 801166c:	2304      	movs	r3, #4
 801166e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011672:	e04c      	b.n	801170e <UART_SetConfig+0x7ae>
 8011674:	2308      	movs	r3, #8
 8011676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167a:	e048      	b.n	801170e <UART_SetConfig+0x7ae>
 801167c:	2310      	movs	r3, #16
 801167e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011682:	e044      	b.n	801170e <UART_SetConfig+0x7ae>
 8011684:	2320      	movs	r3, #32
 8011686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168a:	e040      	b.n	801170e <UART_SetConfig+0x7ae>
 801168c:	2340      	movs	r3, #64	; 0x40
 801168e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011692:	e03c      	b.n	801170e <UART_SetConfig+0x7ae>
 8011694:	2380      	movs	r3, #128	; 0x80
 8011696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169a:	e038      	b.n	801170e <UART_SetConfig+0x7ae>
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a71      	ldr	r2, [pc, #452]	; (8011868 <UART_SetConfig+0x908>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d130      	bne.n	8011708 <UART_SetConfig+0x7a8>
 80116a6:	4b6f      	ldr	r3, [pc, #444]	; (8011864 <UART_SetConfig+0x904>)
 80116a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116aa:	f003 0307 	and.w	r3, r3, #7
 80116ae:	2b05      	cmp	r3, #5
 80116b0:	d826      	bhi.n	8011700 <UART_SetConfig+0x7a0>
 80116b2:	a201      	add	r2, pc, #4	; (adr r2, 80116b8 <UART_SetConfig+0x758>)
 80116b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b8:	080116d1 	.word	0x080116d1
 80116bc:	080116d9 	.word	0x080116d9
 80116c0:	080116e1 	.word	0x080116e1
 80116c4:	080116e9 	.word	0x080116e9
 80116c8:	080116f1 	.word	0x080116f1
 80116cc:	080116f9 	.word	0x080116f9
 80116d0:	2302      	movs	r3, #2
 80116d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116d6:	e01a      	b.n	801170e <UART_SetConfig+0x7ae>
 80116d8:	2304      	movs	r3, #4
 80116da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116de:	e016      	b.n	801170e <UART_SetConfig+0x7ae>
 80116e0:	2308      	movs	r3, #8
 80116e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116e6:	e012      	b.n	801170e <UART_SetConfig+0x7ae>
 80116e8:	2310      	movs	r3, #16
 80116ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ee:	e00e      	b.n	801170e <UART_SetConfig+0x7ae>
 80116f0:	2320      	movs	r3, #32
 80116f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116f6:	e00a      	b.n	801170e <UART_SetConfig+0x7ae>
 80116f8:	2340      	movs	r3, #64	; 0x40
 80116fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fe:	e006      	b.n	801170e <UART_SetConfig+0x7ae>
 8011700:	2380      	movs	r3, #128	; 0x80
 8011702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011706:	e002      	b.n	801170e <UART_SetConfig+0x7ae>
 8011708:	2380      	movs	r3, #128	; 0x80
 801170a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4a55      	ldr	r2, [pc, #340]	; (8011868 <UART_SetConfig+0x908>)
 8011714:	4293      	cmp	r3, r2
 8011716:	f040 80f8 	bne.w	801190a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801171a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801171e:	2b20      	cmp	r3, #32
 8011720:	dc46      	bgt.n	80117b0 <UART_SetConfig+0x850>
 8011722:	2b02      	cmp	r3, #2
 8011724:	db75      	blt.n	8011812 <UART_SetConfig+0x8b2>
 8011726:	3b02      	subs	r3, #2
 8011728:	2b1e      	cmp	r3, #30
 801172a:	d872      	bhi.n	8011812 <UART_SetConfig+0x8b2>
 801172c:	a201      	add	r2, pc, #4	; (adr r2, 8011734 <UART_SetConfig+0x7d4>)
 801172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011732:	bf00      	nop
 8011734:	080117b7 	.word	0x080117b7
 8011738:	08011813 	.word	0x08011813
 801173c:	080117bf 	.word	0x080117bf
 8011740:	08011813 	.word	0x08011813
 8011744:	08011813 	.word	0x08011813
 8011748:	08011813 	.word	0x08011813
 801174c:	080117cf 	.word	0x080117cf
 8011750:	08011813 	.word	0x08011813
 8011754:	08011813 	.word	0x08011813
 8011758:	08011813 	.word	0x08011813
 801175c:	08011813 	.word	0x08011813
 8011760:	08011813 	.word	0x08011813
 8011764:	08011813 	.word	0x08011813
 8011768:	08011813 	.word	0x08011813
 801176c:	080117df 	.word	0x080117df
 8011770:	08011813 	.word	0x08011813
 8011774:	08011813 	.word	0x08011813
 8011778:	08011813 	.word	0x08011813
 801177c:	08011813 	.word	0x08011813
 8011780:	08011813 	.word	0x08011813
 8011784:	08011813 	.word	0x08011813
 8011788:	08011813 	.word	0x08011813
 801178c:	08011813 	.word	0x08011813
 8011790:	08011813 	.word	0x08011813
 8011794:	08011813 	.word	0x08011813
 8011798:	08011813 	.word	0x08011813
 801179c:	08011813 	.word	0x08011813
 80117a0:	08011813 	.word	0x08011813
 80117a4:	08011813 	.word	0x08011813
 80117a8:	08011813 	.word	0x08011813
 80117ac:	08011805 	.word	0x08011805
 80117b0:	2b40      	cmp	r3, #64	; 0x40
 80117b2:	d02a      	beq.n	801180a <UART_SetConfig+0x8aa>
 80117b4:	e02d      	b.n	8011812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80117b6:	f7fb f8c3 	bl	800c940 <HAL_RCCEx_GetD3PCLK1Freq>
 80117ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117bc:	e02f      	b.n	801181e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fb f8d2 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117cc:	e027      	b.n	801181e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117ce:	f107 0318 	add.w	r3, r7, #24
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7fb fa1e 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117dc:	e01f      	b.n	801181e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117de:	4b21      	ldr	r3, [pc, #132]	; (8011864 <UART_SetConfig+0x904>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f003 0320 	and.w	r3, r3, #32
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d009      	beq.n	80117fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117ea:	4b1e      	ldr	r3, [pc, #120]	; (8011864 <UART_SetConfig+0x904>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	08db      	lsrs	r3, r3, #3
 80117f0:	f003 0303 	and.w	r3, r3, #3
 80117f4:	4a1d      	ldr	r2, [pc, #116]	; (801186c <UART_SetConfig+0x90c>)
 80117f6:	fa22 f303 	lsr.w	r3, r2, r3
 80117fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117fc:	e00f      	b.n	801181e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80117fe:	4b1b      	ldr	r3, [pc, #108]	; (801186c <UART_SetConfig+0x90c>)
 8011800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011802:	e00c      	b.n	801181e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011804:	4b1a      	ldr	r3, [pc, #104]	; (8011870 <UART_SetConfig+0x910>)
 8011806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011808:	e009      	b.n	801181e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801180a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801180e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011810:	e005      	b.n	801181e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011812:	2300      	movs	r3, #0
 8011814:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011816:	2301      	movs	r3, #1
 8011818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801181c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011820:	2b00      	cmp	r3, #0
 8011822:	f000 81ee 	beq.w	8011c02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182a:	4a12      	ldr	r2, [pc, #72]	; (8011874 <UART_SetConfig+0x914>)
 801182c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011830:	461a      	mov	r2, r3
 8011832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011834:	fbb3 f3f2 	udiv	r3, r3, r2
 8011838:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	685a      	ldr	r2, [r3, #4]
 801183e:	4613      	mov	r3, r2
 8011840:	005b      	lsls	r3, r3, #1
 8011842:	4413      	add	r3, r2
 8011844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011846:	429a      	cmp	r2, r3
 8011848:	d305      	bcc.n	8011856 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011852:	429a      	cmp	r2, r3
 8011854:	d910      	bls.n	8011878 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011856:	2301      	movs	r3, #1
 8011858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801185c:	e1d1      	b.n	8011c02 <UART_SetConfig+0xca2>
 801185e:	bf00      	nop
 8011860:	40011c00 	.word	0x40011c00
 8011864:	58024400 	.word	0x58024400
 8011868:	58000c00 	.word	0x58000c00
 801186c:	03d09000 	.word	0x03d09000
 8011870:	003d0900 	.word	0x003d0900
 8011874:	0801c5d8 	.word	0x0801c5d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801187a:	2200      	movs	r2, #0
 801187c:	60bb      	str	r3, [r7, #8]
 801187e:	60fa      	str	r2, [r7, #12]
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011884:	4ac0      	ldr	r2, [pc, #768]	; (8011b88 <UART_SetConfig+0xc28>)
 8011886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801188a:	b29b      	uxth	r3, r3
 801188c:	2200      	movs	r2, #0
 801188e:	603b      	str	r3, [r7, #0]
 8011890:	607a      	str	r2, [r7, #4]
 8011892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801189a:	f7ee ff5d 	bl	8000758 <__aeabi_uldivmod>
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4610      	mov	r0, r2
 80118a4:	4619      	mov	r1, r3
 80118a6:	f04f 0200 	mov.w	r2, #0
 80118aa:	f04f 0300 	mov.w	r3, #0
 80118ae:	020b      	lsls	r3, r1, #8
 80118b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80118b4:	0202      	lsls	r2, r0, #8
 80118b6:	6979      	ldr	r1, [r7, #20]
 80118b8:	6849      	ldr	r1, [r1, #4]
 80118ba:	0849      	lsrs	r1, r1, #1
 80118bc:	2000      	movs	r0, #0
 80118be:	460c      	mov	r4, r1
 80118c0:	4605      	mov	r5, r0
 80118c2:	eb12 0804 	adds.w	r8, r2, r4
 80118c6:	eb43 0905 	adc.w	r9, r3, r5
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	469a      	mov	sl, r3
 80118d2:	4693      	mov	fp, r2
 80118d4:	4652      	mov	r2, sl
 80118d6:	465b      	mov	r3, fp
 80118d8:	4640      	mov	r0, r8
 80118da:	4649      	mov	r1, r9
 80118dc:	f7ee ff3c 	bl	8000758 <__aeabi_uldivmod>
 80118e0:	4602      	mov	r2, r0
 80118e2:	460b      	mov	r3, r1
 80118e4:	4613      	mov	r3, r2
 80118e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80118e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118ee:	d308      	bcc.n	8011902 <UART_SetConfig+0x9a2>
 80118f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118f6:	d204      	bcs.n	8011902 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118fe:	60da      	str	r2, [r3, #12]
 8011900:	e17f      	b.n	8011c02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011902:	2301      	movs	r3, #1
 8011904:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011908:	e17b      	b.n	8011c02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011912:	f040 80bd 	bne.w	8011a90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011916:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801191a:	2b20      	cmp	r3, #32
 801191c:	dc48      	bgt.n	80119b0 <UART_SetConfig+0xa50>
 801191e:	2b00      	cmp	r3, #0
 8011920:	db7b      	blt.n	8011a1a <UART_SetConfig+0xaba>
 8011922:	2b20      	cmp	r3, #32
 8011924:	d879      	bhi.n	8011a1a <UART_SetConfig+0xaba>
 8011926:	a201      	add	r2, pc, #4	; (adr r2, 801192c <UART_SetConfig+0x9cc>)
 8011928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801192c:	080119b7 	.word	0x080119b7
 8011930:	080119bf 	.word	0x080119bf
 8011934:	08011a1b 	.word	0x08011a1b
 8011938:	08011a1b 	.word	0x08011a1b
 801193c:	080119c7 	.word	0x080119c7
 8011940:	08011a1b 	.word	0x08011a1b
 8011944:	08011a1b 	.word	0x08011a1b
 8011948:	08011a1b 	.word	0x08011a1b
 801194c:	080119d7 	.word	0x080119d7
 8011950:	08011a1b 	.word	0x08011a1b
 8011954:	08011a1b 	.word	0x08011a1b
 8011958:	08011a1b 	.word	0x08011a1b
 801195c:	08011a1b 	.word	0x08011a1b
 8011960:	08011a1b 	.word	0x08011a1b
 8011964:	08011a1b 	.word	0x08011a1b
 8011968:	08011a1b 	.word	0x08011a1b
 801196c:	080119e7 	.word	0x080119e7
 8011970:	08011a1b 	.word	0x08011a1b
 8011974:	08011a1b 	.word	0x08011a1b
 8011978:	08011a1b 	.word	0x08011a1b
 801197c:	08011a1b 	.word	0x08011a1b
 8011980:	08011a1b 	.word	0x08011a1b
 8011984:	08011a1b 	.word	0x08011a1b
 8011988:	08011a1b 	.word	0x08011a1b
 801198c:	08011a1b 	.word	0x08011a1b
 8011990:	08011a1b 	.word	0x08011a1b
 8011994:	08011a1b 	.word	0x08011a1b
 8011998:	08011a1b 	.word	0x08011a1b
 801199c:	08011a1b 	.word	0x08011a1b
 80119a0:	08011a1b 	.word	0x08011a1b
 80119a4:	08011a1b 	.word	0x08011a1b
 80119a8:	08011a1b 	.word	0x08011a1b
 80119ac:	08011a0d 	.word	0x08011a0d
 80119b0:	2b40      	cmp	r3, #64	; 0x40
 80119b2:	d02e      	beq.n	8011a12 <UART_SetConfig+0xab2>
 80119b4:	e031      	b.n	8011a1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80119b6:	f7f9 f925 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 80119ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119bc:	e033      	b.n	8011a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80119be:	f7f9 f937 	bl	800ac30 <HAL_RCC_GetPCLK2Freq>
 80119c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80119c4:	e02f      	b.n	8011a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fa ffce 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80119d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119d4:	e027      	b.n	8011a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119d6:	f107 0318 	add.w	r3, r7, #24
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fb f91a 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119e4:	e01f      	b.n	8011a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119e6:	4b69      	ldr	r3, [pc, #420]	; (8011b8c <UART_SetConfig+0xc2c>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f003 0320 	and.w	r3, r3, #32
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d009      	beq.n	8011a06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119f2:	4b66      	ldr	r3, [pc, #408]	; (8011b8c <UART_SetConfig+0xc2c>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	08db      	lsrs	r3, r3, #3
 80119f8:	f003 0303 	and.w	r3, r3, #3
 80119fc:	4a64      	ldr	r2, [pc, #400]	; (8011b90 <UART_SetConfig+0xc30>)
 80119fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a04:	e00f      	b.n	8011a26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011a06:	4b62      	ldr	r3, [pc, #392]	; (8011b90 <UART_SetConfig+0xc30>)
 8011a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a0a:	e00c      	b.n	8011a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a0c:	4b61      	ldr	r3, [pc, #388]	; (8011b94 <UART_SetConfig+0xc34>)
 8011a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a10:	e009      	b.n	8011a26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a18:	e005      	b.n	8011a26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011a1e:	2301      	movs	r3, #1
 8011a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011a24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f000 80ea 	beq.w	8011c02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a32:	4a55      	ldr	r2, [pc, #340]	; (8011b88 <UART_SetConfig+0xc28>)
 8011a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a38:	461a      	mov	r2, r3
 8011a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a40:	005a      	lsls	r2, r3, #1
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	085b      	lsrs	r3, r3, #1
 8011a48:	441a      	add	r2, r3
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a56:	2b0f      	cmp	r3, #15
 8011a58:	d916      	bls.n	8011a88 <UART_SetConfig+0xb28>
 8011a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a60:	d212      	bcs.n	8011a88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	f023 030f 	bic.w	r3, r3, #15
 8011a6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6e:	085b      	lsrs	r3, r3, #1
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	f003 0307 	and.w	r3, r3, #7
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011a84:	60da      	str	r2, [r3, #12]
 8011a86:	e0bc      	b.n	8011c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a8e:	e0b8      	b.n	8011c02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011a90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a94:	2b20      	cmp	r3, #32
 8011a96:	dc4b      	bgt.n	8011b30 <UART_SetConfig+0xbd0>
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f2c0 8087 	blt.w	8011bac <UART_SetConfig+0xc4c>
 8011a9e:	2b20      	cmp	r3, #32
 8011aa0:	f200 8084 	bhi.w	8011bac <UART_SetConfig+0xc4c>
 8011aa4:	a201      	add	r2, pc, #4	; (adr r2, 8011aac <UART_SetConfig+0xb4c>)
 8011aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aaa:	bf00      	nop
 8011aac:	08011b37 	.word	0x08011b37
 8011ab0:	08011b3f 	.word	0x08011b3f
 8011ab4:	08011bad 	.word	0x08011bad
 8011ab8:	08011bad 	.word	0x08011bad
 8011abc:	08011b47 	.word	0x08011b47
 8011ac0:	08011bad 	.word	0x08011bad
 8011ac4:	08011bad 	.word	0x08011bad
 8011ac8:	08011bad 	.word	0x08011bad
 8011acc:	08011b57 	.word	0x08011b57
 8011ad0:	08011bad 	.word	0x08011bad
 8011ad4:	08011bad 	.word	0x08011bad
 8011ad8:	08011bad 	.word	0x08011bad
 8011adc:	08011bad 	.word	0x08011bad
 8011ae0:	08011bad 	.word	0x08011bad
 8011ae4:	08011bad 	.word	0x08011bad
 8011ae8:	08011bad 	.word	0x08011bad
 8011aec:	08011b67 	.word	0x08011b67
 8011af0:	08011bad 	.word	0x08011bad
 8011af4:	08011bad 	.word	0x08011bad
 8011af8:	08011bad 	.word	0x08011bad
 8011afc:	08011bad 	.word	0x08011bad
 8011b00:	08011bad 	.word	0x08011bad
 8011b04:	08011bad 	.word	0x08011bad
 8011b08:	08011bad 	.word	0x08011bad
 8011b0c:	08011bad 	.word	0x08011bad
 8011b10:	08011bad 	.word	0x08011bad
 8011b14:	08011bad 	.word	0x08011bad
 8011b18:	08011bad 	.word	0x08011bad
 8011b1c:	08011bad 	.word	0x08011bad
 8011b20:	08011bad 	.word	0x08011bad
 8011b24:	08011bad 	.word	0x08011bad
 8011b28:	08011bad 	.word	0x08011bad
 8011b2c:	08011b9f 	.word	0x08011b9f
 8011b30:	2b40      	cmp	r3, #64	; 0x40
 8011b32:	d037      	beq.n	8011ba4 <UART_SetConfig+0xc44>
 8011b34:	e03a      	b.n	8011bac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b36:	f7f9 f865 	bl	800ac04 <HAL_RCC_GetPCLK1Freq>
 8011b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b3c:	e03c      	b.n	8011bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b3e:	f7f9 f877 	bl	800ac30 <HAL_RCC_GetPCLK2Freq>
 8011b42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b44:	e038      	b.n	8011bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fa ff0e 	bl	800c96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b54:	e030      	b.n	8011bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b56:	f107 0318 	add.w	r3, r7, #24
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fb f85a 	bl	800cc14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b60:	69fb      	ldr	r3, [r7, #28]
 8011b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b64:	e028      	b.n	8011bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b66:	4b09      	ldr	r3, [pc, #36]	; (8011b8c <UART_SetConfig+0xc2c>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f003 0320 	and.w	r3, r3, #32
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d012      	beq.n	8011b98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b72:	4b06      	ldr	r3, [pc, #24]	; (8011b8c <UART_SetConfig+0xc2c>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	08db      	lsrs	r3, r3, #3
 8011b78:	f003 0303 	and.w	r3, r3, #3
 8011b7c:	4a04      	ldr	r2, [pc, #16]	; (8011b90 <UART_SetConfig+0xc30>)
 8011b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8011b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b84:	e018      	b.n	8011bb8 <UART_SetConfig+0xc58>
 8011b86:	bf00      	nop
 8011b88:	0801c5d8 	.word	0x0801c5d8
 8011b8c:	58024400 	.word	0x58024400
 8011b90:	03d09000 	.word	0x03d09000
 8011b94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011b98:	4b24      	ldr	r3, [pc, #144]	; (8011c2c <UART_SetConfig+0xccc>)
 8011b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b9c:	e00c      	b.n	8011bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b9e:	4b24      	ldr	r3, [pc, #144]	; (8011c30 <UART_SetConfig+0xcd0>)
 8011ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ba2:	e009      	b.n	8011bb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011baa:	e005      	b.n	8011bb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011bac:	2300      	movs	r3, #0
 8011bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011bb6:	bf00      	nop
    }

    if (pclk != 0U)
 8011bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d021      	beq.n	8011c02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc2:	4a1c      	ldr	r2, [pc, #112]	; (8011c34 <UART_SetConfig+0xcd4>)
 8011bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	085b      	lsrs	r3, r3, #1
 8011bd6:	441a      	add	r2, r3
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011be0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be4:	2b0f      	cmp	r3, #15
 8011be6:	d909      	bls.n	8011bfc <UART_SetConfig+0xc9c>
 8011be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bee:	d205      	bcs.n	8011bfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	60da      	str	r2, [r3, #12]
 8011bfa:	e002      	b.n	8011c02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	2201      	movs	r2, #1
 8011c06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	2200      	movs	r2, #0
 8011c16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011c1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3748      	adds	r7, #72	; 0x48
 8011c26:	46bd      	mov	sp, r7
 8011c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011c2c:	03d09000 	.word	0x03d09000
 8011c30:	003d0900 	.word	0x003d0900
 8011c34:	0801c5d8 	.word	0x0801c5d8

08011c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c44:	f003 0301 	and.w	r3, r3, #1
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00a      	beq.n	8011c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	430a      	orrs	r2, r1
 8011c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c66:	f003 0302 	and.w	r3, r3, #2
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d00a      	beq.n	8011c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	430a      	orrs	r2, r1
 8011c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c88:	f003 0304 	and.w	r3, r3, #4
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00a      	beq.n	8011ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	430a      	orrs	r2, r1
 8011ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011caa:	f003 0308 	and.w	r3, r3, #8
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d00a      	beq.n	8011cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	430a      	orrs	r2, r1
 8011cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ccc:	f003 0310 	and.w	r3, r3, #16
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d00a      	beq.n	8011cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	689b      	ldr	r3, [r3, #8]
 8011cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	430a      	orrs	r2, r1
 8011ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cee:	f003 0320 	and.w	r3, r3, #32
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d00a      	beq.n	8011d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	430a      	orrs	r2, r1
 8011d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d01a      	beq.n	8011d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	430a      	orrs	r2, r1
 8011d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d36:	d10a      	bne.n	8011d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	430a      	orrs	r2, r1
 8011d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d00a      	beq.n	8011d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	430a      	orrs	r2, r1
 8011d6e:	605a      	str	r2, [r3, #4]
  }
}
 8011d70:	bf00      	nop
 8011d72:	370c      	adds	r7, #12
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr

08011d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b098      	sub	sp, #96	; 0x60
 8011d80:	af02      	add	r7, sp, #8
 8011d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d8c:	f7f2 f892 	bl	8003eb4 <HAL_GetTick>
 8011d90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f003 0308 	and.w	r3, r3, #8
 8011d9c:	2b08      	cmp	r3, #8
 8011d9e:	d12f      	bne.n	8011e00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011da4:	9300      	str	r3, [sp, #0]
 8011da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011da8:	2200      	movs	r2, #0
 8011daa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f88e 	bl	8011ed0 <UART_WaitOnFlagUntilTimeout>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d022      	beq.n	8011e00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	e853 3f00 	ldrex	r3, [r3]
 8011dc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011dce:	653b      	str	r3, [r7, #80]	; 0x50
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8011dda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ddc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011de0:	e841 2300 	strex	r3, r2, [r1]
 8011de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d1e6      	bne.n	8011dba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2220      	movs	r2, #32
 8011df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	e063      	b.n	8011ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f003 0304 	and.w	r3, r3, #4
 8011e0a:	2b04      	cmp	r3, #4
 8011e0c:	d149      	bne.n	8011ea2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e12:	9300      	str	r3, [sp, #0]
 8011e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e16:	2200      	movs	r2, #0
 8011e18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f000 f857 	bl	8011ed0 <UART_WaitOnFlagUntilTimeout>
 8011e22:	4603      	mov	r3, r0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d03c      	beq.n	8011ea2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e30:	e853 3f00 	ldrex	r3, [r3]
 8011e34:	623b      	str	r3, [r7, #32]
   return(result);
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	461a      	mov	r2, r3
 8011e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e46:	633b      	str	r3, [r7, #48]	; 0x30
 8011e48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e4e:	e841 2300 	strex	r3, r2, [r1]
 8011e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1e6      	bne.n	8011e28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	3308      	adds	r3, #8
 8011e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	e853 3f00 	ldrex	r3, [r3]
 8011e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	f023 0301 	bic.w	r3, r3, #1
 8011e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	3308      	adds	r3, #8
 8011e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e7a:	61fa      	str	r2, [r7, #28]
 8011e7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7e:	69b9      	ldr	r1, [r7, #24]
 8011e80:	69fa      	ldr	r2, [r7, #28]
 8011e82:	e841 2300 	strex	r3, r2, [r1]
 8011e86:	617b      	str	r3, [r7, #20]
   return(result);
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1e5      	bne.n	8011e5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2220      	movs	r2, #32
 8011e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e9e:	2303      	movs	r3, #3
 8011ea0:	e012      	b.n	8011ec8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2220      	movs	r2, #32
 8011ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2220      	movs	r2, #32
 8011eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3758      	adds	r7, #88	; 0x58
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	60f8      	str	r0, [r7, #12]
 8011ed8:	60b9      	str	r1, [r7, #8]
 8011eda:	603b      	str	r3, [r7, #0]
 8011edc:	4613      	mov	r3, r2
 8011ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ee0:	e049      	b.n	8011f76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ee2:	69bb      	ldr	r3, [r7, #24]
 8011ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee8:	d045      	beq.n	8011f76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011eea:	f7f1 ffe3 	bl	8003eb4 <HAL_GetTick>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	69ba      	ldr	r2, [r7, #24]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d302      	bcc.n	8011f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8011efa:	69bb      	ldr	r3, [r7, #24]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011f00:	2303      	movs	r3, #3
 8011f02:	e048      	b.n	8011f96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f003 0304 	and.w	r3, r3, #4
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d031      	beq.n	8011f76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	69db      	ldr	r3, [r3, #28]
 8011f18:	f003 0308 	and.w	r3, r3, #8
 8011f1c:	2b08      	cmp	r3, #8
 8011f1e:	d110      	bne.n	8011f42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2208      	movs	r2, #8
 8011f26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f000 f839 	bl	8011fa0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	2208      	movs	r2, #8
 8011f32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e029      	b.n	8011f96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	69db      	ldr	r3, [r3, #28]
 8011f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f50:	d111      	bne.n	8011f76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	f000 f81f 	bl	8011fa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2220      	movs	r2, #32
 8011f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011f72:	2303      	movs	r3, #3
 8011f74:	e00f      	b.n	8011f96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	69da      	ldr	r2, [r3, #28]
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	4013      	ands	r3, r2
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	bf0c      	ite	eq
 8011f86:	2301      	moveq	r3, #1
 8011f88:	2300      	movne	r3, #0
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	79fb      	ldrb	r3, [r7, #7]
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d0a6      	beq.n	8011ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011f94:	2300      	movs	r3, #0
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3710      	adds	r7, #16
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
	...

08011fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b095      	sub	sp, #84	; 0x54
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb0:	e853 3f00 	ldrex	r3, [r3]
 8011fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8011fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011fce:	e841 2300 	strex	r3, r2, [r1]
 8011fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e6      	bne.n	8011fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	3308      	adds	r3, #8
 8011fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe2:	6a3b      	ldr	r3, [r7, #32]
 8011fe4:	e853 3f00 	ldrex	r3, [r3]
 8011fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fea:	69fa      	ldr	r2, [r7, #28]
 8011fec:	4b1e      	ldr	r3, [pc, #120]	; (8012068 <UART_EndRxTransfer+0xc8>)
 8011fee:	4013      	ands	r3, r2
 8011ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	3308      	adds	r3, #8
 8011ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012002:	e841 2300 	strex	r3, r2, [r1]
 8012006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	2b00      	cmp	r3, #0
 801200c:	d1e5      	bne.n	8011fda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012012:	2b01      	cmp	r3, #1
 8012014:	d118      	bne.n	8012048 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	e853 3f00 	ldrex	r3, [r3]
 8012022:	60bb      	str	r3, [r7, #8]
   return(result);
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	f023 0310 	bic.w	r3, r3, #16
 801202a:	647b      	str	r3, [r7, #68]	; 0x44
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	461a      	mov	r2, r3
 8012032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012034:	61bb      	str	r3, [r7, #24]
 8012036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012038:	6979      	ldr	r1, [r7, #20]
 801203a:	69ba      	ldr	r2, [r7, #24]
 801203c:	e841 2300 	strex	r3, r2, [r1]
 8012040:	613b      	str	r3, [r7, #16]
   return(result);
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1e6      	bne.n	8012016 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2220      	movs	r2, #32
 801204c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2200      	movs	r2, #0
 801205a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801205c:	bf00      	nop
 801205e:	3754      	adds	r7, #84	; 0x54
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	effffffe 	.word	0xeffffffe

0801206c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801206c:	b480      	push	{r7}
 801206e:	b085      	sub	sp, #20
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801207a:	2b01      	cmp	r3, #1
 801207c:	d101      	bne.n	8012082 <HAL_UARTEx_DisableFifoMode+0x16>
 801207e:	2302      	movs	r3, #2
 8012080:	e027      	b.n	80120d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2201      	movs	r2, #1
 8012086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2224      	movs	r2, #36	; 0x24
 801208e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f022 0201 	bic.w	r2, r2, #1
 80120a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80120b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2220      	movs	r2, #32
 80120c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120d0:	2300      	movs	r3, #0
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3714      	adds	r7, #20
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80120de:	b580      	push	{r7, lr}
 80120e0:	b084      	sub	sp, #16
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d101      	bne.n	80120f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80120f2:	2302      	movs	r3, #2
 80120f4:	e02d      	b.n	8012152 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2201      	movs	r2, #1
 80120fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2224      	movs	r2, #36	; 0x24
 8012102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f022 0201 	bic.w	r2, r2, #1
 801211c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	430a      	orrs	r2, r1
 8012130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 f850 	bl	80121d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	68fa      	ldr	r2, [r7, #12]
 801213e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2220      	movs	r2, #32
 8012144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012150:	2300      	movs	r3, #0
}
 8012152:	4618      	mov	r0, r3
 8012154:	3710      	adds	r7, #16
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}

0801215a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801215a:	b580      	push	{r7, lr}
 801215c:	b084      	sub	sp, #16
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
 8012162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801216a:	2b01      	cmp	r3, #1
 801216c:	d101      	bne.n	8012172 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801216e:	2302      	movs	r3, #2
 8012170:	e02d      	b.n	80121ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2201      	movs	r2, #1
 8012176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2224      	movs	r2, #36	; 0x24
 801217e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f022 0201 	bic.w	r2, r2, #1
 8012198:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	683a      	ldr	r2, [r7, #0]
 80121aa:	430a      	orrs	r2, r1
 80121ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 f812 	bl	80121d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	68fa      	ldr	r2, [r7, #12]
 80121ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2220      	movs	r2, #32
 80121c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
	...

080121d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80121d8:	b480      	push	{r7}
 80121da:	b085      	sub	sp, #20
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d108      	bne.n	80121fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2201      	movs	r2, #1
 80121ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2201      	movs	r2, #1
 80121f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80121f8:	e031      	b.n	801225e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80121fa:	2310      	movs	r3, #16
 80121fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80121fe:	2310      	movs	r3, #16
 8012200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	0e5b      	lsrs	r3, r3, #25
 801220a:	b2db      	uxtb	r3, r3
 801220c:	f003 0307 	and.w	r3, r3, #7
 8012210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	0f5b      	lsrs	r3, r3, #29
 801221a:	b2db      	uxtb	r3, r3
 801221c:	f003 0307 	and.w	r3, r3, #7
 8012220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012222:	7bbb      	ldrb	r3, [r7, #14]
 8012224:	7b3a      	ldrb	r2, [r7, #12]
 8012226:	4911      	ldr	r1, [pc, #68]	; (801226c <UARTEx_SetNbDataToProcess+0x94>)
 8012228:	5c8a      	ldrb	r2, [r1, r2]
 801222a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801222e:	7b3a      	ldrb	r2, [r7, #12]
 8012230:	490f      	ldr	r1, [pc, #60]	; (8012270 <UARTEx_SetNbDataToProcess+0x98>)
 8012232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012234:	fb93 f3f2 	sdiv	r3, r3, r2
 8012238:	b29a      	uxth	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012240:	7bfb      	ldrb	r3, [r7, #15]
 8012242:	7b7a      	ldrb	r2, [r7, #13]
 8012244:	4909      	ldr	r1, [pc, #36]	; (801226c <UARTEx_SetNbDataToProcess+0x94>)
 8012246:	5c8a      	ldrb	r2, [r1, r2]
 8012248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801224c:	7b7a      	ldrb	r2, [r7, #13]
 801224e:	4908      	ldr	r1, [pc, #32]	; (8012270 <UARTEx_SetNbDataToProcess+0x98>)
 8012250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012252:	fb93 f3f2 	sdiv	r3, r3, r2
 8012256:	b29a      	uxth	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801225e:	bf00      	nop
 8012260:	3714      	adds	r7, #20
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop
 801226c:	0801c5f0 	.word	0x0801c5f0
 8012270:	0801c5f8 	.word	0x0801c5f8

08012274 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012274:	b084      	sub	sp, #16
 8012276:	b480      	push	{r7}
 8012278:	b085      	sub	sp, #20
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	f107 001c 	add.w	r0, r7, #28
 8012282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801228a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801228c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801228e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012292:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012294:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012296:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801229a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801229c:	68fa      	ldr	r2, [r7, #12]
 801229e:	4313      	orrs	r3, r2
 80122a0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	685a      	ldr	r2, [r3, #4]
 80122a6:	4b07      	ldr	r3, [pc, #28]	; (80122c4 <SDMMC_Init+0x50>)
 80122a8:	4013      	ands	r3, r2
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	431a      	orrs	r2, r3
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80122b2:	2300      	movs	r3, #0
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3714      	adds	r7, #20
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	b004      	add	sp, #16
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop
 80122c4:	ffc02c00 	.word	0xffc02c00

080122c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr

080122e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	370c      	adds	r7, #12
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr

08012304 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f043 0203 	orr.w	r2, r3, #3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012318:	2300      	movs	r3, #0
}
 801231a:	4618      	mov	r0, r3
 801231c:	370c      	adds	r7, #12
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr

08012326 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012326:	b480      	push	{r7}
 8012328:	b083      	sub	sp, #12
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f003 0303 	and.w	r3, r3, #3
}
 8012336:	4618      	mov	r0, r3
 8012338:	370c      	adds	r7, #12
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr
	...

08012344 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012344:	b480      	push	{r7}
 8012346:	b085      	sub	sp, #20
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801234e:	2300      	movs	r3, #0
 8012350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012362:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012368:	431a      	orrs	r2, r3
                       Command->CPSM);
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801236e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	4313      	orrs	r3, r2
 8012374:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	68da      	ldr	r2, [r3, #12]
 801237a:	4b06      	ldr	r3, [pc, #24]	; (8012394 <SDMMC_SendCommand+0x50>)
 801237c:	4013      	ands	r3, r2
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	431a      	orrs	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr
 8012394:	fffee0c0 	.word	0xfffee0c0

08012398 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	691b      	ldr	r3, [r3, #16]
 80123a4:	b2db      	uxtb	r3, r3
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr

080123b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80123b2:	b480      	push	{r7}
 80123b4:	b085      	sub	sp, #20
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
 80123ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3314      	adds	r3, #20
 80123c0:	461a      	mov	r2, r3
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	4413      	add	r3, r2
 80123c6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3714      	adds	r7, #20
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr

080123d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80123d8:	b480      	push	{r7}
 80123da:	b085      	sub	sp, #20
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80123e2:	2300      	movs	r3, #0
 80123e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	685a      	ldr	r2, [r3, #4]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80123fe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012404:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801240a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	4313      	orrs	r3, r2
 8012410:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012416:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	431a      	orrs	r2, r3
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012422:	2300      	movs	r3, #0

}
 8012424:	4618      	mov	r0, r3
 8012426:	3714      	adds	r7, #20
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr

08012430 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801243e:	2310      	movs	r3, #16
 8012440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012448:	2300      	movs	r3, #0
 801244a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012452:	f107 0308 	add.w	r3, r7, #8
 8012456:	4619      	mov	r1, r3
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7ff ff73 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012462:	2110      	movs	r1, #16
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f000 fa5f 	bl	8012928 <SDMMC_GetCmdResp1>
 801246a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801246c:	69fb      	ldr	r3, [r7, #28]
}
 801246e:	4618      	mov	r0, r3
 8012470:	3720      	adds	r7, #32
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b088      	sub	sp, #32
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012484:	2311      	movs	r3, #17
 8012486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012488:	f44f 7380 	mov.w	r3, #256	; 0x100
 801248c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801248e:	2300      	movs	r3, #0
 8012490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012498:	f107 0308 	add.w	r3, r7, #8
 801249c:	4619      	mov	r1, r3
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff ff50 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80124a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80124a8:	2111      	movs	r1, #17
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 fa3c 	bl	8012928 <SDMMC_GetCmdResp1>
 80124b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124b2:	69fb      	ldr	r3, [r7, #28]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80124ca:	2312      	movs	r3, #18
 80124cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124d4:	2300      	movs	r3, #0
 80124d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124de:	f107 0308 	add.w	r3, r7, #8
 80124e2:	4619      	mov	r1, r3
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7ff ff2d 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80124ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ee:	2112      	movs	r1, #18
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f000 fa19 	bl	8012928 <SDMMC_GetCmdResp1>
 80124f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124f8:	69fb      	ldr	r3, [r7, #28]
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3720      	adds	r7, #32
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b088      	sub	sp, #32
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
 801250a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012510:	2318      	movs	r3, #24
 8012512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801251a:	2300      	movs	r3, #0
 801251c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801251e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012524:	f107 0308 	add.w	r3, r7, #8
 8012528:	4619      	mov	r1, r3
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff ff0a 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012530:	f241 3288 	movw	r2, #5000	; 0x1388
 8012534:	2118      	movs	r1, #24
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f000 f9f6 	bl	8012928 <SDMMC_GetCmdResp1>
 801253c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801253e:	69fb      	ldr	r3, [r7, #28]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3720      	adds	r7, #32
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b088      	sub	sp, #32
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012556:	2319      	movs	r3, #25
 8012558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801255a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801255e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012560:	2300      	movs	r3, #0
 8012562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012568:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801256a:	f107 0308 	add.w	r3, r7, #8
 801256e:	4619      	mov	r1, r3
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f7ff fee7 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012576:	f241 3288 	movw	r2, #5000	; 0x1388
 801257a:	2119      	movs	r1, #25
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f000 f9d3 	bl	8012928 <SDMMC_GetCmdResp1>
 8012582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012584:	69fb      	ldr	r3, [r7, #28]
}
 8012586:	4618      	mov	r0, r3
 8012588:	3720      	adds	r7, #32
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
	...

08012590 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b088      	sub	sp, #32
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012598:	2300      	movs	r3, #0
 801259a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801259c:	230c      	movs	r3, #12
 801259e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125a6:	2300      	movs	r3, #0
 80125a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125ae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125c8:	f107 0308 	add.w	r3, r7, #8
 80125cc:	4619      	mov	r1, r3
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff feb8 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80125d4:	4a0b      	ldr	r2, [pc, #44]	; (8012604 <SDMMC_CmdStopTransfer+0x74>)
 80125d6:	210c      	movs	r1, #12
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f000 f9a5 	bl	8012928 <SDMMC_GetCmdResp1>
 80125de:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80125f2:	d101      	bne.n	80125f8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80125f4:	2300      	movs	r3, #0
 80125f6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80125f8:	69fb      	ldr	r3, [r7, #28]
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3720      	adds	r7, #32
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	05f5e100 	.word	0x05f5e100

08012608 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b088      	sub	sp, #32
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012616:	2307      	movs	r3, #7
 8012618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801261a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801261e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012620:	2300      	movs	r3, #0
 8012622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801262a:	f107 0308 	add.w	r3, r7, #8
 801262e:	4619      	mov	r1, r3
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff fe87 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012636:	f241 3288 	movw	r2, #5000	; 0x1388
 801263a:	2107      	movs	r1, #7
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 f973 	bl	8012928 <SDMMC_GetCmdResp1>
 8012642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012644:	69fb      	ldr	r3, [r7, #28]
}
 8012646:	4618      	mov	r0, r3
 8012648:	3720      	adds	r7, #32
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b088      	sub	sp, #32
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012656:	2300      	movs	r3, #0
 8012658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801265a:	2300      	movs	r3, #0
 801265c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801265e:	2300      	movs	r3, #0
 8012660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012662:	2300      	movs	r3, #0
 8012664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801266a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801266c:	f107 0308 	add.w	r3, r7, #8
 8012670:	4619      	mov	r1, r3
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ff fe66 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fb97 	bl	8012dac <SDMMC_GetCmdError>
 801267e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012680:	69fb      	ldr	r3, [r7, #28]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3720      	adds	r7, #32
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801268a:	b580      	push	{r7, lr}
 801268c:	b088      	sub	sp, #32
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012692:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012698:	2308      	movs	r3, #8
 801269a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801269c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126a2:	2300      	movs	r3, #0
 80126a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126ac:	f107 0308 	add.w	r3, r7, #8
 80126b0:	4619      	mov	r1, r3
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f7ff fe46 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 fb29 	bl	8012d10 <SDMMC_GetCmdResp7>
 80126be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126c0:	69fb      	ldr	r3, [r7, #28]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3720      	adds	r7, #32
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b088      	sub	sp, #32
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80126d8:	2337      	movs	r3, #55	; 0x37
 80126da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126e2:	2300      	movs	r3, #0
 80126e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126ec:	f107 0308 	add.w	r3, r7, #8
 80126f0:	4619      	mov	r1, r3
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7ff fe26 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80126f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80126fc:	2137      	movs	r1, #55	; 0x37
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f000 f912 	bl	8012928 <SDMMC_GetCmdResp1>
 8012704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012706:	69fb      	ldr	r3, [r7, #28]
}
 8012708:	4618      	mov	r0, r3
 801270a:	3720      	adds	r7, #32
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b088      	sub	sp, #32
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801271e:	2329      	movs	r3, #41	; 0x29
 8012720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012728:	2300      	movs	r3, #0
 801272a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801272c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012730:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012732:	f107 0308 	add.w	r3, r7, #8
 8012736:	4619      	mov	r1, r3
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7ff fe03 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fa2e 	bl	8012ba0 <SDMMC_GetCmdResp3>
 8012744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012746:	69fb      	ldr	r3, [r7, #28]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3720      	adds	r7, #32
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b088      	sub	sp, #32
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801275e:	2306      	movs	r3, #6
 8012760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012768:	2300      	movs	r3, #0
 801276a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801276c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012772:	f107 0308 	add.w	r3, r7, #8
 8012776:	4619      	mov	r1, r3
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff fde3 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012782:	2106      	movs	r1, #6
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f000 f8cf 	bl	8012928 <SDMMC_GetCmdResp1>
 801278a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801278c:	69fb      	ldr	r3, [r7, #28]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3720      	adds	r7, #32
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b088      	sub	sp, #32
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801279e:	2300      	movs	r3, #0
 80127a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80127a2:	2333      	movs	r3, #51	; 0x33
 80127a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127ac:	2300      	movs	r3, #0
 80127ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127b6:	f107 0308 	add.w	r3, r7, #8
 80127ba:	4619      	mov	r1, r3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff fdc1 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80127c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c6:	2133      	movs	r1, #51	; 0x33
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f000 f8ad 	bl	8012928 <SDMMC_GetCmdResp1>
 80127ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127d0:	69fb      	ldr	r3, [r7, #28]
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3720      	adds	r7, #32
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80127da:	b580      	push	{r7, lr}
 80127dc:	b088      	sub	sp, #32
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80127e2:	2300      	movs	r3, #0
 80127e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80127e6:	2302      	movs	r3, #2
 80127e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80127ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80127ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127f0:	2300      	movs	r3, #0
 80127f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127fa:	f107 0308 	add.w	r3, r7, #8
 80127fe:	4619      	mov	r1, r3
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7ff fd9f 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 f980 	bl	8012b0c <SDMMC_GetCmdResp2>
 801280c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801280e:	69fb      	ldr	r3, [r7, #28]
}
 8012810:	4618      	mov	r0, r3
 8012812:	3720      	adds	r7, #32
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b088      	sub	sp, #32
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012826:	2309      	movs	r3, #9
 8012828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801282a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801282e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012830:	2300      	movs	r3, #0
 8012832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801283a:	f107 0308 	add.w	r3, r7, #8
 801283e:	4619      	mov	r1, r3
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f7ff fd7f 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 f960 	bl	8012b0c <SDMMC_GetCmdResp2>
 801284c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801284e:	69fb      	ldr	r3, [r7, #28]
}
 8012850:	4618      	mov	r0, r3
 8012852:	3720      	adds	r7, #32
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b088      	sub	sp, #32
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012862:	2300      	movs	r3, #0
 8012864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012866:	2303      	movs	r3, #3
 8012868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801286a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801286e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012870:	2300      	movs	r3, #0
 8012872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801287a:	f107 0308 	add.w	r3, r7, #8
 801287e:	4619      	mov	r1, r3
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff fd5f 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012886:	683a      	ldr	r2, [r7, #0]
 8012888:	2103      	movs	r1, #3
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 f9c8 	bl	8012c20 <SDMMC_GetCmdResp6>
 8012890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012892:	69fb      	ldr	r3, [r7, #28]
}
 8012894:	4618      	mov	r0, r3
 8012896:	3720      	adds	r7, #32
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b088      	sub	sp, #32
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80128aa:	230d      	movs	r3, #13
 80128ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128b4:	2300      	movs	r3, #0
 80128b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128be:	f107 0308 	add.w	r3, r7, #8
 80128c2:	4619      	mov	r1, r3
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f7ff fd3d 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80128ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80128ce:	210d      	movs	r1, #13
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 f829 	bl	8012928 <SDMMC_GetCmdResp1>
 80128d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128d8:	69fb      	ldr	r3, [r7, #28]
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3720      	adds	r7, #32
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b088      	sub	sp, #32
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80128ea:	2300      	movs	r3, #0
 80128ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80128ee:	230d      	movs	r3, #13
 80128f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128f8:	2300      	movs	r3, #0
 80128fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012900:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012902:	f107 0308 	add.w	r3, r7, #8
 8012906:	4619      	mov	r1, r3
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7ff fd1b 	bl	8012344 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012912:	210d      	movs	r1, #13
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 f807 	bl	8012928 <SDMMC_GetCmdResp1>
 801291a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801291c:	69fb      	ldr	r3, [r7, #28]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3720      	adds	r7, #32
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
	...

08012928 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b088      	sub	sp, #32
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	460b      	mov	r3, r1
 8012932:	607a      	str	r2, [r7, #4]
 8012934:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012936:	4b70      	ldr	r3, [pc, #448]	; (8012af8 <SDMMC_GetCmdResp1+0x1d0>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4a70      	ldr	r2, [pc, #448]	; (8012afc <SDMMC_GetCmdResp1+0x1d4>)
 801293c:	fba2 2303 	umull	r2, r3, r2, r3
 8012940:	0a5a      	lsrs	r2, r3, #9
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	fb02 f303 	mul.w	r3, r2, r3
 8012948:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	1e5a      	subs	r2, r3, #1
 801294e:	61fa      	str	r2, [r7, #28]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d102      	bne.n	801295a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012958:	e0c9      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801295e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012960:	69ba      	ldr	r2, [r7, #24]
 8012962:	4b67      	ldr	r3, [pc, #412]	; (8012b00 <SDMMC_GetCmdResp1+0x1d8>)
 8012964:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012966:	2b00      	cmp	r3, #0
 8012968:	d0ef      	beq.n	801294a <SDMMC_GetCmdResp1+0x22>
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1ea      	bne.n	801294a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012978:	f003 0304 	and.w	r3, r3, #4
 801297c:	2b00      	cmp	r3, #0
 801297e:	d004      	beq.n	801298a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2204      	movs	r2, #4
 8012984:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012986:	2304      	movs	r3, #4
 8012988:	e0b1      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801298e:	f003 0301 	and.w	r3, r3, #1
 8012992:	2b00      	cmp	r3, #0
 8012994:	d004      	beq.n	80129a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2201      	movs	r2, #1
 801299a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801299c:	2301      	movs	r3, #1
 801299e:	e0a6      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	4a58      	ldr	r2, [pc, #352]	; (8012b04 <SDMMC_GetCmdResp1+0x1dc>)
 80129a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f7ff fcf6 	bl	8012398 <SDMMC_GetCommandResponse>
 80129ac:	4603      	mov	r3, r0
 80129ae:	461a      	mov	r2, r3
 80129b0:	7afb      	ldrb	r3, [r7, #11]
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d001      	beq.n	80129ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129b6:	2301      	movs	r3, #1
 80129b8:	e099      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80129ba:	2100      	movs	r1, #0
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f7ff fcf8 	bl	80123b2 <SDMMC_GetResponse>
 80129c2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	4b50      	ldr	r3, [pc, #320]	; (8012b08 <SDMMC_GetCmdResp1+0x1e0>)
 80129c8:	4013      	ands	r3, r2
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d101      	bne.n	80129d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80129ce:	2300      	movs	r3, #0
 80129d0:	e08d      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	da02      	bge.n	80129de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80129d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80129dc:	e087      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d001      	beq.n	80129ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80129e8:	2340      	movs	r3, #64	; 0x40
 80129ea:	e080      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80129f6:	2380      	movs	r3, #128	; 0x80
 80129f8:	e079      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a08:	e071      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d002      	beq.n	8012a1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a18:	e069      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a28:	e061      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d002      	beq.n	8012a3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012a38:	e059      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d002      	beq.n	8012a4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a48:	e051      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d002      	beq.n	8012a5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a58:	e049      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d002      	beq.n	8012a6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012a64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012a68:	e041      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d002      	beq.n	8012a7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a78:	e039      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d002      	beq.n	8012a8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a88:	e031      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d002      	beq.n	8012a9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a98:	e029      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d002      	beq.n	8012aaa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012aa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012aa8:	e021      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012ab4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012ab8:	e019      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012ac4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012ac8:	e011      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d002      	beq.n	8012ada <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012ad4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012ad8:	e009      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f003 0308 	and.w	r3, r3, #8
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d002      	beq.n	8012aea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012ae4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012ae8:	e001      	b.n	8012aee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3720      	adds	r7, #32
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	24000000 	.word	0x24000000
 8012afc:	10624dd3 	.word	0x10624dd3
 8012b00:	00200045 	.word	0x00200045
 8012b04:	002000c5 	.word	0x002000c5
 8012b08:	fdffe008 	.word	0xfdffe008

08012b0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012b14:	4b1f      	ldr	r3, [pc, #124]	; (8012b94 <SDMMC_GetCmdResp2+0x88>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4a1f      	ldr	r2, [pc, #124]	; (8012b98 <SDMMC_GetCmdResp2+0x8c>)
 8012b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8012b1e:	0a5b      	lsrs	r3, r3, #9
 8012b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b24:	fb02 f303 	mul.w	r3, r2, r3
 8012b28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	1e5a      	subs	r2, r3, #1
 8012b2e:	60fa      	str	r2, [r7, #12]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d102      	bne.n	8012b3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b38:	e026      	b.n	8012b88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d0ef      	beq.n	8012b2a <SDMMC_GetCmdResp2+0x1e>
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d1ea      	bne.n	8012b2a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b58:	f003 0304 	and.w	r3, r3, #4
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d004      	beq.n	8012b6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2204      	movs	r2, #4
 8012b64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b66:	2304      	movs	r3, #4
 8012b68:	e00e      	b.n	8012b88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d004      	beq.n	8012b80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	e003      	b.n	8012b88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	4a06      	ldr	r2, [pc, #24]	; (8012b9c <SDMMC_GetCmdResp2+0x90>)
 8012b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012b86:	2300      	movs	r3, #0
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3714      	adds	r7, #20
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr
 8012b94:	24000000 	.word	0x24000000
 8012b98:	10624dd3 	.word	0x10624dd3
 8012b9c:	002000c5 	.word	0x002000c5

08012ba0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012ba0:	b480      	push	{r7}
 8012ba2:	b085      	sub	sp, #20
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ba8:	4b1a      	ldr	r3, [pc, #104]	; (8012c14 <SDMMC_GetCmdResp3+0x74>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	4a1a      	ldr	r2, [pc, #104]	; (8012c18 <SDMMC_GetCmdResp3+0x78>)
 8012bae:	fba2 2303 	umull	r2, r3, r2, r3
 8012bb2:	0a5b      	lsrs	r3, r3, #9
 8012bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bb8:	fb02 f303 	mul.w	r3, r2, r3
 8012bbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	1e5a      	subs	r2, r3, #1
 8012bc2:	60fa      	str	r2, [r7, #12]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d102      	bne.n	8012bce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bcc:	e01b      	b.n	8012c06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bd2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d0ef      	beq.n	8012bbe <SDMMC_GetCmdResp3+0x1e>
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1ea      	bne.n	8012bbe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bec:	f003 0304 	and.w	r3, r3, #4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d004      	beq.n	8012bfe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2204      	movs	r2, #4
 8012bf8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012bfa:	2304      	movs	r3, #4
 8012bfc:	e003      	b.n	8012c06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	4a06      	ldr	r2, [pc, #24]	; (8012c1c <SDMMC_GetCmdResp3+0x7c>)
 8012c02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012c04:	2300      	movs	r3, #0
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3714      	adds	r7, #20
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	24000000 	.word	0x24000000
 8012c18:	10624dd3 	.word	0x10624dd3
 8012c1c:	002000c5 	.word	0x002000c5

08012c20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b088      	sub	sp, #32
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	460b      	mov	r3, r1
 8012c2a:	607a      	str	r2, [r7, #4]
 8012c2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012c2e:	4b35      	ldr	r3, [pc, #212]	; (8012d04 <SDMMC_GetCmdResp6+0xe4>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	4a35      	ldr	r2, [pc, #212]	; (8012d08 <SDMMC_GetCmdResp6+0xe8>)
 8012c34:	fba2 2303 	umull	r2, r3, r2, r3
 8012c38:	0a5b      	lsrs	r3, r3, #9
 8012c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c3e:	fb02 f303 	mul.w	r3, r2, r3
 8012c42:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	1e5a      	subs	r2, r3, #1
 8012c48:	61fa      	str	r2, [r7, #28]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d102      	bne.n	8012c54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c52:	e052      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c58:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d0ef      	beq.n	8012c44 <SDMMC_GetCmdResp6+0x24>
 8012c64:	69bb      	ldr	r3, [r7, #24]
 8012c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d1ea      	bne.n	8012c44 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c72:	f003 0304 	and.w	r3, r3, #4
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d004      	beq.n	8012c84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2204      	movs	r2, #4
 8012c7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c80:	2304      	movs	r3, #4
 8012c82:	e03a      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c88:	f003 0301 	and.w	r3, r3, #1
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d004      	beq.n	8012c9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	2201      	movs	r2, #1
 8012c94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c96:	2301      	movs	r3, #1
 8012c98:	e02f      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff fb7c 	bl	8012398 <SDMMC_GetCommandResponse>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	7afb      	ldrb	r3, [r7, #11]
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d001      	beq.n	8012cae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012caa:	2301      	movs	r3, #1
 8012cac:	e025      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	4a16      	ldr	r2, [pc, #88]	; (8012d0c <SDMMC_GetCmdResp6+0xec>)
 8012cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012cb4:	2100      	movs	r1, #0
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f7ff fb7b 	bl	80123b2 <SDMMC_GetResponse>
 8012cbc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d106      	bne.n	8012cd6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	0c1b      	lsrs	r3, r3, #16
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	e011      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d002      	beq.n	8012ce6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ce4:	e009      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d002      	beq.n	8012cf6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cf4:	e001      	b.n	8012cfa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3720      	adds	r7, #32
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	24000000 	.word	0x24000000
 8012d08:	10624dd3 	.word	0x10624dd3
 8012d0c:	002000c5 	.word	0x002000c5

08012d10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012d10:	b480      	push	{r7}
 8012d12:	b085      	sub	sp, #20
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012d18:	4b22      	ldr	r3, [pc, #136]	; (8012da4 <SDMMC_GetCmdResp7+0x94>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a22      	ldr	r2, [pc, #136]	; (8012da8 <SDMMC_GetCmdResp7+0x98>)
 8012d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012d22:	0a5b      	lsrs	r3, r3, #9
 8012d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d28:	fb02 f303 	mul.w	r3, r2, r3
 8012d2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	1e5a      	subs	r2, r3, #1
 8012d32:	60fa      	str	r2, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d102      	bne.n	8012d3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d3c:	e02c      	b.n	8012d98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d42:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d0ef      	beq.n	8012d2e <SDMMC_GetCmdResp7+0x1e>
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d1ea      	bne.n	8012d2e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d5c:	f003 0304 	and.w	r3, r3, #4
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d004      	beq.n	8012d6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2204      	movs	r2, #4
 8012d68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d6a:	2304      	movs	r3, #4
 8012d6c:	e014      	b.n	8012d98 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d72:	f003 0301 	and.w	r3, r3, #1
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d004      	beq.n	8012d84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d80:	2301      	movs	r3, #1
 8012d82:	e009      	b.n	8012d98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2240      	movs	r2, #64	; 0x40
 8012d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012d96:	2300      	movs	r3, #0

}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3714      	adds	r7, #20
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr
 8012da4:	24000000 	.word	0x24000000
 8012da8:	10624dd3 	.word	0x10624dd3

08012dac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012db4:	4b11      	ldr	r3, [pc, #68]	; (8012dfc <SDMMC_GetCmdError+0x50>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	4a11      	ldr	r2, [pc, #68]	; (8012e00 <SDMMC_GetCmdError+0x54>)
 8012dba:	fba2 2303 	umull	r2, r3, r2, r3
 8012dbe:	0a5b      	lsrs	r3, r3, #9
 8012dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dc4:	fb02 f303 	mul.w	r3, r2, r3
 8012dc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	1e5a      	subs	r2, r3, #1
 8012dce:	60fa      	str	r2, [r7, #12]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d102      	bne.n	8012dda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012dd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012dd8:	e009      	b.n	8012dee <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d0f1      	beq.n	8012dca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	4a06      	ldr	r2, [pc, #24]	; (8012e04 <SDMMC_GetCmdError+0x58>)
 8012dea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012dec:	2300      	movs	r3, #0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3714      	adds	r7, #20
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	24000000 	.word	0x24000000
 8012e00:	10624dd3 	.word	0x10624dd3
 8012e04:	002000c5 	.word	0x002000c5

08012e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012e08:	b084      	sub	sp, #16
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b084      	sub	sp, #16
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
 8012e12:	f107 001c 	add.w	r0, r7, #28
 8012e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d120      	bne.n	8012e62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	68da      	ldr	r2, [r3, #12]
 8012e30:	4b2a      	ldr	r3, [pc, #168]	; (8012edc <USB_CoreInit+0xd4>)
 8012e32:	4013      	ands	r3, r2
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	d105      	bne.n	8012e56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f001 faf8 	bl	801444c <USB_CoreReset>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	73fb      	strb	r3, [r7, #15]
 8012e60:	e01a      	b.n	8012e98 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f001 faec 	bl	801444c <USB_CoreReset>
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	639a      	str	r2, [r3, #56]	; 0x38
 8012e8a:	e005      	b.n	8012e98 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	d116      	bne.n	8012ecc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012eac:	4b0c      	ldr	r3, [pc, #48]	; (8012ee0 <USB_CoreInit+0xd8>)
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	689b      	ldr	r3, [r3, #8]
 8012eb8:	f043 0206 	orr.w	r2, r3, #6
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	f043 0220 	orr.w	r2, r3, #32
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ed8:	b004      	add	sp, #16
 8012eda:	4770      	bx	lr
 8012edc:	ffbdffbf 	.word	0xffbdffbf
 8012ee0:	03ee0000 	.word	0x03ee0000

08012ee4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b087      	sub	sp, #28
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	4613      	mov	r3, r2
 8012ef0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012ef2:	79fb      	ldrb	r3, [r7, #7]
 8012ef4:	2b02      	cmp	r3, #2
 8012ef6:	d165      	bne.n	8012fc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	4a41      	ldr	r2, [pc, #260]	; (8013000 <USB_SetTurnaroundTime+0x11c>)
 8012efc:	4293      	cmp	r3, r2
 8012efe:	d906      	bls.n	8012f0e <USB_SetTurnaroundTime+0x2a>
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	4a40      	ldr	r2, [pc, #256]	; (8013004 <USB_SetTurnaroundTime+0x120>)
 8012f04:	4293      	cmp	r3, r2
 8012f06:	d202      	bcs.n	8012f0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012f08:	230f      	movs	r3, #15
 8012f0a:	617b      	str	r3, [r7, #20]
 8012f0c:	e062      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	4a3c      	ldr	r2, [pc, #240]	; (8013004 <USB_SetTurnaroundTime+0x120>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d306      	bcc.n	8012f24 <USB_SetTurnaroundTime+0x40>
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	4a3b      	ldr	r2, [pc, #236]	; (8013008 <USB_SetTurnaroundTime+0x124>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d202      	bcs.n	8012f24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012f1e:	230e      	movs	r3, #14
 8012f20:	617b      	str	r3, [r7, #20]
 8012f22:	e057      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	4a38      	ldr	r2, [pc, #224]	; (8013008 <USB_SetTurnaroundTime+0x124>)
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d306      	bcc.n	8012f3a <USB_SetTurnaroundTime+0x56>
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	4a37      	ldr	r2, [pc, #220]	; (801300c <USB_SetTurnaroundTime+0x128>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d202      	bcs.n	8012f3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012f34:	230d      	movs	r3, #13
 8012f36:	617b      	str	r3, [r7, #20]
 8012f38:	e04c      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	4a33      	ldr	r2, [pc, #204]	; (801300c <USB_SetTurnaroundTime+0x128>)
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d306      	bcc.n	8012f50 <USB_SetTurnaroundTime+0x6c>
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	4a32      	ldr	r2, [pc, #200]	; (8013010 <USB_SetTurnaroundTime+0x12c>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d802      	bhi.n	8012f50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012f4a:	230c      	movs	r3, #12
 8012f4c:	617b      	str	r3, [r7, #20]
 8012f4e:	e041      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	4a2f      	ldr	r2, [pc, #188]	; (8013010 <USB_SetTurnaroundTime+0x12c>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d906      	bls.n	8012f66 <USB_SetTurnaroundTime+0x82>
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	4a2e      	ldr	r2, [pc, #184]	; (8013014 <USB_SetTurnaroundTime+0x130>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d802      	bhi.n	8012f66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012f60:	230b      	movs	r3, #11
 8012f62:	617b      	str	r3, [r7, #20]
 8012f64:	e036      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	4a2a      	ldr	r2, [pc, #168]	; (8013014 <USB_SetTurnaroundTime+0x130>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d906      	bls.n	8012f7c <USB_SetTurnaroundTime+0x98>
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	4a29      	ldr	r2, [pc, #164]	; (8013018 <USB_SetTurnaroundTime+0x134>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d802      	bhi.n	8012f7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012f76:	230a      	movs	r3, #10
 8012f78:	617b      	str	r3, [r7, #20]
 8012f7a:	e02b      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	4a26      	ldr	r2, [pc, #152]	; (8013018 <USB_SetTurnaroundTime+0x134>)
 8012f80:	4293      	cmp	r3, r2
 8012f82:	d906      	bls.n	8012f92 <USB_SetTurnaroundTime+0xae>
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	4a25      	ldr	r2, [pc, #148]	; (801301c <USB_SetTurnaroundTime+0x138>)
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	d202      	bcs.n	8012f92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012f8c:	2309      	movs	r3, #9
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e020      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	4a21      	ldr	r2, [pc, #132]	; (801301c <USB_SetTurnaroundTime+0x138>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d306      	bcc.n	8012fa8 <USB_SetTurnaroundTime+0xc4>
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	4a20      	ldr	r2, [pc, #128]	; (8013020 <USB_SetTurnaroundTime+0x13c>)
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d802      	bhi.n	8012fa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012fa2:	2308      	movs	r3, #8
 8012fa4:	617b      	str	r3, [r7, #20]
 8012fa6:	e015      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	4a1d      	ldr	r2, [pc, #116]	; (8013020 <USB_SetTurnaroundTime+0x13c>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d906      	bls.n	8012fbe <USB_SetTurnaroundTime+0xda>
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	4a1c      	ldr	r2, [pc, #112]	; (8013024 <USB_SetTurnaroundTime+0x140>)
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d202      	bcs.n	8012fbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012fb8:	2307      	movs	r3, #7
 8012fba:	617b      	str	r3, [r7, #20]
 8012fbc:	e00a      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012fbe:	2306      	movs	r3, #6
 8012fc0:	617b      	str	r3, [r7, #20]
 8012fc2:	e007      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012fc4:	79fb      	ldrb	r3, [r7, #7]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d102      	bne.n	8012fd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012fca:	2309      	movs	r3, #9
 8012fcc:	617b      	str	r3, [r7, #20]
 8012fce:	e001      	b.n	8012fd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012fd0:	2309      	movs	r3, #9
 8012fd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	68da      	ldr	r2, [r3, #12]
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	029b      	lsls	r3, r3, #10
 8012fe8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012fec:	431a      	orrs	r2, r3
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ff2:	2300      	movs	r3, #0
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	371c      	adds	r7, #28
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr
 8013000:	00d8acbf 	.word	0x00d8acbf
 8013004:	00e4e1c0 	.word	0x00e4e1c0
 8013008:	00f42400 	.word	0x00f42400
 801300c:	01067380 	.word	0x01067380
 8013010:	011a499f 	.word	0x011a499f
 8013014:	01312cff 	.word	0x01312cff
 8013018:	014ca43f 	.word	0x014ca43f
 801301c:	016e3600 	.word	0x016e3600
 8013020:	01a6ab1f 	.word	0x01a6ab1f
 8013024:	01e84800 	.word	0x01e84800

08013028 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	689b      	ldr	r3, [r3, #8]
 8013034:	f043 0201 	orr.w	r2, r3, #1
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801304a:	b480      	push	{r7}
 801304c:	b083      	sub	sp, #12
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	689b      	ldr	r3, [r3, #8]
 8013056:	f023 0201 	bic.w	r2, r3, #1
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801305e:	2300      	movs	r3, #0
}
 8013060:	4618      	mov	r0, r3
 8013062:	370c      	adds	r7, #12
 8013064:	46bd      	mov	sp, r7
 8013066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306a:	4770      	bx	lr

0801306c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b084      	sub	sp, #16
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	460b      	mov	r3, r1
 8013076:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013078:	2300      	movs	r3, #0
 801307a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013088:	78fb      	ldrb	r3, [r7, #3]
 801308a:	2b01      	cmp	r3, #1
 801308c:	d115      	bne.n	80130ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	68db      	ldr	r3, [r3, #12]
 8013092:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801309a:	2001      	movs	r0, #1
 801309c:	f7f0 ff16 	bl	8003ecc <HAL_Delay>
      ms++;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	3301      	adds	r3, #1
 80130a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f001 f93f 	bl	801432a <USB_GetMode>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d01e      	beq.n	80130f0 <USB_SetCurrentMode+0x84>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2b31      	cmp	r3, #49	; 0x31
 80130b6:	d9f0      	bls.n	801309a <USB_SetCurrentMode+0x2e>
 80130b8:	e01a      	b.n	80130f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80130ba:	78fb      	ldrb	r3, [r7, #3]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d115      	bne.n	80130ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80130cc:	2001      	movs	r0, #1
 80130ce:	f7f0 fefd 	bl	8003ecc <HAL_Delay>
      ms++;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3301      	adds	r3, #1
 80130d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f001 f926 	bl	801432a <USB_GetMode>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d005      	beq.n	80130f0 <USB_SetCurrentMode+0x84>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2b31      	cmp	r3, #49	; 0x31
 80130e8:	d9f0      	bls.n	80130cc <USB_SetCurrentMode+0x60>
 80130ea:	e001      	b.n	80130f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80130ec:	2301      	movs	r3, #1
 80130ee:	e005      	b.n	80130fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2b32      	cmp	r3, #50	; 0x32
 80130f4:	d101      	bne.n	80130fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80130f6:	2301      	movs	r3, #1
 80130f8:	e000      	b.n	80130fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80130fa:	2300      	movs	r3, #0
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3710      	adds	r7, #16
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013104:	b084      	sub	sp, #16
 8013106:	b580      	push	{r7, lr}
 8013108:	b086      	sub	sp, #24
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013116:	2300      	movs	r3, #0
 8013118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801311e:	2300      	movs	r3, #0
 8013120:	613b      	str	r3, [r7, #16]
 8013122:	e009      	b.n	8013138 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013124:	687a      	ldr	r2, [r7, #4]
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	3340      	adds	r3, #64	; 0x40
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	4413      	add	r3, r2
 801312e:	2200      	movs	r2, #0
 8013130:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	3301      	adds	r3, #1
 8013136:	613b      	str	r3, [r7, #16]
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	2b0e      	cmp	r3, #14
 801313c:	d9f2      	bls.n	8013124 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801313e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013140:	2b00      	cmp	r3, #0
 8013142:	d11c      	bne.n	801317e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013152:	f043 0302 	orr.w	r3, r3, #2
 8013156:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801315c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	601a      	str	r2, [r3, #0]
 801317c:	e005      	b.n	801318a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013190:	461a      	mov	r2, r3
 8013192:	2300      	movs	r3, #0
 8013194:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801319c:	4619      	mov	r1, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131a4:	461a      	mov	r2, r3
 80131a6:	680b      	ldr	r3, [r1, #0]
 80131a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80131aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d10c      	bne.n	80131ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80131b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d104      	bne.n	80131c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80131b6:	2100      	movs	r1, #0
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 f965 	bl	8013488 <USB_SetDevSpeed>
 80131be:	e008      	b.n	80131d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80131c0:	2101      	movs	r1, #1
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f000 f960 	bl	8013488 <USB_SetDevSpeed>
 80131c8:	e003      	b.n	80131d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80131ca:	2103      	movs	r1, #3
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f000 f95b 	bl	8013488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80131d2:	2110      	movs	r1, #16
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f000 f8f3 	bl	80133c0 <USB_FlushTxFifo>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d001      	beq.n	80131e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80131e0:	2301      	movs	r3, #1
 80131e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f000 f91f 	bl	8013428 <USB_FlushRxFifo>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80131f0:	2301      	movs	r3, #1
 80131f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131fa:	461a      	mov	r2, r3
 80131fc:	2300      	movs	r3, #0
 80131fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013206:	461a      	mov	r2, r3
 8013208:	2300      	movs	r3, #0
 801320a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013212:	461a      	mov	r2, r3
 8013214:	2300      	movs	r3, #0
 8013216:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013218:	2300      	movs	r3, #0
 801321a:	613b      	str	r3, [r7, #16]
 801321c:	e043      	b.n	80132a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	015a      	lsls	r2, r3, #5
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	4413      	add	r3, r2
 8013226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013234:	d118      	bne.n	8013268 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d10a      	bne.n	8013252 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	015a      	lsls	r2, r3, #5
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	4413      	add	r3, r2
 8013244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013248:	461a      	mov	r2, r3
 801324a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801324e:	6013      	str	r3, [r2, #0]
 8013250:	e013      	b.n	801327a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	015a      	lsls	r2, r3, #5
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4413      	add	r3, r2
 801325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801325e:	461a      	mov	r2, r3
 8013260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013264:	6013      	str	r3, [r2, #0]
 8013266:	e008      	b.n	801327a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	015a      	lsls	r2, r3, #5
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	4413      	add	r3, r2
 8013270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013274:	461a      	mov	r2, r3
 8013276:	2300      	movs	r3, #0
 8013278:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	015a      	lsls	r2, r3, #5
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	4413      	add	r3, r2
 8013282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013286:	461a      	mov	r2, r3
 8013288:	2300      	movs	r3, #0
 801328a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	015a      	lsls	r2, r3, #5
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	4413      	add	r3, r2
 8013294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013298:	461a      	mov	r2, r3
 801329a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801329e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	3301      	adds	r3, #1
 80132a4:	613b      	str	r3, [r7, #16]
 80132a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a8:	693a      	ldr	r2, [r7, #16]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d3b7      	bcc.n	801321e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132ae:	2300      	movs	r3, #0
 80132b0:	613b      	str	r3, [r7, #16]
 80132b2:	e043      	b.n	801333c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132ca:	d118      	bne.n	80132fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d10a      	bne.n	80132e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	015a      	lsls	r2, r3, #5
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	4413      	add	r3, r2
 80132da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132de:	461a      	mov	r2, r3
 80132e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80132e4:	6013      	str	r3, [r2, #0]
 80132e6:	e013      	b.n	8013310 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	015a      	lsls	r2, r3, #5
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	4413      	add	r3, r2
 80132f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132f4:	461a      	mov	r2, r3
 80132f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80132fa:	6013      	str	r3, [r2, #0]
 80132fc:	e008      	b.n	8013310 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	015a      	lsls	r2, r3, #5
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	4413      	add	r3, r2
 8013306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801330a:	461a      	mov	r2, r3
 801330c:	2300      	movs	r3, #0
 801330e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	015a      	lsls	r2, r3, #5
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	4413      	add	r3, r2
 8013318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801331c:	461a      	mov	r2, r3
 801331e:	2300      	movs	r3, #0
 8013320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	015a      	lsls	r2, r3, #5
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	4413      	add	r3, r2
 801332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801332e:	461a      	mov	r2, r3
 8013330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013334:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	3301      	adds	r3, #1
 801333a:	613b      	str	r3, [r7, #16]
 801333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333e:	693a      	ldr	r2, [r7, #16]
 8013340:	429a      	cmp	r2, r3
 8013342:	d3b7      	bcc.n	80132b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	68fa      	ldr	r2, [r7, #12]
 801334e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013356:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2200      	movs	r2, #0
 801335c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013364:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	2b00      	cmp	r3, #0
 801336a:	d105      	bne.n	8013378 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	f043 0210 	orr.w	r2, r3, #16
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	699a      	ldr	r2, [r3, #24]
 801337c:	4b0e      	ldr	r3, [pc, #56]	; (80133b8 <USB_DevInit+0x2b4>)
 801337e:	4313      	orrs	r3, r2
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013386:	2b00      	cmp	r3, #0
 8013388:	d005      	beq.n	8013396 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	699b      	ldr	r3, [r3, #24]
 801338e:	f043 0208 	orr.w	r2, r3, #8
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013398:	2b01      	cmp	r3, #1
 801339a:	d105      	bne.n	80133a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	699a      	ldr	r2, [r3, #24]
 80133a0:	4b06      	ldr	r3, [pc, #24]	; (80133bc <USB_DevInit+0x2b8>)
 80133a2:	4313      	orrs	r3, r2
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80133a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3718      	adds	r7, #24
 80133ae:	46bd      	mov	sp, r7
 80133b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80133b4:	b004      	add	sp, #16
 80133b6:	4770      	bx	lr
 80133b8:	803c3800 	.word	0x803c3800
 80133bc:	40000004 	.word	0x40000004

080133c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80133c0:	b480      	push	{r7}
 80133c2:	b085      	sub	sp, #20
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80133ca:	2300      	movs	r3, #0
 80133cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	3301      	adds	r3, #1
 80133d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	4a13      	ldr	r2, [pc, #76]	; (8013424 <USB_FlushTxFifo+0x64>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d901      	bls.n	80133e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80133dc:	2303      	movs	r3, #3
 80133de:	e01b      	b.n	8013418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	691b      	ldr	r3, [r3, #16]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	daf2      	bge.n	80133ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80133e8:	2300      	movs	r3, #0
 80133ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	019b      	lsls	r3, r3, #6
 80133f0:	f043 0220 	orr.w	r2, r3, #32
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	3301      	adds	r3, #1
 80133fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	4a08      	ldr	r2, [pc, #32]	; (8013424 <USB_FlushTxFifo+0x64>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d901      	bls.n	801340a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013406:	2303      	movs	r3, #3
 8013408:	e006      	b.n	8013418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	691b      	ldr	r3, [r3, #16]
 801340e:	f003 0320 	and.w	r3, r3, #32
 8013412:	2b20      	cmp	r3, #32
 8013414:	d0f0      	beq.n	80133f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3714      	adds	r7, #20
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr
 8013424:	00030d40 	.word	0x00030d40

08013428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013428:	b480      	push	{r7}
 801342a:	b085      	sub	sp, #20
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013430:	2300      	movs	r3, #0
 8013432:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	3301      	adds	r3, #1
 8013438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	4a11      	ldr	r2, [pc, #68]	; (8013484 <USB_FlushRxFifo+0x5c>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d901      	bls.n	8013446 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013442:	2303      	movs	r3, #3
 8013444:	e018      	b.n	8013478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	691b      	ldr	r3, [r3, #16]
 801344a:	2b00      	cmp	r3, #0
 801344c:	daf2      	bge.n	8013434 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801344e:	2300      	movs	r3, #0
 8013450:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2210      	movs	r2, #16
 8013456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	3301      	adds	r3, #1
 801345c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	4a08      	ldr	r2, [pc, #32]	; (8013484 <USB_FlushRxFifo+0x5c>)
 8013462:	4293      	cmp	r3, r2
 8013464:	d901      	bls.n	801346a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013466:	2303      	movs	r3, #3
 8013468:	e006      	b.n	8013478 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	691b      	ldr	r3, [r3, #16]
 801346e:	f003 0310 	and.w	r3, r3, #16
 8013472:	2b10      	cmp	r3, #16
 8013474:	d0f0      	beq.n	8013458 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013476:	2300      	movs	r3, #0
}
 8013478:	4618      	mov	r0, r3
 801347a:	3714      	adds	r7, #20
 801347c:	46bd      	mov	sp, r7
 801347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013482:	4770      	bx	lr
 8013484:	00030d40 	.word	0x00030d40

08013488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013488:	b480      	push	{r7}
 801348a:	b085      	sub	sp, #20
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	460b      	mov	r3, r1
 8013492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	78fb      	ldrb	r3, [r7, #3]
 80134a2:	68f9      	ldr	r1, [r7, #12]
 80134a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134a8:	4313      	orrs	r3, r2
 80134aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80134ac:	2300      	movs	r3, #0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3714      	adds	r7, #20
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr

080134ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80134ba:	b480      	push	{r7}
 80134bc:	b087      	sub	sp, #28
 80134be:	af00      	add	r7, sp, #0
 80134c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	f003 0306 	and.w	r3, r3, #6
 80134d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d102      	bne.n	80134e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80134da:	2300      	movs	r3, #0
 80134dc:	75fb      	strb	r3, [r7, #23]
 80134de:	e00a      	b.n	80134f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2b02      	cmp	r3, #2
 80134e4:	d002      	beq.n	80134ec <USB_GetDevSpeed+0x32>
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2b06      	cmp	r3, #6
 80134ea:	d102      	bne.n	80134f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80134ec:	2302      	movs	r3, #2
 80134ee:	75fb      	strb	r3, [r7, #23]
 80134f0:	e001      	b.n	80134f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80134f2:	230f      	movs	r3, #15
 80134f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80134f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	371c      	adds	r7, #28
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013504:	b480      	push	{r7}
 8013506:	b085      	sub	sp, #20
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	785b      	ldrb	r3, [r3, #1]
 801351c:	2b01      	cmp	r3, #1
 801351e:	d139      	bne.n	8013594 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013526:	69da      	ldr	r2, [r3, #28]
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	f003 030f 	and.w	r3, r3, #15
 8013530:	2101      	movs	r1, #1
 8013532:	fa01 f303 	lsl.w	r3, r1, r3
 8013536:	b29b      	uxth	r3, r3
 8013538:	68f9      	ldr	r1, [r7, #12]
 801353a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801353e:	4313      	orrs	r3, r2
 8013540:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	015a      	lsls	r2, r3, #5
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	4413      	add	r3, r2
 801354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013554:	2b00      	cmp	r3, #0
 8013556:	d153      	bne.n	8013600 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	015a      	lsls	r2, r3, #5
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	4413      	add	r3, r2
 8013560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	791b      	ldrb	r3, [r3, #4]
 8013572:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013574:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	059b      	lsls	r3, r3, #22
 801357a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801357c:	431a      	orrs	r2, r3
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	0159      	lsls	r1, r3, #5
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	440b      	add	r3, r1
 8013586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358a:	4619      	mov	r1, r3
 801358c:	4b20      	ldr	r3, [pc, #128]	; (8013610 <USB_ActivateEndpoint+0x10c>)
 801358e:	4313      	orrs	r3, r2
 8013590:	600b      	str	r3, [r1, #0]
 8013592:	e035      	b.n	8013600 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801359a:	69da      	ldr	r2, [r3, #28]
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	f003 030f 	and.w	r3, r3, #15
 80135a4:	2101      	movs	r1, #1
 80135a6:	fa01 f303 	lsl.w	r3, r1, r3
 80135aa:	041b      	lsls	r3, r3, #16
 80135ac:	68f9      	ldr	r1, [r7, #12]
 80135ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80135b2:	4313      	orrs	r3, r2
 80135b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	015a      	lsls	r2, r3, #5
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	4413      	add	r3, r2
 80135be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d119      	bne.n	8013600 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	015a      	lsls	r2, r3, #5
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	4413      	add	r3, r2
 80135d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	791b      	ldrb	r3, [r3, #4]
 80135e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80135e8:	430b      	orrs	r3, r1
 80135ea:	431a      	orrs	r2, r3
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	0159      	lsls	r1, r3, #5
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	440b      	add	r3, r1
 80135f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135f8:	4619      	mov	r1, r3
 80135fa:	4b05      	ldr	r3, [pc, #20]	; (8013610 <USB_ActivateEndpoint+0x10c>)
 80135fc:	4313      	orrs	r3, r2
 80135fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop
 8013610:	10008000 	.word	0x10008000

08013614 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013614:	b480      	push	{r7}
 8013616:	b085      	sub	sp, #20
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	785b      	ldrb	r3, [r3, #1]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d161      	bne.n	80136f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	015a      	lsls	r2, r3, #5
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	4413      	add	r3, r2
 8013638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013646:	d11f      	bne.n	8013688 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	015a      	lsls	r2, r3, #5
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4413      	add	r3, r2
 8013650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	0151      	lsls	r1, r2, #5
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	440a      	add	r2, r1
 801365e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013666:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	015a      	lsls	r2, r3, #5
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	4413      	add	r3, r2
 8013670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	68ba      	ldr	r2, [r7, #8]
 8013678:	0151      	lsls	r1, r2, #5
 801367a:	68fa      	ldr	r2, [r7, #12]
 801367c:	440a      	add	r2, r1
 801367e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801368e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	f003 030f 	and.w	r3, r3, #15
 8013698:	2101      	movs	r1, #1
 801369a:	fa01 f303 	lsl.w	r3, r1, r3
 801369e:	b29b      	uxth	r3, r3
 80136a0:	43db      	mvns	r3, r3
 80136a2:	68f9      	ldr	r1, [r7, #12]
 80136a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136a8:	4013      	ands	r3, r2
 80136aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136b2:	69da      	ldr	r2, [r3, #28]
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	f003 030f 	and.w	r3, r3, #15
 80136bc:	2101      	movs	r1, #1
 80136be:	fa01 f303 	lsl.w	r3, r1, r3
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	43db      	mvns	r3, r3
 80136c6:	68f9      	ldr	r1, [r7, #12]
 80136c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136cc:	4013      	ands	r3, r2
 80136ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	015a      	lsls	r2, r3, #5
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	4413      	add	r3, r2
 80136d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	0159      	lsls	r1, r3, #5
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	440b      	add	r3, r1
 80136e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ea:	4619      	mov	r1, r3
 80136ec:	4b35      	ldr	r3, [pc, #212]	; (80137c4 <USB_DeactivateEndpoint+0x1b0>)
 80136ee:	4013      	ands	r3, r2
 80136f0:	600b      	str	r3, [r1, #0]
 80136f2:	e060      	b.n	80137b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	015a      	lsls	r2, r3, #5
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	4413      	add	r3, r2
 80136fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801370a:	d11f      	bne.n	801374c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	015a      	lsls	r2, r3, #5
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	4413      	add	r3, r2
 8013714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	68ba      	ldr	r2, [r7, #8]
 801371c:	0151      	lsls	r1, r2, #5
 801371e:	68fa      	ldr	r2, [r7, #12]
 8013720:	440a      	add	r2, r1
 8013722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801372a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	015a      	lsls	r2, r3, #5
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	4413      	add	r3, r2
 8013734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	0151      	lsls	r1, r2, #5
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	440a      	add	r2, r1
 8013742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801374a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	f003 030f 	and.w	r3, r3, #15
 801375c:	2101      	movs	r1, #1
 801375e:	fa01 f303 	lsl.w	r3, r1, r3
 8013762:	041b      	lsls	r3, r3, #16
 8013764:	43db      	mvns	r3, r3
 8013766:	68f9      	ldr	r1, [r7, #12]
 8013768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801376c:	4013      	ands	r3, r2
 801376e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013776:	69da      	ldr	r2, [r3, #28]
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	f003 030f 	and.w	r3, r3, #15
 8013780:	2101      	movs	r1, #1
 8013782:	fa01 f303 	lsl.w	r3, r1, r3
 8013786:	041b      	lsls	r3, r3, #16
 8013788:	43db      	mvns	r3, r3
 801378a:	68f9      	ldr	r1, [r7, #12]
 801378c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013790:	4013      	ands	r3, r2
 8013792:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	015a      	lsls	r2, r3, #5
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	4413      	add	r3, r2
 801379c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a0:	681a      	ldr	r2, [r3, #0]
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	0159      	lsls	r1, r3, #5
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	440b      	add	r3, r1
 80137aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ae:	4619      	mov	r1, r3
 80137b0:	4b05      	ldr	r3, [pc, #20]	; (80137c8 <USB_DeactivateEndpoint+0x1b4>)
 80137b2:	4013      	ands	r3, r2
 80137b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80137b6:	2300      	movs	r3, #0
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3714      	adds	r7, #20
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	ec337800 	.word	0xec337800
 80137c8:	eff37800 	.word	0xeff37800

080137cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b08a      	sub	sp, #40	; 0x28
 80137d0:	af02      	add	r7, sp, #8
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	4613      	mov	r3, r2
 80137d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	785b      	ldrb	r3, [r3, #1]
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	f040 8181 	bne.w	8013af0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	691b      	ldr	r3, [r3, #16]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d132      	bne.n	801385c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	015a      	lsls	r2, r3, #5
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	4413      	add	r3, r2
 80137fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013802:	691a      	ldr	r2, [r3, #16]
 8013804:	69bb      	ldr	r3, [r7, #24]
 8013806:	0159      	lsls	r1, r3, #5
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	440b      	add	r3, r1
 801380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013810:	4619      	mov	r1, r3
 8013812:	4ba5      	ldr	r3, [pc, #660]	; (8013aa8 <USB_EPStartXfer+0x2dc>)
 8013814:	4013      	ands	r3, r2
 8013816:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	015a      	lsls	r2, r3, #5
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	4413      	add	r3, r2
 8013820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013824:	691b      	ldr	r3, [r3, #16]
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	0151      	lsls	r1, r2, #5
 801382a:	69fa      	ldr	r2, [r7, #28]
 801382c:	440a      	add	r2, r1
 801382e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013836:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013838:	69bb      	ldr	r3, [r7, #24]
 801383a:	015a      	lsls	r2, r3, #5
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	4413      	add	r3, r2
 8013840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013844:	691a      	ldr	r2, [r3, #16]
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	0159      	lsls	r1, r3, #5
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	440b      	add	r3, r1
 801384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013852:	4619      	mov	r1, r3
 8013854:	4b95      	ldr	r3, [pc, #596]	; (8013aac <USB_EPStartXfer+0x2e0>)
 8013856:	4013      	ands	r3, r2
 8013858:	610b      	str	r3, [r1, #16]
 801385a:	e092      	b.n	8013982 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	015a      	lsls	r2, r3, #5
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	4413      	add	r3, r2
 8013864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013868:	691a      	ldr	r2, [r3, #16]
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	0159      	lsls	r1, r3, #5
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	440b      	add	r3, r1
 8013872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013876:	4619      	mov	r1, r3
 8013878:	4b8c      	ldr	r3, [pc, #560]	; (8013aac <USB_EPStartXfer+0x2e0>)
 801387a:	4013      	ands	r3, r2
 801387c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	015a      	lsls	r2, r3, #5
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	4413      	add	r3, r2
 8013886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801388a:	691a      	ldr	r2, [r3, #16]
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	0159      	lsls	r1, r3, #5
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	440b      	add	r3, r1
 8013894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013898:	4619      	mov	r1, r3
 801389a:	4b83      	ldr	r3, [pc, #524]	; (8013aa8 <USB_EPStartXfer+0x2dc>)
 801389c:	4013      	ands	r3, r2
 801389e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d11a      	bne.n	80138dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	691a      	ldr	r2, [r3, #16]
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	689b      	ldr	r3, [r3, #8]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d903      	bls.n	80138ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	689a      	ldr	r2, [r3, #8]
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	015a      	lsls	r2, r3, #5
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	4413      	add	r3, r2
 80138c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138c6:	691b      	ldr	r3, [r3, #16]
 80138c8:	69ba      	ldr	r2, [r7, #24]
 80138ca:	0151      	lsls	r1, r2, #5
 80138cc:	69fa      	ldr	r2, [r7, #28]
 80138ce:	440a      	add	r2, r1
 80138d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138d8:	6113      	str	r3, [r2, #16]
 80138da:	e01b      	b.n	8013914 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	015a      	lsls	r2, r3, #5
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	4413      	add	r3, r2
 80138e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	6919      	ldr	r1, [r3, #16]
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	689b      	ldr	r3, [r3, #8]
 80138f2:	440b      	add	r3, r1
 80138f4:	1e59      	subs	r1, r3, #1
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80138fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013900:	4b6b      	ldr	r3, [pc, #428]	; (8013ab0 <USB_EPStartXfer+0x2e4>)
 8013902:	400b      	ands	r3, r1
 8013904:	69b9      	ldr	r1, [r7, #24]
 8013906:	0148      	lsls	r0, r1, #5
 8013908:	69f9      	ldr	r1, [r7, #28]
 801390a:	4401      	add	r1, r0
 801390c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013910:	4313      	orrs	r3, r2
 8013912:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013914:	69bb      	ldr	r3, [r7, #24]
 8013916:	015a      	lsls	r2, r3, #5
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	4413      	add	r3, r2
 801391c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013920:	691a      	ldr	r2, [r3, #16]
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	691b      	ldr	r3, [r3, #16]
 8013926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801392a:	69b9      	ldr	r1, [r7, #24]
 801392c:	0148      	lsls	r0, r1, #5
 801392e:	69f9      	ldr	r1, [r7, #28]
 8013930:	4401      	add	r1, r0
 8013932:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013936:	4313      	orrs	r3, r2
 8013938:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	791b      	ldrb	r3, [r3, #4]
 801393e:	2b01      	cmp	r3, #1
 8013940:	d11f      	bne.n	8013982 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	015a      	lsls	r2, r3, #5
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	4413      	add	r3, r2
 801394a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801394e:	691b      	ldr	r3, [r3, #16]
 8013950:	69ba      	ldr	r2, [r7, #24]
 8013952:	0151      	lsls	r1, r2, #5
 8013954:	69fa      	ldr	r2, [r7, #28]
 8013956:	440a      	add	r2, r1
 8013958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801395c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013960:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	015a      	lsls	r2, r3, #5
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	4413      	add	r3, r2
 801396a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801396e:	691b      	ldr	r3, [r3, #16]
 8013970:	69ba      	ldr	r2, [r7, #24]
 8013972:	0151      	lsls	r1, r2, #5
 8013974:	69fa      	ldr	r2, [r7, #28]
 8013976:	440a      	add	r2, r1
 8013978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801397c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013980:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013982:	79fb      	ldrb	r3, [r7, #7]
 8013984:	2b01      	cmp	r3, #1
 8013986:	d14b      	bne.n	8013a20 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	69db      	ldr	r3, [r3, #28]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d009      	beq.n	80139a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	015a      	lsls	r2, r3, #5
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	4413      	add	r3, r2
 8013998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801399c:	461a      	mov	r2, r3
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	69db      	ldr	r3, [r3, #28]
 80139a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	791b      	ldrb	r3, [r3, #4]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d128      	bne.n	80139fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139b2:	689b      	ldr	r3, [r3, #8]
 80139b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d110      	bne.n	80139de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	015a      	lsls	r2, r3, #5
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	4413      	add	r3, r2
 80139c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	69ba      	ldr	r2, [r7, #24]
 80139cc:	0151      	lsls	r1, r2, #5
 80139ce:	69fa      	ldr	r2, [r7, #28]
 80139d0:	440a      	add	r2, r1
 80139d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80139da:	6013      	str	r3, [r2, #0]
 80139dc:	e00f      	b.n	80139fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	015a      	lsls	r2, r3, #5
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	4413      	add	r3, r2
 80139e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	69ba      	ldr	r2, [r7, #24]
 80139ee:	0151      	lsls	r1, r2, #5
 80139f0:	69fa      	ldr	r2, [r7, #28]
 80139f2:	440a      	add	r2, r1
 80139f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	015a      	lsls	r2, r3, #5
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	4413      	add	r3, r2
 8013a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	69ba      	ldr	r2, [r7, #24]
 8013a0e:	0151      	lsls	r1, r2, #5
 8013a10:	69fa      	ldr	r2, [r7, #28]
 8013a12:	440a      	add	r2, r1
 8013a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013a1c:	6013      	str	r3, [r2, #0]
 8013a1e:	e16a      	b.n	8013cf6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013a20:	69bb      	ldr	r3, [r7, #24]
 8013a22:	015a      	lsls	r2, r3, #5
 8013a24:	69fb      	ldr	r3, [r7, #28]
 8013a26:	4413      	add	r3, r2
 8013a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	69ba      	ldr	r2, [r7, #24]
 8013a30:	0151      	lsls	r1, r2, #5
 8013a32:	69fa      	ldr	r2, [r7, #28]
 8013a34:	440a      	add	r2, r1
 8013a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013a3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	791b      	ldrb	r3, [r3, #4]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d015      	beq.n	8013a74 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	691b      	ldr	r3, [r3, #16]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	f000 8152 	beq.w	8013cf6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	f003 030f 	and.w	r3, r3, #15
 8013a62:	2101      	movs	r1, #1
 8013a64:	fa01 f303 	lsl.w	r3, r1, r3
 8013a68:	69f9      	ldr	r1, [r7, #28]
 8013a6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	634b      	str	r3, [r1, #52]	; 0x34
 8013a72:	e140      	b.n	8013cf6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a7a:	689b      	ldr	r3, [r3, #8]
 8013a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d117      	bne.n	8013ab4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	015a      	lsls	r2, r3, #5
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	69ba      	ldr	r2, [r7, #24]
 8013a94:	0151      	lsls	r1, r2, #5
 8013a96:	69fa      	ldr	r2, [r7, #28]
 8013a98:	440a      	add	r2, r1
 8013a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013aa2:	6013      	str	r3, [r2, #0]
 8013aa4:	e016      	b.n	8013ad4 <USB_EPStartXfer+0x308>
 8013aa6:	bf00      	nop
 8013aa8:	e007ffff 	.word	0xe007ffff
 8013aac:	fff80000 	.word	0xfff80000
 8013ab0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013ab4:	69bb      	ldr	r3, [r7, #24]
 8013ab6:	015a      	lsls	r2, r3, #5
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	4413      	add	r3, r2
 8013abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	69ba      	ldr	r2, [r7, #24]
 8013ac4:	0151      	lsls	r1, r2, #5
 8013ac6:	69fa      	ldr	r2, [r7, #28]
 8013ac8:	440a      	add	r2, r1
 8013aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ad2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	68d9      	ldr	r1, [r3, #12]
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	781a      	ldrb	r2, [r3, #0]
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	691b      	ldr	r3, [r3, #16]
 8013ae0:	b298      	uxth	r0, r3
 8013ae2:	79fb      	ldrb	r3, [r7, #7]
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f000 f9b9 	bl	8013e60 <USB_WritePacket>
 8013aee:	e102      	b.n	8013cf6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013af0:	69bb      	ldr	r3, [r7, #24]
 8013af2:	015a      	lsls	r2, r3, #5
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	4413      	add	r3, r2
 8013af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013afc:	691a      	ldr	r2, [r3, #16]
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	0159      	lsls	r1, r3, #5
 8013b02:	69fb      	ldr	r3, [r7, #28]
 8013b04:	440b      	add	r3, r1
 8013b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	4b7c      	ldr	r3, [pc, #496]	; (8013d00 <USB_EPStartXfer+0x534>)
 8013b0e:	4013      	ands	r3, r2
 8013b10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	015a      	lsls	r2, r3, #5
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	4413      	add	r3, r2
 8013b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b1e:	691a      	ldr	r2, [r3, #16]
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	0159      	lsls	r1, r3, #5
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	440b      	add	r3, r1
 8013b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4b75      	ldr	r3, [pc, #468]	; (8013d04 <USB_EPStartXfer+0x538>)
 8013b30:	4013      	ands	r3, r2
 8013b32:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013b34:	69bb      	ldr	r3, [r7, #24]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d12f      	bne.n	8013b9a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	691b      	ldr	r3, [r3, #16]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	689a      	ldr	r2, [r3, #8]
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	689a      	ldr	r2, [r3, #8]
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013b52:	69bb      	ldr	r3, [r7, #24]
 8013b54:	015a      	lsls	r2, r3, #5
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	4413      	add	r3, r2
 8013b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b5e:	691a      	ldr	r2, [r3, #16]
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	6a1b      	ldr	r3, [r3, #32]
 8013b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b68:	69b9      	ldr	r1, [r7, #24]
 8013b6a:	0148      	lsls	r0, r1, #5
 8013b6c:	69f9      	ldr	r1, [r7, #28]
 8013b6e:	4401      	add	r1, r0
 8013b70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013b74:	4313      	orrs	r3, r2
 8013b76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	015a      	lsls	r2, r3, #5
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	4413      	add	r3, r2
 8013b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b84:	691b      	ldr	r3, [r3, #16]
 8013b86:	69ba      	ldr	r2, [r7, #24]
 8013b88:	0151      	lsls	r1, r2, #5
 8013b8a:	69fa      	ldr	r2, [r7, #28]
 8013b8c:	440a      	add	r2, r1
 8013b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b96:	6113      	str	r3, [r2, #16]
 8013b98:	e05f      	b.n	8013c5a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	691b      	ldr	r3, [r3, #16]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d123      	bne.n	8013bea <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	015a      	lsls	r2, r3, #5
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	4413      	add	r3, r2
 8013baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bae:	691a      	ldr	r2, [r3, #16]
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	689b      	ldr	r3, [r3, #8]
 8013bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bb8:	69b9      	ldr	r1, [r7, #24]
 8013bba:	0148      	lsls	r0, r1, #5
 8013bbc:	69f9      	ldr	r1, [r7, #28]
 8013bbe:	4401      	add	r1, r0
 8013bc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013bc4:	4313      	orrs	r3, r2
 8013bc6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	015a      	lsls	r2, r3, #5
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	4413      	add	r3, r2
 8013bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bd4:	691b      	ldr	r3, [r3, #16]
 8013bd6:	69ba      	ldr	r2, [r7, #24]
 8013bd8:	0151      	lsls	r1, r2, #5
 8013bda:	69fa      	ldr	r2, [r7, #28]
 8013bdc:	440a      	add	r2, r1
 8013bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013be6:	6113      	str	r3, [r2, #16]
 8013be8:	e037      	b.n	8013c5a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	691a      	ldr	r2, [r3, #16]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	1e5a      	subs	r2, r3, #1
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8013bfe:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	8afa      	ldrh	r2, [r7, #22]
 8013c06:	fb03 f202 	mul.w	r2, r3, r2
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	015a      	lsls	r2, r3, #5
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	4413      	add	r3, r2
 8013c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1a:	691a      	ldr	r2, [r3, #16]
 8013c1c:	8afb      	ldrh	r3, [r7, #22]
 8013c1e:	04d9      	lsls	r1, r3, #19
 8013c20:	4b39      	ldr	r3, [pc, #228]	; (8013d08 <USB_EPStartXfer+0x53c>)
 8013c22:	400b      	ands	r3, r1
 8013c24:	69b9      	ldr	r1, [r7, #24]
 8013c26:	0148      	lsls	r0, r1, #5
 8013c28:	69f9      	ldr	r1, [r7, #28]
 8013c2a:	4401      	add	r1, r0
 8013c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013c30:	4313      	orrs	r3, r2
 8013c32:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	015a      	lsls	r2, r3, #5
 8013c38:	69fb      	ldr	r3, [r7, #28]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c40:	691a      	ldr	r2, [r3, #16]
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	6a1b      	ldr	r3, [r3, #32]
 8013c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c4a:	69b9      	ldr	r1, [r7, #24]
 8013c4c:	0148      	lsls	r0, r1, #5
 8013c4e:	69f9      	ldr	r1, [r7, #28]
 8013c50:	4401      	add	r1, r0
 8013c52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013c56:	4313      	orrs	r3, r2
 8013c58:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013c5a:	79fb      	ldrb	r3, [r7, #7]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d10d      	bne.n	8013c7c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d009      	beq.n	8013c7c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	68d9      	ldr	r1, [r3, #12]
 8013c6c:	69bb      	ldr	r3, [r7, #24]
 8013c6e:	015a      	lsls	r2, r3, #5
 8013c70:	69fb      	ldr	r3, [r7, #28]
 8013c72:	4413      	add	r3, r2
 8013c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c78:	460a      	mov	r2, r1
 8013c7a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	791b      	ldrb	r3, [r3, #4]
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d128      	bne.n	8013cd6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d110      	bne.n	8013cb6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	015a      	lsls	r2, r3, #5
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	69ba      	ldr	r2, [r7, #24]
 8013ca4:	0151      	lsls	r1, r2, #5
 8013ca6:	69fa      	ldr	r2, [r7, #28]
 8013ca8:	440a      	add	r2, r1
 8013caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013cb2:	6013      	str	r3, [r2, #0]
 8013cb4:	e00f      	b.n	8013cd6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	015a      	lsls	r2, r3, #5
 8013cba:	69fb      	ldr	r3, [r7, #28]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	69ba      	ldr	r2, [r7, #24]
 8013cc6:	0151      	lsls	r1, r2, #5
 8013cc8:	69fa      	ldr	r2, [r7, #28]
 8013cca:	440a      	add	r2, r1
 8013ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cd4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	015a      	lsls	r2, r3, #5
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	4413      	add	r3, r2
 8013cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	69ba      	ldr	r2, [r7, #24]
 8013ce6:	0151      	lsls	r1, r2, #5
 8013ce8:	69fa      	ldr	r2, [r7, #28]
 8013cea:	440a      	add	r2, r1
 8013cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cf6:	2300      	movs	r3, #0
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3720      	adds	r7, #32
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	fff80000 	.word	0xfff80000
 8013d04:	e007ffff 	.word	0xe007ffff
 8013d08:	1ff80000 	.word	0x1ff80000

08013d0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b087      	sub	sp, #28
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013d16:	2300      	movs	r3, #0
 8013d18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	785b      	ldrb	r3, [r3, #1]
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d14a      	bne.n	8013dc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	015a      	lsls	r2, r3, #5
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	4413      	add	r3, r2
 8013d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d42:	f040 8086 	bne.w	8013e52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	015a      	lsls	r2, r3, #5
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	4413      	add	r3, r2
 8013d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	683a      	ldr	r2, [r7, #0]
 8013d58:	7812      	ldrb	r2, [r2, #0]
 8013d5a:	0151      	lsls	r1, r2, #5
 8013d5c:	693a      	ldr	r2, [r7, #16]
 8013d5e:	440a      	add	r2, r1
 8013d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	015a      	lsls	r2, r3, #5
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	4413      	add	r3, r2
 8013d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	683a      	ldr	r2, [r7, #0]
 8013d7c:	7812      	ldrb	r2, [r2, #0]
 8013d7e:	0151      	lsls	r1, r2, #5
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	440a      	add	r2, r1
 8013d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	3301      	adds	r3, #1
 8013d92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	f242 7210 	movw	r2, #10000	; 0x2710
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d902      	bls.n	8013da4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	75fb      	strb	r3, [r7, #23]
          break;
 8013da2:	e056      	b.n	8013e52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	015a      	lsls	r2, r3, #5
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	4413      	add	r3, r2
 8013dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013dbc:	d0e7      	beq.n	8013d8e <USB_EPStopXfer+0x82>
 8013dbe:	e048      	b.n	8013e52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	015a      	lsls	r2, r3, #5
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	4413      	add	r3, r2
 8013dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013dd8:	d13b      	bne.n	8013e52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	015a      	lsls	r2, r3, #5
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	4413      	add	r3, r2
 8013de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	683a      	ldr	r2, [r7, #0]
 8013dec:	7812      	ldrb	r2, [r2, #0]
 8013dee:	0151      	lsls	r1, r2, #5
 8013df0:	693a      	ldr	r2, [r7, #16]
 8013df2:	440a      	add	r2, r1
 8013df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013df8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013dfc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	015a      	lsls	r2, r3, #5
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	4413      	add	r3, r2
 8013e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	683a      	ldr	r2, [r7, #0]
 8013e10:	7812      	ldrb	r2, [r2, #0]
 8013e12:	0151      	lsls	r1, r2, #5
 8013e14:	693a      	ldr	r2, [r7, #16]
 8013e16:	440a      	add	r2, r1
 8013e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	3301      	adds	r3, #1
 8013e26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	d902      	bls.n	8013e38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013e32:	2301      	movs	r3, #1
 8013e34:	75fb      	strb	r3, [r7, #23]
          break;
 8013e36:	e00c      	b.n	8013e52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	015a      	lsls	r2, r3, #5
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	4413      	add	r3, r2
 8013e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e50:	d0e7      	beq.n	8013e22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	371c      	adds	r7, #28
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b089      	sub	sp, #36	; 0x24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4611      	mov	r1, r2
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	460b      	mov	r3, r1
 8013e70:	71fb      	strb	r3, [r7, #7]
 8013e72:	4613      	mov	r3, r2
 8013e74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d123      	bne.n	8013ece <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013e86:	88bb      	ldrh	r3, [r7, #4]
 8013e88:	3303      	adds	r3, #3
 8013e8a:	089b      	lsrs	r3, r3, #2
 8013e8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013e8e:	2300      	movs	r3, #0
 8013e90:	61bb      	str	r3, [r7, #24]
 8013e92:	e018      	b.n	8013ec6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	031a      	lsls	r2, r3, #12
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013ea8:	69fb      	ldr	r3, [r7, #28]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013eb4:	69fb      	ldr	r3, [r7, #28]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013ec0:	69bb      	ldr	r3, [r7, #24]
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	61bb      	str	r3, [r7, #24]
 8013ec6:	69ba      	ldr	r2, [r7, #24]
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d3e2      	bcc.n	8013e94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013ece:	2300      	movs	r3, #0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3724      	adds	r7, #36	; 0x24
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013edc:	b480      	push	{r7}
 8013ede:	b08b      	sub	sp, #44	; 0x2c
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	4613      	mov	r3, r2
 8013ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013ef2:	88fb      	ldrh	r3, [r7, #6]
 8013ef4:	089b      	lsrs	r3, r3, #2
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013efa:	88fb      	ldrh	r3, [r7, #6]
 8013efc:	f003 0303 	and.w	r3, r3, #3
 8013f00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013f02:	2300      	movs	r3, #0
 8013f04:	623b      	str	r3, [r7, #32]
 8013f06:	e014      	b.n	8013f32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f12:	601a      	str	r2, [r3, #0]
    pDest++;
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	3301      	adds	r3, #1
 8013f18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f22:	3301      	adds	r3, #1
 8013f24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f28:	3301      	adds	r3, #1
 8013f2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013f2c:	6a3b      	ldr	r3, [r7, #32]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	623b      	str	r3, [r7, #32]
 8013f32:	6a3a      	ldr	r2, [r7, #32]
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d3e6      	bcc.n	8013f08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013f3a:	8bfb      	ldrh	r3, [r7, #30]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d01e      	beq.n	8013f7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013f40:	2300      	movs	r3, #0
 8013f42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013f44:	69bb      	ldr	r3, [r7, #24]
 8013f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	f107 0310 	add.w	r3, r7, #16
 8013f50:	6812      	ldr	r2, [r2, #0]
 8013f52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013f54:	693a      	ldr	r2, [r7, #16]
 8013f56:	6a3b      	ldr	r3, [r7, #32]
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	00db      	lsls	r3, r3, #3
 8013f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8013f60:	b2da      	uxtb	r2, r3
 8013f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f64:	701a      	strb	r2, [r3, #0]
      i++;
 8013f66:	6a3b      	ldr	r3, [r7, #32]
 8013f68:	3301      	adds	r3, #1
 8013f6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	3301      	adds	r3, #1
 8013f70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013f72:	8bfb      	ldrh	r3, [r7, #30]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013f78:	8bfb      	ldrh	r3, [r7, #30]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1ea      	bne.n	8013f54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	372c      	adds	r7, #44	; 0x2c
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b085      	sub	sp, #20
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	785b      	ldrb	r3, [r3, #1]
 8013fa4:	2b01      	cmp	r3, #1
 8013fa6:	d12c      	bne.n	8014002 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	015a      	lsls	r2, r3, #5
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	4413      	add	r3, r2
 8013fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	db12      	blt.n	8013fe0 <USB_EPSetStall+0x54>
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d00f      	beq.n	8013fe0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	015a      	lsls	r2, r3, #5
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	0151      	lsls	r1, r2, #5
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	440a      	add	r2, r1
 8013fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013fde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	015a      	lsls	r2, r3, #5
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	4413      	add	r3, r2
 8013fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	68ba      	ldr	r2, [r7, #8]
 8013ff0:	0151      	lsls	r1, r2, #5
 8013ff2:	68fa      	ldr	r2, [r7, #12]
 8013ff4:	440a      	add	r2, r1
 8013ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ffe:	6013      	str	r3, [r2, #0]
 8014000:	e02b      	b.n	801405a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	015a      	lsls	r2, r3, #5
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	4413      	add	r3, r2
 801400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	db12      	blt.n	801403a <USB_EPSetStall+0xae>
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00f      	beq.n	801403a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	015a      	lsls	r2, r3, #5
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	4413      	add	r3, r2
 8014022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	68ba      	ldr	r2, [r7, #8]
 801402a:	0151      	lsls	r1, r2, #5
 801402c:	68fa      	ldr	r2, [r7, #12]
 801402e:	440a      	add	r2, r1
 8014030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014038:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	015a      	lsls	r2, r3, #5
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	4413      	add	r3, r2
 8014042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	68ba      	ldr	r2, [r7, #8]
 801404a:	0151      	lsls	r1, r2, #5
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	440a      	add	r2, r1
 8014050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014058:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801405a:	2300      	movs	r3, #0
}
 801405c:	4618      	mov	r0, r3
 801405e:	3714      	adds	r7, #20
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014068:	b480      	push	{r7}
 801406a:	b085      	sub	sp, #20
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	785b      	ldrb	r3, [r3, #1]
 8014080:	2b01      	cmp	r3, #1
 8014082:	d128      	bne.n	80140d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	015a      	lsls	r2, r3, #5
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	4413      	add	r3, r2
 801408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	68ba      	ldr	r2, [r7, #8]
 8014094:	0151      	lsls	r1, r2, #5
 8014096:	68fa      	ldr	r2, [r7, #12]
 8014098:	440a      	add	r2, r1
 801409a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801409e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80140a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	791b      	ldrb	r3, [r3, #4]
 80140a8:	2b03      	cmp	r3, #3
 80140aa:	d003      	beq.n	80140b4 <USB_EPClearStall+0x4c>
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	791b      	ldrb	r3, [r3, #4]
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	d138      	bne.n	8014126 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	015a      	lsls	r2, r3, #5
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	4413      	add	r3, r2
 80140bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	68ba      	ldr	r2, [r7, #8]
 80140c4:	0151      	lsls	r1, r2, #5
 80140c6:	68fa      	ldr	r2, [r7, #12]
 80140c8:	440a      	add	r2, r1
 80140ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80140d2:	6013      	str	r3, [r2, #0]
 80140d4:	e027      	b.n	8014126 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	015a      	lsls	r2, r3, #5
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	4413      	add	r3, r2
 80140de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	68ba      	ldr	r2, [r7, #8]
 80140e6:	0151      	lsls	r1, r2, #5
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	440a      	add	r2, r1
 80140ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80140f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	791b      	ldrb	r3, [r3, #4]
 80140fa:	2b03      	cmp	r3, #3
 80140fc:	d003      	beq.n	8014106 <USB_EPClearStall+0x9e>
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	791b      	ldrb	r3, [r3, #4]
 8014102:	2b02      	cmp	r3, #2
 8014104:	d10f      	bne.n	8014126 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	015a      	lsls	r2, r3, #5
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	4413      	add	r3, r2
 801410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	0151      	lsls	r1, r2, #5
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	440a      	add	r2, r1
 801411c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014124:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014126:	2300      	movs	r3, #0
}
 8014128:	4618      	mov	r0, r3
 801412a:	3714      	adds	r7, #20
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr

08014134 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014134:	b480      	push	{r7}
 8014136:	b085      	sub	sp, #20
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	460b      	mov	r3, r1
 801413e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	68fa      	ldr	r2, [r7, #12]
 801414e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014152:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014156:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	78fb      	ldrb	r3, [r7, #3]
 8014162:	011b      	lsls	r3, r3, #4
 8014164:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014168:	68f9      	ldr	r1, [r7, #12]
 801416a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801416e:	4313      	orrs	r3, r2
 8014170:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3714      	adds	r7, #20
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	4770      	bx	lr

08014180 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014180:	b480      	push	{r7}
 8014182:	b085      	sub	sp, #20
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801419a:	f023 0303 	bic.w	r3, r3, #3
 801419e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	68fa      	ldr	r2, [r7, #12]
 80141aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80141ae:	f023 0302 	bic.w	r3, r3, #2
 80141b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80141b4:	2300      	movs	r3, #0
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3714      	adds	r7, #20
 80141ba:	46bd      	mov	sp, r7
 80141bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c0:	4770      	bx	lr

080141c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80141c2:	b480      	push	{r7}
 80141c4:	b085      	sub	sp, #20
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	68fa      	ldr	r2, [r7, #12]
 80141d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80141dc:	f023 0303 	bic.w	r3, r3, #3
 80141e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80141f0:	f043 0302 	orr.w	r3, r3, #2
 80141f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80141f6:	2300      	movs	r3, #0
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	3714      	adds	r7, #20
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr

08014204 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014204:	b480      	push	{r7}
 8014206:	b085      	sub	sp, #20
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	695b      	ldr	r3, [r3, #20]
 8014210:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	699b      	ldr	r3, [r3, #24]
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	4013      	ands	r3, r2
 801421a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801421c:	68fb      	ldr	r3, [r7, #12]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3714      	adds	r7, #20
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr

0801422a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801422a:	b480      	push	{r7}
 801422c:	b085      	sub	sp, #20
 801422e:	af00      	add	r7, sp, #0
 8014230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801423c:	699b      	ldr	r3, [r3, #24]
 801423e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014246:	69db      	ldr	r3, [r3, #28]
 8014248:	68ba      	ldr	r2, [r7, #8]
 801424a:	4013      	ands	r3, r2
 801424c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	0c1b      	lsrs	r3, r3, #16
}
 8014252:	4618      	mov	r0, r3
 8014254:	3714      	adds	r7, #20
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr

0801425e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801425e:	b480      	push	{r7}
 8014260:	b085      	sub	sp, #20
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014270:	699b      	ldr	r3, [r3, #24]
 8014272:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801427a:	69db      	ldr	r3, [r3, #28]
 801427c:	68ba      	ldr	r2, [r7, #8]
 801427e:	4013      	ands	r3, r2
 8014280:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	b29b      	uxth	r3, r3
}
 8014286:	4618      	mov	r0, r3
 8014288:	3714      	adds	r7, #20
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr

08014292 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014292:	b480      	push	{r7}
 8014294:	b085      	sub	sp, #20
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
 801429a:	460b      	mov	r3, r1
 801429c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80142a2:	78fb      	ldrb	r3, [r7, #3]
 80142a4:	015a      	lsls	r2, r3, #5
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	4413      	add	r3, r2
 80142aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ae:	689b      	ldr	r3, [r3, #8]
 80142b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142b8:	695b      	ldr	r3, [r3, #20]
 80142ba:	68ba      	ldr	r2, [r7, #8]
 80142bc:	4013      	ands	r3, r2
 80142be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80142c0:	68bb      	ldr	r3, [r7, #8]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3714      	adds	r7, #20
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr

080142ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80142ce:	b480      	push	{r7}
 80142d0:	b087      	sub	sp, #28
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
 80142d6:	460b      	mov	r3, r1
 80142d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142e4:	691b      	ldr	r3, [r3, #16]
 80142e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80142f2:	78fb      	ldrb	r3, [r7, #3]
 80142f4:	f003 030f 	and.w	r3, r3, #15
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	fa22 f303 	lsr.w	r3, r2, r3
 80142fe:	01db      	lsls	r3, r3, #7
 8014300:	b2db      	uxtb	r3, r3
 8014302:	693a      	ldr	r2, [r7, #16]
 8014304:	4313      	orrs	r3, r2
 8014306:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014308:	78fb      	ldrb	r3, [r7, #3]
 801430a:	015a      	lsls	r2, r3, #5
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	4413      	add	r3, r2
 8014310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	693a      	ldr	r2, [r7, #16]
 8014318:	4013      	ands	r3, r2
 801431a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801431c:	68bb      	ldr	r3, [r7, #8]
}
 801431e:	4618      	mov	r0, r3
 8014320:	371c      	adds	r7, #28
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr

0801432a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801432a:	b480      	push	{r7}
 801432c:	b083      	sub	sp, #12
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	695b      	ldr	r3, [r3, #20]
 8014336:	f003 0301 	and.w	r3, r3, #1
}
 801433a:	4618      	mov	r0, r3
 801433c:	370c      	adds	r7, #12
 801433e:	46bd      	mov	sp, r7
 8014340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014344:	4770      	bx	lr
	...

08014348 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014348:	b480      	push	{r7}
 801434a:	b085      	sub	sp, #20
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014362:	4619      	mov	r1, r3
 8014364:	4b09      	ldr	r3, [pc, #36]	; (801438c <USB_ActivateSetup+0x44>)
 8014366:	4013      	ands	r3, r2
 8014368:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	68fa      	ldr	r2, [r7, #12]
 8014374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801437c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801437e:	2300      	movs	r3, #0
}
 8014380:	4618      	mov	r0, r3
 8014382:	3714      	adds	r7, #20
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	fffff800 	.word	0xfffff800

08014390 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014390:	b480      	push	{r7}
 8014392:	b087      	sub	sp, #28
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	460b      	mov	r3, r1
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	333c      	adds	r3, #60	; 0x3c
 80143a6:	3304      	adds	r3, #4
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	4a26      	ldr	r2, [pc, #152]	; (8014448 <USB_EP0_OutStart+0xb8>)
 80143b0:	4293      	cmp	r3, r2
 80143b2:	d90a      	bls.n	80143ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80143c4:	d101      	bne.n	80143ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80143c6:	2300      	movs	r3, #0
 80143c8:	e037      	b.n	801443a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143d0:	461a      	mov	r2, r3
 80143d2:	2300      	movs	r3, #0
 80143d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143dc:	691b      	ldr	r3, [r3, #16]
 80143de:	697a      	ldr	r2, [r7, #20]
 80143e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f0:	691b      	ldr	r3, [r3, #16]
 80143f2:	697a      	ldr	r2, [r7, #20]
 80143f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143f8:	f043 0318 	orr.w	r3, r3, #24
 80143fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014404:	691b      	ldr	r3, [r3, #16]
 8014406:	697a      	ldr	r2, [r7, #20]
 8014408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801440c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014410:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014412:	7afb      	ldrb	r3, [r7, #11]
 8014414:	2b01      	cmp	r3, #1
 8014416:	d10f      	bne.n	8014438 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801441e:	461a      	mov	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	697a      	ldr	r2, [r7, #20]
 801442e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014432:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014436:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014438:	2300      	movs	r3, #0
}
 801443a:	4618      	mov	r0, r3
 801443c:	371c      	adds	r7, #28
 801443e:	46bd      	mov	sp, r7
 8014440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014444:	4770      	bx	lr
 8014446:	bf00      	nop
 8014448:	4f54300a 	.word	0x4f54300a

0801444c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801444c:	b480      	push	{r7}
 801444e:	b085      	sub	sp, #20
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014454:	2300      	movs	r3, #0
 8014456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	3301      	adds	r3, #1
 801445c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	4a13      	ldr	r2, [pc, #76]	; (80144b0 <USB_CoreReset+0x64>)
 8014462:	4293      	cmp	r3, r2
 8014464:	d901      	bls.n	801446a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014466:	2303      	movs	r3, #3
 8014468:	e01b      	b.n	80144a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	691b      	ldr	r3, [r3, #16]
 801446e:	2b00      	cmp	r3, #0
 8014470:	daf2      	bge.n	8014458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014472:	2300      	movs	r3, #0
 8014474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	f043 0201 	orr.w	r2, r3, #1
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	3301      	adds	r3, #1
 8014486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	4a09      	ldr	r2, [pc, #36]	; (80144b0 <USB_CoreReset+0x64>)
 801448c:	4293      	cmp	r3, r2
 801448e:	d901      	bls.n	8014494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014490:	2303      	movs	r3, #3
 8014492:	e006      	b.n	80144a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	691b      	ldr	r3, [r3, #16]
 8014498:	f003 0301 	and.w	r3, r3, #1
 801449c:	2b01      	cmp	r3, #1
 801449e:	d0f0      	beq.n	8014482 <USB_CoreReset+0x36>

  return HAL_OK;
 80144a0:	2300      	movs	r3, #0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3714      	adds	r7, #20
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr
 80144ae:	bf00      	nop
 80144b0:	00030d40 	.word	0x00030d40

080144b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80144b8:	4904      	ldr	r1, [pc, #16]	; (80144cc <MX_FATFS_Init+0x18>)
 80144ba:	4805      	ldr	r0, [pc, #20]	; (80144d0 <MX_FATFS_Init+0x1c>)
 80144bc:	f002 fa56 	bl	801696c <FATFS_LinkDriver>
 80144c0:	4603      	mov	r3, r0
 80144c2:	461a      	mov	r2, r3
 80144c4:	4b03      	ldr	r3, [pc, #12]	; (80144d4 <MX_FATFS_Init+0x20>)
 80144c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80144c8:	bf00      	nop
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	2400160c 	.word	0x2400160c
 80144d0:	0801c600 	.word	0x0801c600
 80144d4:	24001608 	.word	0x24001608

080144d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80144de:	2300      	movs	r3, #0
 80144e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80144e2:	f000 f885 	bl	80145f0 <BSP_SD_IsDetected>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d001      	beq.n	80144f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80144ec:	2302      	movs	r3, #2
 80144ee:	e012      	b.n	8014516 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80144f0:	480b      	ldr	r0, [pc, #44]	; (8014520 <BSP_SD_Init+0x48>)
 80144f2:	f7f8 ff99 	bl	800d428 <HAL_SD_Init>
 80144f6:	4603      	mov	r3, r0
 80144f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80144fa:	79fb      	ldrb	r3, [r7, #7]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d109      	bne.n	8014514 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014504:	4806      	ldr	r0, [pc, #24]	; (8014520 <BSP_SD_Init+0x48>)
 8014506:	f7f9 fe4f 	bl	800e1a8 <HAL_SD_ConfigWideBusOperation>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d001      	beq.n	8014514 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014510:	2301      	movs	r3, #1
 8014512:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014514:	79fb      	ldrb	r3, [r7, #7]
}
 8014516:	4618      	mov	r0, r3
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	24000f3c 	.word	0x24000f3c

08014524 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b086      	sub	sp, #24
 8014528:	af00      	add	r7, sp, #0
 801452a:	60f8      	str	r0, [r7, #12]
 801452c:	60b9      	str	r1, [r7, #8]
 801452e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014530:	2300      	movs	r3, #0
 8014532:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	68ba      	ldr	r2, [r7, #8]
 8014538:	68f9      	ldr	r1, [r7, #12]
 801453a:	4806      	ldr	r0, [pc, #24]	; (8014554 <BSP_SD_ReadBlocks_DMA+0x30>)
 801453c:	f7f9 f894 	bl	800d668 <HAL_SD_ReadBlocks_DMA>
 8014540:	4603      	mov	r3, r0
 8014542:	2b00      	cmp	r3, #0
 8014544:	d001      	beq.n	801454a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014546:	2301      	movs	r3, #1
 8014548:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801454a:	7dfb      	ldrb	r3, [r7, #23]
}
 801454c:	4618      	mov	r0, r3
 801454e:	3718      	adds	r7, #24
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}
 8014554:	24000f3c 	.word	0x24000f3c

08014558 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b086      	sub	sp, #24
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014564:	2300      	movs	r3, #0
 8014566:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	68ba      	ldr	r2, [r7, #8]
 801456c:	68f9      	ldr	r1, [r7, #12]
 801456e:	4806      	ldr	r0, [pc, #24]	; (8014588 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014570:	f7f9 f922 	bl	800d7b8 <HAL_SD_WriteBlocks_DMA>
 8014574:	4603      	mov	r3, r0
 8014576:	2b00      	cmp	r3, #0
 8014578:	d001      	beq.n	801457e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801457a:	2301      	movs	r3, #1
 801457c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801457e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014580:	4618      	mov	r0, r3
 8014582:	3718      	adds	r7, #24
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	24000f3c 	.word	0x24000f3c

0801458c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014590:	4805      	ldr	r0, [pc, #20]	; (80145a8 <BSP_SD_GetCardState+0x1c>)
 8014592:	f7f9 ff1b 	bl	800e3cc <HAL_SD_GetCardState>
 8014596:	4603      	mov	r3, r0
 8014598:	2b04      	cmp	r3, #4
 801459a:	bf14      	ite	ne
 801459c:	2301      	movne	r3, #1
 801459e:	2300      	moveq	r3, #0
 80145a0:	b2db      	uxtb	r3, r3
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	24000f3c 	.word	0x24000f3c

080145ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80145b4:	6879      	ldr	r1, [r7, #4]
 80145b6:	4803      	ldr	r0, [pc, #12]	; (80145c4 <BSP_SD_GetCardInfo+0x18>)
 80145b8:	f7f9 fdca 	bl	800e150 <HAL_SD_GetCardInfo>
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	24000f3c 	.word	0x24000f3c

080145c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80145d0:	f000 f9a0 	bl	8014914 <BSP_SD_WriteCpltCallback>
}
 80145d4:	bf00      	nop
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80145e4:	f000 f9a2 	bl	801492c <BSP_SD_ReadCpltCallback>
}
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80145f6:	2301      	movs	r3, #1
 80145f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80145fa:	f000 f80b 	bl	8014614 <BSP_PlatformIsDetected>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d101      	bne.n	8014608 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014604:	2300      	movs	r3, #0
 8014606:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014608:	79fb      	ldrb	r3, [r7, #7]
 801460a:	b2db      	uxtb	r3, r3
}
 801460c:	4618      	mov	r0, r3
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014614:	b580      	push	{r7, lr}
 8014616:	b082      	sub	sp, #8
 8014618:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801461a:	2301      	movs	r3, #1
 801461c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801461e:	2104      	movs	r1, #4
 8014620:	4806      	ldr	r0, [pc, #24]	; (801463c <BSP_PlatformIsDetected+0x28>)
 8014622:	f7f3 feef 	bl	8008404 <HAL_GPIO_ReadPin>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d001      	beq.n	8014630 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801462c:	2300      	movs	r3, #0
 801462e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014630:	79fb      	ldrb	r3, [r7, #7]
}
 8014632:	4618      	mov	r0, r3
 8014634:	3708      	adds	r7, #8
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	58020400 	.word	0x58020400

08014640 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b084      	sub	sp, #16
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014648:	f7ef fc34 	bl	8003eb4 <HAL_GetTick>
 801464c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801464e:	e006      	b.n	801465e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014650:	f7ff ff9c 	bl	801458c <BSP_SD_GetCardState>
 8014654:	4603      	mov	r3, r0
 8014656:	2b00      	cmp	r3, #0
 8014658:	d101      	bne.n	801465e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801465a:	2300      	movs	r3, #0
 801465c:	e009      	b.n	8014672 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801465e:	f7ef fc29 	bl	8003eb4 <HAL_GetTick>
 8014662:	4602      	mov	r2, r0
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	429a      	cmp	r2, r3
 801466c:	d8f0      	bhi.n	8014650 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801466e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014672:	4618      	mov	r0, r3
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
	...

0801467c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	4603      	mov	r3, r0
 8014684:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014686:	4b0b      	ldr	r3, [pc, #44]	; (80146b4 <SD_CheckStatus+0x38>)
 8014688:	2201      	movs	r2, #1
 801468a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801468c:	f7ff ff7e 	bl	801458c <BSP_SD_GetCardState>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d107      	bne.n	80146a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014696:	4b07      	ldr	r3, [pc, #28]	; (80146b4 <SD_CheckStatus+0x38>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	b2db      	uxtb	r3, r3
 801469c:	f023 0301 	bic.w	r3, r3, #1
 80146a0:	b2da      	uxtb	r2, r3
 80146a2:	4b04      	ldr	r3, [pc, #16]	; (80146b4 <SD_CheckStatus+0x38>)
 80146a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80146a6:	4b03      	ldr	r3, [pc, #12]	; (80146b4 <SD_CheckStatus+0x38>)
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	b2db      	uxtb	r3, r3
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	2400000d 	.word	0x2400000d

080146b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b082      	sub	sp, #8
 80146bc:	af00      	add	r7, sp, #0
 80146be:	4603      	mov	r3, r0
 80146c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80146c2:	f7ff ff09 	bl	80144d8 <BSP_SD_Init>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d107      	bne.n	80146dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80146cc:	79fb      	ldrb	r3, [r7, #7]
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7ff ffd4 	bl	801467c <SD_CheckStatus>
 80146d4:	4603      	mov	r3, r0
 80146d6:	461a      	mov	r2, r3
 80146d8:	4b04      	ldr	r3, [pc, #16]	; (80146ec <SD_initialize+0x34>)
 80146da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80146dc:	4b03      	ldr	r3, [pc, #12]	; (80146ec <SD_initialize+0x34>)
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	b2db      	uxtb	r3, r3
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	2400000d 	.word	0x2400000d

080146f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	4603      	mov	r3, r0
 80146f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80146fa:	79fb      	ldrb	r3, [r7, #7]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7ff ffbd 	bl	801467c <SD_CheckStatus>
 8014702:	4603      	mov	r3, r0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b086      	sub	sp, #24
 8014710:	af00      	add	r7, sp, #0
 8014712:	60b9      	str	r1, [r7, #8]
 8014714:	607a      	str	r2, [r7, #4]
 8014716:	603b      	str	r3, [r7, #0]
 8014718:	4603      	mov	r3, r0
 801471a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801471c:	2301      	movs	r3, #1
 801471e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014720:	f247 5030 	movw	r0, #30000	; 0x7530
 8014724:	f7ff ff8c 	bl	8014640 <SD_CheckStatusWithTimeout>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	da01      	bge.n	8014732 <SD_read+0x26>
  {
    return res;
 801472e:	7dfb      	ldrb	r3, [r7, #23]
 8014730:	e03b      	b.n	80147aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014732:	683a      	ldr	r2, [r7, #0]
 8014734:	6879      	ldr	r1, [r7, #4]
 8014736:	68b8      	ldr	r0, [r7, #8]
 8014738:	f7ff fef4 	bl	8014524 <BSP_SD_ReadBlocks_DMA>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d132      	bne.n	80147a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014742:	4b1c      	ldr	r3, [pc, #112]	; (80147b4 <SD_read+0xa8>)
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014748:	f7ef fbb4 	bl	8003eb4 <HAL_GetTick>
 801474c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801474e:	bf00      	nop
 8014750:	4b18      	ldr	r3, [pc, #96]	; (80147b4 <SD_read+0xa8>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d108      	bne.n	801476a <SD_read+0x5e>
 8014758:	f7ef fbac 	bl	8003eb4 <HAL_GetTick>
 801475c:	4602      	mov	r2, r0
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	1ad3      	subs	r3, r2, r3
 8014762:	f247 522f 	movw	r2, #29999	; 0x752f
 8014766:	4293      	cmp	r3, r2
 8014768:	d9f2      	bls.n	8014750 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801476a:	4b12      	ldr	r3, [pc, #72]	; (80147b4 <SD_read+0xa8>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d102      	bne.n	8014778 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014772:	2301      	movs	r3, #1
 8014774:	75fb      	strb	r3, [r7, #23]
 8014776:	e017      	b.n	80147a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014778:	4b0e      	ldr	r3, [pc, #56]	; (80147b4 <SD_read+0xa8>)
 801477a:	2200      	movs	r2, #0
 801477c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801477e:	f7ef fb99 	bl	8003eb4 <HAL_GetTick>
 8014782:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014784:	e007      	b.n	8014796 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014786:	f7ff ff01 	bl	801458c <BSP_SD_GetCardState>
 801478a:	4603      	mov	r3, r0
 801478c:	2b00      	cmp	r3, #0
 801478e:	d102      	bne.n	8014796 <SD_read+0x8a>
          {
            res = RES_OK;
 8014790:	2300      	movs	r3, #0
 8014792:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014794:	e008      	b.n	80147a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014796:	f7ef fb8d 	bl	8003eb4 <HAL_GetTick>
 801479a:	4602      	mov	r2, r0
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	1ad3      	subs	r3, r2, r3
 80147a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d9ee      	bls.n	8014786 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80147a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3718      	adds	r7, #24
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	bf00      	nop
 80147b4:	24001614 	.word	0x24001614

080147b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b086      	sub	sp, #24
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60b9      	str	r1, [r7, #8]
 80147c0:	607a      	str	r2, [r7, #4]
 80147c2:	603b      	str	r3, [r7, #0]
 80147c4:	4603      	mov	r3, r0
 80147c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80147c8:	2301      	movs	r3, #1
 80147ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80147cc:	4b24      	ldr	r3, [pc, #144]	; (8014860 <SD_write+0xa8>)
 80147ce:	2200      	movs	r2, #0
 80147d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80147d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80147d6:	f7ff ff33 	bl	8014640 <SD_CheckStatusWithTimeout>
 80147da:	4603      	mov	r3, r0
 80147dc:	2b00      	cmp	r3, #0
 80147de:	da01      	bge.n	80147e4 <SD_write+0x2c>
  {
    return res;
 80147e0:	7dfb      	ldrb	r3, [r7, #23]
 80147e2:	e038      	b.n	8014856 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80147e4:	683a      	ldr	r2, [r7, #0]
 80147e6:	6879      	ldr	r1, [r7, #4]
 80147e8:	68b8      	ldr	r0, [r7, #8]
 80147ea:	f7ff feb5 	bl	8014558 <BSP_SD_WriteBlocks_DMA>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d12f      	bne.n	8014854 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80147f4:	f7ef fb5e 	bl	8003eb4 <HAL_GetTick>
 80147f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80147fa:	bf00      	nop
 80147fc:	4b18      	ldr	r3, [pc, #96]	; (8014860 <SD_write+0xa8>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d108      	bne.n	8014816 <SD_write+0x5e>
 8014804:	f7ef fb56 	bl	8003eb4 <HAL_GetTick>
 8014808:	4602      	mov	r2, r0
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014812:	4293      	cmp	r3, r2
 8014814:	d9f2      	bls.n	80147fc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014816:	4b12      	ldr	r3, [pc, #72]	; (8014860 <SD_write+0xa8>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d102      	bne.n	8014824 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801481e:	2301      	movs	r3, #1
 8014820:	75fb      	strb	r3, [r7, #23]
 8014822:	e017      	b.n	8014854 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014824:	4b0e      	ldr	r3, [pc, #56]	; (8014860 <SD_write+0xa8>)
 8014826:	2200      	movs	r2, #0
 8014828:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801482a:	f7ef fb43 	bl	8003eb4 <HAL_GetTick>
 801482e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014830:	e007      	b.n	8014842 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014832:	f7ff feab 	bl	801458c <BSP_SD_GetCardState>
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d102      	bne.n	8014842 <SD_write+0x8a>
          {
            res = RES_OK;
 801483c:	2300      	movs	r3, #0
 801483e:	75fb      	strb	r3, [r7, #23]
            break;
 8014840:	e008      	b.n	8014854 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014842:	f7ef fb37 	bl	8003eb4 <HAL_GetTick>
 8014846:	4602      	mov	r2, r0
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014850:	4293      	cmp	r3, r2
 8014852:	d9ee      	bls.n	8014832 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014854:	7dfb      	ldrb	r3, [r7, #23]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	24001610 	.word	0x24001610

08014864 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b08c      	sub	sp, #48	; 0x30
 8014868:	af00      	add	r7, sp, #0
 801486a:	4603      	mov	r3, r0
 801486c:	603a      	str	r2, [r7, #0]
 801486e:	71fb      	strb	r3, [r7, #7]
 8014870:	460b      	mov	r3, r1
 8014872:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014874:	2301      	movs	r3, #1
 8014876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801487a:	4b25      	ldr	r3, [pc, #148]	; (8014910 <SD_ioctl+0xac>)
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	b2db      	uxtb	r3, r3
 8014880:	f003 0301 	and.w	r3, r3, #1
 8014884:	2b00      	cmp	r3, #0
 8014886:	d001      	beq.n	801488c <SD_ioctl+0x28>
 8014888:	2303      	movs	r3, #3
 801488a:	e03c      	b.n	8014906 <SD_ioctl+0xa2>

  switch (cmd)
 801488c:	79bb      	ldrb	r3, [r7, #6]
 801488e:	2b03      	cmp	r3, #3
 8014890:	d834      	bhi.n	80148fc <SD_ioctl+0x98>
 8014892:	a201      	add	r2, pc, #4	; (adr r2, 8014898 <SD_ioctl+0x34>)
 8014894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014898:	080148a9 	.word	0x080148a9
 801489c:	080148b1 	.word	0x080148b1
 80148a0:	080148c9 	.word	0x080148c9
 80148a4:	080148e3 	.word	0x080148e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80148a8:	2300      	movs	r3, #0
 80148aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148ae:	e028      	b.n	8014902 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80148b0:	f107 0308 	add.w	r3, r7, #8
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7ff fe79 	bl	80145ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80148ba:	6a3a      	ldr	r2, [r7, #32]
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148c0:	2300      	movs	r3, #0
 80148c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148c6:	e01c      	b.n	8014902 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148c8:	f107 0308 	add.w	r3, r7, #8
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7ff fe6d 	bl	80145ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80148d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80148da:	2300      	movs	r3, #0
 80148dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148e0:	e00f      	b.n	8014902 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80148e2:	f107 0308 	add.w	r3, r7, #8
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7ff fe60 	bl	80145ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	0a5a      	lsrs	r2, r3, #9
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80148f4:	2300      	movs	r3, #0
 80148f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80148fa:	e002      	b.n	8014902 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80148fc:	2304      	movs	r3, #4
 80148fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014906:	4618      	mov	r0, r3
 8014908:	3730      	adds	r7, #48	; 0x30
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	2400000d 	.word	0x2400000d

08014914 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014914:	b480      	push	{r7}
 8014916:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014918:	4b03      	ldr	r3, [pc, #12]	; (8014928 <BSP_SD_WriteCpltCallback+0x14>)
 801491a:	2201      	movs	r2, #1
 801491c:	601a      	str	r2, [r3, #0]
}
 801491e:	bf00      	nop
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr
 8014928:	24001610 	.word	0x24001610

0801492c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801492c:	b480      	push	{r7}
 801492e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014930:	4b03      	ldr	r3, [pc, #12]	; (8014940 <BSP_SD_ReadCpltCallback+0x14>)
 8014932:	2201      	movs	r2, #1
 8014934:	601a      	str	r2, [r3, #0]
}
 8014936:	bf00      	nop
 8014938:	46bd      	mov	sp, r7
 801493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493e:	4770      	bx	lr
 8014940:	24001614 	.word	0x24001614

08014944 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	460b      	mov	r3, r1
 801494e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014950:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014954:	f002 fcea 	bl	801732c <USBD_static_malloc>
 8014958:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d109      	bne.n	8014974 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	32b0      	adds	r2, #176	; 0xb0
 801496a:	2100      	movs	r1, #0
 801496c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014970:	2302      	movs	r3, #2
 8014972:	e0d4      	b.n	8014b1e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014974:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014978:	2100      	movs	r1, #0
 801497a:	68f8      	ldr	r0, [r7, #12]
 801497c:	f002 fd52 	bl	8017424 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	32b0      	adds	r2, #176	; 0xb0
 801498a:	68f9      	ldr	r1, [r7, #12]
 801498c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	32b0      	adds	r2, #176	; 0xb0
 801499a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	7c1b      	ldrb	r3, [r3, #16]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d138      	bne.n	8014a1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80149ac:	4b5e      	ldr	r3, [pc, #376]	; (8014b28 <USBD_CDC_Init+0x1e4>)
 80149ae:	7819      	ldrb	r1, [r3, #0]
 80149b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149b4:	2202      	movs	r2, #2
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f002 fb95 	bl	80170e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80149bc:	4b5a      	ldr	r3, [pc, #360]	; (8014b28 <USBD_CDC_Init+0x1e4>)
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	f003 020f 	and.w	r2, r3, #15
 80149c4:	6879      	ldr	r1, [r7, #4]
 80149c6:	4613      	mov	r3, r2
 80149c8:	009b      	lsls	r3, r3, #2
 80149ca:	4413      	add	r3, r2
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	440b      	add	r3, r1
 80149d0:	3324      	adds	r3, #36	; 0x24
 80149d2:	2201      	movs	r2, #1
 80149d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80149d6:	4b55      	ldr	r3, [pc, #340]	; (8014b2c <USBD_CDC_Init+0x1e8>)
 80149d8:	7819      	ldrb	r1, [r3, #0]
 80149da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149de:	2202      	movs	r2, #2
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f002 fb80 	bl	80170e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80149e6:	4b51      	ldr	r3, [pc, #324]	; (8014b2c <USBD_CDC_Init+0x1e8>)
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	f003 020f 	and.w	r2, r3, #15
 80149ee:	6879      	ldr	r1, [r7, #4]
 80149f0:	4613      	mov	r3, r2
 80149f2:	009b      	lsls	r3, r3, #2
 80149f4:	4413      	add	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	440b      	add	r3, r1
 80149fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80149fe:	2201      	movs	r2, #1
 8014a00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014a02:	4b4b      	ldr	r3, [pc, #300]	; (8014b30 <USBD_CDC_Init+0x1ec>)
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	f003 020f 	and.w	r2, r3, #15
 8014a0a:	6879      	ldr	r1, [r7, #4]
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	4413      	add	r3, r2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	440b      	add	r3, r1
 8014a16:	3326      	adds	r3, #38	; 0x26
 8014a18:	2210      	movs	r2, #16
 8014a1a:	801a      	strh	r2, [r3, #0]
 8014a1c:	e035      	b.n	8014a8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014a1e:	4b42      	ldr	r3, [pc, #264]	; (8014b28 <USBD_CDC_Init+0x1e4>)
 8014a20:	7819      	ldrb	r1, [r3, #0]
 8014a22:	2340      	movs	r3, #64	; 0x40
 8014a24:	2202      	movs	r2, #2
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f002 fb5d 	bl	80170e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014a2c:	4b3e      	ldr	r3, [pc, #248]	; (8014b28 <USBD_CDC_Init+0x1e4>)
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	f003 020f 	and.w	r2, r3, #15
 8014a34:	6879      	ldr	r1, [r7, #4]
 8014a36:	4613      	mov	r3, r2
 8014a38:	009b      	lsls	r3, r3, #2
 8014a3a:	4413      	add	r3, r2
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	440b      	add	r3, r1
 8014a40:	3324      	adds	r3, #36	; 0x24
 8014a42:	2201      	movs	r2, #1
 8014a44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014a46:	4b39      	ldr	r3, [pc, #228]	; (8014b2c <USBD_CDC_Init+0x1e8>)
 8014a48:	7819      	ldrb	r1, [r3, #0]
 8014a4a:	2340      	movs	r3, #64	; 0x40
 8014a4c:	2202      	movs	r2, #2
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f002 fb49 	bl	80170e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014a54:	4b35      	ldr	r3, [pc, #212]	; (8014b2c <USBD_CDC_Init+0x1e8>)
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	f003 020f 	and.w	r2, r3, #15
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	009b      	lsls	r3, r3, #2
 8014a62:	4413      	add	r3, r2
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	440b      	add	r3, r1
 8014a68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014a70:	4b2f      	ldr	r3, [pc, #188]	; (8014b30 <USBD_CDC_Init+0x1ec>)
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	f003 020f 	and.w	r2, r3, #15
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	4413      	add	r3, r2
 8014a80:	009b      	lsls	r3, r3, #2
 8014a82:	440b      	add	r3, r1
 8014a84:	3326      	adds	r3, #38	; 0x26
 8014a86:	2210      	movs	r2, #16
 8014a88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014a8a:	4b29      	ldr	r3, [pc, #164]	; (8014b30 <USBD_CDC_Init+0x1ec>)
 8014a8c:	7819      	ldrb	r1, [r3, #0]
 8014a8e:	2308      	movs	r3, #8
 8014a90:	2203      	movs	r2, #3
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f002 fb27 	bl	80170e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014a98:	4b25      	ldr	r3, [pc, #148]	; (8014b30 <USBD_CDC_Init+0x1ec>)
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	f003 020f 	and.w	r2, r3, #15
 8014aa0:	6879      	ldr	r1, [r7, #4]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	4413      	add	r3, r2
 8014aa8:	009b      	lsls	r3, r3, #2
 8014aaa:	440b      	add	r3, r1
 8014aac:	3324      	adds	r3, #36	; 0x24
 8014aae:	2201      	movs	r2, #1
 8014ab0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	33b0      	adds	r3, #176	; 0xb0
 8014ac4:	009b      	lsls	r3, r3, #2
 8014ac6:	4413      	add	r3, r2
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014ae8:	2302      	movs	r3, #2
 8014aea:	e018      	b.n	8014b1e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	7c1b      	ldrb	r3, [r3, #16]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d10a      	bne.n	8014b0a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014af4:	4b0d      	ldr	r3, [pc, #52]	; (8014b2c <USBD_CDC_Init+0x1e8>)
 8014af6:	7819      	ldrb	r1, [r3, #0]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f002 fbde 	bl	80172c4 <USBD_LL_PrepareReceive>
 8014b08:	e008      	b.n	8014b1c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014b0a:	4b08      	ldr	r3, [pc, #32]	; (8014b2c <USBD_CDC_Init+0x1e8>)
 8014b0c:	7819      	ldrb	r1, [r3, #0]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014b14:	2340      	movs	r3, #64	; 0x40
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f002 fbd4 	bl	80172c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014b1c:	2300      	movs	r3, #0
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3710      	adds	r7, #16
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	24000097 	.word	0x24000097
 8014b2c:	24000098 	.word	0x24000098
 8014b30:	24000099 	.word	0x24000099

08014b34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014b40:	4b3a      	ldr	r3, [pc, #232]	; (8014c2c <USBD_CDC_DeInit+0xf8>)
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	4619      	mov	r1, r3
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f002 faf3 	bl	8017132 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014b4c:	4b37      	ldr	r3, [pc, #220]	; (8014c2c <USBD_CDC_DeInit+0xf8>)
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	f003 020f 	and.w	r2, r3, #15
 8014b54:	6879      	ldr	r1, [r7, #4]
 8014b56:	4613      	mov	r3, r2
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	4413      	add	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	440b      	add	r3, r1
 8014b60:	3324      	adds	r3, #36	; 0x24
 8014b62:	2200      	movs	r2, #0
 8014b64:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014b66:	4b32      	ldr	r3, [pc, #200]	; (8014c30 <USBD_CDC_DeInit+0xfc>)
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f002 fae0 	bl	8017132 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014b72:	4b2f      	ldr	r3, [pc, #188]	; (8014c30 <USBD_CDC_DeInit+0xfc>)
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	f003 020f 	and.w	r2, r3, #15
 8014b7a:	6879      	ldr	r1, [r7, #4]
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	009b      	lsls	r3, r3, #2
 8014b80:	4413      	add	r3, r2
 8014b82:	009b      	lsls	r3, r3, #2
 8014b84:	440b      	add	r3, r1
 8014b86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014b8e:	4b29      	ldr	r3, [pc, #164]	; (8014c34 <USBD_CDC_DeInit+0x100>)
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	4619      	mov	r1, r3
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f002 facc 	bl	8017132 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014b9a:	4b26      	ldr	r3, [pc, #152]	; (8014c34 <USBD_CDC_DeInit+0x100>)
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	f003 020f 	and.w	r2, r3, #15
 8014ba2:	6879      	ldr	r1, [r7, #4]
 8014ba4:	4613      	mov	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4413      	add	r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	440b      	add	r3, r1
 8014bae:	3324      	adds	r3, #36	; 0x24
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014bb4:	4b1f      	ldr	r3, [pc, #124]	; (8014c34 <USBD_CDC_DeInit+0x100>)
 8014bb6:	781b      	ldrb	r3, [r3, #0]
 8014bb8:	f003 020f 	and.w	r2, r3, #15
 8014bbc:	6879      	ldr	r1, [r7, #4]
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	009b      	lsls	r3, r3, #2
 8014bc2:	4413      	add	r3, r2
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	440b      	add	r3, r1
 8014bc8:	3326      	adds	r3, #38	; 0x26
 8014bca:	2200      	movs	r2, #0
 8014bcc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	32b0      	adds	r2, #176	; 0xb0
 8014bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d01f      	beq.n	8014c20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	33b0      	adds	r3, #176	; 0xb0
 8014bea:	009b      	lsls	r3, r3, #2
 8014bec:	4413      	add	r3, r2
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	685b      	ldr	r3, [r3, #4]
 8014bf2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	32b0      	adds	r2, #176	; 0xb0
 8014bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c02:	4618      	mov	r0, r3
 8014c04:	f002 fba0 	bl	8017348 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	32b0      	adds	r2, #176	; 0xb0
 8014c12:	2100      	movs	r1, #0
 8014c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014c20:	2300      	movs	r3, #0
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3708      	adds	r7, #8
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	24000097 	.word	0x24000097
 8014c30:	24000098 	.word	0x24000098
 8014c34:	24000099 	.word	0x24000099

08014c38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b086      	sub	sp, #24
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	32b0      	adds	r2, #176	; 0xb0
 8014c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014c52:	2300      	movs	r3, #0
 8014c54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014c56:	2300      	movs	r3, #0
 8014c58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014c64:	2303      	movs	r3, #3
 8014c66:	e0bf      	b.n	8014de8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d050      	beq.n	8014d16 <USBD_CDC_Setup+0xde>
 8014c74:	2b20      	cmp	r3, #32
 8014c76:	f040 80af 	bne.w	8014dd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	88db      	ldrh	r3, [r3, #6]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d03a      	beq.n	8014cf8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	b25b      	sxtb	r3, r3
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	da1b      	bge.n	8014cc4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	33b0      	adds	r3, #176	; 0xb0
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	4413      	add	r3, r2
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	689b      	ldr	r3, [r3, #8]
 8014c9e:	683a      	ldr	r2, [r7, #0]
 8014ca0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014ca2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014ca4:	683a      	ldr	r2, [r7, #0]
 8014ca6:	88d2      	ldrh	r2, [r2, #6]
 8014ca8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	88db      	ldrh	r3, [r3, #6]
 8014cae:	2b07      	cmp	r3, #7
 8014cb0:	bf28      	it	cs
 8014cb2:	2307      	movcs	r3, #7
 8014cb4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	89fa      	ldrh	r2, [r7, #14]
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f001 fd89 	bl	80167d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014cc2:	e090      	b.n	8014de6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	785a      	ldrb	r2, [r3, #1]
 8014cc8:	693b      	ldr	r3, [r7, #16]
 8014cca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	88db      	ldrh	r3, [r3, #6]
 8014cd2:	2b3f      	cmp	r3, #63	; 0x3f
 8014cd4:	d803      	bhi.n	8014cde <USBD_CDC_Setup+0xa6>
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	88db      	ldrh	r3, [r3, #6]
 8014cda:	b2da      	uxtb	r2, r3
 8014cdc:	e000      	b.n	8014ce0 <USBD_CDC_Setup+0xa8>
 8014cde:	2240      	movs	r2, #64	; 0x40
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014ce6:	6939      	ldr	r1, [r7, #16]
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014cee:	461a      	mov	r2, r3
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f001 fd9b 	bl	801682c <USBD_CtlPrepareRx>
      break;
 8014cf6:	e076      	b.n	8014de6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cfe:	687a      	ldr	r2, [r7, #4]
 8014d00:	33b0      	adds	r3, #176	; 0xb0
 8014d02:	009b      	lsls	r3, r3, #2
 8014d04:	4413      	add	r3, r2
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	689b      	ldr	r3, [r3, #8]
 8014d0a:	683a      	ldr	r2, [r7, #0]
 8014d0c:	7850      	ldrb	r0, [r2, #1]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	6839      	ldr	r1, [r7, #0]
 8014d12:	4798      	blx	r3
      break;
 8014d14:	e067      	b.n	8014de6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	785b      	ldrb	r3, [r3, #1]
 8014d1a:	2b0b      	cmp	r3, #11
 8014d1c:	d851      	bhi.n	8014dc2 <USBD_CDC_Setup+0x18a>
 8014d1e:	a201      	add	r2, pc, #4	; (adr r2, 8014d24 <USBD_CDC_Setup+0xec>)
 8014d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d24:	08014d55 	.word	0x08014d55
 8014d28:	08014dd1 	.word	0x08014dd1
 8014d2c:	08014dc3 	.word	0x08014dc3
 8014d30:	08014dc3 	.word	0x08014dc3
 8014d34:	08014dc3 	.word	0x08014dc3
 8014d38:	08014dc3 	.word	0x08014dc3
 8014d3c:	08014dc3 	.word	0x08014dc3
 8014d40:	08014dc3 	.word	0x08014dc3
 8014d44:	08014dc3 	.word	0x08014dc3
 8014d48:	08014dc3 	.word	0x08014dc3
 8014d4c:	08014d7f 	.word	0x08014d7f
 8014d50:	08014da9 	.word	0x08014da9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	2b03      	cmp	r3, #3
 8014d5e:	d107      	bne.n	8014d70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014d60:	f107 030a 	add.w	r3, r7, #10
 8014d64:	2202      	movs	r2, #2
 8014d66:	4619      	mov	r1, r3
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f001 fd33 	bl	80167d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d6e:	e032      	b.n	8014dd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014d70:	6839      	ldr	r1, [r7, #0]
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f001 fcbd 	bl	80166f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014d78:	2303      	movs	r3, #3
 8014d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8014d7c:	e02b      	b.n	8014dd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d84:	b2db      	uxtb	r3, r3
 8014d86:	2b03      	cmp	r3, #3
 8014d88:	d107      	bne.n	8014d9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014d8a:	f107 030d 	add.w	r3, r7, #13
 8014d8e:	2201      	movs	r2, #1
 8014d90:	4619      	mov	r1, r3
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f001 fd1e 	bl	80167d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d98:	e01d      	b.n	8014dd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f001 fca8 	bl	80166f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014da2:	2303      	movs	r3, #3
 8014da4:	75fb      	strb	r3, [r7, #23]
          break;
 8014da6:	e016      	b.n	8014dd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	2b03      	cmp	r3, #3
 8014db2:	d00f      	beq.n	8014dd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014db4:	6839      	ldr	r1, [r7, #0]
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	f001 fc9b 	bl	80166f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014dbc:	2303      	movs	r3, #3
 8014dbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014dc0:	e008      	b.n	8014dd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014dc2:	6839      	ldr	r1, [r7, #0]
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f001 fc94 	bl	80166f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8014dca:	2303      	movs	r3, #3
 8014dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8014dce:	e002      	b.n	8014dd6 <USBD_CDC_Setup+0x19e>
          break;
 8014dd0:	bf00      	nop
 8014dd2:	e008      	b.n	8014de6 <USBD_CDC_Setup+0x1ae>
          break;
 8014dd4:	bf00      	nop
      }
      break;
 8014dd6:	e006      	b.n	8014de6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014dd8:	6839      	ldr	r1, [r7, #0]
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f001 fc89 	bl	80166f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8014de0:	2303      	movs	r3, #3
 8014de2:	75fb      	strb	r3, [r7, #23]
      break;
 8014de4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3718      	adds	r7, #24
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	460b      	mov	r3, r1
 8014dfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014e02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	32b0      	adds	r2, #176	; 0xb0
 8014e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d101      	bne.n	8014e1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014e16:	2303      	movs	r3, #3
 8014e18:	e065      	b.n	8014ee6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	32b0      	adds	r2, #176	; 0xb0
 8014e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014e2a:	78fb      	ldrb	r3, [r7, #3]
 8014e2c:	f003 020f 	and.w	r2, r3, #15
 8014e30:	6879      	ldr	r1, [r7, #4]
 8014e32:	4613      	mov	r3, r2
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	4413      	add	r3, r2
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	440b      	add	r3, r1
 8014e3c:	3318      	adds	r3, #24
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d02f      	beq.n	8014ea4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014e44:	78fb      	ldrb	r3, [r7, #3]
 8014e46:	f003 020f 	and.w	r2, r3, #15
 8014e4a:	6879      	ldr	r1, [r7, #4]
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	4413      	add	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	440b      	add	r3, r1
 8014e56:	3318      	adds	r3, #24
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	78fb      	ldrb	r3, [r7, #3]
 8014e5c:	f003 010f 	and.w	r1, r3, #15
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	460b      	mov	r3, r1
 8014e64:	00db      	lsls	r3, r3, #3
 8014e66:	440b      	add	r3, r1
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	4403      	add	r3, r0
 8014e6c:	3344      	adds	r3, #68	; 0x44
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	fbb2 f1f3 	udiv	r1, r2, r3
 8014e74:	fb01 f303 	mul.w	r3, r1, r3
 8014e78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d112      	bne.n	8014ea4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014e7e:	78fb      	ldrb	r3, [r7, #3]
 8014e80:	f003 020f 	and.w	r2, r3, #15
 8014e84:	6879      	ldr	r1, [r7, #4]
 8014e86:	4613      	mov	r3, r2
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	4413      	add	r3, r2
 8014e8c:	009b      	lsls	r3, r3, #2
 8014e8e:	440b      	add	r3, r1
 8014e90:	3318      	adds	r3, #24
 8014e92:	2200      	movs	r2, #0
 8014e94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014e96:	78f9      	ldrb	r1, [r7, #3]
 8014e98:	2300      	movs	r3, #0
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f002 f9f0 	bl	8017282 <USBD_LL_Transmit>
 8014ea2:	e01f      	b.n	8014ee4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	33b0      	adds	r3, #176	; 0xb0
 8014eb6:	009b      	lsls	r3, r3, #2
 8014eb8:	4413      	add	r3, r2
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	691b      	ldr	r3, [r3, #16]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d010      	beq.n	8014ee4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	33b0      	adds	r3, #176	; 0xb0
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	4413      	add	r3, r2
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	691b      	ldr	r3, [r3, #16]
 8014ed4:	68ba      	ldr	r2, [r7, #8]
 8014ed6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014eda:	68ba      	ldr	r2, [r7, #8]
 8014edc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014ee0:	78fa      	ldrb	r2, [r7, #3]
 8014ee2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b084      	sub	sp, #16
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	32b0      	adds	r2, #176	; 0xb0
 8014f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	32b0      	adds	r2, #176	; 0xb0
 8014f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d101      	bne.n	8014f20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014f1c:	2303      	movs	r3, #3
 8014f1e:	e01a      	b.n	8014f56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014f20:	78fb      	ldrb	r3, [r7, #3]
 8014f22:	4619      	mov	r1, r3
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f002 f9ee 	bl	8017306 <USBD_LL_GetRxDataSize>
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	33b0      	adds	r3, #176	; 0xb0
 8014f3c:	009b      	lsls	r3, r3, #2
 8014f3e:	4413      	add	r3, r2
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014f50:	4611      	mov	r1, r2
 8014f52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014f54:	2300      	movs	r3, #0
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3710      	adds	r7, #16
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}

08014f5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b084      	sub	sp, #16
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	32b0      	adds	r2, #176	; 0xb0
 8014f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d101      	bne.n	8014f80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	e025      	b.n	8014fcc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	33b0      	adds	r3, #176	; 0xb0
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	4413      	add	r3, r2
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d01a      	beq.n	8014fca <USBD_CDC_EP0_RxReady+0x6c>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014f9a:	2bff      	cmp	r3, #255	; 0xff
 8014f9c:	d015      	beq.n	8014fca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	33b0      	adds	r3, #176	; 0xb0
 8014fa8:	009b      	lsls	r3, r3, #2
 8014faa:	4413      	add	r3, r2
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014fb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014fb8:	68fa      	ldr	r2, [r7, #12]
 8014fba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014fbe:	b292      	uxth	r2, r2
 8014fc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	22ff      	movs	r2, #255	; 0xff
 8014fc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3710      	adds	r7, #16
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014fdc:	2182      	movs	r1, #130	; 0x82
 8014fde:	4818      	ldr	r0, [pc, #96]	; (8015040 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014fe0:	f000 fd4f 	bl	8015a82 <USBD_GetEpDesc>
 8014fe4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014fe6:	2101      	movs	r1, #1
 8014fe8:	4815      	ldr	r0, [pc, #84]	; (8015040 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014fea:	f000 fd4a 	bl	8015a82 <USBD_GetEpDesc>
 8014fee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ff0:	2181      	movs	r1, #129	; 0x81
 8014ff2:	4813      	ldr	r0, [pc, #76]	; (8015040 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ff4:	f000 fd45 	bl	8015a82 <USBD_GetEpDesc>
 8014ff8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d002      	beq.n	8015006 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	2210      	movs	r2, #16
 8015004:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d006      	beq.n	801501a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	2200      	movs	r2, #0
 8015010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015014:	711a      	strb	r2, [r3, #4]
 8015016:	2200      	movs	r2, #0
 8015018:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d006      	beq.n	801502e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	2200      	movs	r2, #0
 8015024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015028:	711a      	strb	r2, [r3, #4]
 801502a:	2200      	movs	r2, #0
 801502c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2243      	movs	r2, #67	; 0x43
 8015032:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015034:	4b02      	ldr	r3, [pc, #8]	; (8015040 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015036:	4618      	mov	r0, r3
 8015038:	3718      	adds	r7, #24
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
 801503e:	bf00      	nop
 8015040:	24000054 	.word	0x24000054

08015044 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801504c:	2182      	movs	r1, #130	; 0x82
 801504e:	4818      	ldr	r0, [pc, #96]	; (80150b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015050:	f000 fd17 	bl	8015a82 <USBD_GetEpDesc>
 8015054:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015056:	2101      	movs	r1, #1
 8015058:	4815      	ldr	r0, [pc, #84]	; (80150b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801505a:	f000 fd12 	bl	8015a82 <USBD_GetEpDesc>
 801505e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015060:	2181      	movs	r1, #129	; 0x81
 8015062:	4813      	ldr	r0, [pc, #76]	; (80150b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015064:	f000 fd0d 	bl	8015a82 <USBD_GetEpDesc>
 8015068:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d002      	beq.n	8015076 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015070:	697b      	ldr	r3, [r7, #20]
 8015072:	2210      	movs	r2, #16
 8015074:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d006      	beq.n	801508a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	2200      	movs	r2, #0
 8015080:	711a      	strb	r2, [r3, #4]
 8015082:	2200      	movs	r2, #0
 8015084:	f042 0202 	orr.w	r2, r2, #2
 8015088:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d006      	beq.n	801509e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2200      	movs	r2, #0
 8015094:	711a      	strb	r2, [r3, #4]
 8015096:	2200      	movs	r2, #0
 8015098:	f042 0202 	orr.w	r2, r2, #2
 801509c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2243      	movs	r2, #67	; 0x43
 80150a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80150a4:	4b02      	ldr	r3, [pc, #8]	; (80150b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3718      	adds	r7, #24
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}
 80150ae:	bf00      	nop
 80150b0:	24000054 	.word	0x24000054

080150b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80150bc:	2182      	movs	r1, #130	; 0x82
 80150be:	4818      	ldr	r0, [pc, #96]	; (8015120 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80150c0:	f000 fcdf 	bl	8015a82 <USBD_GetEpDesc>
 80150c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80150c6:	2101      	movs	r1, #1
 80150c8:	4815      	ldr	r0, [pc, #84]	; (8015120 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80150ca:	f000 fcda 	bl	8015a82 <USBD_GetEpDesc>
 80150ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80150d0:	2181      	movs	r1, #129	; 0x81
 80150d2:	4813      	ldr	r0, [pc, #76]	; (8015120 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80150d4:	f000 fcd5 	bl	8015a82 <USBD_GetEpDesc>
 80150d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d002      	beq.n	80150e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2210      	movs	r2, #16
 80150e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d006      	beq.n	80150fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	2200      	movs	r2, #0
 80150f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80150f4:	711a      	strb	r2, [r3, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d006      	beq.n	801510e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2200      	movs	r2, #0
 8015104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015108:	711a      	strb	r2, [r3, #4]
 801510a:	2200      	movs	r2, #0
 801510c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2243      	movs	r2, #67	; 0x43
 8015112:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015114:	4b02      	ldr	r3, [pc, #8]	; (8015120 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015116:	4618      	mov	r0, r3
 8015118:	3718      	adds	r7, #24
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	24000054 	.word	0x24000054

08015124 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015124:	b480      	push	{r7}
 8015126:	b083      	sub	sp, #12
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	220a      	movs	r2, #10
 8015130:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015132:	4b03      	ldr	r3, [pc, #12]	; (8015140 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015134:	4618      	mov	r0, r3
 8015136:	370c      	adds	r7, #12
 8015138:	46bd      	mov	sp, r7
 801513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513e:	4770      	bx	lr
 8015140:	24000010 	.word	0x24000010

08015144 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015144:	b480      	push	{r7}
 8015146:	b083      	sub	sp, #12
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801514e:	683b      	ldr	r3, [r7, #0]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d101      	bne.n	8015158 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015154:	2303      	movs	r3, #3
 8015156:	e009      	b.n	801516c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	33b0      	adds	r3, #176	; 0xb0
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	4413      	add	r3, r2
 8015166:	683a      	ldr	r2, [r7, #0]
 8015168:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801516a:	2300      	movs	r3, #0
}
 801516c:	4618      	mov	r0, r3
 801516e:	370c      	adds	r7, #12
 8015170:	46bd      	mov	sp, r7
 8015172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015176:	4770      	bx	lr

08015178 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015178:	b480      	push	{r7}
 801517a:	b087      	sub	sp, #28
 801517c:	af00      	add	r7, sp, #0
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	32b0      	adds	r2, #176	; 0xb0
 801518e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015192:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d101      	bne.n	801519e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801519a:	2303      	movs	r3, #3
 801519c:	e008      	b.n	80151b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	68ba      	ldr	r2, [r7, #8]
 80151a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80151a6:	697b      	ldr	r3, [r7, #20]
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80151ae:	2300      	movs	r3, #0
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	371c      	adds	r7, #28
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr

080151bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80151bc:	b480      	push	{r7}
 80151be:	b085      	sub	sp, #20
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	32b0      	adds	r2, #176	; 0xb0
 80151d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d101      	bne.n	80151e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80151dc:	2303      	movs	r3, #3
 80151de:	e004      	b.n	80151ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	683a      	ldr	r2, [r7, #0]
 80151e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80151e8:	2300      	movs	r3, #0
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3714      	adds	r7, #20
 80151ee:	46bd      	mov	sp, r7
 80151f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f4:	4770      	bx	lr
	...

080151f8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	32b0      	adds	r2, #176	; 0xb0
 801520a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015210:	2301      	movs	r3, #1
 8015212:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d101      	bne.n	801521e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801521a:	2303      	movs	r3, #3
 801521c:	e025      	b.n	801526a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015224:	2b00      	cmp	r3, #0
 8015226:	d11f      	bne.n	8015268 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	2201      	movs	r2, #1
 801522c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015230:	4b10      	ldr	r3, [pc, #64]	; (8015274 <USBD_CDC_TransmitPacket+0x7c>)
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	f003 020f 	and.w	r2, r3, #15
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801523e:	6878      	ldr	r0, [r7, #4]
 8015240:	4613      	mov	r3, r2
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	4413      	add	r3, r2
 8015246:	009b      	lsls	r3, r3, #2
 8015248:	4403      	add	r3, r0
 801524a:	3318      	adds	r3, #24
 801524c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801524e:	4b09      	ldr	r3, [pc, #36]	; (8015274 <USBD_CDC_TransmitPacket+0x7c>)
 8015250:	7819      	ldrb	r1, [r3, #0]
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f002 f80f 	bl	8017282 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015264:	2300      	movs	r3, #0
 8015266:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015268:	7bfb      	ldrb	r3, [r7, #15]
}
 801526a:	4618      	mov	r0, r3
 801526c:	3710      	adds	r7, #16
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	24000097 	.word	0x24000097

08015278 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b084      	sub	sp, #16
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	32b0      	adds	r2, #176	; 0xb0
 801528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801528e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	32b0      	adds	r2, #176	; 0xb0
 801529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d101      	bne.n	80152a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80152a2:	2303      	movs	r3, #3
 80152a4:	e018      	b.n	80152d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	7c1b      	ldrb	r3, [r3, #16]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d10a      	bne.n	80152c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80152ae:	4b0c      	ldr	r3, [pc, #48]	; (80152e0 <USBD_CDC_ReceivePacket+0x68>)
 80152b0:	7819      	ldrb	r1, [r3, #0]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f002 f801 	bl	80172c4 <USBD_LL_PrepareReceive>
 80152c2:	e008      	b.n	80152d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80152c4:	4b06      	ldr	r3, [pc, #24]	; (80152e0 <USBD_CDC_ReceivePacket+0x68>)
 80152c6:	7819      	ldrb	r1, [r3, #0]
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152ce:	2340      	movs	r3, #64	; 0x40
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f001 fff7 	bl	80172c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80152d6:	2300      	movs	r3, #0
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	24000098 	.word	0x24000098

080152e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b086      	sub	sp, #24
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	4613      	mov	r3, r2
 80152f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d101      	bne.n	80152fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80152f8:	2303      	movs	r3, #3
 80152fa:	e01f      	b.n	801533c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2200      	movs	r2, #0
 8015300:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2200      	movs	r2, #0
 8015308:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2200      	movs	r2, #0
 8015310:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d003      	beq.n	8015322 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	68ba      	ldr	r2, [r7, #8]
 801531e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2201      	movs	r2, #1
 8015326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	79fa      	ldrb	r2, [r7, #7]
 801532e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f001 fe6b 	bl	801700c <USBD_LL_Init>
 8015336:	4603      	mov	r3, r0
 8015338:	75fb      	strb	r3, [r7, #23]

  return ret;
 801533a:	7dfb      	ldrb	r3, [r7, #23]
}
 801533c:	4618      	mov	r0, r3
 801533e:	3718      	adds	r7, #24
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801534e:	2300      	movs	r3, #0
 8015350:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d101      	bne.n	801535c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015358:	2303      	movs	r3, #3
 801535a:	e025      	b.n	80153a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	683a      	ldr	r2, [r7, #0]
 8015360:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	32ae      	adds	r2, #174	; 0xae
 801536e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00f      	beq.n	8015398 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	32ae      	adds	r2, #174	; 0xae
 8015382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015388:	f107 020e 	add.w	r2, r7, #14
 801538c:	4610      	mov	r0, r2
 801538e:	4798      	blx	r3
 8015390:	4602      	mov	r2, r0
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801539e:	1c5a      	adds	r2, r3, #1
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80153a6:	2300      	movs	r3, #0
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f001 fe79 	bl	80170b0 <USBD_LL_Start>
 80153be:	4603      	mov	r3, r0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80153c8:	b480      	push	{r7}
 80153ca:	b083      	sub	sp, #12
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	370c      	adds	r7, #12
 80153d6:	46bd      	mov	sp, r7
 80153d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153dc:	4770      	bx	lr

080153de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153de:	b580      	push	{r7, lr}
 80153e0:	b084      	sub	sp, #16
 80153e2:	af00      	add	r7, sp, #0
 80153e4:	6078      	str	r0, [r7, #4]
 80153e6:	460b      	mov	r3, r1
 80153e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80153ea:	2300      	movs	r3, #0
 80153ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d009      	beq.n	801540c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	78fa      	ldrb	r2, [r7, #3]
 8015402:	4611      	mov	r1, r2
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	4798      	blx	r3
 8015408:	4603      	mov	r3, r0
 801540a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801540c:	7bfb      	ldrb	r3, [r7, #15]
}
 801540e:	4618      	mov	r0, r3
 8015410:	3710      	adds	r7, #16
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015416:	b580      	push	{r7, lr}
 8015418:	b084      	sub	sp, #16
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
 801541e:	460b      	mov	r3, r1
 8015420:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015422:	2300      	movs	r3, #0
 8015424:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	78fa      	ldrb	r2, [r7, #3]
 8015430:	4611      	mov	r1, r2
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	4798      	blx	r3
 8015436:	4603      	mov	r3, r0
 8015438:	2b00      	cmp	r3, #0
 801543a:	d001      	beq.n	8015440 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801543c:	2303      	movs	r3, #3
 801543e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015440:	7bfb      	ldrb	r3, [r7, #15]
}
 8015442:	4618      	mov	r0, r3
 8015444:	3710      	adds	r7, #16
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}

0801544a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801544a:	b580      	push	{r7, lr}
 801544c:	b084      	sub	sp, #16
 801544e:	af00      	add	r7, sp, #0
 8015450:	6078      	str	r0, [r7, #4]
 8015452:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801545a:	6839      	ldr	r1, [r7, #0]
 801545c:	4618      	mov	r0, r3
 801545e:	f001 f90e 	bl	801667e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2201      	movs	r2, #1
 8015466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015470:	461a      	mov	r2, r3
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801547e:	f003 031f 	and.w	r3, r3, #31
 8015482:	2b02      	cmp	r3, #2
 8015484:	d01a      	beq.n	80154bc <USBD_LL_SetupStage+0x72>
 8015486:	2b02      	cmp	r3, #2
 8015488:	d822      	bhi.n	80154d0 <USBD_LL_SetupStage+0x86>
 801548a:	2b00      	cmp	r3, #0
 801548c:	d002      	beq.n	8015494 <USBD_LL_SetupStage+0x4a>
 801548e:	2b01      	cmp	r3, #1
 8015490:	d00a      	beq.n	80154a8 <USBD_LL_SetupStage+0x5e>
 8015492:	e01d      	b.n	80154d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801549a:	4619      	mov	r1, r3
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f000 fb65 	bl	8015b6c <USBD_StdDevReq>
 80154a2:	4603      	mov	r3, r0
 80154a4:	73fb      	strb	r3, [r7, #15]
      break;
 80154a6:	e020      	b.n	80154ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154ae:	4619      	mov	r1, r3
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f000 fbcd 	bl	8015c50 <USBD_StdItfReq>
 80154b6:	4603      	mov	r3, r0
 80154b8:	73fb      	strb	r3, [r7, #15]
      break;
 80154ba:	e016      	b.n	80154ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154c2:	4619      	mov	r1, r3
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fc2f 	bl	8015d28 <USBD_StdEPReq>
 80154ca:	4603      	mov	r3, r0
 80154cc:	73fb      	strb	r3, [r7, #15]
      break;
 80154ce:	e00c      	b.n	80154ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80154da:	b2db      	uxtb	r3, r3
 80154dc:	4619      	mov	r1, r3
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f001 fe46 	bl	8017170 <USBD_LL_StallEP>
 80154e4:	4603      	mov	r3, r0
 80154e6:	73fb      	strb	r3, [r7, #15]
      break;
 80154e8:	bf00      	nop
  }

  return ret;
 80154ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3710      	adds	r7, #16
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	460b      	mov	r3, r1
 80154fe:	607a      	str	r2, [r7, #4]
 8015500:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015502:	2300      	movs	r3, #0
 8015504:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015506:	7afb      	ldrb	r3, [r7, #11]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d16e      	bne.n	80155ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015512:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801551a:	2b03      	cmp	r3, #3
 801551c:	f040 8098 	bne.w	8015650 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	689a      	ldr	r2, [r3, #8]
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	429a      	cmp	r2, r3
 801552a:	d913      	bls.n	8015554 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	689a      	ldr	r2, [r3, #8]
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	1ad2      	subs	r2, r2, r3
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	68da      	ldr	r2, [r3, #12]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	689b      	ldr	r3, [r3, #8]
 8015542:	4293      	cmp	r3, r2
 8015544:	bf28      	it	cs
 8015546:	4613      	movcs	r3, r2
 8015548:	461a      	mov	r2, r3
 801554a:	6879      	ldr	r1, [r7, #4]
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f001 f98a 	bl	8016866 <USBD_CtlContinueRx>
 8015552:	e07d      	b.n	8015650 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801555a:	f003 031f 	and.w	r3, r3, #31
 801555e:	2b02      	cmp	r3, #2
 8015560:	d014      	beq.n	801558c <USBD_LL_DataOutStage+0x98>
 8015562:	2b02      	cmp	r3, #2
 8015564:	d81d      	bhi.n	80155a2 <USBD_LL_DataOutStage+0xae>
 8015566:	2b00      	cmp	r3, #0
 8015568:	d002      	beq.n	8015570 <USBD_LL_DataOutStage+0x7c>
 801556a:	2b01      	cmp	r3, #1
 801556c:	d003      	beq.n	8015576 <USBD_LL_DataOutStage+0x82>
 801556e:	e018      	b.n	80155a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015570:	2300      	movs	r3, #0
 8015572:	75bb      	strb	r3, [r7, #22]
            break;
 8015574:	e018      	b.n	80155a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801557c:	b2db      	uxtb	r3, r3
 801557e:	4619      	mov	r1, r3
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	f000 fa64 	bl	8015a4e <USBD_CoreFindIF>
 8015586:	4603      	mov	r3, r0
 8015588:	75bb      	strb	r3, [r7, #22]
            break;
 801558a:	e00d      	b.n	80155a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015592:	b2db      	uxtb	r3, r3
 8015594:	4619      	mov	r1, r3
 8015596:	68f8      	ldr	r0, [r7, #12]
 8015598:	f000 fa66 	bl	8015a68 <USBD_CoreFindEP>
 801559c:	4603      	mov	r3, r0
 801559e:	75bb      	strb	r3, [r7, #22]
            break;
 80155a0:	e002      	b.n	80155a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80155a2:	2300      	movs	r3, #0
 80155a4:	75bb      	strb	r3, [r7, #22]
            break;
 80155a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80155a8:	7dbb      	ldrb	r3, [r7, #22]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d119      	bne.n	80155e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	2b03      	cmp	r3, #3
 80155b8:	d113      	bne.n	80155e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80155ba:	7dba      	ldrb	r2, [r7, #22]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	32ae      	adds	r2, #174	; 0xae
 80155c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155c4:	691b      	ldr	r3, [r3, #16]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00b      	beq.n	80155e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80155ca:	7dba      	ldrb	r2, [r7, #22]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80155d2:	7dba      	ldrb	r2, [r7, #22]
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	32ae      	adds	r2, #174	; 0xae
 80155d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155dc:	691b      	ldr	r3, [r3, #16]
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f001 f950 	bl	8016888 <USBD_CtlSendStatus>
 80155e8:	e032      	b.n	8015650 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80155ea:	7afb      	ldrb	r3, [r7, #11]
 80155ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	4619      	mov	r1, r3
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f000 fa37 	bl	8015a68 <USBD_CoreFindEP>
 80155fa:	4603      	mov	r3, r0
 80155fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155fe:	7dbb      	ldrb	r3, [r7, #22]
 8015600:	2bff      	cmp	r3, #255	; 0xff
 8015602:	d025      	beq.n	8015650 <USBD_LL_DataOutStage+0x15c>
 8015604:	7dbb      	ldrb	r3, [r7, #22]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d122      	bne.n	8015650 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015610:	b2db      	uxtb	r3, r3
 8015612:	2b03      	cmp	r3, #3
 8015614:	d117      	bne.n	8015646 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015616:	7dba      	ldrb	r2, [r7, #22]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	32ae      	adds	r2, #174	; 0xae
 801561c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015620:	699b      	ldr	r3, [r3, #24]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d00f      	beq.n	8015646 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015626:	7dba      	ldrb	r2, [r7, #22]
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801562e:	7dba      	ldrb	r2, [r7, #22]
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	32ae      	adds	r2, #174	; 0xae
 8015634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015638:	699b      	ldr	r3, [r3, #24]
 801563a:	7afa      	ldrb	r2, [r7, #11]
 801563c:	4611      	mov	r1, r2
 801563e:	68f8      	ldr	r0, [r7, #12]
 8015640:	4798      	blx	r3
 8015642:	4603      	mov	r3, r0
 8015644:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015646:	7dfb      	ldrb	r3, [r7, #23]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d001      	beq.n	8015650 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801564c:	7dfb      	ldrb	r3, [r7, #23]
 801564e:	e000      	b.n	8015652 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015650:	2300      	movs	r3, #0
}
 8015652:	4618      	mov	r0, r3
 8015654:	3718      	adds	r7, #24
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}

0801565a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801565a:	b580      	push	{r7, lr}
 801565c:	b086      	sub	sp, #24
 801565e:	af00      	add	r7, sp, #0
 8015660:	60f8      	str	r0, [r7, #12]
 8015662:	460b      	mov	r3, r1
 8015664:	607a      	str	r2, [r7, #4]
 8015666:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015668:	7afb      	ldrb	r3, [r7, #11]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d16f      	bne.n	801574e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	3314      	adds	r3, #20
 8015672:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801567a:	2b02      	cmp	r3, #2
 801567c:	d15a      	bne.n	8015734 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	689a      	ldr	r2, [r3, #8]
 8015682:	693b      	ldr	r3, [r7, #16]
 8015684:	68db      	ldr	r3, [r3, #12]
 8015686:	429a      	cmp	r2, r3
 8015688:	d914      	bls.n	80156b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	689a      	ldr	r2, [r3, #8]
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	68db      	ldr	r3, [r3, #12]
 8015692:	1ad2      	subs	r2, r2, r3
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	689b      	ldr	r3, [r3, #8]
 801569c:	461a      	mov	r2, r3
 801569e:	6879      	ldr	r1, [r7, #4]
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	f001 f8b2 	bl	801680a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156a6:	2300      	movs	r3, #0
 80156a8:	2200      	movs	r2, #0
 80156aa:	2100      	movs	r1, #0
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f001 fe09 	bl	80172c4 <USBD_LL_PrepareReceive>
 80156b2:	e03f      	b.n	8015734 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	68da      	ldr	r2, [r3, #12]
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d11c      	bne.n	80156fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	685a      	ldr	r2, [r3, #4]
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d316      	bcc.n	80156fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	685a      	ldr	r2, [r3, #4]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d20f      	bcs.n	80156fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80156da:	2200      	movs	r2, #0
 80156dc:	2100      	movs	r1, #0
 80156de:	68f8      	ldr	r0, [r7, #12]
 80156e0:	f001 f893 	bl	801680a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2200      	movs	r2, #0
 80156e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156ec:	2300      	movs	r3, #0
 80156ee:	2200      	movs	r2, #0
 80156f0:	2100      	movs	r1, #0
 80156f2:	68f8      	ldr	r0, [r7, #12]
 80156f4:	f001 fde6 	bl	80172c4 <USBD_LL_PrepareReceive>
 80156f8:	e01c      	b.n	8015734 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015700:	b2db      	uxtb	r3, r3
 8015702:	2b03      	cmp	r3, #3
 8015704:	d10f      	bne.n	8015726 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d009      	beq.n	8015726 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	2200      	movs	r2, #0
 8015716:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015726:	2180      	movs	r1, #128	; 0x80
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f001 fd21 	bl	8017170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801572e:	68f8      	ldr	r0, [r7, #12]
 8015730:	f001 f8bd 	bl	80168ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d03a      	beq.n	80157b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801573e:	68f8      	ldr	r0, [r7, #12]
 8015740:	f7ff fe42 	bl	80153c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	2200      	movs	r2, #0
 8015748:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801574c:	e032      	b.n	80157b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801574e:	7afb      	ldrb	r3, [r7, #11]
 8015750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015754:	b2db      	uxtb	r3, r3
 8015756:	4619      	mov	r1, r3
 8015758:	68f8      	ldr	r0, [r7, #12]
 801575a:	f000 f985 	bl	8015a68 <USBD_CoreFindEP>
 801575e:	4603      	mov	r3, r0
 8015760:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015762:	7dfb      	ldrb	r3, [r7, #23]
 8015764:	2bff      	cmp	r3, #255	; 0xff
 8015766:	d025      	beq.n	80157b4 <USBD_LL_DataInStage+0x15a>
 8015768:	7dfb      	ldrb	r3, [r7, #23]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d122      	bne.n	80157b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015774:	b2db      	uxtb	r3, r3
 8015776:	2b03      	cmp	r3, #3
 8015778:	d11c      	bne.n	80157b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801577a:	7dfa      	ldrb	r2, [r7, #23]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	32ae      	adds	r2, #174	; 0xae
 8015780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015784:	695b      	ldr	r3, [r3, #20]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d014      	beq.n	80157b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801578a:	7dfa      	ldrb	r2, [r7, #23]
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015792:	7dfa      	ldrb	r2, [r7, #23]
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	32ae      	adds	r2, #174	; 0xae
 8015798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801579c:	695b      	ldr	r3, [r3, #20]
 801579e:	7afa      	ldrb	r2, [r7, #11]
 80157a0:	4611      	mov	r1, r2
 80157a2:	68f8      	ldr	r0, [r7, #12]
 80157a4:	4798      	blx	r3
 80157a6:	4603      	mov	r3, r0
 80157a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80157aa:	7dbb      	ldrb	r3, [r7, #22]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d001      	beq.n	80157b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80157b0:	7dbb      	ldrb	r3, [r7, #22]
 80157b2:	e000      	b.n	80157b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80157b4:	2300      	movs	r3, #0
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3718      	adds	r7, #24
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}

080157be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80157be:	b580      	push	{r7, lr}
 80157c0:	b084      	sub	sp, #16
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80157c6:	2300      	movs	r3, #0
 80157c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2201      	movs	r2, #1
 80157ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2200      	movs	r2, #0
 80157d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2200      	movs	r2, #0
 80157e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2200      	movs	r2, #0
 80157ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d014      	beq.n	8015824 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d00e      	beq.n	8015824 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801580c:	685b      	ldr	r3, [r3, #4]
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	6852      	ldr	r2, [r2, #4]
 8015812:	b2d2      	uxtb	r2, r2
 8015814:	4611      	mov	r1, r2
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	4798      	blx	r3
 801581a:	4603      	mov	r3, r0
 801581c:	2b00      	cmp	r3, #0
 801581e:	d001      	beq.n	8015824 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015820:	2303      	movs	r3, #3
 8015822:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015824:	2340      	movs	r3, #64	; 0x40
 8015826:	2200      	movs	r2, #0
 8015828:	2100      	movs	r1, #0
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f001 fc5b 	bl	80170e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2201      	movs	r2, #1
 8015834:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	2240      	movs	r2, #64	; 0x40
 801583c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015840:	2340      	movs	r3, #64	; 0x40
 8015842:	2200      	movs	r2, #0
 8015844:	2180      	movs	r1, #128	; 0x80
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f001 fc4d 	bl	80170e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2201      	movs	r2, #1
 8015850:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2240      	movs	r2, #64	; 0x40
 8015856:	621a      	str	r2, [r3, #32]

  return ret;
 8015858:	7bfb      	ldrb	r3, [r7, #15]
}
 801585a:	4618      	mov	r0, r3
 801585c:	3710      	adds	r7, #16
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015862:	b480      	push	{r7}
 8015864:	b083      	sub	sp, #12
 8015866:	af00      	add	r7, sp, #0
 8015868:	6078      	str	r0, [r7, #4]
 801586a:	460b      	mov	r3, r1
 801586c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	78fa      	ldrb	r2, [r7, #3]
 8015872:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015874:	2300      	movs	r3, #0
}
 8015876:	4618      	mov	r0, r3
 8015878:	370c      	adds	r7, #12
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr

08015882 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015882:	b480      	push	{r7}
 8015884:	b083      	sub	sp, #12
 8015886:	af00      	add	r7, sp, #0
 8015888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015890:	b2db      	uxtb	r3, r3
 8015892:	2b04      	cmp	r3, #4
 8015894:	d006      	beq.n	80158a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801589c:	b2da      	uxtb	r2, r3
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2204      	movs	r2, #4
 80158a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80158ac:	2300      	movs	r3, #0
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	370c      	adds	r7, #12
 80158b2:	46bd      	mov	sp, r7
 80158b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b8:	4770      	bx	lr

080158ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80158ba:	b480      	push	{r7}
 80158bc:	b083      	sub	sp, #12
 80158be:	af00      	add	r7, sp, #0
 80158c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	2b04      	cmp	r3, #4
 80158cc:	d106      	bne.n	80158dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80158d4:	b2da      	uxtb	r2, r3
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80158dc:	2300      	movs	r3, #0
}
 80158de:	4618      	mov	r0, r3
 80158e0:	370c      	adds	r7, #12
 80158e2:	46bd      	mov	sp, r7
 80158e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e8:	4770      	bx	lr

080158ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80158ea:	b580      	push	{r7, lr}
 80158ec:	b082      	sub	sp, #8
 80158ee:	af00      	add	r7, sp, #0
 80158f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	2b03      	cmp	r3, #3
 80158fc:	d110      	bne.n	8015920 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015904:	2b00      	cmp	r3, #0
 8015906:	d00b      	beq.n	8015920 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801590e:	69db      	ldr	r3, [r3, #28]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d005      	beq.n	8015920 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801591a:	69db      	ldr	r3, [r3, #28]
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015920:	2300      	movs	r3, #0
}
 8015922:	4618      	mov	r0, r3
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}

0801592a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801592a:	b580      	push	{r7, lr}
 801592c:	b082      	sub	sp, #8
 801592e:	af00      	add	r7, sp, #0
 8015930:	6078      	str	r0, [r7, #4]
 8015932:	460b      	mov	r3, r1
 8015934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	32ae      	adds	r2, #174	; 0xae
 8015940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d101      	bne.n	801594c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015948:	2303      	movs	r3, #3
 801594a:	e01c      	b.n	8015986 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015952:	b2db      	uxtb	r3, r3
 8015954:	2b03      	cmp	r3, #3
 8015956:	d115      	bne.n	8015984 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	32ae      	adds	r2, #174	; 0xae
 8015962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015966:	6a1b      	ldr	r3, [r3, #32]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d00b      	beq.n	8015984 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	32ae      	adds	r2, #174	; 0xae
 8015976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597a:	6a1b      	ldr	r3, [r3, #32]
 801597c:	78fa      	ldrb	r2, [r7, #3]
 801597e:	4611      	mov	r1, r2
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	3708      	adds	r7, #8
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b082      	sub	sp, #8
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
 8015996:	460b      	mov	r3, r1
 8015998:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	32ae      	adds	r2, #174	; 0xae
 80159a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d101      	bne.n	80159b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80159ac:	2303      	movs	r3, #3
 80159ae:	e01c      	b.n	80159ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	2b03      	cmp	r3, #3
 80159ba:	d115      	bne.n	80159e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	32ae      	adds	r2, #174	; 0xae
 80159c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00b      	beq.n	80159e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	32ae      	adds	r2, #174	; 0xae
 80159da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159e0:	78fa      	ldrb	r2, [r7, #3]
 80159e2:	4611      	mov	r1, r2
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80159e8:	2300      	movs	r3, #0
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80159f2:	b480      	push	{r7}
 80159f4:	b083      	sub	sp, #12
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80159fa:	2300      	movs	r3, #0
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	370c      	adds	r7, #12
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr

08015a08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b084      	sub	sp, #16
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015a10:	2300      	movs	r3, #0
 8015a12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2201      	movs	r2, #1
 8015a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d00e      	beq.n	8015a44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	6852      	ldr	r2, [r2, #4]
 8015a32:	b2d2      	uxtb	r2, r2
 8015a34:	4611      	mov	r1, r2
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	4798      	blx	r3
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d001      	beq.n	8015a44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015a40:	2303      	movs	r3, #3
 8015a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}

08015a4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015a4e:	b480      	push	{r7}
 8015a50:	b083      	sub	sp, #12
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	6078      	str	r0, [r7, #4]
 8015a56:	460b      	mov	r3, r1
 8015a58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015a5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	370c      	adds	r7, #12
 8015a60:	46bd      	mov	sp, r7
 8015a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a66:	4770      	bx	lr

08015a68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015a68:	b480      	push	{r7}
 8015a6a:	b083      	sub	sp, #12
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	460b      	mov	r3, r1
 8015a72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015a74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	370c      	adds	r7, #12
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a80:	4770      	bx	lr

08015a82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015a82:	b580      	push	{r7, lr}
 8015a84:	b086      	sub	sp, #24
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015a96:	2300      	movs	r3, #0
 8015a98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	885b      	ldrh	r3, [r3, #2]
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	b29b      	uxth	r3, r3
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d920      	bls.n	8015aec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015ab2:	e013      	b.n	8015adc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015ab4:	f107 030a 	add.w	r3, r7, #10
 8015ab8:	4619      	mov	r1, r3
 8015aba:	6978      	ldr	r0, [r7, #20]
 8015abc:	f000 f81b 	bl	8015af6 <USBD_GetNextDesc>
 8015ac0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	785b      	ldrb	r3, [r3, #1]
 8015ac6:	2b05      	cmp	r3, #5
 8015ac8:	d108      	bne.n	8015adc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	789b      	ldrb	r3, [r3, #2]
 8015ad2:	78fa      	ldrb	r2, [r7, #3]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d008      	beq.n	8015aea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	885b      	ldrh	r3, [r3, #2]
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	897b      	ldrh	r3, [r7, #10]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d8e5      	bhi.n	8015ab4 <USBD_GetEpDesc+0x32>
 8015ae8:	e000      	b.n	8015aec <USBD_GetEpDesc+0x6a>
          break;
 8015aea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015aec:	693b      	ldr	r3, [r7, #16]
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3718      	adds	r7, #24
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}

08015af6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015af6:	b480      	push	{r7}
 8015af8:	b085      	sub	sp, #20
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
 8015afe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	881a      	ldrh	r2, [r3, #0]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	4413      	add	r3, r2
 8015b10:	b29a      	uxth	r2, r3
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	4413      	add	r3, r2
 8015b20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015b22:	68fb      	ldr	r3, [r7, #12]
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3714      	adds	r7, #20
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2e:	4770      	bx	lr

08015b30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015b30:	b480      	push	{r7}
 8015b32:	b087      	sub	sp, #28
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	3301      	adds	r3, #1
 8015b46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	781b      	ldrb	r3, [r3, #0]
 8015b4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015b4e:	8a3b      	ldrh	r3, [r7, #16]
 8015b50:	021b      	lsls	r3, r3, #8
 8015b52:	b21a      	sxth	r2, r3
 8015b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b58:	4313      	orrs	r3, r2
 8015b5a:	b21b      	sxth	r3, r3
 8015b5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015b5e:	89fb      	ldrh	r3, [r7, #14]
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	371c      	adds	r7, #28
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b084      	sub	sp, #16
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b76:	2300      	movs	r3, #0
 8015b78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b82:	2b40      	cmp	r3, #64	; 0x40
 8015b84:	d005      	beq.n	8015b92 <USBD_StdDevReq+0x26>
 8015b86:	2b40      	cmp	r3, #64	; 0x40
 8015b88:	d857      	bhi.n	8015c3a <USBD_StdDevReq+0xce>
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d00f      	beq.n	8015bae <USBD_StdDevReq+0x42>
 8015b8e:	2b20      	cmp	r3, #32
 8015b90:	d153      	bne.n	8015c3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	32ae      	adds	r2, #174	; 0xae
 8015b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ba0:	689b      	ldr	r3, [r3, #8]
 8015ba2:	6839      	ldr	r1, [r7, #0]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	4798      	blx	r3
 8015ba8:	4603      	mov	r3, r0
 8015baa:	73fb      	strb	r3, [r7, #15]
      break;
 8015bac:	e04a      	b.n	8015c44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	785b      	ldrb	r3, [r3, #1]
 8015bb2:	2b09      	cmp	r3, #9
 8015bb4:	d83b      	bhi.n	8015c2e <USBD_StdDevReq+0xc2>
 8015bb6:	a201      	add	r2, pc, #4	; (adr r2, 8015bbc <USBD_StdDevReq+0x50>)
 8015bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bbc:	08015c11 	.word	0x08015c11
 8015bc0:	08015c25 	.word	0x08015c25
 8015bc4:	08015c2f 	.word	0x08015c2f
 8015bc8:	08015c1b 	.word	0x08015c1b
 8015bcc:	08015c2f 	.word	0x08015c2f
 8015bd0:	08015bef 	.word	0x08015bef
 8015bd4:	08015be5 	.word	0x08015be5
 8015bd8:	08015c2f 	.word	0x08015c2f
 8015bdc:	08015c07 	.word	0x08015c07
 8015be0:	08015bf9 	.word	0x08015bf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015be4:	6839      	ldr	r1, [r7, #0]
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f000 fa3c 	bl	8016064 <USBD_GetDescriptor>
          break;
 8015bec:	e024      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015bee:	6839      	ldr	r1, [r7, #0]
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f000 fba1 	bl	8016338 <USBD_SetAddress>
          break;
 8015bf6:	e01f      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015bf8:	6839      	ldr	r1, [r7, #0]
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f000 fbe0 	bl	80163c0 <USBD_SetConfig>
 8015c00:	4603      	mov	r3, r0
 8015c02:	73fb      	strb	r3, [r7, #15]
          break;
 8015c04:	e018      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 fc83 	bl	8016514 <USBD_GetConfig>
          break;
 8015c0e:	e013      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015c10:	6839      	ldr	r1, [r7, #0]
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f000 fcb4 	bl	8016580 <USBD_GetStatus>
          break;
 8015c18:	e00e      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015c1a:	6839      	ldr	r1, [r7, #0]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fce3 	bl	80165e8 <USBD_SetFeature>
          break;
 8015c22:	e009      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 fd07 	bl	801663a <USBD_ClrFeature>
          break;
 8015c2c:	e004      	b.n	8015c38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fd5e 	bl	80166f2 <USBD_CtlError>
          break;
 8015c36:	bf00      	nop
      }
      break;
 8015c38:	e004      	b.n	8015c44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015c3a:	6839      	ldr	r1, [r7, #0]
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f000 fd58 	bl	80166f2 <USBD_CtlError>
      break;
 8015c42:	bf00      	nop
  }

  return ret;
 8015c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop

08015c50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	781b      	ldrb	r3, [r3, #0]
 8015c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c66:	2b40      	cmp	r3, #64	; 0x40
 8015c68:	d005      	beq.n	8015c76 <USBD_StdItfReq+0x26>
 8015c6a:	2b40      	cmp	r3, #64	; 0x40
 8015c6c:	d852      	bhi.n	8015d14 <USBD_StdItfReq+0xc4>
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d001      	beq.n	8015c76 <USBD_StdItfReq+0x26>
 8015c72:	2b20      	cmp	r3, #32
 8015c74:	d14e      	bne.n	8015d14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	3b01      	subs	r3, #1
 8015c80:	2b02      	cmp	r3, #2
 8015c82:	d840      	bhi.n	8015d06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015c84:	683b      	ldr	r3, [r7, #0]
 8015c86:	889b      	ldrh	r3, [r3, #4]
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d836      	bhi.n	8015cfc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	889b      	ldrh	r3, [r3, #4]
 8015c92:	b2db      	uxtb	r3, r3
 8015c94:	4619      	mov	r1, r3
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f7ff fed9 	bl	8015a4e <USBD_CoreFindIF>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ca0:	7bbb      	ldrb	r3, [r7, #14]
 8015ca2:	2bff      	cmp	r3, #255	; 0xff
 8015ca4:	d01d      	beq.n	8015ce2 <USBD_StdItfReq+0x92>
 8015ca6:	7bbb      	ldrb	r3, [r7, #14]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d11a      	bne.n	8015ce2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015cac:	7bba      	ldrb	r2, [r7, #14]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	32ae      	adds	r2, #174	; 0xae
 8015cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb6:	689b      	ldr	r3, [r3, #8]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00f      	beq.n	8015cdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015cbc:	7bba      	ldrb	r2, [r7, #14]
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015cc4:	7bba      	ldrb	r2, [r7, #14]
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	32ae      	adds	r2, #174	; 0xae
 8015cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cce:	689b      	ldr	r3, [r3, #8]
 8015cd0:	6839      	ldr	r1, [r7, #0]
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	4798      	blx	r3
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015cda:	e004      	b.n	8015ce6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015cdc:	2303      	movs	r3, #3
 8015cde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ce0:	e001      	b.n	8015ce6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015ce2:	2303      	movs	r3, #3
 8015ce4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	88db      	ldrh	r3, [r3, #6]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d110      	bne.n	8015d10 <USBD_StdItfReq+0xc0>
 8015cee:	7bfb      	ldrb	r3, [r7, #15]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d10d      	bne.n	8015d10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f000 fdc7 	bl	8016888 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015cfa:	e009      	b.n	8015d10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 fcf7 	bl	80166f2 <USBD_CtlError>
          break;
 8015d04:	e004      	b.n	8015d10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015d06:	6839      	ldr	r1, [r7, #0]
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f000 fcf2 	bl	80166f2 <USBD_CtlError>
          break;
 8015d0e:	e000      	b.n	8015d12 <USBD_StdItfReq+0xc2>
          break;
 8015d10:	bf00      	nop
      }
      break;
 8015d12:	e004      	b.n	8015d1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015d14:	6839      	ldr	r1, [r7, #0]
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 fceb 	bl	80166f2 <USBD_CtlError>
      break;
 8015d1c:	bf00      	nop
  }

  return ret;
 8015d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	3710      	adds	r7, #16
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}

08015d28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b084      	sub	sp, #16
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015d32:	2300      	movs	r3, #0
 8015d34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	889b      	ldrh	r3, [r3, #4]
 8015d3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d44:	2b40      	cmp	r3, #64	; 0x40
 8015d46:	d007      	beq.n	8015d58 <USBD_StdEPReq+0x30>
 8015d48:	2b40      	cmp	r3, #64	; 0x40
 8015d4a:	f200 817f 	bhi.w	801604c <USBD_StdEPReq+0x324>
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d02a      	beq.n	8015da8 <USBD_StdEPReq+0x80>
 8015d52:	2b20      	cmp	r3, #32
 8015d54:	f040 817a 	bne.w	801604c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015d58:	7bbb      	ldrb	r3, [r7, #14]
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f7ff fe83 	bl	8015a68 <USBD_CoreFindEP>
 8015d62:	4603      	mov	r3, r0
 8015d64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d66:	7b7b      	ldrb	r3, [r7, #13]
 8015d68:	2bff      	cmp	r3, #255	; 0xff
 8015d6a:	f000 8174 	beq.w	8016056 <USBD_StdEPReq+0x32e>
 8015d6e:	7b7b      	ldrb	r3, [r7, #13]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	f040 8170 	bne.w	8016056 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015d76:	7b7a      	ldrb	r2, [r7, #13]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015d7e:	7b7a      	ldrb	r2, [r7, #13]
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	32ae      	adds	r2, #174	; 0xae
 8015d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d88:	689b      	ldr	r3, [r3, #8]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	f000 8163 	beq.w	8016056 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015d90:	7b7a      	ldrb	r2, [r7, #13]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	32ae      	adds	r2, #174	; 0xae
 8015d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	6839      	ldr	r1, [r7, #0]
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	4798      	blx	r3
 8015da2:	4603      	mov	r3, r0
 8015da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015da6:	e156      	b.n	8016056 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	785b      	ldrb	r3, [r3, #1]
 8015dac:	2b03      	cmp	r3, #3
 8015dae:	d008      	beq.n	8015dc2 <USBD_StdEPReq+0x9a>
 8015db0:	2b03      	cmp	r3, #3
 8015db2:	f300 8145 	bgt.w	8016040 <USBD_StdEPReq+0x318>
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	f000 809b 	beq.w	8015ef2 <USBD_StdEPReq+0x1ca>
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	d03c      	beq.n	8015e3a <USBD_StdEPReq+0x112>
 8015dc0:	e13e      	b.n	8016040 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	2b02      	cmp	r3, #2
 8015dcc:	d002      	beq.n	8015dd4 <USBD_StdEPReq+0xac>
 8015dce:	2b03      	cmp	r3, #3
 8015dd0:	d016      	beq.n	8015e00 <USBD_StdEPReq+0xd8>
 8015dd2:	e02c      	b.n	8015e2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dd4:	7bbb      	ldrb	r3, [r7, #14]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d00d      	beq.n	8015df6 <USBD_StdEPReq+0xce>
 8015dda:	7bbb      	ldrb	r3, [r7, #14]
 8015ddc:	2b80      	cmp	r3, #128	; 0x80
 8015dde:	d00a      	beq.n	8015df6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015de0:	7bbb      	ldrb	r3, [r7, #14]
 8015de2:	4619      	mov	r1, r3
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f001 f9c3 	bl	8017170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015dea:	2180      	movs	r1, #128	; 0x80
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f001 f9bf 	bl	8017170 <USBD_LL_StallEP>
 8015df2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015df4:	e020      	b.n	8015e38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015df6:	6839      	ldr	r1, [r7, #0]
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f000 fc7a 	bl	80166f2 <USBD_CtlError>
              break;
 8015dfe:	e01b      	b.n	8015e38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	885b      	ldrh	r3, [r3, #2]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d10e      	bne.n	8015e26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015e08:	7bbb      	ldrb	r3, [r7, #14]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d00b      	beq.n	8015e26 <USBD_StdEPReq+0xfe>
 8015e0e:	7bbb      	ldrb	r3, [r7, #14]
 8015e10:	2b80      	cmp	r3, #128	; 0x80
 8015e12:	d008      	beq.n	8015e26 <USBD_StdEPReq+0xfe>
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	88db      	ldrh	r3, [r3, #6]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d104      	bne.n	8015e26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e1c:	7bbb      	ldrb	r3, [r7, #14]
 8015e1e:	4619      	mov	r1, r3
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f001 f9a5 	bl	8017170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 fd2e 	bl	8016888 <USBD_CtlSendStatus>

              break;
 8015e2c:	e004      	b.n	8015e38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 fc5e 	bl	80166f2 <USBD_CtlError>
              break;
 8015e36:	bf00      	nop
          }
          break;
 8015e38:	e107      	b.n	801604a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	2b02      	cmp	r3, #2
 8015e44:	d002      	beq.n	8015e4c <USBD_StdEPReq+0x124>
 8015e46:	2b03      	cmp	r3, #3
 8015e48:	d016      	beq.n	8015e78 <USBD_StdEPReq+0x150>
 8015e4a:	e04b      	b.n	8015ee4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e4c:	7bbb      	ldrb	r3, [r7, #14]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d00d      	beq.n	8015e6e <USBD_StdEPReq+0x146>
 8015e52:	7bbb      	ldrb	r3, [r7, #14]
 8015e54:	2b80      	cmp	r3, #128	; 0x80
 8015e56:	d00a      	beq.n	8015e6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015e58:	7bbb      	ldrb	r3, [r7, #14]
 8015e5a:	4619      	mov	r1, r3
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f001 f987 	bl	8017170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e62:	2180      	movs	r1, #128	; 0x80
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f001 f983 	bl	8017170 <USBD_LL_StallEP>
 8015e6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015e6c:	e040      	b.n	8015ef0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015e6e:	6839      	ldr	r1, [r7, #0]
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f000 fc3e 	bl	80166f2 <USBD_CtlError>
              break;
 8015e76:	e03b      	b.n	8015ef0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	885b      	ldrh	r3, [r3, #2]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d136      	bne.n	8015eee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015e80:	7bbb      	ldrb	r3, [r7, #14]
 8015e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d004      	beq.n	8015e94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015e8a:	7bbb      	ldrb	r3, [r7, #14]
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f001 f98d 	bl	80171ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 fcf7 	bl	8016888 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015e9a:	7bbb      	ldrb	r3, [r7, #14]
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f7ff fde2 	bl	8015a68 <USBD_CoreFindEP>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ea8:	7b7b      	ldrb	r3, [r7, #13]
 8015eaa:	2bff      	cmp	r3, #255	; 0xff
 8015eac:	d01f      	beq.n	8015eee <USBD_StdEPReq+0x1c6>
 8015eae:	7b7b      	ldrb	r3, [r7, #13]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d11c      	bne.n	8015eee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015eb4:	7b7a      	ldrb	r2, [r7, #13]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015ebc:	7b7a      	ldrb	r2, [r7, #13]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	32ae      	adds	r2, #174	; 0xae
 8015ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec6:	689b      	ldr	r3, [r3, #8]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d010      	beq.n	8015eee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ecc:	7b7a      	ldrb	r2, [r7, #13]
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	32ae      	adds	r2, #174	; 0xae
 8015ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ed6:	689b      	ldr	r3, [r3, #8]
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	4798      	blx	r3
 8015ede:	4603      	mov	r3, r0
 8015ee0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ee2:	e004      	b.n	8015eee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 fc03 	bl	80166f2 <USBD_CtlError>
              break;
 8015eec:	e000      	b.n	8015ef0 <USBD_StdEPReq+0x1c8>
              break;
 8015eee:	bf00      	nop
          }
          break;
 8015ef0:	e0ab      	b.n	801604a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	2b02      	cmp	r3, #2
 8015efc:	d002      	beq.n	8015f04 <USBD_StdEPReq+0x1dc>
 8015efe:	2b03      	cmp	r3, #3
 8015f00:	d032      	beq.n	8015f68 <USBD_StdEPReq+0x240>
 8015f02:	e097      	b.n	8016034 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f04:	7bbb      	ldrb	r3, [r7, #14]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d007      	beq.n	8015f1a <USBD_StdEPReq+0x1f2>
 8015f0a:	7bbb      	ldrb	r3, [r7, #14]
 8015f0c:	2b80      	cmp	r3, #128	; 0x80
 8015f0e:	d004      	beq.n	8015f1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f000 fbed 	bl	80166f2 <USBD_CtlError>
                break;
 8015f18:	e091      	b.n	801603e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	da0b      	bge.n	8015f3a <USBD_StdEPReq+0x212>
 8015f22:	7bbb      	ldrb	r3, [r7, #14]
 8015f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f28:	4613      	mov	r3, r2
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	4413      	add	r3, r2
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	3310      	adds	r3, #16
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	4413      	add	r3, r2
 8015f36:	3304      	adds	r3, #4
 8015f38:	e00b      	b.n	8015f52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015f3a:	7bbb      	ldrb	r3, [r7, #14]
 8015f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f40:	4613      	mov	r3, r2
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	4413      	add	r3, r2
 8015f46:	009b      	lsls	r3, r3, #2
 8015f48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	4413      	add	r3, r2
 8015f50:	3304      	adds	r3, #4
 8015f52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	2200      	movs	r2, #0
 8015f58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	2202      	movs	r2, #2
 8015f5e:	4619      	mov	r1, r3
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f000 fc37 	bl	80167d4 <USBD_CtlSendData>
              break;
 8015f66:	e06a      	b.n	801603e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	da11      	bge.n	8015f94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015f70:	7bbb      	ldrb	r3, [r7, #14]
 8015f72:	f003 020f 	and.w	r2, r3, #15
 8015f76:	6879      	ldr	r1, [r7, #4]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	4413      	add	r3, r2
 8015f7e:	009b      	lsls	r3, r3, #2
 8015f80:	440b      	add	r3, r1
 8015f82:	3324      	adds	r3, #36	; 0x24
 8015f84:	881b      	ldrh	r3, [r3, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d117      	bne.n	8015fba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 fbb0 	bl	80166f2 <USBD_CtlError>
                  break;
 8015f92:	e054      	b.n	801603e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015f94:	7bbb      	ldrb	r3, [r7, #14]
 8015f96:	f003 020f 	and.w	r2, r3, #15
 8015f9a:	6879      	ldr	r1, [r7, #4]
 8015f9c:	4613      	mov	r3, r2
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	4413      	add	r3, r2
 8015fa2:	009b      	lsls	r3, r3, #2
 8015fa4:	440b      	add	r3, r1
 8015fa6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015faa:	881b      	ldrh	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d104      	bne.n	8015fba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015fb0:	6839      	ldr	r1, [r7, #0]
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f000 fb9d 	bl	80166f2 <USBD_CtlError>
                  break;
 8015fb8:	e041      	b.n	801603e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	da0b      	bge.n	8015fda <USBD_StdEPReq+0x2b2>
 8015fc2:	7bbb      	ldrb	r3, [r7, #14]
 8015fc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fc8:	4613      	mov	r3, r2
 8015fca:	009b      	lsls	r3, r3, #2
 8015fcc:	4413      	add	r3, r2
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	3310      	adds	r3, #16
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	4413      	add	r3, r2
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	e00b      	b.n	8015ff2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015fda:	7bbb      	ldrb	r3, [r7, #14]
 8015fdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	4413      	add	r3, r2
 8015fe6:	009b      	lsls	r3, r3, #2
 8015fe8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	4413      	add	r3, r2
 8015ff0:	3304      	adds	r3, #4
 8015ff2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ff4:	7bbb      	ldrb	r3, [r7, #14]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d002      	beq.n	8016000 <USBD_StdEPReq+0x2d8>
 8015ffa:	7bbb      	ldrb	r3, [r7, #14]
 8015ffc:	2b80      	cmp	r3, #128	; 0x80
 8015ffe:	d103      	bne.n	8016008 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	2200      	movs	r2, #0
 8016004:	601a      	str	r2, [r3, #0]
 8016006:	e00e      	b.n	8016026 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016008:	7bbb      	ldrb	r3, [r7, #14]
 801600a:	4619      	mov	r1, r3
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f001 f8ed 	bl	80171ec <USBD_LL_IsStallEP>
 8016012:	4603      	mov	r3, r0
 8016014:	2b00      	cmp	r3, #0
 8016016:	d003      	beq.n	8016020 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	2201      	movs	r2, #1
 801601c:	601a      	str	r2, [r3, #0]
 801601e:	e002      	b.n	8016026 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	2200      	movs	r2, #0
 8016024:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016026:	68bb      	ldr	r3, [r7, #8]
 8016028:	2202      	movs	r2, #2
 801602a:	4619      	mov	r1, r3
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 fbd1 	bl	80167d4 <USBD_CtlSendData>
              break;
 8016032:	e004      	b.n	801603e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016034:	6839      	ldr	r1, [r7, #0]
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 fb5b 	bl	80166f2 <USBD_CtlError>
              break;
 801603c:	bf00      	nop
          }
          break;
 801603e:	e004      	b.n	801604a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016040:	6839      	ldr	r1, [r7, #0]
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 fb55 	bl	80166f2 <USBD_CtlError>
          break;
 8016048:	bf00      	nop
      }
      break;
 801604a:	e005      	b.n	8016058 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801604c:	6839      	ldr	r1, [r7, #0]
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f000 fb4f 	bl	80166f2 <USBD_CtlError>
      break;
 8016054:	e000      	b.n	8016058 <USBD_StdEPReq+0x330>
      break;
 8016056:	bf00      	nop
  }

  return ret;
 8016058:	7bfb      	ldrb	r3, [r7, #15]
}
 801605a:	4618      	mov	r0, r3
 801605c:	3710      	adds	r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
	...

08016064 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801606e:	2300      	movs	r3, #0
 8016070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016072:	2300      	movs	r3, #0
 8016074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016076:	2300      	movs	r3, #0
 8016078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	885b      	ldrh	r3, [r3, #2]
 801607e:	0a1b      	lsrs	r3, r3, #8
 8016080:	b29b      	uxth	r3, r3
 8016082:	3b01      	subs	r3, #1
 8016084:	2b06      	cmp	r3, #6
 8016086:	f200 8128 	bhi.w	80162da <USBD_GetDescriptor+0x276>
 801608a:	a201      	add	r2, pc, #4	; (adr r2, 8016090 <USBD_GetDescriptor+0x2c>)
 801608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016090:	080160ad 	.word	0x080160ad
 8016094:	080160c5 	.word	0x080160c5
 8016098:	08016105 	.word	0x08016105
 801609c:	080162db 	.word	0x080162db
 80160a0:	080162db 	.word	0x080162db
 80160a4:	0801627b 	.word	0x0801627b
 80160a8:	080162a7 	.word	0x080162a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	7c12      	ldrb	r2, [r2, #16]
 80160b8:	f107 0108 	add.w	r1, r7, #8
 80160bc:	4610      	mov	r0, r2
 80160be:	4798      	blx	r3
 80160c0:	60f8      	str	r0, [r7, #12]
      break;
 80160c2:	e112      	b.n	80162ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	7c1b      	ldrb	r3, [r3, #16]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d10d      	bne.n	80160e8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160d4:	f107 0208 	add.w	r2, r7, #8
 80160d8:	4610      	mov	r0, r2
 80160da:	4798      	blx	r3
 80160dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	3301      	adds	r3, #1
 80160e2:	2202      	movs	r2, #2
 80160e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80160e6:	e100      	b.n	80162ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160f0:	f107 0208 	add.w	r2, r7, #8
 80160f4:	4610      	mov	r0, r2
 80160f6:	4798      	blx	r3
 80160f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	3301      	adds	r3, #1
 80160fe:	2202      	movs	r2, #2
 8016100:	701a      	strb	r2, [r3, #0]
      break;
 8016102:	e0f2      	b.n	80162ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	885b      	ldrh	r3, [r3, #2]
 8016108:	b2db      	uxtb	r3, r3
 801610a:	2b05      	cmp	r3, #5
 801610c:	f200 80ac 	bhi.w	8016268 <USBD_GetDescriptor+0x204>
 8016110:	a201      	add	r2, pc, #4	; (adr r2, 8016118 <USBD_GetDescriptor+0xb4>)
 8016112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016116:	bf00      	nop
 8016118:	08016131 	.word	0x08016131
 801611c:	08016165 	.word	0x08016165
 8016120:	08016199 	.word	0x08016199
 8016124:	080161cd 	.word	0x080161cd
 8016128:	08016201 	.word	0x08016201
 801612c:	08016235 	.word	0x08016235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00b      	beq.n	8016154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	687a      	ldr	r2, [r7, #4]
 8016146:	7c12      	ldrb	r2, [r2, #16]
 8016148:	f107 0108 	add.w	r1, r7, #8
 801614c:	4610      	mov	r0, r2
 801614e:	4798      	blx	r3
 8016150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016152:	e091      	b.n	8016278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016154:	6839      	ldr	r1, [r7, #0]
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 facb 	bl	80166f2 <USBD_CtlError>
            err++;
 801615c:	7afb      	ldrb	r3, [r7, #11]
 801615e:	3301      	adds	r3, #1
 8016160:	72fb      	strb	r3, [r7, #11]
          break;
 8016162:	e089      	b.n	8016278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801616a:	689b      	ldr	r3, [r3, #8]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d00b      	beq.n	8016188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	687a      	ldr	r2, [r7, #4]
 801617a:	7c12      	ldrb	r2, [r2, #16]
 801617c:	f107 0108 	add.w	r1, r7, #8
 8016180:	4610      	mov	r0, r2
 8016182:	4798      	blx	r3
 8016184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016186:	e077      	b.n	8016278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 fab1 	bl	80166f2 <USBD_CtlError>
            err++;
 8016190:	7afb      	ldrb	r3, [r7, #11]
 8016192:	3301      	adds	r3, #1
 8016194:	72fb      	strb	r3, [r7, #11]
          break;
 8016196:	e06f      	b.n	8016278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d00b      	beq.n	80161bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161aa:	68db      	ldr	r3, [r3, #12]
 80161ac:	687a      	ldr	r2, [r7, #4]
 80161ae:	7c12      	ldrb	r2, [r2, #16]
 80161b0:	f107 0108 	add.w	r1, r7, #8
 80161b4:	4610      	mov	r0, r2
 80161b6:	4798      	blx	r3
 80161b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161ba:	e05d      	b.n	8016278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161bc:	6839      	ldr	r1, [r7, #0]
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 fa97 	bl	80166f2 <USBD_CtlError>
            err++;
 80161c4:	7afb      	ldrb	r3, [r7, #11]
 80161c6:	3301      	adds	r3, #1
 80161c8:	72fb      	strb	r3, [r7, #11]
          break;
 80161ca:	e055      	b.n	8016278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161d2:	691b      	ldr	r3, [r3, #16]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d00b      	beq.n	80161f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161de:	691b      	ldr	r3, [r3, #16]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	7c12      	ldrb	r2, [r2, #16]
 80161e4:	f107 0108 	add.w	r1, r7, #8
 80161e8:	4610      	mov	r0, r2
 80161ea:	4798      	blx	r3
 80161ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161ee:	e043      	b.n	8016278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161f0:	6839      	ldr	r1, [r7, #0]
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f000 fa7d 	bl	80166f2 <USBD_CtlError>
            err++;
 80161f8:	7afb      	ldrb	r3, [r7, #11]
 80161fa:	3301      	adds	r3, #1
 80161fc:	72fb      	strb	r3, [r7, #11]
          break;
 80161fe:	e03b      	b.n	8016278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016206:	695b      	ldr	r3, [r3, #20]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00b      	beq.n	8016224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016212:	695b      	ldr	r3, [r3, #20]
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	7c12      	ldrb	r2, [r2, #16]
 8016218:	f107 0108 	add.w	r1, r7, #8
 801621c:	4610      	mov	r0, r2
 801621e:	4798      	blx	r3
 8016220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016222:	e029      	b.n	8016278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016224:	6839      	ldr	r1, [r7, #0]
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 fa63 	bl	80166f2 <USBD_CtlError>
            err++;
 801622c:	7afb      	ldrb	r3, [r7, #11]
 801622e:	3301      	adds	r3, #1
 8016230:	72fb      	strb	r3, [r7, #11]
          break;
 8016232:	e021      	b.n	8016278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d00b      	beq.n	8016258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016246:	699b      	ldr	r3, [r3, #24]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	7c12      	ldrb	r2, [r2, #16]
 801624c:	f107 0108 	add.w	r1, r7, #8
 8016250:	4610      	mov	r0, r2
 8016252:	4798      	blx	r3
 8016254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016256:	e00f      	b.n	8016278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 fa49 	bl	80166f2 <USBD_CtlError>
            err++;
 8016260:	7afb      	ldrb	r3, [r7, #11]
 8016262:	3301      	adds	r3, #1
 8016264:	72fb      	strb	r3, [r7, #11]
          break;
 8016266:	e007      	b.n	8016278 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016268:	6839      	ldr	r1, [r7, #0]
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f000 fa41 	bl	80166f2 <USBD_CtlError>
          err++;
 8016270:	7afb      	ldrb	r3, [r7, #11]
 8016272:	3301      	adds	r3, #1
 8016274:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016276:	bf00      	nop
      }
      break;
 8016278:	e037      	b.n	80162ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	7c1b      	ldrb	r3, [r3, #16]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d109      	bne.n	8016296 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801628a:	f107 0208 	add.w	r2, r7, #8
 801628e:	4610      	mov	r0, r2
 8016290:	4798      	blx	r3
 8016292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016294:	e029      	b.n	80162ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016296:	6839      	ldr	r1, [r7, #0]
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f000 fa2a 	bl	80166f2 <USBD_CtlError>
        err++;
 801629e:	7afb      	ldrb	r3, [r7, #11]
 80162a0:	3301      	adds	r3, #1
 80162a2:	72fb      	strb	r3, [r7, #11]
      break;
 80162a4:	e021      	b.n	80162ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	7c1b      	ldrb	r3, [r3, #16]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d10d      	bne.n	80162ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162b6:	f107 0208 	add.w	r2, r7, #8
 80162ba:	4610      	mov	r0, r2
 80162bc:	4798      	blx	r3
 80162be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	3301      	adds	r3, #1
 80162c4:	2207      	movs	r2, #7
 80162c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80162c8:	e00f      	b.n	80162ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80162ca:	6839      	ldr	r1, [r7, #0]
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f000 fa10 	bl	80166f2 <USBD_CtlError>
        err++;
 80162d2:	7afb      	ldrb	r3, [r7, #11]
 80162d4:	3301      	adds	r3, #1
 80162d6:	72fb      	strb	r3, [r7, #11]
      break;
 80162d8:	e007      	b.n	80162ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80162da:	6839      	ldr	r1, [r7, #0]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f000 fa08 	bl	80166f2 <USBD_CtlError>
      err++;
 80162e2:	7afb      	ldrb	r3, [r7, #11]
 80162e4:	3301      	adds	r3, #1
 80162e6:	72fb      	strb	r3, [r7, #11]
      break;
 80162e8:	bf00      	nop
  }

  if (err != 0U)
 80162ea:	7afb      	ldrb	r3, [r7, #11]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d11e      	bne.n	801632e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	88db      	ldrh	r3, [r3, #6]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d016      	beq.n	8016326 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80162f8:	893b      	ldrh	r3, [r7, #8]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00e      	beq.n	801631c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	88da      	ldrh	r2, [r3, #6]
 8016302:	893b      	ldrh	r3, [r7, #8]
 8016304:	4293      	cmp	r3, r2
 8016306:	bf28      	it	cs
 8016308:	4613      	movcs	r3, r2
 801630a:	b29b      	uxth	r3, r3
 801630c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801630e:	893b      	ldrh	r3, [r7, #8]
 8016310:	461a      	mov	r2, r3
 8016312:	68f9      	ldr	r1, [r7, #12]
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 fa5d 	bl	80167d4 <USBD_CtlSendData>
 801631a:	e009      	b.n	8016330 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801631c:	6839      	ldr	r1, [r7, #0]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f000 f9e7 	bl	80166f2 <USBD_CtlError>
 8016324:	e004      	b.n	8016330 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016326:	6878      	ldr	r0, [r7, #4]
 8016328:	f000 faae 	bl	8016888 <USBD_CtlSendStatus>
 801632c:	e000      	b.n	8016330 <USBD_GetDescriptor+0x2cc>
    return;
 801632e:	bf00      	nop
  }
}
 8016330:	3710      	adds	r7, #16
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop

08016338 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	889b      	ldrh	r3, [r3, #4]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d131      	bne.n	80163ae <USBD_SetAddress+0x76>
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	88db      	ldrh	r3, [r3, #6]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d12d      	bne.n	80163ae <USBD_SetAddress+0x76>
 8016352:	683b      	ldr	r3, [r7, #0]
 8016354:	885b      	ldrh	r3, [r3, #2]
 8016356:	2b7f      	cmp	r3, #127	; 0x7f
 8016358:	d829      	bhi.n	80163ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	885b      	ldrh	r3, [r3, #2]
 801635e:	b2db      	uxtb	r3, r3
 8016360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801636c:	b2db      	uxtb	r3, r3
 801636e:	2b03      	cmp	r3, #3
 8016370:	d104      	bne.n	801637c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016372:	6839      	ldr	r1, [r7, #0]
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f000 f9bc 	bl	80166f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801637a:	e01d      	b.n	80163b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	7bfa      	ldrb	r2, [r7, #15]
 8016380:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016384:	7bfb      	ldrb	r3, [r7, #15]
 8016386:	4619      	mov	r1, r3
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f000 ff5b 	bl	8017244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f000 fa7a 	bl	8016888 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016394:	7bfb      	ldrb	r3, [r7, #15]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d004      	beq.n	80163a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2202      	movs	r2, #2
 801639e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a2:	e009      	b.n	80163b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2201      	movs	r2, #1
 80163a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163ac:	e004      	b.n	80163b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80163ae:	6839      	ldr	r1, [r7, #0]
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f000 f99e 	bl	80166f2 <USBD_CtlError>
  }
}
 80163b6:	bf00      	nop
 80163b8:	bf00      	nop
 80163ba:	3710      	adds	r7, #16
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}

080163c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	885b      	ldrh	r3, [r3, #2]
 80163d2:	b2da      	uxtb	r2, r3
 80163d4:	4b4e      	ldr	r3, [pc, #312]	; (8016510 <USBD_SetConfig+0x150>)
 80163d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80163d8:	4b4d      	ldr	r3, [pc, #308]	; (8016510 <USBD_SetConfig+0x150>)
 80163da:	781b      	ldrb	r3, [r3, #0]
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d905      	bls.n	80163ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80163e0:	6839      	ldr	r1, [r7, #0]
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f000 f985 	bl	80166f2 <USBD_CtlError>
    return USBD_FAIL;
 80163e8:	2303      	movs	r3, #3
 80163ea:	e08c      	b.n	8016506 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	2b02      	cmp	r3, #2
 80163f6:	d002      	beq.n	80163fe <USBD_SetConfig+0x3e>
 80163f8:	2b03      	cmp	r3, #3
 80163fa:	d029      	beq.n	8016450 <USBD_SetConfig+0x90>
 80163fc:	e075      	b.n	80164ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80163fe:	4b44      	ldr	r3, [pc, #272]	; (8016510 <USBD_SetConfig+0x150>)
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d020      	beq.n	8016448 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016406:	4b42      	ldr	r3, [pc, #264]	; (8016510 <USBD_SetConfig+0x150>)
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	461a      	mov	r2, r3
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016410:	4b3f      	ldr	r3, [pc, #252]	; (8016510 <USBD_SetConfig+0x150>)
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	4619      	mov	r1, r3
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f7fe ffe1 	bl	80153de <USBD_SetClassConfig>
 801641c:	4603      	mov	r3, r0
 801641e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016420:	7bfb      	ldrb	r3, [r7, #15]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d008      	beq.n	8016438 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016426:	6839      	ldr	r1, [r7, #0]
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	f000 f962 	bl	80166f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2202      	movs	r2, #2
 8016432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016436:	e065      	b.n	8016504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f000 fa25 	bl	8016888 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2203      	movs	r2, #3
 8016442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016446:	e05d      	b.n	8016504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 fa1d 	bl	8016888 <USBD_CtlSendStatus>
      break;
 801644e:	e059      	b.n	8016504 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016450:	4b2f      	ldr	r3, [pc, #188]	; (8016510 <USBD_SetConfig+0x150>)
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d112      	bne.n	801647e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2202      	movs	r2, #2
 801645c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016460:	4b2b      	ldr	r3, [pc, #172]	; (8016510 <USBD_SetConfig+0x150>)
 8016462:	781b      	ldrb	r3, [r3, #0]
 8016464:	461a      	mov	r2, r3
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801646a:	4b29      	ldr	r3, [pc, #164]	; (8016510 <USBD_SetConfig+0x150>)
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	4619      	mov	r1, r3
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f7fe ffd0 	bl	8015416 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 fa06 	bl	8016888 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801647c:	e042      	b.n	8016504 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801647e:	4b24      	ldr	r3, [pc, #144]	; (8016510 <USBD_SetConfig+0x150>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	461a      	mov	r2, r3
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	429a      	cmp	r2, r3
 801648a:	d02a      	beq.n	80164e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	b2db      	uxtb	r3, r3
 8016492:	4619      	mov	r1, r3
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f7fe ffbe 	bl	8015416 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801649a:	4b1d      	ldr	r3, [pc, #116]	; (8016510 <USBD_SetConfig+0x150>)
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	461a      	mov	r2, r3
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80164a4:	4b1a      	ldr	r3, [pc, #104]	; (8016510 <USBD_SetConfig+0x150>)
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	4619      	mov	r1, r3
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f7fe ff97 	bl	80153de <USBD_SetClassConfig>
 80164b0:	4603      	mov	r3, r0
 80164b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80164b4:	7bfb      	ldrb	r3, [r7, #15]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d00f      	beq.n	80164da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80164ba:	6839      	ldr	r1, [r7, #0]
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f000 f918 	bl	80166f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	b2db      	uxtb	r3, r3
 80164c8:	4619      	mov	r1, r3
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f7fe ffa3 	bl	8015416 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2202      	movs	r2, #2
 80164d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80164d8:	e014      	b.n	8016504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 f9d4 	bl	8016888 <USBD_CtlSendStatus>
      break;
 80164e0:	e010      	b.n	8016504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f000 f9d0 	bl	8016888 <USBD_CtlSendStatus>
      break;
 80164e8:	e00c      	b.n	8016504 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80164ea:	6839      	ldr	r1, [r7, #0]
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f000 f900 	bl	80166f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80164f2:	4b07      	ldr	r3, [pc, #28]	; (8016510 <USBD_SetConfig+0x150>)
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	4619      	mov	r1, r3
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7fe ff8c 	bl	8015416 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80164fe:	2303      	movs	r3, #3
 8016500:	73fb      	strb	r3, [r7, #15]
      break;
 8016502:	bf00      	nop
  }

  return ret;
 8016504:	7bfb      	ldrb	r3, [r7, #15]
}
 8016506:	4618      	mov	r0, r3
 8016508:	3710      	adds	r7, #16
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	24001618 	.word	0x24001618

08016514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
 801651c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	88db      	ldrh	r3, [r3, #6]
 8016522:	2b01      	cmp	r3, #1
 8016524:	d004      	beq.n	8016530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016526:	6839      	ldr	r1, [r7, #0]
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f000 f8e2 	bl	80166f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801652e:	e023      	b.n	8016578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016536:	b2db      	uxtb	r3, r3
 8016538:	2b02      	cmp	r3, #2
 801653a:	dc02      	bgt.n	8016542 <USBD_GetConfig+0x2e>
 801653c:	2b00      	cmp	r3, #0
 801653e:	dc03      	bgt.n	8016548 <USBD_GetConfig+0x34>
 8016540:	e015      	b.n	801656e <USBD_GetConfig+0x5a>
 8016542:	2b03      	cmp	r3, #3
 8016544:	d00b      	beq.n	801655e <USBD_GetConfig+0x4a>
 8016546:	e012      	b.n	801656e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	3308      	adds	r3, #8
 8016552:	2201      	movs	r2, #1
 8016554:	4619      	mov	r1, r3
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 f93c 	bl	80167d4 <USBD_CtlSendData>
        break;
 801655c:	e00c      	b.n	8016578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	3304      	adds	r3, #4
 8016562:	2201      	movs	r2, #1
 8016564:	4619      	mov	r1, r3
 8016566:	6878      	ldr	r0, [r7, #4]
 8016568:	f000 f934 	bl	80167d4 <USBD_CtlSendData>
        break;
 801656c:	e004      	b.n	8016578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801656e:	6839      	ldr	r1, [r7, #0]
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f000 f8be 	bl	80166f2 <USBD_CtlError>
        break;
 8016576:	bf00      	nop
}
 8016578:	bf00      	nop
 801657a:	3708      	adds	r7, #8
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016590:	b2db      	uxtb	r3, r3
 8016592:	3b01      	subs	r3, #1
 8016594:	2b02      	cmp	r3, #2
 8016596:	d81e      	bhi.n	80165d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	88db      	ldrh	r3, [r3, #6]
 801659c:	2b02      	cmp	r3, #2
 801659e:	d004      	beq.n	80165aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80165a0:	6839      	ldr	r1, [r7, #0]
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f000 f8a5 	bl	80166f2 <USBD_CtlError>
        break;
 80165a8:	e01a      	b.n	80165e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2201      	movs	r2, #1
 80165ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d005      	beq.n	80165c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	68db      	ldr	r3, [r3, #12]
 80165be:	f043 0202 	orr.w	r2, r3, #2
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	330c      	adds	r3, #12
 80165ca:	2202      	movs	r2, #2
 80165cc:	4619      	mov	r1, r3
 80165ce:	6878      	ldr	r0, [r7, #4]
 80165d0:	f000 f900 	bl	80167d4 <USBD_CtlSendData>
      break;
 80165d4:	e004      	b.n	80165e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80165d6:	6839      	ldr	r1, [r7, #0]
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f000 f88a 	bl	80166f2 <USBD_CtlError>
      break;
 80165de:	bf00      	nop
  }
}
 80165e0:	bf00      	nop
 80165e2:	3708      	adds	r7, #8
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	885b      	ldrh	r3, [r3, #2]
 80165f6:	2b01      	cmp	r3, #1
 80165f8:	d107      	bne.n	801660a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2201      	movs	r2, #1
 80165fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f000 f940 	bl	8016888 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016608:	e013      	b.n	8016632 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801660a:	683b      	ldr	r3, [r7, #0]
 801660c:	885b      	ldrh	r3, [r3, #2]
 801660e:	2b02      	cmp	r3, #2
 8016610:	d10b      	bne.n	801662a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	889b      	ldrh	r3, [r3, #4]
 8016616:	0a1b      	lsrs	r3, r3, #8
 8016618:	b29b      	uxth	r3, r3
 801661a:	b2da      	uxtb	r2, r3
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f000 f930 	bl	8016888 <USBD_CtlSendStatus>
}
 8016628:	e003      	b.n	8016632 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801662a:	6839      	ldr	r1, [r7, #0]
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f000 f860 	bl	80166f2 <USBD_CtlError>
}
 8016632:	bf00      	nop
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801663a:	b580      	push	{r7, lr}
 801663c:	b082      	sub	sp, #8
 801663e:	af00      	add	r7, sp, #0
 8016640:	6078      	str	r0, [r7, #4]
 8016642:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801664a:	b2db      	uxtb	r3, r3
 801664c:	3b01      	subs	r3, #1
 801664e:	2b02      	cmp	r3, #2
 8016650:	d80b      	bhi.n	801666a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	885b      	ldrh	r3, [r3, #2]
 8016656:	2b01      	cmp	r3, #1
 8016658:	d10c      	bne.n	8016674 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2200      	movs	r2, #0
 801665e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 f910 	bl	8016888 <USBD_CtlSendStatus>
      }
      break;
 8016668:	e004      	b.n	8016674 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f000 f840 	bl	80166f2 <USBD_CtlError>
      break;
 8016672:	e000      	b.n	8016676 <USBD_ClrFeature+0x3c>
      break;
 8016674:	bf00      	nop
  }
}
 8016676:	bf00      	nop
 8016678:	3708      	adds	r7, #8
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}

0801667e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801667e:	b580      	push	{r7, lr}
 8016680:	b084      	sub	sp, #16
 8016682:	af00      	add	r7, sp, #0
 8016684:	6078      	str	r0, [r7, #4]
 8016686:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	781a      	ldrb	r2, [r3, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	3301      	adds	r3, #1
 8016698:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	781a      	ldrb	r2, [r3, #0]
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	3301      	adds	r3, #1
 80166a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80166a8:	68f8      	ldr	r0, [r7, #12]
 80166aa:	f7ff fa41 	bl	8015b30 <SWAPBYTE>
 80166ae:	4603      	mov	r3, r0
 80166b0:	461a      	mov	r2, r3
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	3301      	adds	r3, #1
 80166ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	3301      	adds	r3, #1
 80166c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	f7ff fa34 	bl	8015b30 <SWAPBYTE>
 80166c8:	4603      	mov	r3, r0
 80166ca:	461a      	mov	r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	3301      	adds	r3, #1
 80166d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	3301      	adds	r3, #1
 80166da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80166dc:	68f8      	ldr	r0, [r7, #12]
 80166de:	f7ff fa27 	bl	8015b30 <SWAPBYTE>
 80166e2:	4603      	mov	r3, r0
 80166e4:	461a      	mov	r2, r3
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	80da      	strh	r2, [r3, #6]
}
 80166ea:	bf00      	nop
 80166ec:	3710      	adds	r7, #16
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}

080166f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166f2:	b580      	push	{r7, lr}
 80166f4:	b082      	sub	sp, #8
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]
 80166fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80166fc:	2180      	movs	r1, #128	; 0x80
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f000 fd36 	bl	8017170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016704:	2100      	movs	r1, #0
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f000 fd32 	bl	8017170 <USBD_LL_StallEP>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b086      	sub	sp, #24
 8016718:	af00      	add	r7, sp, #0
 801671a:	60f8      	str	r0, [r7, #12]
 801671c:	60b9      	str	r1, [r7, #8]
 801671e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016720:	2300      	movs	r3, #0
 8016722:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d036      	beq.n	8016798 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801672e:	6938      	ldr	r0, [r7, #16]
 8016730:	f000 f836 	bl	80167a0 <USBD_GetLen>
 8016734:	4603      	mov	r3, r0
 8016736:	3301      	adds	r3, #1
 8016738:	b29b      	uxth	r3, r3
 801673a:	005b      	lsls	r3, r3, #1
 801673c:	b29a      	uxth	r2, r3
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016742:	7dfb      	ldrb	r3, [r7, #23]
 8016744:	68ba      	ldr	r2, [r7, #8]
 8016746:	4413      	add	r3, r2
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	7812      	ldrb	r2, [r2, #0]
 801674c:	701a      	strb	r2, [r3, #0]
  idx++;
 801674e:	7dfb      	ldrb	r3, [r7, #23]
 8016750:	3301      	adds	r3, #1
 8016752:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016754:	7dfb      	ldrb	r3, [r7, #23]
 8016756:	68ba      	ldr	r2, [r7, #8]
 8016758:	4413      	add	r3, r2
 801675a:	2203      	movs	r2, #3
 801675c:	701a      	strb	r2, [r3, #0]
  idx++;
 801675e:	7dfb      	ldrb	r3, [r7, #23]
 8016760:	3301      	adds	r3, #1
 8016762:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016764:	e013      	b.n	801678e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016766:	7dfb      	ldrb	r3, [r7, #23]
 8016768:	68ba      	ldr	r2, [r7, #8]
 801676a:	4413      	add	r3, r2
 801676c:	693a      	ldr	r2, [r7, #16]
 801676e:	7812      	ldrb	r2, [r2, #0]
 8016770:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016772:	693b      	ldr	r3, [r7, #16]
 8016774:	3301      	adds	r3, #1
 8016776:	613b      	str	r3, [r7, #16]
    idx++;
 8016778:	7dfb      	ldrb	r3, [r7, #23]
 801677a:	3301      	adds	r3, #1
 801677c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801677e:	7dfb      	ldrb	r3, [r7, #23]
 8016780:	68ba      	ldr	r2, [r7, #8]
 8016782:	4413      	add	r3, r2
 8016784:	2200      	movs	r2, #0
 8016786:	701a      	strb	r2, [r3, #0]
    idx++;
 8016788:	7dfb      	ldrb	r3, [r7, #23]
 801678a:	3301      	adds	r3, #1
 801678c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1e7      	bne.n	8016766 <USBD_GetString+0x52>
 8016796:	e000      	b.n	801679a <USBD_GetString+0x86>
    return;
 8016798:	bf00      	nop
  }
}
 801679a:	3718      	adds	r7, #24
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80167a0:	b480      	push	{r7}
 80167a2:	b085      	sub	sp, #20
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80167a8:	2300      	movs	r3, #0
 80167aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80167b0:	e005      	b.n	80167be <USBD_GetLen+0x1e>
  {
    len++;
 80167b2:	7bfb      	ldrb	r3, [r7, #15]
 80167b4:	3301      	adds	r3, #1
 80167b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	3301      	adds	r3, #1
 80167bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80167be:	68bb      	ldr	r3, [r7, #8]
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d1f5      	bne.n	80167b2 <USBD_GetLen+0x12>
  }

  return len;
 80167c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3714      	adds	r7, #20
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr

080167d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	60f8      	str	r0, [r7, #12]
 80167dc:	60b9      	str	r1, [r7, #8]
 80167de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	2202      	movs	r2, #2
 80167e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	687a      	ldr	r2, [r7, #4]
 80167ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	68ba      	ldr	r2, [r7, #8]
 80167f8:	2100      	movs	r1, #0
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f000 fd41 	bl	8017282 <USBD_LL_Transmit>

  return USBD_OK;
 8016800:	2300      	movs	r3, #0
}
 8016802:	4618      	mov	r0, r3
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}

0801680a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801680a:	b580      	push	{r7, lr}
 801680c:	b084      	sub	sp, #16
 801680e:	af00      	add	r7, sp, #0
 8016810:	60f8      	str	r0, [r7, #12]
 8016812:	60b9      	str	r1, [r7, #8]
 8016814:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	2100      	movs	r1, #0
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f000 fd30 	bl	8017282 <USBD_LL_Transmit>

  return USBD_OK;
 8016822:	2300      	movs	r3, #0
}
 8016824:	4618      	mov	r0, r3
 8016826:	3710      	adds	r7, #16
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	2203      	movs	r2, #3
 801683c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	687a      	ldr	r2, [r7, #4]
 8016844:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	68ba      	ldr	r2, [r7, #8]
 8016854:	2100      	movs	r1, #0
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f000 fd34 	bl	80172c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801685c:	2300      	movs	r3, #0
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016866:	b580      	push	{r7, lr}
 8016868:	b084      	sub	sp, #16
 801686a:	af00      	add	r7, sp, #0
 801686c:	60f8      	str	r0, [r7, #12]
 801686e:	60b9      	str	r1, [r7, #8]
 8016870:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	68ba      	ldr	r2, [r7, #8]
 8016876:	2100      	movs	r1, #0
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	f000 fd23 	bl	80172c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801687e:	2300      	movs	r3, #0
}
 8016880:	4618      	mov	r0, r3
 8016882:	3710      	adds	r7, #16
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}

08016888 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2204      	movs	r2, #4
 8016894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016898:	2300      	movs	r3, #0
 801689a:	2200      	movs	r2, #0
 801689c:	2100      	movs	r1, #0
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 fcef 	bl	8017282 <USBD_LL_Transmit>

  return USBD_OK;
 80168a4:	2300      	movs	r3, #0
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3708      	adds	r7, #8
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b082      	sub	sp, #8
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2205      	movs	r2, #5
 80168ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80168be:	2300      	movs	r3, #0
 80168c0:	2200      	movs	r2, #0
 80168c2:	2100      	movs	r1, #0
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 fcfd 	bl	80172c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168ca:	2300      	movs	r3, #0
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80168d4:	b480      	push	{r7}
 80168d6:	b087      	sub	sp, #28
 80168d8:	af00      	add	r7, sp, #0
 80168da:	60f8      	str	r0, [r7, #12]
 80168dc:	60b9      	str	r1, [r7, #8]
 80168de:	4613      	mov	r3, r2
 80168e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80168e2:	2301      	movs	r3, #1
 80168e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80168ea:	4b1f      	ldr	r3, [pc, #124]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 80168ec:	7a5b      	ldrb	r3, [r3, #9]
 80168ee:	b2db      	uxtb	r3, r3
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d131      	bne.n	8016958 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80168f4:	4b1c      	ldr	r3, [pc, #112]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 80168f6:	7a5b      	ldrb	r3, [r3, #9]
 80168f8:	b2db      	uxtb	r3, r3
 80168fa:	461a      	mov	r2, r3
 80168fc:	4b1a      	ldr	r3, [pc, #104]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 80168fe:	2100      	movs	r1, #0
 8016900:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016902:	4b19      	ldr	r3, [pc, #100]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 8016904:	7a5b      	ldrb	r3, [r3, #9]
 8016906:	b2db      	uxtb	r3, r3
 8016908:	4a17      	ldr	r2, [pc, #92]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 801690a:	009b      	lsls	r3, r3, #2
 801690c:	4413      	add	r3, r2
 801690e:	68fa      	ldr	r2, [r7, #12]
 8016910:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016912:	4b15      	ldr	r3, [pc, #84]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 8016914:	7a5b      	ldrb	r3, [r3, #9]
 8016916:	b2db      	uxtb	r3, r3
 8016918:	461a      	mov	r2, r3
 801691a:	4b13      	ldr	r3, [pc, #76]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 801691c:	4413      	add	r3, r2
 801691e:	79fa      	ldrb	r2, [r7, #7]
 8016920:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016922:	4b11      	ldr	r3, [pc, #68]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 8016924:	7a5b      	ldrb	r3, [r3, #9]
 8016926:	b2db      	uxtb	r3, r3
 8016928:	1c5a      	adds	r2, r3, #1
 801692a:	b2d1      	uxtb	r1, r2
 801692c:	4a0e      	ldr	r2, [pc, #56]	; (8016968 <FATFS_LinkDriverEx+0x94>)
 801692e:	7251      	strb	r1, [r2, #9]
 8016930:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016932:	7dbb      	ldrb	r3, [r7, #22]
 8016934:	3330      	adds	r3, #48	; 0x30
 8016936:	b2da      	uxtb	r2, r3
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	3301      	adds	r3, #1
 8016940:	223a      	movs	r2, #58	; 0x3a
 8016942:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	3302      	adds	r3, #2
 8016948:	222f      	movs	r2, #47	; 0x2f
 801694a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	3303      	adds	r3, #3
 8016950:	2200      	movs	r2, #0
 8016952:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016954:	2300      	movs	r3, #0
 8016956:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016958:	7dfb      	ldrb	r3, [r7, #23]
}
 801695a:	4618      	mov	r0, r3
 801695c:	371c      	adds	r7, #28
 801695e:	46bd      	mov	sp, r7
 8016960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	2400161c 	.word	0x2400161c

0801696c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016976:	2200      	movs	r2, #0
 8016978:	6839      	ldr	r1, [r7, #0]
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f7ff ffaa 	bl	80168d4 <FATFS_LinkDriverEx>
 8016980:	4603      	mov	r3, r0
}
 8016982:	4618      	mov	r0, r3
 8016984:	3708      	adds	r7, #8
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}
	...

0801698c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016990:	2201      	movs	r2, #1
 8016992:	4913      	ldr	r1, [pc, #76]	; (80169e0 <MX_USB_DEVICE_Init+0x54>)
 8016994:	4813      	ldr	r0, [pc, #76]	; (80169e4 <MX_USB_DEVICE_Init+0x58>)
 8016996:	f7fe fca5 	bl	80152e4 <USBD_Init>
 801699a:	4603      	mov	r3, r0
 801699c:	2b00      	cmp	r3, #0
 801699e:	d001      	beq.n	80169a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80169a0:	f7ec f99a 	bl	8002cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80169a4:	4910      	ldr	r1, [pc, #64]	; (80169e8 <MX_USB_DEVICE_Init+0x5c>)
 80169a6:	480f      	ldr	r0, [pc, #60]	; (80169e4 <MX_USB_DEVICE_Init+0x58>)
 80169a8:	f7fe fccc 	bl	8015344 <USBD_RegisterClass>
 80169ac:	4603      	mov	r3, r0
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d001      	beq.n	80169b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80169b2:	f7ec f991 	bl	8002cd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80169b6:	490d      	ldr	r1, [pc, #52]	; (80169ec <MX_USB_DEVICE_Init+0x60>)
 80169b8:	480a      	ldr	r0, [pc, #40]	; (80169e4 <MX_USB_DEVICE_Init+0x58>)
 80169ba:	f7fe fbc3 	bl	8015144 <USBD_CDC_RegisterInterface>
 80169be:	4603      	mov	r3, r0
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d001      	beq.n	80169c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80169c4:	f7ec f988 	bl	8002cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80169c8:	4806      	ldr	r0, [pc, #24]	; (80169e4 <MX_USB_DEVICE_Init+0x58>)
 80169ca:	f7fe fcf1 	bl	80153b0 <USBD_Start>
 80169ce:	4603      	mov	r3, r0
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d001      	beq.n	80169d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80169d4:	f7ec f980 	bl	8002cd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80169d8:	f7f3 f960 	bl	8009c9c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80169dc:	bf00      	nop
 80169de:	bd80      	pop	{r7, pc}
 80169e0:	240000b0 	.word	0x240000b0
 80169e4:	24001628 	.word	0x24001628
 80169e8:	2400001c 	.word	0x2400001c
 80169ec:	2400009c 	.word	0x2400009c

080169f0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80169f4:	2200      	movs	r2, #0
 80169f6:	4905      	ldr	r1, [pc, #20]	; (8016a0c <CDC_Init_HS+0x1c>)
 80169f8:	4805      	ldr	r0, [pc, #20]	; (8016a10 <CDC_Init_HS+0x20>)
 80169fa:	f7fe fbbd 	bl	8015178 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80169fe:	4905      	ldr	r1, [pc, #20]	; (8016a14 <CDC_Init_HS+0x24>)
 8016a00:	4803      	ldr	r0, [pc, #12]	; (8016a10 <CDC_Init_HS+0x20>)
 8016a02:	f7fe fbdb 	bl	80151bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016a06:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	24002104 	.word	0x24002104
 8016a10:	24001628 	.word	0x24001628
 8016a14:	24001904 	.word	0x24001904

08016a18 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016a18:	b480      	push	{r7}
 8016a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016a1c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	46bd      	mov	sp, r7
 8016a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a26:	4770      	bx	lr

08016a28 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016a28:	b480      	push	{r7}
 8016a2a:	b083      	sub	sp, #12
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	4603      	mov	r3, r0
 8016a30:	6039      	str	r1, [r7, #0]
 8016a32:	71fb      	strb	r3, [r7, #7]
 8016a34:	4613      	mov	r3, r2
 8016a36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016a38:	79fb      	ldrb	r3, [r7, #7]
 8016a3a:	2b23      	cmp	r3, #35	; 0x23
 8016a3c:	d84a      	bhi.n	8016ad4 <CDC_Control_HS+0xac>
 8016a3e:	a201      	add	r2, pc, #4	; (adr r2, 8016a44 <CDC_Control_HS+0x1c>)
 8016a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a44:	08016ad5 	.word	0x08016ad5
 8016a48:	08016ad5 	.word	0x08016ad5
 8016a4c:	08016ad5 	.word	0x08016ad5
 8016a50:	08016ad5 	.word	0x08016ad5
 8016a54:	08016ad5 	.word	0x08016ad5
 8016a58:	08016ad5 	.word	0x08016ad5
 8016a5c:	08016ad5 	.word	0x08016ad5
 8016a60:	08016ad5 	.word	0x08016ad5
 8016a64:	08016ad5 	.word	0x08016ad5
 8016a68:	08016ad5 	.word	0x08016ad5
 8016a6c:	08016ad5 	.word	0x08016ad5
 8016a70:	08016ad5 	.word	0x08016ad5
 8016a74:	08016ad5 	.word	0x08016ad5
 8016a78:	08016ad5 	.word	0x08016ad5
 8016a7c:	08016ad5 	.word	0x08016ad5
 8016a80:	08016ad5 	.word	0x08016ad5
 8016a84:	08016ad5 	.word	0x08016ad5
 8016a88:	08016ad5 	.word	0x08016ad5
 8016a8c:	08016ad5 	.word	0x08016ad5
 8016a90:	08016ad5 	.word	0x08016ad5
 8016a94:	08016ad5 	.word	0x08016ad5
 8016a98:	08016ad5 	.word	0x08016ad5
 8016a9c:	08016ad5 	.word	0x08016ad5
 8016aa0:	08016ad5 	.word	0x08016ad5
 8016aa4:	08016ad5 	.word	0x08016ad5
 8016aa8:	08016ad5 	.word	0x08016ad5
 8016aac:	08016ad5 	.word	0x08016ad5
 8016ab0:	08016ad5 	.word	0x08016ad5
 8016ab4:	08016ad5 	.word	0x08016ad5
 8016ab8:	08016ad5 	.word	0x08016ad5
 8016abc:	08016ad5 	.word	0x08016ad5
 8016ac0:	08016ad5 	.word	0x08016ad5
 8016ac4:	08016ad5 	.word	0x08016ad5
 8016ac8:	08016ad5 	.word	0x08016ad5
 8016acc:	08016ad5 	.word	0x08016ad5
 8016ad0:	08016ad5 	.word	0x08016ad5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016ad4:	bf00      	nop
  }

  return (USBD_OK);
 8016ad6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	370c      	adds	r7, #12
 8016adc:	46bd      	mov	sp, r7
 8016ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae2:	4770      	bx	lr

08016ae4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016aee:	6879      	ldr	r1, [r7, #4]
 8016af0:	4805      	ldr	r0, [pc, #20]	; (8016b08 <CDC_Receive_HS+0x24>)
 8016af2:	f7fe fb63 	bl	80151bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016af6:	4804      	ldr	r0, [pc, #16]	; (8016b08 <CDC_Receive_HS+0x24>)
 8016af8:	f7fe fbbe 	bl	8015278 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016afc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3708      	adds	r7, #8
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	bf00      	nop
 8016b08:	24001628 	.word	0x24001628

08016b0c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	460b      	mov	r3, r1
 8016b16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016b1c:	4b0d      	ldr	r3, [pc, #52]	; (8016b54 <CDC_Transmit_HS+0x48>)
 8016b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016b22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016b24:	68bb      	ldr	r3, [r7, #8]
 8016b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d001      	beq.n	8016b32 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016b2e:	2301      	movs	r3, #1
 8016b30:	e00b      	b.n	8016b4a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016b32:	887b      	ldrh	r3, [r7, #2]
 8016b34:	461a      	mov	r2, r3
 8016b36:	6879      	ldr	r1, [r7, #4]
 8016b38:	4806      	ldr	r0, [pc, #24]	; (8016b54 <CDC_Transmit_HS+0x48>)
 8016b3a:	f7fe fb1d 	bl	8015178 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016b3e:	4805      	ldr	r0, [pc, #20]	; (8016b54 <CDC_Transmit_HS+0x48>)
 8016b40:	f7fe fb5a 	bl	80151f8 <USBD_CDC_TransmitPacket>
 8016b44:	4603      	mov	r3, r0
 8016b46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	3710      	adds	r7, #16
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}
 8016b52:	bf00      	nop
 8016b54:	24001628 	.word	0x24001628

08016b58 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016b58:	b480      	push	{r7}
 8016b5a:	b087      	sub	sp, #28
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	60b9      	str	r1, [r7, #8]
 8016b62:	4613      	mov	r3, r2
 8016b64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016b66:	2300      	movs	r3, #0
 8016b68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b6e:	4618      	mov	r0, r3
 8016b70:	371c      	adds	r7, #28
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr
	...

08016b7c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	4603      	mov	r3, r0
 8016b84:	6039      	str	r1, [r7, #0]
 8016b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	2212      	movs	r2, #18
 8016b8c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016b8e:	4b03      	ldr	r3, [pc, #12]	; (8016b9c <USBD_HS_DeviceDescriptor+0x20>)
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	370c      	adds	r7, #12
 8016b94:	46bd      	mov	sp, r7
 8016b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9a:	4770      	bx	lr
 8016b9c:	240000cc 	.word	0x240000cc

08016ba0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	6039      	str	r1, [r7, #0]
 8016baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	2204      	movs	r2, #4
 8016bb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016bb2:	4b03      	ldr	r3, [pc, #12]	; (8016bc0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	370c      	adds	r7, #12
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr
 8016bc0:	240000e0 	.word	0x240000e0

08016bc4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	4603      	mov	r3, r0
 8016bcc:	6039      	str	r1, [r7, #0]
 8016bce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016bd0:	79fb      	ldrb	r3, [r7, #7]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d105      	bne.n	8016be2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016bd6:	683a      	ldr	r2, [r7, #0]
 8016bd8:	4907      	ldr	r1, [pc, #28]	; (8016bf8 <USBD_HS_ProductStrDescriptor+0x34>)
 8016bda:	4808      	ldr	r0, [pc, #32]	; (8016bfc <USBD_HS_ProductStrDescriptor+0x38>)
 8016bdc:	f7ff fd9a 	bl	8016714 <USBD_GetString>
 8016be0:	e004      	b.n	8016bec <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016be2:	683a      	ldr	r2, [r7, #0]
 8016be4:	4904      	ldr	r1, [pc, #16]	; (8016bf8 <USBD_HS_ProductStrDescriptor+0x34>)
 8016be6:	4805      	ldr	r0, [pc, #20]	; (8016bfc <USBD_HS_ProductStrDescriptor+0x38>)
 8016be8:	f7ff fd94 	bl	8016714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016bec:	4b02      	ldr	r3, [pc, #8]	; (8016bf8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016bee:	4618      	mov	r0, r3
 8016bf0:	3708      	adds	r7, #8
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	24002904 	.word	0x24002904
 8016bfc:	0801c508 	.word	0x0801c508

08016c00 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b082      	sub	sp, #8
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	4603      	mov	r3, r0
 8016c08:	6039      	str	r1, [r7, #0]
 8016c0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016c0c:	683a      	ldr	r2, [r7, #0]
 8016c0e:	4904      	ldr	r1, [pc, #16]	; (8016c20 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016c10:	4804      	ldr	r0, [pc, #16]	; (8016c24 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016c12:	f7ff fd7f 	bl	8016714 <USBD_GetString>
  return USBD_StrDesc;
 8016c16:	4b02      	ldr	r3, [pc, #8]	; (8016c20 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	24002904 	.word	0x24002904
 8016c24:	0801c524 	.word	0x0801c524

08016c28 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	4603      	mov	r3, r0
 8016c30:	6039      	str	r1, [r7, #0]
 8016c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	221a      	movs	r2, #26
 8016c38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016c3a:	f000 f843 	bl	8016cc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016c3e:	4b02      	ldr	r3, [pc, #8]	; (8016c48 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	3708      	adds	r7, #8
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd80      	pop	{r7, pc}
 8016c48:	240000e4 	.word	0x240000e4

08016c4c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	4603      	mov	r3, r0
 8016c54:	6039      	str	r1, [r7, #0]
 8016c56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016c58:	79fb      	ldrb	r3, [r7, #7]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d105      	bne.n	8016c6a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016c5e:	683a      	ldr	r2, [r7, #0]
 8016c60:	4907      	ldr	r1, [pc, #28]	; (8016c80 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016c62:	4808      	ldr	r0, [pc, #32]	; (8016c84 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016c64:	f7ff fd56 	bl	8016714 <USBD_GetString>
 8016c68:	e004      	b.n	8016c74 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016c6a:	683a      	ldr	r2, [r7, #0]
 8016c6c:	4904      	ldr	r1, [pc, #16]	; (8016c80 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016c6e:	4805      	ldr	r0, [pc, #20]	; (8016c84 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016c70:	f7ff fd50 	bl	8016714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c74:	4b02      	ldr	r3, [pc, #8]	; (8016c80 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3708      	adds	r7, #8
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	24002904 	.word	0x24002904
 8016c84:	0801c528 	.word	0x0801c528

08016c88 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	4603      	mov	r3, r0
 8016c90:	6039      	str	r1, [r7, #0]
 8016c92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016c94:	79fb      	ldrb	r3, [r7, #7]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d105      	bne.n	8016ca6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016c9a:	683a      	ldr	r2, [r7, #0]
 8016c9c:	4907      	ldr	r1, [pc, #28]	; (8016cbc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016c9e:	4808      	ldr	r0, [pc, #32]	; (8016cc0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016ca0:	f7ff fd38 	bl	8016714 <USBD_GetString>
 8016ca4:	e004      	b.n	8016cb0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016ca6:	683a      	ldr	r2, [r7, #0]
 8016ca8:	4904      	ldr	r1, [pc, #16]	; (8016cbc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016caa:	4805      	ldr	r0, [pc, #20]	; (8016cc0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016cac:	f7ff fd32 	bl	8016714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cb0:	4b02      	ldr	r3, [pc, #8]	; (8016cbc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	24002904 	.word	0x24002904
 8016cc0:	0801c534 	.word	0x0801c534

08016cc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b084      	sub	sp, #16
 8016cc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016cca:	4b0f      	ldr	r3, [pc, #60]	; (8016d08 <Get_SerialNum+0x44>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016cd0:	4b0e      	ldr	r3, [pc, #56]	; (8016d0c <Get_SerialNum+0x48>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016cd6:	4b0e      	ldr	r3, [pc, #56]	; (8016d10 <Get_SerialNum+0x4c>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016cdc:	68fa      	ldr	r2, [r7, #12]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d009      	beq.n	8016cfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016cea:	2208      	movs	r2, #8
 8016cec:	4909      	ldr	r1, [pc, #36]	; (8016d14 <Get_SerialNum+0x50>)
 8016cee:	68f8      	ldr	r0, [r7, #12]
 8016cf0:	f000 f814 	bl	8016d1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016cf4:	2204      	movs	r2, #4
 8016cf6:	4908      	ldr	r1, [pc, #32]	; (8016d18 <Get_SerialNum+0x54>)
 8016cf8:	68b8      	ldr	r0, [r7, #8]
 8016cfa:	f000 f80f 	bl	8016d1c <IntToUnicode>
  }
}
 8016cfe:	bf00      	nop
 8016d00:	3710      	adds	r7, #16
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}
 8016d06:	bf00      	nop
 8016d08:	1ff1e800 	.word	0x1ff1e800
 8016d0c:	1ff1e804 	.word	0x1ff1e804
 8016d10:	1ff1e808 	.word	0x1ff1e808
 8016d14:	240000e6 	.word	0x240000e6
 8016d18:	240000f6 	.word	0x240000f6

08016d1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016d1c:	b480      	push	{r7}
 8016d1e:	b087      	sub	sp, #28
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	4613      	mov	r3, r2
 8016d28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016d2e:	2300      	movs	r3, #0
 8016d30:	75fb      	strb	r3, [r7, #23]
 8016d32:	e027      	b.n	8016d84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	0f1b      	lsrs	r3, r3, #28
 8016d38:	2b09      	cmp	r3, #9
 8016d3a:	d80b      	bhi.n	8016d54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	0f1b      	lsrs	r3, r3, #28
 8016d40:	b2da      	uxtb	r2, r3
 8016d42:	7dfb      	ldrb	r3, [r7, #23]
 8016d44:	005b      	lsls	r3, r3, #1
 8016d46:	4619      	mov	r1, r3
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	440b      	add	r3, r1
 8016d4c:	3230      	adds	r2, #48	; 0x30
 8016d4e:	b2d2      	uxtb	r2, r2
 8016d50:	701a      	strb	r2, [r3, #0]
 8016d52:	e00a      	b.n	8016d6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	0f1b      	lsrs	r3, r3, #28
 8016d58:	b2da      	uxtb	r2, r3
 8016d5a:	7dfb      	ldrb	r3, [r7, #23]
 8016d5c:	005b      	lsls	r3, r3, #1
 8016d5e:	4619      	mov	r1, r3
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	440b      	add	r3, r1
 8016d64:	3237      	adds	r2, #55	; 0x37
 8016d66:	b2d2      	uxtb	r2, r2
 8016d68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	011b      	lsls	r3, r3, #4
 8016d6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016d70:	7dfb      	ldrb	r3, [r7, #23]
 8016d72:	005b      	lsls	r3, r3, #1
 8016d74:	3301      	adds	r3, #1
 8016d76:	68ba      	ldr	r2, [r7, #8]
 8016d78:	4413      	add	r3, r2
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016d7e:	7dfb      	ldrb	r3, [r7, #23]
 8016d80:	3301      	adds	r3, #1
 8016d82:	75fb      	strb	r3, [r7, #23]
 8016d84:	7dfa      	ldrb	r2, [r7, #23]
 8016d86:	79fb      	ldrb	r3, [r7, #7]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d3d3      	bcc.n	8016d34 <IntToUnicode+0x18>
  }
}
 8016d8c:	bf00      	nop
 8016d8e:	bf00      	nop
 8016d90:	371c      	adds	r7, #28
 8016d92:	46bd      	mov	sp, r7
 8016d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d98:	4770      	bx	lr
	...

08016d9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b0b2      	sub	sp, #200	; 0xc8
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016da4:	f107 0310 	add.w	r3, r7, #16
 8016da8:	22b8      	movs	r2, #184	; 0xb8
 8016daa:	2100      	movs	r1, #0
 8016dac:	4618      	mov	r0, r3
 8016dae:	f000 fb39 	bl	8017424 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	4a1a      	ldr	r2, [pc, #104]	; (8016e20 <HAL_PCD_MspInit+0x84>)
 8016db8:	4293      	cmp	r3, r2
 8016dba:	d12c      	bne.n	8016e16 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016dbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016dc0:	f04f 0300 	mov.w	r3, #0
 8016dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016dc8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016dcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016dd0:	f107 0310 	add.w	r3, r7, #16
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7f3 ff41 	bl	800ac5c <HAL_RCCEx_PeriphCLKConfig>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d001      	beq.n	8016de4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016de0:	f7eb ff7a 	bl	8002cd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016de4:	f7f2 ff5a 	bl	8009c9c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016de8:	4b0e      	ldr	r3, [pc, #56]	; (8016e24 <HAL_PCD_MspInit+0x88>)
 8016dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016dee:	4a0d      	ldr	r2, [pc, #52]	; (8016e24 <HAL_PCD_MspInit+0x88>)
 8016df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016df4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016df8:	4b0a      	ldr	r3, [pc, #40]	; (8016e24 <HAL_PCD_MspInit+0x88>)
 8016dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016e02:	60fb      	str	r3, [r7, #12]
 8016e04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016e06:	2200      	movs	r2, #0
 8016e08:	2100      	movs	r1, #0
 8016e0a:	204d      	movs	r0, #77	; 0x4d
 8016e0c:	f7ee fce3 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016e10:	204d      	movs	r0, #77	; 0x4d
 8016e12:	f7ee fcfa 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016e16:	bf00      	nop
 8016e18:	37c8      	adds	r7, #200	; 0xc8
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	40040000 	.word	0x40040000
 8016e24:	58024400 	.word	0x58024400

08016e28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	4610      	mov	r0, r2
 8016e40:	f7fe fb03 	bl	801544a <USBD_LL_SetupStage>
}
 8016e44:	bf00      	nop
 8016e46:	3708      	adds	r7, #8
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}

08016e4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	460b      	mov	r3, r1
 8016e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016e5e:	78fa      	ldrb	r2, [r7, #3]
 8016e60:	6879      	ldr	r1, [r7, #4]
 8016e62:	4613      	mov	r3, r2
 8016e64:	00db      	lsls	r3, r3, #3
 8016e66:	4413      	add	r3, r2
 8016e68:	009b      	lsls	r3, r3, #2
 8016e6a:	440b      	add	r3, r1
 8016e6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016e70:	681a      	ldr	r2, [r3, #0]
 8016e72:	78fb      	ldrb	r3, [r7, #3]
 8016e74:	4619      	mov	r1, r3
 8016e76:	f7fe fb3d 	bl	80154f4 <USBD_LL_DataOutStage>
}
 8016e7a:	bf00      	nop
 8016e7c:	3708      	adds	r7, #8
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}

08016e82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016e82:	b580      	push	{r7, lr}
 8016e84:	b082      	sub	sp, #8
 8016e86:	af00      	add	r7, sp, #0
 8016e88:	6078      	str	r0, [r7, #4]
 8016e8a:	460b      	mov	r3, r1
 8016e8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016e94:	78fa      	ldrb	r2, [r7, #3]
 8016e96:	6879      	ldr	r1, [r7, #4]
 8016e98:	4613      	mov	r3, r2
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	4413      	add	r3, r2
 8016e9e:	009b      	lsls	r3, r3, #2
 8016ea0:	440b      	add	r3, r1
 8016ea2:	3348      	adds	r3, #72	; 0x48
 8016ea4:	681a      	ldr	r2, [r3, #0]
 8016ea6:	78fb      	ldrb	r3, [r7, #3]
 8016ea8:	4619      	mov	r1, r3
 8016eaa:	f7fe fbd6 	bl	801565a <USBD_LL_DataInStage>
}
 8016eae:	bf00      	nop
 8016eb0:	3708      	adds	r7, #8
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}

08016eb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016eb6:	b580      	push	{r7, lr}
 8016eb8:	b082      	sub	sp, #8
 8016eba:	af00      	add	r7, sp, #0
 8016ebc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7fe fd10 	bl	80158ea <USBD_LL_SOF>
}
 8016eca:	bf00      	nop
 8016ecc:	3708      	adds	r7, #8
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}

08016ed2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b084      	sub	sp, #16
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016eda:	2301      	movs	r3, #1
 8016edc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	691b      	ldr	r3, [r3, #16]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d102      	bne.n	8016eec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	73fb      	strb	r3, [r7, #15]
 8016eea:	e008      	b.n	8016efe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	691b      	ldr	r3, [r3, #16]
 8016ef0:	2b02      	cmp	r3, #2
 8016ef2:	d102      	bne.n	8016efa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	73fb      	strb	r3, [r7, #15]
 8016ef8:	e001      	b.n	8016efe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016efa:	f7eb feed 	bl	8002cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f04:	7bfa      	ldrb	r2, [r7, #15]
 8016f06:	4611      	mov	r1, r2
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7fe fcaa 	bl	8015862 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7fe fc52 	bl	80157be <USBD_LL_Reset>
}
 8016f1a:	bf00      	nop
 8016f1c:	3710      	adds	r7, #16
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
	...

08016f24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b082      	sub	sp, #8
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7fe fca5 	bl	8015882 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	687a      	ldr	r2, [r7, #4]
 8016f44:	6812      	ldr	r2, [r2, #0]
 8016f46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016f4a:	f043 0301 	orr.w	r3, r3, #1
 8016f4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6a1b      	ldr	r3, [r3, #32]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d005      	beq.n	8016f64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016f58:	4b04      	ldr	r3, [pc, #16]	; (8016f6c <HAL_PCD_SuspendCallback+0x48>)
 8016f5a:	691b      	ldr	r3, [r3, #16]
 8016f5c:	4a03      	ldr	r2, [pc, #12]	; (8016f6c <HAL_PCD_SuspendCallback+0x48>)
 8016f5e:	f043 0306 	orr.w	r3, r3, #6
 8016f62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016f64:	bf00      	nop
 8016f66:	3708      	adds	r7, #8
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}
 8016f6c:	e000ed00 	.word	0xe000ed00

08016f70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b082      	sub	sp, #8
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe fc9b 	bl	80158ba <USBD_LL_Resume>
}
 8016f84:	bf00      	nop
 8016f86:	3708      	adds	r7, #8
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}

08016f8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b082      	sub	sp, #8
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
 8016f94:	460b      	mov	r3, r1
 8016f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016f9e:	78fa      	ldrb	r2, [r7, #3]
 8016fa0:	4611      	mov	r1, r2
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7fe fcf3 	bl	801598e <USBD_LL_IsoOUTIncomplete>
}
 8016fa8:	bf00      	nop
 8016faa:	3708      	adds	r7, #8
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	460b      	mov	r3, r1
 8016fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016fc2:	78fa      	ldrb	r2, [r7, #3]
 8016fc4:	4611      	mov	r1, r2
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f7fe fcaf 	bl	801592a <USBD_LL_IsoINIncomplete>
}
 8016fcc:	bf00      	nop
 8016fce:	3708      	adds	r7, #8
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}

08016fd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7fe fd05 	bl	80159f2 <USBD_LL_DevConnected>
}
 8016fe8:	bf00      	nop
 8016fea:	3708      	adds	r7, #8
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7fe fd02 	bl	8015a08 <USBD_LL_DevDisconnected>
}
 8017004:	bf00      	nop
 8017006:	3708      	adds	r7, #8
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b082      	sub	sp, #8
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	2b01      	cmp	r3, #1
 801701a:	d140      	bne.n	801709e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801701c:	4a22      	ldr	r2, [pc, #136]	; (80170a8 <USBD_LL_Init+0x9c>)
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	4a20      	ldr	r2, [pc, #128]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017028:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801702c:	4b1e      	ldr	r3, [pc, #120]	; (80170a8 <USBD_LL_Init+0x9c>)
 801702e:	4a1f      	ldr	r2, [pc, #124]	; (80170ac <USBD_LL_Init+0xa0>)
 8017030:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017032:	4b1d      	ldr	r3, [pc, #116]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017034:	2209      	movs	r2, #9
 8017036:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017038:	4b1b      	ldr	r3, [pc, #108]	; (80170a8 <USBD_LL_Init+0x9c>)
 801703a:	2202      	movs	r2, #2
 801703c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801703e:	4b1a      	ldr	r3, [pc, #104]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017040:	2200      	movs	r2, #0
 8017042:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017044:	4b18      	ldr	r3, [pc, #96]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017046:	2202      	movs	r2, #2
 8017048:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801704a:	4b17      	ldr	r3, [pc, #92]	; (80170a8 <USBD_LL_Init+0x9c>)
 801704c:	2200      	movs	r2, #0
 801704e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017050:	4b15      	ldr	r3, [pc, #84]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017052:	2200      	movs	r2, #0
 8017054:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017056:	4b14      	ldr	r3, [pc, #80]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017058:	2200      	movs	r2, #0
 801705a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801705c:	4b12      	ldr	r3, [pc, #72]	; (80170a8 <USBD_LL_Init+0x9c>)
 801705e:	2200      	movs	r2, #0
 8017060:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017062:	4b11      	ldr	r3, [pc, #68]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017064:	2200      	movs	r2, #0
 8017066:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017068:	4b0f      	ldr	r3, [pc, #60]	; (80170a8 <USBD_LL_Init+0x9c>)
 801706a:	2200      	movs	r2, #0
 801706c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801706e:	480e      	ldr	r0, [pc, #56]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017070:	f7f1 fb21 	bl	80086b6 <HAL_PCD_Init>
 8017074:	4603      	mov	r3, r0
 8017076:	2b00      	cmp	r3, #0
 8017078:	d001      	beq.n	801707e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801707a:	f7eb fe2d 	bl	8002cd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801707e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017082:	4809      	ldr	r0, [pc, #36]	; (80170a8 <USBD_LL_Init+0x9c>)
 8017084:	f7f2 fd8f 	bl	8009ba6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017088:	2280      	movs	r2, #128	; 0x80
 801708a:	2100      	movs	r1, #0
 801708c:	4806      	ldr	r0, [pc, #24]	; (80170a8 <USBD_LL_Init+0x9c>)
 801708e:	f7f2 fd43 	bl	8009b18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017092:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017096:	2101      	movs	r1, #1
 8017098:	4803      	ldr	r0, [pc, #12]	; (80170a8 <USBD_LL_Init+0x9c>)
 801709a:	f7f2 fd3d 	bl	8009b18 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801709e:	2300      	movs	r3, #0
}
 80170a0:	4618      	mov	r0, r3
 80170a2:	3708      	adds	r7, #8
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}
 80170a8:	24002b04 	.word	0x24002b04
 80170ac:	40040000 	.word	0x40040000

080170b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b084      	sub	sp, #16
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170b8:	2300      	movs	r3, #0
 80170ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170bc:	2300      	movs	r3, #0
 80170be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7f1 fc19 	bl	80088fe <HAL_PCD_Start>
 80170cc:	4603      	mov	r3, r0
 80170ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170d0:	7bfb      	ldrb	r3, [r7, #15]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f000 f942 	bl	801735c <USBD_Get_USB_Status>
 80170d8:	4603      	mov	r3, r0
 80170da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80170dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3710      	adds	r7, #16
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}

080170e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80170e6:	b580      	push	{r7, lr}
 80170e8:	b084      	sub	sp, #16
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
 80170ee:	4608      	mov	r0, r1
 80170f0:	4611      	mov	r1, r2
 80170f2:	461a      	mov	r2, r3
 80170f4:	4603      	mov	r3, r0
 80170f6:	70fb      	strb	r3, [r7, #3]
 80170f8:	460b      	mov	r3, r1
 80170fa:	70bb      	strb	r3, [r7, #2]
 80170fc:	4613      	mov	r3, r2
 80170fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017100:	2300      	movs	r3, #0
 8017102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017104:	2300      	movs	r3, #0
 8017106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801710e:	78bb      	ldrb	r3, [r7, #2]
 8017110:	883a      	ldrh	r2, [r7, #0]
 8017112:	78f9      	ldrb	r1, [r7, #3]
 8017114:	f7f2 f919 	bl	800934a <HAL_PCD_EP_Open>
 8017118:	4603      	mov	r3, r0
 801711a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801711c:	7bfb      	ldrb	r3, [r7, #15]
 801711e:	4618      	mov	r0, r3
 8017120:	f000 f91c 	bl	801735c <USBD_Get_USB_Status>
 8017124:	4603      	mov	r3, r0
 8017126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017128:	7bbb      	ldrb	r3, [r7, #14]
}
 801712a:	4618      	mov	r0, r3
 801712c:	3710      	adds	r7, #16
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}

08017132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017132:	b580      	push	{r7, lr}
 8017134:	b084      	sub	sp, #16
 8017136:	af00      	add	r7, sp, #0
 8017138:	6078      	str	r0, [r7, #4]
 801713a:	460b      	mov	r3, r1
 801713c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801713e:	2300      	movs	r3, #0
 8017140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017142:	2300      	movs	r3, #0
 8017144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801714c:	78fa      	ldrb	r2, [r7, #3]
 801714e:	4611      	mov	r1, r2
 8017150:	4618      	mov	r0, r3
 8017152:	f7f2 f962 	bl	800941a <HAL_PCD_EP_Close>
 8017156:	4603      	mov	r3, r0
 8017158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801715a:	7bfb      	ldrb	r3, [r7, #15]
 801715c:	4618      	mov	r0, r3
 801715e:	f000 f8fd 	bl	801735c <USBD_Get_USB_Status>
 8017162:	4603      	mov	r3, r0
 8017164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017166:	7bbb      	ldrb	r3, [r7, #14]
}
 8017168:	4618      	mov	r0, r3
 801716a:	3710      	adds	r7, #16
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}

08017170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b084      	sub	sp, #16
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	460b      	mov	r3, r1
 801717a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801717c:	2300      	movs	r3, #0
 801717e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017180:	2300      	movs	r3, #0
 8017182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801718a:	78fa      	ldrb	r2, [r7, #3]
 801718c:	4611      	mov	r1, r2
 801718e:	4618      	mov	r0, r3
 8017190:	f7f2 fa1c 	bl	80095cc <HAL_PCD_EP_SetStall>
 8017194:	4603      	mov	r3, r0
 8017196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017198:	7bfb      	ldrb	r3, [r7, #15]
 801719a:	4618      	mov	r0, r3
 801719c:	f000 f8de 	bl	801735c <USBD_Get_USB_Status>
 80171a0:	4603      	mov	r3, r0
 80171a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	3710      	adds	r7, #16
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b084      	sub	sp, #16
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
 80171b6:	460b      	mov	r3, r1
 80171b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171ba:	2300      	movs	r3, #0
 80171bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171be:	2300      	movs	r3, #0
 80171c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80171c8:	78fa      	ldrb	r2, [r7, #3]
 80171ca:	4611      	mov	r1, r2
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7f2 fa61 	bl	8009694 <HAL_PCD_EP_ClrStall>
 80171d2:	4603      	mov	r3, r0
 80171d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171d6:	7bfb      	ldrb	r3, [r7, #15]
 80171d8:	4618      	mov	r0, r3
 80171da:	f000 f8bf 	bl	801735c <USBD_Get_USB_Status>
 80171de:	4603      	mov	r3, r0
 80171e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	3710      	adds	r7, #16
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}

080171ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80171ec:	b480      	push	{r7}
 80171ee:	b085      	sub	sp, #20
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	460b      	mov	r3, r1
 80171f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80171fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017204:	2b00      	cmp	r3, #0
 8017206:	da0b      	bge.n	8017220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017208:	78fb      	ldrb	r3, [r7, #3]
 801720a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801720e:	68f9      	ldr	r1, [r7, #12]
 8017210:	4613      	mov	r3, r2
 8017212:	00db      	lsls	r3, r3, #3
 8017214:	4413      	add	r3, r2
 8017216:	009b      	lsls	r3, r3, #2
 8017218:	440b      	add	r3, r1
 801721a:	333e      	adds	r3, #62	; 0x3e
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	e00b      	b.n	8017238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017220:	78fb      	ldrb	r3, [r7, #3]
 8017222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017226:	68f9      	ldr	r1, [r7, #12]
 8017228:	4613      	mov	r3, r2
 801722a:	00db      	lsls	r3, r3, #3
 801722c:	4413      	add	r3, r2
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	440b      	add	r3, r1
 8017232:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017236:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017238:	4618      	mov	r0, r3
 801723a:	3714      	adds	r7, #20
 801723c:	46bd      	mov	sp, r7
 801723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017242:	4770      	bx	lr

08017244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b084      	sub	sp, #16
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	460b      	mov	r3, r1
 801724e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017250:	2300      	movs	r3, #0
 8017252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017254:	2300      	movs	r3, #0
 8017256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801725e:	78fa      	ldrb	r2, [r7, #3]
 8017260:	4611      	mov	r1, r2
 8017262:	4618      	mov	r0, r3
 8017264:	f7f2 f84c 	bl	8009300 <HAL_PCD_SetAddress>
 8017268:	4603      	mov	r3, r0
 801726a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801726c:	7bfb      	ldrb	r3, [r7, #15]
 801726e:	4618      	mov	r0, r3
 8017270:	f000 f874 	bl	801735c <USBD_Get_USB_Status>
 8017274:	4603      	mov	r3, r0
 8017276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017278:	7bbb      	ldrb	r3, [r7, #14]
}
 801727a:	4618      	mov	r0, r3
 801727c:	3710      	adds	r7, #16
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}

08017282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017282:	b580      	push	{r7, lr}
 8017284:	b086      	sub	sp, #24
 8017286:	af00      	add	r7, sp, #0
 8017288:	60f8      	str	r0, [r7, #12]
 801728a:	607a      	str	r2, [r7, #4]
 801728c:	603b      	str	r3, [r7, #0]
 801728e:	460b      	mov	r3, r1
 8017290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017292:	2300      	movs	r3, #0
 8017294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017296:	2300      	movs	r3, #0
 8017298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80172a0:	7af9      	ldrb	r1, [r7, #11]
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	f7f2 f956 	bl	8009556 <HAL_PCD_EP_Transmit>
 80172aa:	4603      	mov	r3, r0
 80172ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172ae:	7dfb      	ldrb	r3, [r7, #23]
 80172b0:	4618      	mov	r0, r3
 80172b2:	f000 f853 	bl	801735c <USBD_Get_USB_Status>
 80172b6:	4603      	mov	r3, r0
 80172b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80172ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80172bc:	4618      	mov	r0, r3
 80172be:	3718      	adds	r7, #24
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd80      	pop	{r7, pc}

080172c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b086      	sub	sp, #24
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	607a      	str	r2, [r7, #4]
 80172ce:	603b      	str	r3, [r7, #0]
 80172d0:	460b      	mov	r3, r1
 80172d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172d4:	2300      	movs	r3, #0
 80172d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172d8:	2300      	movs	r3, #0
 80172da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80172e2:	7af9      	ldrb	r1, [r7, #11]
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	687a      	ldr	r2, [r7, #4]
 80172e8:	f7f2 f8e1 	bl	80094ae <HAL_PCD_EP_Receive>
 80172ec:	4603      	mov	r3, r0
 80172ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172f0:	7dfb      	ldrb	r3, [r7, #23]
 80172f2:	4618      	mov	r0, r3
 80172f4:	f000 f832 	bl	801735c <USBD_Get_USB_Status>
 80172f8:	4603      	mov	r3, r0
 80172fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80172fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3718      	adds	r7, #24
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}

08017306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017306:	b580      	push	{r7, lr}
 8017308:	b082      	sub	sp, #8
 801730a:	af00      	add	r7, sp, #0
 801730c:	6078      	str	r0, [r7, #4]
 801730e:	460b      	mov	r3, r1
 8017310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017318:	78fa      	ldrb	r2, [r7, #3]
 801731a:	4611      	mov	r1, r2
 801731c:	4618      	mov	r0, r3
 801731e:	f7f2 f902 	bl	8009526 <HAL_PCD_EP_GetRxCount>
 8017322:	4603      	mov	r3, r0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801732c:	b480      	push	{r7}
 801732e:	b083      	sub	sp, #12
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017334:	4b03      	ldr	r3, [pc, #12]	; (8017344 <USBD_static_malloc+0x18>)
}
 8017336:	4618      	mov	r0, r3
 8017338:	370c      	adds	r7, #12
 801733a:	46bd      	mov	sp, r7
 801733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017340:	4770      	bx	lr
 8017342:	bf00      	nop
 8017344:	24003010 	.word	0x24003010

08017348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017350:	bf00      	nop
 8017352:	370c      	adds	r7, #12
 8017354:	46bd      	mov	sp, r7
 8017356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735a:	4770      	bx	lr

0801735c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801735c:	b480      	push	{r7}
 801735e:	b085      	sub	sp, #20
 8017360:	af00      	add	r7, sp, #0
 8017362:	4603      	mov	r3, r0
 8017364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017366:	2300      	movs	r3, #0
 8017368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801736a:	79fb      	ldrb	r3, [r7, #7]
 801736c:	2b03      	cmp	r3, #3
 801736e:	d817      	bhi.n	80173a0 <USBD_Get_USB_Status+0x44>
 8017370:	a201      	add	r2, pc, #4	; (adr r2, 8017378 <USBD_Get_USB_Status+0x1c>)
 8017372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017376:	bf00      	nop
 8017378:	08017389 	.word	0x08017389
 801737c:	0801738f 	.word	0x0801738f
 8017380:	08017395 	.word	0x08017395
 8017384:	0801739b 	.word	0x0801739b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017388:	2300      	movs	r3, #0
 801738a:	73fb      	strb	r3, [r7, #15]
    break;
 801738c:	e00b      	b.n	80173a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801738e:	2303      	movs	r3, #3
 8017390:	73fb      	strb	r3, [r7, #15]
    break;
 8017392:	e008      	b.n	80173a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017394:	2301      	movs	r3, #1
 8017396:	73fb      	strb	r3, [r7, #15]
    break;
 8017398:	e005      	b.n	80173a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801739a:	2303      	movs	r3, #3
 801739c:	73fb      	strb	r3, [r7, #15]
    break;
 801739e:	e002      	b.n	80173a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80173a0:	2303      	movs	r3, #3
 80173a2:	73fb      	strb	r3, [r7, #15]
    break;
 80173a4:	bf00      	nop
  }
  return usb_status;
 80173a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3714      	adds	r7, #20
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <__errno>:
 80173b4:	4b01      	ldr	r3, [pc, #4]	; (80173bc <__errno+0x8>)
 80173b6:	6818      	ldr	r0, [r3, #0]
 80173b8:	4770      	bx	lr
 80173ba:	bf00      	nop
 80173bc:	24000100 	.word	0x24000100

080173c0 <__libc_init_array>:
 80173c0:	b570      	push	{r4, r5, r6, lr}
 80173c2:	4d0d      	ldr	r5, [pc, #52]	; (80173f8 <__libc_init_array+0x38>)
 80173c4:	4c0d      	ldr	r4, [pc, #52]	; (80173fc <__libc_init_array+0x3c>)
 80173c6:	1b64      	subs	r4, r4, r5
 80173c8:	10a4      	asrs	r4, r4, #2
 80173ca:	2600      	movs	r6, #0
 80173cc:	42a6      	cmp	r6, r4
 80173ce:	d109      	bne.n	80173e4 <__libc_init_array+0x24>
 80173d0:	4d0b      	ldr	r5, [pc, #44]	; (8017400 <__libc_init_array+0x40>)
 80173d2:	4c0c      	ldr	r4, [pc, #48]	; (8017404 <__libc_init_array+0x44>)
 80173d4:	f004 ffc2 	bl	801c35c <_init>
 80173d8:	1b64      	subs	r4, r4, r5
 80173da:	10a4      	asrs	r4, r4, #2
 80173dc:	2600      	movs	r6, #0
 80173de:	42a6      	cmp	r6, r4
 80173e0:	d105      	bne.n	80173ee <__libc_init_array+0x2e>
 80173e2:	bd70      	pop	{r4, r5, r6, pc}
 80173e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80173e8:	4798      	blx	r3
 80173ea:	3601      	adds	r6, #1
 80173ec:	e7ee      	b.n	80173cc <__libc_init_array+0xc>
 80173ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80173f2:	4798      	blx	r3
 80173f4:	3601      	adds	r6, #1
 80173f6:	e7f2      	b.n	80173de <__libc_init_array+0x1e>
 80173f8:	0801cad4 	.word	0x0801cad4
 80173fc:	0801cad4 	.word	0x0801cad4
 8017400:	0801cad4 	.word	0x0801cad4
 8017404:	0801cad8 	.word	0x0801cad8

08017408 <memcpy>:
 8017408:	440a      	add	r2, r1
 801740a:	4291      	cmp	r1, r2
 801740c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017410:	d100      	bne.n	8017414 <memcpy+0xc>
 8017412:	4770      	bx	lr
 8017414:	b510      	push	{r4, lr}
 8017416:	f811 4b01 	ldrb.w	r4, [r1], #1
 801741a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801741e:	4291      	cmp	r1, r2
 8017420:	d1f9      	bne.n	8017416 <memcpy+0xe>
 8017422:	bd10      	pop	{r4, pc}

08017424 <memset>:
 8017424:	4402      	add	r2, r0
 8017426:	4603      	mov	r3, r0
 8017428:	4293      	cmp	r3, r2
 801742a:	d100      	bne.n	801742e <memset+0xa>
 801742c:	4770      	bx	lr
 801742e:	f803 1b01 	strb.w	r1, [r3], #1
 8017432:	e7f9      	b.n	8017428 <memset+0x4>

08017434 <__cvt>:
 8017434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017436:	ed2d 8b02 	vpush	{d8}
 801743a:	eeb0 8b40 	vmov.f64	d8, d0
 801743e:	b085      	sub	sp, #20
 8017440:	4617      	mov	r7, r2
 8017442:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017444:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017446:	ee18 2a90 	vmov	r2, s17
 801744a:	f025 0520 	bic.w	r5, r5, #32
 801744e:	2a00      	cmp	r2, #0
 8017450:	bfb6      	itet	lt
 8017452:	222d      	movlt	r2, #45	; 0x2d
 8017454:	2200      	movge	r2, #0
 8017456:	eeb1 8b40 	vneglt.f64	d8, d0
 801745a:	2d46      	cmp	r5, #70	; 0x46
 801745c:	460c      	mov	r4, r1
 801745e:	701a      	strb	r2, [r3, #0]
 8017460:	d004      	beq.n	801746c <__cvt+0x38>
 8017462:	2d45      	cmp	r5, #69	; 0x45
 8017464:	d100      	bne.n	8017468 <__cvt+0x34>
 8017466:	3401      	adds	r4, #1
 8017468:	2102      	movs	r1, #2
 801746a:	e000      	b.n	801746e <__cvt+0x3a>
 801746c:	2103      	movs	r1, #3
 801746e:	ab03      	add	r3, sp, #12
 8017470:	9301      	str	r3, [sp, #4]
 8017472:	ab02      	add	r3, sp, #8
 8017474:	9300      	str	r3, [sp, #0]
 8017476:	4622      	mov	r2, r4
 8017478:	4633      	mov	r3, r6
 801747a:	eeb0 0b48 	vmov.f64	d0, d8
 801747e:	f001 fdc7 	bl	8019010 <_dtoa_r>
 8017482:	2d47      	cmp	r5, #71	; 0x47
 8017484:	d101      	bne.n	801748a <__cvt+0x56>
 8017486:	07fb      	lsls	r3, r7, #31
 8017488:	d51a      	bpl.n	80174c0 <__cvt+0x8c>
 801748a:	2d46      	cmp	r5, #70	; 0x46
 801748c:	eb00 0204 	add.w	r2, r0, r4
 8017490:	d10c      	bne.n	80174ac <__cvt+0x78>
 8017492:	7803      	ldrb	r3, [r0, #0]
 8017494:	2b30      	cmp	r3, #48	; 0x30
 8017496:	d107      	bne.n	80174a8 <__cvt+0x74>
 8017498:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a0:	bf1c      	itt	ne
 80174a2:	f1c4 0401 	rsbne	r4, r4, #1
 80174a6:	6034      	strne	r4, [r6, #0]
 80174a8:	6833      	ldr	r3, [r6, #0]
 80174aa:	441a      	add	r2, r3
 80174ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80174b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174b4:	bf08      	it	eq
 80174b6:	9203      	streq	r2, [sp, #12]
 80174b8:	2130      	movs	r1, #48	; 0x30
 80174ba:	9b03      	ldr	r3, [sp, #12]
 80174bc:	4293      	cmp	r3, r2
 80174be:	d307      	bcc.n	80174d0 <__cvt+0x9c>
 80174c0:	9b03      	ldr	r3, [sp, #12]
 80174c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174c4:	1a1b      	subs	r3, r3, r0
 80174c6:	6013      	str	r3, [r2, #0]
 80174c8:	b005      	add	sp, #20
 80174ca:	ecbd 8b02 	vpop	{d8}
 80174ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174d0:	1c5c      	adds	r4, r3, #1
 80174d2:	9403      	str	r4, [sp, #12]
 80174d4:	7019      	strb	r1, [r3, #0]
 80174d6:	e7f0      	b.n	80174ba <__cvt+0x86>

080174d8 <__exponent>:
 80174d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174da:	4603      	mov	r3, r0
 80174dc:	2900      	cmp	r1, #0
 80174de:	bfb8      	it	lt
 80174e0:	4249      	neglt	r1, r1
 80174e2:	f803 2b02 	strb.w	r2, [r3], #2
 80174e6:	bfb4      	ite	lt
 80174e8:	222d      	movlt	r2, #45	; 0x2d
 80174ea:	222b      	movge	r2, #43	; 0x2b
 80174ec:	2909      	cmp	r1, #9
 80174ee:	7042      	strb	r2, [r0, #1]
 80174f0:	dd2a      	ble.n	8017548 <__exponent+0x70>
 80174f2:	f10d 0407 	add.w	r4, sp, #7
 80174f6:	46a4      	mov	ip, r4
 80174f8:	270a      	movs	r7, #10
 80174fa:	46a6      	mov	lr, r4
 80174fc:	460a      	mov	r2, r1
 80174fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8017502:	fb07 1516 	mls	r5, r7, r6, r1
 8017506:	3530      	adds	r5, #48	; 0x30
 8017508:	2a63      	cmp	r2, #99	; 0x63
 801750a:	f104 34ff 	add.w	r4, r4, #4294967295
 801750e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017512:	4631      	mov	r1, r6
 8017514:	dcf1      	bgt.n	80174fa <__exponent+0x22>
 8017516:	3130      	adds	r1, #48	; 0x30
 8017518:	f1ae 0502 	sub.w	r5, lr, #2
 801751c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017520:	1c44      	adds	r4, r0, #1
 8017522:	4629      	mov	r1, r5
 8017524:	4561      	cmp	r1, ip
 8017526:	d30a      	bcc.n	801753e <__exponent+0x66>
 8017528:	f10d 0209 	add.w	r2, sp, #9
 801752c:	eba2 020e 	sub.w	r2, r2, lr
 8017530:	4565      	cmp	r5, ip
 8017532:	bf88      	it	hi
 8017534:	2200      	movhi	r2, #0
 8017536:	4413      	add	r3, r2
 8017538:	1a18      	subs	r0, r3, r0
 801753a:	b003      	add	sp, #12
 801753c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801753e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017542:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017546:	e7ed      	b.n	8017524 <__exponent+0x4c>
 8017548:	2330      	movs	r3, #48	; 0x30
 801754a:	3130      	adds	r1, #48	; 0x30
 801754c:	7083      	strb	r3, [r0, #2]
 801754e:	70c1      	strb	r1, [r0, #3]
 8017550:	1d03      	adds	r3, r0, #4
 8017552:	e7f1      	b.n	8017538 <__exponent+0x60>
 8017554:	0000      	movs	r0, r0
	...

08017558 <_printf_float>:
 8017558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801755c:	b08b      	sub	sp, #44	; 0x2c
 801755e:	460c      	mov	r4, r1
 8017560:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017564:	4616      	mov	r6, r2
 8017566:	461f      	mov	r7, r3
 8017568:	4605      	mov	r5, r0
 801756a:	f002 fe2f 	bl	801a1cc <_localeconv_r>
 801756e:	f8d0 b000 	ldr.w	fp, [r0]
 8017572:	4658      	mov	r0, fp
 8017574:	f7e8 fed6 	bl	8000324 <strlen>
 8017578:	2300      	movs	r3, #0
 801757a:	9308      	str	r3, [sp, #32]
 801757c:	f8d8 3000 	ldr.w	r3, [r8]
 8017580:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017584:	6822      	ldr	r2, [r4, #0]
 8017586:	3307      	adds	r3, #7
 8017588:	f023 0307 	bic.w	r3, r3, #7
 801758c:	f103 0108 	add.w	r1, r3, #8
 8017590:	f8c8 1000 	str.w	r1, [r8]
 8017594:	4682      	mov	sl, r0
 8017596:	e9d3 0100 	ldrd	r0, r1, [r3]
 801759a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801759e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8017800 <_printf_float+0x2a8>
 80175a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80175a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80175aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80175ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b2:	dd24      	ble.n	80175fe <_printf_float+0xa6>
 80175b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80175b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175bc:	d502      	bpl.n	80175c4 <_printf_float+0x6c>
 80175be:	232d      	movs	r3, #45	; 0x2d
 80175c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175c4:	4b90      	ldr	r3, [pc, #576]	; (8017808 <_printf_float+0x2b0>)
 80175c6:	4891      	ldr	r0, [pc, #580]	; (801780c <_printf_float+0x2b4>)
 80175c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80175cc:	bf94      	ite	ls
 80175ce:	4698      	movls	r8, r3
 80175d0:	4680      	movhi	r8, r0
 80175d2:	2303      	movs	r3, #3
 80175d4:	6123      	str	r3, [r4, #16]
 80175d6:	f022 0204 	bic.w	r2, r2, #4
 80175da:	2300      	movs	r3, #0
 80175dc:	6022      	str	r2, [r4, #0]
 80175de:	9304      	str	r3, [sp, #16]
 80175e0:	9700      	str	r7, [sp, #0]
 80175e2:	4633      	mov	r3, r6
 80175e4:	aa09      	add	r2, sp, #36	; 0x24
 80175e6:	4621      	mov	r1, r4
 80175e8:	4628      	mov	r0, r5
 80175ea:	f000 f9d3 	bl	8017994 <_printf_common>
 80175ee:	3001      	adds	r0, #1
 80175f0:	f040 808a 	bne.w	8017708 <_printf_float+0x1b0>
 80175f4:	f04f 30ff 	mov.w	r0, #4294967295
 80175f8:	b00b      	add	sp, #44	; 0x2c
 80175fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8017602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017606:	d709      	bvc.n	801761c <_printf_float+0xc4>
 8017608:	ee10 3a90 	vmov	r3, s1
 801760c:	2b00      	cmp	r3, #0
 801760e:	bfbc      	itt	lt
 8017610:	232d      	movlt	r3, #45	; 0x2d
 8017612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017616:	487e      	ldr	r0, [pc, #504]	; (8017810 <_printf_float+0x2b8>)
 8017618:	4b7e      	ldr	r3, [pc, #504]	; (8017814 <_printf_float+0x2bc>)
 801761a:	e7d5      	b.n	80175c8 <_printf_float+0x70>
 801761c:	6863      	ldr	r3, [r4, #4]
 801761e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8017622:	9104      	str	r1, [sp, #16]
 8017624:	1c59      	adds	r1, r3, #1
 8017626:	d13c      	bne.n	80176a2 <_printf_float+0x14a>
 8017628:	2306      	movs	r3, #6
 801762a:	6063      	str	r3, [r4, #4]
 801762c:	2300      	movs	r3, #0
 801762e:	9303      	str	r3, [sp, #12]
 8017630:	ab08      	add	r3, sp, #32
 8017632:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801763a:	ab07      	add	r3, sp, #28
 801763c:	6861      	ldr	r1, [r4, #4]
 801763e:	9300      	str	r3, [sp, #0]
 8017640:	6022      	str	r2, [r4, #0]
 8017642:	f10d 031b 	add.w	r3, sp, #27
 8017646:	4628      	mov	r0, r5
 8017648:	f7ff fef4 	bl	8017434 <__cvt>
 801764c:	9b04      	ldr	r3, [sp, #16]
 801764e:	9907      	ldr	r1, [sp, #28]
 8017650:	2b47      	cmp	r3, #71	; 0x47
 8017652:	4680      	mov	r8, r0
 8017654:	d108      	bne.n	8017668 <_printf_float+0x110>
 8017656:	1cc8      	adds	r0, r1, #3
 8017658:	db02      	blt.n	8017660 <_printf_float+0x108>
 801765a:	6863      	ldr	r3, [r4, #4]
 801765c:	4299      	cmp	r1, r3
 801765e:	dd41      	ble.n	80176e4 <_printf_float+0x18c>
 8017660:	f1a9 0902 	sub.w	r9, r9, #2
 8017664:	fa5f f989 	uxtb.w	r9, r9
 8017668:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801766c:	d820      	bhi.n	80176b0 <_printf_float+0x158>
 801766e:	3901      	subs	r1, #1
 8017670:	464a      	mov	r2, r9
 8017672:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017676:	9107      	str	r1, [sp, #28]
 8017678:	f7ff ff2e 	bl	80174d8 <__exponent>
 801767c:	9a08      	ldr	r2, [sp, #32]
 801767e:	9004      	str	r0, [sp, #16]
 8017680:	1813      	adds	r3, r2, r0
 8017682:	2a01      	cmp	r2, #1
 8017684:	6123      	str	r3, [r4, #16]
 8017686:	dc02      	bgt.n	801768e <_printf_float+0x136>
 8017688:	6822      	ldr	r2, [r4, #0]
 801768a:	07d2      	lsls	r2, r2, #31
 801768c:	d501      	bpl.n	8017692 <_printf_float+0x13a>
 801768e:	3301      	adds	r3, #1
 8017690:	6123      	str	r3, [r4, #16]
 8017692:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d0a2      	beq.n	80175e0 <_printf_float+0x88>
 801769a:	232d      	movs	r3, #45	; 0x2d
 801769c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176a0:	e79e      	b.n	80175e0 <_printf_float+0x88>
 80176a2:	9904      	ldr	r1, [sp, #16]
 80176a4:	2947      	cmp	r1, #71	; 0x47
 80176a6:	d1c1      	bne.n	801762c <_printf_float+0xd4>
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d1bf      	bne.n	801762c <_printf_float+0xd4>
 80176ac:	2301      	movs	r3, #1
 80176ae:	e7bc      	b.n	801762a <_printf_float+0xd2>
 80176b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80176b4:	d118      	bne.n	80176e8 <_printf_float+0x190>
 80176b6:	2900      	cmp	r1, #0
 80176b8:	6863      	ldr	r3, [r4, #4]
 80176ba:	dd0b      	ble.n	80176d4 <_printf_float+0x17c>
 80176bc:	6121      	str	r1, [r4, #16]
 80176be:	b913      	cbnz	r3, 80176c6 <_printf_float+0x16e>
 80176c0:	6822      	ldr	r2, [r4, #0]
 80176c2:	07d0      	lsls	r0, r2, #31
 80176c4:	d502      	bpl.n	80176cc <_printf_float+0x174>
 80176c6:	3301      	adds	r3, #1
 80176c8:	440b      	add	r3, r1
 80176ca:	6123      	str	r3, [r4, #16]
 80176cc:	2300      	movs	r3, #0
 80176ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80176d0:	9304      	str	r3, [sp, #16]
 80176d2:	e7de      	b.n	8017692 <_printf_float+0x13a>
 80176d4:	b913      	cbnz	r3, 80176dc <_printf_float+0x184>
 80176d6:	6822      	ldr	r2, [r4, #0]
 80176d8:	07d2      	lsls	r2, r2, #31
 80176da:	d501      	bpl.n	80176e0 <_printf_float+0x188>
 80176dc:	3302      	adds	r3, #2
 80176de:	e7f4      	b.n	80176ca <_printf_float+0x172>
 80176e0:	2301      	movs	r3, #1
 80176e2:	e7f2      	b.n	80176ca <_printf_float+0x172>
 80176e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80176e8:	9b08      	ldr	r3, [sp, #32]
 80176ea:	4299      	cmp	r1, r3
 80176ec:	db05      	blt.n	80176fa <_printf_float+0x1a2>
 80176ee:	6823      	ldr	r3, [r4, #0]
 80176f0:	6121      	str	r1, [r4, #16]
 80176f2:	07d8      	lsls	r0, r3, #31
 80176f4:	d5ea      	bpl.n	80176cc <_printf_float+0x174>
 80176f6:	1c4b      	adds	r3, r1, #1
 80176f8:	e7e7      	b.n	80176ca <_printf_float+0x172>
 80176fa:	2900      	cmp	r1, #0
 80176fc:	bfd4      	ite	le
 80176fe:	f1c1 0202 	rsble	r2, r1, #2
 8017702:	2201      	movgt	r2, #1
 8017704:	4413      	add	r3, r2
 8017706:	e7e0      	b.n	80176ca <_printf_float+0x172>
 8017708:	6823      	ldr	r3, [r4, #0]
 801770a:	055a      	lsls	r2, r3, #21
 801770c:	d407      	bmi.n	801771e <_printf_float+0x1c6>
 801770e:	6923      	ldr	r3, [r4, #16]
 8017710:	4642      	mov	r2, r8
 8017712:	4631      	mov	r1, r6
 8017714:	4628      	mov	r0, r5
 8017716:	47b8      	blx	r7
 8017718:	3001      	adds	r0, #1
 801771a:	d12a      	bne.n	8017772 <_printf_float+0x21a>
 801771c:	e76a      	b.n	80175f4 <_printf_float+0x9c>
 801771e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017722:	f240 80e2 	bls.w	80178ea <_printf_float+0x392>
 8017726:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801772a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017732:	d133      	bne.n	801779c <_printf_float+0x244>
 8017734:	4a38      	ldr	r2, [pc, #224]	; (8017818 <_printf_float+0x2c0>)
 8017736:	2301      	movs	r3, #1
 8017738:	4631      	mov	r1, r6
 801773a:	4628      	mov	r0, r5
 801773c:	47b8      	blx	r7
 801773e:	3001      	adds	r0, #1
 8017740:	f43f af58 	beq.w	80175f4 <_printf_float+0x9c>
 8017744:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017748:	429a      	cmp	r2, r3
 801774a:	db02      	blt.n	8017752 <_printf_float+0x1fa>
 801774c:	6823      	ldr	r3, [r4, #0]
 801774e:	07d8      	lsls	r0, r3, #31
 8017750:	d50f      	bpl.n	8017772 <_printf_float+0x21a>
 8017752:	4653      	mov	r3, sl
 8017754:	465a      	mov	r2, fp
 8017756:	4631      	mov	r1, r6
 8017758:	4628      	mov	r0, r5
 801775a:	47b8      	blx	r7
 801775c:	3001      	adds	r0, #1
 801775e:	f43f af49 	beq.w	80175f4 <_printf_float+0x9c>
 8017762:	f04f 0800 	mov.w	r8, #0
 8017766:	f104 091a 	add.w	r9, r4, #26
 801776a:	9b08      	ldr	r3, [sp, #32]
 801776c:	3b01      	subs	r3, #1
 801776e:	4543      	cmp	r3, r8
 8017770:	dc09      	bgt.n	8017786 <_printf_float+0x22e>
 8017772:	6823      	ldr	r3, [r4, #0]
 8017774:	079b      	lsls	r3, r3, #30
 8017776:	f100 8108 	bmi.w	801798a <_printf_float+0x432>
 801777a:	68e0      	ldr	r0, [r4, #12]
 801777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801777e:	4298      	cmp	r0, r3
 8017780:	bfb8      	it	lt
 8017782:	4618      	movlt	r0, r3
 8017784:	e738      	b.n	80175f8 <_printf_float+0xa0>
 8017786:	2301      	movs	r3, #1
 8017788:	464a      	mov	r2, r9
 801778a:	4631      	mov	r1, r6
 801778c:	4628      	mov	r0, r5
 801778e:	47b8      	blx	r7
 8017790:	3001      	adds	r0, #1
 8017792:	f43f af2f 	beq.w	80175f4 <_printf_float+0x9c>
 8017796:	f108 0801 	add.w	r8, r8, #1
 801779a:	e7e6      	b.n	801776a <_printf_float+0x212>
 801779c:	9b07      	ldr	r3, [sp, #28]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	dc3c      	bgt.n	801781c <_printf_float+0x2c4>
 80177a2:	4a1d      	ldr	r2, [pc, #116]	; (8017818 <_printf_float+0x2c0>)
 80177a4:	2301      	movs	r3, #1
 80177a6:	4631      	mov	r1, r6
 80177a8:	4628      	mov	r0, r5
 80177aa:	47b8      	blx	r7
 80177ac:	3001      	adds	r0, #1
 80177ae:	f43f af21 	beq.w	80175f4 <_printf_float+0x9c>
 80177b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80177b6:	4313      	orrs	r3, r2
 80177b8:	d102      	bne.n	80177c0 <_printf_float+0x268>
 80177ba:	6823      	ldr	r3, [r4, #0]
 80177bc:	07d9      	lsls	r1, r3, #31
 80177be:	d5d8      	bpl.n	8017772 <_printf_float+0x21a>
 80177c0:	4653      	mov	r3, sl
 80177c2:	465a      	mov	r2, fp
 80177c4:	4631      	mov	r1, r6
 80177c6:	4628      	mov	r0, r5
 80177c8:	47b8      	blx	r7
 80177ca:	3001      	adds	r0, #1
 80177cc:	f43f af12 	beq.w	80175f4 <_printf_float+0x9c>
 80177d0:	f04f 0900 	mov.w	r9, #0
 80177d4:	f104 0a1a 	add.w	sl, r4, #26
 80177d8:	9b07      	ldr	r3, [sp, #28]
 80177da:	425b      	negs	r3, r3
 80177dc:	454b      	cmp	r3, r9
 80177de:	dc01      	bgt.n	80177e4 <_printf_float+0x28c>
 80177e0:	9b08      	ldr	r3, [sp, #32]
 80177e2:	e795      	b.n	8017710 <_printf_float+0x1b8>
 80177e4:	2301      	movs	r3, #1
 80177e6:	4652      	mov	r2, sl
 80177e8:	4631      	mov	r1, r6
 80177ea:	4628      	mov	r0, r5
 80177ec:	47b8      	blx	r7
 80177ee:	3001      	adds	r0, #1
 80177f0:	f43f af00 	beq.w	80175f4 <_printf_float+0x9c>
 80177f4:	f109 0901 	add.w	r9, r9, #1
 80177f8:	e7ee      	b.n	80177d8 <_printf_float+0x280>
 80177fa:	bf00      	nop
 80177fc:	f3af 8000 	nop.w
 8017800:	ffffffff 	.word	0xffffffff
 8017804:	7fefffff 	.word	0x7fefffff
 8017808:	0801c618 	.word	0x0801c618
 801780c:	0801c61c 	.word	0x0801c61c
 8017810:	0801c624 	.word	0x0801c624
 8017814:	0801c620 	.word	0x0801c620
 8017818:	0801ca19 	.word	0x0801ca19
 801781c:	9a08      	ldr	r2, [sp, #32]
 801781e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017820:	429a      	cmp	r2, r3
 8017822:	bfa8      	it	ge
 8017824:	461a      	movge	r2, r3
 8017826:	2a00      	cmp	r2, #0
 8017828:	4691      	mov	r9, r2
 801782a:	dc38      	bgt.n	801789e <_printf_float+0x346>
 801782c:	2300      	movs	r3, #0
 801782e:	9305      	str	r3, [sp, #20]
 8017830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017834:	f104 021a 	add.w	r2, r4, #26
 8017838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801783a:	9905      	ldr	r1, [sp, #20]
 801783c:	9304      	str	r3, [sp, #16]
 801783e:	eba3 0309 	sub.w	r3, r3, r9
 8017842:	428b      	cmp	r3, r1
 8017844:	dc33      	bgt.n	80178ae <_printf_float+0x356>
 8017846:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801784a:	429a      	cmp	r2, r3
 801784c:	db3c      	blt.n	80178c8 <_printf_float+0x370>
 801784e:	6823      	ldr	r3, [r4, #0]
 8017850:	07da      	lsls	r2, r3, #31
 8017852:	d439      	bmi.n	80178c8 <_printf_float+0x370>
 8017854:	9b08      	ldr	r3, [sp, #32]
 8017856:	9a04      	ldr	r2, [sp, #16]
 8017858:	9907      	ldr	r1, [sp, #28]
 801785a:	1a9a      	subs	r2, r3, r2
 801785c:	eba3 0901 	sub.w	r9, r3, r1
 8017860:	4591      	cmp	r9, r2
 8017862:	bfa8      	it	ge
 8017864:	4691      	movge	r9, r2
 8017866:	f1b9 0f00 	cmp.w	r9, #0
 801786a:	dc35      	bgt.n	80178d8 <_printf_float+0x380>
 801786c:	f04f 0800 	mov.w	r8, #0
 8017870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017874:	f104 0a1a 	add.w	sl, r4, #26
 8017878:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801787c:	1a9b      	subs	r3, r3, r2
 801787e:	eba3 0309 	sub.w	r3, r3, r9
 8017882:	4543      	cmp	r3, r8
 8017884:	f77f af75 	ble.w	8017772 <_printf_float+0x21a>
 8017888:	2301      	movs	r3, #1
 801788a:	4652      	mov	r2, sl
 801788c:	4631      	mov	r1, r6
 801788e:	4628      	mov	r0, r5
 8017890:	47b8      	blx	r7
 8017892:	3001      	adds	r0, #1
 8017894:	f43f aeae 	beq.w	80175f4 <_printf_float+0x9c>
 8017898:	f108 0801 	add.w	r8, r8, #1
 801789c:	e7ec      	b.n	8017878 <_printf_float+0x320>
 801789e:	4613      	mov	r3, r2
 80178a0:	4631      	mov	r1, r6
 80178a2:	4642      	mov	r2, r8
 80178a4:	4628      	mov	r0, r5
 80178a6:	47b8      	blx	r7
 80178a8:	3001      	adds	r0, #1
 80178aa:	d1bf      	bne.n	801782c <_printf_float+0x2d4>
 80178ac:	e6a2      	b.n	80175f4 <_printf_float+0x9c>
 80178ae:	2301      	movs	r3, #1
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	9204      	str	r2, [sp, #16]
 80178b6:	47b8      	blx	r7
 80178b8:	3001      	adds	r0, #1
 80178ba:	f43f ae9b 	beq.w	80175f4 <_printf_float+0x9c>
 80178be:	9b05      	ldr	r3, [sp, #20]
 80178c0:	9a04      	ldr	r2, [sp, #16]
 80178c2:	3301      	adds	r3, #1
 80178c4:	9305      	str	r3, [sp, #20]
 80178c6:	e7b7      	b.n	8017838 <_printf_float+0x2e0>
 80178c8:	4653      	mov	r3, sl
 80178ca:	465a      	mov	r2, fp
 80178cc:	4631      	mov	r1, r6
 80178ce:	4628      	mov	r0, r5
 80178d0:	47b8      	blx	r7
 80178d2:	3001      	adds	r0, #1
 80178d4:	d1be      	bne.n	8017854 <_printf_float+0x2fc>
 80178d6:	e68d      	b.n	80175f4 <_printf_float+0x9c>
 80178d8:	9a04      	ldr	r2, [sp, #16]
 80178da:	464b      	mov	r3, r9
 80178dc:	4442      	add	r2, r8
 80178de:	4631      	mov	r1, r6
 80178e0:	4628      	mov	r0, r5
 80178e2:	47b8      	blx	r7
 80178e4:	3001      	adds	r0, #1
 80178e6:	d1c1      	bne.n	801786c <_printf_float+0x314>
 80178e8:	e684      	b.n	80175f4 <_printf_float+0x9c>
 80178ea:	9a08      	ldr	r2, [sp, #32]
 80178ec:	2a01      	cmp	r2, #1
 80178ee:	dc01      	bgt.n	80178f4 <_printf_float+0x39c>
 80178f0:	07db      	lsls	r3, r3, #31
 80178f2:	d537      	bpl.n	8017964 <_printf_float+0x40c>
 80178f4:	2301      	movs	r3, #1
 80178f6:	4642      	mov	r2, r8
 80178f8:	4631      	mov	r1, r6
 80178fa:	4628      	mov	r0, r5
 80178fc:	47b8      	blx	r7
 80178fe:	3001      	adds	r0, #1
 8017900:	f43f ae78 	beq.w	80175f4 <_printf_float+0x9c>
 8017904:	4653      	mov	r3, sl
 8017906:	465a      	mov	r2, fp
 8017908:	4631      	mov	r1, r6
 801790a:	4628      	mov	r0, r5
 801790c:	47b8      	blx	r7
 801790e:	3001      	adds	r0, #1
 8017910:	f43f ae70 	beq.w	80175f4 <_printf_float+0x9c>
 8017914:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017918:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017920:	d01b      	beq.n	801795a <_printf_float+0x402>
 8017922:	9b08      	ldr	r3, [sp, #32]
 8017924:	f108 0201 	add.w	r2, r8, #1
 8017928:	3b01      	subs	r3, #1
 801792a:	4631      	mov	r1, r6
 801792c:	4628      	mov	r0, r5
 801792e:	47b8      	blx	r7
 8017930:	3001      	adds	r0, #1
 8017932:	d10e      	bne.n	8017952 <_printf_float+0x3fa>
 8017934:	e65e      	b.n	80175f4 <_printf_float+0x9c>
 8017936:	2301      	movs	r3, #1
 8017938:	464a      	mov	r2, r9
 801793a:	4631      	mov	r1, r6
 801793c:	4628      	mov	r0, r5
 801793e:	47b8      	blx	r7
 8017940:	3001      	adds	r0, #1
 8017942:	f43f ae57 	beq.w	80175f4 <_printf_float+0x9c>
 8017946:	f108 0801 	add.w	r8, r8, #1
 801794a:	9b08      	ldr	r3, [sp, #32]
 801794c:	3b01      	subs	r3, #1
 801794e:	4543      	cmp	r3, r8
 8017950:	dcf1      	bgt.n	8017936 <_printf_float+0x3de>
 8017952:	9b04      	ldr	r3, [sp, #16]
 8017954:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017958:	e6db      	b.n	8017712 <_printf_float+0x1ba>
 801795a:	f04f 0800 	mov.w	r8, #0
 801795e:	f104 091a 	add.w	r9, r4, #26
 8017962:	e7f2      	b.n	801794a <_printf_float+0x3f2>
 8017964:	2301      	movs	r3, #1
 8017966:	4642      	mov	r2, r8
 8017968:	e7df      	b.n	801792a <_printf_float+0x3d2>
 801796a:	2301      	movs	r3, #1
 801796c:	464a      	mov	r2, r9
 801796e:	4631      	mov	r1, r6
 8017970:	4628      	mov	r0, r5
 8017972:	47b8      	blx	r7
 8017974:	3001      	adds	r0, #1
 8017976:	f43f ae3d 	beq.w	80175f4 <_printf_float+0x9c>
 801797a:	f108 0801 	add.w	r8, r8, #1
 801797e:	68e3      	ldr	r3, [r4, #12]
 8017980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017982:	1a5b      	subs	r3, r3, r1
 8017984:	4543      	cmp	r3, r8
 8017986:	dcf0      	bgt.n	801796a <_printf_float+0x412>
 8017988:	e6f7      	b.n	801777a <_printf_float+0x222>
 801798a:	f04f 0800 	mov.w	r8, #0
 801798e:	f104 0919 	add.w	r9, r4, #25
 8017992:	e7f4      	b.n	801797e <_printf_float+0x426>

08017994 <_printf_common>:
 8017994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017998:	4616      	mov	r6, r2
 801799a:	4699      	mov	r9, r3
 801799c:	688a      	ldr	r2, [r1, #8]
 801799e:	690b      	ldr	r3, [r1, #16]
 80179a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80179a4:	4293      	cmp	r3, r2
 80179a6:	bfb8      	it	lt
 80179a8:	4613      	movlt	r3, r2
 80179aa:	6033      	str	r3, [r6, #0]
 80179ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80179b0:	4607      	mov	r7, r0
 80179b2:	460c      	mov	r4, r1
 80179b4:	b10a      	cbz	r2, 80179ba <_printf_common+0x26>
 80179b6:	3301      	adds	r3, #1
 80179b8:	6033      	str	r3, [r6, #0]
 80179ba:	6823      	ldr	r3, [r4, #0]
 80179bc:	0699      	lsls	r1, r3, #26
 80179be:	bf42      	ittt	mi
 80179c0:	6833      	ldrmi	r3, [r6, #0]
 80179c2:	3302      	addmi	r3, #2
 80179c4:	6033      	strmi	r3, [r6, #0]
 80179c6:	6825      	ldr	r5, [r4, #0]
 80179c8:	f015 0506 	ands.w	r5, r5, #6
 80179cc:	d106      	bne.n	80179dc <_printf_common+0x48>
 80179ce:	f104 0a19 	add.w	sl, r4, #25
 80179d2:	68e3      	ldr	r3, [r4, #12]
 80179d4:	6832      	ldr	r2, [r6, #0]
 80179d6:	1a9b      	subs	r3, r3, r2
 80179d8:	42ab      	cmp	r3, r5
 80179da:	dc26      	bgt.n	8017a2a <_printf_common+0x96>
 80179dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80179e0:	1e13      	subs	r3, r2, #0
 80179e2:	6822      	ldr	r2, [r4, #0]
 80179e4:	bf18      	it	ne
 80179e6:	2301      	movne	r3, #1
 80179e8:	0692      	lsls	r2, r2, #26
 80179ea:	d42b      	bmi.n	8017a44 <_printf_common+0xb0>
 80179ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179f0:	4649      	mov	r1, r9
 80179f2:	4638      	mov	r0, r7
 80179f4:	47c0      	blx	r8
 80179f6:	3001      	adds	r0, #1
 80179f8:	d01e      	beq.n	8017a38 <_printf_common+0xa4>
 80179fa:	6823      	ldr	r3, [r4, #0]
 80179fc:	68e5      	ldr	r5, [r4, #12]
 80179fe:	6832      	ldr	r2, [r6, #0]
 8017a00:	f003 0306 	and.w	r3, r3, #6
 8017a04:	2b04      	cmp	r3, #4
 8017a06:	bf08      	it	eq
 8017a08:	1aad      	subeq	r5, r5, r2
 8017a0a:	68a3      	ldr	r3, [r4, #8]
 8017a0c:	6922      	ldr	r2, [r4, #16]
 8017a0e:	bf0c      	ite	eq
 8017a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a14:	2500      	movne	r5, #0
 8017a16:	4293      	cmp	r3, r2
 8017a18:	bfc4      	itt	gt
 8017a1a:	1a9b      	subgt	r3, r3, r2
 8017a1c:	18ed      	addgt	r5, r5, r3
 8017a1e:	2600      	movs	r6, #0
 8017a20:	341a      	adds	r4, #26
 8017a22:	42b5      	cmp	r5, r6
 8017a24:	d11a      	bne.n	8017a5c <_printf_common+0xc8>
 8017a26:	2000      	movs	r0, #0
 8017a28:	e008      	b.n	8017a3c <_printf_common+0xa8>
 8017a2a:	2301      	movs	r3, #1
 8017a2c:	4652      	mov	r2, sl
 8017a2e:	4649      	mov	r1, r9
 8017a30:	4638      	mov	r0, r7
 8017a32:	47c0      	blx	r8
 8017a34:	3001      	adds	r0, #1
 8017a36:	d103      	bne.n	8017a40 <_printf_common+0xac>
 8017a38:	f04f 30ff 	mov.w	r0, #4294967295
 8017a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a40:	3501      	adds	r5, #1
 8017a42:	e7c6      	b.n	80179d2 <_printf_common+0x3e>
 8017a44:	18e1      	adds	r1, r4, r3
 8017a46:	1c5a      	adds	r2, r3, #1
 8017a48:	2030      	movs	r0, #48	; 0x30
 8017a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a4e:	4422      	add	r2, r4
 8017a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a58:	3302      	adds	r3, #2
 8017a5a:	e7c7      	b.n	80179ec <_printf_common+0x58>
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	4622      	mov	r2, r4
 8017a60:	4649      	mov	r1, r9
 8017a62:	4638      	mov	r0, r7
 8017a64:	47c0      	blx	r8
 8017a66:	3001      	adds	r0, #1
 8017a68:	d0e6      	beq.n	8017a38 <_printf_common+0xa4>
 8017a6a:	3601      	adds	r6, #1
 8017a6c:	e7d9      	b.n	8017a22 <_printf_common+0x8e>
	...

08017a70 <_printf_i>:
 8017a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a74:	7e0f      	ldrb	r7, [r1, #24]
 8017a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a78:	2f78      	cmp	r7, #120	; 0x78
 8017a7a:	4691      	mov	r9, r2
 8017a7c:	4680      	mov	r8, r0
 8017a7e:	460c      	mov	r4, r1
 8017a80:	469a      	mov	sl, r3
 8017a82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017a86:	d807      	bhi.n	8017a98 <_printf_i+0x28>
 8017a88:	2f62      	cmp	r7, #98	; 0x62
 8017a8a:	d80a      	bhi.n	8017aa2 <_printf_i+0x32>
 8017a8c:	2f00      	cmp	r7, #0
 8017a8e:	f000 80d8 	beq.w	8017c42 <_printf_i+0x1d2>
 8017a92:	2f58      	cmp	r7, #88	; 0x58
 8017a94:	f000 80a3 	beq.w	8017bde <_printf_i+0x16e>
 8017a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017aa0:	e03a      	b.n	8017b18 <_printf_i+0xa8>
 8017aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017aa6:	2b15      	cmp	r3, #21
 8017aa8:	d8f6      	bhi.n	8017a98 <_printf_i+0x28>
 8017aaa:	a101      	add	r1, pc, #4	; (adr r1, 8017ab0 <_printf_i+0x40>)
 8017aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ab0:	08017b09 	.word	0x08017b09
 8017ab4:	08017b1d 	.word	0x08017b1d
 8017ab8:	08017a99 	.word	0x08017a99
 8017abc:	08017a99 	.word	0x08017a99
 8017ac0:	08017a99 	.word	0x08017a99
 8017ac4:	08017a99 	.word	0x08017a99
 8017ac8:	08017b1d 	.word	0x08017b1d
 8017acc:	08017a99 	.word	0x08017a99
 8017ad0:	08017a99 	.word	0x08017a99
 8017ad4:	08017a99 	.word	0x08017a99
 8017ad8:	08017a99 	.word	0x08017a99
 8017adc:	08017c29 	.word	0x08017c29
 8017ae0:	08017b4d 	.word	0x08017b4d
 8017ae4:	08017c0b 	.word	0x08017c0b
 8017ae8:	08017a99 	.word	0x08017a99
 8017aec:	08017a99 	.word	0x08017a99
 8017af0:	08017c4b 	.word	0x08017c4b
 8017af4:	08017a99 	.word	0x08017a99
 8017af8:	08017b4d 	.word	0x08017b4d
 8017afc:	08017a99 	.word	0x08017a99
 8017b00:	08017a99 	.word	0x08017a99
 8017b04:	08017c13 	.word	0x08017c13
 8017b08:	682b      	ldr	r3, [r5, #0]
 8017b0a:	1d1a      	adds	r2, r3, #4
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	602a      	str	r2, [r5, #0]
 8017b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b18:	2301      	movs	r3, #1
 8017b1a:	e0a3      	b.n	8017c64 <_printf_i+0x1f4>
 8017b1c:	6820      	ldr	r0, [r4, #0]
 8017b1e:	6829      	ldr	r1, [r5, #0]
 8017b20:	0606      	lsls	r6, r0, #24
 8017b22:	f101 0304 	add.w	r3, r1, #4
 8017b26:	d50a      	bpl.n	8017b3e <_printf_i+0xce>
 8017b28:	680e      	ldr	r6, [r1, #0]
 8017b2a:	602b      	str	r3, [r5, #0]
 8017b2c:	2e00      	cmp	r6, #0
 8017b2e:	da03      	bge.n	8017b38 <_printf_i+0xc8>
 8017b30:	232d      	movs	r3, #45	; 0x2d
 8017b32:	4276      	negs	r6, r6
 8017b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b38:	485e      	ldr	r0, [pc, #376]	; (8017cb4 <_printf_i+0x244>)
 8017b3a:	230a      	movs	r3, #10
 8017b3c:	e019      	b.n	8017b72 <_printf_i+0x102>
 8017b3e:	680e      	ldr	r6, [r1, #0]
 8017b40:	602b      	str	r3, [r5, #0]
 8017b42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017b46:	bf18      	it	ne
 8017b48:	b236      	sxthne	r6, r6
 8017b4a:	e7ef      	b.n	8017b2c <_printf_i+0xbc>
 8017b4c:	682b      	ldr	r3, [r5, #0]
 8017b4e:	6820      	ldr	r0, [r4, #0]
 8017b50:	1d19      	adds	r1, r3, #4
 8017b52:	6029      	str	r1, [r5, #0]
 8017b54:	0601      	lsls	r1, r0, #24
 8017b56:	d501      	bpl.n	8017b5c <_printf_i+0xec>
 8017b58:	681e      	ldr	r6, [r3, #0]
 8017b5a:	e002      	b.n	8017b62 <_printf_i+0xf2>
 8017b5c:	0646      	lsls	r6, r0, #25
 8017b5e:	d5fb      	bpl.n	8017b58 <_printf_i+0xe8>
 8017b60:	881e      	ldrh	r6, [r3, #0]
 8017b62:	4854      	ldr	r0, [pc, #336]	; (8017cb4 <_printf_i+0x244>)
 8017b64:	2f6f      	cmp	r7, #111	; 0x6f
 8017b66:	bf0c      	ite	eq
 8017b68:	2308      	moveq	r3, #8
 8017b6a:	230a      	movne	r3, #10
 8017b6c:	2100      	movs	r1, #0
 8017b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b72:	6865      	ldr	r5, [r4, #4]
 8017b74:	60a5      	str	r5, [r4, #8]
 8017b76:	2d00      	cmp	r5, #0
 8017b78:	bfa2      	ittt	ge
 8017b7a:	6821      	ldrge	r1, [r4, #0]
 8017b7c:	f021 0104 	bicge.w	r1, r1, #4
 8017b80:	6021      	strge	r1, [r4, #0]
 8017b82:	b90e      	cbnz	r6, 8017b88 <_printf_i+0x118>
 8017b84:	2d00      	cmp	r5, #0
 8017b86:	d04d      	beq.n	8017c24 <_printf_i+0x1b4>
 8017b88:	4615      	mov	r5, r2
 8017b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8017b92:	5dc7      	ldrb	r7, [r0, r7]
 8017b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017b98:	4637      	mov	r7, r6
 8017b9a:	42bb      	cmp	r3, r7
 8017b9c:	460e      	mov	r6, r1
 8017b9e:	d9f4      	bls.n	8017b8a <_printf_i+0x11a>
 8017ba0:	2b08      	cmp	r3, #8
 8017ba2:	d10b      	bne.n	8017bbc <_printf_i+0x14c>
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	07de      	lsls	r6, r3, #31
 8017ba8:	d508      	bpl.n	8017bbc <_printf_i+0x14c>
 8017baa:	6923      	ldr	r3, [r4, #16]
 8017bac:	6861      	ldr	r1, [r4, #4]
 8017bae:	4299      	cmp	r1, r3
 8017bb0:	bfde      	ittt	le
 8017bb2:	2330      	movle	r3, #48	; 0x30
 8017bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017bbc:	1b52      	subs	r2, r2, r5
 8017bbe:	6122      	str	r2, [r4, #16]
 8017bc0:	f8cd a000 	str.w	sl, [sp]
 8017bc4:	464b      	mov	r3, r9
 8017bc6:	aa03      	add	r2, sp, #12
 8017bc8:	4621      	mov	r1, r4
 8017bca:	4640      	mov	r0, r8
 8017bcc:	f7ff fee2 	bl	8017994 <_printf_common>
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	d14c      	bne.n	8017c6e <_printf_i+0x1fe>
 8017bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017bd8:	b004      	add	sp, #16
 8017bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bde:	4835      	ldr	r0, [pc, #212]	; (8017cb4 <_printf_i+0x244>)
 8017be0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017be4:	6829      	ldr	r1, [r5, #0]
 8017be6:	6823      	ldr	r3, [r4, #0]
 8017be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8017bec:	6029      	str	r1, [r5, #0]
 8017bee:	061d      	lsls	r5, r3, #24
 8017bf0:	d514      	bpl.n	8017c1c <_printf_i+0x1ac>
 8017bf2:	07df      	lsls	r7, r3, #31
 8017bf4:	bf44      	itt	mi
 8017bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8017bfa:	6023      	strmi	r3, [r4, #0]
 8017bfc:	b91e      	cbnz	r6, 8017c06 <_printf_i+0x196>
 8017bfe:	6823      	ldr	r3, [r4, #0]
 8017c00:	f023 0320 	bic.w	r3, r3, #32
 8017c04:	6023      	str	r3, [r4, #0]
 8017c06:	2310      	movs	r3, #16
 8017c08:	e7b0      	b.n	8017b6c <_printf_i+0xfc>
 8017c0a:	6823      	ldr	r3, [r4, #0]
 8017c0c:	f043 0320 	orr.w	r3, r3, #32
 8017c10:	6023      	str	r3, [r4, #0]
 8017c12:	2378      	movs	r3, #120	; 0x78
 8017c14:	4828      	ldr	r0, [pc, #160]	; (8017cb8 <_printf_i+0x248>)
 8017c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017c1a:	e7e3      	b.n	8017be4 <_printf_i+0x174>
 8017c1c:	0659      	lsls	r1, r3, #25
 8017c1e:	bf48      	it	mi
 8017c20:	b2b6      	uxthmi	r6, r6
 8017c22:	e7e6      	b.n	8017bf2 <_printf_i+0x182>
 8017c24:	4615      	mov	r5, r2
 8017c26:	e7bb      	b.n	8017ba0 <_printf_i+0x130>
 8017c28:	682b      	ldr	r3, [r5, #0]
 8017c2a:	6826      	ldr	r6, [r4, #0]
 8017c2c:	6961      	ldr	r1, [r4, #20]
 8017c2e:	1d18      	adds	r0, r3, #4
 8017c30:	6028      	str	r0, [r5, #0]
 8017c32:	0635      	lsls	r5, r6, #24
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	d501      	bpl.n	8017c3c <_printf_i+0x1cc>
 8017c38:	6019      	str	r1, [r3, #0]
 8017c3a:	e002      	b.n	8017c42 <_printf_i+0x1d2>
 8017c3c:	0670      	lsls	r0, r6, #25
 8017c3e:	d5fb      	bpl.n	8017c38 <_printf_i+0x1c8>
 8017c40:	8019      	strh	r1, [r3, #0]
 8017c42:	2300      	movs	r3, #0
 8017c44:	6123      	str	r3, [r4, #16]
 8017c46:	4615      	mov	r5, r2
 8017c48:	e7ba      	b.n	8017bc0 <_printf_i+0x150>
 8017c4a:	682b      	ldr	r3, [r5, #0]
 8017c4c:	1d1a      	adds	r2, r3, #4
 8017c4e:	602a      	str	r2, [r5, #0]
 8017c50:	681d      	ldr	r5, [r3, #0]
 8017c52:	6862      	ldr	r2, [r4, #4]
 8017c54:	2100      	movs	r1, #0
 8017c56:	4628      	mov	r0, r5
 8017c58:	f7e8 fb72 	bl	8000340 <memchr>
 8017c5c:	b108      	cbz	r0, 8017c62 <_printf_i+0x1f2>
 8017c5e:	1b40      	subs	r0, r0, r5
 8017c60:	6060      	str	r0, [r4, #4]
 8017c62:	6863      	ldr	r3, [r4, #4]
 8017c64:	6123      	str	r3, [r4, #16]
 8017c66:	2300      	movs	r3, #0
 8017c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c6c:	e7a8      	b.n	8017bc0 <_printf_i+0x150>
 8017c6e:	6923      	ldr	r3, [r4, #16]
 8017c70:	462a      	mov	r2, r5
 8017c72:	4649      	mov	r1, r9
 8017c74:	4640      	mov	r0, r8
 8017c76:	47d0      	blx	sl
 8017c78:	3001      	adds	r0, #1
 8017c7a:	d0ab      	beq.n	8017bd4 <_printf_i+0x164>
 8017c7c:	6823      	ldr	r3, [r4, #0]
 8017c7e:	079b      	lsls	r3, r3, #30
 8017c80:	d413      	bmi.n	8017caa <_printf_i+0x23a>
 8017c82:	68e0      	ldr	r0, [r4, #12]
 8017c84:	9b03      	ldr	r3, [sp, #12]
 8017c86:	4298      	cmp	r0, r3
 8017c88:	bfb8      	it	lt
 8017c8a:	4618      	movlt	r0, r3
 8017c8c:	e7a4      	b.n	8017bd8 <_printf_i+0x168>
 8017c8e:	2301      	movs	r3, #1
 8017c90:	4632      	mov	r2, r6
 8017c92:	4649      	mov	r1, r9
 8017c94:	4640      	mov	r0, r8
 8017c96:	47d0      	blx	sl
 8017c98:	3001      	adds	r0, #1
 8017c9a:	d09b      	beq.n	8017bd4 <_printf_i+0x164>
 8017c9c:	3501      	adds	r5, #1
 8017c9e:	68e3      	ldr	r3, [r4, #12]
 8017ca0:	9903      	ldr	r1, [sp, #12]
 8017ca2:	1a5b      	subs	r3, r3, r1
 8017ca4:	42ab      	cmp	r3, r5
 8017ca6:	dcf2      	bgt.n	8017c8e <_printf_i+0x21e>
 8017ca8:	e7eb      	b.n	8017c82 <_printf_i+0x212>
 8017caa:	2500      	movs	r5, #0
 8017cac:	f104 0619 	add.w	r6, r4, #25
 8017cb0:	e7f5      	b.n	8017c9e <_printf_i+0x22e>
 8017cb2:	bf00      	nop
 8017cb4:	0801c628 	.word	0x0801c628
 8017cb8:	0801c639 	.word	0x0801c639

08017cbc <_scanf_float>:
 8017cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc0:	b087      	sub	sp, #28
 8017cc2:	4617      	mov	r7, r2
 8017cc4:	9303      	str	r3, [sp, #12]
 8017cc6:	688b      	ldr	r3, [r1, #8]
 8017cc8:	1e5a      	subs	r2, r3, #1
 8017cca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017cce:	bf83      	ittte	hi
 8017cd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017cd4:	195b      	addhi	r3, r3, r5
 8017cd6:	9302      	strhi	r3, [sp, #8]
 8017cd8:	2300      	movls	r3, #0
 8017cda:	bf86      	itte	hi
 8017cdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017ce0:	608b      	strhi	r3, [r1, #8]
 8017ce2:	9302      	strls	r3, [sp, #8]
 8017ce4:	680b      	ldr	r3, [r1, #0]
 8017ce6:	468b      	mov	fp, r1
 8017ce8:	2500      	movs	r5, #0
 8017cea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017cee:	f84b 3b1c 	str.w	r3, [fp], #28
 8017cf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017cf6:	4680      	mov	r8, r0
 8017cf8:	460c      	mov	r4, r1
 8017cfa:	465e      	mov	r6, fp
 8017cfc:	46aa      	mov	sl, r5
 8017cfe:	46a9      	mov	r9, r5
 8017d00:	9501      	str	r5, [sp, #4]
 8017d02:	68a2      	ldr	r2, [r4, #8]
 8017d04:	b152      	cbz	r2, 8017d1c <_scanf_float+0x60>
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	2b4e      	cmp	r3, #78	; 0x4e
 8017d0c:	d864      	bhi.n	8017dd8 <_scanf_float+0x11c>
 8017d0e:	2b40      	cmp	r3, #64	; 0x40
 8017d10:	d83c      	bhi.n	8017d8c <_scanf_float+0xd0>
 8017d12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017d16:	b2c8      	uxtb	r0, r1
 8017d18:	280e      	cmp	r0, #14
 8017d1a:	d93a      	bls.n	8017d92 <_scanf_float+0xd6>
 8017d1c:	f1b9 0f00 	cmp.w	r9, #0
 8017d20:	d003      	beq.n	8017d2a <_scanf_float+0x6e>
 8017d22:	6823      	ldr	r3, [r4, #0]
 8017d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017d28:	6023      	str	r3, [r4, #0]
 8017d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d2e:	f1ba 0f01 	cmp.w	sl, #1
 8017d32:	f200 8113 	bhi.w	8017f5c <_scanf_float+0x2a0>
 8017d36:	455e      	cmp	r6, fp
 8017d38:	f200 8105 	bhi.w	8017f46 <_scanf_float+0x28a>
 8017d3c:	2501      	movs	r5, #1
 8017d3e:	4628      	mov	r0, r5
 8017d40:	b007      	add	sp, #28
 8017d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017d4a:	2a0d      	cmp	r2, #13
 8017d4c:	d8e6      	bhi.n	8017d1c <_scanf_float+0x60>
 8017d4e:	a101      	add	r1, pc, #4	; (adr r1, 8017d54 <_scanf_float+0x98>)
 8017d50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017d54:	08017e93 	.word	0x08017e93
 8017d58:	08017d1d 	.word	0x08017d1d
 8017d5c:	08017d1d 	.word	0x08017d1d
 8017d60:	08017d1d 	.word	0x08017d1d
 8017d64:	08017ef3 	.word	0x08017ef3
 8017d68:	08017ecb 	.word	0x08017ecb
 8017d6c:	08017d1d 	.word	0x08017d1d
 8017d70:	08017d1d 	.word	0x08017d1d
 8017d74:	08017ea1 	.word	0x08017ea1
 8017d78:	08017d1d 	.word	0x08017d1d
 8017d7c:	08017d1d 	.word	0x08017d1d
 8017d80:	08017d1d 	.word	0x08017d1d
 8017d84:	08017d1d 	.word	0x08017d1d
 8017d88:	08017e59 	.word	0x08017e59
 8017d8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017d90:	e7db      	b.n	8017d4a <_scanf_float+0x8e>
 8017d92:	290e      	cmp	r1, #14
 8017d94:	d8c2      	bhi.n	8017d1c <_scanf_float+0x60>
 8017d96:	a001      	add	r0, pc, #4	; (adr r0, 8017d9c <_scanf_float+0xe0>)
 8017d98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017d9c:	08017e4b 	.word	0x08017e4b
 8017da0:	08017d1d 	.word	0x08017d1d
 8017da4:	08017e4b 	.word	0x08017e4b
 8017da8:	08017edf 	.word	0x08017edf
 8017dac:	08017d1d 	.word	0x08017d1d
 8017db0:	08017df9 	.word	0x08017df9
 8017db4:	08017e35 	.word	0x08017e35
 8017db8:	08017e35 	.word	0x08017e35
 8017dbc:	08017e35 	.word	0x08017e35
 8017dc0:	08017e35 	.word	0x08017e35
 8017dc4:	08017e35 	.word	0x08017e35
 8017dc8:	08017e35 	.word	0x08017e35
 8017dcc:	08017e35 	.word	0x08017e35
 8017dd0:	08017e35 	.word	0x08017e35
 8017dd4:	08017e35 	.word	0x08017e35
 8017dd8:	2b6e      	cmp	r3, #110	; 0x6e
 8017dda:	d809      	bhi.n	8017df0 <_scanf_float+0x134>
 8017ddc:	2b60      	cmp	r3, #96	; 0x60
 8017dde:	d8b2      	bhi.n	8017d46 <_scanf_float+0x8a>
 8017de0:	2b54      	cmp	r3, #84	; 0x54
 8017de2:	d077      	beq.n	8017ed4 <_scanf_float+0x218>
 8017de4:	2b59      	cmp	r3, #89	; 0x59
 8017de6:	d199      	bne.n	8017d1c <_scanf_float+0x60>
 8017de8:	2d07      	cmp	r5, #7
 8017dea:	d197      	bne.n	8017d1c <_scanf_float+0x60>
 8017dec:	2508      	movs	r5, #8
 8017dee:	e029      	b.n	8017e44 <_scanf_float+0x188>
 8017df0:	2b74      	cmp	r3, #116	; 0x74
 8017df2:	d06f      	beq.n	8017ed4 <_scanf_float+0x218>
 8017df4:	2b79      	cmp	r3, #121	; 0x79
 8017df6:	e7f6      	b.n	8017de6 <_scanf_float+0x12a>
 8017df8:	6821      	ldr	r1, [r4, #0]
 8017dfa:	05c8      	lsls	r0, r1, #23
 8017dfc:	d51a      	bpl.n	8017e34 <_scanf_float+0x178>
 8017dfe:	9b02      	ldr	r3, [sp, #8]
 8017e00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017e04:	6021      	str	r1, [r4, #0]
 8017e06:	f109 0901 	add.w	r9, r9, #1
 8017e0a:	b11b      	cbz	r3, 8017e14 <_scanf_float+0x158>
 8017e0c:	3b01      	subs	r3, #1
 8017e0e:	3201      	adds	r2, #1
 8017e10:	9302      	str	r3, [sp, #8]
 8017e12:	60a2      	str	r2, [r4, #8]
 8017e14:	68a3      	ldr	r3, [r4, #8]
 8017e16:	3b01      	subs	r3, #1
 8017e18:	60a3      	str	r3, [r4, #8]
 8017e1a:	6923      	ldr	r3, [r4, #16]
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	6123      	str	r3, [r4, #16]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	3b01      	subs	r3, #1
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	607b      	str	r3, [r7, #4]
 8017e28:	f340 8084 	ble.w	8017f34 <_scanf_float+0x278>
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	3301      	adds	r3, #1
 8017e30:	603b      	str	r3, [r7, #0]
 8017e32:	e766      	b.n	8017d02 <_scanf_float+0x46>
 8017e34:	eb1a 0f05 	cmn.w	sl, r5
 8017e38:	f47f af70 	bne.w	8017d1c <_scanf_float+0x60>
 8017e3c:	6822      	ldr	r2, [r4, #0]
 8017e3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017e42:	6022      	str	r2, [r4, #0]
 8017e44:	f806 3b01 	strb.w	r3, [r6], #1
 8017e48:	e7e4      	b.n	8017e14 <_scanf_float+0x158>
 8017e4a:	6822      	ldr	r2, [r4, #0]
 8017e4c:	0610      	lsls	r0, r2, #24
 8017e4e:	f57f af65 	bpl.w	8017d1c <_scanf_float+0x60>
 8017e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017e56:	e7f4      	b.n	8017e42 <_scanf_float+0x186>
 8017e58:	f1ba 0f00 	cmp.w	sl, #0
 8017e5c:	d10e      	bne.n	8017e7c <_scanf_float+0x1c0>
 8017e5e:	f1b9 0f00 	cmp.w	r9, #0
 8017e62:	d10e      	bne.n	8017e82 <_scanf_float+0x1c6>
 8017e64:	6822      	ldr	r2, [r4, #0]
 8017e66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017e6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017e6e:	d108      	bne.n	8017e82 <_scanf_float+0x1c6>
 8017e70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017e74:	6022      	str	r2, [r4, #0]
 8017e76:	f04f 0a01 	mov.w	sl, #1
 8017e7a:	e7e3      	b.n	8017e44 <_scanf_float+0x188>
 8017e7c:	f1ba 0f02 	cmp.w	sl, #2
 8017e80:	d055      	beq.n	8017f2e <_scanf_float+0x272>
 8017e82:	2d01      	cmp	r5, #1
 8017e84:	d002      	beq.n	8017e8c <_scanf_float+0x1d0>
 8017e86:	2d04      	cmp	r5, #4
 8017e88:	f47f af48 	bne.w	8017d1c <_scanf_float+0x60>
 8017e8c:	3501      	adds	r5, #1
 8017e8e:	b2ed      	uxtb	r5, r5
 8017e90:	e7d8      	b.n	8017e44 <_scanf_float+0x188>
 8017e92:	f1ba 0f01 	cmp.w	sl, #1
 8017e96:	f47f af41 	bne.w	8017d1c <_scanf_float+0x60>
 8017e9a:	f04f 0a02 	mov.w	sl, #2
 8017e9e:	e7d1      	b.n	8017e44 <_scanf_float+0x188>
 8017ea0:	b97d      	cbnz	r5, 8017ec2 <_scanf_float+0x206>
 8017ea2:	f1b9 0f00 	cmp.w	r9, #0
 8017ea6:	f47f af3c 	bne.w	8017d22 <_scanf_float+0x66>
 8017eaa:	6822      	ldr	r2, [r4, #0]
 8017eac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017eb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017eb4:	f47f af39 	bne.w	8017d2a <_scanf_float+0x6e>
 8017eb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017ebc:	6022      	str	r2, [r4, #0]
 8017ebe:	2501      	movs	r5, #1
 8017ec0:	e7c0      	b.n	8017e44 <_scanf_float+0x188>
 8017ec2:	2d03      	cmp	r5, #3
 8017ec4:	d0e2      	beq.n	8017e8c <_scanf_float+0x1d0>
 8017ec6:	2d05      	cmp	r5, #5
 8017ec8:	e7de      	b.n	8017e88 <_scanf_float+0x1cc>
 8017eca:	2d02      	cmp	r5, #2
 8017ecc:	f47f af26 	bne.w	8017d1c <_scanf_float+0x60>
 8017ed0:	2503      	movs	r5, #3
 8017ed2:	e7b7      	b.n	8017e44 <_scanf_float+0x188>
 8017ed4:	2d06      	cmp	r5, #6
 8017ed6:	f47f af21 	bne.w	8017d1c <_scanf_float+0x60>
 8017eda:	2507      	movs	r5, #7
 8017edc:	e7b2      	b.n	8017e44 <_scanf_float+0x188>
 8017ede:	6822      	ldr	r2, [r4, #0]
 8017ee0:	0591      	lsls	r1, r2, #22
 8017ee2:	f57f af1b 	bpl.w	8017d1c <_scanf_float+0x60>
 8017ee6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017eea:	6022      	str	r2, [r4, #0]
 8017eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8017ef0:	e7a8      	b.n	8017e44 <_scanf_float+0x188>
 8017ef2:	6822      	ldr	r2, [r4, #0]
 8017ef4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017ef8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017efc:	d006      	beq.n	8017f0c <_scanf_float+0x250>
 8017efe:	0550      	lsls	r0, r2, #21
 8017f00:	f57f af0c 	bpl.w	8017d1c <_scanf_float+0x60>
 8017f04:	f1b9 0f00 	cmp.w	r9, #0
 8017f08:	f43f af0f 	beq.w	8017d2a <_scanf_float+0x6e>
 8017f0c:	0591      	lsls	r1, r2, #22
 8017f0e:	bf58      	it	pl
 8017f10:	9901      	ldrpl	r1, [sp, #4]
 8017f12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017f16:	bf58      	it	pl
 8017f18:	eba9 0101 	subpl.w	r1, r9, r1
 8017f1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017f20:	bf58      	it	pl
 8017f22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017f26:	6022      	str	r2, [r4, #0]
 8017f28:	f04f 0900 	mov.w	r9, #0
 8017f2c:	e78a      	b.n	8017e44 <_scanf_float+0x188>
 8017f2e:	f04f 0a03 	mov.w	sl, #3
 8017f32:	e787      	b.n	8017e44 <_scanf_float+0x188>
 8017f34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f38:	4639      	mov	r1, r7
 8017f3a:	4640      	mov	r0, r8
 8017f3c:	4798      	blx	r3
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	f43f aedf 	beq.w	8017d02 <_scanf_float+0x46>
 8017f44:	e6ea      	b.n	8017d1c <_scanf_float+0x60>
 8017f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f4e:	463a      	mov	r2, r7
 8017f50:	4640      	mov	r0, r8
 8017f52:	4798      	blx	r3
 8017f54:	6923      	ldr	r3, [r4, #16]
 8017f56:	3b01      	subs	r3, #1
 8017f58:	6123      	str	r3, [r4, #16]
 8017f5a:	e6ec      	b.n	8017d36 <_scanf_float+0x7a>
 8017f5c:	1e6b      	subs	r3, r5, #1
 8017f5e:	2b06      	cmp	r3, #6
 8017f60:	d825      	bhi.n	8017fae <_scanf_float+0x2f2>
 8017f62:	2d02      	cmp	r5, #2
 8017f64:	d836      	bhi.n	8017fd4 <_scanf_float+0x318>
 8017f66:	455e      	cmp	r6, fp
 8017f68:	f67f aee8 	bls.w	8017d3c <_scanf_float+0x80>
 8017f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017f74:	463a      	mov	r2, r7
 8017f76:	4640      	mov	r0, r8
 8017f78:	4798      	blx	r3
 8017f7a:	6923      	ldr	r3, [r4, #16]
 8017f7c:	3b01      	subs	r3, #1
 8017f7e:	6123      	str	r3, [r4, #16]
 8017f80:	e7f1      	b.n	8017f66 <_scanf_float+0x2aa>
 8017f82:	9802      	ldr	r0, [sp, #8]
 8017f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017f8c:	9002      	str	r0, [sp, #8]
 8017f8e:	463a      	mov	r2, r7
 8017f90:	4640      	mov	r0, r8
 8017f92:	4798      	blx	r3
 8017f94:	6923      	ldr	r3, [r4, #16]
 8017f96:	3b01      	subs	r3, #1
 8017f98:	6123      	str	r3, [r4, #16]
 8017f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f9e:	fa5f fa8a 	uxtb.w	sl, sl
 8017fa2:	f1ba 0f02 	cmp.w	sl, #2
 8017fa6:	d1ec      	bne.n	8017f82 <_scanf_float+0x2c6>
 8017fa8:	3d03      	subs	r5, #3
 8017faa:	b2ed      	uxtb	r5, r5
 8017fac:	1b76      	subs	r6, r6, r5
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	05da      	lsls	r2, r3, #23
 8017fb2:	d52f      	bpl.n	8018014 <_scanf_float+0x358>
 8017fb4:	055b      	lsls	r3, r3, #21
 8017fb6:	d510      	bpl.n	8017fda <_scanf_float+0x31e>
 8017fb8:	455e      	cmp	r6, fp
 8017fba:	f67f aebf 	bls.w	8017d3c <_scanf_float+0x80>
 8017fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017fc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017fc6:	463a      	mov	r2, r7
 8017fc8:	4640      	mov	r0, r8
 8017fca:	4798      	blx	r3
 8017fcc:	6923      	ldr	r3, [r4, #16]
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	6123      	str	r3, [r4, #16]
 8017fd2:	e7f1      	b.n	8017fb8 <_scanf_float+0x2fc>
 8017fd4:	46aa      	mov	sl, r5
 8017fd6:	9602      	str	r6, [sp, #8]
 8017fd8:	e7df      	b.n	8017f9a <_scanf_float+0x2de>
 8017fda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017fde:	6923      	ldr	r3, [r4, #16]
 8017fe0:	2965      	cmp	r1, #101	; 0x65
 8017fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8017fe6:	f106 35ff 	add.w	r5, r6, #4294967295
 8017fea:	6123      	str	r3, [r4, #16]
 8017fec:	d00c      	beq.n	8018008 <_scanf_float+0x34c>
 8017fee:	2945      	cmp	r1, #69	; 0x45
 8017ff0:	d00a      	beq.n	8018008 <_scanf_float+0x34c>
 8017ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ff6:	463a      	mov	r2, r7
 8017ff8:	4640      	mov	r0, r8
 8017ffa:	4798      	blx	r3
 8017ffc:	6923      	ldr	r3, [r4, #16]
 8017ffe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018002:	3b01      	subs	r3, #1
 8018004:	1eb5      	subs	r5, r6, #2
 8018006:	6123      	str	r3, [r4, #16]
 8018008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801800c:	463a      	mov	r2, r7
 801800e:	4640      	mov	r0, r8
 8018010:	4798      	blx	r3
 8018012:	462e      	mov	r6, r5
 8018014:	6825      	ldr	r5, [r4, #0]
 8018016:	f015 0510 	ands.w	r5, r5, #16
 801801a:	d14e      	bne.n	80180ba <_scanf_float+0x3fe>
 801801c:	7035      	strb	r5, [r6, #0]
 801801e:	6823      	ldr	r3, [r4, #0]
 8018020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018028:	d119      	bne.n	801805e <_scanf_float+0x3a2>
 801802a:	9b01      	ldr	r3, [sp, #4]
 801802c:	454b      	cmp	r3, r9
 801802e:	eba3 0209 	sub.w	r2, r3, r9
 8018032:	d121      	bne.n	8018078 <_scanf_float+0x3bc>
 8018034:	2200      	movs	r2, #0
 8018036:	4659      	mov	r1, fp
 8018038:	4640      	mov	r0, r8
 801803a:	f000 feaf 	bl	8018d9c <_strtod_r>
 801803e:	6822      	ldr	r2, [r4, #0]
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	f012 0f02 	tst.w	r2, #2
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	d021      	beq.n	801808e <_scanf_float+0x3d2>
 801804a:	9903      	ldr	r1, [sp, #12]
 801804c:	1d1a      	adds	r2, r3, #4
 801804e:	600a      	str	r2, [r1, #0]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	ed83 0b00 	vstr	d0, [r3]
 8018056:	68e3      	ldr	r3, [r4, #12]
 8018058:	3301      	adds	r3, #1
 801805a:	60e3      	str	r3, [r4, #12]
 801805c:	e66f      	b.n	8017d3e <_scanf_float+0x82>
 801805e:	9b04      	ldr	r3, [sp, #16]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d0e7      	beq.n	8018034 <_scanf_float+0x378>
 8018064:	9905      	ldr	r1, [sp, #20]
 8018066:	230a      	movs	r3, #10
 8018068:	462a      	mov	r2, r5
 801806a:	3101      	adds	r1, #1
 801806c:	4640      	mov	r0, r8
 801806e:	f000 ff1d 	bl	8018eac <_strtol_r>
 8018072:	9b04      	ldr	r3, [sp, #16]
 8018074:	9e05      	ldr	r6, [sp, #20]
 8018076:	1ac2      	subs	r2, r0, r3
 8018078:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801807c:	429e      	cmp	r6, r3
 801807e:	bf28      	it	cs
 8018080:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018084:	490e      	ldr	r1, [pc, #56]	; (80180c0 <_scanf_float+0x404>)
 8018086:	4630      	mov	r0, r6
 8018088:	f000 f824 	bl	80180d4 <siprintf>
 801808c:	e7d2      	b.n	8018034 <_scanf_float+0x378>
 801808e:	9903      	ldr	r1, [sp, #12]
 8018090:	f012 0f04 	tst.w	r2, #4
 8018094:	f103 0204 	add.w	r2, r3, #4
 8018098:	600a      	str	r2, [r1, #0]
 801809a:	d1d9      	bne.n	8018050 <_scanf_float+0x394>
 801809c:	eeb4 0b40 	vcmp.f64	d0, d0
 80180a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a4:	681e      	ldr	r6, [r3, #0]
 80180a6:	d705      	bvc.n	80180b4 <_scanf_float+0x3f8>
 80180a8:	4806      	ldr	r0, [pc, #24]	; (80180c4 <_scanf_float+0x408>)
 80180aa:	f000 f80d 	bl	80180c8 <nanf>
 80180ae:	ed86 0a00 	vstr	s0, [r6]
 80180b2:	e7d0      	b.n	8018056 <_scanf_float+0x39a>
 80180b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80180b8:	e7f9      	b.n	80180ae <_scanf_float+0x3f2>
 80180ba:	2500      	movs	r5, #0
 80180bc:	e63f      	b.n	8017d3e <_scanf_float+0x82>
 80180be:	bf00      	nop
 80180c0:	0801c64a 	.word	0x0801c64a
 80180c4:	0801ca6b 	.word	0x0801ca6b

080180c8 <nanf>:
 80180c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80180d0 <nanf+0x8>
 80180cc:	4770      	bx	lr
 80180ce:	bf00      	nop
 80180d0:	7fc00000 	.word	0x7fc00000

080180d4 <siprintf>:
 80180d4:	b40e      	push	{r1, r2, r3}
 80180d6:	b500      	push	{lr}
 80180d8:	b09c      	sub	sp, #112	; 0x70
 80180da:	ab1d      	add	r3, sp, #116	; 0x74
 80180dc:	9002      	str	r0, [sp, #8]
 80180de:	9006      	str	r0, [sp, #24]
 80180e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180e4:	4809      	ldr	r0, [pc, #36]	; (801810c <siprintf+0x38>)
 80180e6:	9107      	str	r1, [sp, #28]
 80180e8:	9104      	str	r1, [sp, #16]
 80180ea:	4909      	ldr	r1, [pc, #36]	; (8018110 <siprintf+0x3c>)
 80180ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80180f0:	9105      	str	r1, [sp, #20]
 80180f2:	6800      	ldr	r0, [r0, #0]
 80180f4:	9301      	str	r3, [sp, #4]
 80180f6:	a902      	add	r1, sp, #8
 80180f8:	f002 fea8 	bl	801ae4c <_svfiprintf_r>
 80180fc:	9b02      	ldr	r3, [sp, #8]
 80180fe:	2200      	movs	r2, #0
 8018100:	701a      	strb	r2, [r3, #0]
 8018102:	b01c      	add	sp, #112	; 0x70
 8018104:	f85d eb04 	ldr.w	lr, [sp], #4
 8018108:	b003      	add	sp, #12
 801810a:	4770      	bx	lr
 801810c:	24000100 	.word	0x24000100
 8018110:	ffff0208 	.word	0xffff0208

08018114 <siscanf>:
 8018114:	b40e      	push	{r1, r2, r3}
 8018116:	b510      	push	{r4, lr}
 8018118:	b09f      	sub	sp, #124	; 0x7c
 801811a:	ac21      	add	r4, sp, #132	; 0x84
 801811c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018120:	f854 2b04 	ldr.w	r2, [r4], #4
 8018124:	9201      	str	r2, [sp, #4]
 8018126:	f8ad 101c 	strh.w	r1, [sp, #28]
 801812a:	9004      	str	r0, [sp, #16]
 801812c:	9008      	str	r0, [sp, #32]
 801812e:	f7e8 f8f9 	bl	8000324 <strlen>
 8018132:	4b0c      	ldr	r3, [pc, #48]	; (8018164 <siscanf+0x50>)
 8018134:	9005      	str	r0, [sp, #20]
 8018136:	9009      	str	r0, [sp, #36]	; 0x24
 8018138:	930d      	str	r3, [sp, #52]	; 0x34
 801813a:	480b      	ldr	r0, [pc, #44]	; (8018168 <siscanf+0x54>)
 801813c:	9a01      	ldr	r2, [sp, #4]
 801813e:	6800      	ldr	r0, [r0, #0]
 8018140:	9403      	str	r4, [sp, #12]
 8018142:	2300      	movs	r3, #0
 8018144:	9311      	str	r3, [sp, #68]	; 0x44
 8018146:	9316      	str	r3, [sp, #88]	; 0x58
 8018148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801814c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018150:	a904      	add	r1, sp, #16
 8018152:	4623      	mov	r3, r4
 8018154:	f002 ffd4 	bl	801b100 <__ssvfiscanf_r>
 8018158:	b01f      	add	sp, #124	; 0x7c
 801815a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801815e:	b003      	add	sp, #12
 8018160:	4770      	bx	lr
 8018162:	bf00      	nop
 8018164:	0801818f 	.word	0x0801818f
 8018168:	24000100 	.word	0x24000100

0801816c <__sread>:
 801816c:	b510      	push	{r4, lr}
 801816e:	460c      	mov	r4, r1
 8018170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018174:	f003 fa8e 	bl	801b694 <_read_r>
 8018178:	2800      	cmp	r0, #0
 801817a:	bfab      	itete	ge
 801817c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801817e:	89a3      	ldrhlt	r3, [r4, #12]
 8018180:	181b      	addge	r3, r3, r0
 8018182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018186:	bfac      	ite	ge
 8018188:	6563      	strge	r3, [r4, #84]	; 0x54
 801818a:	81a3      	strhlt	r3, [r4, #12]
 801818c:	bd10      	pop	{r4, pc}

0801818e <__seofread>:
 801818e:	2000      	movs	r0, #0
 8018190:	4770      	bx	lr

08018192 <__swrite>:
 8018192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018196:	461f      	mov	r7, r3
 8018198:	898b      	ldrh	r3, [r1, #12]
 801819a:	05db      	lsls	r3, r3, #23
 801819c:	4605      	mov	r5, r0
 801819e:	460c      	mov	r4, r1
 80181a0:	4616      	mov	r6, r2
 80181a2:	d505      	bpl.n	80181b0 <__swrite+0x1e>
 80181a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181a8:	2302      	movs	r3, #2
 80181aa:	2200      	movs	r2, #0
 80181ac:	f002 f812 	bl	801a1d4 <_lseek_r>
 80181b0:	89a3      	ldrh	r3, [r4, #12]
 80181b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80181ba:	81a3      	strh	r3, [r4, #12]
 80181bc:	4632      	mov	r2, r6
 80181be:	463b      	mov	r3, r7
 80181c0:	4628      	mov	r0, r5
 80181c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181c6:	f000 be73 	b.w	8018eb0 <_write_r>

080181ca <__sseek>:
 80181ca:	b510      	push	{r4, lr}
 80181cc:	460c      	mov	r4, r1
 80181ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181d2:	f001 ffff 	bl	801a1d4 <_lseek_r>
 80181d6:	1c43      	adds	r3, r0, #1
 80181d8:	89a3      	ldrh	r3, [r4, #12]
 80181da:	bf15      	itete	ne
 80181dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80181de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181e6:	81a3      	strheq	r3, [r4, #12]
 80181e8:	bf18      	it	ne
 80181ea:	81a3      	strhne	r3, [r4, #12]
 80181ec:	bd10      	pop	{r4, pc}

080181ee <__sclose>:
 80181ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181f2:	f000 be6f 	b.w	8018ed4 <_close_r>

080181f6 <sulp>:
 80181f6:	b570      	push	{r4, r5, r6, lr}
 80181f8:	4604      	mov	r4, r0
 80181fa:	460d      	mov	r5, r1
 80181fc:	4616      	mov	r6, r2
 80181fe:	ec45 4b10 	vmov	d0, r4, r5
 8018202:	f002 fb85 	bl	801a910 <__ulp>
 8018206:	b17e      	cbz	r6, 8018228 <sulp+0x32>
 8018208:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801820c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018210:	2b00      	cmp	r3, #0
 8018212:	dd09      	ble.n	8018228 <sulp+0x32>
 8018214:	051b      	lsls	r3, r3, #20
 8018216:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801821a:	2000      	movs	r0, #0
 801821c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8018220:	ec41 0b17 	vmov	d7, r0, r1
 8018224:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018228:	bd70      	pop	{r4, r5, r6, pc}
 801822a:	0000      	movs	r0, r0
 801822c:	0000      	movs	r0, r0
	...

08018230 <_strtod_l>:
 8018230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018234:	ed2d 8b0e 	vpush	{d8-d14}
 8018238:	b097      	sub	sp, #92	; 0x5c
 801823a:	461f      	mov	r7, r3
 801823c:	2300      	movs	r3, #0
 801823e:	9312      	str	r3, [sp, #72]	; 0x48
 8018240:	4ba1      	ldr	r3, [pc, #644]	; (80184c8 <_strtod_l+0x298>)
 8018242:	920d      	str	r2, [sp, #52]	; 0x34
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	9307      	str	r3, [sp, #28]
 8018248:	4604      	mov	r4, r0
 801824a:	4618      	mov	r0, r3
 801824c:	468b      	mov	fp, r1
 801824e:	f7e8 f869 	bl	8000324 <strlen>
 8018252:	f04f 0800 	mov.w	r8, #0
 8018256:	4605      	mov	r5, r0
 8018258:	f04f 0900 	mov.w	r9, #0
 801825c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8018260:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018262:	7813      	ldrb	r3, [r2, #0]
 8018264:	2b2b      	cmp	r3, #43	; 0x2b
 8018266:	d04d      	beq.n	8018304 <_strtod_l+0xd4>
 8018268:	d83a      	bhi.n	80182e0 <_strtod_l+0xb0>
 801826a:	2b0d      	cmp	r3, #13
 801826c:	d833      	bhi.n	80182d6 <_strtod_l+0xa6>
 801826e:	2b08      	cmp	r3, #8
 8018270:	d833      	bhi.n	80182da <_strtod_l+0xaa>
 8018272:	2b00      	cmp	r3, #0
 8018274:	d03d      	beq.n	80182f2 <_strtod_l+0xc2>
 8018276:	2300      	movs	r3, #0
 8018278:	9308      	str	r3, [sp, #32]
 801827a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801827c:	7833      	ldrb	r3, [r6, #0]
 801827e:	2b30      	cmp	r3, #48	; 0x30
 8018280:	f040 80b0 	bne.w	80183e4 <_strtod_l+0x1b4>
 8018284:	7873      	ldrb	r3, [r6, #1]
 8018286:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801828a:	2b58      	cmp	r3, #88	; 0x58
 801828c:	d167      	bne.n	801835e <_strtod_l+0x12e>
 801828e:	9b08      	ldr	r3, [sp, #32]
 8018290:	9301      	str	r3, [sp, #4]
 8018292:	ab12      	add	r3, sp, #72	; 0x48
 8018294:	9702      	str	r7, [sp, #8]
 8018296:	9300      	str	r3, [sp, #0]
 8018298:	4a8c      	ldr	r2, [pc, #560]	; (80184cc <_strtod_l+0x29c>)
 801829a:	ab13      	add	r3, sp, #76	; 0x4c
 801829c:	a911      	add	r1, sp, #68	; 0x44
 801829e:	4620      	mov	r0, r4
 80182a0:	f001 fc8c 	bl	8019bbc <__gethex>
 80182a4:	f010 0507 	ands.w	r5, r0, #7
 80182a8:	4607      	mov	r7, r0
 80182aa:	d005      	beq.n	80182b8 <_strtod_l+0x88>
 80182ac:	2d06      	cmp	r5, #6
 80182ae:	d12b      	bne.n	8018308 <_strtod_l+0xd8>
 80182b0:	3601      	adds	r6, #1
 80182b2:	2300      	movs	r3, #0
 80182b4:	9611      	str	r6, [sp, #68]	; 0x44
 80182b6:	9308      	str	r3, [sp, #32]
 80182b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	f040 854e 	bne.w	8018d5c <_strtod_l+0xb2c>
 80182c0:	9b08      	ldr	r3, [sp, #32]
 80182c2:	b1e3      	cbz	r3, 80182fe <_strtod_l+0xce>
 80182c4:	ec49 8b17 	vmov	d7, r8, r9
 80182c8:	eeb1 0b47 	vneg.f64	d0, d7
 80182cc:	b017      	add	sp, #92	; 0x5c
 80182ce:	ecbd 8b0e 	vpop	{d8-d14}
 80182d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182d6:	2b20      	cmp	r3, #32
 80182d8:	d1cd      	bne.n	8018276 <_strtod_l+0x46>
 80182da:	3201      	adds	r2, #1
 80182dc:	9211      	str	r2, [sp, #68]	; 0x44
 80182de:	e7bf      	b.n	8018260 <_strtod_l+0x30>
 80182e0:	2b2d      	cmp	r3, #45	; 0x2d
 80182e2:	d1c8      	bne.n	8018276 <_strtod_l+0x46>
 80182e4:	2301      	movs	r3, #1
 80182e6:	9308      	str	r3, [sp, #32]
 80182e8:	1c53      	adds	r3, r2, #1
 80182ea:	9311      	str	r3, [sp, #68]	; 0x44
 80182ec:	7853      	ldrb	r3, [r2, #1]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d1c3      	bne.n	801827a <_strtod_l+0x4a>
 80182f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	f040 852d 	bne.w	8018d58 <_strtod_l+0xb28>
 80182fe:	ec49 8b10 	vmov	d0, r8, r9
 8018302:	e7e3      	b.n	80182cc <_strtod_l+0x9c>
 8018304:	2300      	movs	r3, #0
 8018306:	e7ee      	b.n	80182e6 <_strtod_l+0xb6>
 8018308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801830a:	b13a      	cbz	r2, 801831c <_strtod_l+0xec>
 801830c:	2135      	movs	r1, #53	; 0x35
 801830e:	a814      	add	r0, sp, #80	; 0x50
 8018310:	f002 fc06 	bl	801ab20 <__copybits>
 8018314:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018316:	4620      	mov	r0, r4
 8018318:	f001 ffc8 	bl	801a2ac <_Bfree>
 801831c:	3d01      	subs	r5, #1
 801831e:	2d04      	cmp	r5, #4
 8018320:	d806      	bhi.n	8018330 <_strtod_l+0x100>
 8018322:	e8df f005 	tbb	[pc, r5]
 8018326:	030a      	.short	0x030a
 8018328:	1714      	.short	0x1714
 801832a:	0a          	.byte	0x0a
 801832b:	00          	.byte	0x00
 801832c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8018330:	073f      	lsls	r7, r7, #28
 8018332:	d5c1      	bpl.n	80182b8 <_strtod_l+0x88>
 8018334:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8018338:	e7be      	b.n	80182b8 <_strtod_l+0x88>
 801833a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801833e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018340:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018344:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018348:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801834c:	e7f0      	b.n	8018330 <_strtod_l+0x100>
 801834e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80184d0 <_strtod_l+0x2a0>
 8018352:	e7ed      	b.n	8018330 <_strtod_l+0x100>
 8018354:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018358:	f04f 38ff 	mov.w	r8, #4294967295
 801835c:	e7e8      	b.n	8018330 <_strtod_l+0x100>
 801835e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018360:	1c5a      	adds	r2, r3, #1
 8018362:	9211      	str	r2, [sp, #68]	; 0x44
 8018364:	785b      	ldrb	r3, [r3, #1]
 8018366:	2b30      	cmp	r3, #48	; 0x30
 8018368:	d0f9      	beq.n	801835e <_strtod_l+0x12e>
 801836a:	2b00      	cmp	r3, #0
 801836c:	d0a4      	beq.n	80182b8 <_strtod_l+0x88>
 801836e:	2301      	movs	r3, #1
 8018370:	f04f 0a00 	mov.w	sl, #0
 8018374:	9304      	str	r3, [sp, #16]
 8018376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018378:	930a      	str	r3, [sp, #40]	; 0x28
 801837a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801837e:	f8cd a018 	str.w	sl, [sp, #24]
 8018382:	220a      	movs	r2, #10
 8018384:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018386:	7807      	ldrb	r7, [r0, #0]
 8018388:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801838c:	b2d9      	uxtb	r1, r3
 801838e:	2909      	cmp	r1, #9
 8018390:	d92a      	bls.n	80183e8 <_strtod_l+0x1b8>
 8018392:	9907      	ldr	r1, [sp, #28]
 8018394:	462a      	mov	r2, r5
 8018396:	f003 f9df 	bl	801b758 <strncmp>
 801839a:	2800      	cmp	r0, #0
 801839c:	d033      	beq.n	8018406 <_strtod_l+0x1d6>
 801839e:	2000      	movs	r0, #0
 80183a0:	9b06      	ldr	r3, [sp, #24]
 80183a2:	463a      	mov	r2, r7
 80183a4:	4601      	mov	r1, r0
 80183a6:	4607      	mov	r7, r0
 80183a8:	2a65      	cmp	r2, #101	; 0x65
 80183aa:	d001      	beq.n	80183b0 <_strtod_l+0x180>
 80183ac:	2a45      	cmp	r2, #69	; 0x45
 80183ae:	d117      	bne.n	80183e0 <_strtod_l+0x1b0>
 80183b0:	b91b      	cbnz	r3, 80183ba <_strtod_l+0x18a>
 80183b2:	9b04      	ldr	r3, [sp, #16]
 80183b4:	4303      	orrs	r3, r0
 80183b6:	d09c      	beq.n	80182f2 <_strtod_l+0xc2>
 80183b8:	2300      	movs	r3, #0
 80183ba:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80183be:	f10b 0201 	add.w	r2, fp, #1
 80183c2:	9211      	str	r2, [sp, #68]	; 0x44
 80183c4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80183c8:	2a2b      	cmp	r2, #43	; 0x2b
 80183ca:	d071      	beq.n	80184b0 <_strtod_l+0x280>
 80183cc:	2a2d      	cmp	r2, #45	; 0x2d
 80183ce:	d077      	beq.n	80184c0 <_strtod_l+0x290>
 80183d0:	f04f 0e00 	mov.w	lr, #0
 80183d4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80183d8:	2d09      	cmp	r5, #9
 80183da:	d97f      	bls.n	80184dc <_strtod_l+0x2ac>
 80183dc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80183e0:	2500      	movs	r5, #0
 80183e2:	e09b      	b.n	801851c <_strtod_l+0x2ec>
 80183e4:	2300      	movs	r3, #0
 80183e6:	e7c3      	b.n	8018370 <_strtod_l+0x140>
 80183e8:	9906      	ldr	r1, [sp, #24]
 80183ea:	2908      	cmp	r1, #8
 80183ec:	bfdd      	ittte	le
 80183ee:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80183f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80183f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80183f6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80183fa:	9b06      	ldr	r3, [sp, #24]
 80183fc:	3001      	adds	r0, #1
 80183fe:	3301      	adds	r3, #1
 8018400:	9306      	str	r3, [sp, #24]
 8018402:	9011      	str	r0, [sp, #68]	; 0x44
 8018404:	e7be      	b.n	8018384 <_strtod_l+0x154>
 8018406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018408:	195a      	adds	r2, r3, r5
 801840a:	9211      	str	r2, [sp, #68]	; 0x44
 801840c:	5d5a      	ldrb	r2, [r3, r5]
 801840e:	9b06      	ldr	r3, [sp, #24]
 8018410:	b3a3      	cbz	r3, 801847c <_strtod_l+0x24c>
 8018412:	4607      	mov	r7, r0
 8018414:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018418:	2909      	cmp	r1, #9
 801841a:	d912      	bls.n	8018442 <_strtod_l+0x212>
 801841c:	2101      	movs	r1, #1
 801841e:	e7c3      	b.n	80183a8 <_strtod_l+0x178>
 8018420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018422:	1c5a      	adds	r2, r3, #1
 8018424:	9211      	str	r2, [sp, #68]	; 0x44
 8018426:	785a      	ldrb	r2, [r3, #1]
 8018428:	3001      	adds	r0, #1
 801842a:	2a30      	cmp	r2, #48	; 0x30
 801842c:	d0f8      	beq.n	8018420 <_strtod_l+0x1f0>
 801842e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018432:	2b08      	cmp	r3, #8
 8018434:	f200 8497 	bhi.w	8018d66 <_strtod_l+0xb36>
 8018438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801843a:	930a      	str	r3, [sp, #40]	; 0x28
 801843c:	4607      	mov	r7, r0
 801843e:	2000      	movs	r0, #0
 8018440:	4603      	mov	r3, r0
 8018442:	3a30      	subs	r2, #48	; 0x30
 8018444:	f100 0101 	add.w	r1, r0, #1
 8018448:	d012      	beq.n	8018470 <_strtod_l+0x240>
 801844a:	440f      	add	r7, r1
 801844c:	eb00 0c03 	add.w	ip, r0, r3
 8018450:	4619      	mov	r1, r3
 8018452:	250a      	movs	r5, #10
 8018454:	4561      	cmp	r1, ip
 8018456:	d113      	bne.n	8018480 <_strtod_l+0x250>
 8018458:	1819      	adds	r1, r3, r0
 801845a:	2908      	cmp	r1, #8
 801845c:	f103 0301 	add.w	r3, r3, #1
 8018460:	4403      	add	r3, r0
 8018462:	dc1c      	bgt.n	801849e <_strtod_l+0x26e>
 8018464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018466:	210a      	movs	r1, #10
 8018468:	fb01 2200 	mla	r2, r1, r0, r2
 801846c:	9209      	str	r2, [sp, #36]	; 0x24
 801846e:	2100      	movs	r1, #0
 8018470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018472:	1c50      	adds	r0, r2, #1
 8018474:	9011      	str	r0, [sp, #68]	; 0x44
 8018476:	7852      	ldrb	r2, [r2, #1]
 8018478:	4608      	mov	r0, r1
 801847a:	e7cb      	b.n	8018414 <_strtod_l+0x1e4>
 801847c:	9806      	ldr	r0, [sp, #24]
 801847e:	e7d4      	b.n	801842a <_strtod_l+0x1fa>
 8018480:	2908      	cmp	r1, #8
 8018482:	dc04      	bgt.n	801848e <_strtod_l+0x25e>
 8018484:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018486:	436e      	muls	r6, r5
 8018488:	9609      	str	r6, [sp, #36]	; 0x24
 801848a:	3101      	adds	r1, #1
 801848c:	e7e2      	b.n	8018454 <_strtod_l+0x224>
 801848e:	f101 0e01 	add.w	lr, r1, #1
 8018492:	f1be 0f10 	cmp.w	lr, #16
 8018496:	bfd8      	it	le
 8018498:	fb05 fa0a 	mulle.w	sl, r5, sl
 801849c:	e7f5      	b.n	801848a <_strtod_l+0x25a>
 801849e:	2b10      	cmp	r3, #16
 80184a0:	bfdc      	itt	le
 80184a2:	210a      	movle	r1, #10
 80184a4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80184a8:	e7e1      	b.n	801846e <_strtod_l+0x23e>
 80184aa:	2700      	movs	r7, #0
 80184ac:	2101      	movs	r1, #1
 80184ae:	e780      	b.n	80183b2 <_strtod_l+0x182>
 80184b0:	f04f 0e00 	mov.w	lr, #0
 80184b4:	f10b 0202 	add.w	r2, fp, #2
 80184b8:	9211      	str	r2, [sp, #68]	; 0x44
 80184ba:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80184be:	e789      	b.n	80183d4 <_strtod_l+0x1a4>
 80184c0:	f04f 0e01 	mov.w	lr, #1
 80184c4:	e7f6      	b.n	80184b4 <_strtod_l+0x284>
 80184c6:	bf00      	nop
 80184c8:	0801c898 	.word	0x0801c898
 80184cc:	0801c650 	.word	0x0801c650
 80184d0:	7ff00000 	.word	0x7ff00000
 80184d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80184d6:	1c55      	adds	r5, r2, #1
 80184d8:	9511      	str	r5, [sp, #68]	; 0x44
 80184da:	7852      	ldrb	r2, [r2, #1]
 80184dc:	2a30      	cmp	r2, #48	; 0x30
 80184de:	d0f9      	beq.n	80184d4 <_strtod_l+0x2a4>
 80184e0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80184e4:	2d08      	cmp	r5, #8
 80184e6:	f63f af7b 	bhi.w	80183e0 <_strtod_l+0x1b0>
 80184ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80184ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80184f0:	9207      	str	r2, [sp, #28]
 80184f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80184f4:	1c55      	adds	r5, r2, #1
 80184f6:	9511      	str	r5, [sp, #68]	; 0x44
 80184f8:	7852      	ldrb	r2, [r2, #1]
 80184fa:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80184fe:	2e09      	cmp	r6, #9
 8018500:	d937      	bls.n	8018572 <_strtod_l+0x342>
 8018502:	9e07      	ldr	r6, [sp, #28]
 8018504:	1bad      	subs	r5, r5, r6
 8018506:	2d08      	cmp	r5, #8
 8018508:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801850c:	dc02      	bgt.n	8018514 <_strtod_l+0x2e4>
 801850e:	4565      	cmp	r5, ip
 8018510:	bfa8      	it	ge
 8018512:	4665      	movge	r5, ip
 8018514:	f1be 0f00 	cmp.w	lr, #0
 8018518:	d000      	beq.n	801851c <_strtod_l+0x2ec>
 801851a:	426d      	negs	r5, r5
 801851c:	2b00      	cmp	r3, #0
 801851e:	d14d      	bne.n	80185bc <_strtod_l+0x38c>
 8018520:	9b04      	ldr	r3, [sp, #16]
 8018522:	4303      	orrs	r3, r0
 8018524:	f47f aec8 	bne.w	80182b8 <_strtod_l+0x88>
 8018528:	2900      	cmp	r1, #0
 801852a:	f47f aee2 	bne.w	80182f2 <_strtod_l+0xc2>
 801852e:	2a69      	cmp	r2, #105	; 0x69
 8018530:	d027      	beq.n	8018582 <_strtod_l+0x352>
 8018532:	dc24      	bgt.n	801857e <_strtod_l+0x34e>
 8018534:	2a49      	cmp	r2, #73	; 0x49
 8018536:	d024      	beq.n	8018582 <_strtod_l+0x352>
 8018538:	2a4e      	cmp	r2, #78	; 0x4e
 801853a:	f47f aeda 	bne.w	80182f2 <_strtod_l+0xc2>
 801853e:	4996      	ldr	r1, [pc, #600]	; (8018798 <_strtod_l+0x568>)
 8018540:	a811      	add	r0, sp, #68	; 0x44
 8018542:	f001 fd93 	bl	801a06c <__match>
 8018546:	2800      	cmp	r0, #0
 8018548:	f43f aed3 	beq.w	80182f2 <_strtod_l+0xc2>
 801854c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	2b28      	cmp	r3, #40	; 0x28
 8018552:	d12d      	bne.n	80185b0 <_strtod_l+0x380>
 8018554:	4991      	ldr	r1, [pc, #580]	; (801879c <_strtod_l+0x56c>)
 8018556:	aa14      	add	r2, sp, #80	; 0x50
 8018558:	a811      	add	r0, sp, #68	; 0x44
 801855a:	f001 fd9b 	bl	801a094 <__hexnan>
 801855e:	2805      	cmp	r0, #5
 8018560:	d126      	bne.n	80185b0 <_strtod_l+0x380>
 8018562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018564:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018568:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801856c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018570:	e6a2      	b.n	80182b8 <_strtod_l+0x88>
 8018572:	250a      	movs	r5, #10
 8018574:	fb05 250c 	mla	r5, r5, ip, r2
 8018578:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801857c:	e7b9      	b.n	80184f2 <_strtod_l+0x2c2>
 801857e:	2a6e      	cmp	r2, #110	; 0x6e
 8018580:	e7db      	b.n	801853a <_strtod_l+0x30a>
 8018582:	4987      	ldr	r1, [pc, #540]	; (80187a0 <_strtod_l+0x570>)
 8018584:	a811      	add	r0, sp, #68	; 0x44
 8018586:	f001 fd71 	bl	801a06c <__match>
 801858a:	2800      	cmp	r0, #0
 801858c:	f43f aeb1 	beq.w	80182f2 <_strtod_l+0xc2>
 8018590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018592:	4984      	ldr	r1, [pc, #528]	; (80187a4 <_strtod_l+0x574>)
 8018594:	3b01      	subs	r3, #1
 8018596:	a811      	add	r0, sp, #68	; 0x44
 8018598:	9311      	str	r3, [sp, #68]	; 0x44
 801859a:	f001 fd67 	bl	801a06c <__match>
 801859e:	b910      	cbnz	r0, 80185a6 <_strtod_l+0x376>
 80185a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185a2:	3301      	adds	r3, #1
 80185a4:	9311      	str	r3, [sp, #68]	; 0x44
 80185a6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80187b8 <_strtod_l+0x588>
 80185aa:	f04f 0800 	mov.w	r8, #0
 80185ae:	e683      	b.n	80182b8 <_strtod_l+0x88>
 80185b0:	487d      	ldr	r0, [pc, #500]	; (80187a8 <_strtod_l+0x578>)
 80185b2:	f003 f881 	bl	801b6b8 <nan>
 80185b6:	ec59 8b10 	vmov	r8, r9, d0
 80185ba:	e67d      	b.n	80182b8 <_strtod_l+0x88>
 80185bc:	1bea      	subs	r2, r5, r7
 80185be:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80185c2:	9207      	str	r2, [sp, #28]
 80185c4:	9a06      	ldr	r2, [sp, #24]
 80185c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80185ca:	2a00      	cmp	r2, #0
 80185cc:	bf08      	it	eq
 80185ce:	461a      	moveq	r2, r3
 80185d0:	2b10      	cmp	r3, #16
 80185d2:	9206      	str	r2, [sp, #24]
 80185d4:	461a      	mov	r2, r3
 80185d6:	bfa8      	it	ge
 80185d8:	2210      	movge	r2, #16
 80185da:	2b09      	cmp	r3, #9
 80185dc:	ec59 8b17 	vmov	r8, r9, d7
 80185e0:	dd0c      	ble.n	80185fc <_strtod_l+0x3cc>
 80185e2:	4972      	ldr	r1, [pc, #456]	; (80187ac <_strtod_l+0x57c>)
 80185e4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80185e8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80185ec:	ee06 aa90 	vmov	s13, sl
 80185f0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80185f4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80185f8:	ec59 8b16 	vmov	r8, r9, d6
 80185fc:	2b0f      	cmp	r3, #15
 80185fe:	dc36      	bgt.n	801866e <_strtod_l+0x43e>
 8018600:	9907      	ldr	r1, [sp, #28]
 8018602:	2900      	cmp	r1, #0
 8018604:	f43f ae58 	beq.w	80182b8 <_strtod_l+0x88>
 8018608:	dd23      	ble.n	8018652 <_strtod_l+0x422>
 801860a:	2916      	cmp	r1, #22
 801860c:	dc0b      	bgt.n	8018626 <_strtod_l+0x3f6>
 801860e:	4b67      	ldr	r3, [pc, #412]	; (80187ac <_strtod_l+0x57c>)
 8018610:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8018614:	ed93 7b00 	vldr	d7, [r3]
 8018618:	ec49 8b16 	vmov	d6, r8, r9
 801861c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018620:	ec59 8b17 	vmov	r8, r9, d7
 8018624:	e648      	b.n	80182b8 <_strtod_l+0x88>
 8018626:	9807      	ldr	r0, [sp, #28]
 8018628:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801862c:	4281      	cmp	r1, r0
 801862e:	db1e      	blt.n	801866e <_strtod_l+0x43e>
 8018630:	4a5e      	ldr	r2, [pc, #376]	; (80187ac <_strtod_l+0x57c>)
 8018632:	f1c3 030f 	rsb	r3, r3, #15
 8018636:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801863a:	ed91 7b00 	vldr	d7, [r1]
 801863e:	ec49 8b16 	vmov	d6, r8, r9
 8018642:	1ac3      	subs	r3, r0, r3
 8018644:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018648:	ee27 7b06 	vmul.f64	d7, d7, d6
 801864c:	ed92 6b00 	vldr	d6, [r2]
 8018650:	e7e4      	b.n	801861c <_strtod_l+0x3ec>
 8018652:	9907      	ldr	r1, [sp, #28]
 8018654:	3116      	adds	r1, #22
 8018656:	db0a      	blt.n	801866e <_strtod_l+0x43e>
 8018658:	4b54      	ldr	r3, [pc, #336]	; (80187ac <_strtod_l+0x57c>)
 801865a:	1b7d      	subs	r5, r7, r5
 801865c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018660:	ed95 7b00 	vldr	d7, [r5]
 8018664:	ec49 8b16 	vmov	d6, r8, r9
 8018668:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801866c:	e7d8      	b.n	8018620 <_strtod_l+0x3f0>
 801866e:	9907      	ldr	r1, [sp, #28]
 8018670:	1a9a      	subs	r2, r3, r2
 8018672:	440a      	add	r2, r1
 8018674:	2a00      	cmp	r2, #0
 8018676:	dd6f      	ble.n	8018758 <_strtod_l+0x528>
 8018678:	f012 000f 	ands.w	r0, r2, #15
 801867c:	d00a      	beq.n	8018694 <_strtod_l+0x464>
 801867e:	494b      	ldr	r1, [pc, #300]	; (80187ac <_strtod_l+0x57c>)
 8018680:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018684:	ed91 7b00 	vldr	d7, [r1]
 8018688:	ec49 8b16 	vmov	d6, r8, r9
 801868c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018690:	ec59 8b17 	vmov	r8, r9, d7
 8018694:	f032 020f 	bics.w	r2, r2, #15
 8018698:	d04f      	beq.n	801873a <_strtod_l+0x50a>
 801869a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801869e:	dd22      	ble.n	80186e6 <_strtod_l+0x4b6>
 80186a0:	2500      	movs	r5, #0
 80186a2:	462e      	mov	r6, r5
 80186a4:	9506      	str	r5, [sp, #24]
 80186a6:	462f      	mov	r7, r5
 80186a8:	2322      	movs	r3, #34	; 0x22
 80186aa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80187b8 <_strtod_l+0x588>
 80186ae:	6023      	str	r3, [r4, #0]
 80186b0:	f04f 0800 	mov.w	r8, #0
 80186b4:	9b06      	ldr	r3, [sp, #24]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	f43f adfe 	beq.w	80182b8 <_strtod_l+0x88>
 80186bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80186be:	4620      	mov	r0, r4
 80186c0:	f001 fdf4 	bl	801a2ac <_Bfree>
 80186c4:	4639      	mov	r1, r7
 80186c6:	4620      	mov	r0, r4
 80186c8:	f001 fdf0 	bl	801a2ac <_Bfree>
 80186cc:	4631      	mov	r1, r6
 80186ce:	4620      	mov	r0, r4
 80186d0:	f001 fdec 	bl	801a2ac <_Bfree>
 80186d4:	9906      	ldr	r1, [sp, #24]
 80186d6:	4620      	mov	r0, r4
 80186d8:	f001 fde8 	bl	801a2ac <_Bfree>
 80186dc:	4629      	mov	r1, r5
 80186de:	4620      	mov	r0, r4
 80186e0:	f001 fde4 	bl	801a2ac <_Bfree>
 80186e4:	e5e8      	b.n	80182b8 <_strtod_l+0x88>
 80186e6:	2000      	movs	r0, #0
 80186e8:	ec49 8b17 	vmov	d7, r8, r9
 80186ec:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80187b0 <_strtod_l+0x580>
 80186f0:	1112      	asrs	r2, r2, #4
 80186f2:	4601      	mov	r1, r0
 80186f4:	2a01      	cmp	r2, #1
 80186f6:	dc23      	bgt.n	8018740 <_strtod_l+0x510>
 80186f8:	b108      	cbz	r0, 80186fe <_strtod_l+0x4ce>
 80186fa:	ec59 8b17 	vmov	r8, r9, d7
 80186fe:	4a2c      	ldr	r2, [pc, #176]	; (80187b0 <_strtod_l+0x580>)
 8018700:	482c      	ldr	r0, [pc, #176]	; (80187b4 <_strtod_l+0x584>)
 8018702:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018706:	ed92 7b00 	vldr	d7, [r2]
 801870a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801870e:	ec49 8b16 	vmov	d6, r8, r9
 8018712:	4a29      	ldr	r2, [pc, #164]	; (80187b8 <_strtod_l+0x588>)
 8018714:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018718:	ee17 1a90 	vmov	r1, s15
 801871c:	400a      	ands	r2, r1
 801871e:	4282      	cmp	r2, r0
 8018720:	ec59 8b17 	vmov	r8, r9, d7
 8018724:	d8bc      	bhi.n	80186a0 <_strtod_l+0x470>
 8018726:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801872a:	4282      	cmp	r2, r0
 801872c:	bf86      	itte	hi
 801872e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80187bc <_strtod_l+0x58c>
 8018732:	f04f 38ff 	movhi.w	r8, #4294967295
 8018736:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801873a:	2200      	movs	r2, #0
 801873c:	9204      	str	r2, [sp, #16]
 801873e:	e078      	b.n	8018832 <_strtod_l+0x602>
 8018740:	07d6      	lsls	r6, r2, #31
 8018742:	d504      	bpl.n	801874e <_strtod_l+0x51e>
 8018744:	ed9c 6b00 	vldr	d6, [ip]
 8018748:	2001      	movs	r0, #1
 801874a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801874e:	3101      	adds	r1, #1
 8018750:	1052      	asrs	r2, r2, #1
 8018752:	f10c 0c08 	add.w	ip, ip, #8
 8018756:	e7cd      	b.n	80186f4 <_strtod_l+0x4c4>
 8018758:	d0ef      	beq.n	801873a <_strtod_l+0x50a>
 801875a:	4252      	negs	r2, r2
 801875c:	f012 000f 	ands.w	r0, r2, #15
 8018760:	d00a      	beq.n	8018778 <_strtod_l+0x548>
 8018762:	4912      	ldr	r1, [pc, #72]	; (80187ac <_strtod_l+0x57c>)
 8018764:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018768:	ed91 7b00 	vldr	d7, [r1]
 801876c:	ec49 8b16 	vmov	d6, r8, r9
 8018770:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018774:	ec59 8b17 	vmov	r8, r9, d7
 8018778:	1112      	asrs	r2, r2, #4
 801877a:	d0de      	beq.n	801873a <_strtod_l+0x50a>
 801877c:	2a1f      	cmp	r2, #31
 801877e:	dd1f      	ble.n	80187c0 <_strtod_l+0x590>
 8018780:	2500      	movs	r5, #0
 8018782:	462e      	mov	r6, r5
 8018784:	9506      	str	r5, [sp, #24]
 8018786:	462f      	mov	r7, r5
 8018788:	2322      	movs	r3, #34	; 0x22
 801878a:	f04f 0800 	mov.w	r8, #0
 801878e:	f04f 0900 	mov.w	r9, #0
 8018792:	6023      	str	r3, [r4, #0]
 8018794:	e78e      	b.n	80186b4 <_strtod_l+0x484>
 8018796:	bf00      	nop
 8018798:	0801c625 	.word	0x0801c625
 801879c:	0801c664 	.word	0x0801c664
 80187a0:	0801c61d 	.word	0x0801c61d
 80187a4:	0801c7a4 	.word	0x0801c7a4
 80187a8:	0801ca6b 	.word	0x0801ca6b
 80187ac:	0801c930 	.word	0x0801c930
 80187b0:	0801c908 	.word	0x0801c908
 80187b4:	7ca00000 	.word	0x7ca00000
 80187b8:	7ff00000 	.word	0x7ff00000
 80187bc:	7fefffff 	.word	0x7fefffff
 80187c0:	f012 0110 	ands.w	r1, r2, #16
 80187c4:	bf18      	it	ne
 80187c6:	216a      	movne	r1, #106	; 0x6a
 80187c8:	9104      	str	r1, [sp, #16]
 80187ca:	ec49 8b17 	vmov	d7, r8, r9
 80187ce:	49be      	ldr	r1, [pc, #760]	; (8018ac8 <_strtod_l+0x898>)
 80187d0:	2000      	movs	r0, #0
 80187d2:	07d6      	lsls	r6, r2, #31
 80187d4:	d504      	bpl.n	80187e0 <_strtod_l+0x5b0>
 80187d6:	ed91 6b00 	vldr	d6, [r1]
 80187da:	2001      	movs	r0, #1
 80187dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187e0:	1052      	asrs	r2, r2, #1
 80187e2:	f101 0108 	add.w	r1, r1, #8
 80187e6:	d1f4      	bne.n	80187d2 <_strtod_l+0x5a2>
 80187e8:	b108      	cbz	r0, 80187ee <_strtod_l+0x5be>
 80187ea:	ec59 8b17 	vmov	r8, r9, d7
 80187ee:	9a04      	ldr	r2, [sp, #16]
 80187f0:	b1c2      	cbz	r2, 8018824 <_strtod_l+0x5f4>
 80187f2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80187f6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80187fa:	2a00      	cmp	r2, #0
 80187fc:	4648      	mov	r0, r9
 80187fe:	dd11      	ble.n	8018824 <_strtod_l+0x5f4>
 8018800:	2a1f      	cmp	r2, #31
 8018802:	f340 812e 	ble.w	8018a62 <_strtod_l+0x832>
 8018806:	2a34      	cmp	r2, #52	; 0x34
 8018808:	bfde      	ittt	le
 801880a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801880e:	f04f 32ff 	movle.w	r2, #4294967295
 8018812:	fa02 f101 	lslle.w	r1, r2, r1
 8018816:	f04f 0800 	mov.w	r8, #0
 801881a:	bfcc      	ite	gt
 801881c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018820:	ea01 0900 	andle.w	r9, r1, r0
 8018824:	ec49 8b17 	vmov	d7, r8, r9
 8018828:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018830:	d0a6      	beq.n	8018780 <_strtod_l+0x550>
 8018832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018834:	9200      	str	r2, [sp, #0]
 8018836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018838:	9a06      	ldr	r2, [sp, #24]
 801883a:	4620      	mov	r0, r4
 801883c:	f001 fd9e 	bl	801a37c <__s2b>
 8018840:	9006      	str	r0, [sp, #24]
 8018842:	2800      	cmp	r0, #0
 8018844:	f43f af2c 	beq.w	80186a0 <_strtod_l+0x470>
 8018848:	9b07      	ldr	r3, [sp, #28]
 801884a:	1b7d      	subs	r5, r7, r5
 801884c:	2b00      	cmp	r3, #0
 801884e:	bfb4      	ite	lt
 8018850:	462b      	movlt	r3, r5
 8018852:	2300      	movge	r3, #0
 8018854:	9309      	str	r3, [sp, #36]	; 0x24
 8018856:	9b07      	ldr	r3, [sp, #28]
 8018858:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8018aa8 <_strtod_l+0x878>
 801885c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8018ab0 <_strtod_l+0x880>
 8018860:	ed9f bb95 	vldr	d11, [pc, #596]	; 8018ab8 <_strtod_l+0x888>
 8018864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018868:	2500      	movs	r5, #0
 801886a:	930c      	str	r3, [sp, #48]	; 0x30
 801886c:	462e      	mov	r6, r5
 801886e:	9b06      	ldr	r3, [sp, #24]
 8018870:	4620      	mov	r0, r4
 8018872:	6859      	ldr	r1, [r3, #4]
 8018874:	f001 fcda 	bl	801a22c <_Balloc>
 8018878:	4607      	mov	r7, r0
 801887a:	2800      	cmp	r0, #0
 801887c:	f43f af14 	beq.w	80186a8 <_strtod_l+0x478>
 8018880:	9b06      	ldr	r3, [sp, #24]
 8018882:	691a      	ldr	r2, [r3, #16]
 8018884:	3202      	adds	r2, #2
 8018886:	f103 010c 	add.w	r1, r3, #12
 801888a:	0092      	lsls	r2, r2, #2
 801888c:	300c      	adds	r0, #12
 801888e:	f7fe fdbb 	bl	8017408 <memcpy>
 8018892:	ec49 8b10 	vmov	d0, r8, r9
 8018896:	aa14      	add	r2, sp, #80	; 0x50
 8018898:	a913      	add	r1, sp, #76	; 0x4c
 801889a:	4620      	mov	r0, r4
 801889c:	f002 f8b4 	bl	801aa08 <__d2b>
 80188a0:	ec49 8b18 	vmov	d8, r8, r9
 80188a4:	9012      	str	r0, [sp, #72]	; 0x48
 80188a6:	2800      	cmp	r0, #0
 80188a8:	f43f aefe 	beq.w	80186a8 <_strtod_l+0x478>
 80188ac:	2101      	movs	r1, #1
 80188ae:	4620      	mov	r0, r4
 80188b0:	f001 fdfe 	bl	801a4b0 <__i2b>
 80188b4:	4606      	mov	r6, r0
 80188b6:	2800      	cmp	r0, #0
 80188b8:	f43f aef6 	beq.w	80186a8 <_strtod_l+0x478>
 80188bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80188be:	9914      	ldr	r1, [sp, #80]	; 0x50
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	bfab      	itete	ge
 80188c4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80188c6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80188c8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80188cc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80188d0:	bfac      	ite	ge
 80188d2:	eb03 0b02 	addge.w	fp, r3, r2
 80188d6:	eba2 0a03 	sublt.w	sl, r2, r3
 80188da:	9a04      	ldr	r2, [sp, #16]
 80188dc:	1a9b      	subs	r3, r3, r2
 80188de:	440b      	add	r3, r1
 80188e0:	4a7a      	ldr	r2, [pc, #488]	; (8018acc <_strtod_l+0x89c>)
 80188e2:	3b01      	subs	r3, #1
 80188e4:	4293      	cmp	r3, r2
 80188e6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80188ea:	f280 80cd 	bge.w	8018a88 <_strtod_l+0x858>
 80188ee:	1ad2      	subs	r2, r2, r3
 80188f0:	2a1f      	cmp	r2, #31
 80188f2:	eba1 0102 	sub.w	r1, r1, r2
 80188f6:	f04f 0001 	mov.w	r0, #1
 80188fa:	f300 80b9 	bgt.w	8018a70 <_strtod_l+0x840>
 80188fe:	fa00 f302 	lsl.w	r3, r0, r2
 8018902:	930b      	str	r3, [sp, #44]	; 0x2c
 8018904:	2300      	movs	r3, #0
 8018906:	930a      	str	r3, [sp, #40]	; 0x28
 8018908:	eb0b 0301 	add.w	r3, fp, r1
 801890c:	9a04      	ldr	r2, [sp, #16]
 801890e:	459b      	cmp	fp, r3
 8018910:	448a      	add	sl, r1
 8018912:	4492      	add	sl, r2
 8018914:	465a      	mov	r2, fp
 8018916:	bfa8      	it	ge
 8018918:	461a      	movge	r2, r3
 801891a:	4552      	cmp	r2, sl
 801891c:	bfa8      	it	ge
 801891e:	4652      	movge	r2, sl
 8018920:	2a00      	cmp	r2, #0
 8018922:	bfc2      	ittt	gt
 8018924:	1a9b      	subgt	r3, r3, r2
 8018926:	ebaa 0a02 	subgt.w	sl, sl, r2
 801892a:	ebab 0b02 	subgt.w	fp, fp, r2
 801892e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018930:	2a00      	cmp	r2, #0
 8018932:	dd18      	ble.n	8018966 <_strtod_l+0x736>
 8018934:	4631      	mov	r1, r6
 8018936:	4620      	mov	r0, r4
 8018938:	930f      	str	r3, [sp, #60]	; 0x3c
 801893a:	f001 fe79 	bl	801a630 <__pow5mult>
 801893e:	4606      	mov	r6, r0
 8018940:	2800      	cmp	r0, #0
 8018942:	f43f aeb1 	beq.w	80186a8 <_strtod_l+0x478>
 8018946:	4601      	mov	r1, r0
 8018948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801894a:	4620      	mov	r0, r4
 801894c:	f001 fdc6 	bl	801a4dc <__multiply>
 8018950:	900e      	str	r0, [sp, #56]	; 0x38
 8018952:	2800      	cmp	r0, #0
 8018954:	f43f aea8 	beq.w	80186a8 <_strtod_l+0x478>
 8018958:	9912      	ldr	r1, [sp, #72]	; 0x48
 801895a:	4620      	mov	r0, r4
 801895c:	f001 fca6 	bl	801a2ac <_Bfree>
 8018960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018964:	9212      	str	r2, [sp, #72]	; 0x48
 8018966:	2b00      	cmp	r3, #0
 8018968:	f300 8093 	bgt.w	8018a92 <_strtod_l+0x862>
 801896c:	9b07      	ldr	r3, [sp, #28]
 801896e:	2b00      	cmp	r3, #0
 8018970:	dd08      	ble.n	8018984 <_strtod_l+0x754>
 8018972:	4639      	mov	r1, r7
 8018974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018976:	4620      	mov	r0, r4
 8018978:	f001 fe5a 	bl	801a630 <__pow5mult>
 801897c:	4607      	mov	r7, r0
 801897e:	2800      	cmp	r0, #0
 8018980:	f43f ae92 	beq.w	80186a8 <_strtod_l+0x478>
 8018984:	f1ba 0f00 	cmp.w	sl, #0
 8018988:	dd08      	ble.n	801899c <_strtod_l+0x76c>
 801898a:	4639      	mov	r1, r7
 801898c:	4652      	mov	r2, sl
 801898e:	4620      	mov	r0, r4
 8018990:	f001 fea8 	bl	801a6e4 <__lshift>
 8018994:	4607      	mov	r7, r0
 8018996:	2800      	cmp	r0, #0
 8018998:	f43f ae86 	beq.w	80186a8 <_strtod_l+0x478>
 801899c:	f1bb 0f00 	cmp.w	fp, #0
 80189a0:	dd08      	ble.n	80189b4 <_strtod_l+0x784>
 80189a2:	4631      	mov	r1, r6
 80189a4:	465a      	mov	r2, fp
 80189a6:	4620      	mov	r0, r4
 80189a8:	f001 fe9c 	bl	801a6e4 <__lshift>
 80189ac:	4606      	mov	r6, r0
 80189ae:	2800      	cmp	r0, #0
 80189b0:	f43f ae7a 	beq.w	80186a8 <_strtod_l+0x478>
 80189b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80189b6:	463a      	mov	r2, r7
 80189b8:	4620      	mov	r0, r4
 80189ba:	f001 ff1f 	bl	801a7fc <__mdiff>
 80189be:	4605      	mov	r5, r0
 80189c0:	2800      	cmp	r0, #0
 80189c2:	f43f ae71 	beq.w	80186a8 <_strtod_l+0x478>
 80189c6:	2300      	movs	r3, #0
 80189c8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80189cc:	60c3      	str	r3, [r0, #12]
 80189ce:	4631      	mov	r1, r6
 80189d0:	f001 fef8 	bl	801a7c4 <__mcmp>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	da7d      	bge.n	8018ad4 <_strtod_l+0x8a4>
 80189d8:	ea5a 0308 	orrs.w	r3, sl, r8
 80189dc:	f040 80a3 	bne.w	8018b26 <_strtod_l+0x8f6>
 80189e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	f040 809e 	bne.w	8018b26 <_strtod_l+0x8f6>
 80189ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80189ee:	0d1b      	lsrs	r3, r3, #20
 80189f0:	051b      	lsls	r3, r3, #20
 80189f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80189f6:	f240 8096 	bls.w	8018b26 <_strtod_l+0x8f6>
 80189fa:	696b      	ldr	r3, [r5, #20]
 80189fc:	b91b      	cbnz	r3, 8018a06 <_strtod_l+0x7d6>
 80189fe:	692b      	ldr	r3, [r5, #16]
 8018a00:	2b01      	cmp	r3, #1
 8018a02:	f340 8090 	ble.w	8018b26 <_strtod_l+0x8f6>
 8018a06:	4629      	mov	r1, r5
 8018a08:	2201      	movs	r2, #1
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	f001 fe6a 	bl	801a6e4 <__lshift>
 8018a10:	4631      	mov	r1, r6
 8018a12:	4605      	mov	r5, r0
 8018a14:	f001 fed6 	bl	801a7c4 <__mcmp>
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	f340 8084 	ble.w	8018b26 <_strtod_l+0x8f6>
 8018a1e:	9904      	ldr	r1, [sp, #16]
 8018a20:	4a2b      	ldr	r2, [pc, #172]	; (8018ad0 <_strtod_l+0x8a0>)
 8018a22:	464b      	mov	r3, r9
 8018a24:	2900      	cmp	r1, #0
 8018a26:	f000 809d 	beq.w	8018b64 <_strtod_l+0x934>
 8018a2a:	ea02 0109 	and.w	r1, r2, r9
 8018a2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018a32:	f300 8097 	bgt.w	8018b64 <_strtod_l+0x934>
 8018a36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018a3a:	f77f aea5 	ble.w	8018788 <_strtod_l+0x558>
 8018a3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018ac0 <_strtod_l+0x890>
 8018a42:	ec49 8b16 	vmov	d6, r8, r9
 8018a46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018a4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018a4e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018a52:	4313      	orrs	r3, r2
 8018a54:	bf08      	it	eq
 8018a56:	2322      	moveq	r3, #34	; 0x22
 8018a58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018a5c:	bf08      	it	eq
 8018a5e:	6023      	streq	r3, [r4, #0]
 8018a60:	e62c      	b.n	80186bc <_strtod_l+0x48c>
 8018a62:	f04f 31ff 	mov.w	r1, #4294967295
 8018a66:	fa01 f202 	lsl.w	r2, r1, r2
 8018a6a:	ea02 0808 	and.w	r8, r2, r8
 8018a6e:	e6d9      	b.n	8018824 <_strtod_l+0x5f4>
 8018a70:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8018a74:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8018a78:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8018a7c:	33e2      	adds	r3, #226	; 0xe2
 8018a7e:	fa00 f303 	lsl.w	r3, r0, r3
 8018a82:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8018a86:	e73f      	b.n	8018908 <_strtod_l+0x6d8>
 8018a88:	2200      	movs	r2, #0
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018a90:	e73a      	b.n	8018908 <_strtod_l+0x6d8>
 8018a92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018a94:	461a      	mov	r2, r3
 8018a96:	4620      	mov	r0, r4
 8018a98:	f001 fe24 	bl	801a6e4 <__lshift>
 8018a9c:	9012      	str	r0, [sp, #72]	; 0x48
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	f47f af64 	bne.w	801896c <_strtod_l+0x73c>
 8018aa4:	e600      	b.n	80186a8 <_strtod_l+0x478>
 8018aa6:	bf00      	nop
 8018aa8:	94a03595 	.word	0x94a03595
 8018aac:	3fcfffff 	.word	0x3fcfffff
 8018ab0:	94a03595 	.word	0x94a03595
 8018ab4:	3fdfffff 	.word	0x3fdfffff
 8018ab8:	35afe535 	.word	0x35afe535
 8018abc:	3fe00000 	.word	0x3fe00000
 8018ac0:	00000000 	.word	0x00000000
 8018ac4:	39500000 	.word	0x39500000
 8018ac8:	0801c678 	.word	0x0801c678
 8018acc:	fffffc02 	.word	0xfffffc02
 8018ad0:	7ff00000 	.word	0x7ff00000
 8018ad4:	46cb      	mov	fp, r9
 8018ad6:	d15f      	bne.n	8018b98 <_strtod_l+0x968>
 8018ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018adc:	f1ba 0f00 	cmp.w	sl, #0
 8018ae0:	d02a      	beq.n	8018b38 <_strtod_l+0x908>
 8018ae2:	4aa7      	ldr	r2, [pc, #668]	; (8018d80 <_strtod_l+0xb50>)
 8018ae4:	4293      	cmp	r3, r2
 8018ae6:	d12b      	bne.n	8018b40 <_strtod_l+0x910>
 8018ae8:	9b04      	ldr	r3, [sp, #16]
 8018aea:	4642      	mov	r2, r8
 8018aec:	b1fb      	cbz	r3, 8018b2e <_strtod_l+0x8fe>
 8018aee:	4ba5      	ldr	r3, [pc, #660]	; (8018d84 <_strtod_l+0xb54>)
 8018af0:	ea09 0303 	and.w	r3, r9, r3
 8018af4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018af8:	f04f 31ff 	mov.w	r1, #4294967295
 8018afc:	d81a      	bhi.n	8018b34 <_strtod_l+0x904>
 8018afe:	0d1b      	lsrs	r3, r3, #20
 8018b00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018b04:	fa01 f303 	lsl.w	r3, r1, r3
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	d119      	bne.n	8018b40 <_strtod_l+0x910>
 8018b0c:	4b9e      	ldr	r3, [pc, #632]	; (8018d88 <_strtod_l+0xb58>)
 8018b0e:	459b      	cmp	fp, r3
 8018b10:	d102      	bne.n	8018b18 <_strtod_l+0x8e8>
 8018b12:	3201      	adds	r2, #1
 8018b14:	f43f adc8 	beq.w	80186a8 <_strtod_l+0x478>
 8018b18:	4b9a      	ldr	r3, [pc, #616]	; (8018d84 <_strtod_l+0xb54>)
 8018b1a:	ea0b 0303 	and.w	r3, fp, r3
 8018b1e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018b22:	f04f 0800 	mov.w	r8, #0
 8018b26:	9b04      	ldr	r3, [sp, #16]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d188      	bne.n	8018a3e <_strtod_l+0x80e>
 8018b2c:	e5c6      	b.n	80186bc <_strtod_l+0x48c>
 8018b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b32:	e7e9      	b.n	8018b08 <_strtod_l+0x8d8>
 8018b34:	460b      	mov	r3, r1
 8018b36:	e7e7      	b.n	8018b08 <_strtod_l+0x8d8>
 8018b38:	ea53 0308 	orrs.w	r3, r3, r8
 8018b3c:	f43f af6f 	beq.w	8018a1e <_strtod_l+0x7ee>
 8018b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b42:	b1cb      	cbz	r3, 8018b78 <_strtod_l+0x948>
 8018b44:	ea13 0f0b 	tst.w	r3, fp
 8018b48:	d0ed      	beq.n	8018b26 <_strtod_l+0x8f6>
 8018b4a:	9a04      	ldr	r2, [sp, #16]
 8018b4c:	4640      	mov	r0, r8
 8018b4e:	4649      	mov	r1, r9
 8018b50:	f1ba 0f00 	cmp.w	sl, #0
 8018b54:	d014      	beq.n	8018b80 <_strtod_l+0x950>
 8018b56:	f7ff fb4e 	bl	80181f6 <sulp>
 8018b5a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8018b5e:	ec59 8b17 	vmov	r8, r9, d7
 8018b62:	e7e0      	b.n	8018b26 <_strtod_l+0x8f6>
 8018b64:	4013      	ands	r3, r2
 8018b66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018b6a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8018b6e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8018b72:	f04f 38ff 	mov.w	r8, #4294967295
 8018b76:	e7d6      	b.n	8018b26 <_strtod_l+0x8f6>
 8018b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b7a:	ea13 0f08 	tst.w	r3, r8
 8018b7e:	e7e3      	b.n	8018b48 <_strtod_l+0x918>
 8018b80:	f7ff fb39 	bl	80181f6 <sulp>
 8018b84:	ee38 0b40 	vsub.f64	d0, d8, d0
 8018b88:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b90:	ec59 8b10 	vmov	r8, r9, d0
 8018b94:	d1c7      	bne.n	8018b26 <_strtod_l+0x8f6>
 8018b96:	e5f7      	b.n	8018788 <_strtod_l+0x558>
 8018b98:	4631      	mov	r1, r6
 8018b9a:	4628      	mov	r0, r5
 8018b9c:	f001 ff90 	bl	801aac0 <__ratio>
 8018ba0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8018ba4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bac:	d865      	bhi.n	8018c7a <_strtod_l+0xa4a>
 8018bae:	f1ba 0f00 	cmp.w	sl, #0
 8018bb2:	d042      	beq.n	8018c3a <_strtod_l+0xa0a>
 8018bb4:	4b75      	ldr	r3, [pc, #468]	; (8018d8c <_strtod_l+0xb5c>)
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8018bbc:	4871      	ldr	r0, [pc, #452]	; (8018d84 <_strtod_l+0xb54>)
 8018bbe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8018d98 <_strtod_l+0xb68>
 8018bc2:	ea0b 0100 	and.w	r1, fp, r0
 8018bc6:	4561      	cmp	r1, ip
 8018bc8:	f040 808e 	bne.w	8018ce8 <_strtod_l+0xab8>
 8018bcc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8018bd0:	ec49 8b10 	vmov	d0, r8, r9
 8018bd4:	ec43 2b1c 	vmov	d12, r2, r3
 8018bd8:	910a      	str	r1, [sp, #40]	; 0x28
 8018bda:	f001 fe99 	bl	801a910 <__ulp>
 8018bde:	ec49 8b1e 	vmov	d14, r8, r9
 8018be2:	4868      	ldr	r0, [pc, #416]	; (8018d84 <_strtod_l+0xb54>)
 8018be4:	eeac eb00 	vfma.f64	d14, d12, d0
 8018be8:	ee1e 3a90 	vmov	r3, s29
 8018bec:	4a68      	ldr	r2, [pc, #416]	; (8018d90 <_strtod_l+0xb60>)
 8018bee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018bf0:	4018      	ands	r0, r3
 8018bf2:	4290      	cmp	r0, r2
 8018bf4:	ec59 8b1e 	vmov	r8, r9, d14
 8018bf8:	d94e      	bls.n	8018c98 <_strtod_l+0xa68>
 8018bfa:	ee18 3a90 	vmov	r3, s17
 8018bfe:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018c02:	4293      	cmp	r3, r2
 8018c04:	d104      	bne.n	8018c10 <_strtod_l+0x9e0>
 8018c06:	ee18 3a10 	vmov	r3, s16
 8018c0a:	3301      	adds	r3, #1
 8018c0c:	f43f ad4c 	beq.w	80186a8 <_strtod_l+0x478>
 8018c10:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8018d88 <_strtod_l+0xb58>
 8018c14:	f04f 38ff 	mov.w	r8, #4294967295
 8018c18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	f001 fb46 	bl	801a2ac <_Bfree>
 8018c20:	4639      	mov	r1, r7
 8018c22:	4620      	mov	r0, r4
 8018c24:	f001 fb42 	bl	801a2ac <_Bfree>
 8018c28:	4631      	mov	r1, r6
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	f001 fb3e 	bl	801a2ac <_Bfree>
 8018c30:	4629      	mov	r1, r5
 8018c32:	4620      	mov	r0, r4
 8018c34:	f001 fb3a 	bl	801a2ac <_Bfree>
 8018c38:	e619      	b.n	801886e <_strtod_l+0x63e>
 8018c3a:	f1b8 0f00 	cmp.w	r8, #0
 8018c3e:	d112      	bne.n	8018c66 <_strtod_l+0xa36>
 8018c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018c44:	b9b3      	cbnz	r3, 8018c74 <_strtod_l+0xa44>
 8018c46:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018c4a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c52:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8018c56:	bf58      	it	pl
 8018c58:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8018c5c:	eeb1 7b4d 	vneg.f64	d7, d13
 8018c60:	ec53 2b17 	vmov	r2, r3, d7
 8018c64:	e7aa      	b.n	8018bbc <_strtod_l+0x98c>
 8018c66:	f1b8 0f01 	cmp.w	r8, #1
 8018c6a:	d103      	bne.n	8018c74 <_strtod_l+0xa44>
 8018c6c:	f1b9 0f00 	cmp.w	r9, #0
 8018c70:	f43f ad8a 	beq.w	8018788 <_strtod_l+0x558>
 8018c74:	4b47      	ldr	r3, [pc, #284]	; (8018d94 <_strtod_l+0xb64>)
 8018c76:	2200      	movs	r2, #0
 8018c78:	e79e      	b.n	8018bb8 <_strtod_l+0x988>
 8018c7a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8018c7e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8018c82:	f1ba 0f00 	cmp.w	sl, #0
 8018c86:	d104      	bne.n	8018c92 <_strtod_l+0xa62>
 8018c88:	eeb1 7b4d 	vneg.f64	d7, d13
 8018c8c:	ec53 2b17 	vmov	r2, r3, d7
 8018c90:	e794      	b.n	8018bbc <_strtod_l+0x98c>
 8018c92:	eeb0 7b4d 	vmov.f64	d7, d13
 8018c96:	e7f9      	b.n	8018c8c <_strtod_l+0xa5c>
 8018c98:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8018c9c:	9b04      	ldr	r3, [sp, #16]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d1ba      	bne.n	8018c18 <_strtod_l+0x9e8>
 8018ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018ca6:	0d1b      	lsrs	r3, r3, #20
 8018ca8:	051b      	lsls	r3, r3, #20
 8018caa:	4299      	cmp	r1, r3
 8018cac:	d1b4      	bne.n	8018c18 <_strtod_l+0x9e8>
 8018cae:	ec51 0b1d 	vmov	r0, r1, d13
 8018cb2:	f7e7 fd69 	bl	8000788 <__aeabi_d2lz>
 8018cb6:	f7e7 fd21 	bl	80006fc <__aeabi_l2d>
 8018cba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018cbe:	ec41 0b17 	vmov	d7, r0, r1
 8018cc2:	ea43 0308 	orr.w	r3, r3, r8
 8018cc6:	ea53 030a 	orrs.w	r3, r3, sl
 8018cca:	ee3d db47 	vsub.f64	d13, d13, d7
 8018cce:	d03c      	beq.n	8018d4a <_strtod_l+0xb1a>
 8018cd0:	eeb4 dbca 	vcmpe.f64	d13, d10
 8018cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd8:	f53f acf0 	bmi.w	80186bc <_strtod_l+0x48c>
 8018cdc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8018ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce4:	dd98      	ble.n	8018c18 <_strtod_l+0x9e8>
 8018ce6:	e4e9      	b.n	80186bc <_strtod_l+0x48c>
 8018ce8:	9804      	ldr	r0, [sp, #16]
 8018cea:	b1f0      	cbz	r0, 8018d2a <_strtod_l+0xafa>
 8018cec:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8018cf0:	d81b      	bhi.n	8018d2a <_strtod_l+0xafa>
 8018cf2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8018d78 <_strtod_l+0xb48>
 8018cf6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8018cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfe:	d811      	bhi.n	8018d24 <_strtod_l+0xaf4>
 8018d00:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8018d04:	ee1d 3a10 	vmov	r3, s26
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	bf38      	it	cc
 8018d0c:	2301      	movcc	r3, #1
 8018d0e:	ee0d 3a10 	vmov	s26, r3
 8018d12:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8018d16:	f1ba 0f00 	cmp.w	sl, #0
 8018d1a:	d113      	bne.n	8018d44 <_strtod_l+0xb14>
 8018d1c:	eeb1 7b4d 	vneg.f64	d7, d13
 8018d20:	ec53 2b17 	vmov	r2, r3, d7
 8018d24:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8018d28:	1a43      	subs	r3, r0, r1
 8018d2a:	eeb0 0b48 	vmov.f64	d0, d8
 8018d2e:	ec43 2b1c 	vmov	d12, r2, r3
 8018d32:	910a      	str	r1, [sp, #40]	; 0x28
 8018d34:	f001 fdec 	bl	801a910 <__ulp>
 8018d38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018d3a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8018d3e:	ec59 8b18 	vmov	r8, r9, d8
 8018d42:	e7ab      	b.n	8018c9c <_strtod_l+0xa6c>
 8018d44:	eeb0 7b4d 	vmov.f64	d7, d13
 8018d48:	e7ea      	b.n	8018d20 <_strtod_l+0xaf0>
 8018d4a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8018d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d52:	f57f af61 	bpl.w	8018c18 <_strtod_l+0x9e8>
 8018d56:	e4b1      	b.n	80186bc <_strtod_l+0x48c>
 8018d58:	2300      	movs	r3, #0
 8018d5a:	9308      	str	r3, [sp, #32]
 8018d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018d60:	6013      	str	r3, [r2, #0]
 8018d62:	f7ff baad 	b.w	80182c0 <_strtod_l+0x90>
 8018d66:	2a65      	cmp	r2, #101	; 0x65
 8018d68:	f43f ab9f 	beq.w	80184aa <_strtod_l+0x27a>
 8018d6c:	2a45      	cmp	r2, #69	; 0x45
 8018d6e:	f43f ab9c 	beq.w	80184aa <_strtod_l+0x27a>
 8018d72:	2101      	movs	r1, #1
 8018d74:	f7ff bbd4 	b.w	8018520 <_strtod_l+0x2f0>
 8018d78:	ffc00000 	.word	0xffc00000
 8018d7c:	41dfffff 	.word	0x41dfffff
 8018d80:	000fffff 	.word	0x000fffff
 8018d84:	7ff00000 	.word	0x7ff00000
 8018d88:	7fefffff 	.word	0x7fefffff
 8018d8c:	3ff00000 	.word	0x3ff00000
 8018d90:	7c9fffff 	.word	0x7c9fffff
 8018d94:	bff00000 	.word	0xbff00000
 8018d98:	7fe00000 	.word	0x7fe00000

08018d9c <_strtod_r>:
 8018d9c:	4b01      	ldr	r3, [pc, #4]	; (8018da4 <_strtod_r+0x8>)
 8018d9e:	f7ff ba47 	b.w	8018230 <_strtod_l>
 8018da2:	bf00      	nop
 8018da4:	24000168 	.word	0x24000168

08018da8 <_strtol_l.constprop.0>:
 8018da8:	2b01      	cmp	r3, #1
 8018daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dae:	d001      	beq.n	8018db4 <_strtol_l.constprop.0+0xc>
 8018db0:	2b24      	cmp	r3, #36	; 0x24
 8018db2:	d906      	bls.n	8018dc2 <_strtol_l.constprop.0+0x1a>
 8018db4:	f7fe fafe 	bl	80173b4 <__errno>
 8018db8:	2316      	movs	r3, #22
 8018dba:	6003      	str	r3, [r0, #0]
 8018dbc:	2000      	movs	r0, #0
 8018dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018ea8 <_strtol_l.constprop.0+0x100>
 8018dc6:	460d      	mov	r5, r1
 8018dc8:	462e      	mov	r6, r5
 8018dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018dce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8018dd2:	f017 0708 	ands.w	r7, r7, #8
 8018dd6:	d1f7      	bne.n	8018dc8 <_strtol_l.constprop.0+0x20>
 8018dd8:	2c2d      	cmp	r4, #45	; 0x2d
 8018dda:	d132      	bne.n	8018e42 <_strtol_l.constprop.0+0x9a>
 8018ddc:	782c      	ldrb	r4, [r5, #0]
 8018dde:	2701      	movs	r7, #1
 8018de0:	1cb5      	adds	r5, r6, #2
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d05b      	beq.n	8018e9e <_strtol_l.constprop.0+0xf6>
 8018de6:	2b10      	cmp	r3, #16
 8018de8:	d109      	bne.n	8018dfe <_strtol_l.constprop.0+0x56>
 8018dea:	2c30      	cmp	r4, #48	; 0x30
 8018dec:	d107      	bne.n	8018dfe <_strtol_l.constprop.0+0x56>
 8018dee:	782c      	ldrb	r4, [r5, #0]
 8018df0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018df4:	2c58      	cmp	r4, #88	; 0x58
 8018df6:	d14d      	bne.n	8018e94 <_strtol_l.constprop.0+0xec>
 8018df8:	786c      	ldrb	r4, [r5, #1]
 8018dfa:	2310      	movs	r3, #16
 8018dfc:	3502      	adds	r5, #2
 8018dfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018e02:	f108 38ff 	add.w	r8, r8, #4294967295
 8018e06:	f04f 0c00 	mov.w	ip, #0
 8018e0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8018e0e:	4666      	mov	r6, ip
 8018e10:	fb03 8a19 	mls	sl, r3, r9, r8
 8018e14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8018e18:	f1be 0f09 	cmp.w	lr, #9
 8018e1c:	d816      	bhi.n	8018e4c <_strtol_l.constprop.0+0xa4>
 8018e1e:	4674      	mov	r4, lr
 8018e20:	42a3      	cmp	r3, r4
 8018e22:	dd24      	ble.n	8018e6e <_strtol_l.constprop.0+0xc6>
 8018e24:	f1bc 0f00 	cmp.w	ip, #0
 8018e28:	db1e      	blt.n	8018e68 <_strtol_l.constprop.0+0xc0>
 8018e2a:	45b1      	cmp	r9, r6
 8018e2c:	d31c      	bcc.n	8018e68 <_strtol_l.constprop.0+0xc0>
 8018e2e:	d101      	bne.n	8018e34 <_strtol_l.constprop.0+0x8c>
 8018e30:	45a2      	cmp	sl, r4
 8018e32:	db19      	blt.n	8018e68 <_strtol_l.constprop.0+0xc0>
 8018e34:	fb06 4603 	mla	r6, r6, r3, r4
 8018e38:	f04f 0c01 	mov.w	ip, #1
 8018e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e40:	e7e8      	b.n	8018e14 <_strtol_l.constprop.0+0x6c>
 8018e42:	2c2b      	cmp	r4, #43	; 0x2b
 8018e44:	bf04      	itt	eq
 8018e46:	782c      	ldrbeq	r4, [r5, #0]
 8018e48:	1cb5      	addeq	r5, r6, #2
 8018e4a:	e7ca      	b.n	8018de2 <_strtol_l.constprop.0+0x3a>
 8018e4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8018e50:	f1be 0f19 	cmp.w	lr, #25
 8018e54:	d801      	bhi.n	8018e5a <_strtol_l.constprop.0+0xb2>
 8018e56:	3c37      	subs	r4, #55	; 0x37
 8018e58:	e7e2      	b.n	8018e20 <_strtol_l.constprop.0+0x78>
 8018e5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8018e5e:	f1be 0f19 	cmp.w	lr, #25
 8018e62:	d804      	bhi.n	8018e6e <_strtol_l.constprop.0+0xc6>
 8018e64:	3c57      	subs	r4, #87	; 0x57
 8018e66:	e7db      	b.n	8018e20 <_strtol_l.constprop.0+0x78>
 8018e68:	f04f 3cff 	mov.w	ip, #4294967295
 8018e6c:	e7e6      	b.n	8018e3c <_strtol_l.constprop.0+0x94>
 8018e6e:	f1bc 0f00 	cmp.w	ip, #0
 8018e72:	da05      	bge.n	8018e80 <_strtol_l.constprop.0+0xd8>
 8018e74:	2322      	movs	r3, #34	; 0x22
 8018e76:	6003      	str	r3, [r0, #0]
 8018e78:	4646      	mov	r6, r8
 8018e7a:	b942      	cbnz	r2, 8018e8e <_strtol_l.constprop.0+0xe6>
 8018e7c:	4630      	mov	r0, r6
 8018e7e:	e79e      	b.n	8018dbe <_strtol_l.constprop.0+0x16>
 8018e80:	b107      	cbz	r7, 8018e84 <_strtol_l.constprop.0+0xdc>
 8018e82:	4276      	negs	r6, r6
 8018e84:	2a00      	cmp	r2, #0
 8018e86:	d0f9      	beq.n	8018e7c <_strtol_l.constprop.0+0xd4>
 8018e88:	f1bc 0f00 	cmp.w	ip, #0
 8018e8c:	d000      	beq.n	8018e90 <_strtol_l.constprop.0+0xe8>
 8018e8e:	1e69      	subs	r1, r5, #1
 8018e90:	6011      	str	r1, [r2, #0]
 8018e92:	e7f3      	b.n	8018e7c <_strtol_l.constprop.0+0xd4>
 8018e94:	2430      	movs	r4, #48	; 0x30
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d1b1      	bne.n	8018dfe <_strtol_l.constprop.0+0x56>
 8018e9a:	2308      	movs	r3, #8
 8018e9c:	e7af      	b.n	8018dfe <_strtol_l.constprop.0+0x56>
 8018e9e:	2c30      	cmp	r4, #48	; 0x30
 8018ea0:	d0a5      	beq.n	8018dee <_strtol_l.constprop.0+0x46>
 8018ea2:	230a      	movs	r3, #10
 8018ea4:	e7ab      	b.n	8018dfe <_strtol_l.constprop.0+0x56>
 8018ea6:	bf00      	nop
 8018ea8:	0801c6a1 	.word	0x0801c6a1

08018eac <_strtol_r>:
 8018eac:	f7ff bf7c 	b.w	8018da8 <_strtol_l.constprop.0>

08018eb0 <_write_r>:
 8018eb0:	b538      	push	{r3, r4, r5, lr}
 8018eb2:	4d07      	ldr	r5, [pc, #28]	; (8018ed0 <_write_r+0x20>)
 8018eb4:	4604      	mov	r4, r0
 8018eb6:	4608      	mov	r0, r1
 8018eb8:	4611      	mov	r1, r2
 8018eba:	2200      	movs	r2, #0
 8018ebc:	602a      	str	r2, [r5, #0]
 8018ebe:	461a      	mov	r2, r3
 8018ec0:	f7ea fe49 	bl	8003b56 <_write>
 8018ec4:	1c43      	adds	r3, r0, #1
 8018ec6:	d102      	bne.n	8018ece <_write_r+0x1e>
 8018ec8:	682b      	ldr	r3, [r5, #0]
 8018eca:	b103      	cbz	r3, 8018ece <_write_r+0x1e>
 8018ecc:	6023      	str	r3, [r4, #0]
 8018ece:	bd38      	pop	{r3, r4, r5, pc}
 8018ed0:	24003238 	.word	0x24003238

08018ed4 <_close_r>:
 8018ed4:	b538      	push	{r3, r4, r5, lr}
 8018ed6:	4d06      	ldr	r5, [pc, #24]	; (8018ef0 <_close_r+0x1c>)
 8018ed8:	2300      	movs	r3, #0
 8018eda:	4604      	mov	r4, r0
 8018edc:	4608      	mov	r0, r1
 8018ede:	602b      	str	r3, [r5, #0]
 8018ee0:	f7ea fe55 	bl	8003b8e <_close>
 8018ee4:	1c43      	adds	r3, r0, #1
 8018ee6:	d102      	bne.n	8018eee <_close_r+0x1a>
 8018ee8:	682b      	ldr	r3, [r5, #0]
 8018eea:	b103      	cbz	r3, 8018eee <_close_r+0x1a>
 8018eec:	6023      	str	r3, [r4, #0]
 8018eee:	bd38      	pop	{r3, r4, r5, pc}
 8018ef0:	24003238 	.word	0x24003238

08018ef4 <quorem>:
 8018ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef8:	6903      	ldr	r3, [r0, #16]
 8018efa:	690c      	ldr	r4, [r1, #16]
 8018efc:	42a3      	cmp	r3, r4
 8018efe:	4607      	mov	r7, r0
 8018f00:	f2c0 8081 	blt.w	8019006 <quorem+0x112>
 8018f04:	3c01      	subs	r4, #1
 8018f06:	f101 0814 	add.w	r8, r1, #20
 8018f0a:	f100 0514 	add.w	r5, r0, #20
 8018f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018f12:	9301      	str	r3, [sp, #4]
 8018f14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018f18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018f24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018f28:	fbb2 f6f3 	udiv	r6, r2, r3
 8018f2c:	d331      	bcc.n	8018f92 <quorem+0x9e>
 8018f2e:	f04f 0e00 	mov.w	lr, #0
 8018f32:	4640      	mov	r0, r8
 8018f34:	46ac      	mov	ip, r5
 8018f36:	46f2      	mov	sl, lr
 8018f38:	f850 2b04 	ldr.w	r2, [r0], #4
 8018f3c:	b293      	uxth	r3, r2
 8018f3e:	fb06 e303 	mla	r3, r6, r3, lr
 8018f42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018f46:	b29b      	uxth	r3, r3
 8018f48:	ebaa 0303 	sub.w	r3, sl, r3
 8018f4c:	f8dc a000 	ldr.w	sl, [ip]
 8018f50:	0c12      	lsrs	r2, r2, #16
 8018f52:	fa13 f38a 	uxtah	r3, r3, sl
 8018f56:	fb06 e202 	mla	r2, r6, r2, lr
 8018f5a:	9300      	str	r3, [sp, #0]
 8018f5c:	9b00      	ldr	r3, [sp, #0]
 8018f5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018f62:	b292      	uxth	r2, r2
 8018f64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018f6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018f70:	4581      	cmp	r9, r0
 8018f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f76:	f84c 3b04 	str.w	r3, [ip], #4
 8018f7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018f7e:	d2db      	bcs.n	8018f38 <quorem+0x44>
 8018f80:	f855 300b 	ldr.w	r3, [r5, fp]
 8018f84:	b92b      	cbnz	r3, 8018f92 <quorem+0x9e>
 8018f86:	9b01      	ldr	r3, [sp, #4]
 8018f88:	3b04      	subs	r3, #4
 8018f8a:	429d      	cmp	r5, r3
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	d32e      	bcc.n	8018fee <quorem+0xfa>
 8018f90:	613c      	str	r4, [r7, #16]
 8018f92:	4638      	mov	r0, r7
 8018f94:	f001 fc16 	bl	801a7c4 <__mcmp>
 8018f98:	2800      	cmp	r0, #0
 8018f9a:	db24      	blt.n	8018fe6 <quorem+0xf2>
 8018f9c:	3601      	adds	r6, #1
 8018f9e:	4628      	mov	r0, r5
 8018fa0:	f04f 0c00 	mov.w	ip, #0
 8018fa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8018fa8:	f8d0 e000 	ldr.w	lr, [r0]
 8018fac:	b293      	uxth	r3, r2
 8018fae:	ebac 0303 	sub.w	r3, ip, r3
 8018fb2:	0c12      	lsrs	r2, r2, #16
 8018fb4:	fa13 f38e 	uxtah	r3, r3, lr
 8018fb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018fc0:	b29b      	uxth	r3, r3
 8018fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018fc6:	45c1      	cmp	r9, r8
 8018fc8:	f840 3b04 	str.w	r3, [r0], #4
 8018fcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018fd0:	d2e8      	bcs.n	8018fa4 <quorem+0xb0>
 8018fd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018fda:	b922      	cbnz	r2, 8018fe6 <quorem+0xf2>
 8018fdc:	3b04      	subs	r3, #4
 8018fde:	429d      	cmp	r5, r3
 8018fe0:	461a      	mov	r2, r3
 8018fe2:	d30a      	bcc.n	8018ffa <quorem+0x106>
 8018fe4:	613c      	str	r4, [r7, #16]
 8018fe6:	4630      	mov	r0, r6
 8018fe8:	b003      	add	sp, #12
 8018fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fee:	6812      	ldr	r2, [r2, #0]
 8018ff0:	3b04      	subs	r3, #4
 8018ff2:	2a00      	cmp	r2, #0
 8018ff4:	d1cc      	bne.n	8018f90 <quorem+0x9c>
 8018ff6:	3c01      	subs	r4, #1
 8018ff8:	e7c7      	b.n	8018f8a <quorem+0x96>
 8018ffa:	6812      	ldr	r2, [r2, #0]
 8018ffc:	3b04      	subs	r3, #4
 8018ffe:	2a00      	cmp	r2, #0
 8019000:	d1f0      	bne.n	8018fe4 <quorem+0xf0>
 8019002:	3c01      	subs	r4, #1
 8019004:	e7eb      	b.n	8018fde <quorem+0xea>
 8019006:	2000      	movs	r0, #0
 8019008:	e7ee      	b.n	8018fe8 <quorem+0xf4>
 801900a:	0000      	movs	r0, r0
 801900c:	0000      	movs	r0, r0
	...

08019010 <_dtoa_r>:
 8019010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019014:	ed2d 8b02 	vpush	{d8}
 8019018:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801901a:	b091      	sub	sp, #68	; 0x44
 801901c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019020:	ec59 8b10 	vmov	r8, r9, d0
 8019024:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019026:	9106      	str	r1, [sp, #24]
 8019028:	4606      	mov	r6, r0
 801902a:	9208      	str	r2, [sp, #32]
 801902c:	930c      	str	r3, [sp, #48]	; 0x30
 801902e:	b975      	cbnz	r5, 801904e <_dtoa_r+0x3e>
 8019030:	2010      	movs	r0, #16
 8019032:	f001 f8e1 	bl	801a1f8 <malloc>
 8019036:	4602      	mov	r2, r0
 8019038:	6270      	str	r0, [r6, #36]	; 0x24
 801903a:	b920      	cbnz	r0, 8019046 <_dtoa_r+0x36>
 801903c:	4baa      	ldr	r3, [pc, #680]	; (80192e8 <_dtoa_r+0x2d8>)
 801903e:	21ea      	movs	r1, #234	; 0xea
 8019040:	48aa      	ldr	r0, [pc, #680]	; (80192ec <_dtoa_r+0x2dc>)
 8019042:	f002 fc59 	bl	801b8f8 <__assert_func>
 8019046:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801904a:	6005      	str	r5, [r0, #0]
 801904c:	60c5      	str	r5, [r0, #12]
 801904e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019050:	6819      	ldr	r1, [r3, #0]
 8019052:	b151      	cbz	r1, 801906a <_dtoa_r+0x5a>
 8019054:	685a      	ldr	r2, [r3, #4]
 8019056:	604a      	str	r2, [r1, #4]
 8019058:	2301      	movs	r3, #1
 801905a:	4093      	lsls	r3, r2
 801905c:	608b      	str	r3, [r1, #8]
 801905e:	4630      	mov	r0, r6
 8019060:	f001 f924 	bl	801a2ac <_Bfree>
 8019064:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019066:	2200      	movs	r2, #0
 8019068:	601a      	str	r2, [r3, #0]
 801906a:	f1b9 0300 	subs.w	r3, r9, #0
 801906e:	bfbb      	ittet	lt
 8019070:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019074:	9303      	strlt	r3, [sp, #12]
 8019076:	2300      	movge	r3, #0
 8019078:	2201      	movlt	r2, #1
 801907a:	bfac      	ite	ge
 801907c:	6023      	strge	r3, [r4, #0]
 801907e:	6022      	strlt	r2, [r4, #0]
 8019080:	4b9b      	ldr	r3, [pc, #620]	; (80192f0 <_dtoa_r+0x2e0>)
 8019082:	9c03      	ldr	r4, [sp, #12]
 8019084:	43a3      	bics	r3, r4
 8019086:	d11c      	bne.n	80190c2 <_dtoa_r+0xb2>
 8019088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801908a:	f242 730f 	movw	r3, #9999	; 0x270f
 801908e:	6013      	str	r3, [r2, #0]
 8019090:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019094:	ea53 0308 	orrs.w	r3, r3, r8
 8019098:	f000 84fd 	beq.w	8019a96 <_dtoa_r+0xa86>
 801909c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801909e:	b963      	cbnz	r3, 80190ba <_dtoa_r+0xaa>
 80190a0:	4b94      	ldr	r3, [pc, #592]	; (80192f4 <_dtoa_r+0x2e4>)
 80190a2:	e01f      	b.n	80190e4 <_dtoa_r+0xd4>
 80190a4:	4b94      	ldr	r3, [pc, #592]	; (80192f8 <_dtoa_r+0x2e8>)
 80190a6:	9301      	str	r3, [sp, #4]
 80190a8:	3308      	adds	r3, #8
 80190aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80190ac:	6013      	str	r3, [r2, #0]
 80190ae:	9801      	ldr	r0, [sp, #4]
 80190b0:	b011      	add	sp, #68	; 0x44
 80190b2:	ecbd 8b02 	vpop	{d8}
 80190b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ba:	4b8e      	ldr	r3, [pc, #568]	; (80192f4 <_dtoa_r+0x2e4>)
 80190bc:	9301      	str	r3, [sp, #4]
 80190be:	3303      	adds	r3, #3
 80190c0:	e7f3      	b.n	80190aa <_dtoa_r+0x9a>
 80190c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80190c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80190ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ce:	d10b      	bne.n	80190e8 <_dtoa_r+0xd8>
 80190d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80190d2:	2301      	movs	r3, #1
 80190d4:	6013      	str	r3, [r2, #0]
 80190d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80190d8:	2b00      	cmp	r3, #0
 80190da:	f000 84d9 	beq.w	8019a90 <_dtoa_r+0xa80>
 80190de:	4887      	ldr	r0, [pc, #540]	; (80192fc <_dtoa_r+0x2ec>)
 80190e0:	6018      	str	r0, [r3, #0]
 80190e2:	1e43      	subs	r3, r0, #1
 80190e4:	9301      	str	r3, [sp, #4]
 80190e6:	e7e2      	b.n	80190ae <_dtoa_r+0x9e>
 80190e8:	a90f      	add	r1, sp, #60	; 0x3c
 80190ea:	aa0e      	add	r2, sp, #56	; 0x38
 80190ec:	4630      	mov	r0, r6
 80190ee:	eeb0 0b48 	vmov.f64	d0, d8
 80190f2:	f001 fc89 	bl	801aa08 <__d2b>
 80190f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80190fa:	4605      	mov	r5, r0
 80190fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80190fe:	2900      	cmp	r1, #0
 8019100:	d046      	beq.n	8019190 <_dtoa_r+0x180>
 8019102:	ee18 4a90 	vmov	r4, s17
 8019106:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801910a:	ec53 2b18 	vmov	r2, r3, d8
 801910e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8019112:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019116:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801911a:	2400      	movs	r4, #0
 801911c:	ec43 2b16 	vmov	d6, r2, r3
 8019120:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8019124:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80192d0 <_dtoa_r+0x2c0>
 8019128:	ee36 7b47 	vsub.f64	d7, d6, d7
 801912c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80192d8 <_dtoa_r+0x2c8>
 8019130:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019134:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80192e0 <_dtoa_r+0x2d0>
 8019138:	ee07 1a90 	vmov	s15, r1
 801913c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019140:	eeb0 7b46 	vmov.f64	d7, d6
 8019144:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019148:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801914c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019154:	ee16 ba90 	vmov	fp, s13
 8019158:	940a      	str	r4, [sp, #40]	; 0x28
 801915a:	d508      	bpl.n	801916e <_dtoa_r+0x15e>
 801915c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019160:	eeb4 6b47 	vcmp.f64	d6, d7
 8019164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019168:	bf18      	it	ne
 801916a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801916e:	f1bb 0f16 	cmp.w	fp, #22
 8019172:	d82f      	bhi.n	80191d4 <_dtoa_r+0x1c4>
 8019174:	4b62      	ldr	r3, [pc, #392]	; (8019300 <_dtoa_r+0x2f0>)
 8019176:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801917a:	ed93 7b00 	vldr	d7, [r3]
 801917e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019186:	d501      	bpl.n	801918c <_dtoa_r+0x17c>
 8019188:	f10b 3bff 	add.w	fp, fp, #4294967295
 801918c:	2300      	movs	r3, #0
 801918e:	e022      	b.n	80191d6 <_dtoa_r+0x1c6>
 8019190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019192:	4401      	add	r1, r0
 8019194:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8019198:	2b20      	cmp	r3, #32
 801919a:	bfc1      	itttt	gt
 801919c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80191a0:	fa04 f303 	lslgt.w	r3, r4, r3
 80191a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80191a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80191ac:	bfd6      	itet	le
 80191ae:	f1c3 0320 	rsble	r3, r3, #32
 80191b2:	ea43 0808 	orrgt.w	r8, r3, r8
 80191b6:	fa08 f803 	lslle.w	r8, r8, r3
 80191ba:	ee07 8a90 	vmov	s15, r8
 80191be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80191c2:	3901      	subs	r1, #1
 80191c4:	ee17 4a90 	vmov	r4, s15
 80191c8:	ec53 2b17 	vmov	r2, r3, d7
 80191cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80191d0:	2401      	movs	r4, #1
 80191d2:	e7a3      	b.n	801911c <_dtoa_r+0x10c>
 80191d4:	2301      	movs	r3, #1
 80191d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80191d8:	1a43      	subs	r3, r0, r1
 80191da:	1e5a      	subs	r2, r3, #1
 80191dc:	bf45      	ittet	mi
 80191de:	f1c3 0301 	rsbmi	r3, r3, #1
 80191e2:	9304      	strmi	r3, [sp, #16]
 80191e4:	2300      	movpl	r3, #0
 80191e6:	2300      	movmi	r3, #0
 80191e8:	9205      	str	r2, [sp, #20]
 80191ea:	bf54      	ite	pl
 80191ec:	9304      	strpl	r3, [sp, #16]
 80191ee:	9305      	strmi	r3, [sp, #20]
 80191f0:	f1bb 0f00 	cmp.w	fp, #0
 80191f4:	db18      	blt.n	8019228 <_dtoa_r+0x218>
 80191f6:	9b05      	ldr	r3, [sp, #20]
 80191f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80191fc:	445b      	add	r3, fp
 80191fe:	9305      	str	r3, [sp, #20]
 8019200:	2300      	movs	r3, #0
 8019202:	9a06      	ldr	r2, [sp, #24]
 8019204:	2a09      	cmp	r2, #9
 8019206:	d849      	bhi.n	801929c <_dtoa_r+0x28c>
 8019208:	2a05      	cmp	r2, #5
 801920a:	bfc4      	itt	gt
 801920c:	3a04      	subgt	r2, #4
 801920e:	9206      	strgt	r2, [sp, #24]
 8019210:	9a06      	ldr	r2, [sp, #24]
 8019212:	f1a2 0202 	sub.w	r2, r2, #2
 8019216:	bfcc      	ite	gt
 8019218:	2400      	movgt	r4, #0
 801921a:	2401      	movle	r4, #1
 801921c:	2a03      	cmp	r2, #3
 801921e:	d848      	bhi.n	80192b2 <_dtoa_r+0x2a2>
 8019220:	e8df f002 	tbb	[pc, r2]
 8019224:	3a2c2e0b 	.word	0x3a2c2e0b
 8019228:	9b04      	ldr	r3, [sp, #16]
 801922a:	2200      	movs	r2, #0
 801922c:	eba3 030b 	sub.w	r3, r3, fp
 8019230:	9304      	str	r3, [sp, #16]
 8019232:	9209      	str	r2, [sp, #36]	; 0x24
 8019234:	f1cb 0300 	rsb	r3, fp, #0
 8019238:	e7e3      	b.n	8019202 <_dtoa_r+0x1f2>
 801923a:	2200      	movs	r2, #0
 801923c:	9207      	str	r2, [sp, #28]
 801923e:	9a08      	ldr	r2, [sp, #32]
 8019240:	2a00      	cmp	r2, #0
 8019242:	dc39      	bgt.n	80192b8 <_dtoa_r+0x2a8>
 8019244:	f04f 0a01 	mov.w	sl, #1
 8019248:	46d1      	mov	r9, sl
 801924a:	4652      	mov	r2, sl
 801924c:	f8cd a020 	str.w	sl, [sp, #32]
 8019250:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8019252:	2100      	movs	r1, #0
 8019254:	6079      	str	r1, [r7, #4]
 8019256:	2004      	movs	r0, #4
 8019258:	f100 0c14 	add.w	ip, r0, #20
 801925c:	4594      	cmp	ip, r2
 801925e:	6879      	ldr	r1, [r7, #4]
 8019260:	d92f      	bls.n	80192c2 <_dtoa_r+0x2b2>
 8019262:	4630      	mov	r0, r6
 8019264:	930d      	str	r3, [sp, #52]	; 0x34
 8019266:	f000 ffe1 	bl	801a22c <_Balloc>
 801926a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801926c:	9001      	str	r0, [sp, #4]
 801926e:	4602      	mov	r2, r0
 8019270:	2800      	cmp	r0, #0
 8019272:	d149      	bne.n	8019308 <_dtoa_r+0x2f8>
 8019274:	4b23      	ldr	r3, [pc, #140]	; (8019304 <_dtoa_r+0x2f4>)
 8019276:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801927a:	e6e1      	b.n	8019040 <_dtoa_r+0x30>
 801927c:	2201      	movs	r2, #1
 801927e:	e7dd      	b.n	801923c <_dtoa_r+0x22c>
 8019280:	2200      	movs	r2, #0
 8019282:	9207      	str	r2, [sp, #28]
 8019284:	9a08      	ldr	r2, [sp, #32]
 8019286:	eb0b 0a02 	add.w	sl, fp, r2
 801928a:	f10a 0901 	add.w	r9, sl, #1
 801928e:	464a      	mov	r2, r9
 8019290:	2a01      	cmp	r2, #1
 8019292:	bfb8      	it	lt
 8019294:	2201      	movlt	r2, #1
 8019296:	e7db      	b.n	8019250 <_dtoa_r+0x240>
 8019298:	2201      	movs	r2, #1
 801929a:	e7f2      	b.n	8019282 <_dtoa_r+0x272>
 801929c:	2401      	movs	r4, #1
 801929e:	2200      	movs	r2, #0
 80192a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80192a4:	f04f 3aff 	mov.w	sl, #4294967295
 80192a8:	2100      	movs	r1, #0
 80192aa:	46d1      	mov	r9, sl
 80192ac:	2212      	movs	r2, #18
 80192ae:	9108      	str	r1, [sp, #32]
 80192b0:	e7ce      	b.n	8019250 <_dtoa_r+0x240>
 80192b2:	2201      	movs	r2, #1
 80192b4:	9207      	str	r2, [sp, #28]
 80192b6:	e7f5      	b.n	80192a4 <_dtoa_r+0x294>
 80192b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80192bc:	46d1      	mov	r9, sl
 80192be:	4652      	mov	r2, sl
 80192c0:	e7c6      	b.n	8019250 <_dtoa_r+0x240>
 80192c2:	3101      	adds	r1, #1
 80192c4:	6079      	str	r1, [r7, #4]
 80192c6:	0040      	lsls	r0, r0, #1
 80192c8:	e7c6      	b.n	8019258 <_dtoa_r+0x248>
 80192ca:	bf00      	nop
 80192cc:	f3af 8000 	nop.w
 80192d0:	636f4361 	.word	0x636f4361
 80192d4:	3fd287a7 	.word	0x3fd287a7
 80192d8:	8b60c8b3 	.word	0x8b60c8b3
 80192dc:	3fc68a28 	.word	0x3fc68a28
 80192e0:	509f79fb 	.word	0x509f79fb
 80192e4:	3fd34413 	.word	0x3fd34413
 80192e8:	0801c7ae 	.word	0x0801c7ae
 80192ec:	0801c7c5 	.word	0x0801c7c5
 80192f0:	7ff00000 	.word	0x7ff00000
 80192f4:	0801c7aa 	.word	0x0801c7aa
 80192f8:	0801c7a1 	.word	0x0801c7a1
 80192fc:	0801ca1a 	.word	0x0801ca1a
 8019300:	0801c930 	.word	0x0801c930
 8019304:	0801c820 	.word	0x0801c820
 8019308:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801930a:	9901      	ldr	r1, [sp, #4]
 801930c:	6011      	str	r1, [r2, #0]
 801930e:	f1b9 0f0e 	cmp.w	r9, #14
 8019312:	d86c      	bhi.n	80193ee <_dtoa_r+0x3de>
 8019314:	2c00      	cmp	r4, #0
 8019316:	d06a      	beq.n	80193ee <_dtoa_r+0x3de>
 8019318:	f1bb 0f00 	cmp.w	fp, #0
 801931c:	f340 80a0 	ble.w	8019460 <_dtoa_r+0x450>
 8019320:	49c1      	ldr	r1, [pc, #772]	; (8019628 <_dtoa_r+0x618>)
 8019322:	f00b 020f 	and.w	r2, fp, #15
 8019326:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801932a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801932e:	ed92 7b00 	vldr	d7, [r2]
 8019332:	ea4f 112b 	mov.w	r1, fp, asr #4
 8019336:	f000 8087 	beq.w	8019448 <_dtoa_r+0x438>
 801933a:	4abc      	ldr	r2, [pc, #752]	; (801962c <_dtoa_r+0x61c>)
 801933c:	ed92 6b08 	vldr	d6, [r2, #32]
 8019340:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019344:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019348:	f001 010f 	and.w	r1, r1, #15
 801934c:	2203      	movs	r2, #3
 801934e:	48b7      	ldr	r0, [pc, #732]	; (801962c <_dtoa_r+0x61c>)
 8019350:	2900      	cmp	r1, #0
 8019352:	d17b      	bne.n	801944c <_dtoa_r+0x43c>
 8019354:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019358:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801935c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019362:	2900      	cmp	r1, #0
 8019364:	f000 80a2 	beq.w	80194ac <_dtoa_r+0x49c>
 8019368:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801936c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019370:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019378:	f140 8098 	bpl.w	80194ac <_dtoa_r+0x49c>
 801937c:	f1b9 0f00 	cmp.w	r9, #0
 8019380:	f000 8094 	beq.w	80194ac <_dtoa_r+0x49c>
 8019384:	f1ba 0f00 	cmp.w	sl, #0
 8019388:	dd2f      	ble.n	80193ea <_dtoa_r+0x3da>
 801938a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801938e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019392:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019396:	f10b 37ff 	add.w	r7, fp, #4294967295
 801939a:	3201      	adds	r2, #1
 801939c:	4650      	mov	r0, sl
 801939e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80193a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80193a6:	ee07 2a90 	vmov	s15, r2
 80193aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80193ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 80193b2:	ee15 4a90 	vmov	r4, s11
 80193b6:	ec52 1b15 	vmov	r1, r2, d5
 80193ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80193be:	2800      	cmp	r0, #0
 80193c0:	d177      	bne.n	80194b2 <_dtoa_r+0x4a2>
 80193c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80193c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80193ca:	ec42 1b17 	vmov	d7, r1, r2
 80193ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193d6:	f300 8263 	bgt.w	80198a0 <_dtoa_r+0x890>
 80193da:	eeb1 7b47 	vneg.f64	d7, d7
 80193de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193e6:	f100 8258 	bmi.w	801989a <_dtoa_r+0x88a>
 80193ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80193ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193f0:	2a00      	cmp	r2, #0
 80193f2:	f2c0 811d 	blt.w	8019630 <_dtoa_r+0x620>
 80193f6:	f1bb 0f0e 	cmp.w	fp, #14
 80193fa:	f300 8119 	bgt.w	8019630 <_dtoa_r+0x620>
 80193fe:	4b8a      	ldr	r3, [pc, #552]	; (8019628 <_dtoa_r+0x618>)
 8019400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019404:	ed93 6b00 	vldr	d6, [r3]
 8019408:	9b08      	ldr	r3, [sp, #32]
 801940a:	2b00      	cmp	r3, #0
 801940c:	f280 80b7 	bge.w	801957e <_dtoa_r+0x56e>
 8019410:	f1b9 0f00 	cmp.w	r9, #0
 8019414:	f300 80b3 	bgt.w	801957e <_dtoa_r+0x56e>
 8019418:	f040 823f 	bne.w	801989a <_dtoa_r+0x88a>
 801941c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019420:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019424:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019428:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019430:	464c      	mov	r4, r9
 8019432:	464f      	mov	r7, r9
 8019434:	f280 8215 	bge.w	8019862 <_dtoa_r+0x852>
 8019438:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801943c:	2331      	movs	r3, #49	; 0x31
 801943e:	f808 3b01 	strb.w	r3, [r8], #1
 8019442:	f10b 0b01 	add.w	fp, fp, #1
 8019446:	e211      	b.n	801986c <_dtoa_r+0x85c>
 8019448:	2202      	movs	r2, #2
 801944a:	e780      	b.n	801934e <_dtoa_r+0x33e>
 801944c:	07cc      	lsls	r4, r1, #31
 801944e:	d504      	bpl.n	801945a <_dtoa_r+0x44a>
 8019450:	ed90 6b00 	vldr	d6, [r0]
 8019454:	3201      	adds	r2, #1
 8019456:	ee27 7b06 	vmul.f64	d7, d7, d6
 801945a:	1049      	asrs	r1, r1, #1
 801945c:	3008      	adds	r0, #8
 801945e:	e777      	b.n	8019350 <_dtoa_r+0x340>
 8019460:	d022      	beq.n	80194a8 <_dtoa_r+0x498>
 8019462:	f1cb 0100 	rsb	r1, fp, #0
 8019466:	4a70      	ldr	r2, [pc, #448]	; (8019628 <_dtoa_r+0x618>)
 8019468:	f001 000f 	and.w	r0, r1, #15
 801946c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019470:	ed92 7b00 	vldr	d7, [r2]
 8019474:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019478:	ed8d 7b02 	vstr	d7, [sp, #8]
 801947c:	486b      	ldr	r0, [pc, #428]	; (801962c <_dtoa_r+0x61c>)
 801947e:	1109      	asrs	r1, r1, #4
 8019480:	2400      	movs	r4, #0
 8019482:	2202      	movs	r2, #2
 8019484:	b929      	cbnz	r1, 8019492 <_dtoa_r+0x482>
 8019486:	2c00      	cmp	r4, #0
 8019488:	f43f af6a 	beq.w	8019360 <_dtoa_r+0x350>
 801948c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019490:	e766      	b.n	8019360 <_dtoa_r+0x350>
 8019492:	07cf      	lsls	r7, r1, #31
 8019494:	d505      	bpl.n	80194a2 <_dtoa_r+0x492>
 8019496:	ed90 6b00 	vldr	d6, [r0]
 801949a:	3201      	adds	r2, #1
 801949c:	2401      	movs	r4, #1
 801949e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80194a2:	1049      	asrs	r1, r1, #1
 80194a4:	3008      	adds	r0, #8
 80194a6:	e7ed      	b.n	8019484 <_dtoa_r+0x474>
 80194a8:	2202      	movs	r2, #2
 80194aa:	e759      	b.n	8019360 <_dtoa_r+0x350>
 80194ac:	465f      	mov	r7, fp
 80194ae:	4648      	mov	r0, r9
 80194b0:	e775      	b.n	801939e <_dtoa_r+0x38e>
 80194b2:	ec42 1b17 	vmov	d7, r1, r2
 80194b6:	4a5c      	ldr	r2, [pc, #368]	; (8019628 <_dtoa_r+0x618>)
 80194b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80194bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80194c0:	9a01      	ldr	r2, [sp, #4]
 80194c2:	1814      	adds	r4, r2, r0
 80194c4:	9a07      	ldr	r2, [sp, #28]
 80194c6:	b352      	cbz	r2, 801951e <_dtoa_r+0x50e>
 80194c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80194cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80194d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80194d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80194d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80194dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80194e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80194e4:	ee14 2a90 	vmov	r2, s9
 80194e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80194ec:	3230      	adds	r2, #48	; 0x30
 80194ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80194f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80194f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194fa:	f808 2b01 	strb.w	r2, [r8], #1
 80194fe:	d439      	bmi.n	8019574 <_dtoa_r+0x564>
 8019500:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019504:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801950c:	d472      	bmi.n	80195f4 <_dtoa_r+0x5e4>
 801950e:	45a0      	cmp	r8, r4
 8019510:	f43f af6b 	beq.w	80193ea <_dtoa_r+0x3da>
 8019514:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019518:	ee26 6b03 	vmul.f64	d6, d6, d3
 801951c:	e7e0      	b.n	80194e0 <_dtoa_r+0x4d0>
 801951e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019522:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019526:	4621      	mov	r1, r4
 8019528:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801952c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019530:	ee14 2a90 	vmov	r2, s9
 8019534:	3230      	adds	r2, #48	; 0x30
 8019536:	f808 2b01 	strb.w	r2, [r8], #1
 801953a:	45a0      	cmp	r8, r4
 801953c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019540:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019544:	d118      	bne.n	8019578 <_dtoa_r+0x568>
 8019546:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801954a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801954e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019556:	dc4d      	bgt.n	80195f4 <_dtoa_r+0x5e4>
 8019558:	ee35 7b47 	vsub.f64	d7, d5, d7
 801955c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019564:	f57f af41 	bpl.w	80193ea <_dtoa_r+0x3da>
 8019568:	4688      	mov	r8, r1
 801956a:	3901      	subs	r1, #1
 801956c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019570:	2b30      	cmp	r3, #48	; 0x30
 8019572:	d0f9      	beq.n	8019568 <_dtoa_r+0x558>
 8019574:	46bb      	mov	fp, r7
 8019576:	e02a      	b.n	80195ce <_dtoa_r+0x5be>
 8019578:	ee26 6b03 	vmul.f64	d6, d6, d3
 801957c:	e7d6      	b.n	801952c <_dtoa_r+0x51c>
 801957e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019582:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8019586:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801958a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801958e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019592:	ee15 3a10 	vmov	r3, s10
 8019596:	3330      	adds	r3, #48	; 0x30
 8019598:	f808 3b01 	strb.w	r3, [r8], #1
 801959c:	9b01      	ldr	r3, [sp, #4]
 801959e:	eba8 0303 	sub.w	r3, r8, r3
 80195a2:	4599      	cmp	r9, r3
 80195a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80195a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80195ac:	d133      	bne.n	8019616 <_dtoa_r+0x606>
 80195ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80195b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80195b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ba:	dc1a      	bgt.n	80195f2 <_dtoa_r+0x5e2>
 80195bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80195c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c4:	d103      	bne.n	80195ce <_dtoa_r+0x5be>
 80195c6:	ee15 3a10 	vmov	r3, s10
 80195ca:	07d9      	lsls	r1, r3, #31
 80195cc:	d411      	bmi.n	80195f2 <_dtoa_r+0x5e2>
 80195ce:	4629      	mov	r1, r5
 80195d0:	4630      	mov	r0, r6
 80195d2:	f000 fe6b 	bl	801a2ac <_Bfree>
 80195d6:	2300      	movs	r3, #0
 80195d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80195da:	f888 3000 	strb.w	r3, [r8]
 80195de:	f10b 0301 	add.w	r3, fp, #1
 80195e2:	6013      	str	r3, [r2, #0]
 80195e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	f43f ad61 	beq.w	80190ae <_dtoa_r+0x9e>
 80195ec:	f8c3 8000 	str.w	r8, [r3]
 80195f0:	e55d      	b.n	80190ae <_dtoa_r+0x9e>
 80195f2:	465f      	mov	r7, fp
 80195f4:	4643      	mov	r3, r8
 80195f6:	4698      	mov	r8, r3
 80195f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80195fc:	2a39      	cmp	r2, #57	; 0x39
 80195fe:	d106      	bne.n	801960e <_dtoa_r+0x5fe>
 8019600:	9a01      	ldr	r2, [sp, #4]
 8019602:	429a      	cmp	r2, r3
 8019604:	d1f7      	bne.n	80195f6 <_dtoa_r+0x5e6>
 8019606:	9901      	ldr	r1, [sp, #4]
 8019608:	2230      	movs	r2, #48	; 0x30
 801960a:	3701      	adds	r7, #1
 801960c:	700a      	strb	r2, [r1, #0]
 801960e:	781a      	ldrb	r2, [r3, #0]
 8019610:	3201      	adds	r2, #1
 8019612:	701a      	strb	r2, [r3, #0]
 8019614:	e7ae      	b.n	8019574 <_dtoa_r+0x564>
 8019616:	ee27 7b04 	vmul.f64	d7, d7, d4
 801961a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801961e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019622:	d1b2      	bne.n	801958a <_dtoa_r+0x57a>
 8019624:	e7d3      	b.n	80195ce <_dtoa_r+0x5be>
 8019626:	bf00      	nop
 8019628:	0801c930 	.word	0x0801c930
 801962c:	0801c908 	.word	0x0801c908
 8019630:	9907      	ldr	r1, [sp, #28]
 8019632:	2900      	cmp	r1, #0
 8019634:	f000 80d0 	beq.w	80197d8 <_dtoa_r+0x7c8>
 8019638:	9906      	ldr	r1, [sp, #24]
 801963a:	2901      	cmp	r1, #1
 801963c:	f300 80b4 	bgt.w	80197a8 <_dtoa_r+0x798>
 8019640:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019642:	2900      	cmp	r1, #0
 8019644:	f000 80ac 	beq.w	80197a0 <_dtoa_r+0x790>
 8019648:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801964c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019650:	461c      	mov	r4, r3
 8019652:	930a      	str	r3, [sp, #40]	; 0x28
 8019654:	9b04      	ldr	r3, [sp, #16]
 8019656:	4413      	add	r3, r2
 8019658:	9304      	str	r3, [sp, #16]
 801965a:	9b05      	ldr	r3, [sp, #20]
 801965c:	2101      	movs	r1, #1
 801965e:	4413      	add	r3, r2
 8019660:	4630      	mov	r0, r6
 8019662:	9305      	str	r3, [sp, #20]
 8019664:	f000 ff24 	bl	801a4b0 <__i2b>
 8019668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801966a:	4607      	mov	r7, r0
 801966c:	f1b8 0f00 	cmp.w	r8, #0
 8019670:	dd0d      	ble.n	801968e <_dtoa_r+0x67e>
 8019672:	9a05      	ldr	r2, [sp, #20]
 8019674:	2a00      	cmp	r2, #0
 8019676:	dd0a      	ble.n	801968e <_dtoa_r+0x67e>
 8019678:	4542      	cmp	r2, r8
 801967a:	9904      	ldr	r1, [sp, #16]
 801967c:	bfa8      	it	ge
 801967e:	4642      	movge	r2, r8
 8019680:	1a89      	subs	r1, r1, r2
 8019682:	9104      	str	r1, [sp, #16]
 8019684:	9905      	ldr	r1, [sp, #20]
 8019686:	eba8 0802 	sub.w	r8, r8, r2
 801968a:	1a8a      	subs	r2, r1, r2
 801968c:	9205      	str	r2, [sp, #20]
 801968e:	b303      	cbz	r3, 80196d2 <_dtoa_r+0x6c2>
 8019690:	9a07      	ldr	r2, [sp, #28]
 8019692:	2a00      	cmp	r2, #0
 8019694:	f000 80a5 	beq.w	80197e2 <_dtoa_r+0x7d2>
 8019698:	2c00      	cmp	r4, #0
 801969a:	dd13      	ble.n	80196c4 <_dtoa_r+0x6b4>
 801969c:	4639      	mov	r1, r7
 801969e:	4622      	mov	r2, r4
 80196a0:	4630      	mov	r0, r6
 80196a2:	930d      	str	r3, [sp, #52]	; 0x34
 80196a4:	f000 ffc4 	bl	801a630 <__pow5mult>
 80196a8:	462a      	mov	r2, r5
 80196aa:	4601      	mov	r1, r0
 80196ac:	4607      	mov	r7, r0
 80196ae:	4630      	mov	r0, r6
 80196b0:	f000 ff14 	bl	801a4dc <__multiply>
 80196b4:	4629      	mov	r1, r5
 80196b6:	900a      	str	r0, [sp, #40]	; 0x28
 80196b8:	4630      	mov	r0, r6
 80196ba:	f000 fdf7 	bl	801a2ac <_Bfree>
 80196be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80196c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196c2:	4615      	mov	r5, r2
 80196c4:	1b1a      	subs	r2, r3, r4
 80196c6:	d004      	beq.n	80196d2 <_dtoa_r+0x6c2>
 80196c8:	4629      	mov	r1, r5
 80196ca:	4630      	mov	r0, r6
 80196cc:	f000 ffb0 	bl	801a630 <__pow5mult>
 80196d0:	4605      	mov	r5, r0
 80196d2:	2101      	movs	r1, #1
 80196d4:	4630      	mov	r0, r6
 80196d6:	f000 feeb 	bl	801a4b0 <__i2b>
 80196da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196dc:	2b00      	cmp	r3, #0
 80196de:	4604      	mov	r4, r0
 80196e0:	f340 8081 	ble.w	80197e6 <_dtoa_r+0x7d6>
 80196e4:	461a      	mov	r2, r3
 80196e6:	4601      	mov	r1, r0
 80196e8:	4630      	mov	r0, r6
 80196ea:	f000 ffa1 	bl	801a630 <__pow5mult>
 80196ee:	9b06      	ldr	r3, [sp, #24]
 80196f0:	2b01      	cmp	r3, #1
 80196f2:	4604      	mov	r4, r0
 80196f4:	dd7a      	ble.n	80197ec <_dtoa_r+0x7dc>
 80196f6:	2300      	movs	r3, #0
 80196f8:	930a      	str	r3, [sp, #40]	; 0x28
 80196fa:	6922      	ldr	r2, [r4, #16]
 80196fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019700:	6910      	ldr	r0, [r2, #16]
 8019702:	f000 fe85 	bl	801a410 <__hi0bits>
 8019706:	f1c0 0020 	rsb	r0, r0, #32
 801970a:	9b05      	ldr	r3, [sp, #20]
 801970c:	4418      	add	r0, r3
 801970e:	f010 001f 	ands.w	r0, r0, #31
 8019712:	f000 808c 	beq.w	801982e <_dtoa_r+0x81e>
 8019716:	f1c0 0220 	rsb	r2, r0, #32
 801971a:	2a04      	cmp	r2, #4
 801971c:	f340 8085 	ble.w	801982a <_dtoa_r+0x81a>
 8019720:	f1c0 001c 	rsb	r0, r0, #28
 8019724:	9b04      	ldr	r3, [sp, #16]
 8019726:	4403      	add	r3, r0
 8019728:	9304      	str	r3, [sp, #16]
 801972a:	9b05      	ldr	r3, [sp, #20]
 801972c:	4403      	add	r3, r0
 801972e:	4480      	add	r8, r0
 8019730:	9305      	str	r3, [sp, #20]
 8019732:	9b04      	ldr	r3, [sp, #16]
 8019734:	2b00      	cmp	r3, #0
 8019736:	dd05      	ble.n	8019744 <_dtoa_r+0x734>
 8019738:	4629      	mov	r1, r5
 801973a:	461a      	mov	r2, r3
 801973c:	4630      	mov	r0, r6
 801973e:	f000 ffd1 	bl	801a6e4 <__lshift>
 8019742:	4605      	mov	r5, r0
 8019744:	9b05      	ldr	r3, [sp, #20]
 8019746:	2b00      	cmp	r3, #0
 8019748:	dd05      	ble.n	8019756 <_dtoa_r+0x746>
 801974a:	4621      	mov	r1, r4
 801974c:	461a      	mov	r2, r3
 801974e:	4630      	mov	r0, r6
 8019750:	f000 ffc8 	bl	801a6e4 <__lshift>
 8019754:	4604      	mov	r4, r0
 8019756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019758:	2b00      	cmp	r3, #0
 801975a:	d06a      	beq.n	8019832 <_dtoa_r+0x822>
 801975c:	4621      	mov	r1, r4
 801975e:	4628      	mov	r0, r5
 8019760:	f001 f830 	bl	801a7c4 <__mcmp>
 8019764:	2800      	cmp	r0, #0
 8019766:	da64      	bge.n	8019832 <_dtoa_r+0x822>
 8019768:	2300      	movs	r3, #0
 801976a:	4629      	mov	r1, r5
 801976c:	220a      	movs	r2, #10
 801976e:	4630      	mov	r0, r6
 8019770:	f000 fdbe 	bl	801a2f0 <__multadd>
 8019774:	9b07      	ldr	r3, [sp, #28]
 8019776:	f10b 3bff 	add.w	fp, fp, #4294967295
 801977a:	4605      	mov	r5, r0
 801977c:	2b00      	cmp	r3, #0
 801977e:	f000 8191 	beq.w	8019aa4 <_dtoa_r+0xa94>
 8019782:	4639      	mov	r1, r7
 8019784:	2300      	movs	r3, #0
 8019786:	220a      	movs	r2, #10
 8019788:	4630      	mov	r0, r6
 801978a:	f000 fdb1 	bl	801a2f0 <__multadd>
 801978e:	f1ba 0f00 	cmp.w	sl, #0
 8019792:	4607      	mov	r7, r0
 8019794:	f300 808d 	bgt.w	80198b2 <_dtoa_r+0x8a2>
 8019798:	9b06      	ldr	r3, [sp, #24]
 801979a:	2b02      	cmp	r3, #2
 801979c:	dc50      	bgt.n	8019840 <_dtoa_r+0x830>
 801979e:	e088      	b.n	80198b2 <_dtoa_r+0x8a2>
 80197a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80197a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80197a6:	e751      	b.n	801964c <_dtoa_r+0x63c>
 80197a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80197ac:	42a3      	cmp	r3, r4
 80197ae:	bfbf      	itttt	lt
 80197b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80197b2:	1ae3      	sublt	r3, r4, r3
 80197b4:	18d2      	addlt	r2, r2, r3
 80197b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80197b8:	bfb6      	itet	lt
 80197ba:	4623      	movlt	r3, r4
 80197bc:	1b1c      	subge	r4, r3, r4
 80197be:	2400      	movlt	r4, #0
 80197c0:	f1b9 0f00 	cmp.w	r9, #0
 80197c4:	bfb5      	itete	lt
 80197c6:	9a04      	ldrlt	r2, [sp, #16]
 80197c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80197cc:	eba2 0809 	sublt.w	r8, r2, r9
 80197d0:	464a      	movge	r2, r9
 80197d2:	bfb8      	it	lt
 80197d4:	2200      	movlt	r2, #0
 80197d6:	e73c      	b.n	8019652 <_dtoa_r+0x642>
 80197d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80197dc:	9f07      	ldr	r7, [sp, #28]
 80197de:	461c      	mov	r4, r3
 80197e0:	e744      	b.n	801966c <_dtoa_r+0x65c>
 80197e2:	461a      	mov	r2, r3
 80197e4:	e770      	b.n	80196c8 <_dtoa_r+0x6b8>
 80197e6:	9b06      	ldr	r3, [sp, #24]
 80197e8:	2b01      	cmp	r3, #1
 80197ea:	dc18      	bgt.n	801981e <_dtoa_r+0x80e>
 80197ec:	9b02      	ldr	r3, [sp, #8]
 80197ee:	b9b3      	cbnz	r3, 801981e <_dtoa_r+0x80e>
 80197f0:	9b03      	ldr	r3, [sp, #12]
 80197f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80197f6:	b9a2      	cbnz	r2, 8019822 <_dtoa_r+0x812>
 80197f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80197fc:	0d12      	lsrs	r2, r2, #20
 80197fe:	0512      	lsls	r2, r2, #20
 8019800:	b18a      	cbz	r2, 8019826 <_dtoa_r+0x816>
 8019802:	9b04      	ldr	r3, [sp, #16]
 8019804:	3301      	adds	r3, #1
 8019806:	9304      	str	r3, [sp, #16]
 8019808:	9b05      	ldr	r3, [sp, #20]
 801980a:	3301      	adds	r3, #1
 801980c:	9305      	str	r3, [sp, #20]
 801980e:	2301      	movs	r3, #1
 8019810:	930a      	str	r3, [sp, #40]	; 0x28
 8019812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019814:	2b00      	cmp	r3, #0
 8019816:	f47f af70 	bne.w	80196fa <_dtoa_r+0x6ea>
 801981a:	2001      	movs	r0, #1
 801981c:	e775      	b.n	801970a <_dtoa_r+0x6fa>
 801981e:	2300      	movs	r3, #0
 8019820:	e7f6      	b.n	8019810 <_dtoa_r+0x800>
 8019822:	9b02      	ldr	r3, [sp, #8]
 8019824:	e7f4      	b.n	8019810 <_dtoa_r+0x800>
 8019826:	920a      	str	r2, [sp, #40]	; 0x28
 8019828:	e7f3      	b.n	8019812 <_dtoa_r+0x802>
 801982a:	d082      	beq.n	8019732 <_dtoa_r+0x722>
 801982c:	4610      	mov	r0, r2
 801982e:	301c      	adds	r0, #28
 8019830:	e778      	b.n	8019724 <_dtoa_r+0x714>
 8019832:	f1b9 0f00 	cmp.w	r9, #0
 8019836:	dc37      	bgt.n	80198a8 <_dtoa_r+0x898>
 8019838:	9b06      	ldr	r3, [sp, #24]
 801983a:	2b02      	cmp	r3, #2
 801983c:	dd34      	ble.n	80198a8 <_dtoa_r+0x898>
 801983e:	46ca      	mov	sl, r9
 8019840:	f1ba 0f00 	cmp.w	sl, #0
 8019844:	d10d      	bne.n	8019862 <_dtoa_r+0x852>
 8019846:	4621      	mov	r1, r4
 8019848:	4653      	mov	r3, sl
 801984a:	2205      	movs	r2, #5
 801984c:	4630      	mov	r0, r6
 801984e:	f000 fd4f 	bl	801a2f0 <__multadd>
 8019852:	4601      	mov	r1, r0
 8019854:	4604      	mov	r4, r0
 8019856:	4628      	mov	r0, r5
 8019858:	f000 ffb4 	bl	801a7c4 <__mcmp>
 801985c:	2800      	cmp	r0, #0
 801985e:	f73f adeb 	bgt.w	8019438 <_dtoa_r+0x428>
 8019862:	9b08      	ldr	r3, [sp, #32]
 8019864:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019868:	ea6f 0b03 	mvn.w	fp, r3
 801986c:	f04f 0900 	mov.w	r9, #0
 8019870:	4621      	mov	r1, r4
 8019872:	4630      	mov	r0, r6
 8019874:	f000 fd1a 	bl	801a2ac <_Bfree>
 8019878:	2f00      	cmp	r7, #0
 801987a:	f43f aea8 	beq.w	80195ce <_dtoa_r+0x5be>
 801987e:	f1b9 0f00 	cmp.w	r9, #0
 8019882:	d005      	beq.n	8019890 <_dtoa_r+0x880>
 8019884:	45b9      	cmp	r9, r7
 8019886:	d003      	beq.n	8019890 <_dtoa_r+0x880>
 8019888:	4649      	mov	r1, r9
 801988a:	4630      	mov	r0, r6
 801988c:	f000 fd0e 	bl	801a2ac <_Bfree>
 8019890:	4639      	mov	r1, r7
 8019892:	4630      	mov	r0, r6
 8019894:	f000 fd0a 	bl	801a2ac <_Bfree>
 8019898:	e699      	b.n	80195ce <_dtoa_r+0x5be>
 801989a:	2400      	movs	r4, #0
 801989c:	4627      	mov	r7, r4
 801989e:	e7e0      	b.n	8019862 <_dtoa_r+0x852>
 80198a0:	46bb      	mov	fp, r7
 80198a2:	4604      	mov	r4, r0
 80198a4:	4607      	mov	r7, r0
 80198a6:	e5c7      	b.n	8019438 <_dtoa_r+0x428>
 80198a8:	9b07      	ldr	r3, [sp, #28]
 80198aa:	46ca      	mov	sl, r9
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	f000 8100 	beq.w	8019ab2 <_dtoa_r+0xaa2>
 80198b2:	f1b8 0f00 	cmp.w	r8, #0
 80198b6:	dd05      	ble.n	80198c4 <_dtoa_r+0x8b4>
 80198b8:	4639      	mov	r1, r7
 80198ba:	4642      	mov	r2, r8
 80198bc:	4630      	mov	r0, r6
 80198be:	f000 ff11 	bl	801a6e4 <__lshift>
 80198c2:	4607      	mov	r7, r0
 80198c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d05d      	beq.n	8019986 <_dtoa_r+0x976>
 80198ca:	6879      	ldr	r1, [r7, #4]
 80198cc:	4630      	mov	r0, r6
 80198ce:	f000 fcad 	bl	801a22c <_Balloc>
 80198d2:	4680      	mov	r8, r0
 80198d4:	b928      	cbnz	r0, 80198e2 <_dtoa_r+0x8d2>
 80198d6:	4b82      	ldr	r3, [pc, #520]	; (8019ae0 <_dtoa_r+0xad0>)
 80198d8:	4602      	mov	r2, r0
 80198da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80198de:	f7ff bbaf 	b.w	8019040 <_dtoa_r+0x30>
 80198e2:	693a      	ldr	r2, [r7, #16]
 80198e4:	3202      	adds	r2, #2
 80198e6:	0092      	lsls	r2, r2, #2
 80198e8:	f107 010c 	add.w	r1, r7, #12
 80198ec:	300c      	adds	r0, #12
 80198ee:	f7fd fd8b 	bl	8017408 <memcpy>
 80198f2:	2201      	movs	r2, #1
 80198f4:	4641      	mov	r1, r8
 80198f6:	4630      	mov	r0, r6
 80198f8:	f000 fef4 	bl	801a6e4 <__lshift>
 80198fc:	9b01      	ldr	r3, [sp, #4]
 80198fe:	3301      	adds	r3, #1
 8019900:	9304      	str	r3, [sp, #16]
 8019902:	9b01      	ldr	r3, [sp, #4]
 8019904:	4453      	add	r3, sl
 8019906:	9308      	str	r3, [sp, #32]
 8019908:	9b02      	ldr	r3, [sp, #8]
 801990a:	f003 0301 	and.w	r3, r3, #1
 801990e:	46b9      	mov	r9, r7
 8019910:	9307      	str	r3, [sp, #28]
 8019912:	4607      	mov	r7, r0
 8019914:	9b04      	ldr	r3, [sp, #16]
 8019916:	4621      	mov	r1, r4
 8019918:	3b01      	subs	r3, #1
 801991a:	4628      	mov	r0, r5
 801991c:	9302      	str	r3, [sp, #8]
 801991e:	f7ff fae9 	bl	8018ef4 <quorem>
 8019922:	4603      	mov	r3, r0
 8019924:	3330      	adds	r3, #48	; 0x30
 8019926:	9005      	str	r0, [sp, #20]
 8019928:	4649      	mov	r1, r9
 801992a:	4628      	mov	r0, r5
 801992c:	9309      	str	r3, [sp, #36]	; 0x24
 801992e:	f000 ff49 	bl	801a7c4 <__mcmp>
 8019932:	463a      	mov	r2, r7
 8019934:	4682      	mov	sl, r0
 8019936:	4621      	mov	r1, r4
 8019938:	4630      	mov	r0, r6
 801993a:	f000 ff5f 	bl	801a7fc <__mdiff>
 801993e:	68c2      	ldr	r2, [r0, #12]
 8019940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019942:	4680      	mov	r8, r0
 8019944:	bb0a      	cbnz	r2, 801998a <_dtoa_r+0x97a>
 8019946:	4601      	mov	r1, r0
 8019948:	4628      	mov	r0, r5
 801994a:	f000 ff3b 	bl	801a7c4 <__mcmp>
 801994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019950:	4602      	mov	r2, r0
 8019952:	4641      	mov	r1, r8
 8019954:	4630      	mov	r0, r6
 8019956:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801995a:	f000 fca7 	bl	801a2ac <_Bfree>
 801995e:	9b06      	ldr	r3, [sp, #24]
 8019960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019962:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019966:	ea43 0102 	orr.w	r1, r3, r2
 801996a:	9b07      	ldr	r3, [sp, #28]
 801996c:	430b      	orrs	r3, r1
 801996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019970:	d10d      	bne.n	801998e <_dtoa_r+0x97e>
 8019972:	2b39      	cmp	r3, #57	; 0x39
 8019974:	d029      	beq.n	80199ca <_dtoa_r+0x9ba>
 8019976:	f1ba 0f00 	cmp.w	sl, #0
 801997a:	dd01      	ble.n	8019980 <_dtoa_r+0x970>
 801997c:	9b05      	ldr	r3, [sp, #20]
 801997e:	3331      	adds	r3, #49	; 0x31
 8019980:	9a02      	ldr	r2, [sp, #8]
 8019982:	7013      	strb	r3, [r2, #0]
 8019984:	e774      	b.n	8019870 <_dtoa_r+0x860>
 8019986:	4638      	mov	r0, r7
 8019988:	e7b8      	b.n	80198fc <_dtoa_r+0x8ec>
 801998a:	2201      	movs	r2, #1
 801998c:	e7e1      	b.n	8019952 <_dtoa_r+0x942>
 801998e:	f1ba 0f00 	cmp.w	sl, #0
 8019992:	db06      	blt.n	80199a2 <_dtoa_r+0x992>
 8019994:	9906      	ldr	r1, [sp, #24]
 8019996:	ea41 0a0a 	orr.w	sl, r1, sl
 801999a:	9907      	ldr	r1, [sp, #28]
 801999c:	ea5a 0101 	orrs.w	r1, sl, r1
 80199a0:	d120      	bne.n	80199e4 <_dtoa_r+0x9d4>
 80199a2:	2a00      	cmp	r2, #0
 80199a4:	ddec      	ble.n	8019980 <_dtoa_r+0x970>
 80199a6:	4629      	mov	r1, r5
 80199a8:	2201      	movs	r2, #1
 80199aa:	4630      	mov	r0, r6
 80199ac:	9304      	str	r3, [sp, #16]
 80199ae:	f000 fe99 	bl	801a6e4 <__lshift>
 80199b2:	4621      	mov	r1, r4
 80199b4:	4605      	mov	r5, r0
 80199b6:	f000 ff05 	bl	801a7c4 <__mcmp>
 80199ba:	2800      	cmp	r0, #0
 80199bc:	9b04      	ldr	r3, [sp, #16]
 80199be:	dc02      	bgt.n	80199c6 <_dtoa_r+0x9b6>
 80199c0:	d1de      	bne.n	8019980 <_dtoa_r+0x970>
 80199c2:	07da      	lsls	r2, r3, #31
 80199c4:	d5dc      	bpl.n	8019980 <_dtoa_r+0x970>
 80199c6:	2b39      	cmp	r3, #57	; 0x39
 80199c8:	d1d8      	bne.n	801997c <_dtoa_r+0x96c>
 80199ca:	9a02      	ldr	r2, [sp, #8]
 80199cc:	2339      	movs	r3, #57	; 0x39
 80199ce:	7013      	strb	r3, [r2, #0]
 80199d0:	4643      	mov	r3, r8
 80199d2:	4698      	mov	r8, r3
 80199d4:	3b01      	subs	r3, #1
 80199d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80199da:	2a39      	cmp	r2, #57	; 0x39
 80199dc:	d051      	beq.n	8019a82 <_dtoa_r+0xa72>
 80199de:	3201      	adds	r2, #1
 80199e0:	701a      	strb	r2, [r3, #0]
 80199e2:	e745      	b.n	8019870 <_dtoa_r+0x860>
 80199e4:	2a00      	cmp	r2, #0
 80199e6:	dd03      	ble.n	80199f0 <_dtoa_r+0x9e0>
 80199e8:	2b39      	cmp	r3, #57	; 0x39
 80199ea:	d0ee      	beq.n	80199ca <_dtoa_r+0x9ba>
 80199ec:	3301      	adds	r3, #1
 80199ee:	e7c7      	b.n	8019980 <_dtoa_r+0x970>
 80199f0:	9a04      	ldr	r2, [sp, #16]
 80199f2:	9908      	ldr	r1, [sp, #32]
 80199f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80199f8:	428a      	cmp	r2, r1
 80199fa:	d02b      	beq.n	8019a54 <_dtoa_r+0xa44>
 80199fc:	4629      	mov	r1, r5
 80199fe:	2300      	movs	r3, #0
 8019a00:	220a      	movs	r2, #10
 8019a02:	4630      	mov	r0, r6
 8019a04:	f000 fc74 	bl	801a2f0 <__multadd>
 8019a08:	45b9      	cmp	r9, r7
 8019a0a:	4605      	mov	r5, r0
 8019a0c:	f04f 0300 	mov.w	r3, #0
 8019a10:	f04f 020a 	mov.w	r2, #10
 8019a14:	4649      	mov	r1, r9
 8019a16:	4630      	mov	r0, r6
 8019a18:	d107      	bne.n	8019a2a <_dtoa_r+0xa1a>
 8019a1a:	f000 fc69 	bl	801a2f0 <__multadd>
 8019a1e:	4681      	mov	r9, r0
 8019a20:	4607      	mov	r7, r0
 8019a22:	9b04      	ldr	r3, [sp, #16]
 8019a24:	3301      	adds	r3, #1
 8019a26:	9304      	str	r3, [sp, #16]
 8019a28:	e774      	b.n	8019914 <_dtoa_r+0x904>
 8019a2a:	f000 fc61 	bl	801a2f0 <__multadd>
 8019a2e:	4639      	mov	r1, r7
 8019a30:	4681      	mov	r9, r0
 8019a32:	2300      	movs	r3, #0
 8019a34:	220a      	movs	r2, #10
 8019a36:	4630      	mov	r0, r6
 8019a38:	f000 fc5a 	bl	801a2f0 <__multadd>
 8019a3c:	4607      	mov	r7, r0
 8019a3e:	e7f0      	b.n	8019a22 <_dtoa_r+0xa12>
 8019a40:	f1ba 0f00 	cmp.w	sl, #0
 8019a44:	9a01      	ldr	r2, [sp, #4]
 8019a46:	bfcc      	ite	gt
 8019a48:	46d0      	movgt	r8, sl
 8019a4a:	f04f 0801 	movle.w	r8, #1
 8019a4e:	4490      	add	r8, r2
 8019a50:	f04f 0900 	mov.w	r9, #0
 8019a54:	4629      	mov	r1, r5
 8019a56:	2201      	movs	r2, #1
 8019a58:	4630      	mov	r0, r6
 8019a5a:	9302      	str	r3, [sp, #8]
 8019a5c:	f000 fe42 	bl	801a6e4 <__lshift>
 8019a60:	4621      	mov	r1, r4
 8019a62:	4605      	mov	r5, r0
 8019a64:	f000 feae 	bl	801a7c4 <__mcmp>
 8019a68:	2800      	cmp	r0, #0
 8019a6a:	dcb1      	bgt.n	80199d0 <_dtoa_r+0x9c0>
 8019a6c:	d102      	bne.n	8019a74 <_dtoa_r+0xa64>
 8019a6e:	9b02      	ldr	r3, [sp, #8]
 8019a70:	07db      	lsls	r3, r3, #31
 8019a72:	d4ad      	bmi.n	80199d0 <_dtoa_r+0x9c0>
 8019a74:	4643      	mov	r3, r8
 8019a76:	4698      	mov	r8, r3
 8019a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019a7c:	2a30      	cmp	r2, #48	; 0x30
 8019a7e:	d0fa      	beq.n	8019a76 <_dtoa_r+0xa66>
 8019a80:	e6f6      	b.n	8019870 <_dtoa_r+0x860>
 8019a82:	9a01      	ldr	r2, [sp, #4]
 8019a84:	429a      	cmp	r2, r3
 8019a86:	d1a4      	bne.n	80199d2 <_dtoa_r+0x9c2>
 8019a88:	f10b 0b01 	add.w	fp, fp, #1
 8019a8c:	2331      	movs	r3, #49	; 0x31
 8019a8e:	e778      	b.n	8019982 <_dtoa_r+0x972>
 8019a90:	4b14      	ldr	r3, [pc, #80]	; (8019ae4 <_dtoa_r+0xad4>)
 8019a92:	f7ff bb27 	b.w	80190e4 <_dtoa_r+0xd4>
 8019a96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	f47f ab03 	bne.w	80190a4 <_dtoa_r+0x94>
 8019a9e:	4b12      	ldr	r3, [pc, #72]	; (8019ae8 <_dtoa_r+0xad8>)
 8019aa0:	f7ff bb20 	b.w	80190e4 <_dtoa_r+0xd4>
 8019aa4:	f1ba 0f00 	cmp.w	sl, #0
 8019aa8:	dc03      	bgt.n	8019ab2 <_dtoa_r+0xaa2>
 8019aaa:	9b06      	ldr	r3, [sp, #24]
 8019aac:	2b02      	cmp	r3, #2
 8019aae:	f73f aec7 	bgt.w	8019840 <_dtoa_r+0x830>
 8019ab2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019ab6:	4621      	mov	r1, r4
 8019ab8:	4628      	mov	r0, r5
 8019aba:	f7ff fa1b 	bl	8018ef4 <quorem>
 8019abe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019ac2:	f808 3b01 	strb.w	r3, [r8], #1
 8019ac6:	9a01      	ldr	r2, [sp, #4]
 8019ac8:	eba8 0202 	sub.w	r2, r8, r2
 8019acc:	4592      	cmp	sl, r2
 8019ace:	ddb7      	ble.n	8019a40 <_dtoa_r+0xa30>
 8019ad0:	4629      	mov	r1, r5
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	220a      	movs	r2, #10
 8019ad6:	4630      	mov	r0, r6
 8019ad8:	f000 fc0a 	bl	801a2f0 <__multadd>
 8019adc:	4605      	mov	r5, r0
 8019ade:	e7ea      	b.n	8019ab6 <_dtoa_r+0xaa6>
 8019ae0:	0801c820 	.word	0x0801c820
 8019ae4:	0801ca19 	.word	0x0801ca19
 8019ae8:	0801c7a1 	.word	0x0801c7a1

08019aec <rshift>:
 8019aec:	6903      	ldr	r3, [r0, #16]
 8019aee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019af2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019af6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019afa:	f100 0414 	add.w	r4, r0, #20
 8019afe:	dd45      	ble.n	8019b8c <rshift+0xa0>
 8019b00:	f011 011f 	ands.w	r1, r1, #31
 8019b04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019b08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019b0c:	d10c      	bne.n	8019b28 <rshift+0x3c>
 8019b0e:	f100 0710 	add.w	r7, r0, #16
 8019b12:	4629      	mov	r1, r5
 8019b14:	42b1      	cmp	r1, r6
 8019b16:	d334      	bcc.n	8019b82 <rshift+0x96>
 8019b18:	1a9b      	subs	r3, r3, r2
 8019b1a:	009b      	lsls	r3, r3, #2
 8019b1c:	1eea      	subs	r2, r5, #3
 8019b1e:	4296      	cmp	r6, r2
 8019b20:	bf38      	it	cc
 8019b22:	2300      	movcc	r3, #0
 8019b24:	4423      	add	r3, r4
 8019b26:	e015      	b.n	8019b54 <rshift+0x68>
 8019b28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019b2c:	f1c1 0820 	rsb	r8, r1, #32
 8019b30:	40cf      	lsrs	r7, r1
 8019b32:	f105 0e04 	add.w	lr, r5, #4
 8019b36:	46a1      	mov	r9, r4
 8019b38:	4576      	cmp	r6, lr
 8019b3a:	46f4      	mov	ip, lr
 8019b3c:	d815      	bhi.n	8019b6a <rshift+0x7e>
 8019b3e:	1a9a      	subs	r2, r3, r2
 8019b40:	0092      	lsls	r2, r2, #2
 8019b42:	3a04      	subs	r2, #4
 8019b44:	3501      	adds	r5, #1
 8019b46:	42ae      	cmp	r6, r5
 8019b48:	bf38      	it	cc
 8019b4a:	2200      	movcc	r2, #0
 8019b4c:	18a3      	adds	r3, r4, r2
 8019b4e:	50a7      	str	r7, [r4, r2]
 8019b50:	b107      	cbz	r7, 8019b54 <rshift+0x68>
 8019b52:	3304      	adds	r3, #4
 8019b54:	1b1a      	subs	r2, r3, r4
 8019b56:	42a3      	cmp	r3, r4
 8019b58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019b5c:	bf08      	it	eq
 8019b5e:	2300      	moveq	r3, #0
 8019b60:	6102      	str	r2, [r0, #16]
 8019b62:	bf08      	it	eq
 8019b64:	6143      	streq	r3, [r0, #20]
 8019b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b6a:	f8dc c000 	ldr.w	ip, [ip]
 8019b6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8019b72:	ea4c 0707 	orr.w	r7, ip, r7
 8019b76:	f849 7b04 	str.w	r7, [r9], #4
 8019b7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019b7e:	40cf      	lsrs	r7, r1
 8019b80:	e7da      	b.n	8019b38 <rshift+0x4c>
 8019b82:	f851 cb04 	ldr.w	ip, [r1], #4
 8019b86:	f847 cf04 	str.w	ip, [r7, #4]!
 8019b8a:	e7c3      	b.n	8019b14 <rshift+0x28>
 8019b8c:	4623      	mov	r3, r4
 8019b8e:	e7e1      	b.n	8019b54 <rshift+0x68>

08019b90 <__hexdig_fun>:
 8019b90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019b94:	2b09      	cmp	r3, #9
 8019b96:	d802      	bhi.n	8019b9e <__hexdig_fun+0xe>
 8019b98:	3820      	subs	r0, #32
 8019b9a:	b2c0      	uxtb	r0, r0
 8019b9c:	4770      	bx	lr
 8019b9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019ba2:	2b05      	cmp	r3, #5
 8019ba4:	d801      	bhi.n	8019baa <__hexdig_fun+0x1a>
 8019ba6:	3847      	subs	r0, #71	; 0x47
 8019ba8:	e7f7      	b.n	8019b9a <__hexdig_fun+0xa>
 8019baa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019bae:	2b05      	cmp	r3, #5
 8019bb0:	d801      	bhi.n	8019bb6 <__hexdig_fun+0x26>
 8019bb2:	3827      	subs	r0, #39	; 0x27
 8019bb4:	e7f1      	b.n	8019b9a <__hexdig_fun+0xa>
 8019bb6:	2000      	movs	r0, #0
 8019bb8:	4770      	bx	lr
	...

08019bbc <__gethex>:
 8019bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bc0:	ed2d 8b02 	vpush	{d8}
 8019bc4:	b089      	sub	sp, #36	; 0x24
 8019bc6:	ee08 0a10 	vmov	s16, r0
 8019bca:	9304      	str	r3, [sp, #16]
 8019bcc:	4bb4      	ldr	r3, [pc, #720]	; (8019ea0 <__gethex+0x2e4>)
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	9301      	str	r3, [sp, #4]
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	468b      	mov	fp, r1
 8019bd6:	4690      	mov	r8, r2
 8019bd8:	f7e6 fba4 	bl	8000324 <strlen>
 8019bdc:	9b01      	ldr	r3, [sp, #4]
 8019bde:	f8db 2000 	ldr.w	r2, [fp]
 8019be2:	4403      	add	r3, r0
 8019be4:	4682      	mov	sl, r0
 8019be6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019bea:	9305      	str	r3, [sp, #20]
 8019bec:	1c93      	adds	r3, r2, #2
 8019bee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019bf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019bf6:	32fe      	adds	r2, #254	; 0xfe
 8019bf8:	18d1      	adds	r1, r2, r3
 8019bfa:	461f      	mov	r7, r3
 8019bfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019c00:	9100      	str	r1, [sp, #0]
 8019c02:	2830      	cmp	r0, #48	; 0x30
 8019c04:	d0f8      	beq.n	8019bf8 <__gethex+0x3c>
 8019c06:	f7ff ffc3 	bl	8019b90 <__hexdig_fun>
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	2800      	cmp	r0, #0
 8019c0e:	d13a      	bne.n	8019c86 <__gethex+0xca>
 8019c10:	9901      	ldr	r1, [sp, #4]
 8019c12:	4652      	mov	r2, sl
 8019c14:	4638      	mov	r0, r7
 8019c16:	f001 fd9f 	bl	801b758 <strncmp>
 8019c1a:	4605      	mov	r5, r0
 8019c1c:	2800      	cmp	r0, #0
 8019c1e:	d168      	bne.n	8019cf2 <__gethex+0x136>
 8019c20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019c24:	eb07 060a 	add.w	r6, r7, sl
 8019c28:	f7ff ffb2 	bl	8019b90 <__hexdig_fun>
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	d062      	beq.n	8019cf6 <__gethex+0x13a>
 8019c30:	4633      	mov	r3, r6
 8019c32:	7818      	ldrb	r0, [r3, #0]
 8019c34:	2830      	cmp	r0, #48	; 0x30
 8019c36:	461f      	mov	r7, r3
 8019c38:	f103 0301 	add.w	r3, r3, #1
 8019c3c:	d0f9      	beq.n	8019c32 <__gethex+0x76>
 8019c3e:	f7ff ffa7 	bl	8019b90 <__hexdig_fun>
 8019c42:	2301      	movs	r3, #1
 8019c44:	fab0 f480 	clz	r4, r0
 8019c48:	0964      	lsrs	r4, r4, #5
 8019c4a:	4635      	mov	r5, r6
 8019c4c:	9300      	str	r3, [sp, #0]
 8019c4e:	463a      	mov	r2, r7
 8019c50:	4616      	mov	r6, r2
 8019c52:	3201      	adds	r2, #1
 8019c54:	7830      	ldrb	r0, [r6, #0]
 8019c56:	f7ff ff9b 	bl	8019b90 <__hexdig_fun>
 8019c5a:	2800      	cmp	r0, #0
 8019c5c:	d1f8      	bne.n	8019c50 <__gethex+0x94>
 8019c5e:	9901      	ldr	r1, [sp, #4]
 8019c60:	4652      	mov	r2, sl
 8019c62:	4630      	mov	r0, r6
 8019c64:	f001 fd78 	bl	801b758 <strncmp>
 8019c68:	b980      	cbnz	r0, 8019c8c <__gethex+0xd0>
 8019c6a:	b94d      	cbnz	r5, 8019c80 <__gethex+0xc4>
 8019c6c:	eb06 050a 	add.w	r5, r6, sl
 8019c70:	462a      	mov	r2, r5
 8019c72:	4616      	mov	r6, r2
 8019c74:	3201      	adds	r2, #1
 8019c76:	7830      	ldrb	r0, [r6, #0]
 8019c78:	f7ff ff8a 	bl	8019b90 <__hexdig_fun>
 8019c7c:	2800      	cmp	r0, #0
 8019c7e:	d1f8      	bne.n	8019c72 <__gethex+0xb6>
 8019c80:	1bad      	subs	r5, r5, r6
 8019c82:	00ad      	lsls	r5, r5, #2
 8019c84:	e004      	b.n	8019c90 <__gethex+0xd4>
 8019c86:	2400      	movs	r4, #0
 8019c88:	4625      	mov	r5, r4
 8019c8a:	e7e0      	b.n	8019c4e <__gethex+0x92>
 8019c8c:	2d00      	cmp	r5, #0
 8019c8e:	d1f7      	bne.n	8019c80 <__gethex+0xc4>
 8019c90:	7833      	ldrb	r3, [r6, #0]
 8019c92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019c96:	2b50      	cmp	r3, #80	; 0x50
 8019c98:	d13b      	bne.n	8019d12 <__gethex+0x156>
 8019c9a:	7873      	ldrb	r3, [r6, #1]
 8019c9c:	2b2b      	cmp	r3, #43	; 0x2b
 8019c9e:	d02c      	beq.n	8019cfa <__gethex+0x13e>
 8019ca0:	2b2d      	cmp	r3, #45	; 0x2d
 8019ca2:	d02e      	beq.n	8019d02 <__gethex+0x146>
 8019ca4:	1c71      	adds	r1, r6, #1
 8019ca6:	f04f 0900 	mov.w	r9, #0
 8019caa:	7808      	ldrb	r0, [r1, #0]
 8019cac:	f7ff ff70 	bl	8019b90 <__hexdig_fun>
 8019cb0:	1e43      	subs	r3, r0, #1
 8019cb2:	b2db      	uxtb	r3, r3
 8019cb4:	2b18      	cmp	r3, #24
 8019cb6:	d82c      	bhi.n	8019d12 <__gethex+0x156>
 8019cb8:	f1a0 0210 	sub.w	r2, r0, #16
 8019cbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019cc0:	f7ff ff66 	bl	8019b90 <__hexdig_fun>
 8019cc4:	1e43      	subs	r3, r0, #1
 8019cc6:	b2db      	uxtb	r3, r3
 8019cc8:	2b18      	cmp	r3, #24
 8019cca:	d91d      	bls.n	8019d08 <__gethex+0x14c>
 8019ccc:	f1b9 0f00 	cmp.w	r9, #0
 8019cd0:	d000      	beq.n	8019cd4 <__gethex+0x118>
 8019cd2:	4252      	negs	r2, r2
 8019cd4:	4415      	add	r5, r2
 8019cd6:	f8cb 1000 	str.w	r1, [fp]
 8019cda:	b1e4      	cbz	r4, 8019d16 <__gethex+0x15a>
 8019cdc:	9b00      	ldr	r3, [sp, #0]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	bf14      	ite	ne
 8019ce2:	2700      	movne	r7, #0
 8019ce4:	2706      	moveq	r7, #6
 8019ce6:	4638      	mov	r0, r7
 8019ce8:	b009      	add	sp, #36	; 0x24
 8019cea:	ecbd 8b02 	vpop	{d8}
 8019cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cf2:	463e      	mov	r6, r7
 8019cf4:	4625      	mov	r5, r4
 8019cf6:	2401      	movs	r4, #1
 8019cf8:	e7ca      	b.n	8019c90 <__gethex+0xd4>
 8019cfa:	f04f 0900 	mov.w	r9, #0
 8019cfe:	1cb1      	adds	r1, r6, #2
 8019d00:	e7d3      	b.n	8019caa <__gethex+0xee>
 8019d02:	f04f 0901 	mov.w	r9, #1
 8019d06:	e7fa      	b.n	8019cfe <__gethex+0x142>
 8019d08:	230a      	movs	r3, #10
 8019d0a:	fb03 0202 	mla	r2, r3, r2, r0
 8019d0e:	3a10      	subs	r2, #16
 8019d10:	e7d4      	b.n	8019cbc <__gethex+0x100>
 8019d12:	4631      	mov	r1, r6
 8019d14:	e7df      	b.n	8019cd6 <__gethex+0x11a>
 8019d16:	1bf3      	subs	r3, r6, r7
 8019d18:	3b01      	subs	r3, #1
 8019d1a:	4621      	mov	r1, r4
 8019d1c:	2b07      	cmp	r3, #7
 8019d1e:	dc0b      	bgt.n	8019d38 <__gethex+0x17c>
 8019d20:	ee18 0a10 	vmov	r0, s16
 8019d24:	f000 fa82 	bl	801a22c <_Balloc>
 8019d28:	4604      	mov	r4, r0
 8019d2a:	b940      	cbnz	r0, 8019d3e <__gethex+0x182>
 8019d2c:	4b5d      	ldr	r3, [pc, #372]	; (8019ea4 <__gethex+0x2e8>)
 8019d2e:	4602      	mov	r2, r0
 8019d30:	21de      	movs	r1, #222	; 0xde
 8019d32:	485d      	ldr	r0, [pc, #372]	; (8019ea8 <__gethex+0x2ec>)
 8019d34:	f001 fde0 	bl	801b8f8 <__assert_func>
 8019d38:	3101      	adds	r1, #1
 8019d3a:	105b      	asrs	r3, r3, #1
 8019d3c:	e7ee      	b.n	8019d1c <__gethex+0x160>
 8019d3e:	f100 0914 	add.w	r9, r0, #20
 8019d42:	f04f 0b00 	mov.w	fp, #0
 8019d46:	f1ca 0301 	rsb	r3, sl, #1
 8019d4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8019d4e:	f8cd b000 	str.w	fp, [sp]
 8019d52:	9306      	str	r3, [sp, #24]
 8019d54:	42b7      	cmp	r7, r6
 8019d56:	d340      	bcc.n	8019dda <__gethex+0x21e>
 8019d58:	9802      	ldr	r0, [sp, #8]
 8019d5a:	9b00      	ldr	r3, [sp, #0]
 8019d5c:	f840 3b04 	str.w	r3, [r0], #4
 8019d60:	eba0 0009 	sub.w	r0, r0, r9
 8019d64:	1080      	asrs	r0, r0, #2
 8019d66:	0146      	lsls	r6, r0, #5
 8019d68:	6120      	str	r0, [r4, #16]
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f000 fb50 	bl	801a410 <__hi0bits>
 8019d70:	1a30      	subs	r0, r6, r0
 8019d72:	f8d8 6000 	ldr.w	r6, [r8]
 8019d76:	42b0      	cmp	r0, r6
 8019d78:	dd63      	ble.n	8019e42 <__gethex+0x286>
 8019d7a:	1b87      	subs	r7, r0, r6
 8019d7c:	4639      	mov	r1, r7
 8019d7e:	4620      	mov	r0, r4
 8019d80:	f000 fef1 	bl	801ab66 <__any_on>
 8019d84:	4682      	mov	sl, r0
 8019d86:	b1a8      	cbz	r0, 8019db4 <__gethex+0x1f8>
 8019d88:	1e7b      	subs	r3, r7, #1
 8019d8a:	1159      	asrs	r1, r3, #5
 8019d8c:	f003 021f 	and.w	r2, r3, #31
 8019d90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019d94:	f04f 0a01 	mov.w	sl, #1
 8019d98:	fa0a f202 	lsl.w	r2, sl, r2
 8019d9c:	420a      	tst	r2, r1
 8019d9e:	d009      	beq.n	8019db4 <__gethex+0x1f8>
 8019da0:	4553      	cmp	r3, sl
 8019da2:	dd05      	ble.n	8019db0 <__gethex+0x1f4>
 8019da4:	1eb9      	subs	r1, r7, #2
 8019da6:	4620      	mov	r0, r4
 8019da8:	f000 fedd 	bl	801ab66 <__any_on>
 8019dac:	2800      	cmp	r0, #0
 8019dae:	d145      	bne.n	8019e3c <__gethex+0x280>
 8019db0:	f04f 0a02 	mov.w	sl, #2
 8019db4:	4639      	mov	r1, r7
 8019db6:	4620      	mov	r0, r4
 8019db8:	f7ff fe98 	bl	8019aec <rshift>
 8019dbc:	443d      	add	r5, r7
 8019dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019dc2:	42ab      	cmp	r3, r5
 8019dc4:	da4c      	bge.n	8019e60 <__gethex+0x2a4>
 8019dc6:	ee18 0a10 	vmov	r0, s16
 8019dca:	4621      	mov	r1, r4
 8019dcc:	f000 fa6e 	bl	801a2ac <_Bfree>
 8019dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	6013      	str	r3, [r2, #0]
 8019dd6:	27a3      	movs	r7, #163	; 0xa3
 8019dd8:	e785      	b.n	8019ce6 <__gethex+0x12a>
 8019dda:	1e73      	subs	r3, r6, #1
 8019ddc:	9a05      	ldr	r2, [sp, #20]
 8019dde:	9303      	str	r3, [sp, #12]
 8019de0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019de4:	4293      	cmp	r3, r2
 8019de6:	d019      	beq.n	8019e1c <__gethex+0x260>
 8019de8:	f1bb 0f20 	cmp.w	fp, #32
 8019dec:	d107      	bne.n	8019dfe <__gethex+0x242>
 8019dee:	9b02      	ldr	r3, [sp, #8]
 8019df0:	9a00      	ldr	r2, [sp, #0]
 8019df2:	f843 2b04 	str.w	r2, [r3], #4
 8019df6:	9302      	str	r3, [sp, #8]
 8019df8:	2300      	movs	r3, #0
 8019dfa:	9300      	str	r3, [sp, #0]
 8019dfc:	469b      	mov	fp, r3
 8019dfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019e02:	f7ff fec5 	bl	8019b90 <__hexdig_fun>
 8019e06:	9b00      	ldr	r3, [sp, #0]
 8019e08:	f000 000f 	and.w	r0, r0, #15
 8019e0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019e10:	4303      	orrs	r3, r0
 8019e12:	9300      	str	r3, [sp, #0]
 8019e14:	f10b 0b04 	add.w	fp, fp, #4
 8019e18:	9b03      	ldr	r3, [sp, #12]
 8019e1a:	e00d      	b.n	8019e38 <__gethex+0x27c>
 8019e1c:	9b03      	ldr	r3, [sp, #12]
 8019e1e:	9a06      	ldr	r2, [sp, #24]
 8019e20:	4413      	add	r3, r2
 8019e22:	42bb      	cmp	r3, r7
 8019e24:	d3e0      	bcc.n	8019de8 <__gethex+0x22c>
 8019e26:	4618      	mov	r0, r3
 8019e28:	9901      	ldr	r1, [sp, #4]
 8019e2a:	9307      	str	r3, [sp, #28]
 8019e2c:	4652      	mov	r2, sl
 8019e2e:	f001 fc93 	bl	801b758 <strncmp>
 8019e32:	9b07      	ldr	r3, [sp, #28]
 8019e34:	2800      	cmp	r0, #0
 8019e36:	d1d7      	bne.n	8019de8 <__gethex+0x22c>
 8019e38:	461e      	mov	r6, r3
 8019e3a:	e78b      	b.n	8019d54 <__gethex+0x198>
 8019e3c:	f04f 0a03 	mov.w	sl, #3
 8019e40:	e7b8      	b.n	8019db4 <__gethex+0x1f8>
 8019e42:	da0a      	bge.n	8019e5a <__gethex+0x29e>
 8019e44:	1a37      	subs	r7, r6, r0
 8019e46:	4621      	mov	r1, r4
 8019e48:	ee18 0a10 	vmov	r0, s16
 8019e4c:	463a      	mov	r2, r7
 8019e4e:	f000 fc49 	bl	801a6e4 <__lshift>
 8019e52:	1bed      	subs	r5, r5, r7
 8019e54:	4604      	mov	r4, r0
 8019e56:	f100 0914 	add.w	r9, r0, #20
 8019e5a:	f04f 0a00 	mov.w	sl, #0
 8019e5e:	e7ae      	b.n	8019dbe <__gethex+0x202>
 8019e60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019e64:	42a8      	cmp	r0, r5
 8019e66:	dd72      	ble.n	8019f4e <__gethex+0x392>
 8019e68:	1b45      	subs	r5, r0, r5
 8019e6a:	42ae      	cmp	r6, r5
 8019e6c:	dc36      	bgt.n	8019edc <__gethex+0x320>
 8019e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019e72:	2b02      	cmp	r3, #2
 8019e74:	d02a      	beq.n	8019ecc <__gethex+0x310>
 8019e76:	2b03      	cmp	r3, #3
 8019e78:	d02c      	beq.n	8019ed4 <__gethex+0x318>
 8019e7a:	2b01      	cmp	r3, #1
 8019e7c:	d11c      	bne.n	8019eb8 <__gethex+0x2fc>
 8019e7e:	42ae      	cmp	r6, r5
 8019e80:	d11a      	bne.n	8019eb8 <__gethex+0x2fc>
 8019e82:	2e01      	cmp	r6, #1
 8019e84:	d112      	bne.n	8019eac <__gethex+0x2f0>
 8019e86:	9a04      	ldr	r2, [sp, #16]
 8019e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019e8c:	6013      	str	r3, [r2, #0]
 8019e8e:	2301      	movs	r3, #1
 8019e90:	6123      	str	r3, [r4, #16]
 8019e92:	f8c9 3000 	str.w	r3, [r9]
 8019e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019e98:	2762      	movs	r7, #98	; 0x62
 8019e9a:	601c      	str	r4, [r3, #0]
 8019e9c:	e723      	b.n	8019ce6 <__gethex+0x12a>
 8019e9e:	bf00      	nop
 8019ea0:	0801c898 	.word	0x0801c898
 8019ea4:	0801c820 	.word	0x0801c820
 8019ea8:	0801c831 	.word	0x0801c831
 8019eac:	1e71      	subs	r1, r6, #1
 8019eae:	4620      	mov	r0, r4
 8019eb0:	f000 fe59 	bl	801ab66 <__any_on>
 8019eb4:	2800      	cmp	r0, #0
 8019eb6:	d1e6      	bne.n	8019e86 <__gethex+0x2ca>
 8019eb8:	ee18 0a10 	vmov	r0, s16
 8019ebc:	4621      	mov	r1, r4
 8019ebe:	f000 f9f5 	bl	801a2ac <_Bfree>
 8019ec2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	6013      	str	r3, [r2, #0]
 8019ec8:	2750      	movs	r7, #80	; 0x50
 8019eca:	e70c      	b.n	8019ce6 <__gethex+0x12a>
 8019ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d1f2      	bne.n	8019eb8 <__gethex+0x2fc>
 8019ed2:	e7d8      	b.n	8019e86 <__gethex+0x2ca>
 8019ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d1d5      	bne.n	8019e86 <__gethex+0x2ca>
 8019eda:	e7ed      	b.n	8019eb8 <__gethex+0x2fc>
 8019edc:	1e6f      	subs	r7, r5, #1
 8019ede:	f1ba 0f00 	cmp.w	sl, #0
 8019ee2:	d131      	bne.n	8019f48 <__gethex+0x38c>
 8019ee4:	b127      	cbz	r7, 8019ef0 <__gethex+0x334>
 8019ee6:	4639      	mov	r1, r7
 8019ee8:	4620      	mov	r0, r4
 8019eea:	f000 fe3c 	bl	801ab66 <__any_on>
 8019eee:	4682      	mov	sl, r0
 8019ef0:	117b      	asrs	r3, r7, #5
 8019ef2:	2101      	movs	r1, #1
 8019ef4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019ef8:	f007 071f 	and.w	r7, r7, #31
 8019efc:	fa01 f707 	lsl.w	r7, r1, r7
 8019f00:	421f      	tst	r7, r3
 8019f02:	4629      	mov	r1, r5
 8019f04:	4620      	mov	r0, r4
 8019f06:	bf18      	it	ne
 8019f08:	f04a 0a02 	orrne.w	sl, sl, #2
 8019f0c:	1b76      	subs	r6, r6, r5
 8019f0e:	f7ff fded 	bl	8019aec <rshift>
 8019f12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019f16:	2702      	movs	r7, #2
 8019f18:	f1ba 0f00 	cmp.w	sl, #0
 8019f1c:	d048      	beq.n	8019fb0 <__gethex+0x3f4>
 8019f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019f22:	2b02      	cmp	r3, #2
 8019f24:	d015      	beq.n	8019f52 <__gethex+0x396>
 8019f26:	2b03      	cmp	r3, #3
 8019f28:	d017      	beq.n	8019f5a <__gethex+0x39e>
 8019f2a:	2b01      	cmp	r3, #1
 8019f2c:	d109      	bne.n	8019f42 <__gethex+0x386>
 8019f2e:	f01a 0f02 	tst.w	sl, #2
 8019f32:	d006      	beq.n	8019f42 <__gethex+0x386>
 8019f34:	f8d9 0000 	ldr.w	r0, [r9]
 8019f38:	ea4a 0a00 	orr.w	sl, sl, r0
 8019f3c:	f01a 0f01 	tst.w	sl, #1
 8019f40:	d10e      	bne.n	8019f60 <__gethex+0x3a4>
 8019f42:	f047 0710 	orr.w	r7, r7, #16
 8019f46:	e033      	b.n	8019fb0 <__gethex+0x3f4>
 8019f48:	f04f 0a01 	mov.w	sl, #1
 8019f4c:	e7d0      	b.n	8019ef0 <__gethex+0x334>
 8019f4e:	2701      	movs	r7, #1
 8019f50:	e7e2      	b.n	8019f18 <__gethex+0x35c>
 8019f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f54:	f1c3 0301 	rsb	r3, r3, #1
 8019f58:	9315      	str	r3, [sp, #84]	; 0x54
 8019f5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d0f0      	beq.n	8019f42 <__gethex+0x386>
 8019f60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019f64:	f104 0314 	add.w	r3, r4, #20
 8019f68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019f6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019f70:	f04f 0c00 	mov.w	ip, #0
 8019f74:	4618      	mov	r0, r3
 8019f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019f7e:	d01c      	beq.n	8019fba <__gethex+0x3fe>
 8019f80:	3201      	adds	r2, #1
 8019f82:	6002      	str	r2, [r0, #0]
 8019f84:	2f02      	cmp	r7, #2
 8019f86:	f104 0314 	add.w	r3, r4, #20
 8019f8a:	d13f      	bne.n	801a00c <__gethex+0x450>
 8019f8c:	f8d8 2000 	ldr.w	r2, [r8]
 8019f90:	3a01      	subs	r2, #1
 8019f92:	42b2      	cmp	r2, r6
 8019f94:	d10a      	bne.n	8019fac <__gethex+0x3f0>
 8019f96:	1171      	asrs	r1, r6, #5
 8019f98:	2201      	movs	r2, #1
 8019f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019f9e:	f006 061f 	and.w	r6, r6, #31
 8019fa2:	fa02 f606 	lsl.w	r6, r2, r6
 8019fa6:	421e      	tst	r6, r3
 8019fa8:	bf18      	it	ne
 8019faa:	4617      	movne	r7, r2
 8019fac:	f047 0720 	orr.w	r7, r7, #32
 8019fb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019fb2:	601c      	str	r4, [r3, #0]
 8019fb4:	9b04      	ldr	r3, [sp, #16]
 8019fb6:	601d      	str	r5, [r3, #0]
 8019fb8:	e695      	b.n	8019ce6 <__gethex+0x12a>
 8019fba:	4299      	cmp	r1, r3
 8019fbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8019fc0:	d8d8      	bhi.n	8019f74 <__gethex+0x3b8>
 8019fc2:	68a3      	ldr	r3, [r4, #8]
 8019fc4:	459b      	cmp	fp, r3
 8019fc6:	db19      	blt.n	8019ffc <__gethex+0x440>
 8019fc8:	6861      	ldr	r1, [r4, #4]
 8019fca:	ee18 0a10 	vmov	r0, s16
 8019fce:	3101      	adds	r1, #1
 8019fd0:	f000 f92c 	bl	801a22c <_Balloc>
 8019fd4:	4681      	mov	r9, r0
 8019fd6:	b918      	cbnz	r0, 8019fe0 <__gethex+0x424>
 8019fd8:	4b1a      	ldr	r3, [pc, #104]	; (801a044 <__gethex+0x488>)
 8019fda:	4602      	mov	r2, r0
 8019fdc:	2184      	movs	r1, #132	; 0x84
 8019fde:	e6a8      	b.n	8019d32 <__gethex+0x176>
 8019fe0:	6922      	ldr	r2, [r4, #16]
 8019fe2:	3202      	adds	r2, #2
 8019fe4:	f104 010c 	add.w	r1, r4, #12
 8019fe8:	0092      	lsls	r2, r2, #2
 8019fea:	300c      	adds	r0, #12
 8019fec:	f7fd fa0c 	bl	8017408 <memcpy>
 8019ff0:	4621      	mov	r1, r4
 8019ff2:	ee18 0a10 	vmov	r0, s16
 8019ff6:	f000 f959 	bl	801a2ac <_Bfree>
 8019ffa:	464c      	mov	r4, r9
 8019ffc:	6923      	ldr	r3, [r4, #16]
 8019ffe:	1c5a      	adds	r2, r3, #1
 801a000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a004:	6122      	str	r2, [r4, #16]
 801a006:	2201      	movs	r2, #1
 801a008:	615a      	str	r2, [r3, #20]
 801a00a:	e7bb      	b.n	8019f84 <__gethex+0x3c8>
 801a00c:	6922      	ldr	r2, [r4, #16]
 801a00e:	455a      	cmp	r2, fp
 801a010:	dd0b      	ble.n	801a02a <__gethex+0x46e>
 801a012:	2101      	movs	r1, #1
 801a014:	4620      	mov	r0, r4
 801a016:	f7ff fd69 	bl	8019aec <rshift>
 801a01a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a01e:	3501      	adds	r5, #1
 801a020:	42ab      	cmp	r3, r5
 801a022:	f6ff aed0 	blt.w	8019dc6 <__gethex+0x20a>
 801a026:	2701      	movs	r7, #1
 801a028:	e7c0      	b.n	8019fac <__gethex+0x3f0>
 801a02a:	f016 061f 	ands.w	r6, r6, #31
 801a02e:	d0fa      	beq.n	801a026 <__gethex+0x46a>
 801a030:	4453      	add	r3, sl
 801a032:	f1c6 0620 	rsb	r6, r6, #32
 801a036:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801a03a:	f000 f9e9 	bl	801a410 <__hi0bits>
 801a03e:	42b0      	cmp	r0, r6
 801a040:	dbe7      	blt.n	801a012 <__gethex+0x456>
 801a042:	e7f0      	b.n	801a026 <__gethex+0x46a>
 801a044:	0801c820 	.word	0x0801c820

0801a048 <L_shift>:
 801a048:	f1c2 0208 	rsb	r2, r2, #8
 801a04c:	0092      	lsls	r2, r2, #2
 801a04e:	b570      	push	{r4, r5, r6, lr}
 801a050:	f1c2 0620 	rsb	r6, r2, #32
 801a054:	6843      	ldr	r3, [r0, #4]
 801a056:	6804      	ldr	r4, [r0, #0]
 801a058:	fa03 f506 	lsl.w	r5, r3, r6
 801a05c:	432c      	orrs	r4, r5
 801a05e:	40d3      	lsrs	r3, r2
 801a060:	6004      	str	r4, [r0, #0]
 801a062:	f840 3f04 	str.w	r3, [r0, #4]!
 801a066:	4288      	cmp	r0, r1
 801a068:	d3f4      	bcc.n	801a054 <L_shift+0xc>
 801a06a:	bd70      	pop	{r4, r5, r6, pc}

0801a06c <__match>:
 801a06c:	b530      	push	{r4, r5, lr}
 801a06e:	6803      	ldr	r3, [r0, #0]
 801a070:	3301      	adds	r3, #1
 801a072:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a076:	b914      	cbnz	r4, 801a07e <__match+0x12>
 801a078:	6003      	str	r3, [r0, #0]
 801a07a:	2001      	movs	r0, #1
 801a07c:	bd30      	pop	{r4, r5, pc}
 801a07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a082:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a086:	2d19      	cmp	r5, #25
 801a088:	bf98      	it	ls
 801a08a:	3220      	addls	r2, #32
 801a08c:	42a2      	cmp	r2, r4
 801a08e:	d0f0      	beq.n	801a072 <__match+0x6>
 801a090:	2000      	movs	r0, #0
 801a092:	e7f3      	b.n	801a07c <__match+0x10>

0801a094 <__hexnan>:
 801a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a098:	680b      	ldr	r3, [r1, #0]
 801a09a:	115e      	asrs	r6, r3, #5
 801a09c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a0a0:	f013 031f 	ands.w	r3, r3, #31
 801a0a4:	b087      	sub	sp, #28
 801a0a6:	bf18      	it	ne
 801a0a8:	3604      	addne	r6, #4
 801a0aa:	2500      	movs	r5, #0
 801a0ac:	1f37      	subs	r7, r6, #4
 801a0ae:	4690      	mov	r8, r2
 801a0b0:	6802      	ldr	r2, [r0, #0]
 801a0b2:	9301      	str	r3, [sp, #4]
 801a0b4:	4682      	mov	sl, r0
 801a0b6:	f846 5c04 	str.w	r5, [r6, #-4]
 801a0ba:	46b9      	mov	r9, r7
 801a0bc:	463c      	mov	r4, r7
 801a0be:	9502      	str	r5, [sp, #8]
 801a0c0:	46ab      	mov	fp, r5
 801a0c2:	7851      	ldrb	r1, [r2, #1]
 801a0c4:	1c53      	adds	r3, r2, #1
 801a0c6:	9303      	str	r3, [sp, #12]
 801a0c8:	b341      	cbz	r1, 801a11c <__hexnan+0x88>
 801a0ca:	4608      	mov	r0, r1
 801a0cc:	9205      	str	r2, [sp, #20]
 801a0ce:	9104      	str	r1, [sp, #16]
 801a0d0:	f7ff fd5e 	bl	8019b90 <__hexdig_fun>
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d14f      	bne.n	801a178 <__hexnan+0xe4>
 801a0d8:	9904      	ldr	r1, [sp, #16]
 801a0da:	9a05      	ldr	r2, [sp, #20]
 801a0dc:	2920      	cmp	r1, #32
 801a0de:	d818      	bhi.n	801a112 <__hexnan+0x7e>
 801a0e0:	9b02      	ldr	r3, [sp, #8]
 801a0e2:	459b      	cmp	fp, r3
 801a0e4:	dd13      	ble.n	801a10e <__hexnan+0x7a>
 801a0e6:	454c      	cmp	r4, r9
 801a0e8:	d206      	bcs.n	801a0f8 <__hexnan+0x64>
 801a0ea:	2d07      	cmp	r5, #7
 801a0ec:	dc04      	bgt.n	801a0f8 <__hexnan+0x64>
 801a0ee:	462a      	mov	r2, r5
 801a0f0:	4649      	mov	r1, r9
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	f7ff ffa8 	bl	801a048 <L_shift>
 801a0f8:	4544      	cmp	r4, r8
 801a0fa:	d950      	bls.n	801a19e <__hexnan+0x10a>
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	f1a4 0904 	sub.w	r9, r4, #4
 801a102:	f844 3c04 	str.w	r3, [r4, #-4]
 801a106:	f8cd b008 	str.w	fp, [sp, #8]
 801a10a:	464c      	mov	r4, r9
 801a10c:	461d      	mov	r5, r3
 801a10e:	9a03      	ldr	r2, [sp, #12]
 801a110:	e7d7      	b.n	801a0c2 <__hexnan+0x2e>
 801a112:	2929      	cmp	r1, #41	; 0x29
 801a114:	d156      	bne.n	801a1c4 <__hexnan+0x130>
 801a116:	3202      	adds	r2, #2
 801a118:	f8ca 2000 	str.w	r2, [sl]
 801a11c:	f1bb 0f00 	cmp.w	fp, #0
 801a120:	d050      	beq.n	801a1c4 <__hexnan+0x130>
 801a122:	454c      	cmp	r4, r9
 801a124:	d206      	bcs.n	801a134 <__hexnan+0xa0>
 801a126:	2d07      	cmp	r5, #7
 801a128:	dc04      	bgt.n	801a134 <__hexnan+0xa0>
 801a12a:	462a      	mov	r2, r5
 801a12c:	4649      	mov	r1, r9
 801a12e:	4620      	mov	r0, r4
 801a130:	f7ff ff8a 	bl	801a048 <L_shift>
 801a134:	4544      	cmp	r4, r8
 801a136:	d934      	bls.n	801a1a2 <__hexnan+0x10e>
 801a138:	f1a8 0204 	sub.w	r2, r8, #4
 801a13c:	4623      	mov	r3, r4
 801a13e:	f853 1b04 	ldr.w	r1, [r3], #4
 801a142:	f842 1f04 	str.w	r1, [r2, #4]!
 801a146:	429f      	cmp	r7, r3
 801a148:	d2f9      	bcs.n	801a13e <__hexnan+0xaa>
 801a14a:	1b3b      	subs	r3, r7, r4
 801a14c:	f023 0303 	bic.w	r3, r3, #3
 801a150:	3304      	adds	r3, #4
 801a152:	3401      	adds	r4, #1
 801a154:	3e03      	subs	r6, #3
 801a156:	42b4      	cmp	r4, r6
 801a158:	bf88      	it	hi
 801a15a:	2304      	movhi	r3, #4
 801a15c:	4443      	add	r3, r8
 801a15e:	2200      	movs	r2, #0
 801a160:	f843 2b04 	str.w	r2, [r3], #4
 801a164:	429f      	cmp	r7, r3
 801a166:	d2fb      	bcs.n	801a160 <__hexnan+0xcc>
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	b91b      	cbnz	r3, 801a174 <__hexnan+0xe0>
 801a16c:	4547      	cmp	r7, r8
 801a16e:	d127      	bne.n	801a1c0 <__hexnan+0x12c>
 801a170:	2301      	movs	r3, #1
 801a172:	603b      	str	r3, [r7, #0]
 801a174:	2005      	movs	r0, #5
 801a176:	e026      	b.n	801a1c6 <__hexnan+0x132>
 801a178:	3501      	adds	r5, #1
 801a17a:	2d08      	cmp	r5, #8
 801a17c:	f10b 0b01 	add.w	fp, fp, #1
 801a180:	dd06      	ble.n	801a190 <__hexnan+0xfc>
 801a182:	4544      	cmp	r4, r8
 801a184:	d9c3      	bls.n	801a10e <__hexnan+0x7a>
 801a186:	2300      	movs	r3, #0
 801a188:	f844 3c04 	str.w	r3, [r4, #-4]
 801a18c:	2501      	movs	r5, #1
 801a18e:	3c04      	subs	r4, #4
 801a190:	6822      	ldr	r2, [r4, #0]
 801a192:	f000 000f 	and.w	r0, r0, #15
 801a196:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801a19a:	6022      	str	r2, [r4, #0]
 801a19c:	e7b7      	b.n	801a10e <__hexnan+0x7a>
 801a19e:	2508      	movs	r5, #8
 801a1a0:	e7b5      	b.n	801a10e <__hexnan+0x7a>
 801a1a2:	9b01      	ldr	r3, [sp, #4]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d0df      	beq.n	801a168 <__hexnan+0xd4>
 801a1a8:	f04f 32ff 	mov.w	r2, #4294967295
 801a1ac:	f1c3 0320 	rsb	r3, r3, #32
 801a1b0:	fa22 f303 	lsr.w	r3, r2, r3
 801a1b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a1b8:	401a      	ands	r2, r3
 801a1ba:	f846 2c04 	str.w	r2, [r6, #-4]
 801a1be:	e7d3      	b.n	801a168 <__hexnan+0xd4>
 801a1c0:	3f04      	subs	r7, #4
 801a1c2:	e7d1      	b.n	801a168 <__hexnan+0xd4>
 801a1c4:	2004      	movs	r0, #4
 801a1c6:	b007      	add	sp, #28
 801a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1cc <_localeconv_r>:
 801a1cc:	4800      	ldr	r0, [pc, #0]	; (801a1d0 <_localeconv_r+0x4>)
 801a1ce:	4770      	bx	lr
 801a1d0:	24000258 	.word	0x24000258

0801a1d4 <_lseek_r>:
 801a1d4:	b538      	push	{r3, r4, r5, lr}
 801a1d6:	4d07      	ldr	r5, [pc, #28]	; (801a1f4 <_lseek_r+0x20>)
 801a1d8:	4604      	mov	r4, r0
 801a1da:	4608      	mov	r0, r1
 801a1dc:	4611      	mov	r1, r2
 801a1de:	2200      	movs	r2, #0
 801a1e0:	602a      	str	r2, [r5, #0]
 801a1e2:	461a      	mov	r2, r3
 801a1e4:	f7e9 fcfa 	bl	8003bdc <_lseek>
 801a1e8:	1c43      	adds	r3, r0, #1
 801a1ea:	d102      	bne.n	801a1f2 <_lseek_r+0x1e>
 801a1ec:	682b      	ldr	r3, [r5, #0]
 801a1ee:	b103      	cbz	r3, 801a1f2 <_lseek_r+0x1e>
 801a1f0:	6023      	str	r3, [r4, #0]
 801a1f2:	bd38      	pop	{r3, r4, r5, pc}
 801a1f4:	24003238 	.word	0x24003238

0801a1f8 <malloc>:
 801a1f8:	4b02      	ldr	r3, [pc, #8]	; (801a204 <malloc+0xc>)
 801a1fa:	4601      	mov	r1, r0
 801a1fc:	6818      	ldr	r0, [r3, #0]
 801a1fe:	f000 bd55 	b.w	801acac <_malloc_r>
 801a202:	bf00      	nop
 801a204:	24000100 	.word	0x24000100

0801a208 <__ascii_mbtowc>:
 801a208:	b082      	sub	sp, #8
 801a20a:	b901      	cbnz	r1, 801a20e <__ascii_mbtowc+0x6>
 801a20c:	a901      	add	r1, sp, #4
 801a20e:	b142      	cbz	r2, 801a222 <__ascii_mbtowc+0x1a>
 801a210:	b14b      	cbz	r3, 801a226 <__ascii_mbtowc+0x1e>
 801a212:	7813      	ldrb	r3, [r2, #0]
 801a214:	600b      	str	r3, [r1, #0]
 801a216:	7812      	ldrb	r2, [r2, #0]
 801a218:	1e10      	subs	r0, r2, #0
 801a21a:	bf18      	it	ne
 801a21c:	2001      	movne	r0, #1
 801a21e:	b002      	add	sp, #8
 801a220:	4770      	bx	lr
 801a222:	4610      	mov	r0, r2
 801a224:	e7fb      	b.n	801a21e <__ascii_mbtowc+0x16>
 801a226:	f06f 0001 	mvn.w	r0, #1
 801a22a:	e7f8      	b.n	801a21e <__ascii_mbtowc+0x16>

0801a22c <_Balloc>:
 801a22c:	b570      	push	{r4, r5, r6, lr}
 801a22e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a230:	4604      	mov	r4, r0
 801a232:	460d      	mov	r5, r1
 801a234:	b976      	cbnz	r6, 801a254 <_Balloc+0x28>
 801a236:	2010      	movs	r0, #16
 801a238:	f7ff ffde 	bl	801a1f8 <malloc>
 801a23c:	4602      	mov	r2, r0
 801a23e:	6260      	str	r0, [r4, #36]	; 0x24
 801a240:	b920      	cbnz	r0, 801a24c <_Balloc+0x20>
 801a242:	4b18      	ldr	r3, [pc, #96]	; (801a2a4 <_Balloc+0x78>)
 801a244:	4818      	ldr	r0, [pc, #96]	; (801a2a8 <_Balloc+0x7c>)
 801a246:	2166      	movs	r1, #102	; 0x66
 801a248:	f001 fb56 	bl	801b8f8 <__assert_func>
 801a24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a250:	6006      	str	r6, [r0, #0]
 801a252:	60c6      	str	r6, [r0, #12]
 801a254:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a256:	68f3      	ldr	r3, [r6, #12]
 801a258:	b183      	cbz	r3, 801a27c <_Balloc+0x50>
 801a25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a25c:	68db      	ldr	r3, [r3, #12]
 801a25e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a262:	b9b8      	cbnz	r0, 801a294 <_Balloc+0x68>
 801a264:	2101      	movs	r1, #1
 801a266:	fa01 f605 	lsl.w	r6, r1, r5
 801a26a:	1d72      	adds	r2, r6, #5
 801a26c:	0092      	lsls	r2, r2, #2
 801a26e:	4620      	mov	r0, r4
 801a270:	f000 fc9a 	bl	801aba8 <_calloc_r>
 801a274:	b160      	cbz	r0, 801a290 <_Balloc+0x64>
 801a276:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a27a:	e00e      	b.n	801a29a <_Balloc+0x6e>
 801a27c:	2221      	movs	r2, #33	; 0x21
 801a27e:	2104      	movs	r1, #4
 801a280:	4620      	mov	r0, r4
 801a282:	f000 fc91 	bl	801aba8 <_calloc_r>
 801a286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a288:	60f0      	str	r0, [r6, #12]
 801a28a:	68db      	ldr	r3, [r3, #12]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d1e4      	bne.n	801a25a <_Balloc+0x2e>
 801a290:	2000      	movs	r0, #0
 801a292:	bd70      	pop	{r4, r5, r6, pc}
 801a294:	6802      	ldr	r2, [r0, #0]
 801a296:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a29a:	2300      	movs	r3, #0
 801a29c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a2a0:	e7f7      	b.n	801a292 <_Balloc+0x66>
 801a2a2:	bf00      	nop
 801a2a4:	0801c7ae 	.word	0x0801c7ae
 801a2a8:	0801c8ac 	.word	0x0801c8ac

0801a2ac <_Bfree>:
 801a2ac:	b570      	push	{r4, r5, r6, lr}
 801a2ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a2b0:	4605      	mov	r5, r0
 801a2b2:	460c      	mov	r4, r1
 801a2b4:	b976      	cbnz	r6, 801a2d4 <_Bfree+0x28>
 801a2b6:	2010      	movs	r0, #16
 801a2b8:	f7ff ff9e 	bl	801a1f8 <malloc>
 801a2bc:	4602      	mov	r2, r0
 801a2be:	6268      	str	r0, [r5, #36]	; 0x24
 801a2c0:	b920      	cbnz	r0, 801a2cc <_Bfree+0x20>
 801a2c2:	4b09      	ldr	r3, [pc, #36]	; (801a2e8 <_Bfree+0x3c>)
 801a2c4:	4809      	ldr	r0, [pc, #36]	; (801a2ec <_Bfree+0x40>)
 801a2c6:	218a      	movs	r1, #138	; 0x8a
 801a2c8:	f001 fb16 	bl	801b8f8 <__assert_func>
 801a2cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a2d0:	6006      	str	r6, [r0, #0]
 801a2d2:	60c6      	str	r6, [r0, #12]
 801a2d4:	b13c      	cbz	r4, 801a2e6 <_Bfree+0x3a>
 801a2d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a2d8:	6862      	ldr	r2, [r4, #4]
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a2e0:	6021      	str	r1, [r4, #0]
 801a2e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a2e6:	bd70      	pop	{r4, r5, r6, pc}
 801a2e8:	0801c7ae 	.word	0x0801c7ae
 801a2ec:	0801c8ac 	.word	0x0801c8ac

0801a2f0 <__multadd>:
 801a2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f4:	690d      	ldr	r5, [r1, #16]
 801a2f6:	4607      	mov	r7, r0
 801a2f8:	460c      	mov	r4, r1
 801a2fa:	461e      	mov	r6, r3
 801a2fc:	f101 0c14 	add.w	ip, r1, #20
 801a300:	2000      	movs	r0, #0
 801a302:	f8dc 3000 	ldr.w	r3, [ip]
 801a306:	b299      	uxth	r1, r3
 801a308:	fb02 6101 	mla	r1, r2, r1, r6
 801a30c:	0c1e      	lsrs	r6, r3, #16
 801a30e:	0c0b      	lsrs	r3, r1, #16
 801a310:	fb02 3306 	mla	r3, r2, r6, r3
 801a314:	b289      	uxth	r1, r1
 801a316:	3001      	adds	r0, #1
 801a318:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a31c:	4285      	cmp	r5, r0
 801a31e:	f84c 1b04 	str.w	r1, [ip], #4
 801a322:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a326:	dcec      	bgt.n	801a302 <__multadd+0x12>
 801a328:	b30e      	cbz	r6, 801a36e <__multadd+0x7e>
 801a32a:	68a3      	ldr	r3, [r4, #8]
 801a32c:	42ab      	cmp	r3, r5
 801a32e:	dc19      	bgt.n	801a364 <__multadd+0x74>
 801a330:	6861      	ldr	r1, [r4, #4]
 801a332:	4638      	mov	r0, r7
 801a334:	3101      	adds	r1, #1
 801a336:	f7ff ff79 	bl	801a22c <_Balloc>
 801a33a:	4680      	mov	r8, r0
 801a33c:	b928      	cbnz	r0, 801a34a <__multadd+0x5a>
 801a33e:	4602      	mov	r2, r0
 801a340:	4b0c      	ldr	r3, [pc, #48]	; (801a374 <__multadd+0x84>)
 801a342:	480d      	ldr	r0, [pc, #52]	; (801a378 <__multadd+0x88>)
 801a344:	21b5      	movs	r1, #181	; 0xb5
 801a346:	f001 fad7 	bl	801b8f8 <__assert_func>
 801a34a:	6922      	ldr	r2, [r4, #16]
 801a34c:	3202      	adds	r2, #2
 801a34e:	f104 010c 	add.w	r1, r4, #12
 801a352:	0092      	lsls	r2, r2, #2
 801a354:	300c      	adds	r0, #12
 801a356:	f7fd f857 	bl	8017408 <memcpy>
 801a35a:	4621      	mov	r1, r4
 801a35c:	4638      	mov	r0, r7
 801a35e:	f7ff ffa5 	bl	801a2ac <_Bfree>
 801a362:	4644      	mov	r4, r8
 801a364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a368:	3501      	adds	r5, #1
 801a36a:	615e      	str	r6, [r3, #20]
 801a36c:	6125      	str	r5, [r4, #16]
 801a36e:	4620      	mov	r0, r4
 801a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a374:	0801c820 	.word	0x0801c820
 801a378:	0801c8ac 	.word	0x0801c8ac

0801a37c <__s2b>:
 801a37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a380:	460c      	mov	r4, r1
 801a382:	4615      	mov	r5, r2
 801a384:	461f      	mov	r7, r3
 801a386:	2209      	movs	r2, #9
 801a388:	3308      	adds	r3, #8
 801a38a:	4606      	mov	r6, r0
 801a38c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a390:	2100      	movs	r1, #0
 801a392:	2201      	movs	r2, #1
 801a394:	429a      	cmp	r2, r3
 801a396:	db09      	blt.n	801a3ac <__s2b+0x30>
 801a398:	4630      	mov	r0, r6
 801a39a:	f7ff ff47 	bl	801a22c <_Balloc>
 801a39e:	b940      	cbnz	r0, 801a3b2 <__s2b+0x36>
 801a3a0:	4602      	mov	r2, r0
 801a3a2:	4b19      	ldr	r3, [pc, #100]	; (801a408 <__s2b+0x8c>)
 801a3a4:	4819      	ldr	r0, [pc, #100]	; (801a40c <__s2b+0x90>)
 801a3a6:	21ce      	movs	r1, #206	; 0xce
 801a3a8:	f001 faa6 	bl	801b8f8 <__assert_func>
 801a3ac:	0052      	lsls	r2, r2, #1
 801a3ae:	3101      	adds	r1, #1
 801a3b0:	e7f0      	b.n	801a394 <__s2b+0x18>
 801a3b2:	9b08      	ldr	r3, [sp, #32]
 801a3b4:	6143      	str	r3, [r0, #20]
 801a3b6:	2d09      	cmp	r5, #9
 801a3b8:	f04f 0301 	mov.w	r3, #1
 801a3bc:	6103      	str	r3, [r0, #16]
 801a3be:	dd16      	ble.n	801a3ee <__s2b+0x72>
 801a3c0:	f104 0909 	add.w	r9, r4, #9
 801a3c4:	46c8      	mov	r8, r9
 801a3c6:	442c      	add	r4, r5
 801a3c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a3cc:	4601      	mov	r1, r0
 801a3ce:	3b30      	subs	r3, #48	; 0x30
 801a3d0:	220a      	movs	r2, #10
 801a3d2:	4630      	mov	r0, r6
 801a3d4:	f7ff ff8c 	bl	801a2f0 <__multadd>
 801a3d8:	45a0      	cmp	r8, r4
 801a3da:	d1f5      	bne.n	801a3c8 <__s2b+0x4c>
 801a3dc:	f1a5 0408 	sub.w	r4, r5, #8
 801a3e0:	444c      	add	r4, r9
 801a3e2:	1b2d      	subs	r5, r5, r4
 801a3e4:	1963      	adds	r3, r4, r5
 801a3e6:	42bb      	cmp	r3, r7
 801a3e8:	db04      	blt.n	801a3f4 <__s2b+0x78>
 801a3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3ee:	340a      	adds	r4, #10
 801a3f0:	2509      	movs	r5, #9
 801a3f2:	e7f6      	b.n	801a3e2 <__s2b+0x66>
 801a3f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a3f8:	4601      	mov	r1, r0
 801a3fa:	3b30      	subs	r3, #48	; 0x30
 801a3fc:	220a      	movs	r2, #10
 801a3fe:	4630      	mov	r0, r6
 801a400:	f7ff ff76 	bl	801a2f0 <__multadd>
 801a404:	e7ee      	b.n	801a3e4 <__s2b+0x68>
 801a406:	bf00      	nop
 801a408:	0801c820 	.word	0x0801c820
 801a40c:	0801c8ac 	.word	0x0801c8ac

0801a410 <__hi0bits>:
 801a410:	0c03      	lsrs	r3, r0, #16
 801a412:	041b      	lsls	r3, r3, #16
 801a414:	b9d3      	cbnz	r3, 801a44c <__hi0bits+0x3c>
 801a416:	0400      	lsls	r0, r0, #16
 801a418:	2310      	movs	r3, #16
 801a41a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a41e:	bf04      	itt	eq
 801a420:	0200      	lsleq	r0, r0, #8
 801a422:	3308      	addeq	r3, #8
 801a424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a428:	bf04      	itt	eq
 801a42a:	0100      	lsleq	r0, r0, #4
 801a42c:	3304      	addeq	r3, #4
 801a42e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a432:	bf04      	itt	eq
 801a434:	0080      	lsleq	r0, r0, #2
 801a436:	3302      	addeq	r3, #2
 801a438:	2800      	cmp	r0, #0
 801a43a:	db05      	blt.n	801a448 <__hi0bits+0x38>
 801a43c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a440:	f103 0301 	add.w	r3, r3, #1
 801a444:	bf08      	it	eq
 801a446:	2320      	moveq	r3, #32
 801a448:	4618      	mov	r0, r3
 801a44a:	4770      	bx	lr
 801a44c:	2300      	movs	r3, #0
 801a44e:	e7e4      	b.n	801a41a <__hi0bits+0xa>

0801a450 <__lo0bits>:
 801a450:	6803      	ldr	r3, [r0, #0]
 801a452:	f013 0207 	ands.w	r2, r3, #7
 801a456:	4601      	mov	r1, r0
 801a458:	d00b      	beq.n	801a472 <__lo0bits+0x22>
 801a45a:	07da      	lsls	r2, r3, #31
 801a45c:	d423      	bmi.n	801a4a6 <__lo0bits+0x56>
 801a45e:	0798      	lsls	r0, r3, #30
 801a460:	bf49      	itett	mi
 801a462:	085b      	lsrmi	r3, r3, #1
 801a464:	089b      	lsrpl	r3, r3, #2
 801a466:	2001      	movmi	r0, #1
 801a468:	600b      	strmi	r3, [r1, #0]
 801a46a:	bf5c      	itt	pl
 801a46c:	600b      	strpl	r3, [r1, #0]
 801a46e:	2002      	movpl	r0, #2
 801a470:	4770      	bx	lr
 801a472:	b298      	uxth	r0, r3
 801a474:	b9a8      	cbnz	r0, 801a4a2 <__lo0bits+0x52>
 801a476:	0c1b      	lsrs	r3, r3, #16
 801a478:	2010      	movs	r0, #16
 801a47a:	b2da      	uxtb	r2, r3
 801a47c:	b90a      	cbnz	r2, 801a482 <__lo0bits+0x32>
 801a47e:	3008      	adds	r0, #8
 801a480:	0a1b      	lsrs	r3, r3, #8
 801a482:	071a      	lsls	r2, r3, #28
 801a484:	bf04      	itt	eq
 801a486:	091b      	lsreq	r3, r3, #4
 801a488:	3004      	addeq	r0, #4
 801a48a:	079a      	lsls	r2, r3, #30
 801a48c:	bf04      	itt	eq
 801a48e:	089b      	lsreq	r3, r3, #2
 801a490:	3002      	addeq	r0, #2
 801a492:	07da      	lsls	r2, r3, #31
 801a494:	d403      	bmi.n	801a49e <__lo0bits+0x4e>
 801a496:	085b      	lsrs	r3, r3, #1
 801a498:	f100 0001 	add.w	r0, r0, #1
 801a49c:	d005      	beq.n	801a4aa <__lo0bits+0x5a>
 801a49e:	600b      	str	r3, [r1, #0]
 801a4a0:	4770      	bx	lr
 801a4a2:	4610      	mov	r0, r2
 801a4a4:	e7e9      	b.n	801a47a <__lo0bits+0x2a>
 801a4a6:	2000      	movs	r0, #0
 801a4a8:	4770      	bx	lr
 801a4aa:	2020      	movs	r0, #32
 801a4ac:	4770      	bx	lr
	...

0801a4b0 <__i2b>:
 801a4b0:	b510      	push	{r4, lr}
 801a4b2:	460c      	mov	r4, r1
 801a4b4:	2101      	movs	r1, #1
 801a4b6:	f7ff feb9 	bl	801a22c <_Balloc>
 801a4ba:	4602      	mov	r2, r0
 801a4bc:	b928      	cbnz	r0, 801a4ca <__i2b+0x1a>
 801a4be:	4b05      	ldr	r3, [pc, #20]	; (801a4d4 <__i2b+0x24>)
 801a4c0:	4805      	ldr	r0, [pc, #20]	; (801a4d8 <__i2b+0x28>)
 801a4c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a4c6:	f001 fa17 	bl	801b8f8 <__assert_func>
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	6144      	str	r4, [r0, #20]
 801a4ce:	6103      	str	r3, [r0, #16]
 801a4d0:	bd10      	pop	{r4, pc}
 801a4d2:	bf00      	nop
 801a4d4:	0801c820 	.word	0x0801c820
 801a4d8:	0801c8ac 	.word	0x0801c8ac

0801a4dc <__multiply>:
 801a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e0:	4691      	mov	r9, r2
 801a4e2:	690a      	ldr	r2, [r1, #16]
 801a4e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a4e8:	429a      	cmp	r2, r3
 801a4ea:	bfb8      	it	lt
 801a4ec:	460b      	movlt	r3, r1
 801a4ee:	460c      	mov	r4, r1
 801a4f0:	bfbc      	itt	lt
 801a4f2:	464c      	movlt	r4, r9
 801a4f4:	4699      	movlt	r9, r3
 801a4f6:	6927      	ldr	r7, [r4, #16]
 801a4f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a4fc:	68a3      	ldr	r3, [r4, #8]
 801a4fe:	6861      	ldr	r1, [r4, #4]
 801a500:	eb07 060a 	add.w	r6, r7, sl
 801a504:	42b3      	cmp	r3, r6
 801a506:	b085      	sub	sp, #20
 801a508:	bfb8      	it	lt
 801a50a:	3101      	addlt	r1, #1
 801a50c:	f7ff fe8e 	bl	801a22c <_Balloc>
 801a510:	b930      	cbnz	r0, 801a520 <__multiply+0x44>
 801a512:	4602      	mov	r2, r0
 801a514:	4b44      	ldr	r3, [pc, #272]	; (801a628 <__multiply+0x14c>)
 801a516:	4845      	ldr	r0, [pc, #276]	; (801a62c <__multiply+0x150>)
 801a518:	f240 115d 	movw	r1, #349	; 0x15d
 801a51c:	f001 f9ec 	bl	801b8f8 <__assert_func>
 801a520:	f100 0514 	add.w	r5, r0, #20
 801a524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801a528:	462b      	mov	r3, r5
 801a52a:	2200      	movs	r2, #0
 801a52c:	4543      	cmp	r3, r8
 801a52e:	d321      	bcc.n	801a574 <__multiply+0x98>
 801a530:	f104 0314 	add.w	r3, r4, #20
 801a534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801a538:	f109 0314 	add.w	r3, r9, #20
 801a53c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801a540:	9202      	str	r2, [sp, #8]
 801a542:	1b3a      	subs	r2, r7, r4
 801a544:	3a15      	subs	r2, #21
 801a546:	f022 0203 	bic.w	r2, r2, #3
 801a54a:	3204      	adds	r2, #4
 801a54c:	f104 0115 	add.w	r1, r4, #21
 801a550:	428f      	cmp	r7, r1
 801a552:	bf38      	it	cc
 801a554:	2204      	movcc	r2, #4
 801a556:	9201      	str	r2, [sp, #4]
 801a558:	9a02      	ldr	r2, [sp, #8]
 801a55a:	9303      	str	r3, [sp, #12]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	d80c      	bhi.n	801a57a <__multiply+0x9e>
 801a560:	2e00      	cmp	r6, #0
 801a562:	dd03      	ble.n	801a56c <__multiply+0x90>
 801a564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d05a      	beq.n	801a622 <__multiply+0x146>
 801a56c:	6106      	str	r6, [r0, #16]
 801a56e:	b005      	add	sp, #20
 801a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a574:	f843 2b04 	str.w	r2, [r3], #4
 801a578:	e7d8      	b.n	801a52c <__multiply+0x50>
 801a57a:	f8b3 a000 	ldrh.w	sl, [r3]
 801a57e:	f1ba 0f00 	cmp.w	sl, #0
 801a582:	d024      	beq.n	801a5ce <__multiply+0xf2>
 801a584:	f104 0e14 	add.w	lr, r4, #20
 801a588:	46a9      	mov	r9, r5
 801a58a:	f04f 0c00 	mov.w	ip, #0
 801a58e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801a592:	f8d9 1000 	ldr.w	r1, [r9]
 801a596:	fa1f fb82 	uxth.w	fp, r2
 801a59a:	b289      	uxth	r1, r1
 801a59c:	fb0a 110b 	mla	r1, sl, fp, r1
 801a5a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801a5a4:	f8d9 2000 	ldr.w	r2, [r9]
 801a5a8:	4461      	add	r1, ip
 801a5aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a5ae:	fb0a c20b 	mla	r2, sl, fp, ip
 801a5b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a5b6:	b289      	uxth	r1, r1
 801a5b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a5bc:	4577      	cmp	r7, lr
 801a5be:	f849 1b04 	str.w	r1, [r9], #4
 801a5c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801a5c6:	d8e2      	bhi.n	801a58e <__multiply+0xb2>
 801a5c8:	9a01      	ldr	r2, [sp, #4]
 801a5ca:	f845 c002 	str.w	ip, [r5, r2]
 801a5ce:	9a03      	ldr	r2, [sp, #12]
 801a5d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a5d4:	3304      	adds	r3, #4
 801a5d6:	f1b9 0f00 	cmp.w	r9, #0
 801a5da:	d020      	beq.n	801a61e <__multiply+0x142>
 801a5dc:	6829      	ldr	r1, [r5, #0]
 801a5de:	f104 0c14 	add.w	ip, r4, #20
 801a5e2:	46ae      	mov	lr, r5
 801a5e4:	f04f 0a00 	mov.w	sl, #0
 801a5e8:	f8bc b000 	ldrh.w	fp, [ip]
 801a5ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a5f0:	fb09 220b 	mla	r2, r9, fp, r2
 801a5f4:	4492      	add	sl, r2
 801a5f6:	b289      	uxth	r1, r1
 801a5f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801a5fc:	f84e 1b04 	str.w	r1, [lr], #4
 801a600:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a604:	f8be 1000 	ldrh.w	r1, [lr]
 801a608:	0c12      	lsrs	r2, r2, #16
 801a60a:	fb09 1102 	mla	r1, r9, r2, r1
 801a60e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801a612:	4567      	cmp	r7, ip
 801a614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801a618:	d8e6      	bhi.n	801a5e8 <__multiply+0x10c>
 801a61a:	9a01      	ldr	r2, [sp, #4]
 801a61c:	50a9      	str	r1, [r5, r2]
 801a61e:	3504      	adds	r5, #4
 801a620:	e79a      	b.n	801a558 <__multiply+0x7c>
 801a622:	3e01      	subs	r6, #1
 801a624:	e79c      	b.n	801a560 <__multiply+0x84>
 801a626:	bf00      	nop
 801a628:	0801c820 	.word	0x0801c820
 801a62c:	0801c8ac 	.word	0x0801c8ac

0801a630 <__pow5mult>:
 801a630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a634:	4615      	mov	r5, r2
 801a636:	f012 0203 	ands.w	r2, r2, #3
 801a63a:	4606      	mov	r6, r0
 801a63c:	460f      	mov	r7, r1
 801a63e:	d007      	beq.n	801a650 <__pow5mult+0x20>
 801a640:	4c25      	ldr	r4, [pc, #148]	; (801a6d8 <__pow5mult+0xa8>)
 801a642:	3a01      	subs	r2, #1
 801a644:	2300      	movs	r3, #0
 801a646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a64a:	f7ff fe51 	bl	801a2f0 <__multadd>
 801a64e:	4607      	mov	r7, r0
 801a650:	10ad      	asrs	r5, r5, #2
 801a652:	d03d      	beq.n	801a6d0 <__pow5mult+0xa0>
 801a654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a656:	b97c      	cbnz	r4, 801a678 <__pow5mult+0x48>
 801a658:	2010      	movs	r0, #16
 801a65a:	f7ff fdcd 	bl	801a1f8 <malloc>
 801a65e:	4602      	mov	r2, r0
 801a660:	6270      	str	r0, [r6, #36]	; 0x24
 801a662:	b928      	cbnz	r0, 801a670 <__pow5mult+0x40>
 801a664:	4b1d      	ldr	r3, [pc, #116]	; (801a6dc <__pow5mult+0xac>)
 801a666:	481e      	ldr	r0, [pc, #120]	; (801a6e0 <__pow5mult+0xb0>)
 801a668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a66c:	f001 f944 	bl	801b8f8 <__assert_func>
 801a670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a674:	6004      	str	r4, [r0, #0]
 801a676:	60c4      	str	r4, [r0, #12]
 801a678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a67c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a680:	b94c      	cbnz	r4, 801a696 <__pow5mult+0x66>
 801a682:	f240 2171 	movw	r1, #625	; 0x271
 801a686:	4630      	mov	r0, r6
 801a688:	f7ff ff12 	bl	801a4b0 <__i2b>
 801a68c:	2300      	movs	r3, #0
 801a68e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a692:	4604      	mov	r4, r0
 801a694:	6003      	str	r3, [r0, #0]
 801a696:	f04f 0900 	mov.w	r9, #0
 801a69a:	07eb      	lsls	r3, r5, #31
 801a69c:	d50a      	bpl.n	801a6b4 <__pow5mult+0x84>
 801a69e:	4639      	mov	r1, r7
 801a6a0:	4622      	mov	r2, r4
 801a6a2:	4630      	mov	r0, r6
 801a6a4:	f7ff ff1a 	bl	801a4dc <__multiply>
 801a6a8:	4639      	mov	r1, r7
 801a6aa:	4680      	mov	r8, r0
 801a6ac:	4630      	mov	r0, r6
 801a6ae:	f7ff fdfd 	bl	801a2ac <_Bfree>
 801a6b2:	4647      	mov	r7, r8
 801a6b4:	106d      	asrs	r5, r5, #1
 801a6b6:	d00b      	beq.n	801a6d0 <__pow5mult+0xa0>
 801a6b8:	6820      	ldr	r0, [r4, #0]
 801a6ba:	b938      	cbnz	r0, 801a6cc <__pow5mult+0x9c>
 801a6bc:	4622      	mov	r2, r4
 801a6be:	4621      	mov	r1, r4
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f7ff ff0b 	bl	801a4dc <__multiply>
 801a6c6:	6020      	str	r0, [r4, #0]
 801a6c8:	f8c0 9000 	str.w	r9, [r0]
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	e7e4      	b.n	801a69a <__pow5mult+0x6a>
 801a6d0:	4638      	mov	r0, r7
 801a6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6d6:	bf00      	nop
 801a6d8:	0801c9f8 	.word	0x0801c9f8
 801a6dc:	0801c7ae 	.word	0x0801c7ae
 801a6e0:	0801c8ac 	.word	0x0801c8ac

0801a6e4 <__lshift>:
 801a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6e8:	460c      	mov	r4, r1
 801a6ea:	6849      	ldr	r1, [r1, #4]
 801a6ec:	6923      	ldr	r3, [r4, #16]
 801a6ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a6f2:	68a3      	ldr	r3, [r4, #8]
 801a6f4:	4607      	mov	r7, r0
 801a6f6:	4691      	mov	r9, r2
 801a6f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a6fc:	f108 0601 	add.w	r6, r8, #1
 801a700:	42b3      	cmp	r3, r6
 801a702:	db0b      	blt.n	801a71c <__lshift+0x38>
 801a704:	4638      	mov	r0, r7
 801a706:	f7ff fd91 	bl	801a22c <_Balloc>
 801a70a:	4605      	mov	r5, r0
 801a70c:	b948      	cbnz	r0, 801a722 <__lshift+0x3e>
 801a70e:	4602      	mov	r2, r0
 801a710:	4b2a      	ldr	r3, [pc, #168]	; (801a7bc <__lshift+0xd8>)
 801a712:	482b      	ldr	r0, [pc, #172]	; (801a7c0 <__lshift+0xdc>)
 801a714:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a718:	f001 f8ee 	bl	801b8f8 <__assert_func>
 801a71c:	3101      	adds	r1, #1
 801a71e:	005b      	lsls	r3, r3, #1
 801a720:	e7ee      	b.n	801a700 <__lshift+0x1c>
 801a722:	2300      	movs	r3, #0
 801a724:	f100 0114 	add.w	r1, r0, #20
 801a728:	f100 0210 	add.w	r2, r0, #16
 801a72c:	4618      	mov	r0, r3
 801a72e:	4553      	cmp	r3, sl
 801a730:	db37      	blt.n	801a7a2 <__lshift+0xbe>
 801a732:	6920      	ldr	r0, [r4, #16]
 801a734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a738:	f104 0314 	add.w	r3, r4, #20
 801a73c:	f019 091f 	ands.w	r9, r9, #31
 801a740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a748:	d02f      	beq.n	801a7aa <__lshift+0xc6>
 801a74a:	f1c9 0e20 	rsb	lr, r9, #32
 801a74e:	468a      	mov	sl, r1
 801a750:	f04f 0c00 	mov.w	ip, #0
 801a754:	681a      	ldr	r2, [r3, #0]
 801a756:	fa02 f209 	lsl.w	r2, r2, r9
 801a75a:	ea42 020c 	orr.w	r2, r2, ip
 801a75e:	f84a 2b04 	str.w	r2, [sl], #4
 801a762:	f853 2b04 	ldr.w	r2, [r3], #4
 801a766:	4298      	cmp	r0, r3
 801a768:	fa22 fc0e 	lsr.w	ip, r2, lr
 801a76c:	d8f2      	bhi.n	801a754 <__lshift+0x70>
 801a76e:	1b03      	subs	r3, r0, r4
 801a770:	3b15      	subs	r3, #21
 801a772:	f023 0303 	bic.w	r3, r3, #3
 801a776:	3304      	adds	r3, #4
 801a778:	f104 0215 	add.w	r2, r4, #21
 801a77c:	4290      	cmp	r0, r2
 801a77e:	bf38      	it	cc
 801a780:	2304      	movcc	r3, #4
 801a782:	f841 c003 	str.w	ip, [r1, r3]
 801a786:	f1bc 0f00 	cmp.w	ip, #0
 801a78a:	d001      	beq.n	801a790 <__lshift+0xac>
 801a78c:	f108 0602 	add.w	r6, r8, #2
 801a790:	3e01      	subs	r6, #1
 801a792:	4638      	mov	r0, r7
 801a794:	612e      	str	r6, [r5, #16]
 801a796:	4621      	mov	r1, r4
 801a798:	f7ff fd88 	bl	801a2ac <_Bfree>
 801a79c:	4628      	mov	r0, r5
 801a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801a7a6:	3301      	adds	r3, #1
 801a7a8:	e7c1      	b.n	801a72e <__lshift+0x4a>
 801a7aa:	3904      	subs	r1, #4
 801a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a7b4:	4298      	cmp	r0, r3
 801a7b6:	d8f9      	bhi.n	801a7ac <__lshift+0xc8>
 801a7b8:	e7ea      	b.n	801a790 <__lshift+0xac>
 801a7ba:	bf00      	nop
 801a7bc:	0801c820 	.word	0x0801c820
 801a7c0:	0801c8ac 	.word	0x0801c8ac

0801a7c4 <__mcmp>:
 801a7c4:	b530      	push	{r4, r5, lr}
 801a7c6:	6902      	ldr	r2, [r0, #16]
 801a7c8:	690c      	ldr	r4, [r1, #16]
 801a7ca:	1b12      	subs	r2, r2, r4
 801a7cc:	d10e      	bne.n	801a7ec <__mcmp+0x28>
 801a7ce:	f100 0314 	add.w	r3, r0, #20
 801a7d2:	3114      	adds	r1, #20
 801a7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a7e4:	42a5      	cmp	r5, r4
 801a7e6:	d003      	beq.n	801a7f0 <__mcmp+0x2c>
 801a7e8:	d305      	bcc.n	801a7f6 <__mcmp+0x32>
 801a7ea:	2201      	movs	r2, #1
 801a7ec:	4610      	mov	r0, r2
 801a7ee:	bd30      	pop	{r4, r5, pc}
 801a7f0:	4283      	cmp	r3, r0
 801a7f2:	d3f3      	bcc.n	801a7dc <__mcmp+0x18>
 801a7f4:	e7fa      	b.n	801a7ec <__mcmp+0x28>
 801a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 801a7fa:	e7f7      	b.n	801a7ec <__mcmp+0x28>

0801a7fc <__mdiff>:
 801a7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a800:	460c      	mov	r4, r1
 801a802:	4606      	mov	r6, r0
 801a804:	4611      	mov	r1, r2
 801a806:	4620      	mov	r0, r4
 801a808:	4690      	mov	r8, r2
 801a80a:	f7ff ffdb 	bl	801a7c4 <__mcmp>
 801a80e:	1e05      	subs	r5, r0, #0
 801a810:	d110      	bne.n	801a834 <__mdiff+0x38>
 801a812:	4629      	mov	r1, r5
 801a814:	4630      	mov	r0, r6
 801a816:	f7ff fd09 	bl	801a22c <_Balloc>
 801a81a:	b930      	cbnz	r0, 801a82a <__mdiff+0x2e>
 801a81c:	4b3a      	ldr	r3, [pc, #232]	; (801a908 <__mdiff+0x10c>)
 801a81e:	4602      	mov	r2, r0
 801a820:	f240 2132 	movw	r1, #562	; 0x232
 801a824:	4839      	ldr	r0, [pc, #228]	; (801a90c <__mdiff+0x110>)
 801a826:	f001 f867 	bl	801b8f8 <__assert_func>
 801a82a:	2301      	movs	r3, #1
 801a82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a834:	bfa4      	itt	ge
 801a836:	4643      	movge	r3, r8
 801a838:	46a0      	movge	r8, r4
 801a83a:	4630      	mov	r0, r6
 801a83c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a840:	bfa6      	itte	ge
 801a842:	461c      	movge	r4, r3
 801a844:	2500      	movge	r5, #0
 801a846:	2501      	movlt	r5, #1
 801a848:	f7ff fcf0 	bl	801a22c <_Balloc>
 801a84c:	b920      	cbnz	r0, 801a858 <__mdiff+0x5c>
 801a84e:	4b2e      	ldr	r3, [pc, #184]	; (801a908 <__mdiff+0x10c>)
 801a850:	4602      	mov	r2, r0
 801a852:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a856:	e7e5      	b.n	801a824 <__mdiff+0x28>
 801a858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a85c:	6926      	ldr	r6, [r4, #16]
 801a85e:	60c5      	str	r5, [r0, #12]
 801a860:	f104 0914 	add.w	r9, r4, #20
 801a864:	f108 0514 	add.w	r5, r8, #20
 801a868:	f100 0e14 	add.w	lr, r0, #20
 801a86c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a874:	f108 0210 	add.w	r2, r8, #16
 801a878:	46f2      	mov	sl, lr
 801a87a:	2100      	movs	r1, #0
 801a87c:	f859 3b04 	ldr.w	r3, [r9], #4
 801a880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a884:	fa1f f883 	uxth.w	r8, r3
 801a888:	fa11 f18b 	uxtah	r1, r1, fp
 801a88c:	0c1b      	lsrs	r3, r3, #16
 801a88e:	eba1 0808 	sub.w	r8, r1, r8
 801a892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a89a:	fa1f f888 	uxth.w	r8, r8
 801a89e:	1419      	asrs	r1, r3, #16
 801a8a0:	454e      	cmp	r6, r9
 801a8a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a8a6:	f84a 3b04 	str.w	r3, [sl], #4
 801a8aa:	d8e7      	bhi.n	801a87c <__mdiff+0x80>
 801a8ac:	1b33      	subs	r3, r6, r4
 801a8ae:	3b15      	subs	r3, #21
 801a8b0:	f023 0303 	bic.w	r3, r3, #3
 801a8b4:	3304      	adds	r3, #4
 801a8b6:	3415      	adds	r4, #21
 801a8b8:	42a6      	cmp	r6, r4
 801a8ba:	bf38      	it	cc
 801a8bc:	2304      	movcc	r3, #4
 801a8be:	441d      	add	r5, r3
 801a8c0:	4473      	add	r3, lr
 801a8c2:	469e      	mov	lr, r3
 801a8c4:	462e      	mov	r6, r5
 801a8c6:	4566      	cmp	r6, ip
 801a8c8:	d30e      	bcc.n	801a8e8 <__mdiff+0xec>
 801a8ca:	f10c 0203 	add.w	r2, ip, #3
 801a8ce:	1b52      	subs	r2, r2, r5
 801a8d0:	f022 0203 	bic.w	r2, r2, #3
 801a8d4:	3d03      	subs	r5, #3
 801a8d6:	45ac      	cmp	ip, r5
 801a8d8:	bf38      	it	cc
 801a8da:	2200      	movcc	r2, #0
 801a8dc:	441a      	add	r2, r3
 801a8de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a8e2:	b17b      	cbz	r3, 801a904 <__mdiff+0x108>
 801a8e4:	6107      	str	r7, [r0, #16]
 801a8e6:	e7a3      	b.n	801a830 <__mdiff+0x34>
 801a8e8:	f856 8b04 	ldr.w	r8, [r6], #4
 801a8ec:	fa11 f288 	uxtah	r2, r1, r8
 801a8f0:	1414      	asrs	r4, r2, #16
 801a8f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a8f6:	b292      	uxth	r2, r2
 801a8f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a8fc:	f84e 2b04 	str.w	r2, [lr], #4
 801a900:	1421      	asrs	r1, r4, #16
 801a902:	e7e0      	b.n	801a8c6 <__mdiff+0xca>
 801a904:	3f01      	subs	r7, #1
 801a906:	e7ea      	b.n	801a8de <__mdiff+0xe2>
 801a908:	0801c820 	.word	0x0801c820
 801a90c:	0801c8ac 	.word	0x0801c8ac

0801a910 <__ulp>:
 801a910:	b082      	sub	sp, #8
 801a912:	ed8d 0b00 	vstr	d0, [sp]
 801a916:	9b01      	ldr	r3, [sp, #4]
 801a918:	4912      	ldr	r1, [pc, #72]	; (801a964 <__ulp+0x54>)
 801a91a:	4019      	ands	r1, r3
 801a91c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a920:	2900      	cmp	r1, #0
 801a922:	dd05      	ble.n	801a930 <__ulp+0x20>
 801a924:	2200      	movs	r2, #0
 801a926:	460b      	mov	r3, r1
 801a928:	ec43 2b10 	vmov	d0, r2, r3
 801a92c:	b002      	add	sp, #8
 801a92e:	4770      	bx	lr
 801a930:	4249      	negs	r1, r1
 801a932:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a936:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a93a:	f04f 0200 	mov.w	r2, #0
 801a93e:	f04f 0300 	mov.w	r3, #0
 801a942:	da04      	bge.n	801a94e <__ulp+0x3e>
 801a944:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a948:	fa41 f300 	asr.w	r3, r1, r0
 801a94c:	e7ec      	b.n	801a928 <__ulp+0x18>
 801a94e:	f1a0 0114 	sub.w	r1, r0, #20
 801a952:	291e      	cmp	r1, #30
 801a954:	bfda      	itte	le
 801a956:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a95a:	fa20 f101 	lsrle.w	r1, r0, r1
 801a95e:	2101      	movgt	r1, #1
 801a960:	460a      	mov	r2, r1
 801a962:	e7e1      	b.n	801a928 <__ulp+0x18>
 801a964:	7ff00000 	.word	0x7ff00000

0801a968 <__b2d>:
 801a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a96a:	6905      	ldr	r5, [r0, #16]
 801a96c:	f100 0714 	add.w	r7, r0, #20
 801a970:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a974:	1f2e      	subs	r6, r5, #4
 801a976:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a97a:	4620      	mov	r0, r4
 801a97c:	f7ff fd48 	bl	801a410 <__hi0bits>
 801a980:	f1c0 0320 	rsb	r3, r0, #32
 801a984:	280a      	cmp	r0, #10
 801a986:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801aa04 <__b2d+0x9c>
 801a98a:	600b      	str	r3, [r1, #0]
 801a98c:	dc14      	bgt.n	801a9b8 <__b2d+0x50>
 801a98e:	f1c0 0e0b 	rsb	lr, r0, #11
 801a992:	fa24 f10e 	lsr.w	r1, r4, lr
 801a996:	42b7      	cmp	r7, r6
 801a998:	ea41 030c 	orr.w	r3, r1, ip
 801a99c:	bf34      	ite	cc
 801a99e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a9a2:	2100      	movcs	r1, #0
 801a9a4:	3015      	adds	r0, #21
 801a9a6:	fa04 f000 	lsl.w	r0, r4, r0
 801a9aa:	fa21 f10e 	lsr.w	r1, r1, lr
 801a9ae:	ea40 0201 	orr.w	r2, r0, r1
 801a9b2:	ec43 2b10 	vmov	d0, r2, r3
 801a9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9b8:	42b7      	cmp	r7, r6
 801a9ba:	bf3a      	itte	cc
 801a9bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a9c0:	f1a5 0608 	subcc.w	r6, r5, #8
 801a9c4:	2100      	movcs	r1, #0
 801a9c6:	380b      	subs	r0, #11
 801a9c8:	d017      	beq.n	801a9fa <__b2d+0x92>
 801a9ca:	f1c0 0c20 	rsb	ip, r0, #32
 801a9ce:	fa04 f500 	lsl.w	r5, r4, r0
 801a9d2:	42be      	cmp	r6, r7
 801a9d4:	fa21 f40c 	lsr.w	r4, r1, ip
 801a9d8:	ea45 0504 	orr.w	r5, r5, r4
 801a9dc:	bf8c      	ite	hi
 801a9de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a9e2:	2400      	movls	r4, #0
 801a9e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a9e8:	fa01 f000 	lsl.w	r0, r1, r0
 801a9ec:	fa24 f40c 	lsr.w	r4, r4, ip
 801a9f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a9f4:	ea40 0204 	orr.w	r2, r0, r4
 801a9f8:	e7db      	b.n	801a9b2 <__b2d+0x4a>
 801a9fa:	ea44 030c 	orr.w	r3, r4, ip
 801a9fe:	460a      	mov	r2, r1
 801aa00:	e7d7      	b.n	801a9b2 <__b2d+0x4a>
 801aa02:	bf00      	nop
 801aa04:	3ff00000 	.word	0x3ff00000

0801aa08 <__d2b>:
 801aa08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aa0c:	4689      	mov	r9, r1
 801aa0e:	2101      	movs	r1, #1
 801aa10:	ec57 6b10 	vmov	r6, r7, d0
 801aa14:	4690      	mov	r8, r2
 801aa16:	f7ff fc09 	bl	801a22c <_Balloc>
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	b930      	cbnz	r0, 801aa2c <__d2b+0x24>
 801aa1e:	4602      	mov	r2, r0
 801aa20:	4b25      	ldr	r3, [pc, #148]	; (801aab8 <__d2b+0xb0>)
 801aa22:	4826      	ldr	r0, [pc, #152]	; (801aabc <__d2b+0xb4>)
 801aa24:	f240 310a 	movw	r1, #778	; 0x30a
 801aa28:	f000 ff66 	bl	801b8f8 <__assert_func>
 801aa2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801aa30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801aa34:	bb35      	cbnz	r5, 801aa84 <__d2b+0x7c>
 801aa36:	2e00      	cmp	r6, #0
 801aa38:	9301      	str	r3, [sp, #4]
 801aa3a:	d028      	beq.n	801aa8e <__d2b+0x86>
 801aa3c:	4668      	mov	r0, sp
 801aa3e:	9600      	str	r6, [sp, #0]
 801aa40:	f7ff fd06 	bl	801a450 <__lo0bits>
 801aa44:	9900      	ldr	r1, [sp, #0]
 801aa46:	b300      	cbz	r0, 801aa8a <__d2b+0x82>
 801aa48:	9a01      	ldr	r2, [sp, #4]
 801aa4a:	f1c0 0320 	rsb	r3, r0, #32
 801aa4e:	fa02 f303 	lsl.w	r3, r2, r3
 801aa52:	430b      	orrs	r3, r1
 801aa54:	40c2      	lsrs	r2, r0
 801aa56:	6163      	str	r3, [r4, #20]
 801aa58:	9201      	str	r2, [sp, #4]
 801aa5a:	9b01      	ldr	r3, [sp, #4]
 801aa5c:	61a3      	str	r3, [r4, #24]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	bf14      	ite	ne
 801aa62:	2202      	movne	r2, #2
 801aa64:	2201      	moveq	r2, #1
 801aa66:	6122      	str	r2, [r4, #16]
 801aa68:	b1d5      	cbz	r5, 801aaa0 <__d2b+0x98>
 801aa6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801aa6e:	4405      	add	r5, r0
 801aa70:	f8c9 5000 	str.w	r5, [r9]
 801aa74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801aa78:	f8c8 0000 	str.w	r0, [r8]
 801aa7c:	4620      	mov	r0, r4
 801aa7e:	b003      	add	sp, #12
 801aa80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aa88:	e7d5      	b.n	801aa36 <__d2b+0x2e>
 801aa8a:	6161      	str	r1, [r4, #20]
 801aa8c:	e7e5      	b.n	801aa5a <__d2b+0x52>
 801aa8e:	a801      	add	r0, sp, #4
 801aa90:	f7ff fcde 	bl	801a450 <__lo0bits>
 801aa94:	9b01      	ldr	r3, [sp, #4]
 801aa96:	6163      	str	r3, [r4, #20]
 801aa98:	2201      	movs	r2, #1
 801aa9a:	6122      	str	r2, [r4, #16]
 801aa9c:	3020      	adds	r0, #32
 801aa9e:	e7e3      	b.n	801aa68 <__d2b+0x60>
 801aaa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801aaa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801aaa8:	f8c9 0000 	str.w	r0, [r9]
 801aaac:	6918      	ldr	r0, [r3, #16]
 801aaae:	f7ff fcaf 	bl	801a410 <__hi0bits>
 801aab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801aab6:	e7df      	b.n	801aa78 <__d2b+0x70>
 801aab8:	0801c820 	.word	0x0801c820
 801aabc:	0801c8ac 	.word	0x0801c8ac

0801aac0 <__ratio>:
 801aac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac4:	4688      	mov	r8, r1
 801aac6:	4669      	mov	r1, sp
 801aac8:	4681      	mov	r9, r0
 801aaca:	f7ff ff4d 	bl	801a968 <__b2d>
 801aace:	a901      	add	r1, sp, #4
 801aad0:	4640      	mov	r0, r8
 801aad2:	ec55 4b10 	vmov	r4, r5, d0
 801aad6:	ee10 aa10 	vmov	sl, s0
 801aada:	f7ff ff45 	bl	801a968 <__b2d>
 801aade:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801aae2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801aae6:	1a59      	subs	r1, r3, r1
 801aae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aaec:	1ad3      	subs	r3, r2, r3
 801aaee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801aaf2:	ec57 6b10 	vmov	r6, r7, d0
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	bfd6      	itet	le
 801aafa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801aafe:	462a      	movgt	r2, r5
 801ab00:	463a      	movle	r2, r7
 801ab02:	46ab      	mov	fp, r5
 801ab04:	bfd6      	itet	le
 801ab06:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801ab0a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801ab0e:	ee00 3a90 	vmovle	s1, r3
 801ab12:	ec4b ab17 	vmov	d7, sl, fp
 801ab16:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801ab1a:	b003      	add	sp, #12
 801ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab20 <__copybits>:
 801ab20:	3901      	subs	r1, #1
 801ab22:	b570      	push	{r4, r5, r6, lr}
 801ab24:	1149      	asrs	r1, r1, #5
 801ab26:	6914      	ldr	r4, [r2, #16]
 801ab28:	3101      	adds	r1, #1
 801ab2a:	f102 0314 	add.w	r3, r2, #20
 801ab2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ab32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ab36:	1f05      	subs	r5, r0, #4
 801ab38:	42a3      	cmp	r3, r4
 801ab3a:	d30c      	bcc.n	801ab56 <__copybits+0x36>
 801ab3c:	1aa3      	subs	r3, r4, r2
 801ab3e:	3b11      	subs	r3, #17
 801ab40:	f023 0303 	bic.w	r3, r3, #3
 801ab44:	3211      	adds	r2, #17
 801ab46:	42a2      	cmp	r2, r4
 801ab48:	bf88      	it	hi
 801ab4a:	2300      	movhi	r3, #0
 801ab4c:	4418      	add	r0, r3
 801ab4e:	2300      	movs	r3, #0
 801ab50:	4288      	cmp	r0, r1
 801ab52:	d305      	bcc.n	801ab60 <__copybits+0x40>
 801ab54:	bd70      	pop	{r4, r5, r6, pc}
 801ab56:	f853 6b04 	ldr.w	r6, [r3], #4
 801ab5a:	f845 6f04 	str.w	r6, [r5, #4]!
 801ab5e:	e7eb      	b.n	801ab38 <__copybits+0x18>
 801ab60:	f840 3b04 	str.w	r3, [r0], #4
 801ab64:	e7f4      	b.n	801ab50 <__copybits+0x30>

0801ab66 <__any_on>:
 801ab66:	f100 0214 	add.w	r2, r0, #20
 801ab6a:	6900      	ldr	r0, [r0, #16]
 801ab6c:	114b      	asrs	r3, r1, #5
 801ab6e:	4298      	cmp	r0, r3
 801ab70:	b510      	push	{r4, lr}
 801ab72:	db11      	blt.n	801ab98 <__any_on+0x32>
 801ab74:	dd0a      	ble.n	801ab8c <__any_on+0x26>
 801ab76:	f011 011f 	ands.w	r1, r1, #31
 801ab7a:	d007      	beq.n	801ab8c <__any_on+0x26>
 801ab7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ab80:	fa24 f001 	lsr.w	r0, r4, r1
 801ab84:	fa00 f101 	lsl.w	r1, r0, r1
 801ab88:	428c      	cmp	r4, r1
 801ab8a:	d10b      	bne.n	801aba4 <__any_on+0x3e>
 801ab8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ab90:	4293      	cmp	r3, r2
 801ab92:	d803      	bhi.n	801ab9c <__any_on+0x36>
 801ab94:	2000      	movs	r0, #0
 801ab96:	bd10      	pop	{r4, pc}
 801ab98:	4603      	mov	r3, r0
 801ab9a:	e7f7      	b.n	801ab8c <__any_on+0x26>
 801ab9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801aba0:	2900      	cmp	r1, #0
 801aba2:	d0f5      	beq.n	801ab90 <__any_on+0x2a>
 801aba4:	2001      	movs	r0, #1
 801aba6:	e7f6      	b.n	801ab96 <__any_on+0x30>

0801aba8 <_calloc_r>:
 801aba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801abaa:	fba1 2402 	umull	r2, r4, r1, r2
 801abae:	b94c      	cbnz	r4, 801abc4 <_calloc_r+0x1c>
 801abb0:	4611      	mov	r1, r2
 801abb2:	9201      	str	r2, [sp, #4]
 801abb4:	f000 f87a 	bl	801acac <_malloc_r>
 801abb8:	9a01      	ldr	r2, [sp, #4]
 801abba:	4605      	mov	r5, r0
 801abbc:	b930      	cbnz	r0, 801abcc <_calloc_r+0x24>
 801abbe:	4628      	mov	r0, r5
 801abc0:	b003      	add	sp, #12
 801abc2:	bd30      	pop	{r4, r5, pc}
 801abc4:	220c      	movs	r2, #12
 801abc6:	6002      	str	r2, [r0, #0]
 801abc8:	2500      	movs	r5, #0
 801abca:	e7f8      	b.n	801abbe <_calloc_r+0x16>
 801abcc:	4621      	mov	r1, r4
 801abce:	f7fc fc29 	bl	8017424 <memset>
 801abd2:	e7f4      	b.n	801abbe <_calloc_r+0x16>

0801abd4 <_free_r>:
 801abd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801abd6:	2900      	cmp	r1, #0
 801abd8:	d044      	beq.n	801ac64 <_free_r+0x90>
 801abda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801abde:	9001      	str	r0, [sp, #4]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	f1a1 0404 	sub.w	r4, r1, #4
 801abe6:	bfb8      	it	lt
 801abe8:	18e4      	addlt	r4, r4, r3
 801abea:	f001 f889 	bl	801bd00 <__malloc_lock>
 801abee:	4a1e      	ldr	r2, [pc, #120]	; (801ac68 <_free_r+0x94>)
 801abf0:	9801      	ldr	r0, [sp, #4]
 801abf2:	6813      	ldr	r3, [r2, #0]
 801abf4:	b933      	cbnz	r3, 801ac04 <_free_r+0x30>
 801abf6:	6063      	str	r3, [r4, #4]
 801abf8:	6014      	str	r4, [r2, #0]
 801abfa:	b003      	add	sp, #12
 801abfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac00:	f001 b884 	b.w	801bd0c <__malloc_unlock>
 801ac04:	42a3      	cmp	r3, r4
 801ac06:	d908      	bls.n	801ac1a <_free_r+0x46>
 801ac08:	6825      	ldr	r5, [r4, #0]
 801ac0a:	1961      	adds	r1, r4, r5
 801ac0c:	428b      	cmp	r3, r1
 801ac0e:	bf01      	itttt	eq
 801ac10:	6819      	ldreq	r1, [r3, #0]
 801ac12:	685b      	ldreq	r3, [r3, #4]
 801ac14:	1949      	addeq	r1, r1, r5
 801ac16:	6021      	streq	r1, [r4, #0]
 801ac18:	e7ed      	b.n	801abf6 <_free_r+0x22>
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	685b      	ldr	r3, [r3, #4]
 801ac1e:	b10b      	cbz	r3, 801ac24 <_free_r+0x50>
 801ac20:	42a3      	cmp	r3, r4
 801ac22:	d9fa      	bls.n	801ac1a <_free_r+0x46>
 801ac24:	6811      	ldr	r1, [r2, #0]
 801ac26:	1855      	adds	r5, r2, r1
 801ac28:	42a5      	cmp	r5, r4
 801ac2a:	d10b      	bne.n	801ac44 <_free_r+0x70>
 801ac2c:	6824      	ldr	r4, [r4, #0]
 801ac2e:	4421      	add	r1, r4
 801ac30:	1854      	adds	r4, r2, r1
 801ac32:	42a3      	cmp	r3, r4
 801ac34:	6011      	str	r1, [r2, #0]
 801ac36:	d1e0      	bne.n	801abfa <_free_r+0x26>
 801ac38:	681c      	ldr	r4, [r3, #0]
 801ac3a:	685b      	ldr	r3, [r3, #4]
 801ac3c:	6053      	str	r3, [r2, #4]
 801ac3e:	4421      	add	r1, r4
 801ac40:	6011      	str	r1, [r2, #0]
 801ac42:	e7da      	b.n	801abfa <_free_r+0x26>
 801ac44:	d902      	bls.n	801ac4c <_free_r+0x78>
 801ac46:	230c      	movs	r3, #12
 801ac48:	6003      	str	r3, [r0, #0]
 801ac4a:	e7d6      	b.n	801abfa <_free_r+0x26>
 801ac4c:	6825      	ldr	r5, [r4, #0]
 801ac4e:	1961      	adds	r1, r4, r5
 801ac50:	428b      	cmp	r3, r1
 801ac52:	bf04      	itt	eq
 801ac54:	6819      	ldreq	r1, [r3, #0]
 801ac56:	685b      	ldreq	r3, [r3, #4]
 801ac58:	6063      	str	r3, [r4, #4]
 801ac5a:	bf04      	itt	eq
 801ac5c:	1949      	addeq	r1, r1, r5
 801ac5e:	6021      	streq	r1, [r4, #0]
 801ac60:	6054      	str	r4, [r2, #4]
 801ac62:	e7ca      	b.n	801abfa <_free_r+0x26>
 801ac64:	b003      	add	sp, #12
 801ac66:	bd30      	pop	{r4, r5, pc}
 801ac68:	24003230 	.word	0x24003230

0801ac6c <sbrk_aligned>:
 801ac6c:	b570      	push	{r4, r5, r6, lr}
 801ac6e:	4e0e      	ldr	r6, [pc, #56]	; (801aca8 <sbrk_aligned+0x3c>)
 801ac70:	460c      	mov	r4, r1
 801ac72:	6831      	ldr	r1, [r6, #0]
 801ac74:	4605      	mov	r5, r0
 801ac76:	b911      	cbnz	r1, 801ac7e <sbrk_aligned+0x12>
 801ac78:	f000 fd26 	bl	801b6c8 <_sbrk_r>
 801ac7c:	6030      	str	r0, [r6, #0]
 801ac7e:	4621      	mov	r1, r4
 801ac80:	4628      	mov	r0, r5
 801ac82:	f000 fd21 	bl	801b6c8 <_sbrk_r>
 801ac86:	1c43      	adds	r3, r0, #1
 801ac88:	d00a      	beq.n	801aca0 <sbrk_aligned+0x34>
 801ac8a:	1cc4      	adds	r4, r0, #3
 801ac8c:	f024 0403 	bic.w	r4, r4, #3
 801ac90:	42a0      	cmp	r0, r4
 801ac92:	d007      	beq.n	801aca4 <sbrk_aligned+0x38>
 801ac94:	1a21      	subs	r1, r4, r0
 801ac96:	4628      	mov	r0, r5
 801ac98:	f000 fd16 	bl	801b6c8 <_sbrk_r>
 801ac9c:	3001      	adds	r0, #1
 801ac9e:	d101      	bne.n	801aca4 <sbrk_aligned+0x38>
 801aca0:	f04f 34ff 	mov.w	r4, #4294967295
 801aca4:	4620      	mov	r0, r4
 801aca6:	bd70      	pop	{r4, r5, r6, pc}
 801aca8:	24003234 	.word	0x24003234

0801acac <_malloc_r>:
 801acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acb0:	1ccd      	adds	r5, r1, #3
 801acb2:	f025 0503 	bic.w	r5, r5, #3
 801acb6:	3508      	adds	r5, #8
 801acb8:	2d0c      	cmp	r5, #12
 801acba:	bf38      	it	cc
 801acbc:	250c      	movcc	r5, #12
 801acbe:	2d00      	cmp	r5, #0
 801acc0:	4607      	mov	r7, r0
 801acc2:	db01      	blt.n	801acc8 <_malloc_r+0x1c>
 801acc4:	42a9      	cmp	r1, r5
 801acc6:	d905      	bls.n	801acd4 <_malloc_r+0x28>
 801acc8:	230c      	movs	r3, #12
 801acca:	603b      	str	r3, [r7, #0]
 801accc:	2600      	movs	r6, #0
 801acce:	4630      	mov	r0, r6
 801acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acd4:	4e2e      	ldr	r6, [pc, #184]	; (801ad90 <_malloc_r+0xe4>)
 801acd6:	f001 f813 	bl	801bd00 <__malloc_lock>
 801acda:	6833      	ldr	r3, [r6, #0]
 801acdc:	461c      	mov	r4, r3
 801acde:	bb34      	cbnz	r4, 801ad2e <_malloc_r+0x82>
 801ace0:	4629      	mov	r1, r5
 801ace2:	4638      	mov	r0, r7
 801ace4:	f7ff ffc2 	bl	801ac6c <sbrk_aligned>
 801ace8:	1c43      	adds	r3, r0, #1
 801acea:	4604      	mov	r4, r0
 801acec:	d14d      	bne.n	801ad8a <_malloc_r+0xde>
 801acee:	6834      	ldr	r4, [r6, #0]
 801acf0:	4626      	mov	r6, r4
 801acf2:	2e00      	cmp	r6, #0
 801acf4:	d140      	bne.n	801ad78 <_malloc_r+0xcc>
 801acf6:	6823      	ldr	r3, [r4, #0]
 801acf8:	4631      	mov	r1, r6
 801acfa:	4638      	mov	r0, r7
 801acfc:	eb04 0803 	add.w	r8, r4, r3
 801ad00:	f000 fce2 	bl	801b6c8 <_sbrk_r>
 801ad04:	4580      	cmp	r8, r0
 801ad06:	d13a      	bne.n	801ad7e <_malloc_r+0xd2>
 801ad08:	6821      	ldr	r1, [r4, #0]
 801ad0a:	3503      	adds	r5, #3
 801ad0c:	1a6d      	subs	r5, r5, r1
 801ad0e:	f025 0503 	bic.w	r5, r5, #3
 801ad12:	3508      	adds	r5, #8
 801ad14:	2d0c      	cmp	r5, #12
 801ad16:	bf38      	it	cc
 801ad18:	250c      	movcc	r5, #12
 801ad1a:	4629      	mov	r1, r5
 801ad1c:	4638      	mov	r0, r7
 801ad1e:	f7ff ffa5 	bl	801ac6c <sbrk_aligned>
 801ad22:	3001      	adds	r0, #1
 801ad24:	d02b      	beq.n	801ad7e <_malloc_r+0xd2>
 801ad26:	6823      	ldr	r3, [r4, #0]
 801ad28:	442b      	add	r3, r5
 801ad2a:	6023      	str	r3, [r4, #0]
 801ad2c:	e00e      	b.n	801ad4c <_malloc_r+0xa0>
 801ad2e:	6822      	ldr	r2, [r4, #0]
 801ad30:	1b52      	subs	r2, r2, r5
 801ad32:	d41e      	bmi.n	801ad72 <_malloc_r+0xc6>
 801ad34:	2a0b      	cmp	r2, #11
 801ad36:	d916      	bls.n	801ad66 <_malloc_r+0xba>
 801ad38:	1961      	adds	r1, r4, r5
 801ad3a:	42a3      	cmp	r3, r4
 801ad3c:	6025      	str	r5, [r4, #0]
 801ad3e:	bf18      	it	ne
 801ad40:	6059      	strne	r1, [r3, #4]
 801ad42:	6863      	ldr	r3, [r4, #4]
 801ad44:	bf08      	it	eq
 801ad46:	6031      	streq	r1, [r6, #0]
 801ad48:	5162      	str	r2, [r4, r5]
 801ad4a:	604b      	str	r3, [r1, #4]
 801ad4c:	4638      	mov	r0, r7
 801ad4e:	f104 060b 	add.w	r6, r4, #11
 801ad52:	f000 ffdb 	bl	801bd0c <__malloc_unlock>
 801ad56:	f026 0607 	bic.w	r6, r6, #7
 801ad5a:	1d23      	adds	r3, r4, #4
 801ad5c:	1af2      	subs	r2, r6, r3
 801ad5e:	d0b6      	beq.n	801acce <_malloc_r+0x22>
 801ad60:	1b9b      	subs	r3, r3, r6
 801ad62:	50a3      	str	r3, [r4, r2]
 801ad64:	e7b3      	b.n	801acce <_malloc_r+0x22>
 801ad66:	6862      	ldr	r2, [r4, #4]
 801ad68:	42a3      	cmp	r3, r4
 801ad6a:	bf0c      	ite	eq
 801ad6c:	6032      	streq	r2, [r6, #0]
 801ad6e:	605a      	strne	r2, [r3, #4]
 801ad70:	e7ec      	b.n	801ad4c <_malloc_r+0xa0>
 801ad72:	4623      	mov	r3, r4
 801ad74:	6864      	ldr	r4, [r4, #4]
 801ad76:	e7b2      	b.n	801acde <_malloc_r+0x32>
 801ad78:	4634      	mov	r4, r6
 801ad7a:	6876      	ldr	r6, [r6, #4]
 801ad7c:	e7b9      	b.n	801acf2 <_malloc_r+0x46>
 801ad7e:	230c      	movs	r3, #12
 801ad80:	603b      	str	r3, [r7, #0]
 801ad82:	4638      	mov	r0, r7
 801ad84:	f000 ffc2 	bl	801bd0c <__malloc_unlock>
 801ad88:	e7a1      	b.n	801acce <_malloc_r+0x22>
 801ad8a:	6025      	str	r5, [r4, #0]
 801ad8c:	e7de      	b.n	801ad4c <_malloc_r+0xa0>
 801ad8e:	bf00      	nop
 801ad90:	24003230 	.word	0x24003230

0801ad94 <__ssputs_r>:
 801ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad98:	688e      	ldr	r6, [r1, #8]
 801ad9a:	429e      	cmp	r6, r3
 801ad9c:	4682      	mov	sl, r0
 801ad9e:	460c      	mov	r4, r1
 801ada0:	4690      	mov	r8, r2
 801ada2:	461f      	mov	r7, r3
 801ada4:	d838      	bhi.n	801ae18 <__ssputs_r+0x84>
 801ada6:	898a      	ldrh	r2, [r1, #12]
 801ada8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801adac:	d032      	beq.n	801ae14 <__ssputs_r+0x80>
 801adae:	6825      	ldr	r5, [r4, #0]
 801adb0:	6909      	ldr	r1, [r1, #16]
 801adb2:	eba5 0901 	sub.w	r9, r5, r1
 801adb6:	6965      	ldr	r5, [r4, #20]
 801adb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801adbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801adc0:	3301      	adds	r3, #1
 801adc2:	444b      	add	r3, r9
 801adc4:	106d      	asrs	r5, r5, #1
 801adc6:	429d      	cmp	r5, r3
 801adc8:	bf38      	it	cc
 801adca:	461d      	movcc	r5, r3
 801adcc:	0553      	lsls	r3, r2, #21
 801adce:	d531      	bpl.n	801ae34 <__ssputs_r+0xa0>
 801add0:	4629      	mov	r1, r5
 801add2:	f7ff ff6b 	bl	801acac <_malloc_r>
 801add6:	4606      	mov	r6, r0
 801add8:	b950      	cbnz	r0, 801adf0 <__ssputs_r+0x5c>
 801adda:	230c      	movs	r3, #12
 801addc:	f8ca 3000 	str.w	r3, [sl]
 801ade0:	89a3      	ldrh	r3, [r4, #12]
 801ade2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ade6:	81a3      	strh	r3, [r4, #12]
 801ade8:	f04f 30ff 	mov.w	r0, #4294967295
 801adec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801adf0:	6921      	ldr	r1, [r4, #16]
 801adf2:	464a      	mov	r2, r9
 801adf4:	f7fc fb08 	bl	8017408 <memcpy>
 801adf8:	89a3      	ldrh	r3, [r4, #12]
 801adfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801adfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae02:	81a3      	strh	r3, [r4, #12]
 801ae04:	6126      	str	r6, [r4, #16]
 801ae06:	6165      	str	r5, [r4, #20]
 801ae08:	444e      	add	r6, r9
 801ae0a:	eba5 0509 	sub.w	r5, r5, r9
 801ae0e:	6026      	str	r6, [r4, #0]
 801ae10:	60a5      	str	r5, [r4, #8]
 801ae12:	463e      	mov	r6, r7
 801ae14:	42be      	cmp	r6, r7
 801ae16:	d900      	bls.n	801ae1a <__ssputs_r+0x86>
 801ae18:	463e      	mov	r6, r7
 801ae1a:	6820      	ldr	r0, [r4, #0]
 801ae1c:	4632      	mov	r2, r6
 801ae1e:	4641      	mov	r1, r8
 801ae20:	f000 ff54 	bl	801bccc <memmove>
 801ae24:	68a3      	ldr	r3, [r4, #8]
 801ae26:	1b9b      	subs	r3, r3, r6
 801ae28:	60a3      	str	r3, [r4, #8]
 801ae2a:	6823      	ldr	r3, [r4, #0]
 801ae2c:	4433      	add	r3, r6
 801ae2e:	6023      	str	r3, [r4, #0]
 801ae30:	2000      	movs	r0, #0
 801ae32:	e7db      	b.n	801adec <__ssputs_r+0x58>
 801ae34:	462a      	mov	r2, r5
 801ae36:	f000 ff6f 	bl	801bd18 <_realloc_r>
 801ae3a:	4606      	mov	r6, r0
 801ae3c:	2800      	cmp	r0, #0
 801ae3e:	d1e1      	bne.n	801ae04 <__ssputs_r+0x70>
 801ae40:	6921      	ldr	r1, [r4, #16]
 801ae42:	4650      	mov	r0, sl
 801ae44:	f7ff fec6 	bl	801abd4 <_free_r>
 801ae48:	e7c7      	b.n	801adda <__ssputs_r+0x46>
	...

0801ae4c <_svfiprintf_r>:
 801ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae50:	4698      	mov	r8, r3
 801ae52:	898b      	ldrh	r3, [r1, #12]
 801ae54:	061b      	lsls	r3, r3, #24
 801ae56:	b09d      	sub	sp, #116	; 0x74
 801ae58:	4607      	mov	r7, r0
 801ae5a:	460d      	mov	r5, r1
 801ae5c:	4614      	mov	r4, r2
 801ae5e:	d50e      	bpl.n	801ae7e <_svfiprintf_r+0x32>
 801ae60:	690b      	ldr	r3, [r1, #16]
 801ae62:	b963      	cbnz	r3, 801ae7e <_svfiprintf_r+0x32>
 801ae64:	2140      	movs	r1, #64	; 0x40
 801ae66:	f7ff ff21 	bl	801acac <_malloc_r>
 801ae6a:	6028      	str	r0, [r5, #0]
 801ae6c:	6128      	str	r0, [r5, #16]
 801ae6e:	b920      	cbnz	r0, 801ae7a <_svfiprintf_r+0x2e>
 801ae70:	230c      	movs	r3, #12
 801ae72:	603b      	str	r3, [r7, #0]
 801ae74:	f04f 30ff 	mov.w	r0, #4294967295
 801ae78:	e0d1      	b.n	801b01e <_svfiprintf_r+0x1d2>
 801ae7a:	2340      	movs	r3, #64	; 0x40
 801ae7c:	616b      	str	r3, [r5, #20]
 801ae7e:	2300      	movs	r3, #0
 801ae80:	9309      	str	r3, [sp, #36]	; 0x24
 801ae82:	2320      	movs	r3, #32
 801ae84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae88:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae8c:	2330      	movs	r3, #48	; 0x30
 801ae8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b038 <_svfiprintf_r+0x1ec>
 801ae92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae96:	f04f 0901 	mov.w	r9, #1
 801ae9a:	4623      	mov	r3, r4
 801ae9c:	469a      	mov	sl, r3
 801ae9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aea2:	b10a      	cbz	r2, 801aea8 <_svfiprintf_r+0x5c>
 801aea4:	2a25      	cmp	r2, #37	; 0x25
 801aea6:	d1f9      	bne.n	801ae9c <_svfiprintf_r+0x50>
 801aea8:	ebba 0b04 	subs.w	fp, sl, r4
 801aeac:	d00b      	beq.n	801aec6 <_svfiprintf_r+0x7a>
 801aeae:	465b      	mov	r3, fp
 801aeb0:	4622      	mov	r2, r4
 801aeb2:	4629      	mov	r1, r5
 801aeb4:	4638      	mov	r0, r7
 801aeb6:	f7ff ff6d 	bl	801ad94 <__ssputs_r>
 801aeba:	3001      	adds	r0, #1
 801aebc:	f000 80aa 	beq.w	801b014 <_svfiprintf_r+0x1c8>
 801aec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aec2:	445a      	add	r2, fp
 801aec4:	9209      	str	r2, [sp, #36]	; 0x24
 801aec6:	f89a 3000 	ldrb.w	r3, [sl]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	f000 80a2 	beq.w	801b014 <_svfiprintf_r+0x1c8>
 801aed0:	2300      	movs	r3, #0
 801aed2:	f04f 32ff 	mov.w	r2, #4294967295
 801aed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aeda:	f10a 0a01 	add.w	sl, sl, #1
 801aede:	9304      	str	r3, [sp, #16]
 801aee0:	9307      	str	r3, [sp, #28]
 801aee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aee6:	931a      	str	r3, [sp, #104]	; 0x68
 801aee8:	4654      	mov	r4, sl
 801aeea:	2205      	movs	r2, #5
 801aeec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aef0:	4851      	ldr	r0, [pc, #324]	; (801b038 <_svfiprintf_r+0x1ec>)
 801aef2:	f7e5 fa25 	bl	8000340 <memchr>
 801aef6:	9a04      	ldr	r2, [sp, #16]
 801aef8:	b9d8      	cbnz	r0, 801af32 <_svfiprintf_r+0xe6>
 801aefa:	06d0      	lsls	r0, r2, #27
 801aefc:	bf44      	itt	mi
 801aefe:	2320      	movmi	r3, #32
 801af00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801af04:	0711      	lsls	r1, r2, #28
 801af06:	bf44      	itt	mi
 801af08:	232b      	movmi	r3, #43	; 0x2b
 801af0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801af0e:	f89a 3000 	ldrb.w	r3, [sl]
 801af12:	2b2a      	cmp	r3, #42	; 0x2a
 801af14:	d015      	beq.n	801af42 <_svfiprintf_r+0xf6>
 801af16:	9a07      	ldr	r2, [sp, #28]
 801af18:	4654      	mov	r4, sl
 801af1a:	2000      	movs	r0, #0
 801af1c:	f04f 0c0a 	mov.w	ip, #10
 801af20:	4621      	mov	r1, r4
 801af22:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af26:	3b30      	subs	r3, #48	; 0x30
 801af28:	2b09      	cmp	r3, #9
 801af2a:	d94e      	bls.n	801afca <_svfiprintf_r+0x17e>
 801af2c:	b1b0      	cbz	r0, 801af5c <_svfiprintf_r+0x110>
 801af2e:	9207      	str	r2, [sp, #28]
 801af30:	e014      	b.n	801af5c <_svfiprintf_r+0x110>
 801af32:	eba0 0308 	sub.w	r3, r0, r8
 801af36:	fa09 f303 	lsl.w	r3, r9, r3
 801af3a:	4313      	orrs	r3, r2
 801af3c:	9304      	str	r3, [sp, #16]
 801af3e:	46a2      	mov	sl, r4
 801af40:	e7d2      	b.n	801aee8 <_svfiprintf_r+0x9c>
 801af42:	9b03      	ldr	r3, [sp, #12]
 801af44:	1d19      	adds	r1, r3, #4
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	9103      	str	r1, [sp, #12]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	bfbb      	ittet	lt
 801af4e:	425b      	neglt	r3, r3
 801af50:	f042 0202 	orrlt.w	r2, r2, #2
 801af54:	9307      	strge	r3, [sp, #28]
 801af56:	9307      	strlt	r3, [sp, #28]
 801af58:	bfb8      	it	lt
 801af5a:	9204      	strlt	r2, [sp, #16]
 801af5c:	7823      	ldrb	r3, [r4, #0]
 801af5e:	2b2e      	cmp	r3, #46	; 0x2e
 801af60:	d10c      	bne.n	801af7c <_svfiprintf_r+0x130>
 801af62:	7863      	ldrb	r3, [r4, #1]
 801af64:	2b2a      	cmp	r3, #42	; 0x2a
 801af66:	d135      	bne.n	801afd4 <_svfiprintf_r+0x188>
 801af68:	9b03      	ldr	r3, [sp, #12]
 801af6a:	1d1a      	adds	r2, r3, #4
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	9203      	str	r2, [sp, #12]
 801af70:	2b00      	cmp	r3, #0
 801af72:	bfb8      	it	lt
 801af74:	f04f 33ff 	movlt.w	r3, #4294967295
 801af78:	3402      	adds	r4, #2
 801af7a:	9305      	str	r3, [sp, #20]
 801af7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b048 <_svfiprintf_r+0x1fc>
 801af80:	7821      	ldrb	r1, [r4, #0]
 801af82:	2203      	movs	r2, #3
 801af84:	4650      	mov	r0, sl
 801af86:	f7e5 f9db 	bl	8000340 <memchr>
 801af8a:	b140      	cbz	r0, 801af9e <_svfiprintf_r+0x152>
 801af8c:	2340      	movs	r3, #64	; 0x40
 801af8e:	eba0 000a 	sub.w	r0, r0, sl
 801af92:	fa03 f000 	lsl.w	r0, r3, r0
 801af96:	9b04      	ldr	r3, [sp, #16]
 801af98:	4303      	orrs	r3, r0
 801af9a:	3401      	adds	r4, #1
 801af9c:	9304      	str	r3, [sp, #16]
 801af9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afa2:	4826      	ldr	r0, [pc, #152]	; (801b03c <_svfiprintf_r+0x1f0>)
 801afa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801afa8:	2206      	movs	r2, #6
 801afaa:	f7e5 f9c9 	bl	8000340 <memchr>
 801afae:	2800      	cmp	r0, #0
 801afb0:	d038      	beq.n	801b024 <_svfiprintf_r+0x1d8>
 801afb2:	4b23      	ldr	r3, [pc, #140]	; (801b040 <_svfiprintf_r+0x1f4>)
 801afb4:	bb1b      	cbnz	r3, 801affe <_svfiprintf_r+0x1b2>
 801afb6:	9b03      	ldr	r3, [sp, #12]
 801afb8:	3307      	adds	r3, #7
 801afba:	f023 0307 	bic.w	r3, r3, #7
 801afbe:	3308      	adds	r3, #8
 801afc0:	9303      	str	r3, [sp, #12]
 801afc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afc4:	4433      	add	r3, r6
 801afc6:	9309      	str	r3, [sp, #36]	; 0x24
 801afc8:	e767      	b.n	801ae9a <_svfiprintf_r+0x4e>
 801afca:	fb0c 3202 	mla	r2, ip, r2, r3
 801afce:	460c      	mov	r4, r1
 801afd0:	2001      	movs	r0, #1
 801afd2:	e7a5      	b.n	801af20 <_svfiprintf_r+0xd4>
 801afd4:	2300      	movs	r3, #0
 801afd6:	3401      	adds	r4, #1
 801afd8:	9305      	str	r3, [sp, #20]
 801afda:	4619      	mov	r1, r3
 801afdc:	f04f 0c0a 	mov.w	ip, #10
 801afe0:	4620      	mov	r0, r4
 801afe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afe6:	3a30      	subs	r2, #48	; 0x30
 801afe8:	2a09      	cmp	r2, #9
 801afea:	d903      	bls.n	801aff4 <_svfiprintf_r+0x1a8>
 801afec:	2b00      	cmp	r3, #0
 801afee:	d0c5      	beq.n	801af7c <_svfiprintf_r+0x130>
 801aff0:	9105      	str	r1, [sp, #20]
 801aff2:	e7c3      	b.n	801af7c <_svfiprintf_r+0x130>
 801aff4:	fb0c 2101 	mla	r1, ip, r1, r2
 801aff8:	4604      	mov	r4, r0
 801affa:	2301      	movs	r3, #1
 801affc:	e7f0      	b.n	801afe0 <_svfiprintf_r+0x194>
 801affe:	ab03      	add	r3, sp, #12
 801b000:	9300      	str	r3, [sp, #0]
 801b002:	462a      	mov	r2, r5
 801b004:	4b0f      	ldr	r3, [pc, #60]	; (801b044 <_svfiprintf_r+0x1f8>)
 801b006:	a904      	add	r1, sp, #16
 801b008:	4638      	mov	r0, r7
 801b00a:	f7fc faa5 	bl	8017558 <_printf_float>
 801b00e:	1c42      	adds	r2, r0, #1
 801b010:	4606      	mov	r6, r0
 801b012:	d1d6      	bne.n	801afc2 <_svfiprintf_r+0x176>
 801b014:	89ab      	ldrh	r3, [r5, #12]
 801b016:	065b      	lsls	r3, r3, #25
 801b018:	f53f af2c 	bmi.w	801ae74 <_svfiprintf_r+0x28>
 801b01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b01e:	b01d      	add	sp, #116	; 0x74
 801b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b024:	ab03      	add	r3, sp, #12
 801b026:	9300      	str	r3, [sp, #0]
 801b028:	462a      	mov	r2, r5
 801b02a:	4b06      	ldr	r3, [pc, #24]	; (801b044 <_svfiprintf_r+0x1f8>)
 801b02c:	a904      	add	r1, sp, #16
 801b02e:	4638      	mov	r0, r7
 801b030:	f7fc fd1e 	bl	8017a70 <_printf_i>
 801b034:	e7eb      	b.n	801b00e <_svfiprintf_r+0x1c2>
 801b036:	bf00      	nop
 801b038:	0801ca04 	.word	0x0801ca04
 801b03c:	0801ca0e 	.word	0x0801ca0e
 801b040:	08017559 	.word	0x08017559
 801b044:	0801ad95 	.word	0x0801ad95
 801b048:	0801ca0a 	.word	0x0801ca0a

0801b04c <_sungetc_r>:
 801b04c:	b538      	push	{r3, r4, r5, lr}
 801b04e:	1c4b      	adds	r3, r1, #1
 801b050:	4614      	mov	r4, r2
 801b052:	d103      	bne.n	801b05c <_sungetc_r+0x10>
 801b054:	f04f 35ff 	mov.w	r5, #4294967295
 801b058:	4628      	mov	r0, r5
 801b05a:	bd38      	pop	{r3, r4, r5, pc}
 801b05c:	8993      	ldrh	r3, [r2, #12]
 801b05e:	f023 0320 	bic.w	r3, r3, #32
 801b062:	8193      	strh	r3, [r2, #12]
 801b064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b066:	6852      	ldr	r2, [r2, #4]
 801b068:	b2cd      	uxtb	r5, r1
 801b06a:	b18b      	cbz	r3, 801b090 <_sungetc_r+0x44>
 801b06c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b06e:	4293      	cmp	r3, r2
 801b070:	dd08      	ble.n	801b084 <_sungetc_r+0x38>
 801b072:	6823      	ldr	r3, [r4, #0]
 801b074:	1e5a      	subs	r2, r3, #1
 801b076:	6022      	str	r2, [r4, #0]
 801b078:	f803 5c01 	strb.w	r5, [r3, #-1]
 801b07c:	6863      	ldr	r3, [r4, #4]
 801b07e:	3301      	adds	r3, #1
 801b080:	6063      	str	r3, [r4, #4]
 801b082:	e7e9      	b.n	801b058 <_sungetc_r+0xc>
 801b084:	4621      	mov	r1, r4
 801b086:	f000 fbef 	bl	801b868 <__submore>
 801b08a:	2800      	cmp	r0, #0
 801b08c:	d0f1      	beq.n	801b072 <_sungetc_r+0x26>
 801b08e:	e7e1      	b.n	801b054 <_sungetc_r+0x8>
 801b090:	6921      	ldr	r1, [r4, #16]
 801b092:	6823      	ldr	r3, [r4, #0]
 801b094:	b151      	cbz	r1, 801b0ac <_sungetc_r+0x60>
 801b096:	4299      	cmp	r1, r3
 801b098:	d208      	bcs.n	801b0ac <_sungetc_r+0x60>
 801b09a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801b09e:	42a9      	cmp	r1, r5
 801b0a0:	d104      	bne.n	801b0ac <_sungetc_r+0x60>
 801b0a2:	3b01      	subs	r3, #1
 801b0a4:	3201      	adds	r2, #1
 801b0a6:	6023      	str	r3, [r4, #0]
 801b0a8:	6062      	str	r2, [r4, #4]
 801b0aa:	e7d5      	b.n	801b058 <_sungetc_r+0xc>
 801b0ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801b0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0b4:	6363      	str	r3, [r4, #52]	; 0x34
 801b0b6:	2303      	movs	r3, #3
 801b0b8:	63a3      	str	r3, [r4, #56]	; 0x38
 801b0ba:	4623      	mov	r3, r4
 801b0bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 801b0c0:	6023      	str	r3, [r4, #0]
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	e7dc      	b.n	801b080 <_sungetc_r+0x34>

0801b0c6 <__ssrefill_r>:
 801b0c6:	b510      	push	{r4, lr}
 801b0c8:	460c      	mov	r4, r1
 801b0ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b0cc:	b169      	cbz	r1, 801b0ea <__ssrefill_r+0x24>
 801b0ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0d2:	4299      	cmp	r1, r3
 801b0d4:	d001      	beq.n	801b0da <__ssrefill_r+0x14>
 801b0d6:	f7ff fd7d 	bl	801abd4 <_free_r>
 801b0da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b0dc:	6063      	str	r3, [r4, #4]
 801b0de:	2000      	movs	r0, #0
 801b0e0:	6360      	str	r0, [r4, #52]	; 0x34
 801b0e2:	b113      	cbz	r3, 801b0ea <__ssrefill_r+0x24>
 801b0e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b0e6:	6023      	str	r3, [r4, #0]
 801b0e8:	bd10      	pop	{r4, pc}
 801b0ea:	6923      	ldr	r3, [r4, #16]
 801b0ec:	6023      	str	r3, [r4, #0]
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	6063      	str	r3, [r4, #4]
 801b0f2:	89a3      	ldrh	r3, [r4, #12]
 801b0f4:	f043 0320 	orr.w	r3, r3, #32
 801b0f8:	81a3      	strh	r3, [r4, #12]
 801b0fa:	f04f 30ff 	mov.w	r0, #4294967295
 801b0fe:	e7f3      	b.n	801b0e8 <__ssrefill_r+0x22>

0801b100 <__ssvfiscanf_r>:
 801b100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b104:	460c      	mov	r4, r1
 801b106:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801b10a:	2100      	movs	r1, #0
 801b10c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801b110:	49a6      	ldr	r1, [pc, #664]	; (801b3ac <__ssvfiscanf_r+0x2ac>)
 801b112:	91a0      	str	r1, [sp, #640]	; 0x280
 801b114:	f10d 0804 	add.w	r8, sp, #4
 801b118:	49a5      	ldr	r1, [pc, #660]	; (801b3b0 <__ssvfiscanf_r+0x2b0>)
 801b11a:	4fa6      	ldr	r7, [pc, #664]	; (801b3b4 <__ssvfiscanf_r+0x2b4>)
 801b11c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801b3b8 <__ssvfiscanf_r+0x2b8>
 801b120:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801b124:	4606      	mov	r6, r0
 801b126:	91a1      	str	r1, [sp, #644]	; 0x284
 801b128:	9300      	str	r3, [sp, #0]
 801b12a:	7813      	ldrb	r3, [r2, #0]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	f000 815a 	beq.w	801b3e6 <__ssvfiscanf_r+0x2e6>
 801b132:	5dd9      	ldrb	r1, [r3, r7]
 801b134:	f011 0108 	ands.w	r1, r1, #8
 801b138:	f102 0501 	add.w	r5, r2, #1
 801b13c:	d019      	beq.n	801b172 <__ssvfiscanf_r+0x72>
 801b13e:	6863      	ldr	r3, [r4, #4]
 801b140:	2b00      	cmp	r3, #0
 801b142:	dd0f      	ble.n	801b164 <__ssvfiscanf_r+0x64>
 801b144:	6823      	ldr	r3, [r4, #0]
 801b146:	781a      	ldrb	r2, [r3, #0]
 801b148:	5cba      	ldrb	r2, [r7, r2]
 801b14a:	0712      	lsls	r2, r2, #28
 801b14c:	d401      	bmi.n	801b152 <__ssvfiscanf_r+0x52>
 801b14e:	462a      	mov	r2, r5
 801b150:	e7eb      	b.n	801b12a <__ssvfiscanf_r+0x2a>
 801b152:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b154:	3201      	adds	r2, #1
 801b156:	9245      	str	r2, [sp, #276]	; 0x114
 801b158:	6862      	ldr	r2, [r4, #4]
 801b15a:	3301      	adds	r3, #1
 801b15c:	3a01      	subs	r2, #1
 801b15e:	6062      	str	r2, [r4, #4]
 801b160:	6023      	str	r3, [r4, #0]
 801b162:	e7ec      	b.n	801b13e <__ssvfiscanf_r+0x3e>
 801b164:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b166:	4621      	mov	r1, r4
 801b168:	4630      	mov	r0, r6
 801b16a:	4798      	blx	r3
 801b16c:	2800      	cmp	r0, #0
 801b16e:	d0e9      	beq.n	801b144 <__ssvfiscanf_r+0x44>
 801b170:	e7ed      	b.n	801b14e <__ssvfiscanf_r+0x4e>
 801b172:	2b25      	cmp	r3, #37	; 0x25
 801b174:	d012      	beq.n	801b19c <__ssvfiscanf_r+0x9c>
 801b176:	469a      	mov	sl, r3
 801b178:	6863      	ldr	r3, [r4, #4]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	f340 8091 	ble.w	801b2a2 <__ssvfiscanf_r+0x1a2>
 801b180:	6822      	ldr	r2, [r4, #0]
 801b182:	7813      	ldrb	r3, [r2, #0]
 801b184:	4553      	cmp	r3, sl
 801b186:	f040 812e 	bne.w	801b3e6 <__ssvfiscanf_r+0x2e6>
 801b18a:	6863      	ldr	r3, [r4, #4]
 801b18c:	3b01      	subs	r3, #1
 801b18e:	6063      	str	r3, [r4, #4]
 801b190:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b192:	3201      	adds	r2, #1
 801b194:	3301      	adds	r3, #1
 801b196:	6022      	str	r2, [r4, #0]
 801b198:	9345      	str	r3, [sp, #276]	; 0x114
 801b19a:	e7d8      	b.n	801b14e <__ssvfiscanf_r+0x4e>
 801b19c:	9141      	str	r1, [sp, #260]	; 0x104
 801b19e:	9143      	str	r1, [sp, #268]	; 0x10c
 801b1a0:	7853      	ldrb	r3, [r2, #1]
 801b1a2:	2b2a      	cmp	r3, #42	; 0x2a
 801b1a4:	bf02      	ittt	eq
 801b1a6:	2310      	moveq	r3, #16
 801b1a8:	1c95      	addeq	r5, r2, #2
 801b1aa:	9341      	streq	r3, [sp, #260]	; 0x104
 801b1ac:	220a      	movs	r2, #10
 801b1ae:	46aa      	mov	sl, r5
 801b1b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801b1b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801b1b8:	2b09      	cmp	r3, #9
 801b1ba:	d91d      	bls.n	801b1f8 <__ssvfiscanf_r+0xf8>
 801b1bc:	487e      	ldr	r0, [pc, #504]	; (801b3b8 <__ssvfiscanf_r+0x2b8>)
 801b1be:	2203      	movs	r2, #3
 801b1c0:	f7e5 f8be 	bl	8000340 <memchr>
 801b1c4:	b140      	cbz	r0, 801b1d8 <__ssvfiscanf_r+0xd8>
 801b1c6:	2301      	movs	r3, #1
 801b1c8:	eba0 0009 	sub.w	r0, r0, r9
 801b1cc:	fa03 f000 	lsl.w	r0, r3, r0
 801b1d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b1d2:	4318      	orrs	r0, r3
 801b1d4:	9041      	str	r0, [sp, #260]	; 0x104
 801b1d6:	4655      	mov	r5, sl
 801b1d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b1dc:	2b78      	cmp	r3, #120	; 0x78
 801b1de:	d806      	bhi.n	801b1ee <__ssvfiscanf_r+0xee>
 801b1e0:	2b57      	cmp	r3, #87	; 0x57
 801b1e2:	d810      	bhi.n	801b206 <__ssvfiscanf_r+0x106>
 801b1e4:	2b25      	cmp	r3, #37	; 0x25
 801b1e6:	d0c6      	beq.n	801b176 <__ssvfiscanf_r+0x76>
 801b1e8:	d856      	bhi.n	801b298 <__ssvfiscanf_r+0x198>
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d064      	beq.n	801b2b8 <__ssvfiscanf_r+0x1b8>
 801b1ee:	2303      	movs	r3, #3
 801b1f0:	9347      	str	r3, [sp, #284]	; 0x11c
 801b1f2:	230a      	movs	r3, #10
 801b1f4:	9342      	str	r3, [sp, #264]	; 0x108
 801b1f6:	e071      	b.n	801b2dc <__ssvfiscanf_r+0x1dc>
 801b1f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b1fa:	fb02 1103 	mla	r1, r2, r3, r1
 801b1fe:	3930      	subs	r1, #48	; 0x30
 801b200:	9143      	str	r1, [sp, #268]	; 0x10c
 801b202:	4655      	mov	r5, sl
 801b204:	e7d3      	b.n	801b1ae <__ssvfiscanf_r+0xae>
 801b206:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801b20a:	2a20      	cmp	r2, #32
 801b20c:	d8ef      	bhi.n	801b1ee <__ssvfiscanf_r+0xee>
 801b20e:	a101      	add	r1, pc, #4	; (adr r1, 801b214 <__ssvfiscanf_r+0x114>)
 801b210:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b214:	0801b2c7 	.word	0x0801b2c7
 801b218:	0801b1ef 	.word	0x0801b1ef
 801b21c:	0801b1ef 	.word	0x0801b1ef
 801b220:	0801b325 	.word	0x0801b325
 801b224:	0801b1ef 	.word	0x0801b1ef
 801b228:	0801b1ef 	.word	0x0801b1ef
 801b22c:	0801b1ef 	.word	0x0801b1ef
 801b230:	0801b1ef 	.word	0x0801b1ef
 801b234:	0801b1ef 	.word	0x0801b1ef
 801b238:	0801b1ef 	.word	0x0801b1ef
 801b23c:	0801b1ef 	.word	0x0801b1ef
 801b240:	0801b33b 	.word	0x0801b33b
 801b244:	0801b311 	.word	0x0801b311
 801b248:	0801b29f 	.word	0x0801b29f
 801b24c:	0801b29f 	.word	0x0801b29f
 801b250:	0801b29f 	.word	0x0801b29f
 801b254:	0801b1ef 	.word	0x0801b1ef
 801b258:	0801b315 	.word	0x0801b315
 801b25c:	0801b1ef 	.word	0x0801b1ef
 801b260:	0801b1ef 	.word	0x0801b1ef
 801b264:	0801b1ef 	.word	0x0801b1ef
 801b268:	0801b1ef 	.word	0x0801b1ef
 801b26c:	0801b34b 	.word	0x0801b34b
 801b270:	0801b31d 	.word	0x0801b31d
 801b274:	0801b2bf 	.word	0x0801b2bf
 801b278:	0801b1ef 	.word	0x0801b1ef
 801b27c:	0801b1ef 	.word	0x0801b1ef
 801b280:	0801b347 	.word	0x0801b347
 801b284:	0801b1ef 	.word	0x0801b1ef
 801b288:	0801b311 	.word	0x0801b311
 801b28c:	0801b1ef 	.word	0x0801b1ef
 801b290:	0801b1ef 	.word	0x0801b1ef
 801b294:	0801b2c7 	.word	0x0801b2c7
 801b298:	3b45      	subs	r3, #69	; 0x45
 801b29a:	2b02      	cmp	r3, #2
 801b29c:	d8a7      	bhi.n	801b1ee <__ssvfiscanf_r+0xee>
 801b29e:	2305      	movs	r3, #5
 801b2a0:	e01b      	b.n	801b2da <__ssvfiscanf_r+0x1da>
 801b2a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b2a4:	4621      	mov	r1, r4
 801b2a6:	4630      	mov	r0, r6
 801b2a8:	4798      	blx	r3
 801b2aa:	2800      	cmp	r0, #0
 801b2ac:	f43f af68 	beq.w	801b180 <__ssvfiscanf_r+0x80>
 801b2b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	f040 808d 	bne.w	801b3d2 <__ssvfiscanf_r+0x2d2>
 801b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b2bc:	e08f      	b.n	801b3de <__ssvfiscanf_r+0x2de>
 801b2be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b2c0:	f042 0220 	orr.w	r2, r2, #32
 801b2c4:	9241      	str	r2, [sp, #260]	; 0x104
 801b2c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b2c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b2cc:	9241      	str	r2, [sp, #260]	; 0x104
 801b2ce:	2210      	movs	r2, #16
 801b2d0:	2b6f      	cmp	r3, #111	; 0x6f
 801b2d2:	9242      	str	r2, [sp, #264]	; 0x108
 801b2d4:	bf34      	ite	cc
 801b2d6:	2303      	movcc	r3, #3
 801b2d8:	2304      	movcs	r3, #4
 801b2da:	9347      	str	r3, [sp, #284]	; 0x11c
 801b2dc:	6863      	ldr	r3, [r4, #4]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	dd42      	ble.n	801b368 <__ssvfiscanf_r+0x268>
 801b2e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b2e4:	0659      	lsls	r1, r3, #25
 801b2e6:	d404      	bmi.n	801b2f2 <__ssvfiscanf_r+0x1f2>
 801b2e8:	6823      	ldr	r3, [r4, #0]
 801b2ea:	781a      	ldrb	r2, [r3, #0]
 801b2ec:	5cba      	ldrb	r2, [r7, r2]
 801b2ee:	0712      	lsls	r2, r2, #28
 801b2f0:	d441      	bmi.n	801b376 <__ssvfiscanf_r+0x276>
 801b2f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801b2f4:	2b02      	cmp	r3, #2
 801b2f6:	dc50      	bgt.n	801b39a <__ssvfiscanf_r+0x29a>
 801b2f8:	466b      	mov	r3, sp
 801b2fa:	4622      	mov	r2, r4
 801b2fc:	a941      	add	r1, sp, #260	; 0x104
 801b2fe:	4630      	mov	r0, r6
 801b300:	f000 f876 	bl	801b3f0 <_scanf_chars>
 801b304:	2801      	cmp	r0, #1
 801b306:	d06e      	beq.n	801b3e6 <__ssvfiscanf_r+0x2e6>
 801b308:	2802      	cmp	r0, #2
 801b30a:	f47f af20 	bne.w	801b14e <__ssvfiscanf_r+0x4e>
 801b30e:	e7cf      	b.n	801b2b0 <__ssvfiscanf_r+0x1b0>
 801b310:	220a      	movs	r2, #10
 801b312:	e7dd      	b.n	801b2d0 <__ssvfiscanf_r+0x1d0>
 801b314:	2300      	movs	r3, #0
 801b316:	9342      	str	r3, [sp, #264]	; 0x108
 801b318:	2303      	movs	r3, #3
 801b31a:	e7de      	b.n	801b2da <__ssvfiscanf_r+0x1da>
 801b31c:	2308      	movs	r3, #8
 801b31e:	9342      	str	r3, [sp, #264]	; 0x108
 801b320:	2304      	movs	r3, #4
 801b322:	e7da      	b.n	801b2da <__ssvfiscanf_r+0x1da>
 801b324:	4629      	mov	r1, r5
 801b326:	4640      	mov	r0, r8
 801b328:	f000 f9de 	bl	801b6e8 <__sccl>
 801b32c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b32e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b332:	9341      	str	r3, [sp, #260]	; 0x104
 801b334:	4605      	mov	r5, r0
 801b336:	2301      	movs	r3, #1
 801b338:	e7cf      	b.n	801b2da <__ssvfiscanf_r+0x1da>
 801b33a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b340:	9341      	str	r3, [sp, #260]	; 0x104
 801b342:	2300      	movs	r3, #0
 801b344:	e7c9      	b.n	801b2da <__ssvfiscanf_r+0x1da>
 801b346:	2302      	movs	r3, #2
 801b348:	e7c7      	b.n	801b2da <__ssvfiscanf_r+0x1da>
 801b34a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801b34c:	06c3      	lsls	r3, r0, #27
 801b34e:	f53f aefe 	bmi.w	801b14e <__ssvfiscanf_r+0x4e>
 801b352:	9b00      	ldr	r3, [sp, #0]
 801b354:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b356:	1d19      	adds	r1, r3, #4
 801b358:	9100      	str	r1, [sp, #0]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	f010 0f01 	tst.w	r0, #1
 801b360:	bf14      	ite	ne
 801b362:	801a      	strhne	r2, [r3, #0]
 801b364:	601a      	streq	r2, [r3, #0]
 801b366:	e6f2      	b.n	801b14e <__ssvfiscanf_r+0x4e>
 801b368:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b36a:	4621      	mov	r1, r4
 801b36c:	4630      	mov	r0, r6
 801b36e:	4798      	blx	r3
 801b370:	2800      	cmp	r0, #0
 801b372:	d0b6      	beq.n	801b2e2 <__ssvfiscanf_r+0x1e2>
 801b374:	e79c      	b.n	801b2b0 <__ssvfiscanf_r+0x1b0>
 801b376:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b378:	3201      	adds	r2, #1
 801b37a:	9245      	str	r2, [sp, #276]	; 0x114
 801b37c:	6862      	ldr	r2, [r4, #4]
 801b37e:	3a01      	subs	r2, #1
 801b380:	2a00      	cmp	r2, #0
 801b382:	6062      	str	r2, [r4, #4]
 801b384:	dd02      	ble.n	801b38c <__ssvfiscanf_r+0x28c>
 801b386:	3301      	adds	r3, #1
 801b388:	6023      	str	r3, [r4, #0]
 801b38a:	e7ad      	b.n	801b2e8 <__ssvfiscanf_r+0x1e8>
 801b38c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b38e:	4621      	mov	r1, r4
 801b390:	4630      	mov	r0, r6
 801b392:	4798      	blx	r3
 801b394:	2800      	cmp	r0, #0
 801b396:	d0a7      	beq.n	801b2e8 <__ssvfiscanf_r+0x1e8>
 801b398:	e78a      	b.n	801b2b0 <__ssvfiscanf_r+0x1b0>
 801b39a:	2b04      	cmp	r3, #4
 801b39c:	dc0e      	bgt.n	801b3bc <__ssvfiscanf_r+0x2bc>
 801b39e:	466b      	mov	r3, sp
 801b3a0:	4622      	mov	r2, r4
 801b3a2:	a941      	add	r1, sp, #260	; 0x104
 801b3a4:	4630      	mov	r0, r6
 801b3a6:	f000 f87d 	bl	801b4a4 <_scanf_i>
 801b3aa:	e7ab      	b.n	801b304 <__ssvfiscanf_r+0x204>
 801b3ac:	0801b04d 	.word	0x0801b04d
 801b3b0:	0801b0c7 	.word	0x0801b0c7
 801b3b4:	0801c6a1 	.word	0x0801c6a1
 801b3b8:	0801ca0a 	.word	0x0801ca0a
 801b3bc:	4b0b      	ldr	r3, [pc, #44]	; (801b3ec <__ssvfiscanf_r+0x2ec>)
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	f43f aec5 	beq.w	801b14e <__ssvfiscanf_r+0x4e>
 801b3c4:	466b      	mov	r3, sp
 801b3c6:	4622      	mov	r2, r4
 801b3c8:	a941      	add	r1, sp, #260	; 0x104
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	f7fc fc76 	bl	8017cbc <_scanf_float>
 801b3d0:	e798      	b.n	801b304 <__ssvfiscanf_r+0x204>
 801b3d2:	89a3      	ldrh	r3, [r4, #12]
 801b3d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801b3d8:	bf18      	it	ne
 801b3da:	f04f 30ff 	movne.w	r0, #4294967295
 801b3de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801b3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b3e8:	e7f9      	b.n	801b3de <__ssvfiscanf_r+0x2de>
 801b3ea:	bf00      	nop
 801b3ec:	08017cbd 	.word	0x08017cbd

0801b3f0 <_scanf_chars>:
 801b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3f4:	4615      	mov	r5, r2
 801b3f6:	688a      	ldr	r2, [r1, #8]
 801b3f8:	4680      	mov	r8, r0
 801b3fa:	460c      	mov	r4, r1
 801b3fc:	b932      	cbnz	r2, 801b40c <_scanf_chars+0x1c>
 801b3fe:	698a      	ldr	r2, [r1, #24]
 801b400:	2a00      	cmp	r2, #0
 801b402:	bf0c      	ite	eq
 801b404:	2201      	moveq	r2, #1
 801b406:	f04f 32ff 	movne.w	r2, #4294967295
 801b40a:	608a      	str	r2, [r1, #8]
 801b40c:	6822      	ldr	r2, [r4, #0]
 801b40e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801b4a0 <_scanf_chars+0xb0>
 801b412:	06d1      	lsls	r1, r2, #27
 801b414:	bf5f      	itttt	pl
 801b416:	681a      	ldrpl	r2, [r3, #0]
 801b418:	1d11      	addpl	r1, r2, #4
 801b41a:	6019      	strpl	r1, [r3, #0]
 801b41c:	6816      	ldrpl	r6, [r2, #0]
 801b41e:	2700      	movs	r7, #0
 801b420:	69a0      	ldr	r0, [r4, #24]
 801b422:	b188      	cbz	r0, 801b448 <_scanf_chars+0x58>
 801b424:	2801      	cmp	r0, #1
 801b426:	d107      	bne.n	801b438 <_scanf_chars+0x48>
 801b428:	682a      	ldr	r2, [r5, #0]
 801b42a:	7811      	ldrb	r1, [r2, #0]
 801b42c:	6962      	ldr	r2, [r4, #20]
 801b42e:	5c52      	ldrb	r2, [r2, r1]
 801b430:	b952      	cbnz	r2, 801b448 <_scanf_chars+0x58>
 801b432:	2f00      	cmp	r7, #0
 801b434:	d031      	beq.n	801b49a <_scanf_chars+0xaa>
 801b436:	e022      	b.n	801b47e <_scanf_chars+0x8e>
 801b438:	2802      	cmp	r0, #2
 801b43a:	d120      	bne.n	801b47e <_scanf_chars+0x8e>
 801b43c:	682b      	ldr	r3, [r5, #0]
 801b43e:	781b      	ldrb	r3, [r3, #0]
 801b440:	f813 3009 	ldrb.w	r3, [r3, r9]
 801b444:	071b      	lsls	r3, r3, #28
 801b446:	d41a      	bmi.n	801b47e <_scanf_chars+0x8e>
 801b448:	6823      	ldr	r3, [r4, #0]
 801b44a:	06da      	lsls	r2, r3, #27
 801b44c:	bf5e      	ittt	pl
 801b44e:	682b      	ldrpl	r3, [r5, #0]
 801b450:	781b      	ldrbpl	r3, [r3, #0]
 801b452:	f806 3b01 	strbpl.w	r3, [r6], #1
 801b456:	682a      	ldr	r2, [r5, #0]
 801b458:	686b      	ldr	r3, [r5, #4]
 801b45a:	3201      	adds	r2, #1
 801b45c:	602a      	str	r2, [r5, #0]
 801b45e:	68a2      	ldr	r2, [r4, #8]
 801b460:	3b01      	subs	r3, #1
 801b462:	3a01      	subs	r2, #1
 801b464:	606b      	str	r3, [r5, #4]
 801b466:	3701      	adds	r7, #1
 801b468:	60a2      	str	r2, [r4, #8]
 801b46a:	b142      	cbz	r2, 801b47e <_scanf_chars+0x8e>
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	dcd7      	bgt.n	801b420 <_scanf_chars+0x30>
 801b470:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b474:	4629      	mov	r1, r5
 801b476:	4640      	mov	r0, r8
 801b478:	4798      	blx	r3
 801b47a:	2800      	cmp	r0, #0
 801b47c:	d0d0      	beq.n	801b420 <_scanf_chars+0x30>
 801b47e:	6823      	ldr	r3, [r4, #0]
 801b480:	f013 0310 	ands.w	r3, r3, #16
 801b484:	d105      	bne.n	801b492 <_scanf_chars+0xa2>
 801b486:	68e2      	ldr	r2, [r4, #12]
 801b488:	3201      	adds	r2, #1
 801b48a:	60e2      	str	r2, [r4, #12]
 801b48c:	69a2      	ldr	r2, [r4, #24]
 801b48e:	b102      	cbz	r2, 801b492 <_scanf_chars+0xa2>
 801b490:	7033      	strb	r3, [r6, #0]
 801b492:	6923      	ldr	r3, [r4, #16]
 801b494:	443b      	add	r3, r7
 801b496:	6123      	str	r3, [r4, #16]
 801b498:	2000      	movs	r0, #0
 801b49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b49e:	bf00      	nop
 801b4a0:	0801c6a1 	.word	0x0801c6a1

0801b4a4 <_scanf_i>:
 801b4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a8:	4698      	mov	r8, r3
 801b4aa:	4b76      	ldr	r3, [pc, #472]	; (801b684 <_scanf_i+0x1e0>)
 801b4ac:	460c      	mov	r4, r1
 801b4ae:	4682      	mov	sl, r0
 801b4b0:	4616      	mov	r6, r2
 801b4b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b4b6:	b087      	sub	sp, #28
 801b4b8:	ab03      	add	r3, sp, #12
 801b4ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b4be:	4b72      	ldr	r3, [pc, #456]	; (801b688 <_scanf_i+0x1e4>)
 801b4c0:	69a1      	ldr	r1, [r4, #24]
 801b4c2:	4a72      	ldr	r2, [pc, #456]	; (801b68c <_scanf_i+0x1e8>)
 801b4c4:	2903      	cmp	r1, #3
 801b4c6:	bf18      	it	ne
 801b4c8:	461a      	movne	r2, r3
 801b4ca:	68a3      	ldr	r3, [r4, #8]
 801b4cc:	9201      	str	r2, [sp, #4]
 801b4ce:	1e5a      	subs	r2, r3, #1
 801b4d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b4d4:	bf88      	it	hi
 801b4d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b4da:	4627      	mov	r7, r4
 801b4dc:	bf82      	ittt	hi
 801b4de:	eb03 0905 	addhi.w	r9, r3, r5
 801b4e2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b4e6:	60a3      	strhi	r3, [r4, #8]
 801b4e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b4ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801b4f0:	bf98      	it	ls
 801b4f2:	f04f 0900 	movls.w	r9, #0
 801b4f6:	6023      	str	r3, [r4, #0]
 801b4f8:	463d      	mov	r5, r7
 801b4fa:	f04f 0b00 	mov.w	fp, #0
 801b4fe:	6831      	ldr	r1, [r6, #0]
 801b500:	ab03      	add	r3, sp, #12
 801b502:	7809      	ldrb	r1, [r1, #0]
 801b504:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b508:	2202      	movs	r2, #2
 801b50a:	f7e4 ff19 	bl	8000340 <memchr>
 801b50e:	b328      	cbz	r0, 801b55c <_scanf_i+0xb8>
 801b510:	f1bb 0f01 	cmp.w	fp, #1
 801b514:	d159      	bne.n	801b5ca <_scanf_i+0x126>
 801b516:	6862      	ldr	r2, [r4, #4]
 801b518:	b92a      	cbnz	r2, 801b526 <_scanf_i+0x82>
 801b51a:	6822      	ldr	r2, [r4, #0]
 801b51c:	2308      	movs	r3, #8
 801b51e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b522:	6063      	str	r3, [r4, #4]
 801b524:	6022      	str	r2, [r4, #0]
 801b526:	6822      	ldr	r2, [r4, #0]
 801b528:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801b52c:	6022      	str	r2, [r4, #0]
 801b52e:	68a2      	ldr	r2, [r4, #8]
 801b530:	1e51      	subs	r1, r2, #1
 801b532:	60a1      	str	r1, [r4, #8]
 801b534:	b192      	cbz	r2, 801b55c <_scanf_i+0xb8>
 801b536:	6832      	ldr	r2, [r6, #0]
 801b538:	1c51      	adds	r1, r2, #1
 801b53a:	6031      	str	r1, [r6, #0]
 801b53c:	7812      	ldrb	r2, [r2, #0]
 801b53e:	f805 2b01 	strb.w	r2, [r5], #1
 801b542:	6872      	ldr	r2, [r6, #4]
 801b544:	3a01      	subs	r2, #1
 801b546:	2a00      	cmp	r2, #0
 801b548:	6072      	str	r2, [r6, #4]
 801b54a:	dc07      	bgt.n	801b55c <_scanf_i+0xb8>
 801b54c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801b550:	4631      	mov	r1, r6
 801b552:	4650      	mov	r0, sl
 801b554:	4790      	blx	r2
 801b556:	2800      	cmp	r0, #0
 801b558:	f040 8085 	bne.w	801b666 <_scanf_i+0x1c2>
 801b55c:	f10b 0b01 	add.w	fp, fp, #1
 801b560:	f1bb 0f03 	cmp.w	fp, #3
 801b564:	d1cb      	bne.n	801b4fe <_scanf_i+0x5a>
 801b566:	6863      	ldr	r3, [r4, #4]
 801b568:	b90b      	cbnz	r3, 801b56e <_scanf_i+0xca>
 801b56a:	230a      	movs	r3, #10
 801b56c:	6063      	str	r3, [r4, #4]
 801b56e:	6863      	ldr	r3, [r4, #4]
 801b570:	4947      	ldr	r1, [pc, #284]	; (801b690 <_scanf_i+0x1ec>)
 801b572:	6960      	ldr	r0, [r4, #20]
 801b574:	1ac9      	subs	r1, r1, r3
 801b576:	f000 f8b7 	bl	801b6e8 <__sccl>
 801b57a:	f04f 0b00 	mov.w	fp, #0
 801b57e:	68a3      	ldr	r3, [r4, #8]
 801b580:	6822      	ldr	r2, [r4, #0]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d03d      	beq.n	801b602 <_scanf_i+0x15e>
 801b586:	6831      	ldr	r1, [r6, #0]
 801b588:	6960      	ldr	r0, [r4, #20]
 801b58a:	f891 c000 	ldrb.w	ip, [r1]
 801b58e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b592:	2800      	cmp	r0, #0
 801b594:	d035      	beq.n	801b602 <_scanf_i+0x15e>
 801b596:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b59a:	d124      	bne.n	801b5e6 <_scanf_i+0x142>
 801b59c:	0510      	lsls	r0, r2, #20
 801b59e:	d522      	bpl.n	801b5e6 <_scanf_i+0x142>
 801b5a0:	f10b 0b01 	add.w	fp, fp, #1
 801b5a4:	f1b9 0f00 	cmp.w	r9, #0
 801b5a8:	d003      	beq.n	801b5b2 <_scanf_i+0x10e>
 801b5aa:	3301      	adds	r3, #1
 801b5ac:	f109 39ff 	add.w	r9, r9, #4294967295
 801b5b0:	60a3      	str	r3, [r4, #8]
 801b5b2:	6873      	ldr	r3, [r6, #4]
 801b5b4:	3b01      	subs	r3, #1
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	6073      	str	r3, [r6, #4]
 801b5ba:	dd1b      	ble.n	801b5f4 <_scanf_i+0x150>
 801b5bc:	6833      	ldr	r3, [r6, #0]
 801b5be:	3301      	adds	r3, #1
 801b5c0:	6033      	str	r3, [r6, #0]
 801b5c2:	68a3      	ldr	r3, [r4, #8]
 801b5c4:	3b01      	subs	r3, #1
 801b5c6:	60a3      	str	r3, [r4, #8]
 801b5c8:	e7d9      	b.n	801b57e <_scanf_i+0xda>
 801b5ca:	f1bb 0f02 	cmp.w	fp, #2
 801b5ce:	d1ae      	bne.n	801b52e <_scanf_i+0x8a>
 801b5d0:	6822      	ldr	r2, [r4, #0]
 801b5d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b5d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b5da:	d1bf      	bne.n	801b55c <_scanf_i+0xb8>
 801b5dc:	2310      	movs	r3, #16
 801b5de:	6063      	str	r3, [r4, #4]
 801b5e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b5e4:	e7a2      	b.n	801b52c <_scanf_i+0x88>
 801b5e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b5ea:	6022      	str	r2, [r4, #0]
 801b5ec:	780b      	ldrb	r3, [r1, #0]
 801b5ee:	f805 3b01 	strb.w	r3, [r5], #1
 801b5f2:	e7de      	b.n	801b5b2 <_scanf_i+0x10e>
 801b5f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b5f8:	4631      	mov	r1, r6
 801b5fa:	4650      	mov	r0, sl
 801b5fc:	4798      	blx	r3
 801b5fe:	2800      	cmp	r0, #0
 801b600:	d0df      	beq.n	801b5c2 <_scanf_i+0x11e>
 801b602:	6823      	ldr	r3, [r4, #0]
 801b604:	05db      	lsls	r3, r3, #23
 801b606:	d50d      	bpl.n	801b624 <_scanf_i+0x180>
 801b608:	42bd      	cmp	r5, r7
 801b60a:	d909      	bls.n	801b620 <_scanf_i+0x17c>
 801b60c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b614:	4632      	mov	r2, r6
 801b616:	4650      	mov	r0, sl
 801b618:	4798      	blx	r3
 801b61a:	f105 39ff 	add.w	r9, r5, #4294967295
 801b61e:	464d      	mov	r5, r9
 801b620:	42bd      	cmp	r5, r7
 801b622:	d02d      	beq.n	801b680 <_scanf_i+0x1dc>
 801b624:	6822      	ldr	r2, [r4, #0]
 801b626:	f012 0210 	ands.w	r2, r2, #16
 801b62a:	d113      	bne.n	801b654 <_scanf_i+0x1b0>
 801b62c:	702a      	strb	r2, [r5, #0]
 801b62e:	6863      	ldr	r3, [r4, #4]
 801b630:	9e01      	ldr	r6, [sp, #4]
 801b632:	4639      	mov	r1, r7
 801b634:	4650      	mov	r0, sl
 801b636:	47b0      	blx	r6
 801b638:	6821      	ldr	r1, [r4, #0]
 801b63a:	f8d8 3000 	ldr.w	r3, [r8]
 801b63e:	f011 0f20 	tst.w	r1, #32
 801b642:	d013      	beq.n	801b66c <_scanf_i+0x1c8>
 801b644:	1d1a      	adds	r2, r3, #4
 801b646:	f8c8 2000 	str.w	r2, [r8]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	6018      	str	r0, [r3, #0]
 801b64e:	68e3      	ldr	r3, [r4, #12]
 801b650:	3301      	adds	r3, #1
 801b652:	60e3      	str	r3, [r4, #12]
 801b654:	1bed      	subs	r5, r5, r7
 801b656:	44ab      	add	fp, r5
 801b658:	6925      	ldr	r5, [r4, #16]
 801b65a:	445d      	add	r5, fp
 801b65c:	6125      	str	r5, [r4, #16]
 801b65e:	2000      	movs	r0, #0
 801b660:	b007      	add	sp, #28
 801b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b666:	f04f 0b00 	mov.w	fp, #0
 801b66a:	e7ca      	b.n	801b602 <_scanf_i+0x15e>
 801b66c:	1d1a      	adds	r2, r3, #4
 801b66e:	f8c8 2000 	str.w	r2, [r8]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	f011 0f01 	tst.w	r1, #1
 801b678:	bf14      	ite	ne
 801b67a:	8018      	strhne	r0, [r3, #0]
 801b67c:	6018      	streq	r0, [r3, #0]
 801b67e:	e7e6      	b.n	801b64e <_scanf_i+0x1aa>
 801b680:	2001      	movs	r0, #1
 801b682:	e7ed      	b.n	801b660 <_scanf_i+0x1bc>
 801b684:	0801c544 	.word	0x0801c544
 801b688:	0801b865 	.word	0x0801b865
 801b68c:	08018ead 	.word	0x08018ead
 801b690:	0801ca2e 	.word	0x0801ca2e

0801b694 <_read_r>:
 801b694:	b538      	push	{r3, r4, r5, lr}
 801b696:	4d07      	ldr	r5, [pc, #28]	; (801b6b4 <_read_r+0x20>)
 801b698:	4604      	mov	r4, r0
 801b69a:	4608      	mov	r0, r1
 801b69c:	4611      	mov	r1, r2
 801b69e:	2200      	movs	r2, #0
 801b6a0:	602a      	str	r2, [r5, #0]
 801b6a2:	461a      	mov	r2, r3
 801b6a4:	f7e8 fa3a 	bl	8003b1c <_read>
 801b6a8:	1c43      	adds	r3, r0, #1
 801b6aa:	d102      	bne.n	801b6b2 <_read_r+0x1e>
 801b6ac:	682b      	ldr	r3, [r5, #0]
 801b6ae:	b103      	cbz	r3, 801b6b2 <_read_r+0x1e>
 801b6b0:	6023      	str	r3, [r4, #0]
 801b6b2:	bd38      	pop	{r3, r4, r5, pc}
 801b6b4:	24003238 	.word	0x24003238

0801b6b8 <nan>:
 801b6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b6c0 <nan+0x8>
 801b6bc:	4770      	bx	lr
 801b6be:	bf00      	nop
 801b6c0:	00000000 	.word	0x00000000
 801b6c4:	7ff80000 	.word	0x7ff80000

0801b6c8 <_sbrk_r>:
 801b6c8:	b538      	push	{r3, r4, r5, lr}
 801b6ca:	4d06      	ldr	r5, [pc, #24]	; (801b6e4 <_sbrk_r+0x1c>)
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	4604      	mov	r4, r0
 801b6d0:	4608      	mov	r0, r1
 801b6d2:	602b      	str	r3, [r5, #0]
 801b6d4:	f7e8 fa90 	bl	8003bf8 <_sbrk>
 801b6d8:	1c43      	adds	r3, r0, #1
 801b6da:	d102      	bne.n	801b6e2 <_sbrk_r+0x1a>
 801b6dc:	682b      	ldr	r3, [r5, #0]
 801b6de:	b103      	cbz	r3, 801b6e2 <_sbrk_r+0x1a>
 801b6e0:	6023      	str	r3, [r4, #0]
 801b6e2:	bd38      	pop	{r3, r4, r5, pc}
 801b6e4:	24003238 	.word	0x24003238

0801b6e8 <__sccl>:
 801b6e8:	b570      	push	{r4, r5, r6, lr}
 801b6ea:	780b      	ldrb	r3, [r1, #0]
 801b6ec:	4604      	mov	r4, r0
 801b6ee:	2b5e      	cmp	r3, #94	; 0x5e
 801b6f0:	bf0b      	itete	eq
 801b6f2:	784b      	ldrbeq	r3, [r1, #1]
 801b6f4:	1c48      	addne	r0, r1, #1
 801b6f6:	1c88      	addeq	r0, r1, #2
 801b6f8:	2200      	movne	r2, #0
 801b6fa:	bf08      	it	eq
 801b6fc:	2201      	moveq	r2, #1
 801b6fe:	1e61      	subs	r1, r4, #1
 801b700:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b704:	f801 2f01 	strb.w	r2, [r1, #1]!
 801b708:	42a9      	cmp	r1, r5
 801b70a:	d1fb      	bne.n	801b704 <__sccl+0x1c>
 801b70c:	b90b      	cbnz	r3, 801b712 <__sccl+0x2a>
 801b70e:	3801      	subs	r0, #1
 801b710:	bd70      	pop	{r4, r5, r6, pc}
 801b712:	f082 0201 	eor.w	r2, r2, #1
 801b716:	54e2      	strb	r2, [r4, r3]
 801b718:	4605      	mov	r5, r0
 801b71a:	4628      	mov	r0, r5
 801b71c:	f810 1b01 	ldrb.w	r1, [r0], #1
 801b720:	292d      	cmp	r1, #45	; 0x2d
 801b722:	d006      	beq.n	801b732 <__sccl+0x4a>
 801b724:	295d      	cmp	r1, #93	; 0x5d
 801b726:	d0f3      	beq.n	801b710 <__sccl+0x28>
 801b728:	b909      	cbnz	r1, 801b72e <__sccl+0x46>
 801b72a:	4628      	mov	r0, r5
 801b72c:	e7f0      	b.n	801b710 <__sccl+0x28>
 801b72e:	460b      	mov	r3, r1
 801b730:	e7f1      	b.n	801b716 <__sccl+0x2e>
 801b732:	786e      	ldrb	r6, [r5, #1]
 801b734:	2e5d      	cmp	r6, #93	; 0x5d
 801b736:	d0fa      	beq.n	801b72e <__sccl+0x46>
 801b738:	42b3      	cmp	r3, r6
 801b73a:	dcf8      	bgt.n	801b72e <__sccl+0x46>
 801b73c:	3502      	adds	r5, #2
 801b73e:	4619      	mov	r1, r3
 801b740:	3101      	adds	r1, #1
 801b742:	428e      	cmp	r6, r1
 801b744:	5462      	strb	r2, [r4, r1]
 801b746:	dcfb      	bgt.n	801b740 <__sccl+0x58>
 801b748:	1af1      	subs	r1, r6, r3
 801b74a:	3901      	subs	r1, #1
 801b74c:	1c58      	adds	r0, r3, #1
 801b74e:	42b3      	cmp	r3, r6
 801b750:	bfa8      	it	ge
 801b752:	2100      	movge	r1, #0
 801b754:	1843      	adds	r3, r0, r1
 801b756:	e7e0      	b.n	801b71a <__sccl+0x32>

0801b758 <strncmp>:
 801b758:	b510      	push	{r4, lr}
 801b75a:	b17a      	cbz	r2, 801b77c <strncmp+0x24>
 801b75c:	4603      	mov	r3, r0
 801b75e:	3901      	subs	r1, #1
 801b760:	1884      	adds	r4, r0, r2
 801b762:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b766:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b76a:	4290      	cmp	r0, r2
 801b76c:	d101      	bne.n	801b772 <strncmp+0x1a>
 801b76e:	42a3      	cmp	r3, r4
 801b770:	d101      	bne.n	801b776 <strncmp+0x1e>
 801b772:	1a80      	subs	r0, r0, r2
 801b774:	bd10      	pop	{r4, pc}
 801b776:	2800      	cmp	r0, #0
 801b778:	d1f3      	bne.n	801b762 <strncmp+0xa>
 801b77a:	e7fa      	b.n	801b772 <strncmp+0x1a>
 801b77c:	4610      	mov	r0, r2
 801b77e:	e7f9      	b.n	801b774 <strncmp+0x1c>

0801b780 <_strtoul_l.constprop.0>:
 801b780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b784:	4f36      	ldr	r7, [pc, #216]	; (801b860 <_strtoul_l.constprop.0+0xe0>)
 801b786:	4686      	mov	lr, r0
 801b788:	460d      	mov	r5, r1
 801b78a:	4628      	mov	r0, r5
 801b78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b790:	5de6      	ldrb	r6, [r4, r7]
 801b792:	f016 0608 	ands.w	r6, r6, #8
 801b796:	d1f8      	bne.n	801b78a <_strtoul_l.constprop.0+0xa>
 801b798:	2c2d      	cmp	r4, #45	; 0x2d
 801b79a:	d12f      	bne.n	801b7fc <_strtoul_l.constprop.0+0x7c>
 801b79c:	782c      	ldrb	r4, [r5, #0]
 801b79e:	2601      	movs	r6, #1
 801b7a0:	1c85      	adds	r5, r0, #2
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d057      	beq.n	801b856 <_strtoul_l.constprop.0+0xd6>
 801b7a6:	2b10      	cmp	r3, #16
 801b7a8:	d109      	bne.n	801b7be <_strtoul_l.constprop.0+0x3e>
 801b7aa:	2c30      	cmp	r4, #48	; 0x30
 801b7ac:	d107      	bne.n	801b7be <_strtoul_l.constprop.0+0x3e>
 801b7ae:	7828      	ldrb	r0, [r5, #0]
 801b7b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b7b4:	2858      	cmp	r0, #88	; 0x58
 801b7b6:	d149      	bne.n	801b84c <_strtoul_l.constprop.0+0xcc>
 801b7b8:	786c      	ldrb	r4, [r5, #1]
 801b7ba:	2310      	movs	r3, #16
 801b7bc:	3502      	adds	r5, #2
 801b7be:	f04f 38ff 	mov.w	r8, #4294967295
 801b7c2:	2700      	movs	r7, #0
 801b7c4:	fbb8 f8f3 	udiv	r8, r8, r3
 801b7c8:	fb03 f908 	mul.w	r9, r3, r8
 801b7cc:	ea6f 0909 	mvn.w	r9, r9
 801b7d0:	4638      	mov	r0, r7
 801b7d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b7d6:	f1bc 0f09 	cmp.w	ip, #9
 801b7da:	d814      	bhi.n	801b806 <_strtoul_l.constprop.0+0x86>
 801b7dc:	4664      	mov	r4, ip
 801b7de:	42a3      	cmp	r3, r4
 801b7e0:	dd22      	ble.n	801b828 <_strtoul_l.constprop.0+0xa8>
 801b7e2:	2f00      	cmp	r7, #0
 801b7e4:	db1d      	blt.n	801b822 <_strtoul_l.constprop.0+0xa2>
 801b7e6:	4580      	cmp	r8, r0
 801b7e8:	d31b      	bcc.n	801b822 <_strtoul_l.constprop.0+0xa2>
 801b7ea:	d101      	bne.n	801b7f0 <_strtoul_l.constprop.0+0x70>
 801b7ec:	45a1      	cmp	r9, r4
 801b7ee:	db18      	blt.n	801b822 <_strtoul_l.constprop.0+0xa2>
 801b7f0:	fb00 4003 	mla	r0, r0, r3, r4
 801b7f4:	2701      	movs	r7, #1
 801b7f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b7fa:	e7ea      	b.n	801b7d2 <_strtoul_l.constprop.0+0x52>
 801b7fc:	2c2b      	cmp	r4, #43	; 0x2b
 801b7fe:	bf04      	itt	eq
 801b800:	782c      	ldrbeq	r4, [r5, #0]
 801b802:	1c85      	addeq	r5, r0, #2
 801b804:	e7cd      	b.n	801b7a2 <_strtoul_l.constprop.0+0x22>
 801b806:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b80a:	f1bc 0f19 	cmp.w	ip, #25
 801b80e:	d801      	bhi.n	801b814 <_strtoul_l.constprop.0+0x94>
 801b810:	3c37      	subs	r4, #55	; 0x37
 801b812:	e7e4      	b.n	801b7de <_strtoul_l.constprop.0+0x5e>
 801b814:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b818:	f1bc 0f19 	cmp.w	ip, #25
 801b81c:	d804      	bhi.n	801b828 <_strtoul_l.constprop.0+0xa8>
 801b81e:	3c57      	subs	r4, #87	; 0x57
 801b820:	e7dd      	b.n	801b7de <_strtoul_l.constprop.0+0x5e>
 801b822:	f04f 37ff 	mov.w	r7, #4294967295
 801b826:	e7e6      	b.n	801b7f6 <_strtoul_l.constprop.0+0x76>
 801b828:	2f00      	cmp	r7, #0
 801b82a:	da07      	bge.n	801b83c <_strtoul_l.constprop.0+0xbc>
 801b82c:	2322      	movs	r3, #34	; 0x22
 801b82e:	f8ce 3000 	str.w	r3, [lr]
 801b832:	f04f 30ff 	mov.w	r0, #4294967295
 801b836:	b932      	cbnz	r2, 801b846 <_strtoul_l.constprop.0+0xc6>
 801b838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b83c:	b106      	cbz	r6, 801b840 <_strtoul_l.constprop.0+0xc0>
 801b83e:	4240      	negs	r0, r0
 801b840:	2a00      	cmp	r2, #0
 801b842:	d0f9      	beq.n	801b838 <_strtoul_l.constprop.0+0xb8>
 801b844:	b107      	cbz	r7, 801b848 <_strtoul_l.constprop.0+0xc8>
 801b846:	1e69      	subs	r1, r5, #1
 801b848:	6011      	str	r1, [r2, #0]
 801b84a:	e7f5      	b.n	801b838 <_strtoul_l.constprop.0+0xb8>
 801b84c:	2430      	movs	r4, #48	; 0x30
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d1b5      	bne.n	801b7be <_strtoul_l.constprop.0+0x3e>
 801b852:	2308      	movs	r3, #8
 801b854:	e7b3      	b.n	801b7be <_strtoul_l.constprop.0+0x3e>
 801b856:	2c30      	cmp	r4, #48	; 0x30
 801b858:	d0a9      	beq.n	801b7ae <_strtoul_l.constprop.0+0x2e>
 801b85a:	230a      	movs	r3, #10
 801b85c:	e7af      	b.n	801b7be <_strtoul_l.constprop.0+0x3e>
 801b85e:	bf00      	nop
 801b860:	0801c6a1 	.word	0x0801c6a1

0801b864 <_strtoul_r>:
 801b864:	f7ff bf8c 	b.w	801b780 <_strtoul_l.constprop.0>

0801b868 <__submore>:
 801b868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b86c:	460c      	mov	r4, r1
 801b86e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b874:	4299      	cmp	r1, r3
 801b876:	d11d      	bne.n	801b8b4 <__submore+0x4c>
 801b878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b87c:	f7ff fa16 	bl	801acac <_malloc_r>
 801b880:	b918      	cbnz	r0, 801b88a <__submore+0x22>
 801b882:	f04f 30ff 	mov.w	r0, #4294967295
 801b886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b88e:	63a3      	str	r3, [r4, #56]	; 0x38
 801b890:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b894:	6360      	str	r0, [r4, #52]	; 0x34
 801b896:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b89a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b89e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b8a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b8a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b8aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b8ae:	6020      	str	r0, [r4, #0]
 801b8b0:	2000      	movs	r0, #0
 801b8b2:	e7e8      	b.n	801b886 <__submore+0x1e>
 801b8b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b8b6:	0077      	lsls	r7, r6, #1
 801b8b8:	463a      	mov	r2, r7
 801b8ba:	f000 fa2d 	bl	801bd18 <_realloc_r>
 801b8be:	4605      	mov	r5, r0
 801b8c0:	2800      	cmp	r0, #0
 801b8c2:	d0de      	beq.n	801b882 <__submore+0x1a>
 801b8c4:	eb00 0806 	add.w	r8, r0, r6
 801b8c8:	4601      	mov	r1, r0
 801b8ca:	4632      	mov	r2, r6
 801b8cc:	4640      	mov	r0, r8
 801b8ce:	f7fb fd9b 	bl	8017408 <memcpy>
 801b8d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b8d6:	f8c4 8000 	str.w	r8, [r4]
 801b8da:	e7e9      	b.n	801b8b0 <__submore+0x48>

0801b8dc <__ascii_wctomb>:
 801b8dc:	b149      	cbz	r1, 801b8f2 <__ascii_wctomb+0x16>
 801b8de:	2aff      	cmp	r2, #255	; 0xff
 801b8e0:	bf85      	ittet	hi
 801b8e2:	238a      	movhi	r3, #138	; 0x8a
 801b8e4:	6003      	strhi	r3, [r0, #0]
 801b8e6:	700a      	strbls	r2, [r1, #0]
 801b8e8:	f04f 30ff 	movhi.w	r0, #4294967295
 801b8ec:	bf98      	it	ls
 801b8ee:	2001      	movls	r0, #1
 801b8f0:	4770      	bx	lr
 801b8f2:	4608      	mov	r0, r1
 801b8f4:	4770      	bx	lr
	...

0801b8f8 <__assert_func>:
 801b8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b8fa:	4614      	mov	r4, r2
 801b8fc:	461a      	mov	r2, r3
 801b8fe:	4b09      	ldr	r3, [pc, #36]	; (801b924 <__assert_func+0x2c>)
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	4605      	mov	r5, r0
 801b904:	68d8      	ldr	r0, [r3, #12]
 801b906:	b14c      	cbz	r4, 801b91c <__assert_func+0x24>
 801b908:	4b07      	ldr	r3, [pc, #28]	; (801b928 <__assert_func+0x30>)
 801b90a:	9100      	str	r1, [sp, #0]
 801b90c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b910:	4906      	ldr	r1, [pc, #24]	; (801b92c <__assert_func+0x34>)
 801b912:	462b      	mov	r3, r5
 801b914:	f000 f9a6 	bl	801bc64 <fiprintf>
 801b918:	f000 fc46 	bl	801c1a8 <abort>
 801b91c:	4b04      	ldr	r3, [pc, #16]	; (801b930 <__assert_func+0x38>)
 801b91e:	461c      	mov	r4, r3
 801b920:	e7f3      	b.n	801b90a <__assert_func+0x12>
 801b922:	bf00      	nop
 801b924:	24000100 	.word	0x24000100
 801b928:	0801ca30 	.word	0x0801ca30
 801b92c:	0801ca3d 	.word	0x0801ca3d
 801b930:	0801ca6b 	.word	0x0801ca6b

0801b934 <__sflush_r>:
 801b934:	898a      	ldrh	r2, [r1, #12]
 801b936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b93a:	4605      	mov	r5, r0
 801b93c:	0710      	lsls	r0, r2, #28
 801b93e:	460c      	mov	r4, r1
 801b940:	d458      	bmi.n	801b9f4 <__sflush_r+0xc0>
 801b942:	684b      	ldr	r3, [r1, #4]
 801b944:	2b00      	cmp	r3, #0
 801b946:	dc05      	bgt.n	801b954 <__sflush_r+0x20>
 801b948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	dc02      	bgt.n	801b954 <__sflush_r+0x20>
 801b94e:	2000      	movs	r0, #0
 801b950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b956:	2e00      	cmp	r6, #0
 801b958:	d0f9      	beq.n	801b94e <__sflush_r+0x1a>
 801b95a:	2300      	movs	r3, #0
 801b95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b960:	682f      	ldr	r7, [r5, #0]
 801b962:	602b      	str	r3, [r5, #0]
 801b964:	d032      	beq.n	801b9cc <__sflush_r+0x98>
 801b966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b968:	89a3      	ldrh	r3, [r4, #12]
 801b96a:	075a      	lsls	r2, r3, #29
 801b96c:	d505      	bpl.n	801b97a <__sflush_r+0x46>
 801b96e:	6863      	ldr	r3, [r4, #4]
 801b970:	1ac0      	subs	r0, r0, r3
 801b972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b974:	b10b      	cbz	r3, 801b97a <__sflush_r+0x46>
 801b976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b978:	1ac0      	subs	r0, r0, r3
 801b97a:	2300      	movs	r3, #0
 801b97c:	4602      	mov	r2, r0
 801b97e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b980:	6a21      	ldr	r1, [r4, #32]
 801b982:	4628      	mov	r0, r5
 801b984:	47b0      	blx	r6
 801b986:	1c43      	adds	r3, r0, #1
 801b988:	89a3      	ldrh	r3, [r4, #12]
 801b98a:	d106      	bne.n	801b99a <__sflush_r+0x66>
 801b98c:	6829      	ldr	r1, [r5, #0]
 801b98e:	291d      	cmp	r1, #29
 801b990:	d82c      	bhi.n	801b9ec <__sflush_r+0xb8>
 801b992:	4a2a      	ldr	r2, [pc, #168]	; (801ba3c <__sflush_r+0x108>)
 801b994:	40ca      	lsrs	r2, r1
 801b996:	07d6      	lsls	r6, r2, #31
 801b998:	d528      	bpl.n	801b9ec <__sflush_r+0xb8>
 801b99a:	2200      	movs	r2, #0
 801b99c:	6062      	str	r2, [r4, #4]
 801b99e:	04d9      	lsls	r1, r3, #19
 801b9a0:	6922      	ldr	r2, [r4, #16]
 801b9a2:	6022      	str	r2, [r4, #0]
 801b9a4:	d504      	bpl.n	801b9b0 <__sflush_r+0x7c>
 801b9a6:	1c42      	adds	r2, r0, #1
 801b9a8:	d101      	bne.n	801b9ae <__sflush_r+0x7a>
 801b9aa:	682b      	ldr	r3, [r5, #0]
 801b9ac:	b903      	cbnz	r3, 801b9b0 <__sflush_r+0x7c>
 801b9ae:	6560      	str	r0, [r4, #84]	; 0x54
 801b9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b9b2:	602f      	str	r7, [r5, #0]
 801b9b4:	2900      	cmp	r1, #0
 801b9b6:	d0ca      	beq.n	801b94e <__sflush_r+0x1a>
 801b9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b9bc:	4299      	cmp	r1, r3
 801b9be:	d002      	beq.n	801b9c6 <__sflush_r+0x92>
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	f7ff f907 	bl	801abd4 <_free_r>
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	6360      	str	r0, [r4, #52]	; 0x34
 801b9ca:	e7c1      	b.n	801b950 <__sflush_r+0x1c>
 801b9cc:	6a21      	ldr	r1, [r4, #32]
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	47b0      	blx	r6
 801b9d4:	1c41      	adds	r1, r0, #1
 801b9d6:	d1c7      	bne.n	801b968 <__sflush_r+0x34>
 801b9d8:	682b      	ldr	r3, [r5, #0]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d0c4      	beq.n	801b968 <__sflush_r+0x34>
 801b9de:	2b1d      	cmp	r3, #29
 801b9e0:	d001      	beq.n	801b9e6 <__sflush_r+0xb2>
 801b9e2:	2b16      	cmp	r3, #22
 801b9e4:	d101      	bne.n	801b9ea <__sflush_r+0xb6>
 801b9e6:	602f      	str	r7, [r5, #0]
 801b9e8:	e7b1      	b.n	801b94e <__sflush_r+0x1a>
 801b9ea:	89a3      	ldrh	r3, [r4, #12]
 801b9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9f0:	81a3      	strh	r3, [r4, #12]
 801b9f2:	e7ad      	b.n	801b950 <__sflush_r+0x1c>
 801b9f4:	690f      	ldr	r7, [r1, #16]
 801b9f6:	2f00      	cmp	r7, #0
 801b9f8:	d0a9      	beq.n	801b94e <__sflush_r+0x1a>
 801b9fa:	0793      	lsls	r3, r2, #30
 801b9fc:	680e      	ldr	r6, [r1, #0]
 801b9fe:	bf08      	it	eq
 801ba00:	694b      	ldreq	r3, [r1, #20]
 801ba02:	600f      	str	r7, [r1, #0]
 801ba04:	bf18      	it	ne
 801ba06:	2300      	movne	r3, #0
 801ba08:	eba6 0807 	sub.w	r8, r6, r7
 801ba0c:	608b      	str	r3, [r1, #8]
 801ba0e:	f1b8 0f00 	cmp.w	r8, #0
 801ba12:	dd9c      	ble.n	801b94e <__sflush_r+0x1a>
 801ba14:	6a21      	ldr	r1, [r4, #32]
 801ba16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ba18:	4643      	mov	r3, r8
 801ba1a:	463a      	mov	r2, r7
 801ba1c:	4628      	mov	r0, r5
 801ba1e:	47b0      	blx	r6
 801ba20:	2800      	cmp	r0, #0
 801ba22:	dc06      	bgt.n	801ba32 <__sflush_r+0xfe>
 801ba24:	89a3      	ldrh	r3, [r4, #12]
 801ba26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba2a:	81a3      	strh	r3, [r4, #12]
 801ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 801ba30:	e78e      	b.n	801b950 <__sflush_r+0x1c>
 801ba32:	4407      	add	r7, r0
 801ba34:	eba8 0800 	sub.w	r8, r8, r0
 801ba38:	e7e9      	b.n	801ba0e <__sflush_r+0xda>
 801ba3a:	bf00      	nop
 801ba3c:	20400001 	.word	0x20400001

0801ba40 <_fflush_r>:
 801ba40:	b538      	push	{r3, r4, r5, lr}
 801ba42:	690b      	ldr	r3, [r1, #16]
 801ba44:	4605      	mov	r5, r0
 801ba46:	460c      	mov	r4, r1
 801ba48:	b913      	cbnz	r3, 801ba50 <_fflush_r+0x10>
 801ba4a:	2500      	movs	r5, #0
 801ba4c:	4628      	mov	r0, r5
 801ba4e:	bd38      	pop	{r3, r4, r5, pc}
 801ba50:	b118      	cbz	r0, 801ba5a <_fflush_r+0x1a>
 801ba52:	6983      	ldr	r3, [r0, #24]
 801ba54:	b90b      	cbnz	r3, 801ba5a <_fflush_r+0x1a>
 801ba56:	f000 f887 	bl	801bb68 <__sinit>
 801ba5a:	4b14      	ldr	r3, [pc, #80]	; (801baac <_fflush_r+0x6c>)
 801ba5c:	429c      	cmp	r4, r3
 801ba5e:	d11b      	bne.n	801ba98 <_fflush_r+0x58>
 801ba60:	686c      	ldr	r4, [r5, #4]
 801ba62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d0ef      	beq.n	801ba4a <_fflush_r+0xa>
 801ba6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ba6c:	07d0      	lsls	r0, r2, #31
 801ba6e:	d404      	bmi.n	801ba7a <_fflush_r+0x3a>
 801ba70:	0599      	lsls	r1, r3, #22
 801ba72:	d402      	bmi.n	801ba7a <_fflush_r+0x3a>
 801ba74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba76:	f000 f927 	bl	801bcc8 <__retarget_lock_acquire_recursive>
 801ba7a:	4628      	mov	r0, r5
 801ba7c:	4621      	mov	r1, r4
 801ba7e:	f7ff ff59 	bl	801b934 <__sflush_r>
 801ba82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba84:	07da      	lsls	r2, r3, #31
 801ba86:	4605      	mov	r5, r0
 801ba88:	d4e0      	bmi.n	801ba4c <_fflush_r+0xc>
 801ba8a:	89a3      	ldrh	r3, [r4, #12]
 801ba8c:	059b      	lsls	r3, r3, #22
 801ba8e:	d4dd      	bmi.n	801ba4c <_fflush_r+0xc>
 801ba90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba92:	f000 f91a 	bl	801bcca <__retarget_lock_release_recursive>
 801ba96:	e7d9      	b.n	801ba4c <_fflush_r+0xc>
 801ba98:	4b05      	ldr	r3, [pc, #20]	; (801bab0 <_fflush_r+0x70>)
 801ba9a:	429c      	cmp	r4, r3
 801ba9c:	d101      	bne.n	801baa2 <_fflush_r+0x62>
 801ba9e:	68ac      	ldr	r4, [r5, #8]
 801baa0:	e7df      	b.n	801ba62 <_fflush_r+0x22>
 801baa2:	4b04      	ldr	r3, [pc, #16]	; (801bab4 <_fflush_r+0x74>)
 801baa4:	429c      	cmp	r4, r3
 801baa6:	bf08      	it	eq
 801baa8:	68ec      	ldreq	r4, [r5, #12]
 801baaa:	e7da      	b.n	801ba62 <_fflush_r+0x22>
 801baac:	0801ca8c 	.word	0x0801ca8c
 801bab0:	0801caac 	.word	0x0801caac
 801bab4:	0801ca6c 	.word	0x0801ca6c

0801bab8 <std>:
 801bab8:	2300      	movs	r3, #0
 801baba:	b510      	push	{r4, lr}
 801babc:	4604      	mov	r4, r0
 801babe:	e9c0 3300 	strd	r3, r3, [r0]
 801bac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bac6:	6083      	str	r3, [r0, #8]
 801bac8:	8181      	strh	r1, [r0, #12]
 801baca:	6643      	str	r3, [r0, #100]	; 0x64
 801bacc:	81c2      	strh	r2, [r0, #14]
 801bace:	6183      	str	r3, [r0, #24]
 801bad0:	4619      	mov	r1, r3
 801bad2:	2208      	movs	r2, #8
 801bad4:	305c      	adds	r0, #92	; 0x5c
 801bad6:	f7fb fca5 	bl	8017424 <memset>
 801bada:	4b05      	ldr	r3, [pc, #20]	; (801baf0 <std+0x38>)
 801badc:	6263      	str	r3, [r4, #36]	; 0x24
 801bade:	4b05      	ldr	r3, [pc, #20]	; (801baf4 <std+0x3c>)
 801bae0:	62a3      	str	r3, [r4, #40]	; 0x28
 801bae2:	4b05      	ldr	r3, [pc, #20]	; (801baf8 <std+0x40>)
 801bae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bae6:	4b05      	ldr	r3, [pc, #20]	; (801bafc <std+0x44>)
 801bae8:	6224      	str	r4, [r4, #32]
 801baea:	6323      	str	r3, [r4, #48]	; 0x30
 801baec:	bd10      	pop	{r4, pc}
 801baee:	bf00      	nop
 801baf0:	0801816d 	.word	0x0801816d
 801baf4:	08018193 	.word	0x08018193
 801baf8:	080181cb 	.word	0x080181cb
 801bafc:	080181ef 	.word	0x080181ef

0801bb00 <_cleanup_r>:
 801bb00:	4901      	ldr	r1, [pc, #4]	; (801bb08 <_cleanup_r+0x8>)
 801bb02:	f000 b8c1 	b.w	801bc88 <_fwalk_reent>
 801bb06:	bf00      	nop
 801bb08:	0801ba41 	.word	0x0801ba41

0801bb0c <__sfmoreglue>:
 801bb0c:	b570      	push	{r4, r5, r6, lr}
 801bb0e:	2268      	movs	r2, #104	; 0x68
 801bb10:	1e4d      	subs	r5, r1, #1
 801bb12:	4355      	muls	r5, r2
 801bb14:	460e      	mov	r6, r1
 801bb16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bb1a:	f7ff f8c7 	bl	801acac <_malloc_r>
 801bb1e:	4604      	mov	r4, r0
 801bb20:	b140      	cbz	r0, 801bb34 <__sfmoreglue+0x28>
 801bb22:	2100      	movs	r1, #0
 801bb24:	e9c0 1600 	strd	r1, r6, [r0]
 801bb28:	300c      	adds	r0, #12
 801bb2a:	60a0      	str	r0, [r4, #8]
 801bb2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bb30:	f7fb fc78 	bl	8017424 <memset>
 801bb34:	4620      	mov	r0, r4
 801bb36:	bd70      	pop	{r4, r5, r6, pc}

0801bb38 <__sfp_lock_acquire>:
 801bb38:	4801      	ldr	r0, [pc, #4]	; (801bb40 <__sfp_lock_acquire+0x8>)
 801bb3a:	f000 b8c5 	b.w	801bcc8 <__retarget_lock_acquire_recursive>
 801bb3e:	bf00      	nop
 801bb40:	2400323d 	.word	0x2400323d

0801bb44 <__sfp_lock_release>:
 801bb44:	4801      	ldr	r0, [pc, #4]	; (801bb4c <__sfp_lock_release+0x8>)
 801bb46:	f000 b8c0 	b.w	801bcca <__retarget_lock_release_recursive>
 801bb4a:	bf00      	nop
 801bb4c:	2400323d 	.word	0x2400323d

0801bb50 <__sinit_lock_acquire>:
 801bb50:	4801      	ldr	r0, [pc, #4]	; (801bb58 <__sinit_lock_acquire+0x8>)
 801bb52:	f000 b8b9 	b.w	801bcc8 <__retarget_lock_acquire_recursive>
 801bb56:	bf00      	nop
 801bb58:	2400323e 	.word	0x2400323e

0801bb5c <__sinit_lock_release>:
 801bb5c:	4801      	ldr	r0, [pc, #4]	; (801bb64 <__sinit_lock_release+0x8>)
 801bb5e:	f000 b8b4 	b.w	801bcca <__retarget_lock_release_recursive>
 801bb62:	bf00      	nop
 801bb64:	2400323e 	.word	0x2400323e

0801bb68 <__sinit>:
 801bb68:	b510      	push	{r4, lr}
 801bb6a:	4604      	mov	r4, r0
 801bb6c:	f7ff fff0 	bl	801bb50 <__sinit_lock_acquire>
 801bb70:	69a3      	ldr	r3, [r4, #24]
 801bb72:	b11b      	cbz	r3, 801bb7c <__sinit+0x14>
 801bb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb78:	f7ff bff0 	b.w	801bb5c <__sinit_lock_release>
 801bb7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bb80:	6523      	str	r3, [r4, #80]	; 0x50
 801bb82:	4b13      	ldr	r3, [pc, #76]	; (801bbd0 <__sinit+0x68>)
 801bb84:	4a13      	ldr	r2, [pc, #76]	; (801bbd4 <__sinit+0x6c>)
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	62a2      	str	r2, [r4, #40]	; 0x28
 801bb8a:	42a3      	cmp	r3, r4
 801bb8c:	bf04      	itt	eq
 801bb8e:	2301      	moveq	r3, #1
 801bb90:	61a3      	streq	r3, [r4, #24]
 801bb92:	4620      	mov	r0, r4
 801bb94:	f000 f820 	bl	801bbd8 <__sfp>
 801bb98:	6060      	str	r0, [r4, #4]
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	f000 f81c 	bl	801bbd8 <__sfp>
 801bba0:	60a0      	str	r0, [r4, #8]
 801bba2:	4620      	mov	r0, r4
 801bba4:	f000 f818 	bl	801bbd8 <__sfp>
 801bba8:	2200      	movs	r2, #0
 801bbaa:	60e0      	str	r0, [r4, #12]
 801bbac:	2104      	movs	r1, #4
 801bbae:	6860      	ldr	r0, [r4, #4]
 801bbb0:	f7ff ff82 	bl	801bab8 <std>
 801bbb4:	68a0      	ldr	r0, [r4, #8]
 801bbb6:	2201      	movs	r2, #1
 801bbb8:	2109      	movs	r1, #9
 801bbba:	f7ff ff7d 	bl	801bab8 <std>
 801bbbe:	68e0      	ldr	r0, [r4, #12]
 801bbc0:	2202      	movs	r2, #2
 801bbc2:	2112      	movs	r1, #18
 801bbc4:	f7ff ff78 	bl	801bab8 <std>
 801bbc8:	2301      	movs	r3, #1
 801bbca:	61a3      	str	r3, [r4, #24]
 801bbcc:	e7d2      	b.n	801bb74 <__sinit+0xc>
 801bbce:	bf00      	nop
 801bbd0:	0801c614 	.word	0x0801c614
 801bbd4:	0801bb01 	.word	0x0801bb01

0801bbd8 <__sfp>:
 801bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbda:	4607      	mov	r7, r0
 801bbdc:	f7ff ffac 	bl	801bb38 <__sfp_lock_acquire>
 801bbe0:	4b1e      	ldr	r3, [pc, #120]	; (801bc5c <__sfp+0x84>)
 801bbe2:	681e      	ldr	r6, [r3, #0]
 801bbe4:	69b3      	ldr	r3, [r6, #24]
 801bbe6:	b913      	cbnz	r3, 801bbee <__sfp+0x16>
 801bbe8:	4630      	mov	r0, r6
 801bbea:	f7ff ffbd 	bl	801bb68 <__sinit>
 801bbee:	3648      	adds	r6, #72	; 0x48
 801bbf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bbf4:	3b01      	subs	r3, #1
 801bbf6:	d503      	bpl.n	801bc00 <__sfp+0x28>
 801bbf8:	6833      	ldr	r3, [r6, #0]
 801bbfa:	b30b      	cbz	r3, 801bc40 <__sfp+0x68>
 801bbfc:	6836      	ldr	r6, [r6, #0]
 801bbfe:	e7f7      	b.n	801bbf0 <__sfp+0x18>
 801bc00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bc04:	b9d5      	cbnz	r5, 801bc3c <__sfp+0x64>
 801bc06:	4b16      	ldr	r3, [pc, #88]	; (801bc60 <__sfp+0x88>)
 801bc08:	60e3      	str	r3, [r4, #12]
 801bc0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bc0e:	6665      	str	r5, [r4, #100]	; 0x64
 801bc10:	f000 f859 	bl	801bcc6 <__retarget_lock_init_recursive>
 801bc14:	f7ff ff96 	bl	801bb44 <__sfp_lock_release>
 801bc18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bc1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bc20:	6025      	str	r5, [r4, #0]
 801bc22:	61a5      	str	r5, [r4, #24]
 801bc24:	2208      	movs	r2, #8
 801bc26:	4629      	mov	r1, r5
 801bc28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bc2c:	f7fb fbfa 	bl	8017424 <memset>
 801bc30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bc34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bc38:	4620      	mov	r0, r4
 801bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc3c:	3468      	adds	r4, #104	; 0x68
 801bc3e:	e7d9      	b.n	801bbf4 <__sfp+0x1c>
 801bc40:	2104      	movs	r1, #4
 801bc42:	4638      	mov	r0, r7
 801bc44:	f7ff ff62 	bl	801bb0c <__sfmoreglue>
 801bc48:	4604      	mov	r4, r0
 801bc4a:	6030      	str	r0, [r6, #0]
 801bc4c:	2800      	cmp	r0, #0
 801bc4e:	d1d5      	bne.n	801bbfc <__sfp+0x24>
 801bc50:	f7ff ff78 	bl	801bb44 <__sfp_lock_release>
 801bc54:	230c      	movs	r3, #12
 801bc56:	603b      	str	r3, [r7, #0]
 801bc58:	e7ee      	b.n	801bc38 <__sfp+0x60>
 801bc5a:	bf00      	nop
 801bc5c:	0801c614 	.word	0x0801c614
 801bc60:	ffff0001 	.word	0xffff0001

0801bc64 <fiprintf>:
 801bc64:	b40e      	push	{r1, r2, r3}
 801bc66:	b503      	push	{r0, r1, lr}
 801bc68:	4601      	mov	r1, r0
 801bc6a:	ab03      	add	r3, sp, #12
 801bc6c:	4805      	ldr	r0, [pc, #20]	; (801bc84 <fiprintf+0x20>)
 801bc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc72:	6800      	ldr	r0, [r0, #0]
 801bc74:	9301      	str	r3, [sp, #4]
 801bc76:	f000 f8a7 	bl	801bdc8 <_vfiprintf_r>
 801bc7a:	b002      	add	sp, #8
 801bc7c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc80:	b003      	add	sp, #12
 801bc82:	4770      	bx	lr
 801bc84:	24000100 	.word	0x24000100

0801bc88 <_fwalk_reent>:
 801bc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc8c:	4606      	mov	r6, r0
 801bc8e:	4688      	mov	r8, r1
 801bc90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bc94:	2700      	movs	r7, #0
 801bc96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bc9a:	f1b9 0901 	subs.w	r9, r9, #1
 801bc9e:	d505      	bpl.n	801bcac <_fwalk_reent+0x24>
 801bca0:	6824      	ldr	r4, [r4, #0]
 801bca2:	2c00      	cmp	r4, #0
 801bca4:	d1f7      	bne.n	801bc96 <_fwalk_reent+0xe>
 801bca6:	4638      	mov	r0, r7
 801bca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcac:	89ab      	ldrh	r3, [r5, #12]
 801bcae:	2b01      	cmp	r3, #1
 801bcb0:	d907      	bls.n	801bcc2 <_fwalk_reent+0x3a>
 801bcb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bcb6:	3301      	adds	r3, #1
 801bcb8:	d003      	beq.n	801bcc2 <_fwalk_reent+0x3a>
 801bcba:	4629      	mov	r1, r5
 801bcbc:	4630      	mov	r0, r6
 801bcbe:	47c0      	blx	r8
 801bcc0:	4307      	orrs	r7, r0
 801bcc2:	3568      	adds	r5, #104	; 0x68
 801bcc4:	e7e9      	b.n	801bc9a <_fwalk_reent+0x12>

0801bcc6 <__retarget_lock_init_recursive>:
 801bcc6:	4770      	bx	lr

0801bcc8 <__retarget_lock_acquire_recursive>:
 801bcc8:	4770      	bx	lr

0801bcca <__retarget_lock_release_recursive>:
 801bcca:	4770      	bx	lr

0801bccc <memmove>:
 801bccc:	4288      	cmp	r0, r1
 801bcce:	b510      	push	{r4, lr}
 801bcd0:	eb01 0402 	add.w	r4, r1, r2
 801bcd4:	d902      	bls.n	801bcdc <memmove+0x10>
 801bcd6:	4284      	cmp	r4, r0
 801bcd8:	4623      	mov	r3, r4
 801bcda:	d807      	bhi.n	801bcec <memmove+0x20>
 801bcdc:	1e43      	subs	r3, r0, #1
 801bcde:	42a1      	cmp	r1, r4
 801bce0:	d008      	beq.n	801bcf4 <memmove+0x28>
 801bce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcea:	e7f8      	b.n	801bcde <memmove+0x12>
 801bcec:	4402      	add	r2, r0
 801bcee:	4601      	mov	r1, r0
 801bcf0:	428a      	cmp	r2, r1
 801bcf2:	d100      	bne.n	801bcf6 <memmove+0x2a>
 801bcf4:	bd10      	pop	{r4, pc}
 801bcf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bcfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bcfe:	e7f7      	b.n	801bcf0 <memmove+0x24>

0801bd00 <__malloc_lock>:
 801bd00:	4801      	ldr	r0, [pc, #4]	; (801bd08 <__malloc_lock+0x8>)
 801bd02:	f7ff bfe1 	b.w	801bcc8 <__retarget_lock_acquire_recursive>
 801bd06:	bf00      	nop
 801bd08:	2400323c 	.word	0x2400323c

0801bd0c <__malloc_unlock>:
 801bd0c:	4801      	ldr	r0, [pc, #4]	; (801bd14 <__malloc_unlock+0x8>)
 801bd0e:	f7ff bfdc 	b.w	801bcca <__retarget_lock_release_recursive>
 801bd12:	bf00      	nop
 801bd14:	2400323c 	.word	0x2400323c

0801bd18 <_realloc_r>:
 801bd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd1c:	4680      	mov	r8, r0
 801bd1e:	4614      	mov	r4, r2
 801bd20:	460e      	mov	r6, r1
 801bd22:	b921      	cbnz	r1, 801bd2e <_realloc_r+0x16>
 801bd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd28:	4611      	mov	r1, r2
 801bd2a:	f7fe bfbf 	b.w	801acac <_malloc_r>
 801bd2e:	b92a      	cbnz	r2, 801bd3c <_realloc_r+0x24>
 801bd30:	f7fe ff50 	bl	801abd4 <_free_r>
 801bd34:	4625      	mov	r5, r4
 801bd36:	4628      	mov	r0, r5
 801bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd3c:	f000 faa0 	bl	801c280 <_malloc_usable_size_r>
 801bd40:	4284      	cmp	r4, r0
 801bd42:	4607      	mov	r7, r0
 801bd44:	d802      	bhi.n	801bd4c <_realloc_r+0x34>
 801bd46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bd4a:	d812      	bhi.n	801bd72 <_realloc_r+0x5a>
 801bd4c:	4621      	mov	r1, r4
 801bd4e:	4640      	mov	r0, r8
 801bd50:	f7fe ffac 	bl	801acac <_malloc_r>
 801bd54:	4605      	mov	r5, r0
 801bd56:	2800      	cmp	r0, #0
 801bd58:	d0ed      	beq.n	801bd36 <_realloc_r+0x1e>
 801bd5a:	42bc      	cmp	r4, r7
 801bd5c:	4622      	mov	r2, r4
 801bd5e:	4631      	mov	r1, r6
 801bd60:	bf28      	it	cs
 801bd62:	463a      	movcs	r2, r7
 801bd64:	f7fb fb50 	bl	8017408 <memcpy>
 801bd68:	4631      	mov	r1, r6
 801bd6a:	4640      	mov	r0, r8
 801bd6c:	f7fe ff32 	bl	801abd4 <_free_r>
 801bd70:	e7e1      	b.n	801bd36 <_realloc_r+0x1e>
 801bd72:	4635      	mov	r5, r6
 801bd74:	e7df      	b.n	801bd36 <_realloc_r+0x1e>

0801bd76 <__sfputc_r>:
 801bd76:	6893      	ldr	r3, [r2, #8]
 801bd78:	3b01      	subs	r3, #1
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	b410      	push	{r4}
 801bd7e:	6093      	str	r3, [r2, #8]
 801bd80:	da08      	bge.n	801bd94 <__sfputc_r+0x1e>
 801bd82:	6994      	ldr	r4, [r2, #24]
 801bd84:	42a3      	cmp	r3, r4
 801bd86:	db01      	blt.n	801bd8c <__sfputc_r+0x16>
 801bd88:	290a      	cmp	r1, #10
 801bd8a:	d103      	bne.n	801bd94 <__sfputc_r+0x1e>
 801bd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd90:	f000 b94a 	b.w	801c028 <__swbuf_r>
 801bd94:	6813      	ldr	r3, [r2, #0]
 801bd96:	1c58      	adds	r0, r3, #1
 801bd98:	6010      	str	r0, [r2, #0]
 801bd9a:	7019      	strb	r1, [r3, #0]
 801bd9c:	4608      	mov	r0, r1
 801bd9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bda2:	4770      	bx	lr

0801bda4 <__sfputs_r>:
 801bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bda6:	4606      	mov	r6, r0
 801bda8:	460f      	mov	r7, r1
 801bdaa:	4614      	mov	r4, r2
 801bdac:	18d5      	adds	r5, r2, r3
 801bdae:	42ac      	cmp	r4, r5
 801bdb0:	d101      	bne.n	801bdb6 <__sfputs_r+0x12>
 801bdb2:	2000      	movs	r0, #0
 801bdb4:	e007      	b.n	801bdc6 <__sfputs_r+0x22>
 801bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdba:	463a      	mov	r2, r7
 801bdbc:	4630      	mov	r0, r6
 801bdbe:	f7ff ffda 	bl	801bd76 <__sfputc_r>
 801bdc2:	1c43      	adds	r3, r0, #1
 801bdc4:	d1f3      	bne.n	801bdae <__sfputs_r+0xa>
 801bdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bdc8 <_vfiprintf_r>:
 801bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdcc:	460d      	mov	r5, r1
 801bdce:	b09d      	sub	sp, #116	; 0x74
 801bdd0:	4614      	mov	r4, r2
 801bdd2:	4698      	mov	r8, r3
 801bdd4:	4606      	mov	r6, r0
 801bdd6:	b118      	cbz	r0, 801bde0 <_vfiprintf_r+0x18>
 801bdd8:	6983      	ldr	r3, [r0, #24]
 801bdda:	b90b      	cbnz	r3, 801bde0 <_vfiprintf_r+0x18>
 801bddc:	f7ff fec4 	bl	801bb68 <__sinit>
 801bde0:	4b89      	ldr	r3, [pc, #548]	; (801c008 <_vfiprintf_r+0x240>)
 801bde2:	429d      	cmp	r5, r3
 801bde4:	d11b      	bne.n	801be1e <_vfiprintf_r+0x56>
 801bde6:	6875      	ldr	r5, [r6, #4]
 801bde8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bdea:	07d9      	lsls	r1, r3, #31
 801bdec:	d405      	bmi.n	801bdfa <_vfiprintf_r+0x32>
 801bdee:	89ab      	ldrh	r3, [r5, #12]
 801bdf0:	059a      	lsls	r2, r3, #22
 801bdf2:	d402      	bmi.n	801bdfa <_vfiprintf_r+0x32>
 801bdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bdf6:	f7ff ff67 	bl	801bcc8 <__retarget_lock_acquire_recursive>
 801bdfa:	89ab      	ldrh	r3, [r5, #12]
 801bdfc:	071b      	lsls	r3, r3, #28
 801bdfe:	d501      	bpl.n	801be04 <_vfiprintf_r+0x3c>
 801be00:	692b      	ldr	r3, [r5, #16]
 801be02:	b9eb      	cbnz	r3, 801be40 <_vfiprintf_r+0x78>
 801be04:	4629      	mov	r1, r5
 801be06:	4630      	mov	r0, r6
 801be08:	f000 f960 	bl	801c0cc <__swsetup_r>
 801be0c:	b1c0      	cbz	r0, 801be40 <_vfiprintf_r+0x78>
 801be0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be10:	07dc      	lsls	r4, r3, #31
 801be12:	d50e      	bpl.n	801be32 <_vfiprintf_r+0x6a>
 801be14:	f04f 30ff 	mov.w	r0, #4294967295
 801be18:	b01d      	add	sp, #116	; 0x74
 801be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be1e:	4b7b      	ldr	r3, [pc, #492]	; (801c00c <_vfiprintf_r+0x244>)
 801be20:	429d      	cmp	r5, r3
 801be22:	d101      	bne.n	801be28 <_vfiprintf_r+0x60>
 801be24:	68b5      	ldr	r5, [r6, #8]
 801be26:	e7df      	b.n	801bde8 <_vfiprintf_r+0x20>
 801be28:	4b79      	ldr	r3, [pc, #484]	; (801c010 <_vfiprintf_r+0x248>)
 801be2a:	429d      	cmp	r5, r3
 801be2c:	bf08      	it	eq
 801be2e:	68f5      	ldreq	r5, [r6, #12]
 801be30:	e7da      	b.n	801bde8 <_vfiprintf_r+0x20>
 801be32:	89ab      	ldrh	r3, [r5, #12]
 801be34:	0598      	lsls	r0, r3, #22
 801be36:	d4ed      	bmi.n	801be14 <_vfiprintf_r+0x4c>
 801be38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be3a:	f7ff ff46 	bl	801bcca <__retarget_lock_release_recursive>
 801be3e:	e7e9      	b.n	801be14 <_vfiprintf_r+0x4c>
 801be40:	2300      	movs	r3, #0
 801be42:	9309      	str	r3, [sp, #36]	; 0x24
 801be44:	2320      	movs	r3, #32
 801be46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801be4e:	2330      	movs	r3, #48	; 0x30
 801be50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c014 <_vfiprintf_r+0x24c>
 801be54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be58:	f04f 0901 	mov.w	r9, #1
 801be5c:	4623      	mov	r3, r4
 801be5e:	469a      	mov	sl, r3
 801be60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be64:	b10a      	cbz	r2, 801be6a <_vfiprintf_r+0xa2>
 801be66:	2a25      	cmp	r2, #37	; 0x25
 801be68:	d1f9      	bne.n	801be5e <_vfiprintf_r+0x96>
 801be6a:	ebba 0b04 	subs.w	fp, sl, r4
 801be6e:	d00b      	beq.n	801be88 <_vfiprintf_r+0xc0>
 801be70:	465b      	mov	r3, fp
 801be72:	4622      	mov	r2, r4
 801be74:	4629      	mov	r1, r5
 801be76:	4630      	mov	r0, r6
 801be78:	f7ff ff94 	bl	801bda4 <__sfputs_r>
 801be7c:	3001      	adds	r0, #1
 801be7e:	f000 80aa 	beq.w	801bfd6 <_vfiprintf_r+0x20e>
 801be82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be84:	445a      	add	r2, fp
 801be86:	9209      	str	r2, [sp, #36]	; 0x24
 801be88:	f89a 3000 	ldrb.w	r3, [sl]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	f000 80a2 	beq.w	801bfd6 <_vfiprintf_r+0x20e>
 801be92:	2300      	movs	r3, #0
 801be94:	f04f 32ff 	mov.w	r2, #4294967295
 801be98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be9c:	f10a 0a01 	add.w	sl, sl, #1
 801bea0:	9304      	str	r3, [sp, #16]
 801bea2:	9307      	str	r3, [sp, #28]
 801bea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bea8:	931a      	str	r3, [sp, #104]	; 0x68
 801beaa:	4654      	mov	r4, sl
 801beac:	2205      	movs	r2, #5
 801beae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801beb2:	4858      	ldr	r0, [pc, #352]	; (801c014 <_vfiprintf_r+0x24c>)
 801beb4:	f7e4 fa44 	bl	8000340 <memchr>
 801beb8:	9a04      	ldr	r2, [sp, #16]
 801beba:	b9d8      	cbnz	r0, 801bef4 <_vfiprintf_r+0x12c>
 801bebc:	06d1      	lsls	r1, r2, #27
 801bebe:	bf44      	itt	mi
 801bec0:	2320      	movmi	r3, #32
 801bec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bec6:	0713      	lsls	r3, r2, #28
 801bec8:	bf44      	itt	mi
 801beca:	232b      	movmi	r3, #43	; 0x2b
 801becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bed0:	f89a 3000 	ldrb.w	r3, [sl]
 801bed4:	2b2a      	cmp	r3, #42	; 0x2a
 801bed6:	d015      	beq.n	801bf04 <_vfiprintf_r+0x13c>
 801bed8:	9a07      	ldr	r2, [sp, #28]
 801beda:	4654      	mov	r4, sl
 801bedc:	2000      	movs	r0, #0
 801bede:	f04f 0c0a 	mov.w	ip, #10
 801bee2:	4621      	mov	r1, r4
 801bee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bee8:	3b30      	subs	r3, #48	; 0x30
 801beea:	2b09      	cmp	r3, #9
 801beec:	d94e      	bls.n	801bf8c <_vfiprintf_r+0x1c4>
 801beee:	b1b0      	cbz	r0, 801bf1e <_vfiprintf_r+0x156>
 801bef0:	9207      	str	r2, [sp, #28]
 801bef2:	e014      	b.n	801bf1e <_vfiprintf_r+0x156>
 801bef4:	eba0 0308 	sub.w	r3, r0, r8
 801bef8:	fa09 f303 	lsl.w	r3, r9, r3
 801befc:	4313      	orrs	r3, r2
 801befe:	9304      	str	r3, [sp, #16]
 801bf00:	46a2      	mov	sl, r4
 801bf02:	e7d2      	b.n	801beaa <_vfiprintf_r+0xe2>
 801bf04:	9b03      	ldr	r3, [sp, #12]
 801bf06:	1d19      	adds	r1, r3, #4
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	9103      	str	r1, [sp, #12]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	bfbb      	ittet	lt
 801bf10:	425b      	neglt	r3, r3
 801bf12:	f042 0202 	orrlt.w	r2, r2, #2
 801bf16:	9307      	strge	r3, [sp, #28]
 801bf18:	9307      	strlt	r3, [sp, #28]
 801bf1a:	bfb8      	it	lt
 801bf1c:	9204      	strlt	r2, [sp, #16]
 801bf1e:	7823      	ldrb	r3, [r4, #0]
 801bf20:	2b2e      	cmp	r3, #46	; 0x2e
 801bf22:	d10c      	bne.n	801bf3e <_vfiprintf_r+0x176>
 801bf24:	7863      	ldrb	r3, [r4, #1]
 801bf26:	2b2a      	cmp	r3, #42	; 0x2a
 801bf28:	d135      	bne.n	801bf96 <_vfiprintf_r+0x1ce>
 801bf2a:	9b03      	ldr	r3, [sp, #12]
 801bf2c:	1d1a      	adds	r2, r3, #4
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	9203      	str	r2, [sp, #12]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	bfb8      	it	lt
 801bf36:	f04f 33ff 	movlt.w	r3, #4294967295
 801bf3a:	3402      	adds	r4, #2
 801bf3c:	9305      	str	r3, [sp, #20]
 801bf3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c024 <_vfiprintf_r+0x25c>
 801bf42:	7821      	ldrb	r1, [r4, #0]
 801bf44:	2203      	movs	r2, #3
 801bf46:	4650      	mov	r0, sl
 801bf48:	f7e4 f9fa 	bl	8000340 <memchr>
 801bf4c:	b140      	cbz	r0, 801bf60 <_vfiprintf_r+0x198>
 801bf4e:	2340      	movs	r3, #64	; 0x40
 801bf50:	eba0 000a 	sub.w	r0, r0, sl
 801bf54:	fa03 f000 	lsl.w	r0, r3, r0
 801bf58:	9b04      	ldr	r3, [sp, #16]
 801bf5a:	4303      	orrs	r3, r0
 801bf5c:	3401      	adds	r4, #1
 801bf5e:	9304      	str	r3, [sp, #16]
 801bf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf64:	482c      	ldr	r0, [pc, #176]	; (801c018 <_vfiprintf_r+0x250>)
 801bf66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf6a:	2206      	movs	r2, #6
 801bf6c:	f7e4 f9e8 	bl	8000340 <memchr>
 801bf70:	2800      	cmp	r0, #0
 801bf72:	d03f      	beq.n	801bff4 <_vfiprintf_r+0x22c>
 801bf74:	4b29      	ldr	r3, [pc, #164]	; (801c01c <_vfiprintf_r+0x254>)
 801bf76:	bb1b      	cbnz	r3, 801bfc0 <_vfiprintf_r+0x1f8>
 801bf78:	9b03      	ldr	r3, [sp, #12]
 801bf7a:	3307      	adds	r3, #7
 801bf7c:	f023 0307 	bic.w	r3, r3, #7
 801bf80:	3308      	adds	r3, #8
 801bf82:	9303      	str	r3, [sp, #12]
 801bf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf86:	443b      	add	r3, r7
 801bf88:	9309      	str	r3, [sp, #36]	; 0x24
 801bf8a:	e767      	b.n	801be5c <_vfiprintf_r+0x94>
 801bf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf90:	460c      	mov	r4, r1
 801bf92:	2001      	movs	r0, #1
 801bf94:	e7a5      	b.n	801bee2 <_vfiprintf_r+0x11a>
 801bf96:	2300      	movs	r3, #0
 801bf98:	3401      	adds	r4, #1
 801bf9a:	9305      	str	r3, [sp, #20]
 801bf9c:	4619      	mov	r1, r3
 801bf9e:	f04f 0c0a 	mov.w	ip, #10
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfa8:	3a30      	subs	r2, #48	; 0x30
 801bfaa:	2a09      	cmp	r2, #9
 801bfac:	d903      	bls.n	801bfb6 <_vfiprintf_r+0x1ee>
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d0c5      	beq.n	801bf3e <_vfiprintf_r+0x176>
 801bfb2:	9105      	str	r1, [sp, #20]
 801bfb4:	e7c3      	b.n	801bf3e <_vfiprintf_r+0x176>
 801bfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfba:	4604      	mov	r4, r0
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	e7f0      	b.n	801bfa2 <_vfiprintf_r+0x1da>
 801bfc0:	ab03      	add	r3, sp, #12
 801bfc2:	9300      	str	r3, [sp, #0]
 801bfc4:	462a      	mov	r2, r5
 801bfc6:	4b16      	ldr	r3, [pc, #88]	; (801c020 <_vfiprintf_r+0x258>)
 801bfc8:	a904      	add	r1, sp, #16
 801bfca:	4630      	mov	r0, r6
 801bfcc:	f7fb fac4 	bl	8017558 <_printf_float>
 801bfd0:	4607      	mov	r7, r0
 801bfd2:	1c78      	adds	r0, r7, #1
 801bfd4:	d1d6      	bne.n	801bf84 <_vfiprintf_r+0x1bc>
 801bfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bfd8:	07d9      	lsls	r1, r3, #31
 801bfda:	d405      	bmi.n	801bfe8 <_vfiprintf_r+0x220>
 801bfdc:	89ab      	ldrh	r3, [r5, #12]
 801bfde:	059a      	lsls	r2, r3, #22
 801bfe0:	d402      	bmi.n	801bfe8 <_vfiprintf_r+0x220>
 801bfe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bfe4:	f7ff fe71 	bl	801bcca <__retarget_lock_release_recursive>
 801bfe8:	89ab      	ldrh	r3, [r5, #12]
 801bfea:	065b      	lsls	r3, r3, #25
 801bfec:	f53f af12 	bmi.w	801be14 <_vfiprintf_r+0x4c>
 801bff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bff2:	e711      	b.n	801be18 <_vfiprintf_r+0x50>
 801bff4:	ab03      	add	r3, sp, #12
 801bff6:	9300      	str	r3, [sp, #0]
 801bff8:	462a      	mov	r2, r5
 801bffa:	4b09      	ldr	r3, [pc, #36]	; (801c020 <_vfiprintf_r+0x258>)
 801bffc:	a904      	add	r1, sp, #16
 801bffe:	4630      	mov	r0, r6
 801c000:	f7fb fd36 	bl	8017a70 <_printf_i>
 801c004:	e7e4      	b.n	801bfd0 <_vfiprintf_r+0x208>
 801c006:	bf00      	nop
 801c008:	0801ca8c 	.word	0x0801ca8c
 801c00c:	0801caac 	.word	0x0801caac
 801c010:	0801ca6c 	.word	0x0801ca6c
 801c014:	0801ca04 	.word	0x0801ca04
 801c018:	0801ca0e 	.word	0x0801ca0e
 801c01c:	08017559 	.word	0x08017559
 801c020:	0801bda5 	.word	0x0801bda5
 801c024:	0801ca0a 	.word	0x0801ca0a

0801c028 <__swbuf_r>:
 801c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c02a:	460e      	mov	r6, r1
 801c02c:	4614      	mov	r4, r2
 801c02e:	4605      	mov	r5, r0
 801c030:	b118      	cbz	r0, 801c03a <__swbuf_r+0x12>
 801c032:	6983      	ldr	r3, [r0, #24]
 801c034:	b90b      	cbnz	r3, 801c03a <__swbuf_r+0x12>
 801c036:	f7ff fd97 	bl	801bb68 <__sinit>
 801c03a:	4b21      	ldr	r3, [pc, #132]	; (801c0c0 <__swbuf_r+0x98>)
 801c03c:	429c      	cmp	r4, r3
 801c03e:	d12b      	bne.n	801c098 <__swbuf_r+0x70>
 801c040:	686c      	ldr	r4, [r5, #4]
 801c042:	69a3      	ldr	r3, [r4, #24]
 801c044:	60a3      	str	r3, [r4, #8]
 801c046:	89a3      	ldrh	r3, [r4, #12]
 801c048:	071a      	lsls	r2, r3, #28
 801c04a:	d52f      	bpl.n	801c0ac <__swbuf_r+0x84>
 801c04c:	6923      	ldr	r3, [r4, #16]
 801c04e:	b36b      	cbz	r3, 801c0ac <__swbuf_r+0x84>
 801c050:	6923      	ldr	r3, [r4, #16]
 801c052:	6820      	ldr	r0, [r4, #0]
 801c054:	1ac0      	subs	r0, r0, r3
 801c056:	6963      	ldr	r3, [r4, #20]
 801c058:	b2f6      	uxtb	r6, r6
 801c05a:	4283      	cmp	r3, r0
 801c05c:	4637      	mov	r7, r6
 801c05e:	dc04      	bgt.n	801c06a <__swbuf_r+0x42>
 801c060:	4621      	mov	r1, r4
 801c062:	4628      	mov	r0, r5
 801c064:	f7ff fcec 	bl	801ba40 <_fflush_r>
 801c068:	bb30      	cbnz	r0, 801c0b8 <__swbuf_r+0x90>
 801c06a:	68a3      	ldr	r3, [r4, #8]
 801c06c:	3b01      	subs	r3, #1
 801c06e:	60a3      	str	r3, [r4, #8]
 801c070:	6823      	ldr	r3, [r4, #0]
 801c072:	1c5a      	adds	r2, r3, #1
 801c074:	6022      	str	r2, [r4, #0]
 801c076:	701e      	strb	r6, [r3, #0]
 801c078:	6963      	ldr	r3, [r4, #20]
 801c07a:	3001      	adds	r0, #1
 801c07c:	4283      	cmp	r3, r0
 801c07e:	d004      	beq.n	801c08a <__swbuf_r+0x62>
 801c080:	89a3      	ldrh	r3, [r4, #12]
 801c082:	07db      	lsls	r3, r3, #31
 801c084:	d506      	bpl.n	801c094 <__swbuf_r+0x6c>
 801c086:	2e0a      	cmp	r6, #10
 801c088:	d104      	bne.n	801c094 <__swbuf_r+0x6c>
 801c08a:	4621      	mov	r1, r4
 801c08c:	4628      	mov	r0, r5
 801c08e:	f7ff fcd7 	bl	801ba40 <_fflush_r>
 801c092:	b988      	cbnz	r0, 801c0b8 <__swbuf_r+0x90>
 801c094:	4638      	mov	r0, r7
 801c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c098:	4b0a      	ldr	r3, [pc, #40]	; (801c0c4 <__swbuf_r+0x9c>)
 801c09a:	429c      	cmp	r4, r3
 801c09c:	d101      	bne.n	801c0a2 <__swbuf_r+0x7a>
 801c09e:	68ac      	ldr	r4, [r5, #8]
 801c0a0:	e7cf      	b.n	801c042 <__swbuf_r+0x1a>
 801c0a2:	4b09      	ldr	r3, [pc, #36]	; (801c0c8 <__swbuf_r+0xa0>)
 801c0a4:	429c      	cmp	r4, r3
 801c0a6:	bf08      	it	eq
 801c0a8:	68ec      	ldreq	r4, [r5, #12]
 801c0aa:	e7ca      	b.n	801c042 <__swbuf_r+0x1a>
 801c0ac:	4621      	mov	r1, r4
 801c0ae:	4628      	mov	r0, r5
 801c0b0:	f000 f80c 	bl	801c0cc <__swsetup_r>
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	d0cb      	beq.n	801c050 <__swbuf_r+0x28>
 801c0b8:	f04f 37ff 	mov.w	r7, #4294967295
 801c0bc:	e7ea      	b.n	801c094 <__swbuf_r+0x6c>
 801c0be:	bf00      	nop
 801c0c0:	0801ca8c 	.word	0x0801ca8c
 801c0c4:	0801caac 	.word	0x0801caac
 801c0c8:	0801ca6c 	.word	0x0801ca6c

0801c0cc <__swsetup_r>:
 801c0cc:	4b32      	ldr	r3, [pc, #200]	; (801c198 <__swsetup_r+0xcc>)
 801c0ce:	b570      	push	{r4, r5, r6, lr}
 801c0d0:	681d      	ldr	r5, [r3, #0]
 801c0d2:	4606      	mov	r6, r0
 801c0d4:	460c      	mov	r4, r1
 801c0d6:	b125      	cbz	r5, 801c0e2 <__swsetup_r+0x16>
 801c0d8:	69ab      	ldr	r3, [r5, #24]
 801c0da:	b913      	cbnz	r3, 801c0e2 <__swsetup_r+0x16>
 801c0dc:	4628      	mov	r0, r5
 801c0de:	f7ff fd43 	bl	801bb68 <__sinit>
 801c0e2:	4b2e      	ldr	r3, [pc, #184]	; (801c19c <__swsetup_r+0xd0>)
 801c0e4:	429c      	cmp	r4, r3
 801c0e6:	d10f      	bne.n	801c108 <__swsetup_r+0x3c>
 801c0e8:	686c      	ldr	r4, [r5, #4]
 801c0ea:	89a3      	ldrh	r3, [r4, #12]
 801c0ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c0f0:	0719      	lsls	r1, r3, #28
 801c0f2:	d42c      	bmi.n	801c14e <__swsetup_r+0x82>
 801c0f4:	06dd      	lsls	r5, r3, #27
 801c0f6:	d411      	bmi.n	801c11c <__swsetup_r+0x50>
 801c0f8:	2309      	movs	r3, #9
 801c0fa:	6033      	str	r3, [r6, #0]
 801c0fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c100:	81a3      	strh	r3, [r4, #12]
 801c102:	f04f 30ff 	mov.w	r0, #4294967295
 801c106:	e03e      	b.n	801c186 <__swsetup_r+0xba>
 801c108:	4b25      	ldr	r3, [pc, #148]	; (801c1a0 <__swsetup_r+0xd4>)
 801c10a:	429c      	cmp	r4, r3
 801c10c:	d101      	bne.n	801c112 <__swsetup_r+0x46>
 801c10e:	68ac      	ldr	r4, [r5, #8]
 801c110:	e7eb      	b.n	801c0ea <__swsetup_r+0x1e>
 801c112:	4b24      	ldr	r3, [pc, #144]	; (801c1a4 <__swsetup_r+0xd8>)
 801c114:	429c      	cmp	r4, r3
 801c116:	bf08      	it	eq
 801c118:	68ec      	ldreq	r4, [r5, #12]
 801c11a:	e7e6      	b.n	801c0ea <__swsetup_r+0x1e>
 801c11c:	0758      	lsls	r0, r3, #29
 801c11e:	d512      	bpl.n	801c146 <__swsetup_r+0x7a>
 801c120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c122:	b141      	cbz	r1, 801c136 <__swsetup_r+0x6a>
 801c124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c128:	4299      	cmp	r1, r3
 801c12a:	d002      	beq.n	801c132 <__swsetup_r+0x66>
 801c12c:	4630      	mov	r0, r6
 801c12e:	f7fe fd51 	bl	801abd4 <_free_r>
 801c132:	2300      	movs	r3, #0
 801c134:	6363      	str	r3, [r4, #52]	; 0x34
 801c136:	89a3      	ldrh	r3, [r4, #12]
 801c138:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c13c:	81a3      	strh	r3, [r4, #12]
 801c13e:	2300      	movs	r3, #0
 801c140:	6063      	str	r3, [r4, #4]
 801c142:	6923      	ldr	r3, [r4, #16]
 801c144:	6023      	str	r3, [r4, #0]
 801c146:	89a3      	ldrh	r3, [r4, #12]
 801c148:	f043 0308 	orr.w	r3, r3, #8
 801c14c:	81a3      	strh	r3, [r4, #12]
 801c14e:	6923      	ldr	r3, [r4, #16]
 801c150:	b94b      	cbnz	r3, 801c166 <__swsetup_r+0x9a>
 801c152:	89a3      	ldrh	r3, [r4, #12]
 801c154:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c15c:	d003      	beq.n	801c166 <__swsetup_r+0x9a>
 801c15e:	4621      	mov	r1, r4
 801c160:	4630      	mov	r0, r6
 801c162:	f000 f84d 	bl	801c200 <__smakebuf_r>
 801c166:	89a0      	ldrh	r0, [r4, #12]
 801c168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c16c:	f010 0301 	ands.w	r3, r0, #1
 801c170:	d00a      	beq.n	801c188 <__swsetup_r+0xbc>
 801c172:	2300      	movs	r3, #0
 801c174:	60a3      	str	r3, [r4, #8]
 801c176:	6963      	ldr	r3, [r4, #20]
 801c178:	425b      	negs	r3, r3
 801c17a:	61a3      	str	r3, [r4, #24]
 801c17c:	6923      	ldr	r3, [r4, #16]
 801c17e:	b943      	cbnz	r3, 801c192 <__swsetup_r+0xc6>
 801c180:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c184:	d1ba      	bne.n	801c0fc <__swsetup_r+0x30>
 801c186:	bd70      	pop	{r4, r5, r6, pc}
 801c188:	0781      	lsls	r1, r0, #30
 801c18a:	bf58      	it	pl
 801c18c:	6963      	ldrpl	r3, [r4, #20]
 801c18e:	60a3      	str	r3, [r4, #8]
 801c190:	e7f4      	b.n	801c17c <__swsetup_r+0xb0>
 801c192:	2000      	movs	r0, #0
 801c194:	e7f7      	b.n	801c186 <__swsetup_r+0xba>
 801c196:	bf00      	nop
 801c198:	24000100 	.word	0x24000100
 801c19c:	0801ca8c 	.word	0x0801ca8c
 801c1a0:	0801caac 	.word	0x0801caac
 801c1a4:	0801ca6c 	.word	0x0801ca6c

0801c1a8 <abort>:
 801c1a8:	b508      	push	{r3, lr}
 801c1aa:	2006      	movs	r0, #6
 801c1ac:	f000 f898 	bl	801c2e0 <raise>
 801c1b0:	2001      	movs	r0, #1
 801c1b2:	f7e7 fca9 	bl	8003b08 <_exit>

0801c1b6 <__swhatbuf_r>:
 801c1b6:	b570      	push	{r4, r5, r6, lr}
 801c1b8:	460e      	mov	r6, r1
 801c1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1be:	2900      	cmp	r1, #0
 801c1c0:	b096      	sub	sp, #88	; 0x58
 801c1c2:	4614      	mov	r4, r2
 801c1c4:	461d      	mov	r5, r3
 801c1c6:	da08      	bge.n	801c1da <__swhatbuf_r+0x24>
 801c1c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	602a      	str	r2, [r5, #0]
 801c1d0:	061a      	lsls	r2, r3, #24
 801c1d2:	d410      	bmi.n	801c1f6 <__swhatbuf_r+0x40>
 801c1d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c1d8:	e00e      	b.n	801c1f8 <__swhatbuf_r+0x42>
 801c1da:	466a      	mov	r2, sp
 801c1dc:	f000 f89c 	bl	801c318 <_fstat_r>
 801c1e0:	2800      	cmp	r0, #0
 801c1e2:	dbf1      	blt.n	801c1c8 <__swhatbuf_r+0x12>
 801c1e4:	9a01      	ldr	r2, [sp, #4]
 801c1e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c1ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c1ee:	425a      	negs	r2, r3
 801c1f0:	415a      	adcs	r2, r3
 801c1f2:	602a      	str	r2, [r5, #0]
 801c1f4:	e7ee      	b.n	801c1d4 <__swhatbuf_r+0x1e>
 801c1f6:	2340      	movs	r3, #64	; 0x40
 801c1f8:	2000      	movs	r0, #0
 801c1fa:	6023      	str	r3, [r4, #0]
 801c1fc:	b016      	add	sp, #88	; 0x58
 801c1fe:	bd70      	pop	{r4, r5, r6, pc}

0801c200 <__smakebuf_r>:
 801c200:	898b      	ldrh	r3, [r1, #12]
 801c202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c204:	079d      	lsls	r5, r3, #30
 801c206:	4606      	mov	r6, r0
 801c208:	460c      	mov	r4, r1
 801c20a:	d507      	bpl.n	801c21c <__smakebuf_r+0x1c>
 801c20c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c210:	6023      	str	r3, [r4, #0]
 801c212:	6123      	str	r3, [r4, #16]
 801c214:	2301      	movs	r3, #1
 801c216:	6163      	str	r3, [r4, #20]
 801c218:	b002      	add	sp, #8
 801c21a:	bd70      	pop	{r4, r5, r6, pc}
 801c21c:	ab01      	add	r3, sp, #4
 801c21e:	466a      	mov	r2, sp
 801c220:	f7ff ffc9 	bl	801c1b6 <__swhatbuf_r>
 801c224:	9900      	ldr	r1, [sp, #0]
 801c226:	4605      	mov	r5, r0
 801c228:	4630      	mov	r0, r6
 801c22a:	f7fe fd3f 	bl	801acac <_malloc_r>
 801c22e:	b948      	cbnz	r0, 801c244 <__smakebuf_r+0x44>
 801c230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c234:	059a      	lsls	r2, r3, #22
 801c236:	d4ef      	bmi.n	801c218 <__smakebuf_r+0x18>
 801c238:	f023 0303 	bic.w	r3, r3, #3
 801c23c:	f043 0302 	orr.w	r3, r3, #2
 801c240:	81a3      	strh	r3, [r4, #12]
 801c242:	e7e3      	b.n	801c20c <__smakebuf_r+0xc>
 801c244:	4b0d      	ldr	r3, [pc, #52]	; (801c27c <__smakebuf_r+0x7c>)
 801c246:	62b3      	str	r3, [r6, #40]	; 0x28
 801c248:	89a3      	ldrh	r3, [r4, #12]
 801c24a:	6020      	str	r0, [r4, #0]
 801c24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c250:	81a3      	strh	r3, [r4, #12]
 801c252:	9b00      	ldr	r3, [sp, #0]
 801c254:	6163      	str	r3, [r4, #20]
 801c256:	9b01      	ldr	r3, [sp, #4]
 801c258:	6120      	str	r0, [r4, #16]
 801c25a:	b15b      	cbz	r3, 801c274 <__smakebuf_r+0x74>
 801c25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c260:	4630      	mov	r0, r6
 801c262:	f000 f86b 	bl	801c33c <_isatty_r>
 801c266:	b128      	cbz	r0, 801c274 <__smakebuf_r+0x74>
 801c268:	89a3      	ldrh	r3, [r4, #12]
 801c26a:	f023 0303 	bic.w	r3, r3, #3
 801c26e:	f043 0301 	orr.w	r3, r3, #1
 801c272:	81a3      	strh	r3, [r4, #12]
 801c274:	89a0      	ldrh	r0, [r4, #12]
 801c276:	4305      	orrs	r5, r0
 801c278:	81a5      	strh	r5, [r4, #12]
 801c27a:	e7cd      	b.n	801c218 <__smakebuf_r+0x18>
 801c27c:	0801bb01 	.word	0x0801bb01

0801c280 <_malloc_usable_size_r>:
 801c280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c284:	1f18      	subs	r0, r3, #4
 801c286:	2b00      	cmp	r3, #0
 801c288:	bfbc      	itt	lt
 801c28a:	580b      	ldrlt	r3, [r1, r0]
 801c28c:	18c0      	addlt	r0, r0, r3
 801c28e:	4770      	bx	lr

0801c290 <_raise_r>:
 801c290:	291f      	cmp	r1, #31
 801c292:	b538      	push	{r3, r4, r5, lr}
 801c294:	4604      	mov	r4, r0
 801c296:	460d      	mov	r5, r1
 801c298:	d904      	bls.n	801c2a4 <_raise_r+0x14>
 801c29a:	2316      	movs	r3, #22
 801c29c:	6003      	str	r3, [r0, #0]
 801c29e:	f04f 30ff 	mov.w	r0, #4294967295
 801c2a2:	bd38      	pop	{r3, r4, r5, pc}
 801c2a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c2a6:	b112      	cbz	r2, 801c2ae <_raise_r+0x1e>
 801c2a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c2ac:	b94b      	cbnz	r3, 801c2c2 <_raise_r+0x32>
 801c2ae:	4620      	mov	r0, r4
 801c2b0:	f000 f830 	bl	801c314 <_getpid_r>
 801c2b4:	462a      	mov	r2, r5
 801c2b6:	4601      	mov	r1, r0
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2be:	f000 b817 	b.w	801c2f0 <_kill_r>
 801c2c2:	2b01      	cmp	r3, #1
 801c2c4:	d00a      	beq.n	801c2dc <_raise_r+0x4c>
 801c2c6:	1c59      	adds	r1, r3, #1
 801c2c8:	d103      	bne.n	801c2d2 <_raise_r+0x42>
 801c2ca:	2316      	movs	r3, #22
 801c2cc:	6003      	str	r3, [r0, #0]
 801c2ce:	2001      	movs	r0, #1
 801c2d0:	e7e7      	b.n	801c2a2 <_raise_r+0x12>
 801c2d2:	2400      	movs	r4, #0
 801c2d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c2d8:	4628      	mov	r0, r5
 801c2da:	4798      	blx	r3
 801c2dc:	2000      	movs	r0, #0
 801c2de:	e7e0      	b.n	801c2a2 <_raise_r+0x12>

0801c2e0 <raise>:
 801c2e0:	4b02      	ldr	r3, [pc, #8]	; (801c2ec <raise+0xc>)
 801c2e2:	4601      	mov	r1, r0
 801c2e4:	6818      	ldr	r0, [r3, #0]
 801c2e6:	f7ff bfd3 	b.w	801c290 <_raise_r>
 801c2ea:	bf00      	nop
 801c2ec:	24000100 	.word	0x24000100

0801c2f0 <_kill_r>:
 801c2f0:	b538      	push	{r3, r4, r5, lr}
 801c2f2:	4d07      	ldr	r5, [pc, #28]	; (801c310 <_kill_r+0x20>)
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	4604      	mov	r4, r0
 801c2f8:	4608      	mov	r0, r1
 801c2fa:	4611      	mov	r1, r2
 801c2fc:	602b      	str	r3, [r5, #0]
 801c2fe:	f7e7 fbf3 	bl	8003ae8 <_kill>
 801c302:	1c43      	adds	r3, r0, #1
 801c304:	d102      	bne.n	801c30c <_kill_r+0x1c>
 801c306:	682b      	ldr	r3, [r5, #0]
 801c308:	b103      	cbz	r3, 801c30c <_kill_r+0x1c>
 801c30a:	6023      	str	r3, [r4, #0]
 801c30c:	bd38      	pop	{r3, r4, r5, pc}
 801c30e:	bf00      	nop
 801c310:	24003238 	.word	0x24003238

0801c314 <_getpid_r>:
 801c314:	f7e7 bbe0 	b.w	8003ad8 <_getpid>

0801c318 <_fstat_r>:
 801c318:	b538      	push	{r3, r4, r5, lr}
 801c31a:	4d07      	ldr	r5, [pc, #28]	; (801c338 <_fstat_r+0x20>)
 801c31c:	2300      	movs	r3, #0
 801c31e:	4604      	mov	r4, r0
 801c320:	4608      	mov	r0, r1
 801c322:	4611      	mov	r1, r2
 801c324:	602b      	str	r3, [r5, #0]
 801c326:	f7e7 fc3e 	bl	8003ba6 <_fstat>
 801c32a:	1c43      	adds	r3, r0, #1
 801c32c:	d102      	bne.n	801c334 <_fstat_r+0x1c>
 801c32e:	682b      	ldr	r3, [r5, #0]
 801c330:	b103      	cbz	r3, 801c334 <_fstat_r+0x1c>
 801c332:	6023      	str	r3, [r4, #0]
 801c334:	bd38      	pop	{r3, r4, r5, pc}
 801c336:	bf00      	nop
 801c338:	24003238 	.word	0x24003238

0801c33c <_isatty_r>:
 801c33c:	b538      	push	{r3, r4, r5, lr}
 801c33e:	4d06      	ldr	r5, [pc, #24]	; (801c358 <_isatty_r+0x1c>)
 801c340:	2300      	movs	r3, #0
 801c342:	4604      	mov	r4, r0
 801c344:	4608      	mov	r0, r1
 801c346:	602b      	str	r3, [r5, #0]
 801c348:	f7e7 fc3d 	bl	8003bc6 <_isatty>
 801c34c:	1c43      	adds	r3, r0, #1
 801c34e:	d102      	bne.n	801c356 <_isatty_r+0x1a>
 801c350:	682b      	ldr	r3, [r5, #0]
 801c352:	b103      	cbz	r3, 801c356 <_isatty_r+0x1a>
 801c354:	6023      	str	r3, [r4, #0]
 801c356:	bd38      	pop	{r3, r4, r5, pc}
 801c358:	24003238 	.word	0x24003238

0801c35c <_init>:
 801c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c35e:	bf00      	nop
 801c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c362:	bc08      	pop	{r3}
 801c364:	469e      	mov	lr, r3
 801c366:	4770      	bx	lr

0801c368 <_fini>:
 801c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c36a:	bf00      	nop
 801c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c36e:	bc08      	pop	{r3}
 801c370:	469e      	mov	lr, r3
 801c372:	4770      	bx	lr
