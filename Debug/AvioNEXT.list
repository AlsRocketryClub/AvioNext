
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180e8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080183b8  080183b8  000283b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018780  08018780  00028780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018788  08018788  00028788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801878c  0801878c  0002878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018790  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  080188e0  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  080188e0  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000357b7  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  00065978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214c  00000000  00000000  0006e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a918  00000000  00000000  000ae631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42f  00000000  00000000  000e8f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c4  00000000  00000000  00266378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027263c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080183a0 	.word	0x080183a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	080183a0 	.word	0x080183a0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fca6 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa3c 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fa36 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc94 	bl	8008044 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc7c 	bl	8008044 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fa12 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fc07 	bl	800ef74 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc69 	bl	8008044 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc52 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f9e8 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9e2 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc40 	bl	8008044 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	0801856c 	.word	0x0801856c
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fda0 	bl	800f7fc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd9a 	bl	800f7fc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd94 	bl	800f7fc <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd8e 	bl	800f7fc <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0801856c 	.word	0x0801856c
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f993 	bl	8008044 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d ff29 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f91e 	bl	800ef74 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f980 	bl	8008044 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f963 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fef9 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fef3 	bl	800eb7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f951 	bl	8008044 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f87b 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f875 	bl	8008044 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f8af 	bl	80170d4 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fc4f 	bl	801682c <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	080183b8 	.word	0x080183b8
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0d0      	sub	sp, #320	; 0x140
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80010c2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 80010c4:	f7ff febc 	bl	8000e40 <LoRA_idle>
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010c8:	2012      	movs	r0, #18
 80010ca:	f7ff fe1d 	bl	8000d08 <LoRA_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 80010d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <LoRA_sendPacket+0x38>
 80010e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d033      	beq.n	8001154 <LoRA_sendPacket+0xa0>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80010ec:	f7ff ff7a 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80010f6:	e011      	b.n	800111c <LoRA_sendPacket+0x68>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80010f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010fc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001100:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fe23 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8001112:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800111c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001120:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	f7ff f8fd 	bl	8000324 <strlen>
 800112a:	4602      	mov	r2, r0
 800112c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001130:	429a      	cmp	r2, r3
 8001132:	d8e1      	bhi.n	80010f8 <LoRA_sendPacket+0x44>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001134:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001138:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f7ff f8f1 	bl	8000324 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2022      	movs	r0, #34	; 0x22
 800114a:	f7ff fe05 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 800114e:	f7ff ff57 	bl	8001000 <LoRA_endPacket>
 8001152:	e003      	b.n	800115c <LoRA_sendPacket+0xa8>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001154:	2185      	movs	r1, #133	; 0x85
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fdfe 	bl	8000d58 <LoRA_Write_Register>
	}
	char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
 800115c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001160:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001164:	f107 000c 	add.w	r0, r7, #12
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <LoRA_sendPacket+0xe4>)
 800116c:	f015 ffb2 	bl	80170d4 <siprintf>
	HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f002 fcb5 	bl	8003ae0 <HAL_Delay>
	CDC_Transmit_HS(sent, strlen(sent));
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f8d2 	bl	8000324 <strlen>
 8001180:	4602      	mov	r2, r0
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f015 fb4f 	bl	801682c <CDC_Transmit_HS>
}
 800118e:	bf00      	nop
 8001190:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	080183bc 	.word	0x080183bc

0800119c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2102      	movs	r1, #2
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <disarm+0xac>)
 80011aa:	f006 ff4b 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2104      	movs	r1, #4
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <disarm+0xac>)
 80011b4:	f006 ff46 	bl	8008044 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2102      	movs	r1, #2
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <disarm+0xb0>)
 80011be:	f006 ff41 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <disarm+0xb4>)
 80011ca:	f006 ff3b 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	481e      	ldr	r0, [pc, #120]	; (8001250 <disarm+0xb4>)
 80011d6:	f006 ff35 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e0:	481b      	ldr	r0, [pc, #108]	; (8001250 <disarm+0xb4>)
 80011e2:	f006 ff2f 	bl	8008044 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	481a      	ldr	r0, [pc, #104]	; (8001254 <disarm+0xb8>)
 80011ec:	f006 ff2a 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <disarm+0xbc>)
 80011f8:	f006 ff24 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001202:	4815      	ldr	r0, [pc, #84]	; (8001258 <disarm+0xbc>)
 8001204:	f006 ff1e 	bl	8008044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <disarm+0xbc>)
 8001210:	f006 ff18 	bl	8008044 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <disarm+0xc0>)
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <disarm+0xc0>)
 800121c:	2200      	movs	r2, #0
 800121e:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <disarm+0xc0>)
 8001222:	2200      	movs	r2, #0
 8001224:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 8001226:	f7ff fbb7 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <disarm+0xc4>)
 800122e:	461a      	mov	r2, r3
 8001230:	460b      	mov	r3, r1
 8001232:	cb03      	ldmia	r3!, {r0, r1}
 8001234:	6010      	str	r0, [r2, #0]
 8001236:	6051      	str	r1, [r2, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	7213      	strb	r3, [r2, #8]
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	58020000 	.word	0x58020000
 800124c:	58020400 	.word	0x58020400
 8001250:	58021400 	.word	0x58021400
 8001254:	58021800 	.word	0x58021800
 8001258:	58021000 	.word	0x58021000
 800125c:	24000b50 	.word	0x24000b50
 8001260:	080183c8 	.word	0x080183c8

08001264 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b0d1      	sub	sp, #324	; 0x144
 8001268:	af00      	add	r7, sp, #0
 800126a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800126e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001272:	6018      	str	r0, [r3, #0]
 8001274:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001278:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800127c:	6019      	str	r1, [r3, #0]
  int packet_length = LoRA_parsePacket();
 800127e:	f7ff fed8 	bl	8001032 <LoRA_parsePacket>
 8001282:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001286:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800128a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001294:	429a      	cmp	r2, r3
 8001296:	dc01      	bgt.n	800129c <recv_packet+0x38>
  {
    return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e043      	b.n	8001324 <recv_packet+0xc0>
  }
  if(packet_length){
 800129c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d03e      	beq.n	8001322 <recv_packet+0xbe>
    for(int i = 0; i < packet_length; i++){
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80012aa:	e011      	b.n	80012d0 <recv_packet+0x6c>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80012ac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012b4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	18d4      	adds	r4, r2, r3
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fd23 	bl	8000d08 <LoRA_Read_Register>
 80012c2:	4603      	mov	r3, r0
 80012c4:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012ca:	3301      	adds	r3, #1
 80012cc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80012d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80012d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbe7      	blt.n	80012ac <recv_packet+0x48>
    }
    LoRA_data[packet_length] = '\0';
 80012dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012e4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

    char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
 80012f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012f8:	f107 000c 	add.w	r0, r7, #12
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	490c      	ldr	r1, [pc, #48]	; (8001330 <recv_packet+0xcc>)
 8001300:	f015 fee8 	bl	80170d4 <siprintf>
    CDC_Transmit_HS(rec, strlen(rec));
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f80b 	bl	8000324 <strlen>
 800130e:	4602      	mov	r2, r0
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f015 fa88 	bl	801682c <CDC_Transmit_HS>
    return packet_length;
 800131c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001320:	e000      	b.n	8001324 <recv_packet+0xc0>
  }
  else{
    return 0;
 8001322:	2300      	movs	r3, #0
  }
}
 8001324:	4618      	mov	r0, r3
 8001326:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	bf00      	nop
 8001330:	080183dc 	.word	0x080183dc

08001334 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001338:	b087      	sub	sp, #28
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	466b      	mov	r3, sp
 8001340:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7fe ffee 	bl	8000324 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	b29b      	uxth	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 8001350:	8a79      	ldrh	r1, [r7, #18]
 8001352:	460b      	mov	r3, r1
 8001354:	3b01      	subs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	b28b      	uxth	r3, r1
 800135a:	2200      	movs	r2, #0
 800135c:	4698      	mov	r8, r3
 800135e:	4691      	mov	r9, r2
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800136c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001370:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001374:	b28b      	uxth	r3, r1
 8001376:	2200      	movs	r2, #0
 8001378:	461c      	mov	r4, r3
 800137a:	4615      	mov	r5, r2
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	00eb      	lsls	r3, r5, #3
 8001386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800138a:	00e2      	lsls	r2, r4, #3
 800138c:	460b      	mov	r3, r1
 800138e:	3307      	adds	r3, #7
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	ebad 0d03 	sub.w	sp, sp, r3
 8001398:	466b      	mov	r3, sp
 800139a:	3300      	adds	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 800139e:	f002 fb93 	bl	8003ac8 <HAL_GetTick>
 80013a2:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fe85 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80013aa:	8a7b      	ldrh	r3, [r7, #18]
 80013ac:	4619      	mov	r1, r3
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff ff58 	bl	8001264 <recv_packet>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	68b8      	ldr	r0, [r7, #8]
 80013be:	f7fe ffa7 	bl	8000310 <strcmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d011      	beq.n	80013ec <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fe73 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 80013ce:	f002 fb7b 	bl	8003ac8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013dc:	d9e5      	bls.n	80013aa <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe68 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 80013e4:	f002 fb70 	bl	8003ac8 <HAL_GetTick>
 80013e8:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80013ea:	e7de      	b.n	80013aa <reliable_send_packet+0x76>
				break;
 80013ec:	bf00      	nop
 80013ee:	46b5      	mov	sp, r6
		}
	}
}
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080013fc <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <usbReceiveHandle+0x38>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00c      	beq.n	800142a <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4909      	ldr	r1, [pc, #36]	; (8001438 <usbReceiveHandle+0x3c>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f015 fee7 	bl	80171e8 <memcpy>
		output[temp] = '\0';
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <usbReceiveHandle+0x38>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
	}
	return temp;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2400026c 	.word	0x2400026c
 8001438:	2400016c 	.word	0x2400016c
 800143c:	00000000 	.word	0x00000000

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001448:	4bd7      	ldr	r3, [pc, #860]	; (80017a8 <main+0x368>)
 800144a:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 800144e:	461d      	mov	r5, r3
 8001450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001454:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001458:	c403      	stmia	r4!, {r0, r1}
 800145a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f002 faae 	bl	80039bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 fb34 	bl	8001acc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001464:	f000 fbaa 	bl	8001bbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f001 f932 	bl	80026d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800146c:	f001 f8d0 	bl	8002610 <MX_DMA_Init>
  MX_SPI3_Init();
 8001470:	f000 fe2a 	bl	80020c8 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001474:	f000 fcba 	bl	8001dec <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001478:	f001 f87e 	bl	8002578 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800147c:	f000 fbd0 	bl	8001c20 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001480:	f000 ff34 	bl	80022ec <MX_TIM4_Init>
  MX_ADC3_Init();
 8001484:	f000 fc44 	bl	8001d10 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001488:	f000 fdc8 	bl	800201c <MX_SPI2_Init>
  MX_I2C2_Init();
 800148c:	f000 fd12 	bl	8001eb4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001490:	f000 fe70 	bl	8002174 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001494:	f000 ffa6 	bl	80023e4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001498:	f000 fec4 	bl	8002224 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800149c:	f015 f8f0 	bl	8016680 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80014a0:	f000 fd66 	bl	8001f70 <MX_SPI1_Init>
  MX_UART4_Init();
 80014a4:	f001 f81c 	bl	80024e0 <MX_UART4_Init>
  MX_FATFS_Init();
 80014a8:	f012 fe7e 	bl	80141a8 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80014ac:	f000 fd42 	bl	8001f34 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80014b0:	f000 fff2 	bl	8002498 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80014b4:	2332      	movs	r3, #50	; 0x32
 80014b6:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 80014ba:	a3b9      	add	r3, pc, #740	; (adr r3, 80017a0 <main+0x360>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80014d4:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4bb3      	ldr	r3, [pc, #716]	; (80017ac <main+0x36c>)
 80014de:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ee:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 80014f2:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80014f6:	213c      	movs	r1, #60	; 0x3c
 80014f8:	2010      	movs	r0, #16
 80014fa:	f7ff f943 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80014fe:	2130      	movs	r1, #48	; 0x30
 8001500:	2011      	movs	r0, #17
 8001502:	f7ff f93f 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001506:	2104      	movs	r1, #4
 8001508:	2013      	movs	r0, #19
 800150a:	f7ff f93b 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 800150e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001512:	f002 fae5 	bl	8003ae0 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001516:	21bf      	movs	r1, #191	; 0xbf
 8001518:	201c      	movs	r0, #28
 800151a:	f7ff f8df 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 800151e:	2002      	movs	r0, #2
 8001520:	f002 fade 	bl	8003ae0 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001524:	2158      	movs	r1, #88	; 0x58
 8001526:	201b      	movs	r0, #27
 8001528:	f7ff f8d8 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 800152c:	21d8      	movs	r1, #216	; 0xd8
 800152e:	201b      	movs	r0, #27
 8001530:	f7ff f8d4 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 800153c:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 800154c:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 8001556:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001560:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001568:	e02e      	b.n	80015c8 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 800156a:	f7ff f933 	bl	80007d4 <LG2_Get_Gyro_X>
 800156e:	eeb0 7a40 	vmov.f32	s14, s0
 8001572:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800157e:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001582:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 8001586:	f7ff f955 	bl	8000834 <LG2_Get_Gyro_Y>
 800158a:	eeb0 7a40 	vmov.f32	s14, s0
 800158e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800159a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800159e:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80015a2:	f7ff f979 	bl	8000898 <LG2_Get_Gyro_Z>
 80015a6:	eeb0 7a40 	vmov.f32	s14, s0
 80015aa:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015ba:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80015be:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80015c2:	3301      	adds	r3, #1
 80015c4:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80015c8:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80015cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015d0:	dbcb      	blt.n	800156a <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80015d2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	eddf 6a75 	vldr	s13, [pc, #468]	; 80017b0 <main+0x370>
 80015de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e2:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80015e6:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80015ea:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80017b0 <main+0x370>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80015fe:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001602:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	eddf 6a69 	vldr	s13, [pc, #420]	; 80017b0 <main+0x370>
 800160e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001612:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001616:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	2101      	movs	r1, #1
 800161e:	4865      	ldr	r0, [pc, #404]	; (80017b4 <main+0x374>)
 8001620:	f006 fd10 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001624:	20c8      	movs	r0, #200	; 0xc8
 8001626:	f002 fa5b 	bl	8003ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2101      	movs	r1, #1
 800162e:	4861      	ldr	r0, [pc, #388]	; (80017b4 <main+0x374>)
 8001630:	f006 fd08 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001634:	20c8      	movs	r0, #200	; 0xc8
 8001636:	f002 fa53 	bl	8003ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	2101      	movs	r1, #1
 800163e:	485d      	ldr	r0, [pc, #372]	; (80017b4 <main+0x374>)
 8001640:	f006 fd00 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001644:	20c8      	movs	r0, #200	; 0xc8
 8001646:	f002 fa4b 	bl	8003ae0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	2104      	movs	r1, #4
 800164e:	485a      	ldr	r0, [pc, #360]	; (80017b8 <main+0x378>)
 8001650:	f006 fcf8 	bl	8008044 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	2108      	movs	r1, #8
 8001658:	4857      	ldr	r0, [pc, #348]	; (80017b8 <main+0x378>)
 800165a:	f006 fcf3 	bl	8008044 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800165e:	2100      	movs	r1, #0
 8001660:	4856      	ldr	r0, [pc, #344]	; (80017bc <main+0x37c>)
 8001662:	f00d ffaf 	bl	800f5c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001666:	2104      	movs	r1, #4
 8001668:	4854      	ldr	r0, [pc, #336]	; (80017bc <main+0x37c>)
 800166a:	f00d ffab 	bl	800f5c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800166e:	2108      	movs	r1, #8
 8001670:	4852      	ldr	r0, [pc, #328]	; (80017bc <main+0x37c>)
 8001672:	f00d ffa7 	bl	800f5c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001676:	210c      	movs	r1, #12
 8001678:	4850      	ldr	r0, [pc, #320]	; (80017bc <main+0x37c>)
 800167a:	f00d ffa3 	bl	800f5c4 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 800167e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80017c0 <main+0x380>
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff f940 	bl	8000908 <setServo>
    setServo(2, 180);
 8001688:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80017c4 <main+0x384>
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff f93b 	bl	8000908 <setServo>
    setServo(3, 0);
 8001692:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80017c8 <main+0x388>
 8001696:	2003      	movs	r0, #3
 8001698:	f7ff f936 	bl	8000908 <setServo>
    setServo(4, 45);
 800169c:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80017cc <main+0x38c>
 80016a0:	2004      	movs	r0, #4
 80016a2:	f7ff f931 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 80016a6:	484a      	ldr	r0, [pc, #296]	; (80017d0 <main+0x390>)
 80016a8:	f7ff fc48 	bl	8000f3c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80016be:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016c2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 80016d0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016d4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	3304      	adds	r3, #4
 80016de:	22f6      	movs	r2, #246	; 0xf6
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f015 fd44 	bl	8017170 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 80016ee:	2332      	movs	r3, #50	; 0x32
 80016f0:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80016fa:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016fe:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <main+0x394>)
 8001704:	4634      	mov	r4, r6
 8001706:	461d      	mov	r5, r3
 8001708:	6828      	ldr	r0, [r5, #0]
 800170a:	6869      	ldr	r1, [r5, #4]
 800170c:	68aa      	ldr	r2, [r5, #8]
 800170e:	68eb      	ldr	r3, [r5, #12]
 8001710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001712:	7c2b      	ldrb	r3, [r5, #16]
 8001714:	7023      	strb	r3, [r4, #0]
 8001716:	f106 0311 	add.w	r3, r6, #17
 800171a:	2221      	movs	r2, #33	; 0x21
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f015 fd26 	bl	8017170 <memset>
  uint32_t previousTime = HAL_GetTick();
 8001724:	f002 f9d0 	bl	8003ac8 <HAL_GetTick>
 8001728:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 800172c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fd33 	bl	800119c <disarm>
  LoRA_begin(868000000);
 8001736:	4826      	ldr	r0, [pc, #152]	; (80017d0 <main+0x390>)
 8001738:	f7ff fc00 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 800173c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001740:	4925      	ldr	r1, [pc, #148]	; (80017d8 <main+0x398>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fde4 	bl	8000310 <strcmp>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 809c 	bne.w	8001888 <main+0x448>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001750:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001754:	21fa      	movs	r1, #250	; 0xfa
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fd84 	bl	8001264 <recv_packet>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8080 	beq.w	8001864 <main+0x424>
      {
    	  have_recieved_anything = 1;
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 800176a:	f002 f9ad 	bl	8003ac8 <HAL_GetTick>
 800176e:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001772:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001776:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800177a:	4918      	ldr	r1, [pc, #96]	; (80017dc <main+0x39c>)
 800177c:	4618      	mov	r0, r3
 800177e:	f015 fcc9 	bl	8017114 <siscanf>
 8001782:	4603      	mov	r3, r0
 8001784:	2b01      	cmp	r3, #1
 8001786:	d12b      	bne.n	80017e0 <main+0x3a0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001788:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800178c:	4a11      	ldr	r2, [pc, #68]	; (80017d4 <main+0x394>)
 800178e:	461c      	mov	r4, r3
 8001790:	4615      	mov	r5, r2
 8001792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	7023      	strb	r3, [r4, #0]
 800179a:	e16a      	b.n	8001a72 <main+0x632>
 800179c:	f3af 8000 	nop.w
 80017a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017a4:	3f50624d 	.word	0x3f50624d
 80017a8:	080184b8 	.word	0x080184b8
 80017ac:	3ff00000 	.word	0x3ff00000
 80017b0:	43fa0000 	.word	0x43fa0000
 80017b4:	58020c00 	.word	0x58020c00
 80017b8:	58021800 	.word	0x58021800
 80017bc:	24001168 	.word	0x24001168
 80017c0:	42b40000 	.word	0x42b40000
 80017c4:	43340000 	.word	0x43340000
 80017c8:	00000000 	.word	0x00000000
 80017cc:	42340000 	.word	0x42340000
 80017d0:	33bca100 	.word	0x33bca100
 80017d4:	08018440 	.word	0x08018440
 80017d8:	08018424 	.word	0x08018424
 80017dc:	08018438 	.word	0x08018438
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 80017e0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80017e4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017e8:	49ad      	ldr	r1, [pc, #692]	; (8001aa0 <main+0x660>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f015 fc92 	bl	8017114 <siscanf>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10b      	bne.n	800180e <main+0x3ce>
        {
          strcpy(communication_state,"SENDING STREAM");
 80017f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017fa:	4aaa      	ldr	r2, [pc, #680]	; (8001aa4 <main+0x664>)
 80017fc:	461c      	mov	r4, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001802:	c407      	stmia	r4!, {r0, r1, r2}
 8001804:	8023      	strh	r3, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e131      	b.n	8001a72 <main+0x632>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 800180e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8001812:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fd79 	bl	8000310 <strcmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <main+0x3f0>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 8001824:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc43 	bl	80010b4 <LoRA_sendPacket>
 800182e:	e120      	b.n	8001a72 <main+0x632>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001830:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001834:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f015 fccc 	bl	80171d8 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 8001840:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc35 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 800184a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fd68 	bl	8000324 <strlen>
 8001854:	4602      	mov	r2, r0
 8001856:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f014 ffe5 	bl	801682c <CDC_Transmit_HS>
 8001862:	e106      	b.n	8001a72 <main+0x632>
        }
      } else if (HAL_GetTick()-previousTime > 1000)
 8001864:	f002 f930 	bl	8003ac8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	f240 80fd 	bls.w	8001a72 <main+0x632>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 8001878:	f002 f926 	bl	8003ac8 <HAL_GetTick>
 800187c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        //HAL_Delay(100);
        LoRA_sendPacket("$");
 8001880:	4889      	ldr	r0, [pc, #548]	; (8001aa8 <main+0x668>)
 8001882:	f7ff fc17 	bl	80010b4 <LoRA_sendPacket>
 8001886:	e0f4      	b.n	8001a72 <main+0x632>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001888:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800188c:	4987      	ldr	r1, [pc, #540]	; (8001aac <main+0x66c>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fd3e 	bl	8000310 <strcmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d14a      	bne.n	8001930 <main+0x4f0>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800189a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800189e:	21fa      	movs	r1, #250	; 0xfa
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fcdf 	bl	8001264 <recv_packet>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d025      	beq.n	80018f8 <main+0x4b8>
      {
        previousTime = HAL_GetTick();
 80018ac:	f002 f90c 	bl	8003ac8 <HAL_GetTick>
 80018b0:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80018b4:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80018b8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018bc:	497c      	ldr	r1, [pc, #496]	; (8001ab0 <main+0x670>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f015 fc28 	bl	8017114 <siscanf>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d109      	bne.n	80018de <main+0x49e>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80018ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018ce:	4a79      	ldr	r2, [pc, #484]	; (8001ab4 <main+0x674>)
 80018d0:	461c      	mov	r4, r3
 80018d2:	4615      	mov	r5, r2
 80018d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	7023      	strb	r3, [r4, #0]
 80018dc:	e0c9      	b.n	8001a72 <main+0x632>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80018de:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fd1e 	bl	8000324 <strlen>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f014 ff9b 	bl	801682c <CDC_Transmit_HS>
 80018f6:	e0bc      	b.n	8001a72 <main+0x632>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 80018f8:	f002 f8e6 	bl	8003ac8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001908:	f240 80b3 	bls.w	8001a72 <main+0x632>
      {
        previousTime = HAL_GetTick();
 800190c:	f002 f8dc 	bl	8003ac8 <HAL_GetTick>
 8001910:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001914:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001918:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 800191c:	4960      	ldr	r1, [pc, #384]	; (8001aa0 <main+0x660>)
 800191e:	4618      	mov	r0, r3
 8001920:	f015 fbd8 	bl	80170d4 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001924:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fbc3 	bl	80010b4 <LoRA_sendPacket>
 800192e:	e0a0      	b.n	8001a72 <main+0x632>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001930:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001934:	495b      	ldr	r1, [pc, #364]	; (8001aa4 <main+0x664>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fcea 	bl	8000310 <strcmp>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d126      	bne.n	8001990 <main+0x550>
    {
      if(max_packet_count == 0)
 8001942:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001946:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d113      	bne.n	8001978 <main+0x538>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001950:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <main+0x678>)
 8001956:	461c      	mov	r4, r3
 8001958:	4615      	mov	r5, r2
 800195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	8022      	strh	r2, [r4, #0]
 8001964:	3402      	adds	r4, #2
 8001966:	0c1b      	lsrs	r3, r3, #16
 8001968:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001970:	484d      	ldr	r0, [pc, #308]	; (8001aa8 <main+0x668>)
 8001972:	f7ff fb9f 	bl	80010b4 <LoRA_sendPacket>
 8001976:	e07c      	b.n	8001a72 <main+0x632>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001978:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800197c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001988:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e070      	b.n	8001a72 <main+0x632>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001990:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001994:	4947      	ldr	r1, [pc, #284]	; (8001ab4 <main+0x674>)
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fcba 	bl	8000310 <strcmp>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d167      	bne.n	8001a72 <main+0x632>
    {
    	sprintf(response_packet, "\nState of other board: %s", state);
 80019a2:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80019a6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80019aa:	4944      	ldr	r1, [pc, #272]	; (8001abc <main+0x67c>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f015 fb91 	bl	80170d4 <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 80019b2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fcb4 	bl	8000324 <strlen>
 80019bc:	4602      	mov	r2, r0
 80019be:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f014 ff31 	bl	801682c <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 80019ca:	bf00      	nop
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fd14 	bl	80013fc <usbReceiveHandle>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f8      	beq.n	80019cc <main+0x58c>
    	{}

      reliable_send_packet(input);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fca9 	bl	8001334 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "\nEntered: %s\n", input);
 80019e2:	1d3a      	adds	r2, r7, #4
 80019e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <main+0x680>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f015 fb72 	bl	80170d4 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 80019f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fc95 	bl	8000324 <strlen>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f014 ff12 	bl	801682c <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	492e      	ldr	r1, [pc, #184]	; (8001ac4 <main+0x684>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc7f 	bl	8000310 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d116      	bne.n	8001a46 <main+0x606>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001a18:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a1c:	4a23      	ldr	r2, [pc, #140]	; (8001aac <main+0x66c>)
 8001a1e:	461c      	mov	r4, r3
 8001a20:	4615      	mov	r5, r2
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 8001a2a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001a2e:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001a32:	491b      	ldr	r1, [pc, #108]	; (8001aa0 <main+0x660>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f015 fb4d 	bl	80170d4 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001a3a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb38 	bl	80010b4 <LoRA_sendPacket>
 8001a44:	e015      	b.n	8001a72 <main+0x632>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001a46:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a4a:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <main+0x678>)
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	4615      	mov	r5, r2
 8001a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	8022      	strh	r2, [r4, #0]
 8001a5a:	3402      	adds	r4, #2
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 8001a66:	2064      	movs	r0, #100	; 0x64
 8001a68:	f002 f83a 	bl	8003ae0 <HAL_Delay>
        LoRA_sendPacket("$");
 8001a6c:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <main+0x668>)
 8001a6e:	f7ff fb21 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001a72:	f002 f829 	bl	8003ac8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a86:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001ac8 <main+0x688>
 8001a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001a92:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001a96:	f002 f817 	bl	8003ac8 <HAL_GetTick>
 8001a9a:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001a9e:	e64d      	b.n	800173c <main+0x2fc>
 8001aa0:	08018454 	.word	0x08018454
 8001aa4:	0801845c 	.word	0x0801845c
 8001aa8:	0801846c 	.word	0x0801846c
 8001aac:	08018470 	.word	0x08018470
 8001ab0:	08018438 	.word	0x08018438
 8001ab4:	08018440 	.word	0x08018440
 8001ab8:	08018424 	.word	0x08018424
 8001abc:	08018484 	.word	0x08018484
 8001ac0:	080184a0 	.word	0x080184a0
 8001ac4:	080184b0 	.word	0x080184b0
 8001ac8:	447a0000 	.word	0x447a0000

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09c      	sub	sp, #112	; 0x70
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad6:	224c      	movs	r2, #76	; 0x4c
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f015 fb48 	bl	8017170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f015 fb42 	bl	8017170 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001aec:	2002      	movs	r0, #2
 8001aee:	f007 febd 	bl	800986c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <SystemClock_Config+0xec>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001afe:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <SystemClock_Config+0xec>)
 8001b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <SystemClock_Config+0xec>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b12:	bf00      	nop
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <SystemClock_Config+0xec>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b20:	d1f8      	bne.n	8001b14 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001b22:	2322      	movs	r3, #34	; 0x22
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b2a:	2340      	movs	r3, #64	; 0x40
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b32:	2302      	movs	r3, #2
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b36:	2300      	movs	r3, #0
 8001b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001b46:	230c      	movs	r3, #12
 8001b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f007 fece 	bl	8009900 <HAL_RCC_OscConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b6a:	f000 ff1b 	bl	80029a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6e:	233f      	movs	r3, #63	; 0x3f
 8001b70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b72:	2303      	movs	r3, #3
 8001b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b7e:	2340      	movs	r3, #64	; 0x40
 8001b80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b82:	2340      	movs	r3, #64	; 0x40
 8001b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b8c:	2340      	movs	r3, #64	; 0x40
 8001b8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f008 fa8d 	bl	800a0b4 <HAL_RCC_ClockConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ba0:	f000 ff00 	bl	80029a4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001ba4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2000      	movs	r0, #0
 8001bac:	f008 fc38 	bl	800a420 <HAL_RCC_MCOConfig>
}
 8001bb0:	bf00      	nop
 8001bb2:	3770      	adds	r7, #112	; 0x70
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58024800 	.word	0x58024800

08001bbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0ae      	sub	sp, #184	; 0xb8
 8001bc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	22b8      	movs	r2, #184	; 0xb8
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f015 fad1 	bl	8017170 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001bce:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001bde:	230c      	movs	r3, #12
 8001be0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001be2:	2304      	movs	r3, #4
 8001be4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001be6:	2302      	movs	r3, #2
 8001be8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f008 fe49 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001c14:	f000 fec6 	bl	80029a4 <Error_Handler>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	37b8      	adds	r7, #184	; 0xb8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c32:	463b      	mov	r3, r7
 8001c34:	2224      	movs	r2, #36	; 0x24
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f015 fa99 	bl	8017170 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c40:	4a31      	ldr	r2, [pc, #196]	; (8001d08 <MX_ADC1_Init+0xe8>)
 8001c42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c46:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001c4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c9e:	4819      	ldr	r0, [pc, #100]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001ca0:	f002 f99e 	bl	8003fe0 <HAL_ADC_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001caa:	f000 fe7b 	bl	80029a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4812      	ldr	r0, [pc, #72]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001cba:	f003 f9d9 	bl	8005070 <HAL_ADCEx_MultiModeConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001cc4:	f000 fe6e 	bl	80029a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_ADC1_Init+0xec>)
 8001cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ccc:	2306      	movs	r3, #6
 8001cce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cd4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_ADC1_Init+0xe4>)
 8001cee:	f002 fb7f 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001cf8:	f000 fe54 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3730      	adds	r7, #48	; 0x30
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	24000bf8 	.word	0x24000bf8
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	2a000400 	.word	0x2a000400

08001d10 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2224      	movs	r2, #36	; 0x24
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f015 fa27 	bl	8017170 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d24:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <MX_ADC3_Init+0xd4>)
 8001d26:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d2a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d2e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d44:	2204      	movs	r2, #4
 8001d46:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d96:	4812      	ldr	r0, [pc, #72]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001d98:	f002 f922 	bl	8003fe0 <HAL_ADC_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001da2:	f000 fdff 	bl	80029a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_ADC3_Init+0xd8>)
 8001da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001daa:	2306      	movs	r3, #6
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001db2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001db6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001db8:	2304      	movs	r3, #4
 8001dba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_ADC3_Init+0xd0>)
 8001dca:	f002 fb11 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001dd4:	f000 fde6 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	24000c68 	.word	0x24000c68
 8001de4:	58026000 	.word	0x58026000
 8001de8:	04300002 	.word	0x04300002

08001dec <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001df0:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001df2:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <MX_FDCAN3_Init+0xc4>)
 8001df4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e16:	2210      	movs	r2, #16
 8001e18:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e5e:	2204      	movs	r2, #4
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e76:	2204      	movs	r2, #4
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e94:	2204      	movs	r2, #4
 8001e96:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <MX_FDCAN3_Init+0xc0>)
 8001e9a:	f005 fbaf 	bl	80075fc <HAL_FDCAN_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001ea4:	f000 fd7e 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	24000dc8 	.word	0x24000dc8
 8001eb0:	4000d400 	.word	0x4000d400

08001eb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <MX_I2C2_Init+0x78>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <MX_I2C2_Init+0x7c>)
 8001ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eee:	480e      	ldr	r0, [pc, #56]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001ef0:	f006 f8c2 	bl	8008078 <HAL_I2C_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001efa:	f000 fd53 	bl	80029a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001efe:	2100      	movs	r1, #0
 8001f00:	4809      	ldr	r0, [pc, #36]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001f02:	f006 f963 	bl	80081cc <HAL_I2CEx_ConfigAnalogFilter>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f0c:	f000 fd4a 	bl	80029a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f10:	2100      	movs	r1, #0
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_I2C2_Init+0x74>)
 8001f14:	f006 f9a5 	bl	8008262 <HAL_I2CEx_ConfigDigitalFilter>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f1e:	f000 fd41 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	24000e68 	.word	0x24000e68
 8001f2c:	40005800 	.word	0x40005800
 8001f30:	20303e5d 	.word	0x20303e5d

08001f34 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_SDMMC2_SD_Init+0x34>)
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <MX_SDMMC2_SD_Init+0x38>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <MX_SDMMC2_SD_Init+0x34>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_SDMMC2_SD_Init+0x34>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <MX_SDMMC2_SD_Init+0x34>)
 8001f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f50:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <MX_SDMMC2_SD_Init+0x34>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <MX_SDMMC2_SD_Init+0x34>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	24000ebc 	.word	0x24000ebc
 8001f6c:	48022400 	.word	0x48022400

08001f70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <MX_SPI1_Init+0xa8>)
 8001f78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fa4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_SPI1_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_SPI1_Init+0xa4>)
 8002002:	f00c fc97 	bl	800e934 <HAL_SPI_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800200c:	f000 fcca 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	24000f38 	.word	0x24000f38
 8002018:	40013000 	.word	0x40013000

0800201c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002022:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <MX_SPI2_Init+0xa8>)
 8002024:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002028:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800202c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002036:	2207      	movs	r2, #7
 8002038:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_SPI2_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002048:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002050:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002054:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_SPI2_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_SPI2_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_SPI2_Init+0xa4>)
 800207e:	2200      	movs	r2, #0
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <MX_SPI2_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <MX_SPI2_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_SPI2_Init+0xa4>)
 800209c:	2200      	movs	r2, #0
 800209e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <MX_SPI2_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_SPI2_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_SPI2_Init+0xa4>)
 80020ae:	f00c fc41 	bl	800e934 <HAL_SPI_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80020b8:	f000 fc74 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	24000fc0 	.word	0x24000fc0
 80020c4:	40003800 	.word	0x40003800

080020c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <MX_SPI3_Init+0xa4>)
 80020ce:	4a28      	ldr	r2, [pc, #160]	; (8002170 <MX_SPI3_Init+0xa8>)
 80020d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_SPI3_Init+0xa4>)
 80020d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <MX_SPI3_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <MX_SPI3_Init+0xa4>)
 80020e2:	2207      	movs	r2, #7
 80020e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <MX_SPI3_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <MX_SPI3_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <MX_SPI3_Init+0xa4>)
 80020f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <MX_SPI3_Init+0xa4>)
 80020fc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002100:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_SPI3_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <MX_SPI3_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <MX_SPI3_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <MX_SPI3_Init+0xa4>)
 8002116:	2200      	movs	r2, #0
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_SPI3_Init+0xa4>)
 800211c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_SPI3_Init+0xa4>)
 8002124:	2200      	movs	r2, #0
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <MX_SPI3_Init+0xa4>)
 800212a:	2200      	movs	r2, #0
 800212c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_SPI3_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <MX_SPI3_Init+0xa4>)
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_SPI3_Init+0xa4>)
 800213c:	2200      	movs	r2, #0
 800213e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MX_SPI3_Init+0xa4>)
 8002142:	2200      	movs	r2, #0
 8002144:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_SPI3_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <MX_SPI3_Init+0xa4>)
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_SPI3_Init+0xa4>)
 8002154:	2200      	movs	r2, #0
 8002156:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <MX_SPI3_Init+0xa4>)
 800215a:	f00c fbeb 	bl	800e934 <HAL_SPI_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002164:	f000 fc1e 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	24001048 	.word	0x24001048
 8002170:	40003c00 	.word	0x40003c00

08002174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002186:	463b      	mov	r3, r7
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	615a      	str	r2, [r3, #20]
 8002196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <MX_TIM2_Init+0xac>)
 800219a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <MX_TIM2_Init+0xac>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_TIM2_Init+0xac>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_TIM2_Init+0xac>)
 80021ae:	225a      	movs	r2, #90	; 0x5a
 80021b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_TIM2_Init+0xac>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <MX_TIM2_Init+0xac>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021be:	4818      	ldr	r0, [pc, #96]	; (8002220 <MX_TIM2_Init+0xac>)
 80021c0:	f00d f9a8 	bl	800f514 <HAL_TIM_PWM_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80021ca:	f000 fbeb 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	4810      	ldr	r0, [pc, #64]	; (8002220 <MX_TIM2_Init+0xac>)
 80021de:	f00e fc2f 	bl	8010a40 <HAL_TIMEx_MasterConfigSynchronization>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80021e8:	f000 fbdc 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ec:	2360      	movs	r3, #96	; 0x60
 80021ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	2208      	movs	r2, #8
 8002200:	4619      	mov	r1, r3
 8002202:	4807      	ldr	r0, [pc, #28]	; (8002220 <MX_TIM2_Init+0xac>)
 8002204:	f00d fe4e 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800220e:	f000 fbc9 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002212:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_TIM2_Init+0xac>)
 8002214:	f001 f8e4 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	240010d0 	.word	0x240010d0

08002224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002236:	463b      	mov	r3, r7
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	615a      	str	r2, [r3, #20]
 8002246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <MX_TIM3_Init+0xc0>)
 800224a:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <MX_TIM3_Init+0xc4>)
 800224c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <MX_TIM3_Init+0xc0>)
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <MX_TIM3_Init+0xc0>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <MX_TIM3_Init+0xc0>)
 800225c:	225a      	movs	r2, #90	; 0x5a
 800225e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <MX_TIM3_Init+0xc0>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <MX_TIM3_Init+0xc0>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800226c:	481d      	ldr	r0, [pc, #116]	; (80022e4 <MX_TIM3_Init+0xc0>)
 800226e:	f00d f951 	bl	800f514 <HAL_TIM_PWM_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002278:	f000 fb94 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4816      	ldr	r0, [pc, #88]	; (80022e4 <MX_TIM3_Init+0xc0>)
 800228c:	f00e fbd8 	bl	8010a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002296:	f000 fb85 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800229a:	2360      	movs	r3, #96	; 0x60
 800229c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022aa:	463b      	mov	r3, r7
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <MX_TIM3_Init+0xc0>)
 80022b2:	f00d fdf7 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80022bc:	f000 fb72 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	2204      	movs	r2, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <MX_TIM3_Init+0xc0>)
 80022c8:	f00d fdec 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022d2:	f000 fb67 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022d6:	4803      	ldr	r0, [pc, #12]	; (80022e4 <MX_TIM3_Init+0xc0>)
 80022d8:	f001 f882 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2400111c 	.word	0x2400111c
 80022e8:	40000400 	.word	0x40000400

080022ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fe:	463b      	mov	r3, r7
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002312:	4a33      	ldr	r2, [pc, #204]	; (80023e0 <MX_TIM4_Init+0xf4>)
 8002314:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002318:	221c      	movs	r2, #28
 800231a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <MX_TIM4_Init+0xf0>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002324:	f242 720f 	movw	r2, #9999	; 0x270f
 8002328:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <MX_TIM4_Init+0xf0>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002336:	4829      	ldr	r0, [pc, #164]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002338:	f00d f8ec 	bl	800f514 <HAL_TIM_PWM_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002342:	f000 fb2f 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4821      	ldr	r0, [pc, #132]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002356:	f00e fb73 	bl	8010a40 <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002360:	f000 fb20 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002364:	2360      	movs	r3, #96	; 0x60
 8002366:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	2200      	movs	r2, #0
 8002378:	4619      	mov	r1, r3
 800237a:	4818      	ldr	r0, [pc, #96]	; (80023dc <MX_TIM4_Init+0xf0>)
 800237c:	f00d fd92 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002386:	f000 fb0d 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800238a:	463b      	mov	r3, r7
 800238c:	2204      	movs	r2, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4812      	ldr	r0, [pc, #72]	; (80023dc <MX_TIM4_Init+0xf0>)
 8002392:	f00d fd87 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800239c:	f000 fb02 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	2208      	movs	r2, #8
 80023a4:	4619      	mov	r1, r3
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <MX_TIM4_Init+0xf0>)
 80023a8:	f00d fd7c 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80023b2:	f000 faf7 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023b6:	463b      	mov	r3, r7
 80023b8:	220c      	movs	r2, #12
 80023ba:	4619      	mov	r1, r3
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <MX_TIM4_Init+0xf0>)
 80023be:	f00d fd71 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80023c8:	f000 faec 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023cc:	4803      	ldr	r0, [pc, #12]	; (80023dc <MX_TIM4_Init+0xf0>)
 80023ce:	f001 f807 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	24001168 	.word	0x24001168
 80023e0:	40000800 	.word	0x40000800

080023e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f6:	463b      	mov	r3, r7
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
 8002404:	615a      	str	r2, [r3, #20]
 8002406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <MX_TIM5_Init+0xac>)
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <MX_TIM5_Init+0xb0>)
 800240c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <MX_TIM5_Init+0xac>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <MX_TIM5_Init+0xac>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <MX_TIM5_Init+0xac>)
 800241c:	225a      	movs	r2, #90	; 0x5a
 800241e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <MX_TIM5_Init+0xac>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_TIM5_Init+0xac>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800242c:	4818      	ldr	r0, [pc, #96]	; (8002490 <MX_TIM5_Init+0xac>)
 800242e:	f00d f871 	bl	800f514 <HAL_TIM_PWM_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002438:	f000 fab4 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	4811      	ldr	r0, [pc, #68]	; (8002490 <MX_TIM5_Init+0xac>)
 800244c:	f00e faf8 	bl	8010a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002456:	f000 faa5 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245a:	2360      	movs	r3, #96	; 0x60
 800245c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800246a:	463b      	mov	r3, r7
 800246c:	220c      	movs	r2, #12
 800246e:	4619      	mov	r1, r3
 8002470:	4807      	ldr	r0, [pc, #28]	; (8002490 <MX_TIM5_Init+0xac>)
 8002472:	f00d fd17 	bl	800fea4 <HAL_TIM_PWM_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800247c:	f000 fa92 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <MX_TIM5_Init+0xac>)
 8002482:	f000 ffad 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	240011b4 	.word	0x240011b4
 8002494:	40000c00 	.word	0x40000c00

08002498 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_TIM13_Init+0x40>)
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <MX_TIM13_Init+0x44>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <MX_TIM13_Init+0x40>)
 80024a4:	225f      	movs	r2, #95	; 0x5f
 80024a6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <MX_TIM13_Init+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_TIM13_Init+0x40>)
 80024b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <MX_TIM13_Init+0x40>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_TIM13_Init+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_TIM13_Init+0x40>)
 80024c4:	f00c ffcf 	bl	800f466 <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80024ce:	f000 fa69 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	24001200 	.word	0x24001200
 80024dc:	40001c00 	.word	0x40001c00

080024e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <MX_UART4_Init+0x90>)
 80024e6:	4a23      	ldr	r2, [pc, #140]	; (8002574 <MX_UART4_Init+0x94>)
 80024e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <MX_UART4_Init+0x90>)
 80024ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <MX_UART4_Init+0x90>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_UART4_Init+0x90>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <MX_UART4_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_UART4_Init+0x90>)
 8002506:	220c      	movs	r2, #12
 8002508:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <MX_UART4_Init+0x90>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <MX_UART4_Init+0x90>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MX_UART4_Init+0x90>)
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_UART4_Init+0x90>)
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <MX_UART4_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002528:	4811      	ldr	r0, [pc, #68]	; (8002570 <MX_UART4_Init+0x90>)
 800252a:	f00e fb43 	bl	8010bb4 <HAL_UART_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002534:	f000 fa36 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002538:	2100      	movs	r1, #0
 800253a:	480d      	ldr	r0, [pc, #52]	; (8002570 <MX_UART4_Init+0x90>)
 800253c:	f00f fc49 	bl	8011dd2 <HAL_UARTEx_SetTxFifoThreshold>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002546:	f000 fa2d 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800254a:	2100      	movs	r1, #0
 800254c:	4808      	ldr	r0, [pc, #32]	; (8002570 <MX_UART4_Init+0x90>)
 800254e:	f00f fc7e 	bl	8011e4e <HAL_UARTEx_SetRxFifoThreshold>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002558:	f000 fa24 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800255c:	4804      	ldr	r0, [pc, #16]	; (8002570 <MX_UART4_Init+0x90>)
 800255e:	f00f fbff 	bl	8011d60 <HAL_UARTEx_DisableFifoMode>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002568:	f000 fa1c 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	240014a4 	.word	0x240014a4
 8002574:	40004c00 	.word	0x40004c00

08002578 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <MX_USART6_UART_Init+0x90>)
 800257e:	4a23      	ldr	r2, [pc, #140]	; (800260c <MX_USART6_UART_Init+0x94>)
 8002580:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <MX_USART6_UART_Init+0x90>)
 8002584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002588:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <MX_USART6_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <MX_USART6_UART_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <MX_USART6_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_USART6_UART_Init+0x90>)
 800259e:	220c      	movs	r2, #12
 80025a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025c0:	4811      	ldr	r0, [pc, #68]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025c2:	f00e faf7 	bl	8010bb4 <HAL_UART_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80025cc:	f000 f9ea 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d0:	2100      	movs	r1, #0
 80025d2:	480d      	ldr	r0, [pc, #52]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025d4:	f00f fbfd 	bl	8011dd2 <HAL_UARTEx_SetTxFifoThreshold>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80025de:	f000 f9e1 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4808      	ldr	r0, [pc, #32]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025e6:	f00f fc32 	bl	8011e4e <HAL_UARTEx_SetRxFifoThreshold>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80025f0:	f000 f9d8 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_USART6_UART_Init+0x90>)
 80025f6:	f00f fbb3 	bl	8011d60 <HAL_UARTEx_DisableFifoMode>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002600:	f000 f9d0 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	24001538 	.word	0x24001538
 800260c:	40011400 	.word	0x40011400

08002610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <MX_DMA_Init+0xbc>)
 8002618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <MX_DMA_Init+0xbc>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <MX_DMA_Init+0xbc>)
 8002628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <MX_DMA_Init+0xbc>)
 8002636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800263a:	4a24      	ldr	r2, [pc, #144]	; (80026cc <MX_DMA_Init+0xbc>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <MX_DMA_Init+0xbc>)
 8002646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	200b      	movs	r0, #11
 8002658:	f002 fec7 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800265c:	200b      	movs	r0, #11
 800265e:	f002 fede 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	200c      	movs	r0, #12
 8002668:	f002 febf 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800266c:	200c      	movs	r0, #12
 800266e:	f002 fed6 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	200d      	movs	r0, #13
 8002678:	f002 feb7 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800267c:	200d      	movs	r0, #13
 800267e:	f002 fece 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	200e      	movs	r0, #14
 8002688:	f002 feaf 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800268c:	200e      	movs	r0, #14
 800268e:	f002 fec6 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	200f      	movs	r0, #15
 8002698:	f002 fea7 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800269c:	200f      	movs	r0, #15
 800269e:	f002 febe 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2010      	movs	r0, #16
 80026a8:	f002 fe9f 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026ac:	2010      	movs	r0, #16
 80026ae:	f002 feb6 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2046      	movs	r0, #70	; 0x46
 80026b8:	f002 fe97 	bl	80053ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80026bc:	2046      	movs	r0, #70	; 0x46
 80026be:	f002 feae 	bl	800541e <HAL_NVIC_EnableIRQ>

}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	58024400 	.word	0x58024400

080026d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026e6:	4ba7      	ldr	r3, [pc, #668]	; (8002984 <MX_GPIO_Init+0x2b4>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	4aa5      	ldr	r2, [pc, #660]	; (8002984 <MX_GPIO_Init+0x2b4>)
 80026ee:	f043 0310 	orr.w	r3, r3, #16
 80026f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f6:	4ba3      	ldr	r3, [pc, #652]	; (8002984 <MX_GPIO_Init+0x2b4>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002704:	4b9f      	ldr	r3, [pc, #636]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	4a9e      	ldr	r2, [pc, #632]	; (8002984 <MX_GPIO_Init+0x2b4>)
 800270c:	f043 0320 	orr.w	r3, r3, #32
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002714:	4b9b      	ldr	r3, [pc, #620]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002722:	4b98      	ldr	r3, [pc, #608]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	4a96      	ldr	r2, [pc, #600]	; (8002984 <MX_GPIO_Init+0x2b4>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002732:	4b94      	ldr	r3, [pc, #592]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	4b90      	ldr	r3, [pc, #576]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	4a8f      	ldr	r2, [pc, #572]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002750:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002764:	4a87      	ldr	r2, [pc, #540]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276e:	4b85      	ldr	r3, [pc, #532]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800277c:	4b81      	ldr	r3, [pc, #516]	; (8002984 <MX_GPIO_Init+0x2b4>)
 800277e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002782:	4a80      	ldr	r2, [pc, #512]	; (8002984 <MX_GPIO_Init+0x2b4>)
 8002784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800278c:	4b7d      	ldr	r3, [pc, #500]	; (8002984 <MX_GPIO_Init+0x2b4>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800279a:	4b7a      	ldr	r3, [pc, #488]	; (8002984 <MX_GPIO_Init+0x2b4>)
 800279c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a0:	4a78      	ldr	r2, [pc, #480]	; (8002984 <MX_GPIO_Init+0x2b4>)
 80027a2:	f043 0308 	orr.w	r3, r3, #8
 80027a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <MX_GPIO_Init+0x2b4>)
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	f241 5104 	movw	r1, #5380	; 0x1504
 80027be:	4872      	ldr	r0, [pc, #456]	; (8002988 <MX_GPIO_Init+0x2b8>)
 80027c0:	f005 fc40 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	f248 0106 	movw	r1, #32774	; 0x8006
 80027ca:	4870      	ldr	r0, [pc, #448]	; (800298c <MX_GPIO_Init+0x2bc>)
 80027cc:	f005 fc3a 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2130      	movs	r1, #48	; 0x30
 80027d4:	486e      	ldr	r0, [pc, #440]	; (8002990 <MX_GPIO_Init+0x2c0>)
 80027d6:	f005 fc35 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 80027da:	2200      	movs	r2, #0
 80027dc:	2103      	movs	r1, #3
 80027de:	486d      	ldr	r0, [pc, #436]	; (8002994 <MX_GPIO_Init+0x2c4>)
 80027e0:	f005 fc30 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80027ea:	486b      	ldr	r0, [pc, #428]	; (8002998 <MX_GPIO_Init+0x2c8>)
 80027ec:	f005 fc2a 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	210e      	movs	r1, #14
 80027f4:	4869      	ldr	r0, [pc, #420]	; (800299c <MX_GPIO_Init+0x2cc>)
 80027f6:	f005 fc25 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002800:	4867      	ldr	r0, [pc, #412]	; (80029a0 <MX_GPIO_Init+0x2d0>)
 8002802:	f005 fc1f 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	2101      	movs	r1, #1
 800280a:	4865      	ldr	r0, [pc, #404]	; (80029a0 <MX_GPIO_Init+0x2d0>)
 800280c:	f005 fc1a 	bl	8008044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002810:	f241 5304 	movw	r3, #5380	; 0x1504
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	4857      	ldr	r0, [pc, #348]	; (8002988 <MX_GPIO_Init+0x2b8>)
 800282a:	f005 fa4b 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800282e:	f248 0306 	movw	r3, #32774	; 0x8006
 8002832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4851      	ldr	r0, [pc, #324]	; (800298c <MX_GPIO_Init+0x2bc>)
 8002848:	f005 fa3c 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800284c:	2330      	movs	r3, #48	; 0x30
 800284e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	484b      	ldr	r0, [pc, #300]	; (8002990 <MX_GPIO_Init+0x2c0>)
 8002864:	f005 fa2e 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002868:	2303      	movs	r3, #3
 800286a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	2301      	movs	r3, #1
 800286e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4845      	ldr	r0, [pc, #276]	; (8002994 <MX_GPIO_Init+0x2c4>)
 8002880:	f005 fa20 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002884:	2304      	movs	r3, #4
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288c:	2301      	movs	r3, #1
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	483f      	ldr	r0, [pc, #252]	; (8002994 <MX_GPIO_Init+0x2c4>)
 8002898:	f005 fa14 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 800289c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4838      	ldr	r0, [pc, #224]	; (8002998 <MX_GPIO_Init+0x2c8>)
 80028b6:	f005 fa05 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80028ba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4832      	ldr	r0, [pc, #200]	; (8002998 <MX_GPIO_Init+0x2c8>)
 80028d0:	f005 f9f8 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	482d      	ldr	r0, [pc, #180]	; (800299c <MX_GPIO_Init+0x2cc>)
 80028e8:	f005 f9ec 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80028ec:	230e      	movs	r3, #14
 80028ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f0:	2301      	movs	r3, #1
 80028f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	4826      	ldr	r0, [pc, #152]	; (800299c <MX_GPIO_Init+0x2cc>)
 8002904:	f005 f9de 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002908:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 800290c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002912:	2301      	movs	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	481a      	ldr	r0, [pc, #104]	; (8002988 <MX_GPIO_Init+0x2b8>)
 800291e:	f005 f9d1 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002922:	f240 7301 	movw	r3, #1793	; 0x701
 8002926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	4619      	mov	r1, r3
 800293a:	4819      	ldr	r0, [pc, #100]	; (80029a0 <MX_GPIO_Init+0x2d0>)
 800293c:	f005 f9c2 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002940:	2310      	movs	r3, #16
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	4812      	ldr	r0, [pc, #72]	; (800299c <MX_GPIO_Init+0x2cc>)
 8002954:	f005 f9b6 	bl	8007cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_GPIO_Init+0x2bc>)
 8002976:	f005 f9a5 	bl	8007cc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800297a:	bf00      	nop
 800297c:	3730      	adds	r7, #48	; 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	58024400 	.word	0x58024400
 8002988:	58021000 	.word	0x58021000
 800298c:	58020000 	.word	0x58020000
 8002990:	58020800 	.word	0x58020800
 8002994:	58020400 	.word	0x58020400
 8002998:	58021400 	.word	0x58021400
 800299c:	58021800 	.word	0x58021800
 80029a0:	58020c00 	.word	0x58020c00

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
}
 80029aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029ac:	e7fe      	b.n	80029ac <Error_Handler+0x8>
	...

080029b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_MspInit+0x30>)
 80029b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_MspInit+0x30>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_MspInit+0x30>)
 80029c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	58024400 	.word	0x58024400

080029e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_ADC_MspInit+0x194>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d159      	bne.n	8002aba <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a06:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a0c:	4a5b      	ldr	r2, [pc, #364]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002a0e:	f043 0320 	orr.w	r3, r3, #32
 8002a12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a24:	4b55      	ldr	r3, [pc, #340]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2a:	4a54      	ldr	r2, [pc, #336]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a46:	2303      	movs	r3, #3
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	484a      	ldr	r0, [pc, #296]	; (8002b80 <HAL_ADC_MspInit+0x19c>)
 8002a56:	f005 f935 	bl	8007cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <HAL_ADC_MspInit+0x1a4>)
 8002a5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a60:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a62:	2209      	movs	r2, #9
 8002a64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6c:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a7a:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a90:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a9c:	4839      	ldr	r0, [pc, #228]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002a9e:	f002 fcd9 	bl	8005454 <HAL_DMA_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002aa8:	f7ff ff7c 	bl	80029a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a35      	ldr	r2, [pc, #212]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ab2:	4a34      	ldr	r2, [pc, #208]	; (8002b84 <HAL_ADC_MspInit+0x1a0>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ab8:	e059      	b.n	8002b6e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <HAL_ADC_MspInit+0x1a8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d154      	bne.n	8002b6e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_ADC_MspInit+0x198>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b04:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b08:	f001 f80e 	bl	8003b28 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b0e:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <HAL_ADC_MspInit+0x1b0>)
 8002b10:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b12:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b14:	2273      	movs	r2, #115	; 0x73
 8002b16:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b32:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b3a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b4a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b52:	480f      	ldr	r0, [pc, #60]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b54:	f002 fc7e 	bl	8005454 <HAL_DMA_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002b5e:	f7ff ff21 	bl	80029a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_ADC_MspInit+0x1ac>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b6e:	bf00      	nop
 8002b70:	3730      	adds	r7, #48	; 0x30
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	58020800 	.word	0x58020800
 8002b84:	24000cd8 	.word	0x24000cd8
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	58026000 	.word	0x58026000
 8002b90:	24000d50 	.word	0x24000d50
 8002b94:	400204b8 	.word	0x400204b8

08002b98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0b8      	sub	sp, #224	; 0xe0
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	22b8      	movs	r2, #184	; 0xb8
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f014 fad9 	bl	8017170 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <HAL_FDCAN_MspInit+0xc4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d145      	bne.n	8002c54 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002bc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	4618      	mov	r0, r3
 8002be0:	f007 fe5e 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002bea:	f7ff fedb 	bl	80029a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_FDCAN_MspInit+0xc8>)
 8002bf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_FDCAN_MspInit+0xc8>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_FDCAN_MspInit+0xc8>)
 8002c00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_FDCAN_MspInit+0xc8>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_FDCAN_MspInit+0xc8>)
 8002c14:	f043 0320 	orr.w	r3, r3, #32
 8002c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_FDCAN_MspInit+0xc8>)
 8002c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <HAL_FDCAN_MspInit+0xcc>)
 8002c50:	f005 f838 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002c54:	bf00      	nop
 8002c56:	37e0      	adds	r7, #224	; 0xe0
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	4000d400 	.word	0x4000d400
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58021400 	.word	0x58021400

08002c68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0b8      	sub	sp, #224	; 0xe0
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	22b8      	movs	r2, #184	; 0xb8
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f014 fa71 	bl	8017170 <memset>
  if(hi2c->Instance==I2C2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_I2C_MspInit+0xd4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d14d      	bne.n	8002d34 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c98:	f04f 0208 	mov.w	r2, #8
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f007 fdf6 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002cba:	f7ff fe73 	bl	80029a4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_I2C_MspInit+0xd8>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_I2C_MspInit+0xd8>)
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_I2C_MspInit+0xd8>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce2:	2312      	movs	r3, #18
 8002ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cfa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4810      	ldr	r0, [pc, #64]	; (8002d44 <HAL_I2C_MspInit+0xdc>)
 8002d02:	f004 ffdf 	bl	8007cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_I2C_MspInit+0xd8>)
 8002d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <HAL_I2C_MspInit+0xd8>)
 8002d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_I2C_MspInit+0xd8>)
 8002d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2101      	movs	r1, #1
 8002d28:	2021      	movs	r0, #33	; 0x21
 8002d2a:	f002 fb5e 	bl	80053ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002d2e:	2021      	movs	r0, #33	; 0x21
 8002d30:	f002 fb75 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d34:	bf00      	nop
 8002d36:	37e0      	adds	r7, #224	; 0xe0
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40005800 	.word	0x40005800
 8002d40:	58024400 	.word	0x58024400
 8002d44:	58021400 	.word	0x58021400

08002d48 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0ba      	sub	sp, #232	; 0xe8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d60:	f107 0318 	add.w	r3, r7, #24
 8002d64:	22b8      	movs	r2, #184	; 0xb8
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f014 fa01 	bl	8017170 <memset>
  if(hsd->Instance==SDMMC2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_SD_MspInit+0x1a0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f040 80b3 	bne.w	8002ee0 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d8a:	f107 0318 	add.w	r3, r7, #24
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f007 fd86 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002d9a:	f7ff fe03 	bl	80029a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002d9e:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002da0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002da4:	4a51      	ldr	r2, [pc, #324]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002daa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002dae:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002db0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dcc:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de0:	4a42      	ldr	r2, [pc, #264]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dea:	4b40      	ldr	r3, [pc, #256]	; (8002eec <HAL_SD_MspInit+0x1a4>)
 8002dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002df8:	2340      	movs	r3, #64	; 0x40
 8002dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e10:	230b      	movs	r3, #11
 8002e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4834      	ldr	r0, [pc, #208]	; (8002ef0 <HAL_SD_MspInit+0x1a8>)
 8002e1e:	f004 ff51 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e3a:	230b      	movs	r3, #11
 8002e3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e44:	4619      	mov	r1, r3
 8002e46:	482a      	ldr	r0, [pc, #168]	; (8002ef0 <HAL_SD_MspInit+0x1a8>)
 8002e48:	f004 ff3c 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2303      	movs	r3, #3
 8002e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e66:	230b      	movs	r3, #11
 8002e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4820      	ldr	r0, [pc, #128]	; (8002ef4 <HAL_SD_MspInit+0x1ac>)
 8002e74:	f004 ff26 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e92:	230b      	movs	r3, #11
 8002e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4815      	ldr	r0, [pc, #84]	; (8002ef4 <HAL_SD_MspInit+0x1ac>)
 8002ea0:	f004 ff10 	bl	8007cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ea4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ec4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <HAL_SD_MspInit+0x1ac>)
 8002ecc:	f004 fefa 	bl	8007cc4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	207c      	movs	r0, #124	; 0x7c
 8002ed6:	f002 fa88 	bl	80053ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002eda:	207c      	movs	r0, #124	; 0x7c
 8002edc:	f002 fa9f 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002ee0:	bf00      	nop
 8002ee2:	37e8      	adds	r7, #232	; 0xe8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	48022400 	.word	0x48022400
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	58020c00 	.word	0x58020c00
 8002ef4:	58021800 	.word	0x58021800

08002ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08e      	sub	sp, #56	; 0x38
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_SPI_MspInit+0x15c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12e      	bne.n	8002f78 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f20:	4a4d      	ldr	r2, [pc, #308]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	4a46      	ldr	r2, [pc, #280]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f48:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f56:	23e0      	movs	r3, #224	; 0xe0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f66:	2305      	movs	r3, #5
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6e:	4619      	mov	r1, r3
 8002f70:	483a      	ldr	r0, [pc, #232]	; (800305c <HAL_SPI_MspInit+0x164>)
 8002f72:	f004 fea7 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f76:	e068      	b.n	800304a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a38      	ldr	r2, [pc, #224]	; (8003060 <HAL_SPI_MspInit+0x168>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12f      	bne.n	8002fe2 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f88:	4a33      	ldr	r2, [pc, #204]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fbe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fd0:	2305      	movs	r3, #5
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4822      	ldr	r0, [pc, #136]	; (8003064 <HAL_SPI_MspInit+0x16c>)
 8002fdc:	f004 fe72 	bl	8007cc4 <HAL_GPIO_Init>
}
 8002fe0:	e033      	b.n	800304a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_SPI_MspInit+0x170>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d12e      	bne.n	800304a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff2:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8002ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_SPI_MspInit+0x160>)
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003010:	4a11      	ldr	r2, [pc, #68]	; (8003058 <HAL_SPI_MspInit+0x160>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_SPI_MspInit+0x160>)
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003028:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800303a:	2306      	movs	r3, #6
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4619      	mov	r1, r3
 8003044:	4809      	ldr	r0, [pc, #36]	; (800306c <HAL_SPI_MspInit+0x174>)
 8003046:	f004 fe3d 	bl	8007cc4 <HAL_GPIO_Init>
}
 800304a:	bf00      	nop
 800304c:	3738      	adds	r7, #56	; 0x38
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40013000 	.word	0x40013000
 8003058:	58024400 	.word	0x58024400
 800305c:	58020000 	.word	0x58020000
 8003060:	40003800 	.word	0x40003800
 8003064:	58020400 	.word	0x58020400
 8003068:	40003c00 	.word	0x40003c00
 800306c:	58020800 	.word	0x58020800

08003070 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d15d      	bne.n	800314e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003092:	4b8e      	ldr	r3, [pc, #568]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003098:	4a8c      	ldr	r2, [pc, #560]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030a2:	4b8a      	ldr	r3, [pc, #552]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 80030a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b86      	ldr	r3, [pc, #536]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	4a85      	ldr	r2, [pc, #532]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c0:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030de:	2301      	movs	r3, #1
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	4879      	ldr	r0, [pc, #484]	; (80032d0 <HAL_TIM_PWM_MspInit+0x260>)
 80030ea:	f004 fdeb 	bl	8007cc4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80030ee:	4b79      	ldr	r3, [pc, #484]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 80030f0:	4a79      	ldr	r2, [pc, #484]	; (80032d8 <HAL_TIM_PWM_MspInit+0x268>)
 80030f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80030f4:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 80030f6:	2214      	movs	r2, #20
 80030f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003100:	4b74      	ldr	r3, [pc, #464]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800310e:	4b71      	ldr	r3, [pc, #452]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003114:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003116:	4b6f      	ldr	r3, [pc, #444]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800311e:	4b6d      	ldr	r3, [pc, #436]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003124:	4b6b      	ldr	r3, [pc, #428]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003126:	2200      	movs	r2, #0
 8003128:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312a:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 800312c:	2200      	movs	r2, #0
 800312e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003130:	4868      	ldr	r0, [pc, #416]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003132:	f002 f98f 	bl	8005454 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800313c:	f7ff fc32 	bl	80029a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a64      	ldr	r2, [pc, #400]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
 8003146:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_TIM_PWM_MspInit+0x264>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800314c:	e119      	b.n	8003382 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a62      	ldr	r2, [pc, #392]	; (80032dc <HAL_TIM_PWM_MspInit+0x26c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d16d      	bne.n	8003234 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003158:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 800315a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003168:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 800316a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003176:	4b5a      	ldr	r3, [pc, #360]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003178:	4a5a      	ldr	r2, [pc, #360]	; (80032e4 <HAL_TIM_PWM_MspInit+0x274>)
 800317a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800317c:	4b58      	ldr	r3, [pc, #352]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 800317e:	2218      	movs	r2, #24
 8003180:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003182:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003184:	2240      	movs	r2, #64	; 0x40
 8003186:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b55      	ldr	r3, [pc, #340]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003194:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003196:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 8003198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800319e:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031a4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80031a6:	4b4e      	ldr	r3, [pc, #312]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b2:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80031b8:	4849      	ldr	r0, [pc, #292]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031ba:	f002 f94b 	bl	8005454 <HAL_DMA_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80031c4:	f7ff fbee 	bl	80029a4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a45      	ldr	r2, [pc, #276]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
 80031ce:	4a44      	ldr	r2, [pc, #272]	; (80032e0 <HAL_TIM_PWM_MspInit+0x270>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80031d4:	4b44      	ldr	r3, [pc, #272]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031d6:	4a45      	ldr	r2, [pc, #276]	; (80032ec <HAL_TIM_PWM_MspInit+0x27c>)
 80031d8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80031da:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031dc:	2217      	movs	r2, #23
 80031de:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e6:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031f4:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031fa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 80031fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003202:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003204:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003216:	4834      	ldr	r0, [pc, #208]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 8003218:	f002 f91c 	bl	8005454 <HAL_DMA_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003222:	f7ff fbbf 	bl	80029a4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <HAL_TIM_PWM_MspInit+0x278>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003232:	e0a6      	b.n	8003382 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <HAL_TIM_PWM_MspInit+0x280>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d15e      	bne.n	80032fc <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_TIM_PWM_MspInit+0x25c>)
 8003250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 800325e:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <HAL_TIM_PWM_MspInit+0x288>)
 8003260:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003264:	221f      	movs	r2, #31
 8003266:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 800326a:	2240      	movs	r2, #64	; 0x40
 800326c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003274:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800327a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 800327e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003282:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800328a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 800329a:	2200      	movs	r2, #0
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800329e:	4815      	ldr	r0, [pc, #84]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 80032a0:	f002 f8d8 	bl	8005454 <HAL_DMA_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80032aa:	f7ff fb7b 	bl	80029a4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80032b4:	4a0f      	ldr	r2, [pc, #60]	; (80032f4 <HAL_TIM_PWM_MspInit+0x284>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	201e      	movs	r0, #30
 80032c0:	f002 f893 	bl	80053ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032c4:	201e      	movs	r0, #30
 80032c6:	f002 f8aa 	bl	800541e <HAL_NVIC_EnableIRQ>
}
 80032ca:	e05a      	b.n	8003382 <HAL_TIM_PWM_MspInit+0x312>
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58020000 	.word	0x58020000
 80032d4:	2400124c 	.word	0x2400124c
 80032d8:	40020028 	.word	0x40020028
 80032dc:	40000400 	.word	0x40000400
 80032e0:	240012c4 	.word	0x240012c4
 80032e4:	40020058 	.word	0x40020058
 80032e8:	2400133c 	.word	0x2400133c
 80032ec:	40020070 	.word	0x40020070
 80032f0:	40000800 	.word	0x40000800
 80032f4:	240013b4 	.word	0x240013b4
 80032f8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <HAL_TIM_PWM_MspInit+0x31c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d13d      	bne.n	8003382 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_TIM_PWM_MspInit+0x320>)
 8003308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800330c:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_TIM_PWM_MspInit+0x320>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_TIM_PWM_MspInit+0x320>)
 8003318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_TIM_PWM_MspInit+0x328>)
 8003328:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 800332c:	223a      	movs	r2, #58	; 0x3a
 800332e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 800333e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003342:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800334a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 800334e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003352:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003366:	480b      	ldr	r0, [pc, #44]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 8003368:	f002 f874 	bl	8005454 <HAL_DMA_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003372:	f7ff fb17 	bl	80029a4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_TIM_PWM_MspInit+0x324>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003382:	bf00      	nop
 8003384:	3730      	adds	r7, #48	; 0x30
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40000c00 	.word	0x40000c00
 8003390:	58024400 	.word	0x58024400
 8003394:	2400142c 	.word	0x2400142c
 8003398:	40020040 	.word	0x40020040

0800339c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_TIM_Base_MspInit+0x3c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10e      	bne.n	80033cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_TIM_Base_MspInit+0x40>)
 80033b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_TIM_Base_MspInit+0x40>)
 80033b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_TIM_Base_MspInit+0x40>)
 80033c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40001c00 	.word	0x40001c00
 80033dc:	58024400 	.word	0x58024400

080033e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d120      	bne.n	8003444 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003408:	4a50      	ldr	r2, [pc, #320]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003412:	4b4e      	ldr	r3, [pc, #312]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800342a:	2302      	movs	r3, #2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003432:	2301      	movs	r3, #1
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f107 031c 	add.w	r3, r7, #28
 800343a:	4619      	mov	r1, r3
 800343c:	4844      	ldr	r0, [pc, #272]	; (8003550 <HAL_TIM_MspPostInit+0x170>)
 800343e:	f004 fc41 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003442:	e07f      	b.n	8003544 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a42      	ldr	r2, [pc, #264]	; (8003554 <HAL_TIM_MspPostInit+0x174>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d11f      	bne.n	800348e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003454:	4a3d      	ldr	r2, [pc, #244]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800346c:	2330      	movs	r3, #48	; 0x30
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003474:	2302      	movs	r3, #2
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	2300      	movs	r3, #0
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800347c:	2302      	movs	r3, #2
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	f107 031c 	add.w	r3, r7, #28
 8003484:	4619      	mov	r1, r3
 8003486:	4832      	ldr	r0, [pc, #200]	; (8003550 <HAL_TIM_MspPostInit+0x170>)
 8003488:	f004 fc1c 	bl	8007cc4 <HAL_GPIO_Init>
}
 800348c:	e05a      	b.n	8003544 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a31      	ldr	r2, [pc, #196]	; (8003558 <HAL_TIM_MspPostInit+0x178>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d131      	bne.n	80034fc <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003498:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80034b6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	4822      	ldr	r0, [pc, #136]	; (800355c <HAL_TIM_MspPostInit+0x17c>)
 80034d4:	f004 fbf6 	bl	8007cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80034d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034e2:	2302      	movs	r3, #2
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034ea:	2302      	movs	r3, #2
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ee:	f107 031c 	add.w	r3, r7, #28
 80034f2:	4619      	mov	r1, r3
 80034f4:	4819      	ldr	r0, [pc, #100]	; (800355c <HAL_TIM_MspPostInit+0x17c>)
 80034f6:	f004 fbe5 	bl	8007cc4 <HAL_GPIO_Init>
}
 80034fa:	e023      	b.n	8003544 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_TIM_MspPostInit+0x180>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d11e      	bne.n	8003544 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350c:	4a0f      	ldr	r2, [pc, #60]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <HAL_TIM_MspPostInit+0x16c>)
 8003518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003524:	2308      	movs	r3, #8
 8003526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800352c:	2302      	movs	r3, #2
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	2300      	movs	r3, #0
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003534:	2302      	movs	r3, #2
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	4619      	mov	r1, r3
 800353e:	4809      	ldr	r0, [pc, #36]	; (8003564 <HAL_TIM_MspPostInit+0x184>)
 8003540:	f004 fbc0 	bl	8007cc4 <HAL_GPIO_Init>
}
 8003544:	bf00      	nop
 8003546:	3730      	adds	r7, #48	; 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024400 	.word	0x58024400
 8003550:	58020400 	.word	0x58020400
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	58020c00 	.word	0x58020c00
 8003560:	40000c00 	.word	0x40000c00
 8003564:	58020000 	.word	0x58020000

08003568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b0ba      	sub	sp, #232	; 0xe8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003580:	f107 0318 	add.w	r3, r7, #24
 8003584:	22b8      	movs	r2, #184	; 0xb8
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f013 fdf1 	bl	8017170 <memset>
  if(huart->Instance==UART4)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a4d      	ldr	r2, [pc, #308]	; (80036c8 <HAL_UART_MspInit+0x160>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d147      	bne.n	8003628 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003598:	f04f 0202 	mov.w	r2, #2
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035aa:	f107 0318 	add.w	r3, r7, #24
 80035ae:	4618      	mov	r0, r3
 80035b0:	f007 f976 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80035ba:	f7ff f9f3 	bl	80029a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80035be:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_UART_MspInit+0x164>)
 80035c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c4:	4a41      	ldr	r2, [pc, #260]	; (80036cc <HAL_UART_MspInit+0x164>)
 80035c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_UART_MspInit+0x164>)
 80035d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035dc:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <HAL_UART_MspInit+0x164>)
 80035de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e2:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <HAL_UART_MspInit+0x164>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_UART_MspInit+0x164>)
 80035ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003614:	2308      	movs	r3, #8
 8003616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800361e:	4619      	mov	r1, r3
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <HAL_UART_MspInit+0x168>)
 8003622:	f004 fb4f 	bl	8007cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003626:	e04a      	b.n	80036be <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <HAL_UART_MspInit+0x16c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d145      	bne.n	80036be <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003632:	f04f 0201 	mov.w	r2, #1
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003644:	f107 0318 	add.w	r3, r7, #24
 8003648:	4618      	mov	r0, r3
 800364a:	f007 f929 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003654:	f7ff f9a6 	bl	80029a4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_UART_MspInit+0x164>)
 800365a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_UART_MspInit+0x164>)
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_UART_MspInit+0x164>)
 800366a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_UART_MspInit+0x164>)
 8003678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367c:	4a13      	ldr	r2, [pc, #76]	; (80036cc <HAL_UART_MspInit+0x164>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_UART_MspInit+0x164>)
 8003688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003694:	23c0      	movs	r3, #192	; 0xc0
 8003696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80036ac:	2307      	movs	r3, #7
 80036ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4807      	ldr	r0, [pc, #28]	; (80036d8 <HAL_UART_MspInit+0x170>)
 80036ba:	f004 fb03 	bl	8007cc4 <HAL_GPIO_Init>
}
 80036be:	bf00      	nop
 80036c0:	37e8      	adds	r7, #232	; 0xe8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40004c00 	.word	0x40004c00
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58020400 	.word	0x58020400
 80036d4:	40011400 	.word	0x40011400
 80036d8:	58020800 	.word	0x58020800

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e0:	e7fe      	b.n	80036e0 <NMI_Handler+0x4>

080036e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <HardFault_Handler+0x4>

080036e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036ec:	e7fe      	b.n	80036ec <MemManage_Handler+0x4>

080036ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f2:	e7fe      	b.n	80036f2 <BusFault_Handler+0x4>

080036f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <UsageFault_Handler+0x4>

080036fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003728:	f000 f9ba 	bl	8003aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}

08003730 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <DMA1_Stream0_IRQHandler+0x10>)
 8003736:	f002 fc4f 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	240013b4 	.word	0x240013b4

08003744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <DMA1_Stream1_IRQHandler+0x10>)
 800374a:	f002 fc45 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2400124c 	.word	0x2400124c

08003758 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <DMA1_Stream2_IRQHandler+0x10>)
 800375e:	f002 fc3b 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2400142c 	.word	0x2400142c

0800376c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <DMA1_Stream3_IRQHandler+0x10>)
 8003772:	f002 fc31 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	240012c4 	.word	0x240012c4

08003780 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <DMA1_Stream4_IRQHandler+0x10>)
 8003786:	f002 fc27 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2400133c 	.word	0x2400133c

08003794 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <DMA1_Stream5_IRQHandler+0x10>)
 800379a:	f002 fc1d 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	24000cd8 	.word	0x24000cd8

080037a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <TIM4_IRQHandler+0x10>)
 80037ae:	f00c fa59 	bl	800fc64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	24001168 	.word	0x24001168

080037bc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <I2C2_EV_IRQHandler+0x10>)
 80037c2:	f004 fce9 	bl	8008198 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	24000e68 	.word	0x24000e68

080037d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <DMA2_Stream7_IRQHandler+0x10>)
 80037d6:	f002 fbff 	bl	8005fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	24000d50 	.word	0x24000d50

080037e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <OTG_HS_IRQHandler+0x10>)
 80037ea:	f004 fedf 	bl	80085ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	24002ad0 	.word	0x24002ad0

080037f8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <SDMMC2_IRQHandler+0x10>)
 80037fe:	f009 fea5 	bl	800d54c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	24000ebc 	.word	0x24000ebc

0800380c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <_sbrk+0x5c>)
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <_sbrk+0x60>)
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <_sbrk+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <_sbrk+0x64>)
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <_sbrk+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_sbrk+0x64>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d207      	bcs.n	800384c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800383c:	f013 fca0 	bl	8017180 <__errno>
 8003840:	4603      	mov	r3, r0
 8003842:	220c      	movs	r2, #12
 8003844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	e009      	b.n	8003860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <_sbrk+0x64>)
 800385c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385e:	68fb      	ldr	r3, [r7, #12]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	24050000 	.word	0x24050000
 800386c:	00000800 	.word	0x00000800
 8003870:	240015cc 	.word	0x240015cc
 8003874:	24003348 	.word	0x24003348

08003878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800387c:	4b32      	ldr	r3, [pc, #200]	; (8003948 <SystemInit+0xd0>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	4a31      	ldr	r2, [pc, #196]	; (8003948 <SystemInit+0xd0>)
 8003884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800388c:	4b2f      	ldr	r3, [pc, #188]	; (800394c <SystemInit+0xd4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	2b06      	cmp	r3, #6
 8003896:	d807      	bhi.n	80038a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <SystemInit+0xd4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 030f 	bic.w	r3, r3, #15
 80038a0:	4a2a      	ldr	r2, [pc, #168]	; (800394c <SystemInit+0xd4>)
 80038a2:	f043 0307 	orr.w	r3, r3, #7
 80038a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <SystemInit+0xd8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <SystemInit+0xd8>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <SystemInit+0xd8>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <SystemInit+0xd8>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4924      	ldr	r1, [pc, #144]	; (8003950 <SystemInit+0xd8>)
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <SystemInit+0xdc>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <SystemInit+0xd4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <SystemInit+0xd4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 030f 	bic.w	r3, r3, #15
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <SystemInit+0xd4>)
 80038dc:	f043 0307 	orr.w	r3, r3, #7
 80038e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80038e2:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <SystemInit+0xd8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <SystemInit+0xd8>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <SystemInit+0xd8>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038f4:	4b16      	ldr	r3, [pc, #88]	; (8003950 <SystemInit+0xd8>)
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <SystemInit+0xe0>)
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <SystemInit+0xd8>)
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <SystemInit+0xe4>)
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <SystemInit+0xd8>)
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <SystemInit+0xe8>)
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <SystemInit+0xd8>)
 8003908:	2200      	movs	r2, #0
 800390a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <SystemInit+0xd8>)
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <SystemInit+0xe8>)
 8003910:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <SystemInit+0xd8>)
 8003914:	2200      	movs	r2, #0
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <SystemInit+0xd8>)
 800391a:	4a11      	ldr	r2, [pc, #68]	; (8003960 <SystemInit+0xe8>)
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <SystemInit+0xd8>)
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <SystemInit+0xd8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a09      	ldr	r2, [pc, #36]	; (8003950 <SystemInit+0xd8>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <SystemInit+0xd8>)
 8003932:	2200      	movs	r2, #0
 8003934:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <SystemInit+0xec>)
 8003938:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800393c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00
 800394c:	52002000 	.word	0x52002000
 8003950:	58024400 	.word	0x58024400
 8003954:	eaf6ed7f 	.word	0xeaf6ed7f
 8003958:	02020200 	.word	0x02020200
 800395c:	01ff0000 	.word	0x01ff0000
 8003960:	01010280 	.word	0x01010280
 8003964:	52004000 	.word	0x52004000

08003968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800396c:	f7ff ff84 	bl	8003878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003972:	490d      	ldr	r1, [pc, #52]	; (80039a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003988:	4c0a      	ldr	r4, [pc, #40]	; (80039b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003996:	f013 fbf9 	bl	801718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399a:	f7fd fd51 	bl	8001440 <main>
  bx  lr
 800399e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80039a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039a8:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 80039ac:	08018790 	.word	0x08018790
  ldr r2, =_sbss
 80039b0:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 80039b4:	24003344 	.word	0x24003344

080039b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b8:	e7fe      	b.n	80039b8 <ADC3_IRQHandler>
	...

080039bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c2:	2003      	movs	r0, #3
 80039c4:	f001 fd06 	bl	80053d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039c8:	f006 fd94 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_Init+0x68>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	4913      	ldr	r1, [pc, #76]	; (8003a28 <HAL_Init+0x6c>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
 80039e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <HAL_Init+0x68>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_Init+0x6c>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <HAL_Init+0x70>)
 80039fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_Init+0x74>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a06:	200f      	movs	r0, #15
 8003a08:	f000 f814 	bl	8003a34 <HAL_InitTick>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e002      	b.n	8003a1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a16:	f7fe ffcb 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58024400 	.word	0x58024400
 8003a28:	080185dc 	.word	0x080185dc
 8003a2c:	24000004 	.word	0x24000004
 8003a30:	24000000 	.word	0x24000000

08003a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a3c:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <HAL_InitTick+0x60>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e021      	b.n	8003a8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_InitTick+0x64>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_InitTick+0x60>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 fceb 	bl	800543a <HAL_SYSTICK_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00e      	b.n	8003a8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d80a      	bhi.n	8003a8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a74:	2200      	movs	r2, #0
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f001 fcb5 	bl	80053ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a80:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <HAL_InitTick+0x68>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	2400000c 	.word	0x2400000c
 8003a98:	24000000 	.word	0x24000000
 8003a9c:	24000008 	.word	0x24000008

08003aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_IncTick+0x20>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_IncTick+0x24>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_IncTick+0x24>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2400000c 	.word	0x2400000c
 8003ac4:	240015d0 	.word	0x240015d0

08003ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return uwTick;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_GetTick+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	240015d0 	.word	0x240015d0

08003ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7ff ffee 	bl	8003ac8 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d005      	beq.n	8003b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_Delay+0x44>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b06:	bf00      	nop
 8003b08:	f7ff ffde 	bl	8003ac8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d8f7      	bhi.n	8003b08 <HAL_Delay+0x28>
  {
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2400000c 	.word	0x2400000c

08003b28 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	4904      	ldr	r1, [pc, #16]	; (8003b50 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	58000400 	.word	0x58000400

08003b54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3360      	adds	r3, #96	; 0x60
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <LL_ADC_SetOffset+0x60>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10b      	bne.n	8003bf8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003bf6:	e00b      	b.n	8003c10 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	58026000 	.word	0x58026000

08003c20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	461a      	mov	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	611a      	str	r2, [r3, #16]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3360      	adds	r3, #96	; 0x60
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	601a      	str	r2, [r3, #0]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58026000 	.word	0x58026000

08003cc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <LL_ADC_SetOffsetSaturation+0x40>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10e      	bne.n	8003cf6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3360      	adds	r3, #96	; 0x60
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	58026000 	.word	0x58026000

08003d08 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <LL_ADC_SetOffsetSign+0x40>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10e      	bne.n	8003d3a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3360      	adds	r3, #96	; 0x60
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	58026000 	.word	0x58026000

08003d4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3360      	adds	r3, #96	; 0x60
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a0c      	ldr	r2, [pc, #48]	; (8003d9c <LL_ADC_SetOffsetState+0x50>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d7e:	e007      	b.n	8003d90 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	58026000 	.word	0x58026000

08003da0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3330      	adds	r3, #48	; 0x30
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	4413      	add	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	211f      	movs	r1, #31
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0e9b      	lsrs	r3, r3, #26
 8003dd8:	f003 011f 	and.w	r1, r3, #31
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	431a      	orrs	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3314      	adds	r3, #20
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	0e5b      	lsrs	r3, r3, #25
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	4413      	add	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0d1b      	lsrs	r3, r3, #20
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	2107      	movs	r1, #7
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	0d1b      	lsrs	r3, r3, #20
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d115      	bne.n	8003e90 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e70:	43db      	mvns	r3, r3
 8003e72:	401a      	ands	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0318 	and.w	r3, r3, #24
 8003e7a:	4914      	ldr	r1, [pc, #80]	; (8003ecc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e7c:	40d9      	lsrs	r1, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	400b      	ands	r3, r1
 8003e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e8e:	e014      	b.n	8003eba <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0318 	and.w	r3, r3, #24
 8003ea6:	4909      	ldr	r1, [pc, #36]	; (8003ecc <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ea8:	40d9      	lsrs	r1, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	400b      	ands	r3, r1
 8003eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	58026000 	.word	0x58026000
 8003ecc:	000fffff 	.word	0x000fffff

08003ed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6093      	str	r3, [r2, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	5fffffc0 	.word	0x5fffffc0

08003ef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f08:	d101      	bne.n	8003f0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	6fffffc0 	.word	0x6fffffc0

08003f44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f58:	d101      	bne.n	8003f5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <LL_ADC_IsEnabled+0x18>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <LL_ADC_IsEnabled+0x1a>
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d101      	bne.n	8003faa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d101      	bne.n	8003fd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1ee      	b.n	80043d8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7fe fceb 	bl	80029e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff67 	bl	8003ef4 <LL_ADC_IsDeepPowerDownEnabled>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff4d 	bl	8003ed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ff82 	bl	8003f44 <LL_ADC_IsInternalRegulatorEnabled>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d114      	bne.n	8004070 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff66 	bl	8003f1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004050:	4b8e      	ldr	r3, [pc, #568]	; (800428c <HAL_ADC_Init+0x2ac>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	4a8e      	ldr	r2, [pc, #568]	; (8004290 <HAL_ADC_Init+0x2b0>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	3301      	adds	r3, #1
 8004060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004062:	e002      	b.n	800406a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3b01      	subs	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f9      	bne.n	8004064 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff65 	bl	8003f44 <LL_ADC_IsInternalRegulatorEnabled>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10d      	bne.n	800409c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004090:	f043 0201 	orr.w	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff76 	bl	8003f92 <LL_ADC_REG_IsConversionOngoing>
 80040a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 8188 	bne.w	80043c6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 8184 	bne.w	80043c6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040c6:	f043 0202 	orr.w	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff4a 	bl	8003f6c <LL_ADC_IsEnabled>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d136      	bne.n	800414c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6c      	ldr	r2, [pc, #432]	; (8004294 <HAL_ADC_Init+0x2b4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_ADC_Init+0x112>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a6a      	ldr	r2, [pc, #424]	; (8004298 <HAL_ADC_Init+0x2b8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10e      	bne.n	8004110 <HAL_ADC_Init+0x130>
 80040f2:	4868      	ldr	r0, [pc, #416]	; (8004294 <HAL_ADC_Init+0x2b4>)
 80040f4:	f7ff ff3a 	bl	8003f6c <LL_ADC_IsEnabled>
 80040f8:	4604      	mov	r4, r0
 80040fa:	4867      	ldr	r0, [pc, #412]	; (8004298 <HAL_ADC_Init+0x2b8>)
 80040fc:	f7ff ff36 	bl	8003f6c <LL_ADC_IsEnabled>
 8004100:	4603      	mov	r3, r0
 8004102:	4323      	orrs	r3, r4
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e008      	b.n	8004122 <HAL_ADC_Init+0x142>
 8004110:	4862      	ldr	r0, [pc, #392]	; (800429c <HAL_ADC_Init+0x2bc>)
 8004112:	f7ff ff2b 	bl	8003f6c <LL_ADC_IsEnabled>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d012      	beq.n	800414c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5a      	ldr	r2, [pc, #360]	; (8004294 <HAL_ADC_Init+0x2b4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_ADC_Init+0x15a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_ADC_Init+0x2b8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_ADC_Init+0x15e>
 800413a:	4a59      	ldr	r2, [pc, #356]	; (80042a0 <HAL_ADC_Init+0x2c0>)
 800413c:	e000      	b.n	8004140 <HAL_ADC_Init+0x160>
 800413e:	4a59      	ldr	r2, [pc, #356]	; (80042a4 <HAL_ADC_Init+0x2c4>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7ff fd04 	bl	8003b54 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_ADC_Init+0x2bc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d129      	bne.n	80041aa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7e5b      	ldrb	r3, [r3, #25]
 800415a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004160:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004166:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d013      	beq.n	8004198 <HAL_ADC_Init+0x1b8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b0c      	cmp	r3, #12
 8004176:	d00d      	beq.n	8004194 <HAL_ADC_Init+0x1b4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b1c      	cmp	r3, #28
 800417e:	d007      	beq.n	8004190 <HAL_ADC_Init+0x1b0>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b18      	cmp	r3, #24
 8004186:	d101      	bne.n	800418c <HAL_ADC_Init+0x1ac>
 8004188:	2318      	movs	r3, #24
 800418a:	e006      	b.n	800419a <HAL_ADC_Init+0x1ba>
 800418c:	2300      	movs	r3, #0
 800418e:	e004      	b.n	800419a <HAL_ADC_Init+0x1ba>
 8004190:	2310      	movs	r3, #16
 8004192:	e002      	b.n	800419a <HAL_ADC_Init+0x1ba>
 8004194:	2308      	movs	r3, #8
 8004196:	e000      	b.n	800419a <HAL_ADC_Init+0x1ba>
 8004198:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800419a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e00e      	b.n	80041c8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7e5b      	ldrb	r3, [r3, #25]
 80041ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80041ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d106      	bne.n	80041e0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	3b01      	subs	r3, #1
 80041d8:	045b      	lsls	r3, r3, #17
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <HAL_ADC_Init+0x2bc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d115      	bne.n	8004232 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_ADC_Init+0x2c8>)
 800420e:	4013      	ands	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	69b9      	ldr	r1, [r7, #24]
 8004216:	430b      	orrs	r3, r1
 8004218:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	e009      	b.n	8004246 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_ADC_Init+0x2cc>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	69b9      	ldr	r1, [r7, #24]
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fea1 	bl	8003f92 <LL_ADC_REG_IsConversionOngoing>
 8004250:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff feae 	bl	8003fb8 <LL_ADC_INJ_IsConversionOngoing>
 800425c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f040 808e 	bne.w	8004382 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 808a 	bne.w	8004382 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <HAL_ADC_Init+0x2bc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d11b      	bne.n	80042b0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7e1b      	ldrb	r3, [r3, #24]
 800427c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004284:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	e018      	b.n	80042be <HAL_ADC_Init+0x2de>
 800428c:	24000000 	.word	0x24000000
 8004290:	053e2d63 	.word	0x053e2d63
 8004294:	40022000 	.word	0x40022000
 8004298:	40022100 	.word	0x40022100
 800429c:	58026000 	.word	0x58026000
 80042a0:	40022300 	.word	0x40022300
 80042a4:	58026300 	.word	0x58026300
 80042a8:	fff04007 	.word	0xfff04007
 80042ac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7e1b      	ldrb	r3, [r3, #24]
 80042b4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_ADC_Init+0x400>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	430b      	orrs	r3, r1
 80042d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d137      	bne.n	800434c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <HAL_ADC_Init+0x404>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d116      	bne.n	800431a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_ADC_Init+0x408>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800430a:	430a      	orrs	r2, r1
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	611a      	str	r2, [r3, #16]
 8004318:	e020      	b.n	800435c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_ADC_Init+0x40c>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004328:	3a01      	subs	r2, #1
 800432a:	0411      	lsls	r1, r2, #16
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800433c:	430a      	orrs	r2, r1
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0201 	orr.w	r2, r2, #1
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	e007      	b.n	800435c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <HAL_ADC_Init+0x404>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d002      	beq.n	8004382 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fd63 	bl	8004e48 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d10c      	bne.n	80043a4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	f023 010f 	bic.w	r1, r3, #15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	1e5a      	subs	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
 80043a2:	e007      	b.n	80043b4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020f 	bic.w	r2, r2, #15
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	f043 0201 	orr.w	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60
 80043c4:	e007      	b.n	80043d6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f043 0210 	orr.w	r2, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3724      	adds	r7, #36	; 0x24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd90      	pop	{r4, r7, pc}
 80043e0:	ffffbffc 	.word	0xffffbffc
 80043e4:	58026000 	.word	0x58026000
 80043e8:	fc00f81f 	.word	0xfc00f81f
 80043ec:	fc00f81e 	.word	0xfc00f81e

080043f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b0b9      	sub	sp, #228	; 0xe4
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800440a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4aa9      	ldr	r2, [pc, #676]	; (80046b8 <HAL_ADC_ConfigChannel+0x2c8>)
 8004412:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x34>
 800441e:	2302      	movs	r3, #2
 8004420:	f000 bcfa 	b.w	8004e18 <HAL_ADC_ConfigChannel+0xa28>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fdae 	bl	8003f92 <LL_ADC_REG_IsConversionOngoing>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	f040 84de 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a9e      	ldr	r2, [pc, #632]	; (80046bc <HAL_ADC_ConfigChannel+0x2cc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d033      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x76>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	2201      	movs	r2, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	e01d      	b.n	80044a2 <HAL_ADC_ConfigChannel+0xb2>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800447a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800447e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e004      	b.n	8004498 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800448e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2201      	movs	r2, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	69d1      	ldr	r1, [r2, #28]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	f7ff fc6f 	bl	8003da0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fd63 	bl	8003f92 <LL_ADC_REG_IsConversionOngoing>
 80044cc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fd6f 	bl	8003fb8 <LL_ADC_INJ_IsConversionOngoing>
 80044da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8270 	bne.w	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 826b 	bne.w	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7ff fc7a 	bl	8003df8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6c      	ldr	r2, [pc, #432]	; (80046bc <HAL_ADC_ConfigChannel+0x2cc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10d      	bne.n	800452a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004528:	e032      	b.n	8004590 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_ADC_ConfigChannel+0x2d0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004536:	d10b      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x160>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	e01d      	b.n	800458c <HAL_ADC_ConfigChannel+0x19c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x186>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	e00a      	b.n	800458c <HAL_ADC_ConfigChannel+0x19c>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d048      	beq.n	800462a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6919      	ldr	r1, [r3, #16]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a8:	f7ff fb08 	bl	8003bbc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a42      	ldr	r2, [pc, #264]	; (80046bc <HAL_ADC_ConfigChannel+0x2cc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d119      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6919      	ldr	r1, [r3, #16]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7ff fba0 	bl	8003d08 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6919      	ldr	r1, [r3, #16]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x1f0>
 80045da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045de:	e000      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x1f2>
 80045e0:	2300      	movs	r3, #0
 80045e2:	461a      	mov	r2, r3
 80045e4:	f7ff fb6e 	bl	8003cc4 <LL_ADC_SetOffsetSaturation>
 80045e8:	e1ee      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x212>
 80045fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004600:	e000      	b.n	8004604 <HAL_ADC_ConfigChannel+0x214>
 8004602:	2300      	movs	r3, #0
 8004604:	461a      	mov	r2, r3
 8004606:	f7ff fb3b 	bl	8003c80 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6919      	ldr	r1, [r3, #16]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	7e1b      	ldrb	r3, [r3, #24]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d102      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x230>
 800461a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800461e:	e000      	b.n	8004622 <HAL_ADC_ConfigChannel+0x232>
 8004620:	2300      	movs	r3, #0
 8004622:	461a      	mov	r2, r3
 8004624:	f7ff fb12 	bl	8003c4c <LL_ADC_SetDataRightShift>
 8004628:	e1ce      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a23      	ldr	r2, [pc, #140]	; (80046bc <HAL_ADC_ConfigChannel+0x2cc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	f040 8181 	bne.w	8004938 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff faef 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 8004642:	4603      	mov	r3, r0
 8004644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x272>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fae4 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 8004658:	4603      	mov	r3, r0
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	e01e      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x2b0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fad9 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004680:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004690:	2320      	movs	r3, #32
 8004692:	e004      	b.n	800469e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x2d4>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	e01e      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x306>
 80046b8:	47ff0000 	.word	0x47ff0000
 80046bc:	58026000 	.word	0x58026000
 80046c0:	5c001000 	.word	0x5c001000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80046d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80046e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80046e8:	2320      	movs	r3, #32
 80046ea:	e004      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80046ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d106      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fb22 	bl	8003d4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fa86 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x344>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2101      	movs	r1, #1
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fa7b 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 800472a:	4603      	mov	r3, r0
 800472c:	0e9b      	lsrs	r3, r3, #26
 800472e:	f003 021f 	and.w	r2, r3, #31
 8004732:	e01e      	b.n	8004772 <HAL_ADC_ConfigChannel+0x382>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2101      	movs	r1, #1
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fa70 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 8004740:	4603      	mov	r3, r0
 8004742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800475a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004762:	2320      	movs	r3, #32
 8004764:	e004      	b.n	8004770 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_ADC_ConfigChannel+0x39a>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	e018      	b.n	80047bc <HAL_ADC_ConfigChannel+0x3cc>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800479e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80047a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e004      	b.n	80047bc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80047b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	429a      	cmp	r2, r3
 80047be:	d106      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fabf 	bl	8003d4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fa23 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 80047da:	4603      	mov	r3, r0
 80047dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x40a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2102      	movs	r1, #2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fa18 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 80047f0:	4603      	mov	r3, r0
 80047f2:	0e9b      	lsrs	r3, r3, #26
 80047f4:	f003 021f 	and.w	r2, r3, #31
 80047f8:	e01e      	b.n	8004838 <HAL_ADC_ConfigChannel+0x448>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2102      	movs	r1, #2
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fa0d 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 8004806:	4603      	mov	r3, r0
 8004808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800481c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004828:	2320      	movs	r3, #32
 800482a:	e004      	b.n	8004836 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800482c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x460>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	e014      	b.n	800487a <HAL_ADC_ConfigChannel+0x48a>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004858:	fa93 f3a3 	rbit	r3, r3
 800485c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800485e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800486c:	2320      	movs	r3, #32
 800486e:	e004      	b.n	800487a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	429a      	cmp	r2, r3
 800487c:	d106      	bne.n	800488c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fa60 	bl	8003d4c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2103      	movs	r1, #3
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff f9c4 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 8004898:	4603      	mov	r3, r0
 800489a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x4c8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2103      	movs	r1, #3
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff f9b9 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 80048ae:	4603      	mov	r3, r0
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	f003 021f 	and.w	r2, r3, #31
 80048b6:	e017      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x4f8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2103      	movs	r1, #3
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff f9ae 	bl	8003c20 <LL_ADC_GetOffsetChannel>
 80048c4:	4603      	mov	r3, r0
 80048c6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80048d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e003      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80048de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x510>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0e9b      	lsrs	r3, r3, #26
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	e011      	b.n	8004924 <HAL_ADC_ConfigChannel+0x534>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800490e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004910:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004918:	2320      	movs	r3, #32
 800491a:	e003      	b.n	8004924 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800491c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800491e:	fab3 f383 	clz	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	429a      	cmp	r2, r3
 8004926:	d14f      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	2103      	movs	r1, #3
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fa0b 	bl	8003d4c <LL_ADC_SetOffsetState>
 8004936:	e047      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	069b      	lsls	r3, r3, #26
 8004948:	429a      	cmp	r2, r3
 800494a:	d107      	bne.n	800495c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800495a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	069b      	lsls	r3, r3, #26
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800497e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	069b      	lsls	r3, r3, #26
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	069b      	lsls	r3, r3, #26
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d107      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff facd 	bl	8003f6c <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f040 8219 	bne.w	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7ff fa32 	bl	8003e50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4aa1      	ldr	r2, [pc, #644]	; (8004c78 <HAL_ADC_ConfigChannel+0x888>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f040 812e 	bne.w	8004c54 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x630>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2b09      	cmp	r3, #9
 8004a16:	bf94      	ite	ls
 8004a18:	2301      	movls	r3, #1
 8004a1a:	2300      	movhi	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e019      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x664>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2b09      	cmp	r3, #9
 8004a4c:	bf94      	ite	ls
 8004a4e:	2301      	movls	r3, #1
 8004a50:	2300      	movhi	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d079      	beq.n	8004b4c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x684>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	069b      	lsls	r3, r3, #26
 8004a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a72:	e015      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x6b0>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a84:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a8c:	2320      	movs	r3, #32
 8004a8e:	e003      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	069b      	lsls	r3, r3, #26
 8004a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x6d0>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0e9b      	lsrs	r3, r3, #26
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	e017      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x700>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac8:	fa93 f3a3 	rbit	r3, r3
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ad8:	2320      	movs	r3, #32
 8004ada:	e003      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	ea42 0103 	orr.w	r1, r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x726>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	3301      	adds	r3, #1
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	051b      	lsls	r3, r3, #20
 8004b14:	e018      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x758>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	e003      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f003 021f 	and.w	r2, r3, #31
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	e07e      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x778>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0e9b      	lsrs	r3, r3, #26
 8004b5e:	3301      	adds	r3, #1
 8004b60:	069b      	lsls	r3, r3, #26
 8004b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b66:	e015      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x7a4>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b80:	2320      	movs	r3, #32
 8004b82:	e003      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	069b      	lsls	r3, r3, #26
 8004b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x7c4>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0e9b      	lsrs	r3, r3, #26
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	e017      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x7f4>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	61bb      	str	r3, [r7, #24]
  return result;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004bcc:	2320      	movs	r3, #32
 8004bce:	e003      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f303 	lsl.w	r3, r1, r3
 8004be4:	ea42 0103 	orr.w	r1, r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x820>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0e9b      	lsrs	r3, r3, #26
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	3b1e      	subs	r3, #30
 8004c08:	051b      	lsls	r3, r3, #20
 8004c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	e01b      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x858>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	fa93 f3a3 	rbit	r3, r3
 8004c1c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004c28:	2320      	movs	r3, #32
 8004c2a:	e003      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3301      	adds	r3, #1
 8004c36:	f003 021f 	and.w	r2, r3, #31
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	3b1e      	subs	r3, #30
 8004c42:	051b      	lsls	r3, r3, #20
 8004c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7ff f8d2 	bl	8003df8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f280 80d7 	bge.w	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a06      	ldr	r2, [pc, #24]	; (8004c7c <HAL_ADC_ConfigChannel+0x88c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_ADC_ConfigChannel+0x882>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <HAL_ADC_ConfigChannel+0x890>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x898>
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_ADC_ConfigChannel+0x894>)
 8004c74:	e009      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x89a>
 8004c76:	bf00      	nop
 8004c78:	47ff0000 	.word	0x47ff0000
 8004c7c:	40022000 	.word	0x40022000
 8004c80:	40022100 	.word	0x40022100
 8004c84:	40022300 	.word	0x40022300
 8004c88:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_ADC_ConfigChannel+0xa30>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe ff88 	bl	8003ba0 <LL_ADC_GetCommonPathInternalCh>
 8004c90:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a62      	ldr	r2, [pc, #392]	; (8004e24 <HAL_ADC_ConfigChannel+0xa34>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_ADC_ConfigChannel+0x8b8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a61      	ldr	r2, [pc, #388]	; (8004e28 <HAL_ADC_ConfigChannel+0xa38>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d10e      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x8d6>
 8004ca8:	485e      	ldr	r0, [pc, #376]	; (8004e24 <HAL_ADC_ConfigChannel+0xa34>)
 8004caa:	f7ff f95f 	bl	8003f6c <LL_ADC_IsEnabled>
 8004cae:	4604      	mov	r4, r0
 8004cb0:	485d      	ldr	r0, [pc, #372]	; (8004e28 <HAL_ADC_ConfigChannel+0xa38>)
 8004cb2:	f7ff f95b 	bl	8003f6c <LL_ADC_IsEnabled>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4323      	orrs	r3, r4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	e008      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x8e8>
 8004cc6:	4859      	ldr	r0, [pc, #356]	; (8004e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8004cc8:	f7ff f950 	bl	8003f6c <LL_ADC_IsEnabled>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8084 	beq.w	8004de6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <HAL_ADC_ConfigChannel+0xa40>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d132      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x95e>
 8004ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d12c      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f040 8086 	bne.w	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a47      	ldr	r2, [pc, #284]	; (8004e24 <HAL_ADC_ConfigChannel+0xa34>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_ADC_ConfigChannel+0x924>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a46      	ldr	r2, [pc, #280]	; (8004e28 <HAL_ADC_ConfigChannel+0xa38>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x928>
 8004d14:	4a47      	ldr	r2, [pc, #284]	; (8004e34 <HAL_ADC_ConfigChannel+0xa44>)
 8004d16:	e000      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x92a>
 8004d18:	4a41      	ldr	r2, [pc, #260]	; (8004e20 <HAL_ADC_ConfigChannel+0xa30>)
 8004d1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7fe ff28 	bl	8003b7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_ADC_ConfigChannel+0xa48>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	4a42      	ldr	r2, [pc, #264]	; (8004e3c <HAL_ADC_ConfigChannel+0xa4c>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	3301      	adds	r3, #1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d3e:	e002      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f9      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d4c:	e05e      	b.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <HAL_ADC_ConfigChannel+0xa50>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d120      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x9aa>
 8004d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11a      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a30      	ldr	r2, [pc, #192]	; (8004e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d14e      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <HAL_ADC_ConfigChannel+0xa34>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_ADC_ConfigChannel+0x992>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <HAL_ADC_ConfigChannel+0xa38>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x996>
 8004d82:	4a2c      	ldr	r2, [pc, #176]	; (8004e34 <HAL_ADC_ConfigChannel+0xa44>)
 8004d84:	e000      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x998>
 8004d86:	4a26      	ldr	r2, [pc, #152]	; (8004e20 <HAL_ADC_ConfigChannel+0xa30>)
 8004d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fe fef1 	bl	8003b7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d98:	e038      	b.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a29      	ldr	r2, [pc, #164]	; (8004e44 <HAL_ADC_ConfigChannel+0xa54>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d133      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
 8004da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d12d      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <HAL_ADC_ConfigChannel+0xa3c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d128      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <HAL_ADC_ConfigChannel+0xa34>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x9de>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_ADC_ConfigChannel+0xa38>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x9e2>
 8004dce:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_ADC_ConfigChannel+0xa44>)
 8004dd0:	e000      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x9e4>
 8004dd2:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <HAL_ADC_ConfigChannel+0xa30>)
 8004dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fecb 	bl	8003b7a <LL_ADC_SetCommonPathInternalCh>
 8004de4:	e012      	b.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004df8:	e008      	b.n	8004e0c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	f043 0220 	orr.w	r2, r3, #32
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e14:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	37e4      	adds	r7, #228	; 0xe4
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}
 8004e20:	58026300 	.word	0x58026300
 8004e24:	40022000 	.word	0x40022000
 8004e28:	40022100 	.word	0x40022100
 8004e2c:	58026000 	.word	0x58026000
 8004e30:	c7520000 	.word	0xc7520000
 8004e34:	40022300 	.word	0x40022300
 8004e38:	24000000 	.word	0x24000000
 8004e3c:	053e2d63 	.word	0x053e2d63
 8004e40:	c3210000 	.word	0xc3210000
 8004e44:	cb840000 	.word	0xcb840000

08004e48 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6c      	ldr	r2, [pc, #432]	; (8005008 <ADC_ConfigureBoostMode+0x1c0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <ADC_ConfigureBoostMode+0x1c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a6b      	ldr	r2, [pc, #428]	; (800500c <ADC_ConfigureBoostMode+0x1c4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d109      	bne.n	8004e78 <ADC_ConfigureBoostMode+0x30>
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <ADC_ConfigureBoostMode+0x1c8>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e008      	b.n	8004e8a <ADC_ConfigureBoostMode+0x42>
 8004e78:	4b66      	ldr	r3, [pc, #408]	; (8005014 <ADC_ConfigureBoostMode+0x1cc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01c      	beq.n	8004ec8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e8e:	f005 fcab 	bl	800a7e8 <HAL_RCC_GetHCLKFreq>
 8004e92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e9c:	d010      	beq.n	8004ec0 <ADC_ConfigureBoostMode+0x78>
 8004e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ea2:	d873      	bhi.n	8004f8c <ADC_ConfigureBoostMode+0x144>
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d002      	beq.n	8004eb0 <ADC_ConfigureBoostMode+0x68>
 8004eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eae:	d16d      	bne.n	8004f8c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
        break;
 8004ebe:	e068      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	60fb      	str	r3, [r7, #12]
        break;
 8004ec6:	e064      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ec8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	f006 fe86 	bl	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ed4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ede:	d051      	beq.n	8004f84 <ADC_ConfigureBoostMode+0x13c>
 8004ee0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ee4:	d854      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004ee6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004eea:	d047      	beq.n	8004f7c <ADC_ConfigureBoostMode+0x134>
 8004eec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ef0:	d84e      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004ef2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ef6:	d03d      	beq.n	8004f74 <ADC_ConfigureBoostMode+0x12c>
 8004ef8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004efc:	d848      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f02:	d033      	beq.n	8004f6c <ADC_ConfigureBoostMode+0x124>
 8004f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f08:	d842      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004f0a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f0e:	d029      	beq.n	8004f64 <ADC_ConfigureBoostMode+0x11c>
 8004f10:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f14:	d83c      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004f16:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f1a:	d01a      	beq.n	8004f52 <ADC_ConfigureBoostMode+0x10a>
 8004f1c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f20:	d836      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004f22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f26:	d014      	beq.n	8004f52 <ADC_ConfigureBoostMode+0x10a>
 8004f28:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f2c:	d830      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f32:	d00e      	beq.n	8004f52 <ADC_ConfigureBoostMode+0x10a>
 8004f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f38:	d82a      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004f3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f3e:	d008      	beq.n	8004f52 <ADC_ConfigureBoostMode+0x10a>
 8004f40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f44:	d824      	bhi.n	8004f90 <ADC_ConfigureBoostMode+0x148>
 8004f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f4a:	d002      	beq.n	8004f52 <ADC_ConfigureBoostMode+0x10a>
 8004f4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f50:	d11e      	bne.n	8004f90 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	0c9b      	lsrs	r3, r3, #18
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	60fb      	str	r3, [r7, #12]
        break;
 8004f62:	e016      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
        break;
 8004f6a:	e012      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	60fb      	str	r3, [r7, #12]
        break;
 8004f72:	e00e      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	60fb      	str	r3, [r7, #12]
        break;
 8004f7a:	e00a      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	09db      	lsrs	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
        break;
 8004f82:	e006      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	60fb      	str	r3, [r7, #12]
        break;
 8004f8a:	e002      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e000      	b.n	8004f92 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f90:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <ADC_ConfigureBoostMode+0x1d0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d808      	bhi.n	8004fb2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004fb0:	e025      	b.n	8004ffe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <ADC_ConfigureBoostMode+0x1d4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d80a      	bhi.n	8004fd0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fcc:	609a      	str	r2, [r3, #8]
}
 8004fce:	e016      	b.n	8004ffe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a13      	ldr	r2, [pc, #76]	; (8005020 <ADC_ConfigureBoostMode+0x1d8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d80a      	bhi.n	8004fee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	e007      	b.n	8004ffe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ffc:	609a      	str	r2, [r3, #8]
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40022000 	.word	0x40022000
 800500c:	40022100 	.word	0x40022100
 8005010:	40022300 	.word	0x40022300
 8005014:	58026300 	.word	0x58026300
 8005018:	005f5e10 	.word	0x005f5e10
 800501c:	00bebc20 	.word	0x00bebc20
 8005020:	017d7840 	.word	0x017d7840

08005024 <LL_ADC_IsEnabled>:
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <LL_ADC_IsEnabled+0x18>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <LL_ADC_IsEnabled+0x1a>
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <LL_ADC_REG_IsConversionOngoing>:
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d101      	bne.n	8005062 <LL_ADC_REG_IsConversionOngoing+0x18>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b0a3      	sub	sp, #140	; 0x8c
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e0c1      	b.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
 800509c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5e      	ldr	r2, [pc, #376]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d102      	bne.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050a8:	4b5d      	ldr	r3, [pc, #372]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e001      	b.n	80050b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0a0      	b.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ffb9 	bl	800504a <LL_ADC_REG_IsConversionOngoing>
 80050d8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ffb2 	bl	800504a <LL_ADC_REG_IsConversionOngoing>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 8081 	bne.w	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80050ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d17c      	bne.n	80051f0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a48      	ldr	r2, [pc, #288]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a46      	ldr	r2, [pc, #280]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800510a:	4b46      	ldr	r3, [pc, #280]	; (8005224 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800510c:	e000      	b.n	8005110 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800510e:	4b46      	ldr	r3, [pc, #280]	; (8005228 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005110:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d039      	beq.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800511a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	431a      	orrs	r2, r3
 8005128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800512a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a3a      	ldr	r2, [pc, #232]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a39      	ldr	r2, [pc, #228]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10e      	bne.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005140:	4836      	ldr	r0, [pc, #216]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005142:	f7ff ff6f 	bl	8005024 <LL_ADC_IsEnabled>
 8005146:	4604      	mov	r4, r0
 8005148:	4835      	ldr	r0, [pc, #212]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800514a:	f7ff ff6b 	bl	8005024 <LL_ADC_IsEnabled>
 800514e:	4603      	mov	r3, r0
 8005150:	4323      	orrs	r3, r4
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e008      	b.n	8005170 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800515e:	4833      	ldr	r0, [pc, #204]	; (800522c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005160:	f7ff ff60 	bl	8005024 <LL_ADC_IsEnabled>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d047      	beq.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800517a:	4013      	ands	r3, r2
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	6811      	ldr	r1, [r2, #0]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	6892      	ldr	r2, [r2, #8]
 8005184:	430a      	orrs	r2, r1
 8005186:	431a      	orrs	r2, r3
 8005188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800518a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800518c:	e03a      	b.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800518e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005198:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10e      	bne.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80051ae:	481b      	ldr	r0, [pc, #108]	; (800521c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051b0:	f7ff ff38 	bl	8005024 <LL_ADC_IsEnabled>
 80051b4:	4604      	mov	r4, r0
 80051b6:	481a      	ldr	r0, [pc, #104]	; (8005220 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051b8:	f7ff ff34 	bl	8005024 <LL_ADC_IsEnabled>
 80051bc:	4603      	mov	r3, r0
 80051be:	4323      	orrs	r3, r4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	e008      	b.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80051cc:	4817      	ldr	r0, [pc, #92]	; (800522c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80051ce:	f7ff ff29 	bl	8005024 <LL_ADC_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ee:	e009      	b.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	f043 0220 	orr.w	r2, r3, #32
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005202:	e000      	b.n	8005206 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005204:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800520e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005212:	4618      	mov	r0, r3
 8005214:	378c      	adds	r7, #140	; 0x8c
 8005216:	46bd      	mov	sp, r7
 8005218:	bd90      	pop	{r4, r7, pc}
 800521a:	bf00      	nop
 800521c:	40022000 	.word	0x40022000
 8005220:	40022100 	.word	0x40022100
 8005224:	40022300 	.word	0x40022300
 8005228:	58026300 	.word	0x58026300
 800522c:	58026000 	.word	0x58026000
 8005230:	fffff0e0 	.word	0xfffff0e0

08005234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005244:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <__NVIC_SetPriorityGrouping+0x40>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005250:	4013      	ands	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <__NVIC_SetPriorityGrouping+0x44>)
 800525e:	4313      	orrs	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005262:	4a04      	ldr	r2, [pc, #16]	; (8005274 <__NVIC_SetPriorityGrouping+0x40>)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	60d3      	str	r3, [r2, #12]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	e000ed00 	.word	0xe000ed00
 8005278:	05fa0000 	.word	0x05fa0000

0800527c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <__NVIC_GetPriorityGrouping+0x18>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 0307 	and.w	r3, r3, #7
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db0b      	blt.n	80052c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	4907      	ldr	r1, [pc, #28]	; (80052d0 <__NVIC_EnableIRQ+0x38>)
 80052b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2001      	movs	r0, #1
 80052ba:	fa00 f202 	lsl.w	r2, r0, r2
 80052be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e100 	.word	0xe000e100

080052d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	6039      	str	r1, [r7, #0]
 80052de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	db0a      	blt.n	80052fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	490c      	ldr	r1, [pc, #48]	; (8005320 <__NVIC_SetPriority+0x4c>)
 80052ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f2:	0112      	lsls	r2, r2, #4
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	440b      	add	r3, r1
 80052f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052fc:	e00a      	b.n	8005314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4908      	ldr	r1, [pc, #32]	; (8005324 <__NVIC_SetPriority+0x50>)
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	3b04      	subs	r3, #4
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	440b      	add	r3, r1
 8005312:	761a      	strb	r2, [r3, #24]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000e100 	.word	0xe000e100
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005328:	b480      	push	{r7}
 800532a:	b089      	sub	sp, #36	; 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f1c3 0307 	rsb	r3, r3, #7
 8005342:	2b04      	cmp	r3, #4
 8005344:	bf28      	it	cs
 8005346:	2304      	movcs	r3, #4
 8005348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3304      	adds	r3, #4
 800534e:	2b06      	cmp	r3, #6
 8005350:	d902      	bls.n	8005358 <NVIC_EncodePriority+0x30>
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3b03      	subs	r3, #3
 8005356:	e000      	b.n	800535a <NVIC_EncodePriority+0x32>
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	f04f 32ff 	mov.w	r2, #4294967295
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43da      	mvns	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	401a      	ands	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005370:	f04f 31ff 	mov.w	r1, #4294967295
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	43d9      	mvns	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005380:	4313      	orrs	r3, r2
         );
}
 8005382:	4618      	mov	r0, r3
 8005384:	3724      	adds	r7, #36	; 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3b01      	subs	r3, #1
 800539c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053a0:	d301      	bcc.n	80053a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053a2:	2301      	movs	r3, #1
 80053a4:	e00f      	b.n	80053c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <SysTick_Config+0x40>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ae:	210f      	movs	r1, #15
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	f7ff ff8e 	bl	80052d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <SysTick_Config+0x40>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <SysTick_Config+0x40>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	e000e010 	.word	0xe000e010

080053d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ff29 	bl	8005234 <__NVIC_SetPriorityGrouping>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b086      	sub	sp, #24
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053f8:	f7ff ff40 	bl	800527c <__NVIC_GetPriorityGrouping>
 80053fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	6978      	ldr	r0, [r7, #20]
 8005404:	f7ff ff90 	bl	8005328 <NVIC_EncodePriority>
 8005408:	4602      	mov	r2, r0
 800540a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff5f 	bl	80052d4 <__NVIC_SetPriority>
}
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	4603      	mov	r3, r0
 8005426:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff33 	bl	8005298 <__NVIC_EnableIRQ>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff ffa4 	bl	8005390 <SysTick_Config>
 8005448:	4603      	mov	r3, r0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7fe fb34 	bl	8003ac8 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e312      	b.n	8005a92 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a66      	ldr	r2, [pc, #408]	; (800560c <HAL_DMA_Init+0x1b8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04a      	beq.n	800550c <HAL_DMA_Init+0xb8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a65      	ldr	r2, [pc, #404]	; (8005610 <HAL_DMA_Init+0x1bc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d045      	beq.n	800550c <HAL_DMA_Init+0xb8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a63      	ldr	r2, [pc, #396]	; (8005614 <HAL_DMA_Init+0x1c0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d040      	beq.n	800550c <HAL_DMA_Init+0xb8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a62      	ldr	r2, [pc, #392]	; (8005618 <HAL_DMA_Init+0x1c4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d03b      	beq.n	800550c <HAL_DMA_Init+0xb8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a60      	ldr	r2, [pc, #384]	; (800561c <HAL_DMA_Init+0x1c8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d036      	beq.n	800550c <HAL_DMA_Init+0xb8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5f      	ldr	r2, [pc, #380]	; (8005620 <HAL_DMA_Init+0x1cc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d031      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5d      	ldr	r2, [pc, #372]	; (8005624 <HAL_DMA_Init+0x1d0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02c      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5c      	ldr	r2, [pc, #368]	; (8005628 <HAL_DMA_Init+0x1d4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d027      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5a      	ldr	r2, [pc, #360]	; (800562c <HAL_DMA_Init+0x1d8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d022      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a59      	ldr	r2, [pc, #356]	; (8005630 <HAL_DMA_Init+0x1dc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a57      	ldr	r2, [pc, #348]	; (8005634 <HAL_DMA_Init+0x1e0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a56      	ldr	r2, [pc, #344]	; (8005638 <HAL_DMA_Init+0x1e4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a54      	ldr	r2, [pc, #336]	; (800563c <HAL_DMA_Init+0x1e8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a53      	ldr	r2, [pc, #332]	; (8005640 <HAL_DMA_Init+0x1ec>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_DMA_Init+0xb8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a51      	ldr	r2, [pc, #324]	; (8005644 <HAL_DMA_Init+0x1f0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_DMA_Init+0xb8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a50      	ldr	r2, [pc, #320]	; (8005648 <HAL_DMA_Init+0x1f4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d101      	bne.n	8005510 <HAL_DMA_Init+0xbc>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_DMA_Init+0xbe>
 8005510:	2300      	movs	r3, #0
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 813c 	beq.w	8005790 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a37      	ldr	r2, [pc, #220]	; (800560c <HAL_DMA_Init+0x1b8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d04a      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a36      	ldr	r2, [pc, #216]	; (8005610 <HAL_DMA_Init+0x1bc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d045      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a34      	ldr	r2, [pc, #208]	; (8005614 <HAL_DMA_Init+0x1c0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d040      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a33      	ldr	r2, [pc, #204]	; (8005618 <HAL_DMA_Init+0x1c4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d03b      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a31      	ldr	r2, [pc, #196]	; (800561c <HAL_DMA_Init+0x1c8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d036      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a30      	ldr	r2, [pc, #192]	; (8005620 <HAL_DMA_Init+0x1cc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d031      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <HAL_DMA_Init+0x1d0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d02c      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <HAL_DMA_Init+0x1d4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d027      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2b      	ldr	r2, [pc, #172]	; (800562c <HAL_DMA_Init+0x1d8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d022      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2a      	ldr	r2, [pc, #168]	; (8005630 <HAL_DMA_Init+0x1dc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d01d      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <HAL_DMA_Init+0x1e0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d018      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HAL_DMA_Init+0x1e4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <HAL_DMA_Init+0x1e8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a24      	ldr	r2, [pc, #144]	; (8005640 <HAL_DMA_Init+0x1ec>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <HAL_DMA_Init+0x1f0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_DMA_Init+0x174>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a21      	ldr	r2, [pc, #132]	; (8005648 <HAL_DMA_Init+0x1f4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d108      	bne.n	80055da <HAL_DMA_Init+0x186>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e007      	b.n	80055ea <HAL_DMA_Init+0x196>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055ea:	e02f      	b.n	800564c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ec:	f7fe fa6c 	bl	8003ac8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d928      	bls.n	800564c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e242      	b.n	8005a92 <HAL_DMA_Init+0x63e>
 800560c:	40020010 	.word	0x40020010
 8005610:	40020028 	.word	0x40020028
 8005614:	40020040 	.word	0x40020040
 8005618:	40020058 	.word	0x40020058
 800561c:	40020070 	.word	0x40020070
 8005620:	40020088 	.word	0x40020088
 8005624:	400200a0 	.word	0x400200a0
 8005628:	400200b8 	.word	0x400200b8
 800562c:	40020410 	.word	0x40020410
 8005630:	40020428 	.word	0x40020428
 8005634:	40020440 	.word	0x40020440
 8005638:	40020458 	.word	0x40020458
 800563c:	40020470 	.word	0x40020470
 8005640:	40020488 	.word	0x40020488
 8005644:	400204a0 	.word	0x400204a0
 8005648:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1c8      	bne.n	80055ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4b83      	ldr	r3, [pc, #524]	; (8005874 <HAL_DMA_Init+0x420>)
 8005666:	4013      	ands	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005672:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b04      	cmp	r3, #4
 800569e:	d107      	bne.n	80056b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	4313      	orrs	r3, r2
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b28      	cmp	r3, #40	; 0x28
 80056b6:	d903      	bls.n	80056c0 <HAL_DMA_Init+0x26c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b2e      	cmp	r3, #46	; 0x2e
 80056be:	d91f      	bls.n	8005700 <HAL_DMA_Init+0x2ac>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b3e      	cmp	r3, #62	; 0x3e
 80056c6:	d903      	bls.n	80056d0 <HAL_DMA_Init+0x27c>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b42      	cmp	r3, #66	; 0x42
 80056ce:	d917      	bls.n	8005700 <HAL_DMA_Init+0x2ac>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b46      	cmp	r3, #70	; 0x46
 80056d6:	d903      	bls.n	80056e0 <HAL_DMA_Init+0x28c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b48      	cmp	r3, #72	; 0x48
 80056de:	d90f      	bls.n	8005700 <HAL_DMA_Init+0x2ac>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b4e      	cmp	r3, #78	; 0x4e
 80056e6:	d903      	bls.n	80056f0 <HAL_DMA_Init+0x29c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b52      	cmp	r3, #82	; 0x52
 80056ee:	d907      	bls.n	8005700 <HAL_DMA_Init+0x2ac>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b73      	cmp	r3, #115	; 0x73
 80056f6:	d905      	bls.n	8005704 <HAL_DMA_Init+0x2b0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b77      	cmp	r3, #119	; 0x77
 80056fe:	d801      	bhi.n	8005704 <HAL_DMA_Init+0x2b0>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <HAL_DMA_Init+0x2b2>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005710:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0307 	bic.w	r3, r3, #7
 8005728:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b04      	cmp	r3, #4
 800573a:	d117      	bne.n	800576c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fdca 	bl	80072e8 <DMA_CheckFifoParam>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2240      	movs	r2, #64	; 0x40
 800575e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e192      	b.n	8005a92 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fd05 	bl	8007184 <DMA_CalcBaseAndBitshift>
 800577a:	4603      	mov	r3, r0
 800577c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	223f      	movs	r2, #63	; 0x3f
 8005788:	409a      	lsls	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	e0c8      	b.n	8005922 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a38      	ldr	r2, [pc, #224]	; (8005878 <HAL_DMA_Init+0x424>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d022      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a37      	ldr	r2, [pc, #220]	; (800587c <HAL_DMA_Init+0x428>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d01d      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a35      	ldr	r2, [pc, #212]	; (8005880 <HAL_DMA_Init+0x42c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d018      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a34      	ldr	r2, [pc, #208]	; (8005884 <HAL_DMA_Init+0x430>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d013      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a32      	ldr	r2, [pc, #200]	; (8005888 <HAL_DMA_Init+0x434>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00e      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a31      	ldr	r2, [pc, #196]	; (800588c <HAL_DMA_Init+0x438>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d009      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <HAL_DMA_Init+0x43c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_DMA_Init+0x38c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <HAL_DMA_Init+0x440>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d101      	bne.n	80057e4 <HAL_DMA_Init+0x390>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <HAL_DMA_Init+0x392>
 80057e4:	2300      	movs	r3, #0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8092 	beq.w	8005910 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a21      	ldr	r2, [pc, #132]	; (8005878 <HAL_DMA_Init+0x424>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d021      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a20      	ldr	r2, [pc, #128]	; (800587c <HAL_DMA_Init+0x428>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01c      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <HAL_DMA_Init+0x42c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d017      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <HAL_DMA_Init+0x430>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d012      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <HAL_DMA_Init+0x434>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00d      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1a      	ldr	r2, [pc, #104]	; (800588c <HAL_DMA_Init+0x438>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d008      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <HAL_DMA_Init+0x43c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <HAL_DMA_Init+0x3e6>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a17      	ldr	r2, [pc, #92]	; (8005894 <HAL_DMA_Init+0x440>)
 8005838:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4b10      	ldr	r3, [pc, #64]	; (8005898 <HAL_DMA_Init+0x444>)
 8005856:	4013      	ands	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d01c      	beq.n	800589c <HAL_DMA_Init+0x448>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d102      	bne.n	8005870 <HAL_DMA_Init+0x41c>
 800586a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800586e:	e016      	b.n	800589e <HAL_DMA_Init+0x44a>
 8005870:	2300      	movs	r3, #0
 8005872:	e014      	b.n	800589e <HAL_DMA_Init+0x44a>
 8005874:	fe10803f 	.word	0xfe10803f
 8005878:	58025408 	.word	0x58025408
 800587c:	5802541c 	.word	0x5802541c
 8005880:	58025430 	.word	0x58025430
 8005884:	58025444 	.word	0x58025444
 8005888:	58025458 	.word	0x58025458
 800588c:	5802546c 	.word	0x5802546c
 8005890:	58025480 	.word	0x58025480
 8005894:	58025494 	.word	0x58025494
 8005898:	fffe000f 	.word	0xfffe000f
 800589c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68d2      	ldr	r2, [r2, #12]
 80058a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80058c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80058cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b6e      	ldr	r3, [pc, #440]	; (8005a9c <HAL_DMA_Init+0x648>)
 80058e4:	4413      	add	r3, r2
 80058e6:	4a6e      	ldr	r2, [pc, #440]	; (8005aa0 <HAL_DMA_Init+0x64c>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	009a      	lsls	r2, r3, #2
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fc45 	bl	8007184 <DMA_CalcBaseAndBitshift>
 80058fa:	4603      	mov	r3, r0
 80058fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	2201      	movs	r2, #1
 8005908:	409a      	lsls	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	e008      	b.n	8005922 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2240      	movs	r2, #64	; 0x40
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2203      	movs	r2, #3
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e0b7      	b.n	8005a92 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5f      	ldr	r2, [pc, #380]	; (8005aa4 <HAL_DMA_Init+0x650>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d072      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a5d      	ldr	r2, [pc, #372]	; (8005aa8 <HAL_DMA_Init+0x654>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d06d      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a5c      	ldr	r2, [pc, #368]	; (8005aac <HAL_DMA_Init+0x658>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d068      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a5a      	ldr	r2, [pc, #360]	; (8005ab0 <HAL_DMA_Init+0x65c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d063      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a59      	ldr	r2, [pc, #356]	; (8005ab4 <HAL_DMA_Init+0x660>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d05e      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a57      	ldr	r2, [pc, #348]	; (8005ab8 <HAL_DMA_Init+0x664>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d059      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a56      	ldr	r2, [pc, #344]	; (8005abc <HAL_DMA_Init+0x668>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d054      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a54      	ldr	r2, [pc, #336]	; (8005ac0 <HAL_DMA_Init+0x66c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04f      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a53      	ldr	r2, [pc, #332]	; (8005ac4 <HAL_DMA_Init+0x670>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d04a      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a51      	ldr	r2, [pc, #324]	; (8005ac8 <HAL_DMA_Init+0x674>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d045      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a50      	ldr	r2, [pc, #320]	; (8005acc <HAL_DMA_Init+0x678>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d040      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a4e      	ldr	r2, [pc, #312]	; (8005ad0 <HAL_DMA_Init+0x67c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d03b      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a4d      	ldr	r2, [pc, #308]	; (8005ad4 <HAL_DMA_Init+0x680>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d036      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a4b      	ldr	r2, [pc, #300]	; (8005ad8 <HAL_DMA_Init+0x684>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d031      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a4a      	ldr	r2, [pc, #296]	; (8005adc <HAL_DMA_Init+0x688>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d02c      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a48      	ldr	r2, [pc, #288]	; (8005ae0 <HAL_DMA_Init+0x68c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d027      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a47      	ldr	r2, [pc, #284]	; (8005ae4 <HAL_DMA_Init+0x690>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a45      	ldr	r2, [pc, #276]	; (8005ae8 <HAL_DMA_Init+0x694>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a44      	ldr	r2, [pc, #272]	; (8005aec <HAL_DMA_Init+0x698>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a42      	ldr	r2, [pc, #264]	; (8005af0 <HAL_DMA_Init+0x69c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a41      	ldr	r2, [pc, #260]	; (8005af4 <HAL_DMA_Init+0x6a0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a3f      	ldr	r2, [pc, #252]	; (8005af8 <HAL_DMA_Init+0x6a4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a3e      	ldr	r2, [pc, #248]	; (8005afc <HAL_DMA_Init+0x6a8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_DMA_Init+0x5be>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <HAL_DMA_Init+0x6ac>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_DMA_Init+0x5c2>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_DMA_Init+0x5c4>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d032      	beq.n	8005a82 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fcdf 	bl	80073e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d102      	bne.n	8005a30 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <HAL_DMA_Init+0x61c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d80c      	bhi.n	8005a70 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fd5c 	bl	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	e008      	b.n	8005a82 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	a7fdabf8 	.word	0xa7fdabf8
 8005aa0:	cccccccd 	.word	0xcccccccd
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	40020070 	.word	0x40020070
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	400200a0 	.word	0x400200a0
 8005ac0:	400200b8 	.word	0x400200b8
 8005ac4:	40020410 	.word	0x40020410
 8005ac8:	40020428 	.word	0x40020428
 8005acc:	40020440 	.word	0x40020440
 8005ad0:	40020458 	.word	0x40020458
 8005ad4:	40020470 	.word	0x40020470
 8005ad8:	40020488 	.word	0x40020488
 8005adc:	400204a0 	.word	0x400204a0
 8005ae0:	400204b8 	.word	0x400204b8
 8005ae4:	58025408 	.word	0x58025408
 8005ae8:	5802541c 	.word	0x5802541c
 8005aec:	58025430 	.word	0x58025430
 8005af0:	58025444 	.word	0x58025444
 8005af4:	58025458 	.word	0x58025458
 8005af8:	5802546c 	.word	0x5802546c
 8005afc:	58025480 	.word	0x58025480
 8005b00:	58025494 	.word	0x58025494

08005b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e226      	b.n	8005f6e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_DMA_Start_IT+0x2a>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e21f      	b.n	8005f6e <HAL_DMA_Start_IT+0x46a>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	f040 820a 	bne.w	8005f58 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a68      	ldr	r2, [pc, #416]	; (8005cf8 <HAL_DMA_Start_IT+0x1f4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d04a      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a66      	ldr	r2, [pc, #408]	; (8005cfc <HAL_DMA_Start_IT+0x1f8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d045      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a65      	ldr	r2, [pc, #404]	; (8005d00 <HAL_DMA_Start_IT+0x1fc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d040      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a63      	ldr	r2, [pc, #396]	; (8005d04 <HAL_DMA_Start_IT+0x200>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d03b      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a62      	ldr	r2, [pc, #392]	; (8005d08 <HAL_DMA_Start_IT+0x204>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d036      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a60      	ldr	r2, [pc, #384]	; (8005d0c <HAL_DMA_Start_IT+0x208>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d031      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a5f      	ldr	r2, [pc, #380]	; (8005d10 <HAL_DMA_Start_IT+0x20c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d02c      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5d      	ldr	r2, [pc, #372]	; (8005d14 <HAL_DMA_Start_IT+0x210>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d027      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5c      	ldr	r2, [pc, #368]	; (8005d18 <HAL_DMA_Start_IT+0x214>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d022      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a5a      	ldr	r2, [pc, #360]	; (8005d1c <HAL_DMA_Start_IT+0x218>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a59      	ldr	r2, [pc, #356]	; (8005d20 <HAL_DMA_Start_IT+0x21c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d018      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a57      	ldr	r2, [pc, #348]	; (8005d24 <HAL_DMA_Start_IT+0x220>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_DMA_Start_IT+0x224>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a54      	ldr	r2, [pc, #336]	; (8005d2c <HAL_DMA_Start_IT+0x228>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a53      	ldr	r2, [pc, #332]	; (8005d30 <HAL_DMA_Start_IT+0x22c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <HAL_DMA_Start_IT+0xee>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <HAL_DMA_Start_IT+0x230>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d108      	bne.n	8005c04 <HAL_DMA_Start_IT+0x100>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e007      	b.n	8005c14 <HAL_DMA_Start_IT+0x110>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f001 f906 	bl	8006e2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a34      	ldr	r2, [pc, #208]	; (8005cf8 <HAL_DMA_Start_IT+0x1f4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d04a      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <HAL_DMA_Start_IT+0x1f8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d045      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a31      	ldr	r2, [pc, #196]	; (8005d00 <HAL_DMA_Start_IT+0x1fc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d040      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a30      	ldr	r2, [pc, #192]	; (8005d04 <HAL_DMA_Start_IT+0x200>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d03b      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <HAL_DMA_Start_IT+0x204>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d036      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2d      	ldr	r2, [pc, #180]	; (8005d0c <HAL_DMA_Start_IT+0x208>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d031      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a2b      	ldr	r2, [pc, #172]	; (8005d10 <HAL_DMA_Start_IT+0x20c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d02c      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <HAL_DMA_Start_IT+0x210>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d027      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <HAL_DMA_Start_IT+0x214>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <HAL_DMA_Start_IT+0x218>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d01d      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <HAL_DMA_Start_IT+0x21c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <HAL_DMA_Start_IT+0x220>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <HAL_DMA_Start_IT+0x224>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <HAL_DMA_Start_IT+0x228>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <HAL_DMA_Start_IT+0x22c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x1bc>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <HAL_DMA_Start_IT+0x230>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_DMA_Start_IT+0x1c0>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_DMA_Start_IT+0x1c2>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d036      	beq.n	8005d38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 021e 	bic.w	r2, r3, #30
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0216 	orr.w	r2, r2, #22
 8005cdc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d03e      	beq.n	8005d64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0208 	orr.w	r2, r2, #8
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e035      	b.n	8005d64 <HAL_DMA_Start_IT+0x260>
 8005cf8:	40020010 	.word	0x40020010
 8005cfc:	40020028 	.word	0x40020028
 8005d00:	40020040 	.word	0x40020040
 8005d04:	40020058 	.word	0x40020058
 8005d08:	40020070 	.word	0x40020070
 8005d0c:	40020088 	.word	0x40020088
 8005d10:	400200a0 	.word	0x400200a0
 8005d14:	400200b8 	.word	0x400200b8
 8005d18:	40020410 	.word	0x40020410
 8005d1c:	40020428 	.word	0x40020428
 8005d20:	40020440 	.word	0x40020440
 8005d24:	40020458 	.word	0x40020458
 8005d28:	40020470 	.word	0x40020470
 8005d2c:	40020488 	.word	0x40020488
 8005d30:	400204a0 	.word	0x400204a0
 8005d34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f023 020e 	bic.w	r2, r3, #14
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 020a 	orr.w	r2, r2, #10
 8005d4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0204 	orr.w	r2, r2, #4
 8005d62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a83      	ldr	r2, [pc, #524]	; (8005f78 <HAL_DMA_Start_IT+0x474>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d072      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a82      	ldr	r2, [pc, #520]	; (8005f7c <HAL_DMA_Start_IT+0x478>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d06d      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a80      	ldr	r2, [pc, #512]	; (8005f80 <HAL_DMA_Start_IT+0x47c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d068      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a7f      	ldr	r2, [pc, #508]	; (8005f84 <HAL_DMA_Start_IT+0x480>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d063      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a7d      	ldr	r2, [pc, #500]	; (8005f88 <HAL_DMA_Start_IT+0x484>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d05e      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7c      	ldr	r2, [pc, #496]	; (8005f8c <HAL_DMA_Start_IT+0x488>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d059      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7a      	ldr	r2, [pc, #488]	; (8005f90 <HAL_DMA_Start_IT+0x48c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d054      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a79      	ldr	r2, [pc, #484]	; (8005f94 <HAL_DMA_Start_IT+0x490>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d04f      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a77      	ldr	r2, [pc, #476]	; (8005f98 <HAL_DMA_Start_IT+0x494>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d04a      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a76      	ldr	r2, [pc, #472]	; (8005f9c <HAL_DMA_Start_IT+0x498>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d045      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a74      	ldr	r2, [pc, #464]	; (8005fa0 <HAL_DMA_Start_IT+0x49c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a73      	ldr	r2, [pc, #460]	; (8005fa4 <HAL_DMA_Start_IT+0x4a0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d03b      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a71      	ldr	r2, [pc, #452]	; (8005fa8 <HAL_DMA_Start_IT+0x4a4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d036      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a70      	ldr	r2, [pc, #448]	; (8005fac <HAL_DMA_Start_IT+0x4a8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d031      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6e      	ldr	r2, [pc, #440]	; (8005fb0 <HAL_DMA_Start_IT+0x4ac>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02c      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6d      	ldr	r2, [pc, #436]	; (8005fb4 <HAL_DMA_Start_IT+0x4b0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6b      	ldr	r2, [pc, #428]	; (8005fb8 <HAL_DMA_Start_IT+0x4b4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6a      	ldr	r2, [pc, #424]	; (8005fbc <HAL_DMA_Start_IT+0x4b8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a68      	ldr	r2, [pc, #416]	; (8005fc0 <HAL_DMA_Start_IT+0x4bc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a67      	ldr	r2, [pc, #412]	; (8005fc4 <HAL_DMA_Start_IT+0x4c0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a65      	ldr	r2, [pc, #404]	; (8005fc8 <HAL_DMA_Start_IT+0x4c4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a64      	ldr	r2, [pc, #400]	; (8005fcc <HAL_DMA_Start_IT+0x4c8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a62      	ldr	r2, [pc, #392]	; (8005fd0 <HAL_DMA_Start_IT+0x4cc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_Start_IT+0x350>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a61      	ldr	r2, [pc, #388]	; (8005fd4 <HAL_DMA_Start_IT+0x4d0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d101      	bne.n	8005e58 <HAL_DMA_Start_IT+0x354>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <HAL_DMA_Start_IT+0x356>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01a      	beq.n	8005e94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a37      	ldr	r2, [pc, #220]	; (8005f78 <HAL_DMA_Start_IT+0x474>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d04a      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a36      	ldr	r2, [pc, #216]	; (8005f7c <HAL_DMA_Start_IT+0x478>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d045      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a34      	ldr	r2, [pc, #208]	; (8005f80 <HAL_DMA_Start_IT+0x47c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_DMA_Start_IT+0x480>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d03b      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <HAL_DMA_Start_IT+0x484>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d036      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a30      	ldr	r2, [pc, #192]	; (8005f8c <HAL_DMA_Start_IT+0x488>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <HAL_DMA_Start_IT+0x48c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2d      	ldr	r2, [pc, #180]	; (8005f94 <HAL_DMA_Start_IT+0x490>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d027      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <HAL_DMA_Start_IT+0x494>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <HAL_DMA_Start_IT+0x498>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01d      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a28      	ldr	r2, [pc, #160]	; (8005fa0 <HAL_DMA_Start_IT+0x49c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d018      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a27      	ldr	r2, [pc, #156]	; (8005fa4 <HAL_DMA_Start_IT+0x4a0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a25      	ldr	r2, [pc, #148]	; (8005fa8 <HAL_DMA_Start_IT+0x4a4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00e      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a24      	ldr	r2, [pc, #144]	; (8005fac <HAL_DMA_Start_IT+0x4a8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <HAL_DMA_Start_IT+0x4ac>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_DMA_Start_IT+0x430>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <HAL_DMA_Start_IT+0x4b0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <HAL_DMA_Start_IT+0x442>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e012      	b.n	8005f6c <HAL_DMA_Start_IT+0x468>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0201 	orr.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e009      	b.n	8005f6c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40020010 	.word	0x40020010
 8005f7c:	40020028 	.word	0x40020028
 8005f80:	40020040 	.word	0x40020040
 8005f84:	40020058 	.word	0x40020058
 8005f88:	40020070 	.word	0x40020070
 8005f8c:	40020088 	.word	0x40020088
 8005f90:	400200a0 	.word	0x400200a0
 8005f94:	400200b8 	.word	0x400200b8
 8005f98:	40020410 	.word	0x40020410
 8005f9c:	40020428 	.word	0x40020428
 8005fa0:	40020440 	.word	0x40020440
 8005fa4:	40020458 	.word	0x40020458
 8005fa8:	40020470 	.word	0x40020470
 8005fac:	40020488 	.word	0x40020488
 8005fb0:	400204a0 	.word	0x400204a0
 8005fb4:	400204b8 	.word	0x400204b8
 8005fb8:	58025408 	.word	0x58025408
 8005fbc:	5802541c 	.word	0x5802541c
 8005fc0:	58025430 	.word	0x58025430
 8005fc4:	58025444 	.word	0x58025444
 8005fc8:	58025458 	.word	0x58025458
 8005fcc:	5802546c 	.word	0x5802546c
 8005fd0:	58025480 	.word	0x58025480
 8005fd4:	58025494 	.word	0x58025494

08005fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08a      	sub	sp, #40	; 0x28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fe4:	4b67      	ldr	r3, [pc, #412]	; (8006184 <HAL_DMA_IRQHandler+0x1ac>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a67      	ldr	r2, [pc, #412]	; (8006188 <HAL_DMA_IRQHandler+0x1b0>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	0a9b      	lsrs	r3, r3, #10
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a5f      	ldr	r2, [pc, #380]	; (800618c <HAL_DMA_IRQHandler+0x1b4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d04a      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a5d      	ldr	r2, [pc, #372]	; (8006190 <HAL_DMA_IRQHandler+0x1b8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d045      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a5c      	ldr	r2, [pc, #368]	; (8006194 <HAL_DMA_IRQHandler+0x1bc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d040      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5a      	ldr	r2, [pc, #360]	; (8006198 <HAL_DMA_IRQHandler+0x1c0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d03b      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a59      	ldr	r2, [pc, #356]	; (800619c <HAL_DMA_IRQHandler+0x1c4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d036      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a57      	ldr	r2, [pc, #348]	; (80061a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d031      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a56      	ldr	r2, [pc, #344]	; (80061a4 <HAL_DMA_IRQHandler+0x1cc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d02c      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a54      	ldr	r2, [pc, #336]	; (80061a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d027      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a53      	ldr	r2, [pc, #332]	; (80061ac <HAL_DMA_IRQHandler+0x1d4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a51      	ldr	r2, [pc, #324]	; (80061b0 <HAL_DMA_IRQHandler+0x1d8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01d      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a50      	ldr	r2, [pc, #320]	; (80061b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a4e      	ldr	r2, [pc, #312]	; (80061b8 <HAL_DMA_IRQHandler+0x1e0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4d      	ldr	r2, [pc, #308]	; (80061bc <HAL_DMA_IRQHandler+0x1e4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a4b      	ldr	r2, [pc, #300]	; (80061c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a4a      	ldr	r2, [pc, #296]	; (80061c4 <HAL_DMA_IRQHandler+0x1ec>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_DMA_IRQHandler+0xd2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a48      	ldr	r2, [pc, #288]	; (80061c8 <HAL_DMA_IRQHandler+0x1f0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_DMA_IRQHandler+0xd6>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <HAL_DMA_IRQHandler+0xd8>
 80060ae:	2300      	movs	r3, #0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 842b 	beq.w	800690c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2208      	movs	r2, #8
 80060c0:	409a      	lsls	r2, r3
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80a2 	beq.w	8006210 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2e      	ldr	r2, [pc, #184]	; (800618c <HAL_DMA_IRQHandler+0x1b4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <HAL_DMA_IRQHandler+0x1b8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2b      	ldr	r2, [pc, #172]	; (8006194 <HAL_DMA_IRQHandler+0x1bc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <HAL_DMA_IRQHandler+0x1c0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a28      	ldr	r2, [pc, #160]	; (800619c <HAL_DMA_IRQHandler+0x1c4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a25      	ldr	r2, [pc, #148]	; (80061a4 <HAL_DMA_IRQHandler+0x1cc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a22      	ldr	r2, [pc, #136]	; (80061ac <HAL_DMA_IRQHandler+0x1d4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a21      	ldr	r2, [pc, #132]	; (80061b0 <HAL_DMA_IRQHandler+0x1d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1f      	ldr	r2, [pc, #124]	; (80061b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <HAL_DMA_IRQHandler+0x1e4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <HAL_DMA_IRQHandler+0x1ec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_DMA_IRQHandler+0x194>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d12f      	bne.n	80061cc <HAL_DMA_IRQHandler+0x1f4>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	bf14      	ite	ne
 800617a:	2301      	movne	r3, #1
 800617c:	2300      	moveq	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	e02e      	b.n	80061e0 <HAL_DMA_IRQHandler+0x208>
 8006182:	bf00      	nop
 8006184:	24000000 	.word	0x24000000
 8006188:	1b4e81b5 	.word	0x1b4e81b5
 800618c:	40020010 	.word	0x40020010
 8006190:	40020028 	.word	0x40020028
 8006194:	40020040 	.word	0x40020040
 8006198:	40020058 	.word	0x40020058
 800619c:	40020070 	.word	0x40020070
 80061a0:	40020088 	.word	0x40020088
 80061a4:	400200a0 	.word	0x400200a0
 80061a8:	400200b8 	.word	0x400200b8
 80061ac:	40020410 	.word	0x40020410
 80061b0:	40020428 	.word	0x40020428
 80061b4:	40020440 	.word	0x40020440
 80061b8:	40020458 	.word	0x40020458
 80061bc:	40020470 	.word	0x40020470
 80061c0:	40020488 	.word	0x40020488
 80061c4:	400204a0 	.word	0x400204a0
 80061c8:	400204b8 	.word	0x400204b8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bf14      	ite	ne
 80061da:	2301      	movne	r3, #1
 80061dc:	2300      	moveq	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d015      	beq.n	8006210 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0204 	bic.w	r2, r2, #4
 80061f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2208      	movs	r2, #8
 80061fe:	409a      	lsls	r2, r3
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	f043 0201 	orr.w	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	fa22 f303 	lsr.w	r3, r2, r3
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d06e      	beq.n	8006304 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a69      	ldr	r2, [pc, #420]	; (80063d0 <HAL_DMA_IRQHandler+0x3f8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d04a      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a67      	ldr	r2, [pc, #412]	; (80063d4 <HAL_DMA_IRQHandler+0x3fc>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d045      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a66      	ldr	r2, [pc, #408]	; (80063d8 <HAL_DMA_IRQHandler+0x400>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d040      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a64      	ldr	r2, [pc, #400]	; (80063dc <HAL_DMA_IRQHandler+0x404>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d03b      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a63      	ldr	r2, [pc, #396]	; (80063e0 <HAL_DMA_IRQHandler+0x408>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d036      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a61      	ldr	r2, [pc, #388]	; (80063e4 <HAL_DMA_IRQHandler+0x40c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d031      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a60      	ldr	r2, [pc, #384]	; (80063e8 <HAL_DMA_IRQHandler+0x410>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d02c      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a5e      	ldr	r2, [pc, #376]	; (80063ec <HAL_DMA_IRQHandler+0x414>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d027      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a5d      	ldr	r2, [pc, #372]	; (80063f0 <HAL_DMA_IRQHandler+0x418>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a5b      	ldr	r2, [pc, #364]	; (80063f4 <HAL_DMA_IRQHandler+0x41c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01d      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a5a      	ldr	r2, [pc, #360]	; (80063f8 <HAL_DMA_IRQHandler+0x420>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a58      	ldr	r2, [pc, #352]	; (80063fc <HAL_DMA_IRQHandler+0x424>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a57      	ldr	r2, [pc, #348]	; (8006400 <HAL_DMA_IRQHandler+0x428>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a55      	ldr	r2, [pc, #340]	; (8006404 <HAL_DMA_IRQHandler+0x42c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a54      	ldr	r2, [pc, #336]	; (8006408 <HAL_DMA_IRQHandler+0x430>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_DMA_IRQHandler+0x2ee>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a52      	ldr	r2, [pc, #328]	; (800640c <HAL_DMA_IRQHandler+0x434>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d10a      	bne.n	80062dc <HAL_DMA_IRQHandler+0x304>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e003      	b.n	80062e4 <HAL_DMA_IRQHandler+0x30c>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00d      	beq.n	8006304 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	2201      	movs	r2, #1
 80062f2:	409a      	lsls	r2, r3
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fc:	f043 0202 	orr.w	r2, r3, #2
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	2204      	movs	r2, #4
 800630e:	409a      	lsls	r2, r3
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 808f 	beq.w	8006438 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2c      	ldr	r2, [pc, #176]	; (80063d0 <HAL_DMA_IRQHandler+0x3f8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d04a      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2a      	ldr	r2, [pc, #168]	; (80063d4 <HAL_DMA_IRQHandler+0x3fc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d045      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a29      	ldr	r2, [pc, #164]	; (80063d8 <HAL_DMA_IRQHandler+0x400>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d040      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a27      	ldr	r2, [pc, #156]	; (80063dc <HAL_DMA_IRQHandler+0x404>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d03b      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a26      	ldr	r2, [pc, #152]	; (80063e0 <HAL_DMA_IRQHandler+0x408>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d036      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a24      	ldr	r2, [pc, #144]	; (80063e4 <HAL_DMA_IRQHandler+0x40c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d031      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a23      	ldr	r2, [pc, #140]	; (80063e8 <HAL_DMA_IRQHandler+0x410>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d02c      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a21      	ldr	r2, [pc, #132]	; (80063ec <HAL_DMA_IRQHandler+0x414>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d027      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a20      	ldr	r2, [pc, #128]	; (80063f0 <HAL_DMA_IRQHandler+0x418>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d022      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <HAL_DMA_IRQHandler+0x41c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01d      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <HAL_DMA_IRQHandler+0x420>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d018      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <HAL_DMA_IRQHandler+0x424>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <HAL_DMA_IRQHandler+0x428>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_DMA_IRQHandler+0x42c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a17      	ldr	r2, [pc, #92]	; (8006408 <HAL_DMA_IRQHandler+0x430>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_DMA_IRQHandler+0x3e2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_DMA_IRQHandler+0x434>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d12a      	bne.n	8006410 <HAL_DMA_IRQHandler+0x438>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e023      	b.n	8006418 <HAL_DMA_IRQHandler+0x440>
 80063d0:	40020010 	.word	0x40020010
 80063d4:	40020028 	.word	0x40020028
 80063d8:	40020040 	.word	0x40020040
 80063dc:	40020058 	.word	0x40020058
 80063e0:	40020070 	.word	0x40020070
 80063e4:	40020088 	.word	0x40020088
 80063e8:	400200a0 	.word	0x400200a0
 80063ec:	400200b8 	.word	0x400200b8
 80063f0:	40020410 	.word	0x40020410
 80063f4:	40020428 	.word	0x40020428
 80063f8:	40020440 	.word	0x40020440
 80063fc:	40020458 	.word	0x40020458
 8006400:	40020470 	.word	0x40020470
 8006404:	40020488 	.word	0x40020488
 8006408:	400204a0 	.word	0x400204a0
 800640c:	400204b8 	.word	0x400204b8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00d      	beq.n	8006438 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2204      	movs	r2, #4
 8006426:	409a      	lsls	r2, r3
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	f043 0204 	orr.w	r2, r3, #4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2210      	movs	r2, #16
 8006442:	409a      	lsls	r2, r3
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80a6 	beq.w	800659a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a85      	ldr	r2, [pc, #532]	; (8006668 <HAL_DMA_IRQHandler+0x690>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d04a      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a83      	ldr	r2, [pc, #524]	; (800666c <HAL_DMA_IRQHandler+0x694>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d045      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a82      	ldr	r2, [pc, #520]	; (8006670 <HAL_DMA_IRQHandler+0x698>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d040      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a80      	ldr	r2, [pc, #512]	; (8006674 <HAL_DMA_IRQHandler+0x69c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d03b      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a7f      	ldr	r2, [pc, #508]	; (8006678 <HAL_DMA_IRQHandler+0x6a0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d036      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a7d      	ldr	r2, [pc, #500]	; (800667c <HAL_DMA_IRQHandler+0x6a4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d031      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7c      	ldr	r2, [pc, #496]	; (8006680 <HAL_DMA_IRQHandler+0x6a8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d02c      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a7a      	ldr	r2, [pc, #488]	; (8006684 <HAL_DMA_IRQHandler+0x6ac>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d027      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a79      	ldr	r2, [pc, #484]	; (8006688 <HAL_DMA_IRQHandler+0x6b0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d022      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a77      	ldr	r2, [pc, #476]	; (800668c <HAL_DMA_IRQHandler+0x6b4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01d      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a76      	ldr	r2, [pc, #472]	; (8006690 <HAL_DMA_IRQHandler+0x6b8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d018      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a74      	ldr	r2, [pc, #464]	; (8006694 <HAL_DMA_IRQHandler+0x6bc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a73      	ldr	r2, [pc, #460]	; (8006698 <HAL_DMA_IRQHandler+0x6c0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00e      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a71      	ldr	r2, [pc, #452]	; (800669c <HAL_DMA_IRQHandler+0x6c4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a70      	ldr	r2, [pc, #448]	; (80066a0 <HAL_DMA_IRQHandler+0x6c8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_DMA_IRQHandler+0x516>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a6e      	ldr	r2, [pc, #440]	; (80066a4 <HAL_DMA_IRQHandler+0x6cc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10a      	bne.n	8006504 <HAL_DMA_IRQHandler+0x52c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf14      	ite	ne
 80064fc:	2301      	movne	r3, #1
 80064fe:	2300      	moveq	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	e009      	b.n	8006518 <HAL_DMA_IRQHandler+0x540>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d03e      	beq.n	800659a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2210      	movs	r2, #16
 8006526:	409a      	lsls	r2, r3
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d108      	bne.n	800655a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d024      	beq.n	800659a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
 8006558:	e01f      	b.n	800659a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01b      	beq.n	800659a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
 800656a:	e016      	b.n	800659a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d107      	bne.n	800658a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0208 	bic.w	r2, r2, #8
 8006588:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2220      	movs	r2, #32
 80065a4:	409a      	lsls	r2, r3
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8110 	beq.w	80067d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <HAL_DMA_IRQHandler+0x690>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d04a      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2b      	ldr	r2, [pc, #172]	; (800666c <HAL_DMA_IRQHandler+0x694>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d045      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a29      	ldr	r2, [pc, #164]	; (8006670 <HAL_DMA_IRQHandler+0x698>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d040      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a28      	ldr	r2, [pc, #160]	; (8006674 <HAL_DMA_IRQHandler+0x69c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d03b      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a26      	ldr	r2, [pc, #152]	; (8006678 <HAL_DMA_IRQHandler+0x6a0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d036      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <HAL_DMA_IRQHandler+0x6a4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d031      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a23      	ldr	r2, [pc, #140]	; (8006680 <HAL_DMA_IRQHandler+0x6a8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d02c      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a22      	ldr	r2, [pc, #136]	; (8006684 <HAL_DMA_IRQHandler+0x6ac>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d027      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a20      	ldr	r2, [pc, #128]	; (8006688 <HAL_DMA_IRQHandler+0x6b0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d022      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1f      	ldr	r2, [pc, #124]	; (800668c <HAL_DMA_IRQHandler+0x6b4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d01d      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <HAL_DMA_IRQHandler+0x6b8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d018      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <HAL_DMA_IRQHandler+0x6bc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d013      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1a      	ldr	r2, [pc, #104]	; (8006698 <HAL_DMA_IRQHandler+0x6c0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00e      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a19      	ldr	r2, [pc, #100]	; (800669c <HAL_DMA_IRQHandler+0x6c4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d009      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <HAL_DMA_IRQHandler+0x6c8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_DMA_IRQHandler+0x678>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <HAL_DMA_IRQHandler+0x6cc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d12b      	bne.n	80066a8 <HAL_DMA_IRQHandler+0x6d0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	e02a      	b.n	80066bc <HAL_DMA_IRQHandler+0x6e4>
 8006666:	bf00      	nop
 8006668:	40020010 	.word	0x40020010
 800666c:	40020028 	.word	0x40020028
 8006670:	40020040 	.word	0x40020040
 8006674:	40020058 	.word	0x40020058
 8006678:	40020070 	.word	0x40020070
 800667c:	40020088 	.word	0x40020088
 8006680:	400200a0 	.word	0x400200a0
 8006684:	400200b8 	.word	0x400200b8
 8006688:	40020410 	.word	0x40020410
 800668c:	40020428 	.word	0x40020428
 8006690:	40020440 	.word	0x40020440
 8006694:	40020458 	.word	0x40020458
 8006698:	40020470 	.word	0x40020470
 800669c:	40020488 	.word	0x40020488
 80066a0:	400204a0 	.word	0x400204a0
 80066a4:	400204b8 	.word	0x400204b8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bf14      	ite	ne
 80066b6:	2301      	movne	r3, #1
 80066b8:	2300      	moveq	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8087 	beq.w	80067d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c6:	f003 031f 	and.w	r3, r3, #31
 80066ca:	2220      	movs	r2, #32
 80066cc:	409a      	lsls	r2, r3
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d139      	bne.n	8006752 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0216 	bic.w	r2, r2, #22
 80066ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <HAL_DMA_IRQHandler+0x736>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0208 	bic.w	r2, r2, #8
 800671c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	223f      	movs	r2, #63	; 0x3f
 8006728:	409a      	lsls	r2, r3
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 834a 	beq.w	8006ddc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
          }
          return;
 8006750:	e344      	b.n	8006ddc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d018      	beq.n	8006792 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d108      	bne.n	8006780 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006772:	2b00      	cmp	r3, #0
 8006774:	d02c      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	e027      	b.n	80067d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d023      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	e01e      	b.n	80067d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10f      	bne.n	80067c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0210 	bic.w	r2, r2, #16
 80067ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8306 	beq.w	8006de6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8088 	beq.w	80068f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2204      	movs	r2, #4
 80067ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a7a      	ldr	r2, [pc, #488]	; (80069e0 <HAL_DMA_IRQHandler+0xa08>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d04a      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a79      	ldr	r2, [pc, #484]	; (80069e4 <HAL_DMA_IRQHandler+0xa0c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d045      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a77      	ldr	r2, [pc, #476]	; (80069e8 <HAL_DMA_IRQHandler+0xa10>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d040      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a76      	ldr	r2, [pc, #472]	; (80069ec <HAL_DMA_IRQHandler+0xa14>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d03b      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a74      	ldr	r2, [pc, #464]	; (80069f0 <HAL_DMA_IRQHandler+0xa18>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d036      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a73      	ldr	r2, [pc, #460]	; (80069f4 <HAL_DMA_IRQHandler+0xa1c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d031      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a71      	ldr	r2, [pc, #452]	; (80069f8 <HAL_DMA_IRQHandler+0xa20>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d02c      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a70      	ldr	r2, [pc, #448]	; (80069fc <HAL_DMA_IRQHandler+0xa24>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d027      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a6e      	ldr	r2, [pc, #440]	; (8006a00 <HAL_DMA_IRQHandler+0xa28>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a6d      	ldr	r2, [pc, #436]	; (8006a04 <HAL_DMA_IRQHandler+0xa2c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01d      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a6b      	ldr	r2, [pc, #428]	; (8006a08 <HAL_DMA_IRQHandler+0xa30>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a6a      	ldr	r2, [pc, #424]	; (8006a0c <HAL_DMA_IRQHandler+0xa34>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a68      	ldr	r2, [pc, #416]	; (8006a10 <HAL_DMA_IRQHandler+0xa38>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a67      	ldr	r2, [pc, #412]	; (8006a14 <HAL_DMA_IRQHandler+0xa3c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a65      	ldr	r2, [pc, #404]	; (8006a18 <HAL_DMA_IRQHandler+0xa40>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_DMA_IRQHandler+0x8b8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a64      	ldr	r2, [pc, #400]	; (8006a1c <HAL_DMA_IRQHandler+0xa44>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <HAL_DMA_IRQHandler+0x8ca>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e007      	b.n	80068b2 <HAL_DMA_IRQHandler+0x8da>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d307      	bcc.n	80068ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f2      	bne.n	80068b2 <HAL_DMA_IRQHandler+0x8da>
 80068cc:	e000      	b.n	80068d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80068ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2203      	movs	r2, #3
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068e6:	e003      	b.n	80068f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8272 	beq.w	8006de6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
 800690a:	e26c      	b.n	8006de6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a43      	ldr	r2, [pc, #268]	; (8006a20 <HAL_DMA_IRQHandler+0xa48>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d022      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a42      	ldr	r2, [pc, #264]	; (8006a24 <HAL_DMA_IRQHandler+0xa4c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d01d      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a40      	ldr	r2, [pc, #256]	; (8006a28 <HAL_DMA_IRQHandler+0xa50>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d018      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a3f      	ldr	r2, [pc, #252]	; (8006a2c <HAL_DMA_IRQHandler+0xa54>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a3d      	ldr	r2, [pc, #244]	; (8006a30 <HAL_DMA_IRQHandler+0xa58>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00e      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a3c      	ldr	r2, [pc, #240]	; (8006a34 <HAL_DMA_IRQHandler+0xa5c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d009      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a3a      	ldr	r2, [pc, #232]	; (8006a38 <HAL_DMA_IRQHandler+0xa60>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_DMA_IRQHandler+0x984>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a39      	ldr	r2, [pc, #228]	; (8006a3c <HAL_DMA_IRQHandler+0xa64>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_DMA_IRQHandler+0x988>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <HAL_DMA_IRQHandler+0x98a>
 8006960:	2300      	movs	r3, #0
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 823f 	beq.w	8006de6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2204      	movs	r2, #4
 800697a:	409a      	lsls	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4013      	ands	r3, r2
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80cd 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xb48>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80c7 	beq.w	8006b20 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2204      	movs	r2, #4
 800699c:	409a      	lsls	r2, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d049      	beq.n	8006a40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8210 	beq.w	8006de0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069c8:	e20a      	b.n	8006de0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 8206 	beq.w	8006de0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069dc:	e200      	b.n	8006de0 <HAL_DMA_IRQHandler+0xe08>
 80069de:	bf00      	nop
 80069e0:	40020010 	.word	0x40020010
 80069e4:	40020028 	.word	0x40020028
 80069e8:	40020040 	.word	0x40020040
 80069ec:	40020058 	.word	0x40020058
 80069f0:	40020070 	.word	0x40020070
 80069f4:	40020088 	.word	0x40020088
 80069f8:	400200a0 	.word	0x400200a0
 80069fc:	400200b8 	.word	0x400200b8
 8006a00:	40020410 	.word	0x40020410
 8006a04:	40020428 	.word	0x40020428
 8006a08:	40020440 	.word	0x40020440
 8006a0c:	40020458 	.word	0x40020458
 8006a10:	40020470 	.word	0x40020470
 8006a14:	40020488 	.word	0x40020488
 8006a18:	400204a0 	.word	0x400204a0
 8006a1c:	400204b8 	.word	0x400204b8
 8006a20:	58025408 	.word	0x58025408
 8006a24:	5802541c 	.word	0x5802541c
 8006a28:	58025430 	.word	0x58025430
 8006a2c:	58025444 	.word	0x58025444
 8006a30:	58025458 	.word	0x58025458
 8006a34:	5802546c 	.word	0x5802546c
 8006a38:	58025480 	.word	0x58025480
 8006a3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d160      	bne.n	8006b0c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a7f      	ldr	r2, [pc, #508]	; (8006c4c <HAL_DMA_IRQHandler+0xc74>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d04a      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a7d      	ldr	r2, [pc, #500]	; (8006c50 <HAL_DMA_IRQHandler+0xc78>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d045      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7c      	ldr	r2, [pc, #496]	; (8006c54 <HAL_DMA_IRQHandler+0xc7c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d040      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7a      	ldr	r2, [pc, #488]	; (8006c58 <HAL_DMA_IRQHandler+0xc80>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d03b      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a79      	ldr	r2, [pc, #484]	; (8006c5c <HAL_DMA_IRQHandler+0xc84>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d036      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a77      	ldr	r2, [pc, #476]	; (8006c60 <HAL_DMA_IRQHandler+0xc88>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d031      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a76      	ldr	r2, [pc, #472]	; (8006c64 <HAL_DMA_IRQHandler+0xc8c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d02c      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a74      	ldr	r2, [pc, #464]	; (8006c68 <HAL_DMA_IRQHandler+0xc90>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d027      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a73      	ldr	r2, [pc, #460]	; (8006c6c <HAL_DMA_IRQHandler+0xc94>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d022      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a71      	ldr	r2, [pc, #452]	; (8006c70 <HAL_DMA_IRQHandler+0xc98>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d01d      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a70      	ldr	r2, [pc, #448]	; (8006c74 <HAL_DMA_IRQHandler+0xc9c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d018      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6e      	ldr	r2, [pc, #440]	; (8006c78 <HAL_DMA_IRQHandler+0xca0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d013      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a6d      	ldr	r2, [pc, #436]	; (8006c7c <HAL_DMA_IRQHandler+0xca4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00e      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a6b      	ldr	r2, [pc, #428]	; (8006c80 <HAL_DMA_IRQHandler+0xca8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d009      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6a      	ldr	r2, [pc, #424]	; (8006c84 <HAL_DMA_IRQHandler+0xcac>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d004      	beq.n	8006aea <HAL_DMA_IRQHandler+0xb12>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a68      	ldr	r2, [pc, #416]	; (8006c88 <HAL_DMA_IRQHandler+0xcb0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d108      	bne.n	8006afc <HAL_DMA_IRQHandler+0xb24>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0208 	bic.w	r2, r2, #8
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e007      	b.n	8006b0c <HAL_DMA_IRQHandler+0xb34>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0204 	bic.w	r2, r2, #4
 8006b0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8165 	beq.w	8006de0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b1e:	e15f      	b.n	8006de0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2202      	movs	r2, #2
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80c5 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0xce8>
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80bf 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d018      	beq.n	8006b8e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 813a 	beq.w	8006de4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b78:	e134      	b.n	8006de4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8130 	beq.w	8006de4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b8c:	e12a      	b.n	8006de4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 8089 	bne.w	8006cac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2b      	ldr	r2, [pc, #172]	; (8006c4c <HAL_DMA_IRQHandler+0xc74>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d04a      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a29      	ldr	r2, [pc, #164]	; (8006c50 <HAL_DMA_IRQHandler+0xc78>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d045      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a28      	ldr	r2, [pc, #160]	; (8006c54 <HAL_DMA_IRQHandler+0xc7c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d040      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a26      	ldr	r2, [pc, #152]	; (8006c58 <HAL_DMA_IRQHandler+0xc80>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d03b      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <HAL_DMA_IRQHandler+0xc84>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d036      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <HAL_DMA_IRQHandler+0xc88>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d031      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <HAL_DMA_IRQHandler+0xc8c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d02c      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <HAL_DMA_IRQHandler+0xc90>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d027      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <HAL_DMA_IRQHandler+0xc94>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <HAL_DMA_IRQHandler+0xc98>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01d      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <HAL_DMA_IRQHandler+0xc9c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d018      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1a      	ldr	r2, [pc, #104]	; (8006c78 <HAL_DMA_IRQHandler+0xca0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <HAL_DMA_IRQHandler+0xca4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a17      	ldr	r2, [pc, #92]	; (8006c80 <HAL_DMA_IRQHandler+0xca8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a16      	ldr	r2, [pc, #88]	; (8006c84 <HAL_DMA_IRQHandler+0xcac>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xc62>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a14      	ldr	r2, [pc, #80]	; (8006c88 <HAL_DMA_IRQHandler+0xcb0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d128      	bne.n	8006c8c <HAL_DMA_IRQHandler+0xcb4>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0214 	bic.w	r2, r2, #20
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	e027      	b.n	8006c9c <HAL_DMA_IRQHandler+0xcc4>
 8006c4c:	40020010 	.word	0x40020010
 8006c50:	40020028 	.word	0x40020028
 8006c54:	40020040 	.word	0x40020040
 8006c58:	40020058 	.word	0x40020058
 8006c5c:	40020070 	.word	0x40020070
 8006c60:	40020088 	.word	0x40020088
 8006c64:	400200a0 	.word	0x400200a0
 8006c68:	400200b8 	.word	0x400200b8
 8006c6c:	40020410 	.word	0x40020410
 8006c70:	40020428 	.word	0x40020428
 8006c74:	40020440 	.word	0x40020440
 8006c78:	40020458 	.word	0x40020458
 8006c7c:	40020470 	.word	0x40020470
 8006c80:	40020488 	.word	0x40020488
 8006c84:	400204a0 	.word	0x400204a0
 8006c88:	400204b8 	.word	0x400204b8
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 020a 	bic.w	r2, r2, #10
 8006c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8097 	beq.w	8006de4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cbe:	e091      	b.n	8006de4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	2208      	movs	r2, #8
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8088 	beq.w	8006de6 <HAL_DMA_IRQHandler+0xe0e>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8082 	beq.w	8006de6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a41      	ldr	r2, [pc, #260]	; (8006dec <HAL_DMA_IRQHandler+0xe14>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d04a      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a3f      	ldr	r2, [pc, #252]	; (8006df0 <HAL_DMA_IRQHandler+0xe18>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d045      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a3e      	ldr	r2, [pc, #248]	; (8006df4 <HAL_DMA_IRQHandler+0xe1c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d040      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a3c      	ldr	r2, [pc, #240]	; (8006df8 <HAL_DMA_IRQHandler+0xe20>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d03b      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a3b      	ldr	r2, [pc, #236]	; (8006dfc <HAL_DMA_IRQHandler+0xe24>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d036      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a39      	ldr	r2, [pc, #228]	; (8006e00 <HAL_DMA_IRQHandler+0xe28>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d031      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a38      	ldr	r2, [pc, #224]	; (8006e04 <HAL_DMA_IRQHandler+0xe2c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d02c      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a36      	ldr	r2, [pc, #216]	; (8006e08 <HAL_DMA_IRQHandler+0xe30>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d027      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a35      	ldr	r2, [pc, #212]	; (8006e0c <HAL_DMA_IRQHandler+0xe34>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d022      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a33      	ldr	r2, [pc, #204]	; (8006e10 <HAL_DMA_IRQHandler+0xe38>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01d      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a32      	ldr	r2, [pc, #200]	; (8006e14 <HAL_DMA_IRQHandler+0xe3c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d018      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a30      	ldr	r2, [pc, #192]	; (8006e18 <HAL_DMA_IRQHandler+0xe40>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a2f      	ldr	r2, [pc, #188]	; (8006e1c <HAL_DMA_IRQHandler+0xe44>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00e      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <HAL_DMA_IRQHandler+0xe48>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d009      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a2c      	ldr	r2, [pc, #176]	; (8006e24 <HAL_DMA_IRQHandler+0xe4c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d004      	beq.n	8006d82 <HAL_DMA_IRQHandler+0xdaa>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <HAL_DMA_IRQHandler+0xe50>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d108      	bne.n	8006d94 <HAL_DMA_IRQHandler+0xdbc>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 021c 	bic.w	r2, r2, #28
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e007      	b.n	8006da4 <HAL_DMA_IRQHandler+0xdcc>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 020e 	bic.w	r2, r2, #14
 8006da2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
 8006dda:	e004      	b.n	8006de6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ddc:	bf00      	nop
 8006dde:	e002      	b.n	8006de6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de0:	bf00      	nop
 8006de2:	e000      	b.n	8006de6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006de6:	3728      	adds	r7, #40	; 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40020010 	.word	0x40020010
 8006df0:	40020028 	.word	0x40020028
 8006df4:	40020040 	.word	0x40020040
 8006df8:	40020058 	.word	0x40020058
 8006dfc:	40020070 	.word	0x40020070
 8006e00:	40020088 	.word	0x40020088
 8006e04:	400200a0 	.word	0x400200a0
 8006e08:	400200b8 	.word	0x400200b8
 8006e0c:	40020410 	.word	0x40020410
 8006e10:	40020428 	.word	0x40020428
 8006e14:	40020440 	.word	0x40020440
 8006e18:	40020458 	.word	0x40020458
 8006e1c:	40020470 	.word	0x40020470
 8006e20:	40020488 	.word	0x40020488
 8006e24:	400204a0 	.word	0x400204a0
 8006e28:	400204b8 	.word	0x400204b8

08006e2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a7f      	ldr	r2, [pc, #508]	; (8007048 <DMA_SetConfig+0x21c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d072      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a7d      	ldr	r2, [pc, #500]	; (800704c <DMA_SetConfig+0x220>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d06d      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a7c      	ldr	r2, [pc, #496]	; (8007050 <DMA_SetConfig+0x224>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d068      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a7a      	ldr	r2, [pc, #488]	; (8007054 <DMA_SetConfig+0x228>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d063      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a79      	ldr	r2, [pc, #484]	; (8007058 <DMA_SetConfig+0x22c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d05e      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a77      	ldr	r2, [pc, #476]	; (800705c <DMA_SetConfig+0x230>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d059      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a76      	ldr	r2, [pc, #472]	; (8007060 <DMA_SetConfig+0x234>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d054      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a74      	ldr	r2, [pc, #464]	; (8007064 <DMA_SetConfig+0x238>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d04f      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a73      	ldr	r2, [pc, #460]	; (8007068 <DMA_SetConfig+0x23c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d04a      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a71      	ldr	r2, [pc, #452]	; (800706c <DMA_SetConfig+0x240>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d045      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a70      	ldr	r2, [pc, #448]	; (8007070 <DMA_SetConfig+0x244>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d040      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6e      	ldr	r2, [pc, #440]	; (8007074 <DMA_SetConfig+0x248>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d03b      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6d      	ldr	r2, [pc, #436]	; (8007078 <DMA_SetConfig+0x24c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d036      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a6b      	ldr	r2, [pc, #428]	; (800707c <DMA_SetConfig+0x250>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d031      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a6a      	ldr	r2, [pc, #424]	; (8007080 <DMA_SetConfig+0x254>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d02c      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a68      	ldr	r2, [pc, #416]	; (8007084 <DMA_SetConfig+0x258>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d027      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a67      	ldr	r2, [pc, #412]	; (8007088 <DMA_SetConfig+0x25c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d022      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a65      	ldr	r2, [pc, #404]	; (800708c <DMA_SetConfig+0x260>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01d      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a64      	ldr	r2, [pc, #400]	; (8007090 <DMA_SetConfig+0x264>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a62      	ldr	r2, [pc, #392]	; (8007094 <DMA_SetConfig+0x268>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a61      	ldr	r2, [pc, #388]	; (8007098 <DMA_SetConfig+0x26c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5f      	ldr	r2, [pc, #380]	; (800709c <DMA_SetConfig+0x270>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5e      	ldr	r2, [pc, #376]	; (80070a0 <DMA_SetConfig+0x274>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <DMA_SetConfig+0x10a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5c      	ldr	r2, [pc, #368]	; (80070a4 <DMA_SetConfig+0x278>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d101      	bne.n	8006f3a <DMA_SetConfig+0x10e>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <DMA_SetConfig+0x110>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a39      	ldr	r2, [pc, #228]	; (8007048 <DMA_SetConfig+0x21c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d04a      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <DMA_SetConfig+0x220>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d045      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a36      	ldr	r2, [pc, #216]	; (8007050 <DMA_SetConfig+0x224>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d040      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a35      	ldr	r2, [pc, #212]	; (8007054 <DMA_SetConfig+0x228>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d03b      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a33      	ldr	r2, [pc, #204]	; (8007058 <DMA_SetConfig+0x22c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d036      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a32      	ldr	r2, [pc, #200]	; (800705c <DMA_SetConfig+0x230>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d031      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a30      	ldr	r2, [pc, #192]	; (8007060 <DMA_SetConfig+0x234>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d02c      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <DMA_SetConfig+0x238>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d027      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <DMA_SetConfig+0x23c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2c      	ldr	r2, [pc, #176]	; (800706c <DMA_SetConfig+0x240>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d01d      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2a      	ldr	r2, [pc, #168]	; (8007070 <DMA_SetConfig+0x244>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <DMA_SetConfig+0x248>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a27      	ldr	r2, [pc, #156]	; (8007078 <DMA_SetConfig+0x24c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a26      	ldr	r2, [pc, #152]	; (800707c <DMA_SetConfig+0x250>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a24      	ldr	r2, [pc, #144]	; (8007080 <DMA_SetConfig+0x254>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <DMA_SetConfig+0x1d0>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a23      	ldr	r2, [pc, #140]	; (8007084 <DMA_SetConfig+0x258>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d101      	bne.n	8007000 <DMA_SetConfig+0x1d4>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <DMA_SetConfig+0x1d6>
 8007000:	2300      	movs	r3, #0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d059      	beq.n	80070ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	223f      	movs	r2, #63	; 0x3f
 8007010:	409a      	lsls	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007024:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d138      	bne.n	80070a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007046:	e086      	b.n	8007156 <DMA_SetConfig+0x32a>
 8007048:	40020010 	.word	0x40020010
 800704c:	40020028 	.word	0x40020028
 8007050:	40020040 	.word	0x40020040
 8007054:	40020058 	.word	0x40020058
 8007058:	40020070 	.word	0x40020070
 800705c:	40020088 	.word	0x40020088
 8007060:	400200a0 	.word	0x400200a0
 8007064:	400200b8 	.word	0x400200b8
 8007068:	40020410 	.word	0x40020410
 800706c:	40020428 	.word	0x40020428
 8007070:	40020440 	.word	0x40020440
 8007074:	40020458 	.word	0x40020458
 8007078:	40020470 	.word	0x40020470
 800707c:	40020488 	.word	0x40020488
 8007080:	400204a0 	.word	0x400204a0
 8007084:	400204b8 	.word	0x400204b8
 8007088:	58025408 	.word	0x58025408
 800708c:	5802541c 	.word	0x5802541c
 8007090:	58025430 	.word	0x58025430
 8007094:	58025444 	.word	0x58025444
 8007098:	58025458 	.word	0x58025458
 800709c:	5802546c 	.word	0x5802546c
 80070a0:	58025480 	.word	0x58025480
 80070a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]
}
 80070b8:	e04d      	b.n	8007156 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a29      	ldr	r2, [pc, #164]	; (8007164 <DMA_SetConfig+0x338>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <DMA_SetConfig+0x2de>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a27      	ldr	r2, [pc, #156]	; (8007168 <DMA_SetConfig+0x33c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01d      	beq.n	800710a <DMA_SetConfig+0x2de>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a26      	ldr	r2, [pc, #152]	; (800716c <DMA_SetConfig+0x340>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <DMA_SetConfig+0x2de>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a24      	ldr	r2, [pc, #144]	; (8007170 <DMA_SetConfig+0x344>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <DMA_SetConfig+0x2de>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a23      	ldr	r2, [pc, #140]	; (8007174 <DMA_SetConfig+0x348>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <DMA_SetConfig+0x2de>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a21      	ldr	r2, [pc, #132]	; (8007178 <DMA_SetConfig+0x34c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <DMA_SetConfig+0x2de>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a20      	ldr	r2, [pc, #128]	; (800717c <DMA_SetConfig+0x350>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <DMA_SetConfig+0x2de>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <DMA_SetConfig+0x354>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d101      	bne.n	800710e <DMA_SetConfig+0x2e2>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <DMA_SetConfig+0x2e4>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d020      	beq.n	8007156 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	2201      	movs	r2, #1
 800711e:	409a      	lsls	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	d108      	bne.n	8007146 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	60da      	str	r2, [r3, #12]
}
 8007144:	e007      	b.n	8007156 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	60da      	str	r2, [r3, #12]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	58025408 	.word	0x58025408
 8007168:	5802541c 	.word	0x5802541c
 800716c:	58025430 	.word	0x58025430
 8007170:	58025444 	.word	0x58025444
 8007174:	58025458 	.word	0x58025458
 8007178:	5802546c 	.word	0x5802546c
 800717c:	58025480 	.word	0x58025480
 8007180:	58025494 	.word	0x58025494

08007184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a42      	ldr	r2, [pc, #264]	; (800729c <DMA_CalcBaseAndBitshift+0x118>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d04a      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a41      	ldr	r2, [pc, #260]	; (80072a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d045      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a3f      	ldr	r2, [pc, #252]	; (80072a4 <DMA_CalcBaseAndBitshift+0x120>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d040      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3e      	ldr	r2, [pc, #248]	; (80072a8 <DMA_CalcBaseAndBitshift+0x124>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d03b      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a3c      	ldr	r2, [pc, #240]	; (80072ac <DMA_CalcBaseAndBitshift+0x128>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d036      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a3b      	ldr	r2, [pc, #236]	; (80072b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d031      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a39      	ldr	r2, [pc, #228]	; (80072b4 <DMA_CalcBaseAndBitshift+0x130>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d02c      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a38      	ldr	r2, [pc, #224]	; (80072b8 <DMA_CalcBaseAndBitshift+0x134>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d027      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a36      	ldr	r2, [pc, #216]	; (80072bc <DMA_CalcBaseAndBitshift+0x138>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d022      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d01d      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a33      	ldr	r2, [pc, #204]	; (80072c4 <DMA_CalcBaseAndBitshift+0x140>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d018      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a32      	ldr	r2, [pc, #200]	; (80072c8 <DMA_CalcBaseAndBitshift+0x144>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d013      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a30      	ldr	r2, [pc, #192]	; (80072cc <DMA_CalcBaseAndBitshift+0x148>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00e      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2f      	ldr	r2, [pc, #188]	; (80072d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d009      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2d      	ldr	r2, [pc, #180]	; (80072d4 <DMA_CalcBaseAndBitshift+0x150>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <DMA_CalcBaseAndBitshift+0xa8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2c      	ldr	r2, [pc, #176]	; (80072d8 <DMA_CalcBaseAndBitshift+0x154>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d101      	bne.n	8007230 <DMA_CalcBaseAndBitshift+0xac>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <DMA_CalcBaseAndBitshift+0xae>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d024      	beq.n	8007280 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	3b10      	subs	r3, #16
 800723e:	4a27      	ldr	r2, [pc, #156]	; (80072dc <DMA_CalcBaseAndBitshift+0x158>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	091b      	lsrs	r3, r3, #4
 8007246:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007250:	5cd3      	ldrb	r3, [r2, r3]
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d908      	bls.n	8007270 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	4b1f      	ldr	r3, [pc, #124]	; (80072e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007266:	4013      	ands	r3, r2
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	659a      	str	r2, [r3, #88]	; 0x58
 800726e:	e00d      	b.n	800728c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	4b1b      	ldr	r3, [pc, #108]	; (80072e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007278:	4013      	ands	r3, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6593      	str	r3, [r2, #88]	; 0x58
 800727e:	e005      	b.n	800728c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40020010 	.word	0x40020010
 80072a0:	40020028 	.word	0x40020028
 80072a4:	40020040 	.word	0x40020040
 80072a8:	40020058 	.word	0x40020058
 80072ac:	40020070 	.word	0x40020070
 80072b0:	40020088 	.word	0x40020088
 80072b4:	400200a0 	.word	0x400200a0
 80072b8:	400200b8 	.word	0x400200b8
 80072bc:	40020410 	.word	0x40020410
 80072c0:	40020428 	.word	0x40020428
 80072c4:	40020440 	.word	0x40020440
 80072c8:	40020458 	.word	0x40020458
 80072cc:	40020470 	.word	0x40020470
 80072d0:	40020488 	.word	0x40020488
 80072d4:	400204a0 	.word	0x400204a0
 80072d8:	400204b8 	.word	0x400204b8
 80072dc:	aaaaaaab 	.word	0xaaaaaaab
 80072e0:	080185ec 	.word	0x080185ec
 80072e4:	fffffc00 	.word	0xfffffc00

080072e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d120      	bne.n	800733e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	2b03      	cmp	r3, #3
 8007302:	d858      	bhi.n	80073b6 <DMA_CheckFifoParam+0xce>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <DMA_CheckFifoParam+0x24>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	0800731d 	.word	0x0800731d
 8007310:	0800732f 	.word	0x0800732f
 8007314:	0800731d 	.word	0x0800731d
 8007318:	080073b7 	.word	0x080073b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d048      	beq.n	80073ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800732c:	e045      	b.n	80073ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007336:	d142      	bne.n	80073be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800733c:	e03f      	b.n	80073be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007346:	d123      	bne.n	8007390 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	2b03      	cmp	r3, #3
 800734e:	d838      	bhi.n	80073c2 <DMA_CheckFifoParam+0xda>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <DMA_CheckFifoParam+0x70>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	08007369 	.word	0x08007369
 800735c:	0800736f 	.word	0x0800736f
 8007360:	08007369 	.word	0x08007369
 8007364:	08007381 	.word	0x08007381
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
        break;
 800736c:	e030      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d025      	beq.n	80073c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800737e:	e022      	b.n	80073c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007388:	d11f      	bne.n	80073ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800738e:	e01c      	b.n	80073ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	2b02      	cmp	r3, #2
 8007396:	d902      	bls.n	800739e <DMA_CheckFifoParam+0xb6>
 8007398:	2b03      	cmp	r3, #3
 800739a:	d003      	beq.n	80073a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800739c:	e018      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
        break;
 80073a2:	e015      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
    break;
 80073b4:	e00b      	b.n	80073ce <DMA_CheckFifoParam+0xe6>
        break;
 80073b6:	bf00      	nop
 80073b8:	e00a      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        break;
 80073ba:	bf00      	nop
 80073bc:	e008      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        break;
 80073be:	bf00      	nop
 80073c0:	e006      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        break;
 80073c2:	bf00      	nop
 80073c4:	e004      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        break;
 80073c6:	bf00      	nop
 80073c8:	e002      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
        break;
 80073ca:	bf00      	nop
 80073cc:	e000      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
    break;
 80073ce:	bf00      	nop
    }
  }

  return status;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a38      	ldr	r2, [pc, #224]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a36      	ldr	r2, [pc, #216]	; (80074d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01d      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a35      	ldr	r2, [pc, #212]	; (80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a33      	ldr	r2, [pc, #204]	; (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a32      	ldr	r2, [pc, #200]	; (80074e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a30      	ldr	r2, [pc, #192]	; (80074e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2f      	ldr	r2, [pc, #188]	; (80074ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2d      	ldr	r2, [pc, #180]	; (80074f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01a      	beq.n	800747e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	3b08      	subs	r3, #8
 8007450:	4a28      	ldr	r2, [pc, #160]	; (80074f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a24      	ldr	r2, [pc, #144]	; (80074fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800746c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2201      	movs	r2, #1
 8007476:	409a      	lsls	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800747c:	e024      	b.n	80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	3b10      	subs	r3, #16
 8007486:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	091b      	lsrs	r3, r3, #4
 800748e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4a1c      	ldr	r2, [pc, #112]	; (8007504 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d806      	bhi.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d902      	bls.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3308      	adds	r3, #8
 80074a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4b18      	ldr	r3, [pc, #96]	; (800750c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a16      	ldr	r2, [pc, #88]	; (8007510 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80074b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	2201      	movs	r2, #1
 80074c2:	409a      	lsls	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80074c8:	bf00      	nop
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	58025408 	.word	0x58025408
 80074d8:	5802541c 	.word	0x5802541c
 80074dc:	58025430 	.word	0x58025430
 80074e0:	58025444 	.word	0x58025444
 80074e4:	58025458 	.word	0x58025458
 80074e8:	5802546c 	.word	0x5802546c
 80074ec:	58025480 	.word	0x58025480
 80074f0:	58025494 	.word	0x58025494
 80074f4:	cccccccd 	.word	0xcccccccd
 80074f8:	16009600 	.word	0x16009600
 80074fc:	58025880 	.word	0x58025880
 8007500:	aaaaaaab 	.word	0xaaaaaaab
 8007504:	400204b8 	.word	0x400204b8
 8007508:	4002040f 	.word	0x4002040f
 800750c:	10008200 	.word	0x10008200
 8007510:	40020880 	.word	0x40020880

08007514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d04a      	beq.n	80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b08      	cmp	r3, #8
 800752e:	d847      	bhi.n	80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a25      	ldr	r2, [pc, #148]	; (80075cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d022      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a24      	ldr	r2, [pc, #144]	; (80075d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d01d      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d018      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00e      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d009      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d101      	bne.n	8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007584:	2300      	movs	r3, #0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4b17      	ldr	r3, [pc, #92]	; (80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800759c:	671a      	str	r2, [r3, #112]	; 0x70
 800759e:	e009      	b.n	80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80075b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2201      	movs	r2, #1
 80075ba:	409a      	lsls	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80075c0:	bf00      	nop
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	58025408 	.word	0x58025408
 80075d0:	5802541c 	.word	0x5802541c
 80075d4:	58025430 	.word	0x58025430
 80075d8:	58025444 	.word	0x58025444
 80075dc:	58025458 	.word	0x58025458
 80075e0:	5802546c 	.word	0x5802546c
 80075e4:	58025480 	.word	0x58025480
 80075e8:	58025494 	.word	0x58025494
 80075ec:	1600963f 	.word	0x1600963f
 80075f0:	58025940 	.word	0x58025940
 80075f4:	1000823f 	.word	0x1000823f
 80075f8:	40020940 	.word	0x40020940

080075fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b098      	sub	sp, #96	; 0x60
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007604:	4a84      	ldr	r2, [pc, #528]	; (8007818 <HAL_FDCAN_Init+0x21c>)
 8007606:	f107 030c 	add.w	r3, r7, #12
 800760a:	4611      	mov	r1, r2
 800760c:	224c      	movs	r2, #76	; 0x4c
 800760e:	4618      	mov	r0, r3
 8007610:	f00f fdea 	bl	80171e8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e1c6      	b.n	80079ac <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a7e      	ldr	r2, [pc, #504]	; (800781c <HAL_FDCAN_Init+0x220>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d106      	bne.n	8007636 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007630:	461a      	mov	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fb faa4 	bl	8002b98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0210 	bic.w	r2, r2, #16
 800765e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007660:	f7fc fa32 	bl	8003ac8 <HAL_GetTick>
 8007664:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007666:	e014      	b.n	8007692 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007668:	f7fc fa2e 	bl	8003ac8 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b0a      	cmp	r3, #10
 8007674:	d90d      	bls.n	8007692 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e18c      	b.n	80079ac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b08      	cmp	r3, #8
 800769e:	d0e3      	beq.n	8007668 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076b0:	f7fc fa0a 	bl	8003ac8 <HAL_GetTick>
 80076b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076b6:	e014      	b.n	80076e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076b8:	f7fc fa06 	bl	8003ac8 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b0a      	cmp	r3, #10
 80076c4:	d90d      	bls.n	80076e2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076cc:	f043 0201 	orr.w	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2203      	movs	r2, #3
 80076da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e164      	b.n	80079ac <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0e3      	beq.n	80076b8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0202 	orr.w	r2, r2, #2
 80076fe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	7c1b      	ldrb	r3, [r3, #16]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d108      	bne.n	800771a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007716:	619a      	str	r2, [r3, #24]
 8007718:	e007      	b.n	800772a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007728:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c5b      	ldrb	r3, [r3, #17]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d108      	bne.n	8007744 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007740:	619a      	str	r2, [r3, #24]
 8007742:	e007      	b.n	8007754 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007752:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	7c9b      	ldrb	r3, [r3, #18]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d108      	bne.n	800776e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800776a:	619a      	str	r2, [r3, #24]
 800776c:	e007      	b.n	800777e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800777c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80077a2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0210 	bic.w	r2, r2, #16
 80077b2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d108      	bne.n	80077ce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0204 	orr.w	r2, r2, #4
 80077ca:	619a      	str	r2, [r3, #24]
 80077cc:	e030      	b.n	8007830 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d02c      	beq.n	8007830 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d020      	beq.n	8007820 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077ec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0210 	orr.w	r2, r2, #16
 80077fc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d114      	bne.n	8007830 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0220 	orr.w	r2, r2, #32
 8007814:	619a      	str	r2, [r3, #24]
 8007816:	e00b      	b.n	8007830 <HAL_FDCAN_Init+0x234>
 8007818:	080184d8 	.word	0x080184d8
 800781c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f042 0220 	orr.w	r2, r2, #32
 800782e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	3b01      	subs	r3, #1
 8007836:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	3b01      	subs	r3, #1
 800783e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007840:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007848:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	3b01      	subs	r3, #1
 8007852:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007858:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800785a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007864:	d115      	bne.n	8007892 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	3b01      	subs	r3, #1
 8007872:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007874:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	3b01      	subs	r3, #1
 800787c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800787e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	3b01      	subs	r3, #1
 8007888:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800788e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007890:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b8:	4413      	add	r3, r2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d011      	beq.n	80078e2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80078c6:	f023 0107 	bic.w	r1, r3, #7
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	3360      	adds	r3, #96	; 0x60
 80078d2:	443b      	add	r3, r7
 80078d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d011      	beq.n	800790e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078f2:	f023 0107 	bic.w	r1, r3, #7
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	3360      	adds	r3, #96	; 0x60
 80078fe:	443b      	add	r3, r7
 8007900:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007912:	2b00      	cmp	r3, #0
 8007914:	d012      	beq.n	800793c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800791e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	3360      	adds	r3, #96	; 0x60
 800792a:	443b      	add	r3, r7
 800792c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007930:	011a      	lsls	r2, r3, #4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800794c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	3360      	adds	r3, #96	; 0x60
 8007958:	443b      	add	r3, r7
 800795a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800795e:	021a      	lsls	r2, r3, #8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <HAL_FDCAN_Init+0x3b8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d107      	bne.n	8007984 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f022 0203 	bic.w	r2, r2, #3
 8007982:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f80b 	bl	80079b8 <FDCAN_CalcultateRamBlockAddresses>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80079a8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3760      	adds	r7, #96	; 0x60
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	4000a000 	.word	0x4000a000

080079b8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80079ce:	4ba7      	ldr	r3, [pc, #668]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	0091      	lsls	r1, r2, #2
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	430b      	orrs	r3, r1
 80079dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	041a      	lsls	r2, r3, #16
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	4413      	add	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a0e:	4b97      	ldr	r3, [pc, #604]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	0091      	lsls	r1, r2, #2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a30:	041a      	lsls	r2, r3, #16
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	4413      	add	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a50:	4b86      	ldr	r3, [pc, #536]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	0091      	lsls	r1, r2, #2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a6a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	041a      	lsls	r2, r3, #16
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a98:	4b74      	ldr	r3, [pc, #464]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	0091      	lsls	r1, r2, #2
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ab2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aba:	041a      	lsls	r2, r3, #16
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ae0:	4b62      	ldr	r3, [pc, #392]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	0091      	lsls	r1, r2, #2
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	430b      	orrs	r3, r1
 8007aee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007b0c:	4b57      	ldr	r3, [pc, #348]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	0091      	lsls	r1, r2, #2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b26:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2e:	041a      	lsls	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4413      	add	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b4e:	4b47      	ldr	r3, [pc, #284]	; (8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0091      	lsls	r1, r2, #2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b68:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b70:	041a      	lsls	r2, r3, #16
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b84:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8c:	061a      	lsls	r2, r3, #24
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b9c:	4b34      	ldr	r3, [pc, #208]	; (8007c70 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009a      	lsls	r2, r3, #2
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007c02:	fb01 f303 	mul.w	r3, r1, r3
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	441a      	add	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c32:	fb01 f303 	mul.w	r3, r1, r3
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	441a      	add	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	4a04      	ldr	r2, [pc, #16]	; (8007c74 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d915      	bls.n	8007c94 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c68:	e006      	b.n	8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c6a:	bf00      	nop
 8007c6c:	ffff0003 	.word	0xffff0003
 8007c70:	10002b00 	.word	0x10002b00
 8007c74:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c7e:	f043 0220 	orr.w	r2, r3, #32
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e010      	b.n	8007cb6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	e005      	b.n	8007ca8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d3f3      	bcc.n	8007c9c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop

08007cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b089      	sub	sp, #36	; 0x24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cd2:	4b86      	ldr	r3, [pc, #536]	; (8007eec <HAL_GPIO_Init+0x228>)
 8007cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cd6:	e18c      	b.n	8007ff2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	2101      	movs	r1, #1
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 817e 	beq.w	8007fec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d005      	beq.n	8007d08 <HAL_GPIO_Init+0x44>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d130      	bne.n	8007d6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	2203      	movs	r2, #3
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d3e:	2201      	movs	r2, #1
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	43db      	mvns	r3, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	091b      	lsrs	r3, r3, #4
 8007d54:	f003 0201 	and.w	r2, r3, #1
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d017      	beq.n	8007da6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	2203      	movs	r2, #3
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43db      	mvns	r3, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d123      	bne.n	8007dfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	08da      	lsrs	r2, r3, #3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3208      	adds	r2, #8
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	220f      	movs	r2, #15
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	691a      	ldr	r2, [r3, #16]
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	08da      	lsrs	r2, r3, #3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3208      	adds	r2, #8
 8007df4:	69b9      	ldr	r1, [r7, #24]
 8007df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	2203      	movs	r2, #3
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f003 0203 	and.w	r2, r3, #3
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 80d8 	beq.w	8007fec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e3c:	4b2c      	ldr	r3, [pc, #176]	; (8007ef0 <HAL_GPIO_Init+0x22c>)
 8007e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e42:	4a2b      	ldr	r2, [pc, #172]	; (8007ef0 <HAL_GPIO_Init+0x22c>)
 8007e44:	f043 0302 	orr.w	r3, r3, #2
 8007e48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e4c:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <HAL_GPIO_Init+0x22c>)
 8007e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e5a:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <HAL_GPIO_Init+0x230>)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	089b      	lsrs	r3, r3, #2
 8007e60:	3302      	adds	r3, #2
 8007e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	220f      	movs	r2, #15
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43db      	mvns	r3, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1d      	ldr	r2, [pc, #116]	; (8007ef8 <HAL_GPIO_Init+0x234>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d04a      	beq.n	8007f1c <HAL_GPIO_Init+0x258>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <HAL_GPIO_Init+0x238>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d02b      	beq.n	8007ee6 <HAL_GPIO_Init+0x222>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <HAL_GPIO_Init+0x23c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d025      	beq.n	8007ee2 <HAL_GPIO_Init+0x21e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a1a      	ldr	r2, [pc, #104]	; (8007f04 <HAL_GPIO_Init+0x240>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01f      	beq.n	8007ede <HAL_GPIO_Init+0x21a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a19      	ldr	r2, [pc, #100]	; (8007f08 <HAL_GPIO_Init+0x244>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d019      	beq.n	8007eda <HAL_GPIO_Init+0x216>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a18      	ldr	r2, [pc, #96]	; (8007f0c <HAL_GPIO_Init+0x248>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <HAL_GPIO_Init+0x212>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a17      	ldr	r2, [pc, #92]	; (8007f10 <HAL_GPIO_Init+0x24c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00d      	beq.n	8007ed2 <HAL_GPIO_Init+0x20e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a16      	ldr	r2, [pc, #88]	; (8007f14 <HAL_GPIO_Init+0x250>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <HAL_GPIO_Init+0x20a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <HAL_GPIO_Init+0x254>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d101      	bne.n	8007eca <HAL_GPIO_Init+0x206>
 8007ec6:	2309      	movs	r3, #9
 8007ec8:	e029      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007eca:	230a      	movs	r3, #10
 8007ecc:	e027      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007ece:	2307      	movs	r3, #7
 8007ed0:	e025      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007ed2:	2306      	movs	r3, #6
 8007ed4:	e023      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007ed6:	2305      	movs	r3, #5
 8007ed8:	e021      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007eda:	2304      	movs	r3, #4
 8007edc:	e01f      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e01d      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e01b      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e019      	b.n	8007f1e <HAL_GPIO_Init+0x25a>
 8007eea:	bf00      	nop
 8007eec:	58000080 	.word	0x58000080
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	58000400 	.word	0x58000400
 8007ef8:	58020000 	.word	0x58020000
 8007efc:	58020400 	.word	0x58020400
 8007f00:	58020800 	.word	0x58020800
 8007f04:	58020c00 	.word	0x58020c00
 8007f08:	58021000 	.word	0x58021000
 8007f0c:	58021400 	.word	0x58021400
 8007f10:	58021800 	.word	0x58021800
 8007f14:	58021c00 	.word	0x58021c00
 8007f18:	58022400 	.word	0x58022400
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	f002 0203 	and.w	r2, r2, #3
 8007f24:	0092      	lsls	r2, r2, #2
 8007f26:	4093      	lsls	r3, r2
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f2e:	4938      	ldr	r1, [pc, #224]	; (8008010 <HAL_GPIO_Init+0x34c>)
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	089b      	lsrs	r3, r3, #2
 8007f34:	3302      	adds	r3, #2
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	43db      	mvns	r3, r3
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	43db      	mvns	r3, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f47f ae6b 	bne.w	8007cd8 <HAL_GPIO_Init+0x14>
  }
}
 8008002:	bf00      	nop
 8008004:	bf00      	nop
 8008006:	3724      	adds	r7, #36	; 0x24
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	58000400 	.word	0x58000400

08008014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	887b      	ldrh	r3, [r7, #2]
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800802c:	2301      	movs	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]
 8008030:	e001      	b.n	8008036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
 8008050:	4613      	mov	r3, r2
 8008052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008054:	787b      	ldrb	r3, [r7, #1]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008060:	e003      	b.n	800806a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008062:	887b      	ldrh	r3, [r7, #2]
 8008064:	041a      	lsls	r2, r3, #16
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	619a      	str	r2, [r3, #24]
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e07f      	b.n	800818a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fa fde2 	bl	8002c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2224      	movs	r2, #36	; 0x24
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d107      	bne.n	80080f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	e006      	b.n	8008100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d104      	bne.n	8008112 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6859      	ldr	r1, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <HAL_I2C_Init+0x11c>)
 800811e:	430b      	orrs	r3, r1
 8008120:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008130:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69d9      	ldr	r1, [r3, #28]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1a      	ldr	r2, [r3, #32]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	02008000 	.word	0x02008000

08008198 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
  }
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d138      	bne.n	8008254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e032      	b.n	8008256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	; 0x24
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0201 	bic.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800821e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6819      	ldr	r1, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008254:	2302      	movs	r3, #2
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b20      	cmp	r3, #32
 8008276:	d139      	bne.n	80082ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008282:	2302      	movs	r3, #2
 8008284:	e033      	b.n	80082ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2224      	movs	r2, #36	; 0x24
 8008292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0201 	bic.w	r2, r2, #1
 80082a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80082b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fc:	b08f      	sub	sp, #60	; 0x3c
 80082fe:	af0a      	add	r7, sp, #40	; 0x28
 8008300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e116      	b.n	800853a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f00e fbc8 	bl	8016abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2203      	movs	r2, #3
 8008330:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f00a fcf7 	bl	8012d3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	687e      	ldr	r6, [r7, #4]
 8008358:	466d      	mov	r5, sp
 800835a:	f106 0410 	add.w	r4, r6, #16
 800835e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800836a:	e885 0003 	stmia.w	r5, {r0, r1}
 800836e:	1d33      	adds	r3, r6, #4
 8008370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008372:	6838      	ldr	r0, [r7, #0]
 8008374:	f00a fbc2 	bl	8012afc <USB_CoreInit>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e0d7      	b.n	800853a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f00a fce5 	bl	8012d60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	e04a      	b.n	8008432 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800839c:	7bfa      	ldrb	r2, [r7, #15]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	333d      	adds	r3, #61	; 0x3d
 80083ac:	2201      	movs	r2, #1
 80083ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80083b0:	7bfa      	ldrb	r2, [r7, #15]
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4613      	mov	r3, r2
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	333c      	adds	r3, #60	; 0x3c
 80083c0:	7bfa      	ldrb	r2, [r7, #15]
 80083c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80083c4:	7bfa      	ldrb	r2, [r7, #15]
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	b298      	uxth	r0, r3
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3356      	adds	r3, #86	; 0x56
 80083d8:	4602      	mov	r2, r0
 80083da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80083dc:	7bfa      	ldrb	r2, [r7, #15]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4613      	mov	r3, r2
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	3340      	adds	r3, #64	; 0x40
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80083f0:	7bfa      	ldrb	r2, [r7, #15]
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	4613      	mov	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	3344      	adds	r3, #68	; 0x44
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008404:	7bfa      	ldrb	r2, [r7, #15]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	3348      	adds	r3, #72	; 0x48
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008418:	7bfa      	ldrb	r2, [r7, #15]
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	334c      	adds	r3, #76	; 0x4c
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	3301      	adds	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	7bfa      	ldrb	r2, [r7, #15]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3af      	bcc.n	800839c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
 8008440:	e044      	b.n	80084cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008442:	7bfa      	ldrb	r2, [r7, #15]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008458:	7bfa      	ldrb	r2, [r7, #15]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800846a:	7bfa      	ldrb	r2, [r7, #15]
 800846c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800846e:	7bfa      	ldrb	r2, [r7, #15]
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008480:	2200      	movs	r2, #0
 8008482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008484:	7bfa      	ldrb	r2, [r7, #15]
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800849a:	7bfa      	ldrb	r2, [r7, #15]
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80084b0:	7bfa      	ldrb	r2, [r7, #15]
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	3301      	adds	r3, #1
 80084ca:	73fb      	strb	r3, [r7, #15]
 80084cc:	7bfa      	ldrb	r2, [r7, #15]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d3b5      	bcc.n	8008442 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	687e      	ldr	r6, [r7, #4]
 80084de:	466d      	mov	r5, sp
 80084e0:	f106 0410 	add.w	r4, r6, #16
 80084e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80084f4:	1d33      	adds	r3, r6, #4
 80084f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084f8:	6838      	ldr	r0, [r7, #0]
 80084fa:	f00a fc7d 	bl	8012df8 <USB_DevInit>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e014      	b.n	800853a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	2b01      	cmp	r3, #1
 8008526:	d102      	bne.n	800852e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f96f 	bl	800980c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f00b fcbf 	bl	8013eb6 <USB_DevDisconnect>

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008542 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_PCD_Start+0x1c>
 800855a:	2302      	movs	r3, #2
 800855c:	e022      	b.n	80085a4 <HAL_PCD_Start+0x62>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008576:	2b01      	cmp	r3, #1
 8008578:	d105      	bne.n	8008586 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f00a fbc6 	bl	8012d1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f00b fc6d 	bl	8013e74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b08d      	sub	sp, #52	; 0x34
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f00b fd2b 	bl	801401e <USB_GetMode>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 84b7 	bne.w	8008f3e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f00b fc8f 	bl	8013ef8 <USB_ReadInterrupts>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 84ad 	beq.w	8008f3c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	0a1b      	lsrs	r3, r3, #8
 80085ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f00b fc7c 	bl	8013ef8 <USB_ReadInterrupts>
 8008600:	4603      	mov	r3, r0
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b02      	cmp	r3, #2
 8008608:	d107      	bne.n	800861a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695a      	ldr	r2, [r3, #20]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f002 0202 	and.w	r2, r2, #2
 8008618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f00b fc6a 	bl	8013ef8 <USB_ReadInterrupts>
 8008624:	4603      	mov	r3, r0
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b10      	cmp	r3, #16
 800862c:	d161      	bne.n	80086f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0210 	bic.w	r2, r2, #16
 800863c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	f003 020f 	and.w	r2, r3, #15
 800864a:	4613      	mov	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4413      	add	r3, r2
 800865a:	3304      	adds	r3, #4
 800865c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	0c5b      	lsrs	r3, r3, #17
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	2b02      	cmp	r3, #2
 8008668:	d124      	bne.n	80086b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008670:	4013      	ands	r3, r2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d035      	beq.n	80086e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008684:	b29b      	uxth	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	6a38      	ldr	r0, [r7, #32]
 800868a:	f00b faa1 	bl	8013bd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	091b      	lsrs	r3, r3, #4
 8008696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800869a:	441a      	add	r2, r3
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	091b      	lsrs	r3, r3, #4
 80086a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ac:	441a      	add	r2, r3
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	615a      	str	r2, [r3, #20]
 80086b2:	e016      	b.n	80086e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	0c5b      	lsrs	r3, r3, #17
 80086b8:	f003 030f 	and.w	r3, r3, #15
 80086bc:	2b06      	cmp	r3, #6
 80086be:	d110      	bne.n	80086e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086c6:	2208      	movs	r2, #8
 80086c8:	4619      	mov	r1, r3
 80086ca:	6a38      	ldr	r0, [r7, #32]
 80086cc:	f00b fa80 	bl	8013bd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086dc:	441a      	add	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0210 	orr.w	r2, r2, #16
 80086f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f00b fbfe 	bl	8013ef8 <USB_ReadInterrupts>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008706:	f040 80a7 	bne.w	8008858 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f00b fc03 	bl	8013f1e <USB_ReadDevAllOutEpInterrupt>
 8008718:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800871a:	e099      	b.n	8008850 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 808e 	beq.w	8008844 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f00b fc27 	bl	8013f86 <USB_ReadDevOutEPInterrupt>
 8008738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00c      	beq.n	800875e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	2301      	movs	r3, #1
 8008754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fed1 	bl	8009500 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f003 0308 	and.w	r3, r3, #8
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	2308      	movs	r3, #8
 8008778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800877a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 ffa7 	bl	80096d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	461a      	mov	r2, r3
 800879a:	2310      	movs	r3, #16
 800879c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d030      	beq.n	800880a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b0:	2b80      	cmp	r3, #128	; 0x80
 80087b2:	d109      	bne.n	80087c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	4613      	mov	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	3304      	adds	r3, #4
 80087dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	78db      	ldrb	r3, [r3, #3]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d108      	bne.n	80087f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f00e fa5a 	bl	8016cac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008804:	461a      	mov	r2, r3
 8008806:	2302      	movs	r3, #2
 8008808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d008      	beq.n	8008826 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008820:	461a      	mov	r2, r3
 8008822:	2320      	movs	r3, #32
 8008824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d009      	beq.n	8008844 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	3301      	adds	r3, #1
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f af62 	bne.w	800871c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f00b fb4b 	bl	8013ef8 <USB_ReadInterrupts>
 8008862:	4603      	mov	r3, r0
 8008864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800886c:	f040 80db 	bne.w	8008a26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f00b fb6c 	bl	8013f52 <USB_ReadDevAllInEpInterrupt>
 800887a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008880:	e0cd      	b.n	8008a1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 80c2 	beq.w	8008a12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f00b fb92 	bl	8013fc2 <USB_ReadDevInEPInterrupt>
 800889e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d057      	beq.n	800895a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	2201      	movs	r2, #1
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	69f9      	ldr	r1, [r7, #28]
 80088c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088ca:	4013      	ands	r3, r2
 80088cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088da:	461a      	mov	r2, r3
 80088dc:	2301      	movs	r3, #1
 80088de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d132      	bne.n	800894e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ec:	4613      	mov	r3, r2
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	3348      	adds	r3, #72	; 0x48
 80088f8:	6819      	ldr	r1, [r3, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	4613      	mov	r3, r2
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4403      	add	r3, r0
 8008908:	3344      	adds	r3, #68	; 0x44
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4419      	add	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008912:	4613      	mov	r3, r2
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4403      	add	r3, r0
 800891c:	3348      	adds	r3, #72	; 0x48
 800891e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d113      	bne.n	800894e <HAL_PCD_IRQHandler+0x3a2>
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	4613      	mov	r3, r2
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	334c      	adds	r3, #76	; 0x4c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d108      	bne.n	800894e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008946:	461a      	mov	r2, r3
 8008948:	2101      	movs	r1, #1
 800894a:	f00b fb9b 	bl	8014084 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	b2db      	uxtb	r3, r3
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f00e f924 	bl	8016ba2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f003 0308 	and.w	r3, r3, #8
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008970:	461a      	mov	r2, r3
 8008972:	2308      	movs	r3, #8
 8008974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d008      	beq.n	8008992 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898c:	461a      	mov	r2, r3
 800898e:	2310      	movs	r3, #16
 8008990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	461a      	mov	r2, r3
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d023      	beq.n	8008a00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80089b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ba:	6a38      	ldr	r0, [r7, #32]
 80089bc:	f00a fb7a 	bl	80130b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	3338      	adds	r3, #56	; 0x38
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4413      	add	r3, r2
 80089d0:	3304      	adds	r3, #4
 80089d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	78db      	ldrb	r3, [r3, #3]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d108      	bne.n	80089ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2200      	movs	r2, #0
 80089e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f00e f971 	bl	8016cd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fa:	461a      	mov	r2, r3
 80089fc:	2302      	movs	r3, #2
 80089fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fcea 	bl	80093e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	3301      	adds	r3, #1
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	085b      	lsrs	r3, r3, #1
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f af2e 	bne.w	8008882 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f00b fa64 	bl	8013ef8 <USB_ReadInterrupts>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a3a:	d122      	bne.n	8008a82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d108      	bne.n	8008a6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a62:	2100      	movs	r1, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fef5 	bl	8009854 <HAL_PCDEx_LPM_Callback>
 8008a6a:	e002      	b.n	8008a72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f00e f90f 	bl	8016c90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695a      	ldr	r2, [r3, #20]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f00b fa36 	bl	8013ef8 <USB_ReadInterrupts>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a96:	d112      	bne.n	8008abe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d102      	bne.n	8008aae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f00e f8cb 	bl	8016c44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695a      	ldr	r2, [r3, #20]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f00b fa18 	bl	8013ef8 <USB_ReadInterrupts>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ad2:	d121      	bne.n	8008b18 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	695a      	ldr	r2, [r3, #20]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008ae2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d111      	bne.n	8008b12 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afc:	089b      	lsrs	r3, r3, #2
 8008afe:	f003 020f 	and.w	r2, r3, #15
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b08:	2101      	movs	r1, #1
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fea2 	bl	8009854 <HAL_PCDEx_LPM_Callback>
 8008b10:	e002      	b.n	8008b18 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f00e f896 	bl	8016c44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f00b f9eb 	bl	8013ef8 <USB_ReadInterrupts>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2c:	f040 80b7 	bne.w	8008c9e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b3e:	f023 0301 	bic.w	r3, r3, #1
 8008b42:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2110      	movs	r1, #16
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f00a fab2 	bl	80130b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b50:	2300      	movs	r3, #0
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b54:	e046      	b.n	8008be4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b62:	461a      	mov	r2, r3
 8008b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b68:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bae:	0151      	lsls	r1, r2, #5
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	440a      	add	r2, r1
 8008bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be0:	3301      	adds	r3, #1
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d3b3      	bcc.n	8008b56 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d016      	beq.n	8008c38 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1a:	f043 030b 	orr.w	r3, r3, #11
 8008c1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c30:	f043 030b 	orr.w	r3, r3, #11
 8008c34:	6453      	str	r3, [r2, #68]	; 0x44
 8008c36:	e015      	b.n	8008c64 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c46:	4619      	mov	r1, r3
 8008c48:	f242 032b 	movw	r3, #8235	; 0x202b
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5e:	f043 030b 	orr.w	r3, r3, #11
 8008c62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f00b f9fb 	bl	8014084 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f00b f928 	bl	8013ef8 <USB_ReadInterrupts>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb2:	d124      	bne.n	8008cfe <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f00b f9bf 	bl	801403c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f00a fa73 	bl	80131ae <USB_GetDevSpeed>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681c      	ldr	r4, [r3, #0]
 8008cd4:	f001 fd88 	bl	800a7e8 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f009 ff78 	bl	8012bd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f00d ff82 	bl	8016bf2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	695a      	ldr	r2, [r3, #20]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f00b f8f8 	bl	8013ef8 <USB_ReadInterrupts>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d10a      	bne.n	8008d28 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f00d ff5f 	bl	8016bd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f002 0208 	and.w	r2, r2, #8
 8008d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f00b f8e3 	bl	8013ef8 <USB_ReadInterrupts>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d38:	2b80      	cmp	r3, #128	; 0x80
 8008d3a:	d122      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d48:	2301      	movs	r3, #1
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4c:	e014      	b.n	8008d78 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d105      	bne.n	8008d72 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fb09 	bl	8009384 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	3301      	adds	r3, #1
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3e5      	bcc.n	8008d4e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f00b f8b6 	bl	8013ef8 <USB_ReadInterrupts>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d96:	d13b      	bne.n	8008e10 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d98:	2301      	movs	r3, #1
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9c:	e02b      	b.n	8008df6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	4613      	mov	r3, r2
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	3340      	adds	r3, #64	; 0x40
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d115      	bne.n	8008df0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da12      	bge.n	8008df0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dce:	4613      	mov	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	333f      	adds	r3, #63	; 0x3f
 8008dda:	2201      	movs	r2, #1
 8008ddc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 faca 	bl	8009384 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	3301      	adds	r3, #1
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3ce      	bcc.n	8008d9e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f00b f86f 	bl	8013ef8 <USB_ReadInterrupts>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e24:	d155      	bne.n	8008ed2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e26:	2301      	movs	r3, #1
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	e045      	b.n	8008eb8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d12e      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	da2b      	bge.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d121      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e72:	4613      	mov	r3, r2
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e80:	2201      	movs	r2, #1
 8008e82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008eae:	6053      	str	r3, [r2, #4]
            break;
 8008eb0:	e007      	b.n	8008ec2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d3b4      	bcc.n	8008e2c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695a      	ldr	r2, [r3, #20]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f00b f80e 	bl	8013ef8 <USB_ReadInterrupts>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee6:	d10a      	bne.n	8008efe <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f00d ff03 	bl	8016cf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	695a      	ldr	r2, [r3, #20]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f00a fff8 	bl	8013ef8 <USB_ReadInterrupts>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d115      	bne.n	8008f3e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f00d fef3 	bl	8016d10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6859      	ldr	r1, [r3, #4]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
 8008f3a:	e000      	b.n	8008f3e <HAL_PCD_IRQHandler+0x992>
      return;
 8008f3c:	bf00      	nop
    }
  }
}
 8008f3e:	3734      	adds	r7, #52	; 0x34
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}

08008f44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_PCD_SetAddress+0x1a>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e013      	b.n	8008f86 <HAL_PCD_SetAddress+0x42>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f00a ff56 	bl	8013e28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	4608      	mov	r0, r1
 8008f98:	4611      	mov	r1, r2
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	70fb      	strb	r3, [r7, #3]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	803b      	strh	r3, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	da0f      	bge.n	8008fd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	4613      	mov	r3, r2
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	4413      	add	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	3338      	adds	r3, #56	; 0x38
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3304      	adds	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	705a      	strb	r2, [r3, #1]
 8008fd2:	e00f      	b.n	8008ff4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	f003 020f 	and.w	r2, r3, #15
 8008fda:	4613      	mov	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	4413      	add	r3, r2
 8008fea:	3304      	adds	r3, #4
 8008fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009000:	883a      	ldrh	r2, [r7, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	78ba      	ldrb	r2, [r7, #2]
 800900a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800901e:	78bb      	ldrb	r3, [r7, #2]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d102      	bne.n	800902a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009030:	2b01      	cmp	r3, #1
 8009032:	d101      	bne.n	8009038 <HAL_PCD_EP_Open+0xaa>
 8009034:	2302      	movs	r3, #2
 8009036:	e00e      	b.n	8009056 <HAL_PCD_EP_Open+0xc8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68f9      	ldr	r1, [r7, #12]
 8009046:	4618      	mov	r0, r3
 8009048:	f00a f8d6 	bl	80131f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009054:	7afb      	ldrb	r3, [r7, #11]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800906a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800906e:	2b00      	cmp	r3, #0
 8009070:	da0f      	bge.n	8009092 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	f003 020f 	and.w	r2, r3, #15
 8009078:	4613      	mov	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	3338      	adds	r3, #56	; 0x38
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	4413      	add	r3, r2
 8009086:	3304      	adds	r3, #4
 8009088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	705a      	strb	r2, [r3, #1]
 8009090:	e00f      	b.n	80090b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_PCD_EP_Close+0x6e>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e00e      	b.n	80090ea <HAL_PCD_EP_Close+0x8c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	4618      	mov	r0, r3
 80090dc:	f00a f914 	bl	8013308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	460b      	mov	r3, r1
 8009100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	f003 020f 	and.w	r2, r3, #15
 8009108:	4613      	mov	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	3304      	adds	r3, #4
 800911a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2200      	movs	r2, #0
 8009132:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	b2da      	uxtb	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d102      	bne.n	800914e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	b2db      	uxtb	r3, r3
 8009158:	461a      	mov	r2, r3
 800915a:	6979      	ldr	r1, [r7, #20]
 800915c:	f00a f9b0 	bl	80134c0 <USB_EPStartXfer>

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	00db      	lsls	r3, r3, #3
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800918c:	681b      	ldr	r3, [r3, #0]
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
 80091a6:	460b      	mov	r3, r1
 80091a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	f003 020f 	and.w	r2, r3, #15
 80091b0:	4613      	mov	r3, r2
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	3338      	adds	r3, #56	; 0x38
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	3304      	adds	r3, #4
 80091c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2200      	movs	r2, #0
 80091d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2201      	movs	r2, #1
 80091d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d102      	bne.n	80091f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6818      	ldr	r0, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	6979      	ldr	r1, [r7, #20]
 8009202:	f00a f95d 	bl	80134c0 <USB_EPStartXfer>

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	429a      	cmp	r2, r3
 8009228:	d901      	bls.n	800922e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e050      	b.n	80092d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800922e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da0f      	bge.n	8009256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	4613      	mov	r3, r2
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	3338      	adds	r3, #56	; 0x38
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	705a      	strb	r2, [r3, #1]
 8009254:	e00d      	b.n	8009272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	b2da      	uxtb	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800928a:	2b01      	cmp	r3, #1
 800928c:	d101      	bne.n	8009292 <HAL_PCD_EP_SetStall+0x82>
 800928e:	2302      	movs	r3, #2
 8009290:	e01e      	b.n	80092d0 <HAL_PCD_EP_SetStall+0xc0>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f00a fced 	bl	8013c80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	b2d9      	uxtb	r1, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092c0:	461a      	mov	r2, r3
 80092c2:	f00a fedf 	bl	8014084 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	f003 020f 	and.w	r2, r3, #15
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d901      	bls.n	80092f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e042      	b.n	800937c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	da0f      	bge.n	800931e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	f003 020f 	and.w	r2, r3, #15
 8009304:	4613      	mov	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3338      	adds	r3, #56	; 0x38
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	4413      	add	r3, r2
 8009312:	3304      	adds	r3, #4
 8009314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	705a      	strb	r2, [r3, #1]
 800931c:	e00f      	b.n	800933e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	f003 020f 	and.w	r2, r3, #15
 8009324:	4613      	mov	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	3304      	adds	r3, #4
 8009336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	b2da      	uxtb	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_PCD_EP_ClrStall+0x86>
 800935a:	2302      	movs	r3, #2
 800935c:	e00e      	b.n	800937c <HAL_PCD_EP_ClrStall+0xa4>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	4618      	mov	r0, r3
 800936e:	f00a fcf5 	bl	8013d5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009394:	2b00      	cmp	r3, #0
 8009396:	da0c      	bge.n	80093b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	f003 020f 	and.w	r2, r3, #15
 800939e:	4613      	mov	r3, r2
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	3338      	adds	r3, #56	; 0x38
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	4413      	add	r3, r2
 80093ac:	3304      	adds	r3, #4
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e00c      	b.n	80093cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093b2:	78fb      	ldrb	r3, [r7, #3]
 80093b4:	f003 020f 	and.w	r2, r3, #15
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f00a fb14 	bl	8013a00 <USB_EPStopXfer>
 80093d8:	4603      	mov	r3, r0
 80093da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b08a      	sub	sp, #40	; 0x28
 80093ea:	af02      	add	r7, sp, #8
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	3338      	adds	r3, #56	; 0x38
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	4413      	add	r3, r2
 800940a:	3304      	adds	r3, #4
 800940c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	429a      	cmp	r2, r3
 8009418:	d901      	bls.n	800941e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e06c      	b.n	80094f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	691a      	ldr	r2, [r3, #16]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	429a      	cmp	r2, r3
 8009432:	d902      	bls.n	800943a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	3303      	adds	r3, #3
 800943e:	089b      	lsrs	r3, r3, #2
 8009440:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009442:	e02b      	b.n	800949c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	429a      	cmp	r2, r3
 8009458:	d902      	bls.n	8009460 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	3303      	adds	r3, #3
 8009464:	089b      	lsrs	r3, r3, #2
 8009466:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68d9      	ldr	r1, [r3, #12]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b2da      	uxtb	r2, r3
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009478:	b2db      	uxtb	r3, r3
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	4603      	mov	r3, r0
 800947e:	6978      	ldr	r0, [r7, #20]
 8009480:	f00a fb68 	bl	8013b54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	441a      	add	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	695a      	ldr	r2, [r3, #20]
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	441a      	add	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d809      	bhi.n	80094c6 <PCD_WriteEmptyTxFifo+0xe0>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	695a      	ldr	r2, [r3, #20]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d203      	bcs.n	80094c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1be      	bne.n	8009444 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d811      	bhi.n	80094f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	2201      	movs	r2, #1
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	43db      	mvns	r3, r3
 80094ec:	6939      	ldr	r1, [r7, #16]
 80094ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094f2:	4013      	ands	r3, r2
 80094f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	333c      	adds	r3, #60	; 0x3c
 8009518:	3304      	adds	r3, #4
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d17b      	bne.n	800962e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f003 0308 	and.w	r3, r3, #8
 800953c:	2b00      	cmp	r3, #0
 800953e:	d015      	beq.n	800956c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	4a61      	ldr	r2, [pc, #388]	; (80096c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	f240 80b9 	bls.w	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 80b3 	beq.w	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	461a      	mov	r2, r3
 8009564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009568:	6093      	str	r3, [r2, #8]
 800956a:	e0a7      	b.n	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	461a      	mov	r2, r3
 8009584:	2320      	movs	r3, #32
 8009586:	6093      	str	r3, [r2, #8]
 8009588:	e098      	b.n	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009590:	2b00      	cmp	r3, #0
 8009592:	f040 8093 	bne.w	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	4a4b      	ldr	r2, [pc, #300]	; (80096c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d90f      	bls.n	80095be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	461a      	mov	r2, r3
 80095b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ba:	6093      	str	r3, [r2, #8]
 80095bc:	e07e      	b.n	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4613      	mov	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	4413      	add	r3, r2
 80095d0:	3304      	adds	r3, #4
 80095d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	0159      	lsls	r1, r3, #5
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	440b      	add	r3, r1
 80095e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d114      	bne.n	8009620 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009608:	461a      	mov	r2, r3
 800960a:	2101      	movs	r1, #1
 800960c:	f00a fd3a 	bl	8014084 <USB_EP0_OutStart>
 8009610:	e006      	b.n	8009620 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	441a      	add	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f00d faa0 	bl	8016b6c <HAL_PCD_DataOutStageCallback>
 800962c:	e046      	b.n	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4a26      	ldr	r2, [pc, #152]	; (80096cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d124      	bne.n	8009680 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	461a      	mov	r2, r3
 800964e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009652:	6093      	str	r3, [r2, #8]
 8009654:	e032      	b.n	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d008      	beq.n	8009672 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966c:	461a      	mov	r2, r3
 800966e:	2320      	movs	r3, #32
 8009670:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f00d fa77 	bl	8016b6c <HAL_PCD_DataOutStageCallback>
 800967e:	e01d      	b.n	80096bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d114      	bne.n	80096b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	4613      	mov	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d108      	bne.n	80096b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096a8:	461a      	mov	r2, r3
 80096aa:	2100      	movs	r1, #0
 80096ac:	f00a fcea 	bl	8014084 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f00d fa58 	bl	8016b6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	4f54300a 	.word	0x4f54300a
 80096cc:	4f54310a 	.word	0x4f54310a

080096d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	333c      	adds	r3, #60	; 0x3c
 80096e8:	3304      	adds	r3, #4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a15      	ldr	r2, [pc, #84]	; (8009758 <PCD_EP_OutSetupPacket_int+0x88>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d90e      	bls.n	8009724 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800970c:	2b00      	cmp	r3, #0
 800970e:	d009      	beq.n	8009724 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	461a      	mov	r2, r3
 800971e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009722:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f00d fa0f 	bl	8016b48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4a0a      	ldr	r2, [pc, #40]	; (8009758 <PCD_EP_OutSetupPacket_int+0x88>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d90c      	bls.n	800974c <PCD_EP_OutSetupPacket_int+0x7c>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d108      	bne.n	800974c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009744:	461a      	mov	r2, r3
 8009746:	2101      	movs	r1, #1
 8009748:	f00a fc9c 	bl	8014084 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	4f54300a 	.word	0x4f54300a

0800975c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
 8009768:	4613      	mov	r3, r2
 800976a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d107      	bne.n	800978a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800977a:	883b      	ldrh	r3, [r7, #0]
 800977c:	0419      	lsls	r1, r3, #16
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	430a      	orrs	r2, r1
 8009786:	629a      	str	r2, [r3, #40]	; 0x28
 8009788:	e028      	b.n	80097dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	0c1b      	lsrs	r3, r3, #16
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	4413      	add	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
 800979c:	e00d      	b.n	80097ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	3340      	adds	r3, #64	; 0x40
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	3301      	adds	r3, #1
 80097b8:	73fb      	strb	r3, [r7, #15]
 80097ba:	7bfa      	ldrb	r2, [r7, #15]
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	3b01      	subs	r3, #1
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d3ec      	bcc.n	800979e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80097c4:	883b      	ldrh	r3, [r7, #0]
 80097c6:	0418      	lsls	r0, r3, #16
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6819      	ldr	r1, [r3, #0]
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	4302      	orrs	r2, r0
 80097d4:	3340      	adds	r3, #64	; 0x40
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	440b      	add	r3, r1
 80097da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	887a      	ldrh	r2, [r7, #2]
 80097fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <HAL_PCDEx_ActivateLPM+0x44>)
 800983c:	4313      	orrs	r3, r2
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	10000003 	.word	0x10000003

08009854 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009874:	4b19      	ldr	r3, [pc, #100]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f003 0304 	and.w	r3, r3, #4
 800987c:	2b04      	cmp	r3, #4
 800987e:	d00a      	beq.n	8009896 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009880:	4b16      	ldr	r3, [pc, #88]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	d001      	beq.n	8009892 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e01f      	b.n	80098d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	e01d      	b.n	80098d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f023 0207 	bic.w	r2, r3, #7
 800989e:	490f      	ldr	r1, [pc, #60]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80098a6:	f7fa f90f 	bl	8003ac8 <HAL_GetTick>
 80098aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098ac:	e009      	b.n	80098c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80098ae:	f7fa f90b 	bl	8003ac8 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098bc:	d901      	bls.n	80098c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e007      	b.n	80098d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098c2:	4b06      	ldr	r3, [pc, #24]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ce:	d1ee      	bne.n	80098ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	58024800 	.word	0x58024800

080098e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80098e0:	b480      	push	{r7}
 80098e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	4a04      	ldr	r2, [pc, #16]	; (80098fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80098ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098ee:	60d3      	str	r3, [r2, #12]
}
 80098f0:	bf00      	nop
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	58024800 	.word	0x58024800

08009900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08c      	sub	sp, #48	; 0x30
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e3c8      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8087 	beq.w	8009a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009920:	4b88      	ldr	r3, [pc, #544]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800992a:	4b86      	ldr	r3, [pc, #536]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	2b10      	cmp	r3, #16
 8009934:	d007      	beq.n	8009946 <HAL_RCC_OscConfig+0x46>
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	2b18      	cmp	r3, #24
 800993a:	d110      	bne.n	800995e <HAL_RCC_OscConfig+0x5e>
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d10b      	bne.n	800995e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009946:	4b7f      	ldr	r3, [pc, #508]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d06c      	beq.n	8009a2c <HAL_RCC_OscConfig+0x12c>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d168      	bne.n	8009a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e3a2      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009966:	d106      	bne.n	8009976 <HAL_RCC_OscConfig+0x76>
 8009968:	4b76      	ldr	r3, [pc, #472]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a75      	ldr	r2, [pc, #468]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 800996e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	e02e      	b.n	80099d4 <HAL_RCC_OscConfig+0xd4>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10c      	bne.n	8009998 <HAL_RCC_OscConfig+0x98>
 800997e:	4b71      	ldr	r3, [pc, #452]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a70      	ldr	r2, [pc, #448]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	4b6e      	ldr	r3, [pc, #440]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a6d      	ldr	r2, [pc, #436]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	e01d      	b.n	80099d4 <HAL_RCC_OscConfig+0xd4>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099a0:	d10c      	bne.n	80099bc <HAL_RCC_OscConfig+0xbc>
 80099a2:	4b68      	ldr	r3, [pc, #416]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a67      	ldr	r2, [pc, #412]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	4b65      	ldr	r3, [pc, #404]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a64      	ldr	r2, [pc, #400]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	e00b      	b.n	80099d4 <HAL_RCC_OscConfig+0xd4>
 80099bc:	4b61      	ldr	r3, [pc, #388]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a60      	ldr	r2, [pc, #384]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	4b5e      	ldr	r3, [pc, #376]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a5d      	ldr	r2, [pc, #372]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d013      	beq.n	8009a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099dc:	f7fa f874 	bl	8003ac8 <HAL_GetTick>
 80099e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099e2:	e008      	b.n	80099f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099e4:	f7fa f870 	bl	8003ac8 <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	2b64      	cmp	r3, #100	; 0x64
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e356      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099f6:	4b53      	ldr	r3, [pc, #332]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0f0      	beq.n	80099e4 <HAL_RCC_OscConfig+0xe4>
 8009a02:	e014      	b.n	8009a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a04:	f7fa f860 	bl	8003ac8 <HAL_GetTick>
 8009a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a0a:	e008      	b.n	8009a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a0c:	f7fa f85c 	bl	8003ac8 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b64      	cmp	r3, #100	; 0x64
 8009a18:	d901      	bls.n	8009a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e342      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a1e:	4b49      	ldr	r3, [pc, #292]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f0      	bne.n	8009a0c <HAL_RCC_OscConfig+0x10c>
 8009a2a:	e000      	b.n	8009a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 808c 	beq.w	8009b54 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a3c:	4b41      	ldr	r3, [pc, #260]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a46:	4b3f      	ldr	r3, [pc, #252]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a4c:	6a3b      	ldr	r3, [r7, #32]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d007      	beq.n	8009a62 <HAL_RCC_OscConfig+0x162>
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	2b18      	cmp	r3, #24
 8009a56:	d137      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x1c8>
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d132      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a62:	4b38      	ldr	r3, [pc, #224]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <HAL_RCC_OscConfig+0x17a>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e314      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a7a:	4b32      	ldr	r3, [pc, #200]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f023 0219 	bic.w	r2, r3, #25
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	492f      	ldr	r1, [pc, #188]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8c:	f7fa f81c 	bl	8003ac8 <HAL_GetTick>
 8009a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a94:	f7fa f818 	bl	8003ac8 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e2fe      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aa6:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0304 	and.w	r3, r3, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0f0      	beq.n	8009a94 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ab2:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	061b      	lsls	r3, r3, #24
 8009ac0:	4920      	ldr	r1, [pc, #128]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ac6:	e045      	b.n	8009b54 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d026      	beq.n	8009b1e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ad0:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f023 0219 	bic.w	r2, r3, #25
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	4919      	ldr	r1, [pc, #100]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae2:	f7f9 fff1 	bl	8003ac8 <HAL_GetTick>
 8009ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ae8:	e008      	b.n	8009afc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aea:	f7f9 ffed 	bl	8003ac8 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d901      	bls.n	8009afc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e2d3      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009afc:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0f0      	beq.n	8009aea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b08:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	061b      	lsls	r3, r3, #24
 8009b16:	490b      	ldr	r1, [pc, #44]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	604b      	str	r3, [r1, #4]
 8009b1c:	e01a      	b.n	8009b54 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a08      	ldr	r2, [pc, #32]	; (8009b44 <HAL_RCC_OscConfig+0x244>)
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2a:	f7f9 ffcd 	bl	8003ac8 <HAL_GetTick>
 8009b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b30:	e00a      	b.n	8009b48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b32:	f7f9 ffc9 	bl	8003ac8 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d903      	bls.n	8009b48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e2af      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
 8009b44:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b48:	4b96      	ldr	r3, [pc, #600]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1ee      	bne.n	8009b32 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d06a      	beq.n	8009c36 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b60:	4b90      	ldr	r3, [pc, #576]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b6a:	4b8e      	ldr	r3, [pc, #568]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	2b08      	cmp	r3, #8
 8009b74:	d007      	beq.n	8009b86 <HAL_RCC_OscConfig+0x286>
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	2b18      	cmp	r3, #24
 8009b7a:	d11b      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x2b4>
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d116      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b86:	4b87      	ldr	r3, [pc, #540]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <HAL_RCC_OscConfig+0x29e>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	2b80      	cmp	r3, #128	; 0x80
 8009b98:	d001      	beq.n	8009b9e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e282      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b9e:	4b81      	ldr	r3, [pc, #516]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	061b      	lsls	r3, r3, #24
 8009bac:	497d      	ldr	r1, [pc, #500]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bb2:	e040      	b.n	8009c36 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d023      	beq.n	8009c04 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bbc:	4b79      	ldr	r3, [pc, #484]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a78      	ldr	r2, [pc, #480]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc8:	f7f9 ff7e 	bl	8003ac8 <HAL_GetTick>
 8009bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bd0:	f7f9 ff7a 	bl	8003ac8 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e260      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009be2:	4b70      	ldr	r3, [pc, #448]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f0      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bee:	4b6d      	ldr	r3, [pc, #436]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	061b      	lsls	r3, r3, #24
 8009bfc:	4969      	ldr	r1, [pc, #420]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60cb      	str	r3, [r1, #12]
 8009c02:	e018      	b.n	8009c36 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c04:	4b67      	ldr	r3, [pc, #412]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a66      	ldr	r2, [pc, #408]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c10:	f7f9 ff5a 	bl	8003ac8 <HAL_GetTick>
 8009c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c18:	f7f9 ff56 	bl	8003ac8 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e23c      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c2a:	4b5e      	ldr	r3, [pc, #376]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1f0      	bne.n	8009c18 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d036      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d019      	beq.n	8009c7e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c4a:	4b56      	ldr	r3, [pc, #344]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c4e:	4a55      	ldr	r2, [pc, #340]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c50:	f043 0301 	orr.w	r3, r3, #1
 8009c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c56:	f7f9 ff37 	bl	8003ac8 <HAL_GetTick>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c5c:	e008      	b.n	8009c70 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c5e:	f7f9 ff33 	bl	8003ac8 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e219      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c70:	4b4c      	ldr	r3, [pc, #304]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <HAL_RCC_OscConfig+0x35e>
 8009c7c:	e018      	b.n	8009cb0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c7e:	4b49      	ldr	r3, [pc, #292]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c82:	4a48      	ldr	r2, [pc, #288]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009c84:	f023 0301 	bic.w	r3, r3, #1
 8009c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c8a:	f7f9 ff1d 	bl	8003ac8 <HAL_GetTick>
 8009c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c90:	e008      	b.n	8009ca4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c92:	f7f9 ff19 	bl	8003ac8 <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d901      	bls.n	8009ca4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e1ff      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ca4:	4b3f      	ldr	r3, [pc, #252]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f0      	bne.n	8009c92 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d036      	beq.n	8009d2a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d019      	beq.n	8009cf8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cc4:	4b37      	ldr	r3, [pc, #220]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a36      	ldr	r2, [pc, #216]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cd0:	f7f9 fefa 	bl	8003ac8 <HAL_GetTick>
 8009cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cd8:	f7f9 fef6 	bl	8003ac8 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e1dc      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cea:	4b2e      	ldr	r3, [pc, #184]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x3d8>
 8009cf6:	e018      	b.n	8009d2a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cf8:	4b2a      	ldr	r3, [pc, #168]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a29      	ldr	r2, [pc, #164]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d04:	f7f9 fee0 	bl	8003ac8 <HAL_GetTick>
 8009d08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d0a:	e008      	b.n	8009d1e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d0c:	f7f9 fedc 	bl	8003ac8 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d901      	bls.n	8009d1e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e1c2      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d1e:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1f0      	bne.n	8009d0c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 8086 	beq.w	8009e44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d38:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <HAL_RCC_OscConfig+0x4a8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a1a      	ldr	r2, [pc, #104]	; (8009da8 <HAL_RCC_OscConfig+0x4a8>)
 8009d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d44:	f7f9 fec0 	bl	8003ac8 <HAL_GetTick>
 8009d48:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d4a:	e008      	b.n	8009d5e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d4c:	f7f9 febc 	bl	8003ac8 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b64      	cmp	r3, #100	; 0x64
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e1a2      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <HAL_RCC_OscConfig+0x4a8>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0f0      	beq.n	8009d4c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d106      	bne.n	8009d80 <HAL_RCC_OscConfig+0x480>
 8009d72:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d76:	4a0b      	ldr	r2, [pc, #44]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d7e:	e032      	b.n	8009de6 <HAL_RCC_OscConfig+0x4e6>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d111      	bne.n	8009dac <HAL_RCC_OscConfig+0x4ac>
 8009d88:	4b06      	ldr	r3, [pc, #24]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8c:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	6713      	str	r3, [r2, #112]	; 0x70
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	4a02      	ldr	r2, [pc, #8]	; (8009da4 <HAL_RCC_OscConfig+0x4a4>)
 8009d9a:	f023 0304 	bic.w	r3, r3, #4
 8009d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009da0:	e021      	b.n	8009de6 <HAL_RCC_OscConfig+0x4e6>
 8009da2:	bf00      	nop
 8009da4:	58024400 	.word	0x58024400
 8009da8:	58024800 	.word	0x58024800
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	2b05      	cmp	r3, #5
 8009db2:	d10c      	bne.n	8009dce <HAL_RCC_OscConfig+0x4ce>
 8009db4:	4b83      	ldr	r3, [pc, #524]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db8:	4a82      	ldr	r2, [pc, #520]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009dba:	f043 0304 	orr.w	r3, r3, #4
 8009dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8009dc0:	4b80      	ldr	r3, [pc, #512]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	4a7f      	ldr	r2, [pc, #508]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	6713      	str	r3, [r2, #112]	; 0x70
 8009dcc:	e00b      	b.n	8009de6 <HAL_RCC_OscConfig+0x4e6>
 8009dce:	4b7d      	ldr	r3, [pc, #500]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	4a7c      	ldr	r2, [pc, #496]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dda:	4b7a      	ldr	r3, [pc, #488]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dde:	4a79      	ldr	r2, [pc, #484]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009de0:	f023 0304 	bic.w	r3, r3, #4
 8009de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d015      	beq.n	8009e1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dee:	f7f9 fe6b 	bl	8003ac8 <HAL_GetTick>
 8009df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009df4:	e00a      	b.n	8009e0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009df6:	f7f9 fe67 	bl	8003ac8 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d901      	bls.n	8009e0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e14b      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e0c:	4b6d      	ldr	r3, [pc, #436]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0ee      	beq.n	8009df6 <HAL_RCC_OscConfig+0x4f6>
 8009e18:	e014      	b.n	8009e44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e1a:	f7f9 fe55 	bl	8003ac8 <HAL_GetTick>
 8009e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e20:	e00a      	b.n	8009e38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e22:	f7f9 fe51 	bl	8003ac8 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d901      	bls.n	8009e38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e135      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e38:	4b62      	ldr	r3, [pc, #392]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1ee      	bne.n	8009e22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 812a 	beq.w	800a0a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e4e:	4b5d      	ldr	r3, [pc, #372]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e56:	2b18      	cmp	r3, #24
 8009e58:	f000 80ba 	beq.w	8009fd0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	f040 8095 	bne.w	8009f90 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e66:	4b57      	ldr	r3, [pc, #348]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a56      	ldr	r2, [pc, #344]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e72:	f7f9 fe29 	bl	8003ac8 <HAL_GetTick>
 8009e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e78:	e008      	b.n	8009e8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e7a:	f7f9 fe25 	bl	8003ac8 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e10b      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e8c:	4b4d      	ldr	r3, [pc, #308]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1f0      	bne.n	8009e7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e98:	4b4a      	ldr	r3, [pc, #296]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e9c:	4b4a      	ldr	r3, [pc, #296]	; (8009fc8 <HAL_RCC_OscConfig+0x6c8>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ea8:	0112      	lsls	r2, r2, #4
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	4945      	ldr	r1, [pc, #276]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	628b      	str	r3, [r1, #40]	; 0x28
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	025b      	lsls	r3, r3, #9
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eda:	3b01      	subs	r3, #1
 8009edc:	061b      	lsls	r3, r3, #24
 8009ede:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ee2:	4938      	ldr	r1, [pc, #224]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009ee8:	4b36      	ldr	r3, [pc, #216]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	4a35      	ldr	r2, [pc, #212]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ef4:	4b33      	ldr	r3, [pc, #204]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ef8:	4b34      	ldr	r3, [pc, #208]	; (8009fcc <HAL_RCC_OscConfig+0x6cc>)
 8009efa:	4013      	ands	r3, r2
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f00:	00d2      	lsls	r2, r2, #3
 8009f02:	4930      	ldr	r1, [pc, #192]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f08:	4b2e      	ldr	r3, [pc, #184]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	f023 020c 	bic.w	r2, r3, #12
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f14:	492b      	ldr	r1, [pc, #172]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f1a:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	f023 0202 	bic.w	r2, r3, #2
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f26:	4927      	ldr	r1, [pc, #156]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	4a24      	ldr	r2, [pc, #144]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f38:	4b22      	ldr	r3, [pc, #136]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	4a21      	ldr	r2, [pc, #132]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f44:	4b1f      	ldr	r3, [pc, #124]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	4a1e      	ldr	r2, [pc, #120]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f50:	4b1c      	ldr	r3, [pc, #112]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a1b      	ldr	r2, [pc, #108]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f5c:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a18      	ldr	r2, [pc, #96]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f68:	f7f9 fdae 	bl	8003ac8 <HAL_GetTick>
 8009f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f70:	f7f9 fdaa 	bl	8003ac8 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e090      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f82:	4b10      	ldr	r3, [pc, #64]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0x670>
 8009f8e:	e088      	b.n	800a0a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f90:	4b0c      	ldr	r3, [pc, #48]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a0b      	ldr	r2, [pc, #44]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9c:	f7f9 fd94 	bl	8003ac8 <HAL_GetTick>
 8009fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fa4:	f7f9 fd90 	bl	8003ac8 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e076      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fb6:	4b03      	ldr	r3, [pc, #12]	; (8009fc4 <HAL_RCC_OscConfig+0x6c4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f0      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x6a4>
 8009fc2:	e06e      	b.n	800a0a2 <HAL_RCC_OscConfig+0x7a2>
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	fffffc0c 	.word	0xfffffc0c
 8009fcc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009fd0:	4b36      	ldr	r3, [pc, #216]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009fd6:	4b35      	ldr	r3, [pc, #212]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d031      	beq.n	800a048 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f003 0203 	and.w	r2, r3, #3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d12a      	bne.n	800a048 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	091b      	lsrs	r3, r3, #4
 8009ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d122      	bne.n	800a048 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a00e:	429a      	cmp	r2, r3
 800a010:	d11a      	bne.n	800a048 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	0a5b      	lsrs	r3, r3, #9
 800a016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a020:	429a      	cmp	r2, r3
 800a022:	d111      	bne.n	800a048 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	0c1b      	lsrs	r3, r3, #16
 800a028:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a032:	429a      	cmp	r2, r3
 800a034:	d108      	bne.n	800a048 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	0e1b      	lsrs	r3, r3, #24
 800a03a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a042:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a044:	429a      	cmp	r2, r3
 800a046:	d001      	beq.n	800a04c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e02b      	b.n	800a0a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a04c:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a050:	08db      	lsrs	r3, r3, #3
 800a052:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a056:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d01f      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a062:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	4a11      	ldr	r2, [pc, #68]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a06e:	f7f9 fd2b 	bl	8003ac8 <HAL_GetTick>
 800a072:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a074:	bf00      	nop
 800a076:	f7f9 fd27 	bl	8003ac8 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	4293      	cmp	r3, r2
 800a080:	d0f9      	beq.n	800a076 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a082:	4b0a      	ldr	r3, [pc, #40]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a086:	4b0a      	ldr	r3, [pc, #40]	; (800a0b0 <HAL_RCC_OscConfig+0x7b0>)
 800a088:	4013      	ands	r3, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a08e:	00d2      	lsls	r2, r2, #3
 800a090:	4906      	ldr	r1, [pc, #24]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a092:	4313      	orrs	r3, r2
 800a094:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a096:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	4a04      	ldr	r2, [pc, #16]	; (800a0ac <HAL_RCC_OscConfig+0x7ac>)
 800a09c:	f043 0301 	orr.w	r3, r3, #1
 800a0a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3730      	adds	r7, #48	; 0x30
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	ffff0007 	.word	0xffff0007

0800a0b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e19c      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0c8:	4b8a      	ldr	r3, [pc, #552]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 030f 	and.w	r3, r3, #15
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d910      	bls.n	800a0f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0d6:	4b87      	ldr	r3, [pc, #540]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f023 020f 	bic.w	r2, r3, #15
 800a0de:	4985      	ldr	r1, [pc, #532]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0e6:	4b83      	ldr	r3, [pc, #524]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d001      	beq.n	800a0f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e184      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d010      	beq.n	800a126 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691a      	ldr	r2, [r3, #16]
 800a108:	4b7b      	ldr	r3, [pc, #492]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a110:	429a      	cmp	r2, r3
 800a112:	d908      	bls.n	800a126 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a114:	4b78      	ldr	r3, [pc, #480]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	4975      	ldr	r1, [pc, #468]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a122:	4313      	orrs	r3, r2
 800a124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d010      	beq.n	800a154 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	695a      	ldr	r2, [r3, #20]
 800a136:	4b70      	ldr	r3, [pc, #448]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a13e:	429a      	cmp	r2, r3
 800a140:	d908      	bls.n	800a154 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a142:	4b6d      	ldr	r3, [pc, #436]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	496a      	ldr	r1, [pc, #424]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a150:	4313      	orrs	r3, r2
 800a152:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d010      	beq.n	800a182 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	699a      	ldr	r2, [r3, #24]
 800a164:	4b64      	ldr	r3, [pc, #400]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d908      	bls.n	800a182 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a170:	4b61      	ldr	r3, [pc, #388]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a172:	69db      	ldr	r3, [r3, #28]
 800a174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	495e      	ldr	r1, [pc, #376]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69da      	ldr	r2, [r3, #28]
 800a192:	4b59      	ldr	r3, [pc, #356]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d908      	bls.n	800a1b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a19e:	4b56      	ldr	r3, [pc, #344]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	4953      	ldr	r1, [pc, #332]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d010      	beq.n	800a1de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	4b4d      	ldr	r3, [pc, #308]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d908      	bls.n	800a1de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1cc:	4b4a      	ldr	r3, [pc, #296]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	f023 020f 	bic.w	r2, r3, #15
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	4947      	ldr	r1, [pc, #284]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d055      	beq.n	800a296 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1ea:	4b43      	ldr	r3, [pc, #268]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	4940      	ldr	r1, [pc, #256]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d107      	bne.n	800a214 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a204:	4b3c      	ldr	r3, [pc, #240]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d121      	bne.n	800a254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e0f6      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d107      	bne.n	800a22c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a21c:	4b36      	ldr	r3, [pc, #216]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d115      	bne.n	800a254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e0ea      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d107      	bne.n	800a244 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a234:	4b30      	ldr	r3, [pc, #192]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d109      	bne.n	800a254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e0de      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a244:	4b2c      	ldr	r3, [pc, #176]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e0d6      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a254:	4b28      	ldr	r3, [pc, #160]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	f023 0207 	bic.w	r2, r3, #7
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4925      	ldr	r1, [pc, #148]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a262:	4313      	orrs	r3, r2
 800a264:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a266:	f7f9 fc2f 	bl	8003ac8 <HAL_GetTick>
 800a26a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a26c:	e00a      	b.n	800a284 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a26e:	f7f9 fc2b 	bl	8003ac8 <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d901      	bls.n	800a284 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e0be      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a284:	4b1c      	ldr	r3, [pc, #112]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	429a      	cmp	r2, r3
 800a294:	d1eb      	bne.n	800a26e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d010      	beq.n	800a2c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	f003 030f 	and.w	r3, r3, #15
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d208      	bcs.n	800a2c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2b2:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	f023 020f 	bic.w	r2, r3, #15
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	490e      	ldr	r1, [pc, #56]	; (800a2f8 <HAL_RCC_ClockConfig+0x244>)
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2c4:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d214      	bcs.n	800a2fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2d2:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f023 020f 	bic.w	r2, r3, #15
 800a2da:	4906      	ldr	r1, [pc, #24]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2e2:	4b04      	ldr	r3, [pc, #16]	; (800a2f4 <HAL_RCC_ClockConfig+0x240>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d005      	beq.n	800a2fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e086      	b.n	800a402 <HAL_RCC_ClockConfig+0x34e>
 800a2f4:	52002000 	.word	0x52002000
 800a2f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b00      	cmp	r3, #0
 800a306:	d010      	beq.n	800a32a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	4b3f      	ldr	r3, [pc, #252]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a314:	429a      	cmp	r2, r3
 800a316:	d208      	bcs.n	800a32a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a318:	4b3c      	ldr	r3, [pc, #240]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	4939      	ldr	r1, [pc, #228]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a326:	4313      	orrs	r3, r2
 800a328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0308 	and.w	r3, r3, #8
 800a332:	2b00      	cmp	r3, #0
 800a334:	d010      	beq.n	800a358 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	695a      	ldr	r2, [r3, #20]
 800a33a:	4b34      	ldr	r3, [pc, #208]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a342:	429a      	cmp	r2, r3
 800a344:	d208      	bcs.n	800a358 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a346:	4b31      	ldr	r3, [pc, #196]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	492e      	ldr	r1, [pc, #184]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a354:	4313      	orrs	r3, r2
 800a356:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0310 	and.w	r3, r3, #16
 800a360:	2b00      	cmp	r3, #0
 800a362:	d010      	beq.n	800a386 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	699a      	ldr	r2, [r3, #24]
 800a368:	4b28      	ldr	r3, [pc, #160]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a370:	429a      	cmp	r2, r3
 800a372:	d208      	bcs.n	800a386 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a374:	4b25      	ldr	r3, [pc, #148]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	4922      	ldr	r1, [pc, #136]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a382:	4313      	orrs	r3, r2
 800a384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	69da      	ldr	r2, [r3, #28]
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d208      	bcs.n	800a3b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3a2:	4b1a      	ldr	r3, [pc, #104]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	4917      	ldr	r1, [pc, #92]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a3b4:	f000 f89e 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	4b14      	ldr	r3, [pc, #80]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	f003 030f 	and.w	r3, r3, #15
 800a3c4:	4912      	ldr	r1, [pc, #72]	; (800a410 <HAL_RCC_ClockConfig+0x35c>)
 800a3c6:	5ccb      	ldrb	r3, [r1, r3]
 800a3c8:	f003 031f 	and.w	r3, r3, #31
 800a3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3d2:	4b0e      	ldr	r3, [pc, #56]	; (800a40c <HAL_RCC_ClockConfig+0x358>)
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	4a0d      	ldr	r2, [pc, #52]	; (800a410 <HAL_RCC_ClockConfig+0x35c>)
 800a3dc:	5cd3      	ldrb	r3, [r2, r3]
 800a3de:	f003 031f 	and.w	r3, r3, #31
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e8:	4a0a      	ldr	r2, [pc, #40]	; (800a414 <HAL_RCC_ClockConfig+0x360>)
 800a3ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3ec:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <HAL_RCC_ClockConfig+0x364>)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a3f2:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <HAL_RCC_ClockConfig+0x368>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f9 fb1c 	bl	8003a34 <HAL_InitTick>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	58024400 	.word	0x58024400
 800a410:	080185dc 	.word	0x080185dc
 800a414:	24000004 	.word	0x24000004
 800a418:	24000000 	.word	0x24000000
 800a41c:	24000008 	.word	0x24000008

0800a420 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08c      	sub	sp, #48	; 0x30
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d12a      	bne.n	800a488 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a432:	4b2d      	ldr	r3, [pc, #180]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a438:	4a2b      	ldr	r2, [pc, #172]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a442:	4b29      	ldr	r3, [pc, #164]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	61bb      	str	r3, [r7, #24]
 800a44e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a450:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a456:	2302      	movs	r3, #2
 800a458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a45a:	2303      	movs	r3, #3
 800a45c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a462:	2300      	movs	r3, #0
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a466:	f107 031c 	add.w	r3, r7, #28
 800a46a:	4619      	mov	r1, r3
 800a46c:	481f      	ldr	r0, [pc, #124]	; (800a4ec <HAL_RCC_MCOConfig+0xcc>)
 800a46e:	f7fd fc29 	bl	8007cc4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a472:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a47a:	68b9      	ldr	r1, [r7, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	430b      	orrs	r3, r1
 800a480:	4919      	ldr	r1, [pc, #100]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a482:	4313      	orrs	r3, r2
 800a484:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a486:	e02a      	b.n	800a4de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a488:	4b17      	ldr	r3, [pc, #92]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a48a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a48e:	4a16      	ldr	r2, [pc, #88]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a490:	f043 0304 	orr.w	r3, r3, #4
 800a494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a498:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a49a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a49e:	f003 0304 	and.w	r3, r3, #4
 800a4a2:	617b      	str	r3, [r7, #20]
 800a4a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a4a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a4bc:	f107 031c 	add.w	r3, r7, #28
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	480b      	ldr	r0, [pc, #44]	; (800a4f0 <HAL_RCC_MCOConfig+0xd0>)
 800a4c4:	f7fd fbfe 	bl	8007cc4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a4c8:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	01d9      	lsls	r1, r3, #7
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	4903      	ldr	r1, [pc, #12]	; (800a4e8 <HAL_RCC_MCOConfig+0xc8>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	610b      	str	r3, [r1, #16]
}
 800a4de:	bf00      	nop
 800a4e0:	3730      	adds	r7, #48	; 0x30
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	58020000 	.word	0x58020000
 800a4f0:	58020800 	.word	0x58020800

0800a4f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b089      	sub	sp, #36	; 0x24
 800a4f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4fa:	4bb3      	ldr	r3, [pc, #716]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a502:	2b18      	cmp	r3, #24
 800a504:	f200 8155 	bhi.w	800a7b2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a508:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a575 	.word	0x0800a575
 800a514:	0800a7b3 	.word	0x0800a7b3
 800a518:	0800a7b3 	.word	0x0800a7b3
 800a51c:	0800a7b3 	.word	0x0800a7b3
 800a520:	0800a7b3 	.word	0x0800a7b3
 800a524:	0800a7b3 	.word	0x0800a7b3
 800a528:	0800a7b3 	.word	0x0800a7b3
 800a52c:	0800a7b3 	.word	0x0800a7b3
 800a530:	0800a59b 	.word	0x0800a59b
 800a534:	0800a7b3 	.word	0x0800a7b3
 800a538:	0800a7b3 	.word	0x0800a7b3
 800a53c:	0800a7b3 	.word	0x0800a7b3
 800a540:	0800a7b3 	.word	0x0800a7b3
 800a544:	0800a7b3 	.word	0x0800a7b3
 800a548:	0800a7b3 	.word	0x0800a7b3
 800a54c:	0800a7b3 	.word	0x0800a7b3
 800a550:	0800a5a1 	.word	0x0800a5a1
 800a554:	0800a7b3 	.word	0x0800a7b3
 800a558:	0800a7b3 	.word	0x0800a7b3
 800a55c:	0800a7b3 	.word	0x0800a7b3
 800a560:	0800a7b3 	.word	0x0800a7b3
 800a564:	0800a7b3 	.word	0x0800a7b3
 800a568:	0800a7b3 	.word	0x0800a7b3
 800a56c:	0800a7b3 	.word	0x0800a7b3
 800a570:	0800a5a7 	.word	0x0800a5a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a574:	4b94      	ldr	r3, [pc, #592]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0320 	and.w	r3, r3, #32
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d009      	beq.n	800a594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a580:	4b91      	ldr	r3, [pc, #580]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	08db      	lsrs	r3, r3, #3
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	4a90      	ldr	r2, [pc, #576]	; (800a7cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a58c:	fa22 f303 	lsr.w	r3, r2, r3
 800a590:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a592:	e111      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a594:	4b8d      	ldr	r3, [pc, #564]	; (800a7cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a596:	61bb      	str	r3, [r7, #24]
      break;
 800a598:	e10e      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a59a:	4b8d      	ldr	r3, [pc, #564]	; (800a7d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a59c:	61bb      	str	r3, [r7, #24]
      break;
 800a59e:	e10b      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a5a0:	4b8c      	ldr	r3, [pc, #560]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5a2:	61bb      	str	r3, [r7, #24]
      break;
 800a5a4:	e108      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5a6:	4b88      	ldr	r3, [pc, #544]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a5b0:	4b85      	ldr	r3, [pc, #532]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b4:	091b      	lsrs	r3, r3, #4
 800a5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a5bc:	4b82      	ldr	r3, [pc, #520]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5c6:	4b80      	ldr	r3, [pc, #512]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ca:	08db      	lsrs	r3, r3, #3
 800a5cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	fb02 f303 	mul.w	r3, r2, r3
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80e1 	beq.w	800a7ac <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	f000 8083 	beq.w	800a6f8 <HAL_RCC_GetSysClockFreq+0x204>
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	f200 80a1 	bhi.w	800a73c <HAL_RCC_GetSysClockFreq+0x248>
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <HAL_RCC_GetSysClockFreq+0x114>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d056      	beq.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a606:	e099      	b.n	800a73c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a608:	4b6f      	ldr	r3, [pc, #444]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0320 	and.w	r3, r3, #32
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02d      	beq.n	800a670 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a614:	4b6c      	ldr	r3, [pc, #432]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	08db      	lsrs	r3, r3, #3
 800a61a:	f003 0303 	and.w	r3, r3, #3
 800a61e:	4a6b      	ldr	r2, [pc, #428]	; (800a7cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a620:	fa22 f303 	lsr.w	r3, r2, r3
 800a624:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	ee07 3a90 	vmov	s15, r3
 800a62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a63e:	4b62      	ldr	r3, [pc, #392]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a652:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a7d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a66e:	e087      	b.n	800a780 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	ee07 3a90 	vmov	s15, r3
 800a676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a7dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800a67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a682:	4b51      	ldr	r3, [pc, #324]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a692:	ed97 6a02 	vldr	s12, [r7, #8]
 800a696:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a7d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6b2:	e065      	b.n	800a780 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6be:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a7e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6c6:	4b40      	ldr	r3, [pc, #256]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a7d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6f6:	e043      	b.n	800a780 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a702:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a7e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70a:	4b2f      	ldr	r3, [pc, #188]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a71a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a71e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a7d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a736:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a73a:	e021      	b.n	800a780 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a746:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a7e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74e:	4b1e      	ldr	r3, [pc, #120]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a762:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a7d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a77e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a780:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	0a5b      	lsrs	r3, r3, #9
 800a786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78a:	3301      	adds	r3, #1
 800a78c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	ee07 3a90 	vmov	s15, r3
 800a794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a798:	edd7 6a07 	vldr	s13, [r7, #28]
 800a79c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7a4:	ee17 3a90 	vmov	r3, s15
 800a7a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a7aa:	e005      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	61bb      	str	r3, [r7, #24]
      break;
 800a7b0:	e002      	b.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a7b2:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7b4:	61bb      	str	r3, [r7, #24]
      break;
 800a7b6:	bf00      	nop
  }

  return sysclockfreq;
 800a7b8:	69bb      	ldr	r3, [r7, #24]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3724      	adds	r7, #36	; 0x24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	58024400 	.word	0x58024400
 800a7cc:	03d09000 	.word	0x03d09000
 800a7d0:	003d0900 	.word	0x003d0900
 800a7d4:	02faf080 	.word	0x02faf080
 800a7d8:	46000000 	.word	0x46000000
 800a7dc:	4c742400 	.word	0x4c742400
 800a7e0:	4a742400 	.word	0x4a742400
 800a7e4:	4c3ebc20 	.word	0x4c3ebc20

0800a7e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7ee:	f7ff fe81 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b10      	ldr	r3, [pc, #64]	; (800a838 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	f003 030f 	and.w	r3, r3, #15
 800a7fe:	490f      	ldr	r1, [pc, #60]	; (800a83c <HAL_RCC_GetHCLKFreq+0x54>)
 800a800:	5ccb      	ldrb	r3, [r1, r3]
 800a802:	f003 031f 	and.w	r3, r3, #31
 800a806:	fa22 f303 	lsr.w	r3, r2, r3
 800a80a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a80c:	4b0a      	ldr	r3, [pc, #40]	; (800a838 <HAL_RCC_GetHCLKFreq+0x50>)
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	f003 030f 	and.w	r3, r3, #15
 800a814:	4a09      	ldr	r2, [pc, #36]	; (800a83c <HAL_RCC_GetHCLKFreq+0x54>)
 800a816:	5cd3      	ldrb	r3, [r2, r3]
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	fa22 f303 	lsr.w	r3, r2, r3
 800a822:	4a07      	ldr	r2, [pc, #28]	; (800a840 <HAL_RCC_GetHCLKFreq+0x58>)
 800a824:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a826:	4a07      	ldr	r2, [pc, #28]	; (800a844 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a82c:	4b04      	ldr	r3, [pc, #16]	; (800a840 <HAL_RCC_GetHCLKFreq+0x58>)
 800a82e:	681b      	ldr	r3, [r3, #0]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	58024400 	.word	0x58024400
 800a83c:	080185dc 	.word	0x080185dc
 800a840:	24000004 	.word	0x24000004
 800a844:	24000000 	.word	0x24000000

0800a848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a84c:	f7ff ffcc 	bl	800a7e8 <HAL_RCC_GetHCLKFreq>
 800a850:	4602      	mov	r2, r0
 800a852:	4b06      	ldr	r3, [pc, #24]	; (800a86c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	091b      	lsrs	r3, r3, #4
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	4904      	ldr	r1, [pc, #16]	; (800a870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a85e:	5ccb      	ldrb	r3, [r1, r3]
 800a860:	f003 031f 	and.w	r3, r3, #31
 800a864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a868:	4618      	mov	r0, r3
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	58024400 	.word	0x58024400
 800a870:	080185dc 	.word	0x080185dc

0800a874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a878:	f7ff ffb6 	bl	800a7e8 <HAL_RCC_GetHCLKFreq>
 800a87c:	4602      	mov	r2, r0
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	f003 0307 	and.w	r3, r3, #7
 800a888:	4904      	ldr	r1, [pc, #16]	; (800a89c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a88a:	5ccb      	ldrb	r3, [r1, r3]
 800a88c:	f003 031f 	and.w	r3, r3, #31
 800a890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a894:	4618      	mov	r0, r3
 800a896:	bd80      	pop	{r7, pc}
 800a898:	58024400 	.word	0x58024400
 800a89c:	080185dc 	.word	0x080185dc

0800a8a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8a4:	b0c6      	sub	sp, #280	; 0x118
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	ea54 0305 	orrs.w	r3, r4, r5
 800a8ca:	d049      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8d6:	d02f      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a8d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8dc:	d828      	bhi.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8e2:	d01a      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a8e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8e8:	d822      	bhi.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8f2:	d007      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8f4:	e01c      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f6:	4bab      	ldr	r3, [pc, #684]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	4aaa      	ldr	r2, [pc, #680]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a902:	e01a      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a908:	3308      	adds	r3, #8
 800a90a:	2102      	movs	r1, #2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f002 fa49 	bl	800cda4 <RCCEx_PLL2_Config>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a918:	e00f      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91e:	3328      	adds	r3, #40	; 0x28
 800a920:	2102      	movs	r1, #2
 800a922:	4618      	mov	r0, r3
 800a924:	f002 faf0 	bl	800cf08 <RCCEx_PLL3_Config>
 800a928:	4603      	mov	r3, r0
 800a92a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a92e:	e004      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a936:	e000      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a93a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a942:	4b98      	ldr	r3, [pc, #608]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a946:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a950:	4a94      	ldr	r2, [pc, #592]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a952:	430b      	orrs	r3, r1
 800a954:	6513      	str	r3, [r2, #80]	; 0x50
 800a956:	e003      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a95c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a96c:	f04f 0900 	mov.w	r9, #0
 800a970:	ea58 0309 	orrs.w	r3, r8, r9
 800a974:	d047      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d82a      	bhi.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a980:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a99d 	.word	0x0800a99d
 800a98c:	0800a9ab 	.word	0x0800a9ab
 800a990:	0800a9c1 	.word	0x0800a9c1
 800a994:	0800a9df 	.word	0x0800a9df
 800a998:	0800a9df 	.word	0x0800a9df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a99c:	4b81      	ldr	r3, [pc, #516]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a0:	4a80      	ldr	r2, [pc, #512]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9a8:	e01a      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 f9f6 	bl	800cda4 <RCCEx_PLL2_Config>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9be:	e00f      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	3328      	adds	r3, #40	; 0x28
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f002 fa9d 	bl	800cf08 <RCCEx_PLL3_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9d4:	e004      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9dc:	e000      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a9de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9e8:	4b6e      	ldr	r3, [pc, #440]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ec:	f023 0107 	bic.w	r1, r3, #7
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f6:	4a6b      	ldr	r2, [pc, #428]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9f8:	430b      	orrs	r3, r1
 800a9fa:	6513      	str	r3, [r2, #80]	; 0x50
 800a9fc:	e003      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aa12:	f04f 0b00 	mov.w	fp, #0
 800aa16:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa1a:	d05b      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa28:	d03b      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aa2a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa2e:	d834      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa34:	d037      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aa36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa3a:	d82e      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa40:	d033      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aa42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa46:	d828      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa4c:	d01a      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aa4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa52:	d822      	bhi.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa5c:	d007      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa5e:	e01c      	b.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa60:	4b50      	ldr	r3, [pc, #320]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	4a4f      	ldr	r2, [pc, #316]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa6c:	e01e      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa72:	3308      	adds	r3, #8
 800aa74:	2100      	movs	r1, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f002 f994 	bl	800cda4 <RCCEx_PLL2_Config>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa82:	e013      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	3328      	adds	r3, #40	; 0x28
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f002 fa3b 	bl	800cf08 <RCCEx_PLL3_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa98:	e008      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaa0:	e004      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aaa2:	bf00      	nop
 800aaa4:	e002      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aaaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10b      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aab4:	4b3b      	ldr	r3, [pc, #236]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aac4:	4a37      	ldr	r2, [pc, #220]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aac6:	430b      	orrs	r3, r1
 800aac8:	6593      	str	r3, [r2, #88]	; 0x58
 800aaca:	e003      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aacc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aad0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aae4:	2300      	movs	r3, #0
 800aae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aaea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	d05d      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aafc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab00:	d03b      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ab02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab06:	d834      	bhi.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab0c:	d037      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ab0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab12:	d82e      	bhi.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab18:	d033      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ab1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab1e:	d828      	bhi.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab24:	d01a      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ab26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab2a:	d822      	bhi.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ab30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab34:	d007      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ab36:	e01c      	b.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab38:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	4a19      	ldr	r2, [pc, #100]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab44:	e01e      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab4a:	3308      	adds	r3, #8
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f002 f928 	bl	800cda4 <RCCEx_PLL2_Config>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab5a:	e013      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab60:	3328      	adds	r3, #40	; 0x28
 800ab62:	2100      	movs	r1, #0
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 f9cf 	bl	800cf08 <RCCEx_PLL3_Config>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab70:	e008      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab78:	e004      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab7a:	bf00      	nop
 800ab7c:	e002      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab7e:	bf00      	nop
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10d      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab8c:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab9c:	4a01      	ldr	r2, [pc, #4]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab9e:	430b      	orrs	r3, r1
 800aba0:	6593      	str	r3, [r2, #88]	; 0x58
 800aba2:	e005      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800abb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800abbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abc6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800abca:	460b      	mov	r3, r1
 800abcc:	4313      	orrs	r3, r2
 800abce:	d03a      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800abd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd6:	2b30      	cmp	r3, #48	; 0x30
 800abd8:	d01f      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800abda:	2b30      	cmp	r3, #48	; 0x30
 800abdc:	d819      	bhi.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800abde:	2b20      	cmp	r3, #32
 800abe0:	d00c      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800abe2:	2b20      	cmp	r3, #32
 800abe4:	d815      	bhi.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d019      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800abea:	2b10      	cmp	r3, #16
 800abec:	d111      	bne.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abee:	4baa      	ldr	r3, [pc, #680]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf2:	4aa9      	ldr	r2, [pc, #676]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abfa:	e011      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac00:	3308      	adds	r3, #8
 800ac02:	2102      	movs	r1, #2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f002 f8cd 	bl	800cda4 <RCCEx_PLL2_Config>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac10:	e006      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac18:	e002      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac1a:	bf00      	nop
 800ac1c:	e000      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ac28:	4b9b      	ldr	r3, [pc, #620]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ac30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac36:	4a98      	ldr	r2, [pc, #608]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac38:	430b      	orrs	r3, r1
 800ac3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac3c:	e003      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac56:	2300      	movs	r3, #0
 800ac58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac60:	460b      	mov	r3, r1
 800ac62:	4313      	orrs	r3, r2
 800ac64:	d051      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac70:	d035      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ac72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac76:	d82e      	bhi.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac7c:	d031      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac82:	d828      	bhi.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac88:	d01a      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac8e:	d822      	bhi.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac98:	d007      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac9a:	e01c      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac9c:	4b7e      	ldr	r3, [pc, #504]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	4a7d      	ldr	r2, [pc, #500]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aca8:	e01c      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acae:	3308      	adds	r3, #8
 800acb0:	2100      	movs	r1, #0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f002 f876 	bl	800cda4 <RCCEx_PLL2_Config>
 800acb8:	4603      	mov	r3, r0
 800acba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800acbe:	e011      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc4:	3328      	adds	r3, #40	; 0x28
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 f91d 	bl	800cf08 <RCCEx_PLL3_Config>
 800acce:	4603      	mov	r3, r0
 800acd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800acd4:	e006      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acdc:	e002      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800acde:	bf00      	nop
 800ace0:	e000      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ace2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acec:	4b6a      	ldr	r3, [pc, #424]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800acf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfa:	4a67      	ldr	r2, [pc, #412]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acfc:	430b      	orrs	r3, r1
 800acfe:	6513      	str	r3, [r2, #80]	; 0x50
 800ad00:	e003      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ad16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4313      	orrs	r3, r2
 800ad28:	d053      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ad2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad34:	d033      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ad36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad3a:	d82c      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad40:	d02f      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ad42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad46:	d826      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad4c:	d02b      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ad4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad52:	d820      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad58:	d012      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad5e:	d81a      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d022      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad68:	d115      	bne.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6e:	3308      	adds	r3, #8
 800ad70:	2101      	movs	r1, #1
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 f816 	bl	800cda4 <RCCEx_PLL2_Config>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad7e:	e015      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad84:	3328      	adds	r3, #40	; 0x28
 800ad86:	2101      	movs	r1, #1
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f002 f8bd 	bl	800cf08 <RCCEx_PLL3_Config>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad94:	e00a      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad9c:	e006      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad9e:	bf00      	nop
 800ada0:	e004      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ada2:	bf00      	nop
 800ada4:	e002      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ada6:	bf00      	nop
 800ada8:	e000      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800adaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10a      	bne.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800adb4:	4b38      	ldr	r3, [pc, #224]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc2:	4a35      	ldr	r2, [pc, #212]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adc4:	430b      	orrs	r3, r1
 800adc6:	6513      	str	r3, [r2, #80]	; 0x50
 800adc8:	e003      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800adde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ade2:	2300      	movs	r3, #0
 800ade4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ade8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800adec:	460b      	mov	r3, r1
 800adee:	4313      	orrs	r3, r2
 800adf0:	d058      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adfe:	d033      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ae00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae04:	d82c      	bhi.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae0a:	d02f      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ae0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae10:	d826      	bhi.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae16:	d02b      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ae18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae1c:	d820      	bhi.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae22:	d012      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d81a      	bhi.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d022      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ae2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae32:	d115      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae38:	3308      	adds	r3, #8
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f001 ffb1 	bl	800cda4 <RCCEx_PLL2_Config>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae48:	e015      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4e:	3328      	adds	r3, #40	; 0x28
 800ae50:	2101      	movs	r1, #1
 800ae52:	4618      	mov	r0, r3
 800ae54:	f002 f858 	bl	800cf08 <RCCEx_PLL3_Config>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae5e:	e00a      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae66:	e006      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae68:	bf00      	nop
 800ae6a:	e004      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae6c:	bf00      	nop
 800ae6e:	e002      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae70:	bf00      	nop
 800ae72:	e000      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10e      	bne.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae7e:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae8e:	4a02      	ldr	r2, [pc, #8]	; (800ae98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae90:	430b      	orrs	r3, r1
 800ae92:	6593      	str	r3, [r2, #88]	; 0x58
 800ae94:	e006      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae96:	bf00      	nop
 800ae98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aea0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aeb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aeba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d037      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aece:	d00e      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aed4:	d816      	bhi.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d018      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aeda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aede:	d111      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee0:	4bc4      	ldr	r3, [pc, #784]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee4:	4ac3      	ldr	r2, [pc, #780]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeec:	e00f      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef2:	3308      	adds	r3, #8
 800aef4:	2101      	movs	r1, #1
 800aef6:	4618      	mov	r0, r3
 800aef8:	f001 ff54 	bl	800cda4 <RCCEx_PLL2_Config>
 800aefc:	4603      	mov	r3, r0
 800aefe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af02:	e004      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af0a:	e000      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800af0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10a      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af16:	4bb7      	ldr	r3, [pc, #732]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800af1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af24:	4ab3      	ldr	r2, [pc, #716]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af26:	430b      	orrs	r3, r1
 800af28:	6513      	str	r3, [r2, #80]	; 0x50
 800af2a:	e003      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800af34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800af40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af44:	2300      	movs	r3, #0
 800af46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800af4e:	460b      	mov	r3, r1
 800af50:	4313      	orrs	r3, r2
 800af52:	d039      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d81c      	bhi.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800afa1 	.word	0x0800afa1
 800af68:	0800af75 	.word	0x0800af75
 800af6c:	0800af83 	.word	0x0800af83
 800af70:	0800afa1 	.word	0x0800afa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af74:	4b9f      	ldr	r3, [pc, #636]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	4a9e      	ldr	r2, [pc, #632]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af80:	e00f      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	3308      	adds	r3, #8
 800af88:	2102      	movs	r1, #2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f001 ff0a 	bl	800cda4 <RCCEx_PLL2_Config>
 800af90:	4603      	mov	r3, r0
 800af92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af96:	e004      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af9e:	e000      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800afa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10a      	bne.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800afaa:	4b92      	ldr	r3, [pc, #584]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afae:	f023 0103 	bic.w	r1, r3, #3
 800afb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb8:	4a8e      	ldr	r2, [pc, #568]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afba:	430b      	orrs	r3, r1
 800afbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800afbe:	e003      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800afd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afd8:	2300      	movs	r3, #0
 800afda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4313      	orrs	r3, r2
 800afe6:	f000 8099 	beq.w	800b11c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afea:	4b83      	ldr	r3, [pc, #524]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a82      	ldr	r2, [pc, #520]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aff6:	f7f8 fd67 	bl	8003ac8 <HAL_GetTick>
 800affa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800affe:	e00b      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b000:	f7f8 fd62 	bl	8003ac8 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b64      	cmp	r3, #100	; 0x64
 800b00e:	d903      	bls.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b016:	e005      	b.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b018:	4b77      	ldr	r3, [pc, #476]	; (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0ed      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d173      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b02c:	4b71      	ldr	r3, [pc, #452]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b02e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b038:	4053      	eors	r3, r2
 800b03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d015      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b042:	4b6c      	ldr	r3, [pc, #432]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b04a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b04e:	4b69      	ldr	r3, [pc, #420]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	4a68      	ldr	r2, [pc, #416]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b058:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b05a:	4b66      	ldr	r3, [pc, #408]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05e:	4a65      	ldr	r2, [pc, #404]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b064:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b066:	4a63      	ldr	r2, [pc, #396]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b06c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b07a:	d118      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b07c:	f7f8 fd24 	bl	8003ac8 <HAL_GetTick>
 800b080:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b084:	e00d      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b086:	f7f8 fd1f 	bl	8003ac8 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b090:	1ad2      	subs	r2, r2, r3
 800b092:	f241 3388 	movw	r3, #5000	; 0x1388
 800b096:	429a      	cmp	r2, r3
 800b098:	d903      	bls.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b0a0:	e005      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0a2:	4b54      	ldr	r3, [pc, #336]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0eb      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b0ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d129      	bne.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0c6:	d10e      	bne.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b0c8:	4b4a      	ldr	r3, [pc, #296]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0d8:	091a      	lsrs	r2, r3, #4
 800b0da:	4b48      	ldr	r3, [pc, #288]	; (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	4a45      	ldr	r2, [pc, #276]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	6113      	str	r3, [r2, #16]
 800b0e4:	e005      	b.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b0e6:	4b43      	ldr	r3, [pc, #268]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	4a42      	ldr	r2, [pc, #264]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0f0:	6113      	str	r3, [r2, #16]
 800b0f2:	4b40      	ldr	r3, [pc, #256]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b102:	4a3c      	ldr	r2, [pc, #240]	; (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b104:	430b      	orrs	r3, r1
 800b106:	6713      	str	r3, [r2, #112]	; 0x70
 800b108:	e008      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b10a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b10e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b112:	e003      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b114:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b118:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	f002 0301 	and.w	r3, r2, #1
 800b128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b12c:	2300      	movs	r3, #0
 800b12e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b132:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b136:	460b      	mov	r3, r1
 800b138:	4313      	orrs	r3, r2
 800b13a:	f000 808f 	beq.w	800b25c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b144:	2b28      	cmp	r3, #40	; 0x28
 800b146:	d871      	bhi.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b148:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14e:	bf00      	nop
 800b150:	0800b235 	.word	0x0800b235
 800b154:	0800b22d 	.word	0x0800b22d
 800b158:	0800b22d 	.word	0x0800b22d
 800b15c:	0800b22d 	.word	0x0800b22d
 800b160:	0800b22d 	.word	0x0800b22d
 800b164:	0800b22d 	.word	0x0800b22d
 800b168:	0800b22d 	.word	0x0800b22d
 800b16c:	0800b22d 	.word	0x0800b22d
 800b170:	0800b201 	.word	0x0800b201
 800b174:	0800b22d 	.word	0x0800b22d
 800b178:	0800b22d 	.word	0x0800b22d
 800b17c:	0800b22d 	.word	0x0800b22d
 800b180:	0800b22d 	.word	0x0800b22d
 800b184:	0800b22d 	.word	0x0800b22d
 800b188:	0800b22d 	.word	0x0800b22d
 800b18c:	0800b22d 	.word	0x0800b22d
 800b190:	0800b217 	.word	0x0800b217
 800b194:	0800b22d 	.word	0x0800b22d
 800b198:	0800b22d 	.word	0x0800b22d
 800b19c:	0800b22d 	.word	0x0800b22d
 800b1a0:	0800b22d 	.word	0x0800b22d
 800b1a4:	0800b22d 	.word	0x0800b22d
 800b1a8:	0800b22d 	.word	0x0800b22d
 800b1ac:	0800b22d 	.word	0x0800b22d
 800b1b0:	0800b235 	.word	0x0800b235
 800b1b4:	0800b22d 	.word	0x0800b22d
 800b1b8:	0800b22d 	.word	0x0800b22d
 800b1bc:	0800b22d 	.word	0x0800b22d
 800b1c0:	0800b22d 	.word	0x0800b22d
 800b1c4:	0800b22d 	.word	0x0800b22d
 800b1c8:	0800b22d 	.word	0x0800b22d
 800b1cc:	0800b22d 	.word	0x0800b22d
 800b1d0:	0800b235 	.word	0x0800b235
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b22d 	.word	0x0800b22d
 800b1e0:	0800b22d 	.word	0x0800b22d
 800b1e4:	0800b22d 	.word	0x0800b22d
 800b1e8:	0800b22d 	.word	0x0800b22d
 800b1ec:	0800b22d 	.word	0x0800b22d
 800b1f0:	0800b235 	.word	0x0800b235
 800b1f4:	58024400 	.word	0x58024400
 800b1f8:	58024800 	.word	0x58024800
 800b1fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b204:	3308      	adds	r3, #8
 800b206:	2101      	movs	r1, #1
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 fdcb 	bl	800cda4 <RCCEx_PLL2_Config>
 800b20e:	4603      	mov	r3, r0
 800b210:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b214:	e00f      	b.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b21a:	3328      	adds	r3, #40	; 0x28
 800b21c:	2101      	movs	r1, #1
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 fe72 	bl	800cf08 <RCCEx_PLL3_Config>
 800b224:	4603      	mov	r3, r0
 800b226:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b22a:	e004      	b.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b232:	e000      	b.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b234:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b236:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b23e:	4bbf      	ldr	r3, [pc, #764]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b242:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b24c:	4abb      	ldr	r2, [pc, #748]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b24e:	430b      	orrs	r3, r1
 800b250:	6553      	str	r3, [r2, #84]	; 0x54
 800b252:	e003      	b.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b258:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f002 0302 	and.w	r3, r2, #2
 800b268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b26c:	2300      	movs	r3, #0
 800b26e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b272:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b276:	460b      	mov	r3, r1
 800b278:	4313      	orrs	r3, r2
 800b27a:	d041      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b282:	2b05      	cmp	r3, #5
 800b284:	d824      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2d9 	.word	0x0800b2d9
 800b290:	0800b2a5 	.word	0x0800b2a5
 800b294:	0800b2bb 	.word	0x0800b2bb
 800b298:	0800b2d9 	.word	0x0800b2d9
 800b29c:	0800b2d9 	.word	0x0800b2d9
 800b2a0:	0800b2d9 	.word	0x0800b2d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f001 fd79 	bl	800cda4 <RCCEx_PLL2_Config>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b2b8:	e00f      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	3328      	adds	r3, #40	; 0x28
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f001 fe20 	bl	800cf08 <RCCEx_PLL3_Config>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b2ce:	e004      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2d6:	e000      	b.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b2d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10a      	bne.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2e2:	4b96      	ldr	r3, [pc, #600]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e6:	f023 0107 	bic.w	r1, r3, #7
 800b2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2f0:	4a92      	ldr	r2, [pc, #584]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2f2:	430b      	orrs	r3, r1
 800b2f4:	6553      	str	r3, [r2, #84]	; 0x54
 800b2f6:	e003      	b.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	f002 0304 	and.w	r3, r2, #4
 800b30c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b310:	2300      	movs	r3, #0
 800b312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b316:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b31a:	460b      	mov	r3, r1
 800b31c:	4313      	orrs	r3, r2
 800b31e:	d044      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b328:	2b05      	cmp	r3, #5
 800b32a:	d825      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b381 	.word	0x0800b381
 800b338:	0800b34d 	.word	0x0800b34d
 800b33c:	0800b363 	.word	0x0800b363
 800b340:	0800b381 	.word	0x0800b381
 800b344:	0800b381 	.word	0x0800b381
 800b348:	0800b381 	.word	0x0800b381
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b350:	3308      	adds	r3, #8
 800b352:	2101      	movs	r1, #1
 800b354:	4618      	mov	r0, r3
 800b356:	f001 fd25 	bl	800cda4 <RCCEx_PLL2_Config>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b360:	e00f      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b366:	3328      	adds	r3, #40	; 0x28
 800b368:	2101      	movs	r1, #1
 800b36a:	4618      	mov	r0, r3
 800b36c:	f001 fdcc 	bl	800cf08 <RCCEx_PLL3_Config>
 800b370:	4603      	mov	r3, r0
 800b372:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b376:	e004      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b37e:	e000      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b380:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b382:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10b      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b38a:	4b6c      	ldr	r3, [pc, #432]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38e:	f023 0107 	bic.w	r1, r3, #7
 800b392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b39a:	4a68      	ldr	r2, [pc, #416]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b39c:	430b      	orrs	r3, r1
 800b39e:	6593      	str	r3, [r2, #88]	; 0x58
 800b3a0:	e003      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f002 0320 	and.w	r3, r2, #32
 800b3b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b3c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	d055      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3d6:	d033      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b3d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3dc:	d82c      	bhi.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3e2:	d02f      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3e8:	d826      	bhi.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3ee:	d02b      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b3f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3f4:	d820      	bhi.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3fa:	d012      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b3fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b400:	d81a      	bhi.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d022      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b40a:	d115      	bne.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b410:	3308      	adds	r3, #8
 800b412:	2100      	movs	r1, #0
 800b414:	4618      	mov	r0, r3
 800b416:	f001 fcc5 	bl	800cda4 <RCCEx_PLL2_Config>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b420:	e015      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	3328      	adds	r3, #40	; 0x28
 800b428:	2102      	movs	r1, #2
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 fd6c 	bl	800cf08 <RCCEx_PLL3_Config>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b436:	e00a      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b43e:	e006      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b440:	bf00      	nop
 800b442:	e004      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b444:	bf00      	nop
 800b446:	e002      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b448:	bf00      	nop
 800b44a:	e000      	b.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b44c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b44e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10b      	bne.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b456:	4b39      	ldr	r3, [pc, #228]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b466:	4a35      	ldr	r2, [pc, #212]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b468:	430b      	orrs	r3, r1
 800b46a:	6553      	str	r3, [r2, #84]	; 0x54
 800b46c:	e003      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b46e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b472:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b486:	2300      	movs	r3, #0
 800b488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b48c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b490:	460b      	mov	r3, r1
 800b492:	4313      	orrs	r3, r2
 800b494:	d058      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b49e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b4a2:	d033      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b4a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b4a8:	d82c      	bhi.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ae:	d02f      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b4:	d826      	bhi.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4ba:	d02b      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b4bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4c0:	d820      	bhi.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4c6:	d012      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b4c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4cc:	d81a      	bhi.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d022      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4d6:	d115      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	3308      	adds	r3, #8
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fc5f 	bl	800cda4 <RCCEx_PLL2_Config>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4ec:	e015      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f2:	3328      	adds	r3, #40	; 0x28
 800b4f4:	2102      	movs	r1, #2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f001 fd06 	bl	800cf08 <RCCEx_PLL3_Config>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b502:	e00a      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b50a:	e006      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b50c:	bf00      	nop
 800b50e:	e004      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b510:	bf00      	nop
 800b512:	e002      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b514:	bf00      	nop
 800b516:	e000      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b51a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10e      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b522:	4b06      	ldr	r3, [pc, #24]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b526:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b532:	4a02      	ldr	r2, [pc, #8]	; (800b53c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b534:	430b      	orrs	r3, r1
 800b536:	6593      	str	r3, [r2, #88]	; 0x58
 800b538:	e006      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b53a:	bf00      	nop
 800b53c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b544:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b554:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b558:	2300      	movs	r3, #0
 800b55a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b55e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	d055      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b570:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b574:	d033      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b576:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b57a:	d82c      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b57c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b580:	d02f      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b586:	d826      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b588:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b58c:	d02b      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b58e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b592:	d820      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b598:	d012      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b59a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b59e:	d81a      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d022      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b5a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5a8:	d115      	bne.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 fbf6 	bl	800cda4 <RCCEx_PLL2_Config>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b5be:	e015      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c4:	3328      	adds	r3, #40	; 0x28
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f001 fc9d 	bl	800cf08 <RCCEx_PLL3_Config>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b5d4:	e00a      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5dc:	e006      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5de:	bf00      	nop
 800b5e0:	e004      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5e2:	bf00      	nop
 800b5e4:	e002      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5e6:	bf00      	nop
 800b5e8:	e000      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b5ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10b      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5f4:	4ba0      	ldr	r3, [pc, #640]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b604:	4a9c      	ldr	r2, [pc, #624]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b606:	430b      	orrs	r3, r1
 800b608:	6593      	str	r3, [r2, #88]	; 0x58
 800b60a:	e003      	b.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b610:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f002 0308 	and.w	r3, r2, #8
 800b620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b624:	2300      	movs	r3, #0
 800b626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b62a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b62e:	460b      	mov	r3, r1
 800b630:	4313      	orrs	r3, r2
 800b632:	d01e      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b640:	d10c      	bne.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	3328      	adds	r3, #40	; 0x28
 800b648:	2102      	movs	r1, #2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 fc5c 	bl	800cf08 <RCCEx_PLL3_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b65c:	4b86      	ldr	r3, [pc, #536]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b660:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b66c:	4a82      	ldr	r2, [pc, #520]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b66e:	430b      	orrs	r3, r1
 800b670:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f002 0310 	and.w	r3, r2, #16
 800b67e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b682:	2300      	movs	r3, #0
 800b684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b688:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b68c:	460b      	mov	r3, r1
 800b68e:	4313      	orrs	r3, r2
 800b690:	d01e      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b69e:	d10c      	bne.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	3328      	adds	r3, #40	; 0x28
 800b6a6:	2102      	movs	r1, #2
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 fc2d 	bl	800cf08 <RCCEx_PLL3_Config>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6ba:	4b6f      	ldr	r3, [pc, #444]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6ca:	4a6b      	ldr	r2, [pc, #428]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b6dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6de:	2300      	movs	r3, #0
 800b6e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b6e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	d03e      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6f8:	d022      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b6fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6fe:	d81b      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b700:	2b00      	cmp	r3, #0
 800b702:	d003      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b708:	d00b      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b70a:	e015      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b710:	3308      	adds	r3, #8
 800b712:	2100      	movs	r1, #0
 800b714:	4618      	mov	r0, r3
 800b716:	f001 fb45 	bl	800cda4 <RCCEx_PLL2_Config>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b720:	e00f      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b726:	3328      	adds	r3, #40	; 0x28
 800b728:	2102      	movs	r1, #2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 fbec 	bl	800cf08 <RCCEx_PLL3_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b736:	e004      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b73e:	e000      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b740:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b742:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b74a:	4b4b      	ldr	r3, [pc, #300]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b74e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b75a:	4a47      	ldr	r2, [pc, #284]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b75c:	430b      	orrs	r3, r1
 800b75e:	6593      	str	r3, [r2, #88]	; 0x58
 800b760:	e003      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b766:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b776:	673b      	str	r3, [r7, #112]	; 0x70
 800b778:	2300      	movs	r3, #0
 800b77a:	677b      	str	r3, [r7, #116]	; 0x74
 800b77c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b780:	460b      	mov	r3, r1
 800b782:	4313      	orrs	r3, r2
 800b784:	d03b      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b78e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b792:	d01f      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b794:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b798:	d818      	bhi.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b79a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b79e:	d003      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b7a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7a4:	d007      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b7a6:	e011      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a8:	4b33      	ldr	r3, [pc, #204]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	4a32      	ldr	r2, [pc, #200]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b7b4:	e00f      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ba:	3328      	adds	r3, #40	; 0x28
 800b7bc:	2101      	movs	r1, #1
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 fba2 	bl	800cf08 <RCCEx_PLL3_Config>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b7ca:	e004      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7d2:	e000      	b.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b7d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7de:	4b26      	ldr	r3, [pc, #152]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ee:	4a22      	ldr	r2, [pc, #136]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7f0:	430b      	orrs	r3, r1
 800b7f2:	6553      	str	r3, [r2, #84]	; 0x54
 800b7f4:	e003      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b80a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b80c:	2300      	movs	r3, #0
 800b80e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b810:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b814:	460b      	mov	r3, r1
 800b816:	4313      	orrs	r3, r2
 800b818:	d034      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b828:	d007      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b82a:	e011      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b82c:	4b12      	ldr	r3, [pc, #72]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	4a11      	ldr	r2, [pc, #68]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b838:	e00e      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83e:	3308      	adds	r3, #8
 800b840:	2102      	movs	r1, #2
 800b842:	4618      	mov	r0, r3
 800b844:	f001 faae 	bl	800cda4 <RCCEx_PLL2_Config>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b84e:	e003      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b856:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10d      	bne.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b860:	4b05      	ldr	r3, [pc, #20]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b86e:	4a02      	ldr	r2, [pc, #8]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b870:	430b      	orrs	r3, r1
 800b872:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b874:	e006      	b.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b876:	bf00      	nop
 800b878:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b880:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b890:	663b      	str	r3, [r7, #96]	; 0x60
 800b892:	2300      	movs	r3, #0
 800b894:	667b      	str	r3, [r7, #100]	; 0x64
 800b896:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b89a:	460b      	mov	r3, r1
 800b89c:	4313      	orrs	r3, r2
 800b89e:	d00c      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a4:	3328      	adds	r3, #40	; 0x28
 800b8a6:	2102      	movs	r1, #2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f001 fb2d 	bl	800cf08 <RCCEx_PLL3_Config>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b8c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	d036      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8e0:	d018      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b8e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8e6:	d811      	bhi.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ec:	d014      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b8ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f2:	d80b      	bhi.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d011      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8fc:	d106      	bne.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8fe:	4bb7      	ldr	r3, [pc, #732]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b902:	4ab6      	ldr	r2, [pc, #728]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b90a:	e008      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b912:	e004      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b914:	bf00      	nop
 800b916:	e002      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b91c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10a      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b926:	4bad      	ldr	r3, [pc, #692]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b934:	4aa9      	ldr	r2, [pc, #676]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b936:	430b      	orrs	r3, r1
 800b938:	6553      	str	r3, [r2, #84]	; 0x54
 800b93a:	e003      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b950:	653b      	str	r3, [r7, #80]	; 0x50
 800b952:	2300      	movs	r3, #0
 800b954:	657b      	str	r3, [r7, #84]	; 0x54
 800b956:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b95a:	460b      	mov	r3, r1
 800b95c:	4313      	orrs	r3, r2
 800b95e:	d009      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b960:	4b9e      	ldr	r3, [pc, #632]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b964:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96e:	4a9b      	ldr	r2, [pc, #620]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b970:	430b      	orrs	r3, r1
 800b972:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b980:	64bb      	str	r3, [r7, #72]	; 0x48
 800b982:	2300      	movs	r3, #0
 800b984:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b986:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b98a:	460b      	mov	r3, r1
 800b98c:	4313      	orrs	r3, r2
 800b98e:	d009      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b990:	4b92      	ldr	r3, [pc, #584]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b99e:	4a8f      	ldr	r2, [pc, #572]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b9b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	d00e      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b9c0:	4b86      	ldr	r3, [pc, #536]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	4a85      	ldr	r2, [pc, #532]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9ca:	6113      	str	r3, [r2, #16]
 800b9cc:	4b83      	ldr	r3, [pc, #524]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ce:	6919      	ldr	r1, [r3, #16]
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b9d8:	4a80      	ldr	r2, [pc, #512]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b9ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	d009      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9fa:	4b78      	ldr	r3, [pc, #480]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba08:	4a74      	ldr	r2, [pc, #464]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba0a:	430b      	orrs	r3, r1
 800ba0c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ba1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ba24:	460b      	mov	r3, r1
 800ba26:	4313      	orrs	r3, r2
 800ba28:	d00a      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba2a:	4b6c      	ldr	r3, [pc, #432]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ba32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba3a:	4a68      	ldr	r2, [pc, #416]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba56:	460b      	mov	r3, r1
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	d011      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba60:	3308      	adds	r3, #8
 800ba62:	2100      	movs	r1, #0
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 f99d 	bl	800cda4 <RCCEx_PLL2_Config>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d003      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	2100      	movs	r1, #0
 800ba8a:	6239      	str	r1, [r7, #32]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	627b      	str	r3, [r7, #36]	; 0x24
 800ba92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba96:	460b      	mov	r3, r1
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	d011      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	3308      	adds	r3, #8
 800baa2:	2101      	movs	r1, #1
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 f97d 	bl	800cda4 <RCCEx_PLL2_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800babc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	2100      	movs	r1, #0
 800baca:	61b9      	str	r1, [r7, #24]
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	61fb      	str	r3, [r7, #28]
 800bad2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bad6:	460b      	mov	r3, r1
 800bad8:	4313      	orrs	r3, r2
 800bada:	d011      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae0:	3308      	adds	r3, #8
 800bae2:	2102      	movs	r1, #2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 f95d 	bl	800cda4 <RCCEx_PLL2_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800baf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bafc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	6139      	str	r1, [r7, #16]
 800bb0c:	f003 0308 	and.w	r3, r3, #8
 800bb10:	617b      	str	r3, [r7, #20]
 800bb12:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb16:	460b      	mov	r3, r1
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	d011      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb20:	3328      	adds	r3, #40	; 0x28
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 f9ef 	bl	800cf08 <RCCEx_PLL3_Config>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bb30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	2100      	movs	r1, #0
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	f003 0310 	and.w	r3, r3, #16
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	d011      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb60:	3328      	adds	r3, #40	; 0x28
 800bb62:	2101      	movs	r1, #1
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f9cf 	bl	800cf08 <RCCEx_PLL3_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6039      	str	r1, [r7, #0]
 800bb8c:	f003 0320 	and.w	r3, r3, #32
 800bb90:	607b      	str	r3, [r7, #4]
 800bb92:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb96:	460b      	mov	r3, r1
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	d011      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba0:	3328      	adds	r3, #40	; 0x28
 800bba2:	2102      	movs	r1, #2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 f9af 	bl	800cf08 <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bbb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bbc0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e000      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbda:	bf00      	nop
 800bbdc:	58024400 	.word	0x58024400

0800bbe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b090      	sub	sp, #64	; 0x40
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bbea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bbf2:	430b      	orrs	r3, r1
 800bbf4:	f040 8094 	bne.w	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bbf8:	4b9b      	ldr	r3, [pc, #620]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfc:	f003 0307 	and.w	r3, r3, #7
 800bc00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	f200 8087 	bhi.w	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc25 	.word	0x0800bc25
 800bc14:	0800bc4d 	.word	0x0800bc4d
 800bc18:	0800bc75 	.word	0x0800bc75
 800bc1c:	0800bd11 	.word	0x0800bd11
 800bc20:	0800bc9d 	.word	0x0800bc9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc24:	4b90      	ldr	r3, [pc, #576]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc30:	d108      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 ff62 	bl	800cb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	f000 bc93 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	f000 bc8f 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc4c:	4b86      	ldr	r3, [pc, #536]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc58:	d108      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0318 	add.w	r3, r7, #24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fca6 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc68:	f000 bc7f 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc70:	f000 bc7b 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc74:	4b7c      	ldr	r3, [pc, #496]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc80:	d108      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc82:	f107 030c 	add.w	r3, r7, #12
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 fde6 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc90:	f000 bc6b 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc98:	f000 bc67 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc9c:	4b72      	ldr	r3, [pc, #456]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bca4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bca6:	4b70      	ldr	r3, [pc, #448]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d10c      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d109      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcb8:	4b6b      	ldr	r3, [pc, #428]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	08db      	lsrs	r3, r3, #3
 800bcbe:	f003 0303 	and.w	r3, r3, #3
 800bcc2:	4a6a      	ldr	r2, [pc, #424]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bcc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcca:	e01f      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bccc:	4b66      	ldr	r3, [pc, #408]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd8:	d106      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce0:	d102      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bce2:	4b63      	ldr	r3, [pc, #396]	; (800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce6:	e011      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bce8:	4b5f      	ldr	r3, [pc, #380]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcf4:	d106      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcfc:	d102      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcfe:	4b5d      	ldr	r3, [pc, #372]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd02:	e003      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd08:	f000 bc2f 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd0c:	f000 bc2d 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd10:	4b59      	ldr	r3, [pc, #356]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd14:	f000 bc29 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1c:	f000 bc25 	b.w	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bd20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd24:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	f040 80a7 	bne.w	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bd2e:	4b4e      	ldr	r3, [pc, #312]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd32:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bd36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd3e:	d054      	beq.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd46:	f200 808b 	bhi.w	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd50:	f000 8083 	beq.w	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd5a:	f200 8081 	bhi.w	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd64:	d02f      	beq.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd6c:	d878      	bhi.n	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d004      	beq.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd7a:	d012      	beq.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bd7c:	e070      	b.n	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd7e:	4b3a      	ldr	r3, [pc, #232]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd8a:	d107      	bne.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 feb5 	bl	800cb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd9a:	e3e6      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda0:	e3e3      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bda2:	4b31      	ldr	r3, [pc, #196]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdae:	d107      	bne.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb0:	f107 0318 	add.w	r3, r7, #24
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fbfb 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdbe:	e3d4      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc4:	e3d1      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdc6:	4b28      	ldr	r3, [pc, #160]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdd2:	d107      	bne.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdd4:	f107 030c 	add.w	r3, r7, #12
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 fd3d 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bde2:	e3c2      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde8:	e3bf      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdea:	4b1f      	ldr	r3, [pc, #124]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdf2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdf4:	4b1c      	ldr	r3, [pc, #112]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b04      	cmp	r3, #4
 800bdfe:	d10c      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800be00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be02:	2b00      	cmp	r3, #0
 800be04:	d109      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be06:	4b18      	ldr	r3, [pc, #96]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	08db      	lsrs	r3, r3, #3
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	4a16      	ldr	r2, [pc, #88]	; (800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800be12:	fa22 f303 	lsr.w	r3, r2, r3
 800be16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be18:	e01e      	b.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be1a:	4b13      	ldr	r3, [pc, #76]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be26:	d106      	bne.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800be28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be2e:	d102      	bne.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800be32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be34:	e010      	b.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be36:	4b0c      	ldr	r3, [pc, #48]	; (800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be42:	d106      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800be44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be4a:	d102      	bne.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be4c:	4b09      	ldr	r3, [pc, #36]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be50:	e002      	b.n	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be56:	e388      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be58:	e387      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be5a:	4b07      	ldr	r3, [pc, #28]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be5e:	e384      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be64:	e381      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be66:	bf00      	nop
 800be68:	58024400 	.word	0x58024400
 800be6c:	03d09000 	.word	0x03d09000
 800be70:	003d0900 	.word	0x003d0900
 800be74:	02faf080 	.word	0x02faf080
 800be78:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be80:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be84:	430b      	orrs	r3, r1
 800be86:	f040 809c 	bne.w	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be8a:	4b9e      	ldr	r3, [pc, #632]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be8e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be9a:	d054      	beq.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bea2:	f200 808b 	bhi.w	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800beac:	f000 8083 	beq.w	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800beb6:	f200 8081 	bhi.w	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec0:	d02f      	beq.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec8:	d878      	bhi.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bed6:	d012      	beq.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bed8:	e070      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beda:	4b8a      	ldr	r3, [pc, #552]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bee6:	d107      	bne.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beec:	4618      	mov	r0, r3
 800beee:	f000 fe07 	bl	800cb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef6:	e338      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800befc:	e335      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800befe:	4b81      	ldr	r3, [pc, #516]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf0a:	d107      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf0c:	f107 0318 	add.w	r3, r7, #24
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 fb4d 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf1a:	e326      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf20:	e323      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf22:	4b78      	ldr	r3, [pc, #480]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf2e:	d107      	bne.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf30:	f107 030c 	add.w	r3, r7, #12
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fc8f 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf3e:	e314      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf44:	e311      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf46:	4b6f      	ldr	r3, [pc, #444]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf50:	4b6c      	ldr	r3, [pc, #432]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 0304 	and.w	r3, r3, #4
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d10c      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d109      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf62:	4b68      	ldr	r3, [pc, #416]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	08db      	lsrs	r3, r3, #3
 800bf68:	f003 0303 	and.w	r3, r3, #3
 800bf6c:	4a66      	ldr	r2, [pc, #408]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf74:	e01e      	b.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf76:	4b63      	ldr	r3, [pc, #396]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf82:	d106      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf8a:	d102      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf8c:	4b5f      	ldr	r3, [pc, #380]	; (800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf90:	e010      	b.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf92:	4b5c      	ldr	r3, [pc, #368]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf9e:	d106      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfa6:	d102      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfa8:	4b59      	ldr	r3, [pc, #356]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfac:	e002      	b.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfb2:	e2da      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfb4:	e2d9      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfb6:	4b57      	ldr	r3, [pc, #348]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfba:	e2d6      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc0:	e2d3      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bfc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfc6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	f040 80a7 	bne.w	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bfd0:	4b4c      	ldr	r3, [pc, #304]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bfd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe0:	d055      	beq.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe8:	f200 8096 	bhi.w	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bff2:	f000 8084 	beq.w	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bffc:	f200 808c 	bhi.w	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c006:	d030      	beq.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c00e:	f200 8083 	bhi.w	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c01e:	d012      	beq.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c020:	e07a      	b.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c022:	4b38      	ldr	r3, [pc, #224]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c02e:	d107      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fd63 	bl	800cb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03e:	e294      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e291      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c046:	4b2f      	ldr	r3, [pc, #188]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c04e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c052:	d107      	bne.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c054:	f107 0318 	add.w	r3, r7, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 faa9 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c062:	e282      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c068:	e27f      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c06a:	4b26      	ldr	r3, [pc, #152]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c076:	d107      	bne.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c078:	f107 030c 	add.w	r3, r7, #12
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 fbeb 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c086:	e270      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c088:	2300      	movs	r3, #0
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c08c:	e26d      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c08e:	4b1d      	ldr	r3, [pc, #116]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c096:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c098:	4b1a      	ldr	r3, [pc, #104]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 0304 	and.w	r3, r3, #4
 800c0a0:	2b04      	cmp	r3, #4
 800c0a2:	d10c      	bne.n	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d109      	bne.n	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0aa:	4b16      	ldr	r3, [pc, #88]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	08db      	lsrs	r3, r3, #3
 800c0b0:	f003 0303 	and.w	r3, r3, #3
 800c0b4:	4a14      	ldr	r2, [pc, #80]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0bc:	e01e      	b.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0be:	4b11      	ldr	r3, [pc, #68]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ca:	d106      	bne.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d2:	d102      	bne.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0d4:	4b0d      	ldr	r3, [pc, #52]	; (800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d8:	e010      	b.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0da:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e6:	d106      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ee:	d102      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f4:	e002      	b.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0fa:	e236      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0fc:	e235      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0fe:	4b05      	ldr	r3, [pc, #20]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c102:	e232      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c104:	58024400 	.word	0x58024400
 800c108:	03d09000 	.word	0x03d09000
 800c10c:	003d0900 	.word	0x003d0900
 800c110:	02faf080 	.word	0x02faf080
 800c114:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11c:	e225      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c122:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c126:	430b      	orrs	r3, r1
 800c128:	f040 8085 	bne.w	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c12c:	4b9c      	ldr	r3, [pc, #624]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c130:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c134:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c13c:	d06b      	beq.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c144:	d874      	bhi.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c14c:	d056      	beq.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c154:	d86c      	bhi.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c15c:	d03b      	beq.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c160:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c164:	d864      	bhi.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c16c:	d021      	beq.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c174:	d85c      	bhi.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d004      	beq.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c182:	d004      	beq.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c184:	e054      	b.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c186:	f7fe fb5f 	bl	800a848 <HAL_RCC_GetPCLK1Freq>
 800c18a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c18c:	e1ed      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c18e:	4b84      	ldr	r3, [pc, #528]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c19a:	d107      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c19c:	f107 0318 	add.w	r3, r7, #24
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f000 fa05 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1aa:	e1de      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b0:	e1db      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1b2:	4b7b      	ldr	r3, [pc, #492]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1be:	d107      	bne.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c0:	f107 030c 	add.w	r3, r7, #12
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fb47 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ce:	e1cc      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d4:	e1c9      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1d6:	4b72      	ldr	r3, [pc, #456]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f003 0304 	and.w	r3, r3, #4
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d109      	bne.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1e2:	4b6f      	ldr	r3, [pc, #444]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	08db      	lsrs	r3, r3, #3
 800c1e8:	f003 0303 	and.w	r3, r3, #3
 800c1ec:	4a6d      	ldr	r2, [pc, #436]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f4:	e1b9      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fa:	e1b6      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1fc:	4b68      	ldr	r3, [pc, #416]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c208:	d102      	bne.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c20a:	4b67      	ldr	r3, [pc, #412]	; (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c20e:	e1ac      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c214:	e1a9      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c216:	4b62      	ldr	r3, [pc, #392]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c21e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c222:	d102      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c224:	4b61      	ldr	r3, [pc, #388]	; (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c228:	e19f      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c22e:	e19c      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c234:	e199      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c23e:	430b      	orrs	r3, r1
 800c240:	d173      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c242:	4b57      	ldr	r3, [pc, #348]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c24a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c252:	d02f      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c25a:	d863      	bhi.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c268:	d012      	beq.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c26a:	e05b      	b.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c26c:	4b4c      	ldr	r3, [pc, #304]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c278:	d107      	bne.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c27a:	f107 0318 	add.w	r3, r7, #24
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f996 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c288:	e16f      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28e:	e16c      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c290:	4b43      	ldr	r3, [pc, #268]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29c:	d107      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c29e:	f107 030c 	add.w	r3, r7, #12
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fad8 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ac:	e15d      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b2:	e15a      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2b4:	4b3a      	ldr	r3, [pc, #232]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2be:	4b38      	ldr	r3, [pc, #224]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0304 	and.w	r3, r3, #4
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d10c      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d109      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2d0:	4b33      	ldr	r3, [pc, #204]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	08db      	lsrs	r3, r3, #3
 800c2d6:	f003 0303 	and.w	r3, r3, #3
 800c2da:	4a32      	ldr	r2, [pc, #200]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e2:	e01e      	b.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2e4:	4b2e      	ldr	r3, [pc, #184]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2f0:	d106      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2f8:	d102      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2fa:	4b2b      	ldr	r3, [pc, #172]	; (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2fe:	e010      	b.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c300:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30c:	d106      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c314:	d102      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c316:	4b25      	ldr	r3, [pc, #148]	; (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c31a:	e002      	b.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c320:	e123      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c322:	e122      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c328:	e11f      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c32a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c32e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c332:	430b      	orrs	r3, r1
 800c334:	d13c      	bne.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c336:	4b1a      	ldr	r3, [pc, #104]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c33e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c342:	2b00      	cmp	r3, #0
 800c344:	d004      	beq.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c34c:	d012      	beq.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c34e:	e023      	b.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c350:	4b13      	ldr	r3, [pc, #76]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c35c:	d107      	bne.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c35e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fbcc 	bl	800cb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c36c:	e0fd      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c372:	e0fa      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c374:	4b0a      	ldr	r3, [pc, #40]	; (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c37c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c380:	d107      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c382:	f107 0318 	add.w	r3, r7, #24
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f912 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c390:	e0eb      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c396:	e0e8      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39c:	e0e5      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c39e:	bf00      	nop
 800c3a0:	58024400 	.word	0x58024400
 800c3a4:	03d09000 	.word	0x03d09000
 800c3a8:	003d0900 	.word	0x003d0900
 800c3ac:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c3b8:	430b      	orrs	r3, r1
 800c3ba:	f040 8085 	bne.w	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c3be:	4b6d      	ldr	r3, [pc, #436]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c3c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3ce:	d06b      	beq.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3d6:	d874      	bhi.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3de:	d056      	beq.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3e6:	d86c      	bhi.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3ee:	d03b      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3f6:	d864      	bhi.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3fe:	d021      	beq.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c406:	d85c      	bhi.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d004      	beq.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c414:	d004      	beq.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c416:	e054      	b.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c418:	f000 f8b4 	bl	800c584 <HAL_RCCEx_GetD3PCLK1Freq>
 800c41c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c41e:	e0a4      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c420:	4b54      	ldr	r3, [pc, #336]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c42c:	d107      	bne.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c42e:	f107 0318 	add.w	r3, r7, #24
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f8bc 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43c:	e095      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c442:	e092      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c444:	4b4b      	ldr	r3, [pc, #300]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c44c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c450:	d107      	bne.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c452:	f107 030c 	add.w	r3, r7, #12
 800c456:	4618      	mov	r0, r3
 800c458:	f000 f9fe 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c460:	e083      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c466:	e080      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c468:	4b42      	ldr	r3, [pc, #264]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 0304 	and.w	r3, r3, #4
 800c470:	2b04      	cmp	r3, #4
 800c472:	d109      	bne.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c474:	4b3f      	ldr	r3, [pc, #252]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	08db      	lsrs	r3, r3, #3
 800c47a:	f003 0303 	and.w	r3, r3, #3
 800c47e:	4a3e      	ldr	r2, [pc, #248]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c480:	fa22 f303 	lsr.w	r3, r2, r3
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c486:	e070      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	e06d      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c48e:	4b39      	ldr	r3, [pc, #228]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49a:	d102      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c49c:	4b37      	ldr	r3, [pc, #220]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a0:	e063      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a6:	e060      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4a8:	4b32      	ldr	r3, [pc, #200]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4b4:	d102      	bne.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c4b6:	4b32      	ldr	r3, [pc, #200]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ba:	e056      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c0:	e053      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c6:	e050      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c4d0:	430b      	orrs	r3, r1
 800c4d2:	d148      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c4d4:	4b27      	ldr	r3, [pc, #156]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e4:	d02a      	beq.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ec:	d838      	bhi.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4fa:	d00d      	beq.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c4fc:	e030      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4fe:	4b1d      	ldr	r3, [pc, #116]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c50a:	d102      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c50c:	4b1c      	ldr	r3, [pc, #112]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c510:	e02b      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c516:	e028      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c518:	4b16      	ldr	r3, [pc, #88]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c524:	d107      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f000 fae8 	bl	800cb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c534:	e019      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53a:	e016      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c53c:	4b0d      	ldr	r3, [pc, #52]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c548:	d107      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54a:	f107 0318 	add.w	r3, r7, #24
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 f82e 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c558:	e007      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55e:	e004      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c564:	e001      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3740      	adds	r7, #64	; 0x40
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	58024400 	.word	0x58024400
 800c578:	03d09000 	.word	0x03d09000
 800c57c:	003d0900 	.word	0x003d0900
 800c580:	02faf080 	.word	0x02faf080

0800c584 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c588:	f7fe f92e 	bl	800a7e8 <HAL_RCC_GetHCLKFreq>
 800c58c:	4602      	mov	r2, r0
 800c58e:	4b06      	ldr	r3, [pc, #24]	; (800c5a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	091b      	lsrs	r3, r3, #4
 800c594:	f003 0307 	and.w	r3, r3, #7
 800c598:	4904      	ldr	r1, [pc, #16]	; (800c5ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c59a:	5ccb      	ldrb	r3, [r1, r3]
 800c59c:	f003 031f 	and.w	r3, r3, #31
 800c5a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	080185dc 	.word	0x080185dc

0800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b089      	sub	sp, #36	; 0x24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5b8:	4ba1      	ldr	r3, [pc, #644]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c5c2:	4b9f      	ldr	r3, [pc, #636]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c6:	0b1b      	lsrs	r3, r3, #12
 800c5c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c5ce:	4b9c      	ldr	r3, [pc, #624]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d2:	091b      	lsrs	r3, r3, #4
 800c5d4:	f003 0301 	and.w	r3, r3, #1
 800c5d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c5da:	4b99      	ldr	r3, [pc, #612]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5de:	08db      	lsrs	r3, r3, #3
 800c5e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	fb02 f303 	mul.w	r3, r2, r3
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 8111 	beq.w	800c820 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	2b02      	cmp	r3, #2
 800c602:	f000 8083 	beq.w	800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	2b02      	cmp	r3, #2
 800c60a:	f200 80a1 	bhi.w	800c750 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d056      	beq.n	800c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c61a:	e099      	b.n	800c750 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c61c:	4b88      	ldr	r3, [pc, #544]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0320 	and.w	r3, r3, #32
 800c624:	2b00      	cmp	r3, #0
 800c626:	d02d      	beq.n	800c684 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c628:	4b85      	ldr	r3, [pc, #532]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	08db      	lsrs	r3, r3, #3
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	4a84      	ldr	r2, [pc, #528]	; (800c844 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c634:	fa22 f303 	lsr.w	r3, r2, r3
 800c638:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	ee07 3a90 	vmov	s15, r3
 800c640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	ee07 3a90 	vmov	s15, r3
 800c64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c652:	4b7b      	ldr	r3, [pc, #492]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c65a:	ee07 3a90 	vmov	s15, r3
 800c65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c662:	ed97 6a03 	vldr	s12, [r7, #12]
 800c666:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c67e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c682:	e087      	b.n	800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c68e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c84c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c696:	4b6a      	ldr	r3, [pc, #424]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c69e:	ee07 3a90 	vmov	s15, r3
 800c6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6c6:	e065      	b.n	800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6da:	4b59      	ldr	r3, [pc, #356]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e2:	ee07 3a90 	vmov	s15, r3
 800c6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c70a:	e043      	b.n	800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c71e:	4b48      	ldr	r3, [pc, #288]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c732:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c74e:	e021      	b.n	800c794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c762:	4b37      	ldr	r3, [pc, #220]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c772:	ed97 6a03 	vldr	s12, [r7, #12]
 800c776:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c78e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c792:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c794:	4b2a      	ldr	r3, [pc, #168]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	0a5b      	lsrs	r3, r3, #9
 800c79a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c79e:	ee07 3a90 	vmov	s15, r3
 800c7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7ba:	ee17 2a90 	vmov	r2, s15
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c7c2:	4b1f      	ldr	r3, [pc, #124]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c6:	0c1b      	lsrs	r3, r3, #16
 800c7c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7cc:	ee07 3a90 	vmov	s15, r3
 800c7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7e8:	ee17 2a90 	vmov	r2, s15
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7f0:	4b13      	ldr	r3, [pc, #76]	; (800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	0e1b      	lsrs	r3, r3, #24
 800c7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c80a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c816:	ee17 2a90 	vmov	r2, s15
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c81e:	e008      	b.n	800c832 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	609a      	str	r2, [r3, #8]
}
 800c832:	bf00      	nop
 800c834:	3724      	adds	r7, #36	; 0x24
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	58024400 	.word	0x58024400
 800c844:	03d09000 	.word	0x03d09000
 800c848:	46000000 	.word	0x46000000
 800c84c:	4c742400 	.word	0x4c742400
 800c850:	4a742400 	.word	0x4a742400
 800c854:	4c3ebc20 	.word	0x4c3ebc20

0800c858 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c858:	b480      	push	{r7}
 800c85a:	b089      	sub	sp, #36	; 0x24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c860:	4ba1      	ldr	r3, [pc, #644]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c864:	f003 0303 	and.w	r3, r3, #3
 800c868:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c86a:	4b9f      	ldr	r3, [pc, #636]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	0d1b      	lsrs	r3, r3, #20
 800c870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c874:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c876:	4b9c      	ldr	r3, [pc, #624]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87a:	0a1b      	lsrs	r3, r3, #8
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c882:	4b99      	ldr	r3, [pc, #612]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c886:	08db      	lsrs	r3, r3, #3
 800c888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 8111 	beq.w	800cac8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	f000 8083 	beq.w	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	f200 80a1 	bhi.w	800c9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d056      	beq.n	800c970 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c8c2:	e099      	b.n	800c9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8c4:	4b88      	ldr	r3, [pc, #544]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0320 	and.w	r3, r3, #32
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d02d      	beq.n	800c92c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8d0:	4b85      	ldr	r3, [pc, #532]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	08db      	lsrs	r3, r3, #3
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	4a84      	ldr	r2, [pc, #528]	; (800caec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c8dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	ee07 3a90 	vmov	s15, r3
 800c8e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8fa:	4b7b      	ldr	r3, [pc, #492]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c902:	ee07 3a90 	vmov	s15, r3
 800c906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c90e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800caf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c92a:	e087      	b.n	800ca3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	ee07 3a90 	vmov	s15, r3
 800c932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c936:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800caf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c93e:	4b6a      	ldr	r3, [pc, #424]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c946:	ee07 3a90 	vmov	s15, r3
 800c94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c952:	eddf 5a67 	vldr	s11, [pc, #412]	; 800caf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c96e:	e065      	b.n	800ca3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800caf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c982:	4b59      	ldr	r3, [pc, #356]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98a:	ee07 3a90 	vmov	s15, r3
 800c98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c992:	ed97 6a03 	vldr	s12, [r7, #12]
 800c996:	eddf 5a56 	vldr	s11, [pc, #344]	; 800caf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9b2:	e043      	b.n	800ca3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cafc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9c6:	4b48      	ldr	r3, [pc, #288]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800caf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9f6:	e021      	b.n	800ca3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800caf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0a:	4b37      	ldr	r3, [pc, #220]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800caf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ca3c:	4b2a      	ldr	r3, [pc, #168]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca40:	0a5b      	lsrs	r3, r3, #9
 800ca42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca62:	ee17 2a90 	vmov	r2, s15
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca6a:	4b1f      	ldr	r3, [pc, #124]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca74:	ee07 3a90 	vmov	s15, r3
 800ca78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca90:	ee17 2a90 	vmov	r2, s15
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca98:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9c:	0e1b      	lsrs	r3, r3, #24
 800ca9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cab2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cabe:	ee17 2a90 	vmov	r2, s15
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cac6:	e008      	b.n	800cada <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	609a      	str	r2, [r3, #8]
}
 800cada:	bf00      	nop
 800cadc:	3724      	adds	r7, #36	; 0x24
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	58024400 	.word	0x58024400
 800caec:	03d09000 	.word	0x03d09000
 800caf0:	46000000 	.word	0x46000000
 800caf4:	4c742400 	.word	0x4c742400
 800caf8:	4a742400 	.word	0x4a742400
 800cafc:	4c3ebc20 	.word	0x4c3ebc20

0800cb00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b089      	sub	sp, #36	; 0x24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb08:	4ba0      	ldr	r3, [pc, #640]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0c:	f003 0303 	and.w	r3, r3, #3
 800cb10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb12:	4b9e      	ldr	r3, [pc, #632]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb16:	091b      	lsrs	r3, r3, #4
 800cb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb1e:	4b9b      	ldr	r3, [pc, #620]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb28:	4b98      	ldr	r3, [pc, #608]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	08db      	lsrs	r3, r3, #3
 800cb2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	fb02 f303 	mul.w	r3, r2, r3
 800cb38:	ee07 3a90 	vmov	s15, r3
 800cb3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 8111 	beq.w	800cd6e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	f000 8083 	beq.w	800cc5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	f200 80a1 	bhi.w	800cc9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d056      	beq.n	800cc16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb68:	e099      	b.n	800cc9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb6a:	4b88      	ldr	r3, [pc, #544]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f003 0320 	and.w	r3, r3, #32
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d02d      	beq.n	800cbd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb76:	4b85      	ldr	r3, [pc, #532]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	08db      	lsrs	r3, r3, #3
 800cb7c:	f003 0303 	and.w	r3, r3, #3
 800cb80:	4a83      	ldr	r2, [pc, #524]	; (800cd90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb82:	fa22 f303 	lsr.w	r3, r2, r3
 800cb86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	ee07 3a90 	vmov	s15, r3
 800cb98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cba0:	4b7a      	ldr	r3, [pc, #488]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba8:	ee07 3a90 	vmov	s15, r3
 800cbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbcc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbd0:	e087      	b.n	800cce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	ee07 3a90 	vmov	s15, r3
 800cbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cbe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbe4:	4b69      	ldr	r3, [pc, #420]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbec:	ee07 3a90 	vmov	s15, r3
 800cbf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbf8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc14:	e065      	b.n	800cce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd9c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cc24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc28:	4b58      	ldr	r3, [pc, #352]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc30:	ee07 3a90 	vmov	s15, r3
 800cc34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc38:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc58:	e043      	b.n	800cce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	ee07 3a90 	vmov	s15, r3
 800cc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cda0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc6c:	4b47      	ldr	r3, [pc, #284]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc80:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc9c:	e021      	b.n	800cce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	ee07 3a90 	vmov	s15, r3
 800cca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ccac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb0:	4b36      	ldr	r3, [pc, #216]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb8:	ee07 3a90 	vmov	s15, r3
 800ccbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cce0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cce2:	4b2a      	ldr	r3, [pc, #168]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce6:	0a5b      	lsrs	r3, r3, #9
 800cce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccec:	ee07 3a90 	vmov	s15, r3
 800ccf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd08:	ee17 2a90 	vmov	r2, s15
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cd10:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd14:	0c1b      	lsrs	r3, r3, #16
 800cd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd1a:	ee07 3a90 	vmov	s15, r3
 800cd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd36:	ee17 2a90 	vmov	r2, s15
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cd3e:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd42:	0e1b      	lsrs	r3, r3, #24
 800cd44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd58:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd64:	ee17 2a90 	vmov	r2, s15
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd6c:	e008      	b.n	800cd80 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	609a      	str	r2, [r3, #8]
}
 800cd80:	bf00      	nop
 800cd82:	3724      	adds	r7, #36	; 0x24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	58024400 	.word	0x58024400
 800cd90:	03d09000 	.word	0x03d09000
 800cd94:	46000000 	.word	0x46000000
 800cd98:	4c742400 	.word	0x4c742400
 800cd9c:	4a742400 	.word	0x4a742400
 800cda0:	4c3ebc20 	.word	0x4c3ebc20

0800cda4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdb2:	4b53      	ldr	r3, [pc, #332]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb6:	f003 0303 	and.w	r3, r3, #3
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d101      	bne.n	800cdc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e099      	b.n	800cef6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cdc2:	4b4f      	ldr	r3, [pc, #316]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a4e      	ldr	r2, [pc, #312]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cdc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cdcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdce:	f7f6 fe7b 	bl	8003ac8 <HAL_GetTick>
 800cdd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cdd4:	e008      	b.n	800cde8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cdd6:	f7f6 fe77 	bl	8003ac8 <HAL_GetTick>
 800cdda:	4602      	mov	r2, r0
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d901      	bls.n	800cde8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e086      	b.n	800cef6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cde8:	4b45      	ldr	r3, [pc, #276]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1f0      	bne.n	800cdd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cdf4:	4b42      	ldr	r3, [pc, #264]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	031b      	lsls	r3, r3, #12
 800ce02:	493f      	ldr	r1, [pc, #252]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce04:	4313      	orrs	r3, r2
 800ce06:	628b      	str	r3, [r1, #40]	; 0x28
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	3b01      	subs	r3, #1
 800ce18:	025b      	lsls	r3, r3, #9
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	431a      	orrs	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	041b      	lsls	r3, r3, #16
 800ce26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	061b      	lsls	r3, r3, #24
 800ce34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce38:	4931      	ldr	r1, [pc, #196]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce3e:	4b30      	ldr	r3, [pc, #192]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	492d      	ldr	r1, [pc, #180]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce50:	4b2b      	ldr	r3, [pc, #172]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce54:	f023 0220 	bic.w	r2, r3, #32
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	4928      	ldr	r1, [pc, #160]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce62:	4b27      	ldr	r3, [pc, #156]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce66:	4a26      	ldr	r2, [pc, #152]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce68:	f023 0310 	bic.w	r3, r3, #16
 800ce6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce6e:	4b24      	ldr	r3, [pc, #144]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce72:	4b24      	ldr	r3, [pc, #144]	; (800cf04 <RCCEx_PLL2_Config+0x160>)
 800ce74:	4013      	ands	r3, r2
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	69d2      	ldr	r2, [r2, #28]
 800ce7a:	00d2      	lsls	r2, r2, #3
 800ce7c:	4920      	ldr	r1, [pc, #128]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce82:	4b1f      	ldr	r3, [pc, #124]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce86:	4a1e      	ldr	r2, [pc, #120]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce88:	f043 0310 	orr.w	r3, r3, #16
 800ce8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce94:	4b1a      	ldr	r3, [pc, #104]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce98:	4a19      	ldr	r2, [pc, #100]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ce9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cea0:	e00f      	b.n	800cec2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d106      	bne.n	800ceb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cea8:	4b15      	ldr	r3, [pc, #84]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	4a14      	ldr	r2, [pc, #80]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ceae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ceb4:	e005      	b.n	800cec2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ceb6:	4b12      	ldr	r3, [pc, #72]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ceb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceba:	4a11      	ldr	r2, [pc, #68]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cec0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cec2:	4b0f      	ldr	r3, [pc, #60]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a0e      	ldr	r2, [pc, #56]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800cec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cece:	f7f6 fdfb 	bl	8003ac8 <HAL_GetTick>
 800ced2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ced4:	e008      	b.n	800cee8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ced6:	f7f6 fdf7 	bl	8003ac8 <HAL_GetTick>
 800ceda:	4602      	mov	r2, r0
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	2b02      	cmp	r3, #2
 800cee2:	d901      	bls.n	800cee8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e006      	b.n	800cef6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cee8:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <RCCEx_PLL2_Config+0x15c>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0f0      	beq.n	800ced6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	58024400 	.word	0x58024400
 800cf04:	ffff0007 	.word	0xffff0007

0800cf08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf16:	4b53      	ldr	r3, [pc, #332]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1a:	f003 0303 	and.w	r3, r3, #3
 800cf1e:	2b03      	cmp	r3, #3
 800cf20:	d101      	bne.n	800cf26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e099      	b.n	800d05a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cf26:	4b4f      	ldr	r3, [pc, #316]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a4e      	ldr	r2, [pc, #312]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf32:	f7f6 fdc9 	bl	8003ac8 <HAL_GetTick>
 800cf36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf38:	e008      	b.n	800cf4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf3a:	f7f6 fdc5 	bl	8003ac8 <HAL_GetTick>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d901      	bls.n	800cf4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e086      	b.n	800d05a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf4c:	4b45      	ldr	r3, [pc, #276]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1f0      	bne.n	800cf3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf58:	4b42      	ldr	r3, [pc, #264]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	051b      	lsls	r3, r3, #20
 800cf66:	493f      	ldr	r1, [pc, #252]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	628b      	str	r3, [r1, #40]	; 0x28
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	025b      	lsls	r3, r3, #9
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	431a      	orrs	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	041b      	lsls	r3, r3, #16
 800cf8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	061b      	lsls	r3, r3, #24
 800cf98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf9c:	4931      	ldr	r1, [pc, #196]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cfa2:	4b30      	ldr	r3, [pc, #192]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	695b      	ldr	r3, [r3, #20]
 800cfae:	492d      	ldr	r1, [pc, #180]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cfb4:	4b2b      	ldr	r3, [pc, #172]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	4928      	ldr	r1, [pc, #160]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cfc6:	4b27      	ldr	r3, [pc, #156]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfca:	4a26      	ldr	r2, [pc, #152]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cfd2:	4b24      	ldr	r3, [pc, #144]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfd6:	4b24      	ldr	r3, [pc, #144]	; (800d068 <RCCEx_PLL3_Config+0x160>)
 800cfd8:	4013      	ands	r3, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	69d2      	ldr	r2, [r2, #28]
 800cfde:	00d2      	lsls	r2, r2, #3
 800cfe0:	4920      	ldr	r1, [pc, #128]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfe6:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	4a1e      	ldr	r2, [pc, #120]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cfec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d106      	bne.n	800d006 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cff8:	4b1a      	ldr	r3, [pc, #104]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffc:	4a19      	ldr	r2, [pc, #100]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800cffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d002:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d004:	e00f      	b.n	800d026 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d106      	bne.n	800d01a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d00c:	4b15      	ldr	r3, [pc, #84]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	4a14      	ldr	r2, [pc, #80]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d016:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d018:	e005      	b.n	800d026 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d01a:	4b12      	ldr	r3, [pc, #72]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01e:	4a11      	ldr	r2, [pc, #68]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a0e      	ldr	r2, [pc, #56]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d032:	f7f6 fd49 	bl	8003ac8 <HAL_GetTick>
 800d036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d038:	e008      	b.n	800d04c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d03a:	f7f6 fd45 	bl	8003ac8 <HAL_GetTick>
 800d03e:	4602      	mov	r2, r0
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	2b02      	cmp	r3, #2
 800d046:	d901      	bls.n	800d04c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d048:	2303      	movs	r3, #3
 800d04a:	e006      	b.n	800d05a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <RCCEx_PLL3_Config+0x15c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d0f0      	beq.n	800d03a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	58024400 	.word	0x58024400
 800d068:	ffff0007 	.word	0xffff0007

0800d06c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	; 0x28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e075      	b.n	800d16a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d105      	bne.n	800d096 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7f5 fe59 	bl	8002d48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2204      	movs	r2, #4
 800d09a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 f868 	bl	800d174 <HAL_SD_InitCard>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e05d      	b.n	800d16a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d0ae:	f107 0308 	add.w	r3, r7, #8
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fdaf 	bl	800dc18 <HAL_SD_GetCardStatus>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e052      	b.n	800d16a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d0c4:	7e3b      	ldrb	r3, [r7, #24]
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d0ca:	7e7b      	ldrb	r3, [r7, #25]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d10a      	bne.n	800d0ee <HAL_SD_Init+0x82>
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <HAL_SD_Init+0x78>
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d004      	beq.n	800d0ee <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0ea:	659a      	str	r2, [r3, #88]	; 0x58
 800d0ec:	e00b      	b.n	800d106 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d104      	bne.n	800d100 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0fc:	659a      	str	r2, [r3, #88]	; 0x58
 800d0fe:	e002      	b.n	800d106 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 fe6d 	bl	800ddec <HAL_SD_ConfigWideBusOperation>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e026      	b.n	800d16a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d11c:	f7f6 fcd4 	bl	8003ac8 <HAL_GetTick>
 800d120:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d122:	e011      	b.n	800d148 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d124:	f7f6 fcd0 	bl	8003ac8 <HAL_GetTick>
 800d128:	4602      	mov	r2, r0
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d132:	d109      	bne.n	800d148 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d13a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d144:	2303      	movs	r3, #3
 800d146:	e010      	b.n	800d16a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 ff61 	bl	800e010 <HAL_SD_GetCardState>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b04      	cmp	r3, #4
 800d152:	d1e7      	bne.n	800d124 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3728      	adds	r7, #40	; 0x28
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b08d      	sub	sp, #52	; 0x34
 800d178:	af02      	add	r7, sp, #8
 800d17a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d180:	2300      	movs	r3, #0
 800d182:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d188:	2300      	movs	r3, #0
 800d18a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d18c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d190:	f04f 0100 	mov.w	r1, #0
 800d194:	f7fe fd24 	bl	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d198:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d109      	bne.n	800d1b4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d1ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	e070      	b.n	800d296 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	0a1b      	lsrs	r3, r3, #8
 800d1b8:	4a39      	ldr	r2, [pc, #228]	; (800d2a0 <HAL_SD_InitCard+0x12c>)
 800d1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d1be:	091b      	lsrs	r3, r3, #4
 800d1c0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681c      	ldr	r4, [r3, #0]
 800d1c6:	466a      	mov	r2, sp
 800d1c8:	f107 0318 	add.w	r3, r7, #24
 800d1cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d1d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800d1d4:	f107 030c 	add.w	r3, r7, #12
 800d1d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f004 fec4 	bl	8011f68 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f004 ff07 	bl	8011ff8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d005      	beq.n	800d1fc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d007      	beq.n	800d212 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d202:	4a28      	ldr	r2, [pc, #160]	; (800d2a4 <HAL_SD_InitCard+0x130>)
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d206:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20a:	3301      	adds	r3, #1
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7f6 fc67 	bl	8003ae0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 ffea 	bl	800e1ec <SD_PowerON>
 800d218:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00b      	beq.n	800d238 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d22c:	6a3b      	ldr	r3, [r7, #32]
 800d22e:	431a      	orrs	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e02e      	b.n	800d296 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 ff09 	bl	800e050 <SD_InitCard>
 800d23e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00b      	beq.n	800d25e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	431a      	orrs	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e01b      	b.n	800d296 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d266:	4618      	mov	r0, r3
 800d268:	f004 ff5c 	bl	8012124 <SDMMC_CmdBlockLength>
 800d26c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d26e:	6a3b      	ldr	r3, [r7, #32]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00f      	beq.n	800d294 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <HAL_SD_InitCard+0x134>)
 800d27a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d280:	6a3b      	ldr	r3, [r7, #32]
 800d282:	431a      	orrs	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	e000      	b.n	800d296 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	372c      	adds	r7, #44	; 0x2c
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd90      	pop	{r4, r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	014f8b59 	.word	0x014f8b59
 800d2a4:	00012110 	.word	0x00012110
 800d2a8:	1fe00fff 	.word	0x1fe00fff

0800d2ac <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b08c      	sub	sp, #48	; 0x30
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d107      	bne.n	800d2d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e08d      	b.n	800d3f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	f040 8086 	bne.w	800d3ee <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	441a      	add	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d907      	bls.n	800d306 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	e074      	b.n	800d3f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2203      	movs	r2, #3
 800d30a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2200      	movs	r2, #0
 800d314:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	025a      	lsls	r2, r3, #9
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d002      	beq.n	800d332 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	025b      	lsls	r3, r3, #9
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d332:	f04f 33ff 	mov.w	r3, #4294967295
 800d336:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	025b      	lsls	r3, r3, #9
 800d33c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d33e:	2390      	movs	r3, #144	; 0x90
 800d340:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d342:	2302      	movs	r3, #2
 800d344:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d346:	2300      	movs	r3, #0
 800d348:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f107 0210 	add.w	r2, r7, #16
 800d356:	4611      	mov	r1, r2
 800d358:	4618      	mov	r0, r3
 800d35a:	f004 feb7 	bl	80120cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	68da      	ldr	r2, [r3, #12]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d36c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2201      	movs	r2, #1
 800d37c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d90a      	bls.n	800d39a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2282      	movs	r2, #130	; 0x82
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d390:	4618      	mov	r0, r3
 800d392:	f004 ff0d 	bl	80121b0 <SDMMC_CmdReadMultiBlock>
 800d396:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d398:	e009      	b.n	800d3ae <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2281      	movs	r2, #129	; 0x81
 800d39e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f004 fedf 	bl	801216a <SDMMC_CmdReadSingleBlock>
 800d3ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d012      	beq.n	800d3da <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a0f      	ldr	r2, [pc, #60]	; (800d3f8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	431a      	orrs	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e00a      	b.n	800d3f0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d3e8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	e000      	b.n	800d3f0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3ee:	2302      	movs	r3, #2
  }
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3730      	adds	r7, #48	; 0x30
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	1fe00fff 	.word	0x1fe00fff

0800d3fc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d107      	bne.n	800d424 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d418:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e08d      	b.n	800d540 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	f040 8086 	bne.w	800d53e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	441a      	add	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d442:	429a      	cmp	r2, r3
 800d444:	d907      	bls.n	800d456 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e074      	b.n	800d540 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2203      	movs	r2, #3
 800d45a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	025a      	lsls	r2, r3, #9
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d002      	beq.n	800d482 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	025b      	lsls	r3, r3, #9
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d482:	f04f 33ff 	mov.w	r3, #4294967295
 800d486:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	025b      	lsls	r3, r3, #9
 800d48c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d48e:	2390      	movs	r3, #144	; 0x90
 800d490:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d492:	2300      	movs	r3, #0
 800d494:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d496:	2300      	movs	r3, #0
 800d498:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d49a:	2300      	movs	r3, #0
 800d49c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f107 0210 	add.w	r2, r7, #16
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f004 fe0f 	bl	80120cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68da      	ldr	r2, [r3, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4bc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d90a      	bls.n	800d4ea <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	22a0      	movs	r2, #160	; 0xa0
 800d4d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f004 feab 	bl	801223c <SDMMC_CmdWriteMultiBlock>
 800d4e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4e8:	e009      	b.n	800d4fe <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2290      	movs	r2, #144	; 0x90
 800d4ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f004 fe7d 	bl	80121f6 <SDMMC_CmdWriteSingleBlock>
 800d4fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	2b00      	cmp	r3, #0
 800d502:	d012      	beq.n	800d52a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a0f      	ldr	r2, [pc, #60]	; (800d548 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	431a      	orrs	r2, r3
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e00a      	b.n	800d540 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d538:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e000      	b.n	800d540 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d53e:	2302      	movs	r3, #2
  }
}
 800d540:	4618      	mov	r0, r3
 800d542:	3730      	adds	r7, #48	; 0x30
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	1fe00fff 	.word	0x1fe00fff

0800d54c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d558:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d008      	beq.n	800d57a <HAL_SD_IRQHandler+0x2e>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f003 0308 	and.w	r3, r3, #8
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f001 f926 	bl	800e7c4 <SD_Read_IT>
 800d578:	e19a      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 80ac 	beq.w	800d6e2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d592:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	4b59      	ldr	r3, [pc, #356]	; (800d704 <HAL_SD_IRQHandler+0x1b8>)
 800d5a0:	400b      	ands	r3, r1
 800d5a2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d5b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68da      	ldr	r2, [r3, #12]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5c2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f003 0308 	and.w	r3, r3, #8
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d038      	beq.n	800d640 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f003 0302 	and.w	r3, r3, #2
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d104      	bne.n	800d5e2 <HAL_SD_IRQHandler+0x96>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f003 0320 	and.w	r3, r3, #32
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d011      	beq.n	800d606 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f004 fe4c 	bl	8012284 <SDMMC_CmdStopTransfer>
 800d5ec:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d008      	beq.n	800d606 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f95b 	bl	800d8bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a3f      	ldr	r2, [pc, #252]	; (800d708 <HAL_SD_IRQHandler+0x1bc>)
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	2b00      	cmp	r3, #0
 800d624:	d104      	bne.n	800d630 <HAL_SD_IRQHandler+0xe4>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f003 0302 	and.w	r3, r3, #2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d003      	beq.n	800d638 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f006 fe4d 	bl	80142d0 <HAL_SD_RxCpltCallback>
 800d636:	e13b      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f006 fe3f 	bl	80142bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d63e:	e137      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 8132 	beq.w	800d8b0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2200      	movs	r2, #0
 800d652:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2200      	movs	r2, #0
 800d65a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2200      	movs	r2, #0
 800d662:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0302 	and.w	r3, r3, #2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d104      	bne.n	800d678 <HAL_SD_IRQHandler+0x12c>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f003 0320 	and.w	r3, r3, #32
 800d674:	2b00      	cmp	r3, #0
 800d676:	d011      	beq.n	800d69c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f004 fe01 	bl	8012284 <SDMMC_CmdStopTransfer>
 800d682:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d008      	beq.n	800d69c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	431a      	orrs	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f910 	bl	800d8bc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f003 0310 	and.w	r3, r3, #16
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <HAL_SD_IRQHandler+0x172>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f003 0320 	and.w	r3, r3, #32
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f006 fdfc 	bl	80142bc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d105      	bne.n	800d6da <HAL_SD_IRQHandler+0x18e>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f003 0302 	and.w	r3, r3, #2
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 80eb 	beq.w	800d8b0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f006 fdf8 	bl	80142d0 <HAL_SD_RxCpltCallback>
}
 800d6e0:	e0e6      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00d      	beq.n	800d70c <HAL_SD_IRQHandler+0x1c0>
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d008      	beq.n	800d70c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f001 f8a8 	bl	800e850 <SD_Write_IT>
 800d700:	e0d6      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
 800d702:	bf00      	nop
 800d704:	ffff3ec5 	.word	0xffff3ec5
 800d708:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d712:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d716:	2b00      	cmp	r3, #0
 800d718:	f000 809d 	beq.w	800d856 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d722:	f003 0302 	and.w	r3, r3, #2
 800d726:	2b00      	cmp	r3, #0
 800d728:	d005      	beq.n	800d736 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d72e:	f043 0202 	orr.w	r2, r3, #2
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73c:	f003 0308 	and.w	r3, r3, #8
 800d740:	2b00      	cmp	r3, #0
 800d742:	d005      	beq.n	800d750 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d748:	f043 0208 	orr.w	r2, r3, #8
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d756:	f003 0320 	and.w	r3, r3, #32
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d005      	beq.n	800d76a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d762:	f043 0220 	orr.w	r2, r3, #32
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d770:	f003 0310 	and.w	r3, r3, #16
 800d774:	2b00      	cmp	r3, #0
 800d776:	d005      	beq.n	800d784 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77c:	f043 0210 	orr.w	r2, r3, #16
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a4b      	ldr	r2, [pc, #300]	; (800d8b8 <HAL_SD_IRQHandler+0x36c>)
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d79a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	68da      	ldr	r2, [r3, #12]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7aa:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68da      	ldr	r2, [r3, #12]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d7ca:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f004 fd57 	bl	8012284 <SDMMC_CmdStopTransfer>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7dc:	431a      	orrs	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68da      	ldr	r2, [r3, #12]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7f0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7fa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f003 0308 	and.w	r3, r3, #8
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00a      	beq.n	800d81c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f851 	bl	800d8bc <HAL_SD_ErrorCallback>
}
 800d81a:	e049      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d822:	2b00      	cmp	r3, #0
 800d824:	d044      	beq.n	800d8b0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d040      	beq.n	800d8b0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d83c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2200      	movs	r2, #0
 800d844:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f834 	bl	800d8bc <HAL_SD_ErrorCallback>
}
 800d854:	e02c      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d860:	2b00      	cmp	r3, #0
 800d862:	d025      	beq.n	800d8b0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d86c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d874:	f003 0304 	and.w	r3, r3, #4
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10c      	bne.n	800d896 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f003 0320 	and.w	r3, r3, #32
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f001 f84a 	bl	800e920 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d88c:	e010      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f001 f832 	bl	800e8f8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d894:	e00c      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f003 0320 	and.w	r3, r3, #32
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f001 f833 	bl	800e90c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d8a6:	e003      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f001 f81b 	bl	800e8e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d8ae:	e7ff      	b.n	800d8b0 <HAL_SD_IRQHandler+0x364>
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	18000f3a 	.word	0x18000f3a

0800d8bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8c4:	bf00      	nop
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8de:	0f9b      	lsrs	r3, r3, #30
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ea:	0e9b      	lsrs	r3, r3, #26
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f003 030f 	and.w	r3, r3, #15
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8fc:	0e1b      	lsrs	r3, r3, #24
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	f003 0303 	and.w	r3, r3, #3
 800d904:	b2da      	uxtb	r2, r3
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d90e:	0c1b      	lsrs	r3, r3, #16
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d91a:	0a1b      	lsrs	r3, r3, #8
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d926:	b2da      	uxtb	r2, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d930:	0d1b      	lsrs	r3, r3, #20
 800d932:	b29a      	uxth	r2, r3
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d93c:	0c1b      	lsrs	r3, r3, #16
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 030f 	and.w	r3, r3, #15
 800d944:	b2da      	uxtb	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d94e:	0bdb      	lsrs	r3, r3, #15
 800d950:	b2db      	uxtb	r3, r3
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	b2da      	uxtb	r2, r3
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d960:	0b9b      	lsrs	r3, r3, #14
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d972:	0b5b      	lsrs	r3, r3, #13
 800d974:	b2db      	uxtb	r3, r3
 800d976:	f003 0301 	and.w	r3, r3, #1
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d984:	0b1b      	lsrs	r3, r3, #12
 800d986:	b2db      	uxtb	r3, r3
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2200      	movs	r2, #0
 800d996:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d163      	bne.n	800da68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9a4:	009a      	lsls	r2, r3, #2
 800d9a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d9b0:	0f92      	lsrs	r2, r2, #30
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9bc:	0edb      	lsrs	r3, r3, #27
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 0307 	and.w	r3, r3, #7
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ce:	0e1b      	lsrs	r3, r3, #24
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e0:	0d5b      	lsrs	r3, r3, #21
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0307 	and.w	r3, r3, #7
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f2:	0c9b      	lsrs	r3, r3, #18
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da04:	0bdb      	lsrs	r3, r3, #15
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0307 	and.w	r3, r3, #7
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	7e1b      	ldrb	r3, [r3, #24]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	3302      	adds	r3, #2
 800da28:	2201      	movs	r2, #1
 800da2a:	fa02 f303 	lsl.w	r3, r2, r3
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800da32:	fb03 f202 	mul.w	r2, r3, r2
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	7a1b      	ldrb	r3, [r3, #8]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 030f 	and.w	r3, r3, #15
 800da44:	2201      	movs	r2, #1
 800da46:	409a      	lsls	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da54:	0a52      	lsrs	r2, r2, #9
 800da56:	fb03 f202 	mul.w	r2, r3, r2
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da64:	655a      	str	r2, [r3, #84]	; 0x54
 800da66:	e031      	b.n	800dacc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d11d      	bne.n	800daac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da74:	041b      	lsls	r3, r3, #16
 800da76:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da7e:	0c1b      	lsrs	r3, r3, #16
 800da80:	431a      	orrs	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	3301      	adds	r3, #1
 800da8c:	029a      	lsls	r2, r3, #10
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daa0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	655a      	str	r2, [r3, #84]	; 0x54
 800daaa:	e00f      	b.n	800dacc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a58      	ldr	r2, [pc, #352]	; (800dc14 <HAL_SD_GetCardCSD+0x344>)
 800dab2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dac8:	2301      	movs	r3, #1
 800daca:	e09d      	b.n	800dc08 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dad0:	0b9b      	lsrs	r3, r3, #14
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	f003 0301 	and.w	r3, r3, #1
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dae2:	09db      	lsrs	r3, r3, #7
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daea:	b2da      	uxtb	r2, r3
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db04:	0fdb      	lsrs	r3, r3, #31
 800db06:	b2da      	uxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db10:	0f5b      	lsrs	r3, r3, #29
 800db12:	b2db      	uxtb	r3, r3
 800db14:	f003 0303 	and.w	r3, r3, #3
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db22:	0e9b      	lsrs	r3, r3, #26
 800db24:	b2db      	uxtb	r3, r3
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	b2da      	uxtb	r2, r3
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db34:	0d9b      	lsrs	r3, r3, #22
 800db36:	b2db      	uxtb	r3, r3
 800db38:	f003 030f 	and.w	r3, r3, #15
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db46:	0d5b      	lsrs	r3, r3, #21
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db62:	0c1b      	lsrs	r3, r3, #16
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db76:	0bdb      	lsrs	r3, r3, #15
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db8a:	0b9b      	lsrs	r3, r3, #14
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9e:	0b5b      	lsrs	r3, r3, #13
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbb2:	0b1b      	lsrs	r3, r3, #12
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc6:	0a9b      	lsrs	r3, r3, #10
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0303 	and.w	r3, r3, #3
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbda:	0a1b      	lsrs	r3, r3, #8
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbee:	085b      	lsrs	r3, r3, #1
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	1fe00fff 	.word	0x1fe00fff

0800dc18 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b094      	sub	sp, #80	; 0x50
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d101      	bne.n	800dc38 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e0a7      	b.n	800dd88 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dc38:	f107 0308 	add.w	r3, r7, #8
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fb62 	bl	800e308 <SD_SendSDStatus>
 800dc44:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d011      	beq.n	800dc70 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a4f      	ldr	r2, [pc, #316]	; (800dd90 <HAL_SD_GetCardStatus+0x178>)
 800dc52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc5a:	431a      	orrs	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc6e:	e070      	b.n	800dd52 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	099b      	lsrs	r3, r3, #6
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	f003 0303 	and.w	r3, r3, #3
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	095b      	lsrs	r3, r3, #5
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	0a1b      	lsrs	r3, r3, #8
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	0e1b      	lsrs	r3, r3, #24
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	4313      	orrs	r3, r2
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	061a      	lsls	r2, r3, #24
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	021b      	lsls	r3, r3, #8
 800dcb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcb6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	0a1b      	lsrs	r3, r3, #8
 800dcbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcc0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	0e1b      	lsrs	r3, r3, #24
 800dcc6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	0a1b      	lsrs	r3, r3, #8
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	0d1b      	lsrs	r3, r3, #20
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	f003 030f 	and.w	r3, r3, #15
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	0c1b      	lsrs	r3, r3, #16
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	4313      	orrs	r3, r2
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	0a9b      	lsrs	r3, r3, #10
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	0a1b      	lsrs	r3, r3, #8
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0303 	and.w	r3, r3, #3
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	091b      	lsrs	r3, r3, #4
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	f003 030f 	and.w	r3, r3, #15
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f003 030f 	and.w	r3, r3, #15
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	0e1b      	lsrs	r3, r3, #24
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f004 f9e2 	bl	8012124 <SDMMC_CmdBlockLength>
 800dd60:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00d      	beq.n	800dd84 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a08      	ldr	r2, [pc, #32]	; (800dd90 <HAL_SD_GetCardStatus+0x178>)
 800dd6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd74:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dd84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3750      	adds	r7, #80	; 0x50
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	1fe00fff 	.word	0x1fe00fff

0800dd94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b08d      	sub	sp, #52	; 0x34
 800ddf0:	af02      	add	r7, sp, #8
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2203      	movs	r2, #3
 800de00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de08:	2b03      	cmp	r3, #3
 800de0a:	d02e      	beq.n	800de6a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de12:	d106      	bne.n	800de22 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	635a      	str	r2, [r3, #52]	; 0x34
 800de20:	e029      	b.n	800de76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de28:	d10a      	bne.n	800de40 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fb64 	bl	800e4f8 <SD_WideBus_Enable>
 800de30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	431a      	orrs	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	635a      	str	r2, [r3, #52]	; 0x34
 800de3e:	e01a      	b.n	800de76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10a      	bne.n	800de5c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 fba1 	bl	800e58e <SD_WideBus_Disable>
 800de4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	431a      	orrs	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	635a      	str	r2, [r3, #52]	; 0x34
 800de5a:	e00c      	b.n	800de76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de60:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	635a      	str	r2, [r3, #52]	; 0x34
 800de68:	e005      	b.n	800de76 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d007      	beq.n	800de8e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a5f      	ldr	r2, [pc, #380]	; (800e000 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de84:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de8c:	e096      	b.n	800dfbc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de92:	f04f 0100 	mov.w	r1, #0
 800de96:	f7fd fea3 	bl	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800de9a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f000 8083 	beq.w	800dfaa <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	695a      	ldr	r2, [r3, #20]
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	4950      	ldr	r1, [pc, #320]	; (800e004 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dec2:	fba1 1303 	umull	r1, r3, r1, r3
 800dec6:	0e1b      	lsrs	r3, r3, #24
 800dec8:	429a      	cmp	r2, r3
 800deca:	d303      	bcc.n	800ded4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	61bb      	str	r3, [r7, #24]
 800ded2:	e05a      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ded8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dedc:	d103      	bne.n	800dee6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	61bb      	str	r3, [r7, #24]
 800dee4:	e051      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deee:	d126      	bne.n	800df3e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	695b      	ldr	r3, [r3, #20]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10e      	bne.n	800df16 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	4a43      	ldr	r2, [pc, #268]	; (800e008 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d906      	bls.n	800df0e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	4a40      	ldr	r2, [pc, #256]	; (800e004 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df04:	fba2 2303 	umull	r2, r3, r2, r3
 800df08:	0e5b      	lsrs	r3, r3, #25
 800df0a:	61bb      	str	r3, [r7, #24]
 800df0c:	e03d      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	695b      	ldr	r3, [r3, #20]
 800df12:	61bb      	str	r3, [r7, #24]
 800df14:	e039      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	695b      	ldr	r3, [r3, #20]
 800df1a:	005b      	lsls	r3, r3, #1
 800df1c:	69fa      	ldr	r2, [r7, #28]
 800df1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df22:	4a39      	ldr	r2, [pc, #228]	; (800e008 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d906      	bls.n	800df36 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	4a36      	ldr	r2, [pc, #216]	; (800e004 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df2c:	fba2 2303 	umull	r2, r3, r2, r3
 800df30:	0e5b      	lsrs	r3, r3, #25
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	e029      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	695b      	ldr	r3, [r3, #20]
 800df3a:	61bb      	str	r3, [r7, #24]
 800df3c:	e025      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10e      	bne.n	800df64 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	4a30      	ldr	r2, [pc, #192]	; (800e00c <HAL_SD_ConfigWideBusOperation+0x220>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d906      	bls.n	800df5c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	4a2c      	ldr	r2, [pc, #176]	; (800e004 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df52:	fba2 2303 	umull	r2, r3, r2, r3
 800df56:	0e1b      	lsrs	r3, r3, #24
 800df58:	61bb      	str	r3, [r7, #24]
 800df5a:	e016      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	695b      	ldr	r3, [r3, #20]
 800df60:	61bb      	str	r3, [r7, #24]
 800df62:	e012      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	695b      	ldr	r3, [r3, #20]
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	69fa      	ldr	r2, [r7, #28]
 800df6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df70:	4a26      	ldr	r2, [pc, #152]	; (800e00c <HAL_SD_ConfigWideBusOperation+0x220>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d906      	bls.n	800df84 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4a22      	ldr	r2, [pc, #136]	; (800e004 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df7a:	fba2 2303 	umull	r2, r3, r2, r3
 800df7e:	0e1b      	lsrs	r3, r3, #24
 800df80:	61bb      	str	r3, [r7, #24]
 800df82:	e002      	b.n	800df8a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681c      	ldr	r4, [r3, #0]
 800df8e:	466a      	mov	r2, sp
 800df90:	f107 0314 	add.w	r3, r7, #20
 800df94:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df98:	e882 0003 	stmia.w	r2, {r0, r1}
 800df9c:	f107 0308 	add.w	r3, r7, #8
 800dfa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f003 ffe0 	bl	8011f68 <SDMMC_Init>
 800dfa8:	e008      	b.n	800dfbc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f004 f8ad 	bl	8012124 <SDMMC_CmdBlockLength>
 800dfca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00c      	beq.n	800dfec <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a0a      	ldr	r2, [pc, #40]	; (800e000 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dfd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	431a      	orrs	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	372c      	adds	r7, #44	; 0x2c
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd90      	pop	{r4, r7, pc}
 800e000:	1fe00fff 	.word	0x1fe00fff
 800e004:	55e63b89 	.word	0x55e63b89
 800e008:	02faf080 	.word	0x02faf080
 800e00c:	017d7840 	.word	0x017d7840

0800e010 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e01c:	f107 030c 	add.w	r3, r7, #12
 800e020:	4619      	mov	r1, r3
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fa40 	bl	800e4a8 <SD_SendStatus>
 800e028:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	431a      	orrs	r2, r3
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	0a5b      	lsrs	r3, r3, #9
 800e040:	f003 030f 	and.w	r3, r3, #15
 800e044:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e046:	693b      	ldr	r3, [r7, #16]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b090      	sub	sp, #64	; 0x40
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e058:	2300      	movs	r3, #0
 800e05a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e05c:	f7f5 fd34 	bl	8003ac8 <HAL_GetTick>
 800e060:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4618      	mov	r0, r3
 800e068:	f003 ffd7 	bl	801201a <SDMMC_GetPowerState>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e072:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e076:	e0b5      	b.n	800e1e4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d02e      	beq.n	800e0de <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f004 fa22 	bl	80124ce <SDMMC_CmdSendCID>
 800e08a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <SD_InitCard+0x46>
    {
      return errorstate;
 800e092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e094:	e0a6      	b.n	800e1e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2100      	movs	r1, #0
 800e09c:	4618      	mov	r0, r3
 800e09e:	f004 f802 	bl	80120a6 <SDMMC_GetResponse>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2104      	movs	r1, #4
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f003 fff9 	bl	80120a6 <SDMMC_GetResponse>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2108      	movs	r1, #8
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f003 fff0 	bl	80120a6 <SDMMC_GetResponse>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	210c      	movs	r1, #12
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f003 ffe7 	bl	80120a6 <SDMMC_GetResponse>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d01d      	beq.n	800e122 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e0e6:	e019      	b.n	800e11c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f107 020a 	add.w	r2, r7, #10
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f004 fa2a 	bl	801254c <SDMMC_CmdSetRelAdd>
 800e0f8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	e06f      	b.n	800e1e4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e104:	f7f5 fce0 	bl	8003ac8 <HAL_GetTick>
 800e108:	4602      	mov	r2, r0
 800e10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	f241 3287 	movw	r2, #4999	; 0x1387
 800e112:	4293      	cmp	r3, r2
 800e114:	d902      	bls.n	800e11c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e11a:	e063      	b.n	800e1e4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e11c:	897b      	ldrh	r3, [r7, #10]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0e2      	beq.n	800e0e8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e126:	2b03      	cmp	r3, #3
 800e128:	d036      	beq.n	800e198 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e12a:	897b      	ldrh	r3, [r7, #10]
 800e12c:	461a      	mov	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e13a:	041b      	lsls	r3, r3, #16
 800e13c:	4619      	mov	r1, r3
 800e13e:	4610      	mov	r0, r2
 800e140:	f004 f9e4 	bl	801250c <SDMMC_CmdSendCSD>
 800e144:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <SD_InitCard+0x100>
    {
      return errorstate;
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	e049      	b.n	800e1e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2100      	movs	r1, #0
 800e156:	4618      	mov	r0, r3
 800e158:	f003 ffa5 	bl	80120a6 <SDMMC_GetResponse>
 800e15c:	4602      	mov	r2, r0
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2104      	movs	r1, #4
 800e168:	4618      	mov	r0, r3
 800e16a:	f003 ff9c 	bl	80120a6 <SDMMC_GetResponse>
 800e16e:	4602      	mov	r2, r0
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2108      	movs	r1, #8
 800e17a:	4618      	mov	r0, r3
 800e17c:	f003 ff93 	bl	80120a6 <SDMMC_GetResponse>
 800e180:	4602      	mov	r2, r0
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	210c      	movs	r1, #12
 800e18c:	4618      	mov	r0, r3
 800e18e:	f003 ff8a 	bl	80120a6 <SDMMC_GetResponse>
 800e192:	4602      	mov	r2, r0
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2104      	movs	r1, #4
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f003 ff81 	bl	80120a6 <SDMMC_GetResponse>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	0d1a      	lsrs	r2, r3, #20
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e1ac:	f107 030c 	add.w	r3, r7, #12
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff fb8c 	bl	800d8d0 <HAL_SD_GetCardCSD>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1c2:	e00f      	b.n	800e1e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1cc:	041b      	lsls	r3, r3, #16
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f004 f893 	bl	80122fc <SDMMC_CmdSelDesel>
 800e1d6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <SD_InitCard+0x192>
  {
    return errorstate;
 800e1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e0:	e000      	b.n	800e1e4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3740      	adds	r7, #64	; 0x40
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4618      	mov	r0, r3
 800e206:	f004 f89c 	bl	8012342 <SDMMC_CmdGoIdleState>
 800e20a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	e072      	b.n	800e2fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f004 f8af 	bl	801237e <SDMMC_CmdOperCond>
 800e220:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e228:	d10d      	bne.n	800e246 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4618      	mov	r0, r3
 800e236:	f004 f884 	bl	8012342 <SDMMC_CmdGoIdleState>
 800e23a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d004      	beq.n	800e24c <SD_PowerON+0x60>
    {
      return errorstate;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	e05a      	b.n	800e2fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e250:	2b01      	cmp	r3, #1
 800e252:	d137      	bne.n	800e2c4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2100      	movs	r1, #0
 800e25a:	4618      	mov	r0, r3
 800e25c:	f004 f8af 	bl	80123be <SDMMC_CmdAppCommand>
 800e260:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d02d      	beq.n	800e2c4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e26c:	e046      	b.n	800e2fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2100      	movs	r1, #0
 800e274:	4618      	mov	r0, r3
 800e276:	f004 f8a2 	bl	80123be <SDMMC_CmdAppCommand>
 800e27a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	e03a      	b.n	800e2fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	491e      	ldr	r1, [pc, #120]	; (800e304 <SD_PowerON+0x118>)
 800e28c:	4618      	mov	r0, r3
 800e28e:	f004 f8b9 	bl	8012404 <SDMMC_CmdAppOperCommand>
 800e292:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e29a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e29e:	e02d      	b.n	800e2fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f003 fefd 	bl	80120a6 <SDMMC_GetResponse>
 800e2ac:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	0fdb      	lsrs	r3, r3, #31
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d101      	bne.n	800e2ba <SD_PowerON+0xce>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <SD_PowerON+0xd0>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	613b      	str	r3, [r7, #16]

    count++;
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d802      	bhi.n	800e2d4 <SD_PowerON+0xe8>
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0cc      	beq.n	800e26e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d902      	bls.n	800e2e4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e2de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2e2:	e00b      	b.n	800e2fc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	c1100000 	.word	0xc1100000

0800e308 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b08c      	sub	sp, #48	; 0x30
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e312:	f7f5 fbd9 	bl	8003ac8 <HAL_GetTick>
 800e316:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2100      	movs	r1, #0
 800e322:	4618      	mov	r0, r3
 800e324:	f003 febf 	bl	80120a6 <SDMMC_GetResponse>
 800e328:	4603      	mov	r3, r0
 800e32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e32e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e332:	d102      	bne.n	800e33a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e338:	e0b0      	b.n	800e49c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2140      	movs	r1, #64	; 0x40
 800e340:	4618      	mov	r0, r3
 800e342:	f003 feef 	bl	8012124 <SDMMC_CmdBlockLength>
 800e346:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	e0a0      	b.n	800e49c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e362:	041b      	lsls	r3, r3, #16
 800e364:	4619      	mov	r1, r3
 800e366:	4610      	mov	r0, r2
 800e368:	f004 f829 	bl	80123be <SDMMC_CmdAppCommand>
 800e36c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d005      	beq.n	800e380 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	e08d      	b.n	800e49c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e380:	f04f 33ff 	mov.w	r3, #4294967295
 800e384:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e386:	2340      	movs	r3, #64	; 0x40
 800e388:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e38a:	2360      	movs	r3, #96	; 0x60
 800e38c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e38e:	2302      	movs	r3, #2
 800e390:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e392:	2300      	movs	r3, #0
 800e394:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e396:	2301      	movs	r3, #1
 800e398:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f107 0208 	add.w	r2, r7, #8
 800e3a2:	4611      	mov	r1, r2
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f003 fe91 	bl	80120cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f004 f911 	bl	80125d6 <SDMMC_CmdStatusRegister>
 800e3b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3b6:	6a3b      	ldr	r3, [r7, #32]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d02b      	beq.n	800e414 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
 800e3c6:	e069      	b.n	800e49c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d013      	beq.n	800e3fe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3da:	e00d      	b.n	800e3f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f003 fdeb 	bl	8011fbc <SDMMC_ReadFIFO>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	601a      	str	r2, [r3, #0]
        pData++;
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	2b07      	cmp	r3, #7
 800e3fc:	d9ee      	bls.n	800e3dc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3fe:	f7f5 fb63 	bl	8003ac8 <HAL_GetTick>
 800e402:	4602      	mov	r2, r0
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	1ad3      	subs	r3, r2, r3
 800e408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40c:	d102      	bne.n	800e414 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e40e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e412:	e043      	b.n	800e49c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0d2      	beq.n	800e3c8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d001      	beq.n	800e434 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e430:	2308      	movs	r3, #8
 800e432:	e033      	b.n	800e49c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43a:	f003 0302 	and.w	r3, r3, #2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e442:	2302      	movs	r3, #2
 800e444:	e02a      	b.n	800e49c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44c:	f003 0320 	and.w	r3, r3, #32
 800e450:	2b00      	cmp	r3, #0
 800e452:	d017      	beq.n	800e484 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e454:	2320      	movs	r3, #32
 800e456:	e021      	b.n	800e49c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f003 fdad 	bl	8011fbc <SDMMC_ReadFIFO>
 800e462:	4602      	mov	r2, r0
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	601a      	str	r2, [r3, #0]
    pData++;
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	3304      	adds	r3, #4
 800e46c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e46e:	f7f5 fb2b 	bl	8003ac8 <HAL_GetTick>
 800e472:	4602      	mov	r2, r0
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47c:	d102      	bne.n	800e484 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e47e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e482:	e00b      	b.n	800e49c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1e2      	bne.n	800e458 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a03      	ldr	r2, [pc, #12]	; (800e4a4 <SD_SendSDStatus+0x19c>)
 800e498:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3730      	adds	r7, #48	; 0x30
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	18000f3a 	.word	0x18000f3a

0800e4a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e4b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4bc:	e018      	b.n	800e4f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c6:	041b      	lsls	r3, r3, #16
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f004 f860 	bl	8012590 <SDMMC_CmdSendStatus>
 800e4d0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	e009      	b.n	800e4f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2100      	movs	r1, #0
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f003 fddf 	bl	80120a6 <SDMMC_GetResponse>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e4ee:	2300      	movs	r3, #0
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	2300      	movs	r3, #0
 800e506:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2100      	movs	r1, #0
 800e50e:	4618      	mov	r0, r3
 800e510:	f003 fdc9 	bl	80120a6 <SDMMC_GetResponse>
 800e514:	4603      	mov	r3, r0
 800e516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e51a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e51e:	d102      	bne.n	800e526 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e524:	e02f      	b.n	800e586 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e526:	f107 030c 	add.w	r3, r7, #12
 800e52a:	4619      	mov	r1, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 f879 	bl	800e624 <SD_FindSCR>
 800e532:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	e023      	b.n	800e586 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e544:	2b00      	cmp	r3, #0
 800e546:	d01c      	beq.n	800e582 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e550:	041b      	lsls	r3, r3, #16
 800e552:	4619      	mov	r1, r3
 800e554:	4610      	mov	r0, r2
 800e556:	f003 ff32 	bl	80123be <SDMMC_CmdAppCommand>
 800e55a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	e00f      	b.n	800e586 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2102      	movs	r1, #2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f003 ff69 	bl	8012444 <SDMMC_CmdBusWidth>
 800e572:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	e003      	b.n	800e586 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e57e:	2300      	movs	r3, #0
 800e580:	e001      	b.n	800e586 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e582:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b086      	sub	sp, #24
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e596:	2300      	movs	r3, #0
 800e598:	60fb      	str	r3, [r7, #12]
 800e59a:	2300      	movs	r3, #0
 800e59c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f003 fd7e 	bl	80120a6 <SDMMC_GetResponse>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5b4:	d102      	bne.n	800e5bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e5b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5ba:	e02f      	b.n	800e61c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5bc:	f107 030c 	add.w	r3, r7, #12
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f82e 	bl	800e624 <SD_FindSCR>
 800e5c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d001      	beq.n	800e5d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	e023      	b.n	800e61c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d01c      	beq.n	800e618 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e6:	041b      	lsls	r3, r3, #16
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f003 fee7 	bl	80123be <SDMMC_CmdAppCommand>
 800e5f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	e00f      	b.n	800e61c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2100      	movs	r1, #0
 800e602:	4618      	mov	r0, r3
 800e604:	f003 ff1e 	bl	8012444 <SDMMC_CmdBusWidth>
 800e608:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	e003      	b.n	800e61c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e614:	2300      	movs	r3, #0
 800e616:	e001      	b.n	800e61c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e618:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3718      	adds	r7, #24
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08e      	sub	sp, #56	; 0x38
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e62e:	f7f5 fa4b 	bl	8003ac8 <HAL_GetTick>
 800e632:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e634:	2300      	movs	r3, #0
 800e636:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e638:	2300      	movs	r3, #0
 800e63a:	60bb      	str	r3, [r7, #8]
 800e63c:	2300      	movs	r3, #0
 800e63e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2108      	movs	r1, #8
 800e64a:	4618      	mov	r0, r3
 800e64c:	f003 fd6a 	bl	8012124 <SDMMC_CmdBlockLength>
 800e650:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	e0ad      	b.n	800e7b8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e664:	041b      	lsls	r3, r3, #16
 800e666:	4619      	mov	r1, r3
 800e668:	4610      	mov	r0, r2
 800e66a:	f003 fea8 	bl	80123be <SDMMC_CmdAppCommand>
 800e66e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	e09e      	b.n	800e7b8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e67a:	f04f 33ff 	mov.w	r3, #4294967295
 800e67e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e680:	2308      	movs	r3, #8
 800e682:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e684:	2330      	movs	r3, #48	; 0x30
 800e686:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e688:	2302      	movs	r3, #2
 800e68a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e690:	2301      	movs	r3, #1
 800e692:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f107 0210 	add.w	r2, r7, #16
 800e69c:	4611      	mov	r1, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f003 fd14 	bl	80120cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f003 feee 	bl	801248a <SDMMC_CmdSendSCR>
 800e6ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d027      	beq.n	800e706 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	e07e      	b.n	800e7b8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d113      	bne.n	800e6f0 <SD_FindSCR+0xcc>
 800e6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d110      	bne.n	800e6f0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f003 fc72 	bl	8011fbc <SDMMC_ReadFIFO>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f003 fc6b 	bl	8011fbc <SDMMC_ReadFIFO>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	60fb      	str	r3, [r7, #12]
      index++;
 800e6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6f0:	f7f5 f9ea 	bl	8003ac8 <HAL_GetTick>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fe:	d102      	bne.n	800e706 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e704:	e058      	b.n	800e7b8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e70c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e710:	4013      	ands	r3, r2
 800e712:	2b00      	cmp	r3, #0
 800e714:	d0d1      	beq.n	800e6ba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e71c:	f003 0308 	and.w	r3, r3, #8
 800e720:	2b00      	cmp	r3, #0
 800e722:	d005      	beq.n	800e730 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2208      	movs	r2, #8
 800e72a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e72c:	2308      	movs	r3, #8
 800e72e:	e043      	b.n	800e7b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e736:	f003 0302 	and.w	r3, r3, #2
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d005      	beq.n	800e74a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2202      	movs	r2, #2
 800e744:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e746:	2302      	movs	r3, #2
 800e748:	e036      	b.n	800e7b8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e750:	f003 0320 	and.w	r3, r3, #32
 800e754:	2b00      	cmp	r3, #0
 800e756:	d005      	beq.n	800e764 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2220      	movs	r2, #32
 800e75e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e760:	2320      	movs	r3, #32
 800e762:	e029      	b.n	800e7b8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a15      	ldr	r2, [pc, #84]	; (800e7c0 <SD_FindSCR+0x19c>)
 800e76a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	061a      	lsls	r2, r3, #24
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	021b      	lsls	r3, r3, #8
 800e774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e778:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	0a1b      	lsrs	r3, r3, #8
 800e77e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e782:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	0e1b      	lsrs	r3, r3, #24
 800e788:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	601a      	str	r2, [r3, #0]
    scr++;
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	3304      	adds	r3, #4
 800e792:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	061a      	lsls	r2, r3, #24
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	021b      	lsls	r3, r3, #8
 800e79c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	0a1b      	lsrs	r3, r3, #8
 800e7a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e7aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	0e1b      	lsrs	r3, r3, #24
 800e7b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3738      	adds	r7, #56	; 0x38
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	18000f3a 	.word	0x18000f3a

0800e7c4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7d6:	2b1f      	cmp	r3, #31
 800e7d8:	d936      	bls.n	800e848 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e7da:	2300      	movs	r3, #0
 800e7dc:	617b      	str	r3, [r7, #20]
 800e7de:	e027      	b.n	800e830 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f003 fbe9 	bl	8011fbc <SDMMC_ReadFIFO>
 800e7ea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	0a1b      	lsrs	r3, r3, #8
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	3301      	adds	r3, #1
 800e808:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	0c1b      	lsrs	r3, r3, #16
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	3301      	adds	r3, #1
 800e818:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	0e1b      	lsrs	r3, r3, #24
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	3301      	adds	r3, #1
 800e828:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	3301      	adds	r3, #1
 800e82e:	617b      	str	r3, [r7, #20]
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	2b07      	cmp	r3, #7
 800e834:	d9d4      	bls.n	800e7e0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e840:	f1a3 0220 	sub.w	r2, r3, #32
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e848:	bf00      	nop
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	69db      	ldr	r3, [r3, #28]
 800e85c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a1b      	ldr	r3, [r3, #32]
 800e862:	2b1f      	cmp	r3, #31
 800e864:	d93a      	bls.n	800e8dc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]
 800e86a:	e02b      	b.n	800e8c4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	3301      	adds	r3, #1
 800e876:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	021a      	lsls	r2, r3, #8
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4313      	orrs	r3, r2
 800e882:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	3301      	adds	r3, #1
 800e888:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	041a      	lsls	r2, r3, #16
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4313      	orrs	r3, r2
 800e894:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	3301      	adds	r3, #1
 800e89a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	061a      	lsls	r2, r3, #24
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f107 020c 	add.w	r2, r7, #12
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f003 fb8c 	bl	8011fd6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	617b      	str	r3, [r7, #20]
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	2b07      	cmp	r3, #7
 800e8c8:	d9d0      	bls.n	800e86c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a1b      	ldr	r3, [r3, #32]
 800e8d4:	f1a3 0220 	sub.w	r2, r3, #32
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	621a      	str	r2, [r3, #32]
  }
}
 800e8dc:	bf00      	nop
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e10f      	b.n	800eb66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a87      	ldr	r2, [pc, #540]	; (800eb70 <HAL_SPI_Init+0x23c>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00f      	beq.n	800e976 <HAL_SPI_Init+0x42>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a86      	ldr	r2, [pc, #536]	; (800eb74 <HAL_SPI_Init+0x240>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d00a      	beq.n	800e976 <HAL_SPI_Init+0x42>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a84      	ldr	r2, [pc, #528]	; (800eb78 <HAL_SPI_Init+0x244>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d005      	beq.n	800e976 <HAL_SPI_Init+0x42>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	2b0f      	cmp	r3, #15
 800e970:	d901      	bls.n	800e976 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	e0f7      	b.n	800eb66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 fd5a 	bl	800f430 <SPI_GetPacketSize>
 800e97c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a7b      	ldr	r2, [pc, #492]	; (800eb70 <HAL_SPI_Init+0x23c>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d00c      	beq.n	800e9a2 <HAL_SPI_Init+0x6e>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4a79      	ldr	r2, [pc, #484]	; (800eb74 <HAL_SPI_Init+0x240>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d007      	beq.n	800e9a2 <HAL_SPI_Init+0x6e>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a78      	ldr	r2, [pc, #480]	; (800eb78 <HAL_SPI_Init+0x244>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d002      	beq.n	800e9a2 <HAL_SPI_Init+0x6e>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b08      	cmp	r3, #8
 800e9a0:	d811      	bhi.n	800e9c6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9a6:	4a72      	ldr	r2, [pc, #456]	; (800eb70 <HAL_SPI_Init+0x23c>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d009      	beq.n	800e9c0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a70      	ldr	r2, [pc, #448]	; (800eb74 <HAL_SPI_Init+0x240>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d004      	beq.n	800e9c0 <HAL_SPI_Init+0x8c>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a6f      	ldr	r2, [pc, #444]	; (800eb78 <HAL_SPI_Init+0x244>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d104      	bne.n	800e9ca <HAL_SPI_Init+0x96>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b10      	cmp	r3, #16
 800e9c4:	d901      	bls.n	800e9ca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e0cd      	b.n	800eb66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7f4 fa8a 	bl	8002ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0201 	bic.w	r2, r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ea06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	699b      	ldr	r3, [r3, #24]
 800ea0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea10:	d119      	bne.n	800ea46 <HAL_SPI_Init+0x112>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea1a:	d103      	bne.n	800ea24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d008      	beq.n	800ea36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10c      	bne.n	800ea46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ea30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea34:	d107      	bne.n	800ea46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00f      	beq.n	800ea72 <HAL_SPI_Init+0x13e>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	2b06      	cmp	r3, #6
 800ea58:	d90b      	bls.n	800ea72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	601a      	str	r2, [r3, #0]
 800ea70:	e007      	b.n	800ea82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	69da      	ldr	r2, [r3, #28]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	431a      	orrs	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea94:	ea42 0103 	orr.w	r1, r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68da      	ldr	r2, [r3, #12]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	430a      	orrs	r2, r1
 800eaa2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaac:	431a      	orrs	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab2:	431a      	orrs	r2, r3
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	431a      	orrs	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	431a      	orrs	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	695b      	ldr	r3, [r3, #20]
 800eac4:	431a      	orrs	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	431a      	orrs	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ead6:	431a      	orrs	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	431a      	orrs	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eae2:	ea42 0103 	orr.w	r1, r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	430a      	orrs	r2, r1
 800eaf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d113      	bne.n	800eb22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f022 0201 	bic.w	r2, r2, #1
 800eb30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00a      	beq.n	800eb54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	430a      	orrs	r2, r1
 800eb52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	40013000 	.word	0x40013000
 800eb74:	40003800 	.word	0x40003800
 800eb78:	40003c00 	.word	0x40003c00

0800eb7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08a      	sub	sp, #40	; 0x28
 800eb80:	af02      	add	r7, sp, #8
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	603b      	str	r3, [r7, #0]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3320      	adds	r3, #32
 800eb92:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb94:	2300      	movs	r3, #0
 800eb96:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d101      	bne.n	800eba6 <HAL_SPI_Transmit+0x2a>
 800eba2:	2302      	movs	r3, #2
 800eba4:	e1e1      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ebae:	f7f4 ff8b 	bl	8003ac8 <HAL_GetTick>
 800ebb2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d007      	beq.n	800ebd0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebcc:	7efb      	ldrb	r3, [r7, #27]
 800ebce:	e1cc      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <HAL_SPI_Transmit+0x60>
 800ebd6:	88fb      	ldrh	r3, [r7, #6]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d107      	bne.n	800ebec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebe8:	7efb      	ldrb	r3, [r7, #27]
 800ebea:	e1be      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2203      	movs	r2, #3
 800ebf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	88fa      	ldrh	r2, [r7, #6]
 800ec06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	88fa      	ldrh	r2, [r7, #6]
 800ec0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec3c:	d108      	bne.n	800ec50 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	e009      	b.n	800ec64 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec62:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	685a      	ldr	r2, [r3, #4]
 800ec6a:	4b96      	ldr	r3, [pc, #600]	; (800eec4 <HAL_SPI_Transmit+0x348>)
 800ec6c:	4013      	ands	r3, r2
 800ec6e:	88f9      	ldrh	r1, [r7, #6]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	6812      	ldr	r2, [r2, #0]
 800ec74:	430b      	orrs	r3, r1
 800ec76:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f042 0201 	orr.w	r2, r2, #1
 800ec86:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec90:	d107      	bne.n	800eca2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eca0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	2b0f      	cmp	r3, #15
 800eca8:	d947      	bls.n	800ed3a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecaa:	e03f      	b.n	800ed2c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	695b      	ldr	r3, [r3, #20]
 800ecb2:	f003 0302 	and.w	r3, r3, #2
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d114      	bne.n	800ece4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6812      	ldr	r2, [r2, #0]
 800ecc4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecca:	1d1a      	adds	r2, r3, #4
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ece2:	e023      	b.n	800ed2c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ece4:	f7f4 fef0 	bl	8003ac8 <HAL_GetTick>
 800ece8:	4602      	mov	r2, r0
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d803      	bhi.n	800ecfc <HAL_SPI_Transmit+0x180>
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfa:	d102      	bne.n	800ed02 <HAL_SPI_Transmit+0x186>
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d114      	bne.n	800ed2c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f000 fac6 	bl	800f294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	e11e      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1b9      	bne.n	800ecac <HAL_SPI_Transmit+0x130>
 800ed38:	e0f1      	b.n	800ef1e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	2b07      	cmp	r3, #7
 800ed40:	f240 80e6 	bls.w	800ef10 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed44:	e05d      	b.n	800ee02 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	f003 0302 	and.w	r3, r3, #2
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d132      	bne.n	800edba <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d918      	bls.n	800ed92 <HAL_SPI_Transmit+0x216>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d014      	beq.n	800ed92 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6812      	ldr	r2, [r2, #0]
 800ed72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed78:	1d1a      	adds	r2, r3, #4
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	3b02      	subs	r3, #2
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed90:	e037      	b.n	800ee02 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed96:	881a      	ldrh	r2, [r3, #0]
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eda0:	1c9a      	adds	r2, r3, #2
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edac:	b29b      	uxth	r3, r3
 800edae:	3b01      	subs	r3, #1
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edb8:	e023      	b.n	800ee02 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edba:	f7f4 fe85 	bl	8003ac8 <HAL_GetTick>
 800edbe:	4602      	mov	r2, r0
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d803      	bhi.n	800edd2 <HAL_SPI_Transmit+0x256>
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd0:	d102      	bne.n	800edd8 <HAL_SPI_Transmit+0x25c>
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d114      	bne.n	800ee02 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f000 fa5b 	bl	800f294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2201      	movs	r2, #1
 800edfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e0b3      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d19b      	bne.n	800ed46 <HAL_SPI_Transmit+0x1ca>
 800ee0e:	e086      	b.n	800ef1e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	f003 0302 	and.w	r3, r3, #2
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d154      	bne.n	800eec8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d918      	bls.n	800ee5c <HAL_SPI_Transmit+0x2e0>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee2e:	2b40      	cmp	r3, #64	; 0x40
 800ee30:	d914      	bls.n	800ee5c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	6812      	ldr	r2, [r2, #0]
 800ee3c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee42:	1d1a      	adds	r2, r3, #4
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	3b04      	subs	r3, #4
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee5a:	e059      	b.n	800ef10 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d917      	bls.n	800ee98 <HAL_SPI_Transmit+0x31c>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d013      	beq.n	800ee98 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee74:	881a      	ldrh	r2, [r3, #0]
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee7e:	1c9a      	adds	r2, r3, #2
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	3b02      	subs	r3, #2
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee96:	e03b      	b.n	800ef10 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3320      	adds	r3, #32
 800eea2:	7812      	ldrb	r2, [r2, #0]
 800eea4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeaa:	1c5a      	adds	r2, r3, #1
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eec2:	e025      	b.n	800ef10 <HAL_SPI_Transmit+0x394>
 800eec4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eec8:	f7f4 fdfe 	bl	8003ac8 <HAL_GetTick>
 800eecc:	4602      	mov	r2, r0
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	683a      	ldr	r2, [r7, #0]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d803      	bhi.n	800eee0 <HAL_SPI_Transmit+0x364>
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d102      	bne.n	800eee6 <HAL_SPI_Transmit+0x36a>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d114      	bne.n	800ef10 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 f9d4 	bl	800f294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2200      	movs	r2, #0
 800eef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eefa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef0c:	2303      	movs	r3, #3
 800ef0e:	e02c      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f47f af79 	bne.w	800ee10 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2200      	movs	r2, #0
 800ef26:	2108      	movs	r1, #8
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f000 fa53 	bl	800f3d4 <SPI_WaitOnFlagUntilTimeout>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d007      	beq.n	800ef44 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef3a:	f043 0220 	orr.w	r2, r3, #32
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f000 f9a5 	bl	800f294 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ef64:	2301      	movs	r3, #1
 800ef66:	e000      	b.n	800ef6a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ef68:	7efb      	ldrb	r3, [r7, #27]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3720      	adds	r7, #32
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop

0800ef74 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	4613      	mov	r3, r2
 800ef82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3330      	adds	r3, #48	; 0x30
 800ef8e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d101      	bne.n	800ef9e <HAL_SPI_Receive+0x2a>
 800ef9a:	2302      	movs	r3, #2
 800ef9c:	e173      	b.n	800f286 <HAL_SPI_Receive+0x312>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efa6:	f7f4 fd8f 	bl	8003ac8 <HAL_GetTick>
 800efaa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d007      	beq.n	800efc8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800efb8:	2302      	movs	r3, #2
 800efba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efc4:	7ffb      	ldrb	r3, [r7, #31]
 800efc6:	e15e      	b.n	800f286 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d002      	beq.n	800efd4 <HAL_SPI_Receive+0x60>
 800efce:	88fb      	ldrh	r3, [r7, #6]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d107      	bne.n	800efe4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800efd4:	2301      	movs	r3, #1
 800efd6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efe0:	7ffb      	ldrb	r3, [r7, #31]
 800efe2:	e150      	b.n	800f286 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2204      	movs	r2, #4
 800efe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2200      	movs	r2, #0
 800eff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	88fa      	ldrh	r2, [r7, #6]
 800effe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	88fa      	ldrh	r2, [r7, #6]
 800f006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	689b      	ldr	r3, [r3, #8]
 800f030:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f034:	d108      	bne.n	800f048 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	e009      	b.n	800f05c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f05a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	4b8b      	ldr	r3, [pc, #556]	; (800f290 <HAL_SPI_Receive+0x31c>)
 800f064:	4013      	ands	r3, r2
 800f066:	88f9      	ldrh	r1, [r7, #6]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	6812      	ldr	r2, [r2, #0]
 800f06c:	430b      	orrs	r3, r1
 800f06e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f042 0201 	orr.w	r2, r2, #1
 800f07e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f088:	d107      	bne.n	800f09a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f098:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	2b0f      	cmp	r3, #15
 800f0a0:	d948      	bls.n	800f134 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0a2:	e040      	b.n	800f126 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	695a      	ldr	r2, [r3, #20]
 800f0aa:	f248 0308 	movw	r3, #32776	; 0x8008
 800f0ae:	4013      	ands	r3, r2
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d014      	beq.n	800f0de <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0be:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0c4:	1d1a      	adds	r2, r3, #4
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0dc:	e023      	b.n	800f126 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0de:	f7f4 fcf3 	bl	8003ac8 <HAL_GetTick>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	1ad3      	subs	r3, r2, r3
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d803      	bhi.n	800f0f6 <HAL_SPI_Receive+0x182>
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f4:	d102      	bne.n	800f0fc <HAL_SPI_Receive+0x188>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d114      	bne.n	800f126 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0fc:	68f8      	ldr	r0, [r7, #12]
 800f0fe:	f000 f8c9 	bl	800f294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f110:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f122:	2303      	movs	r3, #3
 800f124:	e0af      	b.n	800f286 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1b8      	bne.n	800f0a4 <HAL_SPI_Receive+0x130>
 800f132:	e095      	b.n	800f260 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	2b07      	cmp	r3, #7
 800f13a:	f240 808b 	bls.w	800f254 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f13e:	e03f      	b.n	800f1c0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	695b      	ldr	r3, [r3, #20]
 800f146:	f003 0301 	and.w	r3, r3, #1
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d114      	bne.n	800f178 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f152:	69ba      	ldr	r2, [r7, #24]
 800f154:	8812      	ldrh	r2, [r2, #0]
 800f156:	b292      	uxth	r2, r2
 800f158:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f15e:	1c9a      	adds	r2, r3, #2
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	3b01      	subs	r3, #1
 800f16e:	b29a      	uxth	r2, r3
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f176:	e023      	b.n	800f1c0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f178:	f7f4 fca6 	bl	8003ac8 <HAL_GetTick>
 800f17c:	4602      	mov	r2, r0
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d803      	bhi.n	800f190 <HAL_SPI_Receive+0x21c>
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18e:	d102      	bne.n	800f196 <HAL_SPI_Receive+0x222>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d114      	bne.n	800f1c0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f000 f87c 	bl	800f294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e062      	b.n	800f286 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1b9      	bne.n	800f140 <HAL_SPI_Receive+0x1cc>
 800f1cc:	e048      	b.n	800f260 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	695b      	ldr	r3, [r3, #20]
 800f1d4:	f003 0301 	and.w	r3, r3, #1
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d117      	bne.n	800f20c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1e8:	7812      	ldrb	r2, [r2, #0]
 800f1ea:	b2d2      	uxtb	r2, r2
 800f1ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	3b01      	subs	r3, #1
 800f202:	b29a      	uxth	r2, r3
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f20a:	e023      	b.n	800f254 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f20c:	f7f4 fc5c 	bl	8003ac8 <HAL_GetTick>
 800f210:	4602      	mov	r2, r0
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	683a      	ldr	r2, [r7, #0]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d803      	bhi.n	800f224 <HAL_SPI_Receive+0x2b0>
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f222:	d102      	bne.n	800f22a <HAL_SPI_Receive+0x2b6>
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d114      	bne.n	800f254 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f000 f832 	bl	800f294 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f23e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2201      	movs	r2, #1
 800f24c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f250:	2303      	movs	r3, #3
 800f252:	e018      	b.n	800f286 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d1b6      	bne.n	800f1ce <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f000 f817 	bl	800f294 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2200      	movs	r2, #0
 800f26a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e000      	b.n	800f286 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f284:	7ffb      	ldrb	r3, [r7, #31]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3720      	adds	r7, #32
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	ffff0000 	.word	0xffff0000

0800f294 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	695b      	ldr	r3, [r3, #20]
 800f2a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	699a      	ldr	r2, [r3, #24]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f042 0208 	orr.w	r2, r2, #8
 800f2b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	699a      	ldr	r2, [r3, #24]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f042 0210 	orr.w	r2, r2, #16
 800f2c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f022 0201 	bic.w	r2, r2, #1
 800f2d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	6919      	ldr	r1, [r3, #16]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	4b3c      	ldr	r3, [pc, #240]	; (800f3d0 <SPI_CloseTransfer+0x13c>)
 800f2e0:	400b      	ands	r3, r1
 800f2e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	689a      	ldr	r2, [r3, #8]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	2b04      	cmp	r3, #4
 800f2fe:	d014      	beq.n	800f32a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f003 0320 	and.w	r3, r3, #32
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00f      	beq.n	800f32a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	699a      	ldr	r2, [r3, #24]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f042 0220 	orr.w	r2, r2, #32
 800f328:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b03      	cmp	r3, #3
 800f334:	d014      	beq.n	800f360 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00f      	beq.n	800f360 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f346:	f043 0204 	orr.w	r2, r3, #4
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	699a      	ldr	r2, [r3, #24]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f35e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00f      	beq.n	800f38a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f370:	f043 0201 	orr.w	r2, r3, #1
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	699a      	ldr	r2, [r3, #24]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f388:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00f      	beq.n	800f3b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f39a:	f043 0208 	orr.w	r2, r3, #8
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	699a      	ldr	r2, [r3, #24]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f3c4:	bf00      	nop
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	fffffc90 	.word	0xfffffc90

0800f3d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	603b      	str	r3, [r7, #0]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3e4:	e010      	b.n	800f408 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3e6:	f7f4 fb6f 	bl	8003ac8 <HAL_GetTick>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	1ad3      	subs	r3, r2, r3
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d803      	bhi.n	800f3fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fc:	d102      	bne.n	800f404 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d101      	bne.n	800f408 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f404:	2303      	movs	r3, #3
 800f406:	e00f      	b.n	800f428 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	695a      	ldr	r2, [r3, #20]
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	4013      	ands	r3, r2
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	429a      	cmp	r2, r3
 800f416:	bf0c      	ite	eq
 800f418:	2301      	moveq	r3, #1
 800f41a:	2300      	movne	r3, #0
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	461a      	mov	r2, r3
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	429a      	cmp	r2, r3
 800f424:	d0df      	beq.n	800f3e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f43c:	095b      	lsrs	r3, r3, #5
 800f43e:	3301      	adds	r3, #1
 800f440:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	3301      	adds	r3, #1
 800f448:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	3307      	adds	r3, #7
 800f44e:	08db      	lsrs	r3, r3, #3
 800f450:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	fb02 f303 	mul.w	r3, r2, r3
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3714      	adds	r7, #20
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d101      	bne.n	800f478 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	e049      	b.n	800f50c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	2b00      	cmp	r3, #0
 800f482:	d106      	bne.n	800f492 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7f3 ff85 	bl	800339c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2202      	movs	r2, #2
 800f496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	f000 ff29 	bl	80102fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2201      	movs	r2, #1
 800f4de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2201      	movs	r2, #1
 800f506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f50a:	2300      	movs	r3, #0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	e049      	b.n	800f5ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d106      	bne.n	800f540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7f3 fd98 	bl	8003070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3304      	adds	r3, #4
 800f550:	4619      	mov	r1, r3
 800f552:	4610      	mov	r0, r2
 800f554:	f000 fed2 	bl	80102fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2201      	movs	r2, #1
 800f58c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
	...

0800f5c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d109      	bne.n	800f5e8 <HAL_TIM_PWM_Start+0x24>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	bf14      	ite	ne
 800f5e0:	2301      	movne	r3, #1
 800f5e2:	2300      	moveq	r3, #0
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	e03c      	b.n	800f662 <HAL_TIM_PWM_Start+0x9e>
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2b04      	cmp	r3, #4
 800f5ec:	d109      	bne.n	800f602 <HAL_TIM_PWM_Start+0x3e>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	bf14      	ite	ne
 800f5fa:	2301      	movne	r3, #1
 800f5fc:	2300      	moveq	r3, #0
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	e02f      	b.n	800f662 <HAL_TIM_PWM_Start+0x9e>
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	2b08      	cmp	r3, #8
 800f606:	d109      	bne.n	800f61c <HAL_TIM_PWM_Start+0x58>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	2b01      	cmp	r3, #1
 800f612:	bf14      	ite	ne
 800f614:	2301      	movne	r3, #1
 800f616:	2300      	moveq	r3, #0
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	e022      	b.n	800f662 <HAL_TIM_PWM_Start+0x9e>
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	2b0c      	cmp	r3, #12
 800f620:	d109      	bne.n	800f636 <HAL_TIM_PWM_Start+0x72>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	bf14      	ite	ne
 800f62e:	2301      	movne	r3, #1
 800f630:	2300      	moveq	r3, #0
 800f632:	b2db      	uxtb	r3, r3
 800f634:	e015      	b.n	800f662 <HAL_TIM_PWM_Start+0x9e>
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b10      	cmp	r3, #16
 800f63a:	d109      	bne.n	800f650 <HAL_TIM_PWM_Start+0x8c>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b01      	cmp	r3, #1
 800f646:	bf14      	ite	ne
 800f648:	2301      	movne	r3, #1
 800f64a:	2300      	moveq	r3, #0
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	e008      	b.n	800f662 <HAL_TIM_PWM_Start+0x9e>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f656:	b2db      	uxtb	r3, r3
 800f658:	2b01      	cmp	r3, #1
 800f65a:	bf14      	ite	ne
 800f65c:	2301      	movne	r3, #1
 800f65e:	2300      	moveq	r3, #0
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e0ab      	b.n	800f7c2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d104      	bne.n	800f67a <HAL_TIM_PWM_Start+0xb6>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2202      	movs	r2, #2
 800f674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f678:	e023      	b.n	800f6c2 <HAL_TIM_PWM_Start+0xfe>
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2b04      	cmp	r3, #4
 800f67e:	d104      	bne.n	800f68a <HAL_TIM_PWM_Start+0xc6>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2202      	movs	r2, #2
 800f684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f688:	e01b      	b.n	800f6c2 <HAL_TIM_PWM_Start+0xfe>
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	2b08      	cmp	r3, #8
 800f68e:	d104      	bne.n	800f69a <HAL_TIM_PWM_Start+0xd6>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2202      	movs	r2, #2
 800f694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f698:	e013      	b.n	800f6c2 <HAL_TIM_PWM_Start+0xfe>
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2b0c      	cmp	r3, #12
 800f69e:	d104      	bne.n	800f6aa <HAL_TIM_PWM_Start+0xe6>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2202      	movs	r2, #2
 800f6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6a8:	e00b      	b.n	800f6c2 <HAL_TIM_PWM_Start+0xfe>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	2b10      	cmp	r3, #16
 800f6ae:	d104      	bne.n	800f6ba <HAL_TIM_PWM_Start+0xf6>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2202      	movs	r2, #2
 800f6b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6b8:	e003      	b.n	800f6c2 <HAL_TIM_PWM_Start+0xfe>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f001 f992 	bl	80109f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a3d      	ldr	r2, [pc, #244]	; (800f7cc <HAL_TIM_PWM_Start+0x208>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d013      	beq.n	800f702 <HAL_TIM_PWM_Start+0x13e>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4a3c      	ldr	r2, [pc, #240]	; (800f7d0 <HAL_TIM_PWM_Start+0x20c>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d00e      	beq.n	800f702 <HAL_TIM_PWM_Start+0x13e>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a3a      	ldr	r2, [pc, #232]	; (800f7d4 <HAL_TIM_PWM_Start+0x210>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d009      	beq.n	800f702 <HAL_TIM_PWM_Start+0x13e>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a39      	ldr	r2, [pc, #228]	; (800f7d8 <HAL_TIM_PWM_Start+0x214>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d004      	beq.n	800f702 <HAL_TIM_PWM_Start+0x13e>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a37      	ldr	r2, [pc, #220]	; (800f7dc <HAL_TIM_PWM_Start+0x218>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d101      	bne.n	800f706 <HAL_TIM_PWM_Start+0x142>
 800f702:	2301      	movs	r3, #1
 800f704:	e000      	b.n	800f708 <HAL_TIM_PWM_Start+0x144>
 800f706:	2300      	movs	r3, #0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d007      	beq.n	800f71c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f71a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a2a      	ldr	r2, [pc, #168]	; (800f7cc <HAL_TIM_PWM_Start+0x208>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d02c      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f72e:	d027      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a2a      	ldr	r2, [pc, #168]	; (800f7e0 <HAL_TIM_PWM_Start+0x21c>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d022      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4a29      	ldr	r2, [pc, #164]	; (800f7e4 <HAL_TIM_PWM_Start+0x220>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d01d      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a27      	ldr	r2, [pc, #156]	; (800f7e8 <HAL_TIM_PWM_Start+0x224>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d018      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4a1f      	ldr	r2, [pc, #124]	; (800f7d0 <HAL_TIM_PWM_Start+0x20c>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d013      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a23      	ldr	r2, [pc, #140]	; (800f7ec <HAL_TIM_PWM_Start+0x228>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d00e      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a1b      	ldr	r2, [pc, #108]	; (800f7d4 <HAL_TIM_PWM_Start+0x210>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d009      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a1f      	ldr	r2, [pc, #124]	; (800f7f0 <HAL_TIM_PWM_Start+0x22c>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d004      	beq.n	800f780 <HAL_TIM_PWM_Start+0x1bc>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a1e      	ldr	r2, [pc, #120]	; (800f7f4 <HAL_TIM_PWM_Start+0x230>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d115      	bne.n	800f7ac <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	689a      	ldr	r2, [r3, #8]
 800f786:	4b1c      	ldr	r3, [pc, #112]	; (800f7f8 <HAL_TIM_PWM_Start+0x234>)
 800f788:	4013      	ands	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b06      	cmp	r3, #6
 800f790:	d015      	beq.n	800f7be <HAL_TIM_PWM_Start+0x1fa>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f798:	d011      	beq.n	800f7be <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f042 0201 	orr.w	r2, r2, #1
 800f7a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7aa:	e008      	b.n	800f7be <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f042 0201 	orr.w	r2, r2, #1
 800f7ba:	601a      	str	r2, [r3, #0]
 800f7bc:	e000      	b.n	800f7c0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	40010000 	.word	0x40010000
 800f7d0:	40010400 	.word	0x40010400
 800f7d4:	40014000 	.word	0x40014000
 800f7d8:	40014400 	.word	0x40014400
 800f7dc:	40014800 	.word	0x40014800
 800f7e0:	40000400 	.word	0x40000400
 800f7e4:	40000800 	.word	0x40000800
 800f7e8:	40000c00 	.word	0x40000c00
 800f7ec:	40001800 	.word	0x40001800
 800f7f0:	4000e000 	.word	0x4000e000
 800f7f4:	4000e400 	.word	0x4000e400
 800f7f8:	00010007 	.word	0x00010007

0800f7fc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
 800f808:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d109      	bne.n	800f828 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	bf0c      	ite	eq
 800f820:	2301      	moveq	r3, #1
 800f822:	2300      	movne	r3, #0
 800f824:	b2db      	uxtb	r3, r3
 800f826:	e03c      	b.n	800f8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	2b04      	cmp	r3, #4
 800f82c:	d109      	bne.n	800f842 <HAL_TIM_PWM_Start_DMA+0x46>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b02      	cmp	r3, #2
 800f838:	bf0c      	ite	eq
 800f83a:	2301      	moveq	r3, #1
 800f83c:	2300      	movne	r3, #0
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	e02f      	b.n	800f8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	2b08      	cmp	r3, #8
 800f846:	d109      	bne.n	800f85c <HAL_TIM_PWM_Start_DMA+0x60>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b02      	cmp	r3, #2
 800f852:	bf0c      	ite	eq
 800f854:	2301      	moveq	r3, #1
 800f856:	2300      	movne	r3, #0
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	e022      	b.n	800f8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	2b0c      	cmp	r3, #12
 800f860:	d109      	bne.n	800f876 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	2b02      	cmp	r3, #2
 800f86c:	bf0c      	ite	eq
 800f86e:	2301      	moveq	r3, #1
 800f870:	2300      	movne	r3, #0
 800f872:	b2db      	uxtb	r3, r3
 800f874:	e015      	b.n	800f8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b10      	cmp	r3, #16
 800f87a:	d109      	bne.n	800f890 <HAL_TIM_PWM_Start_DMA+0x94>
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b02      	cmp	r3, #2
 800f886:	bf0c      	ite	eq
 800f888:	2301      	moveq	r3, #1
 800f88a:	2300      	movne	r3, #0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	e008      	b.n	800f8a2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b02      	cmp	r3, #2
 800f89a:	bf0c      	ite	eq
 800f89c:	2301      	moveq	r3, #1
 800f89e:	2300      	movne	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	e1ba      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d109      	bne.n	800f8c4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	bf0c      	ite	eq
 800f8bc:	2301      	moveq	r3, #1
 800f8be:	2300      	movne	r3, #0
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	e03c      	b.n	800f93e <HAL_TIM_PWM_Start_DMA+0x142>
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d109      	bne.n	800f8de <HAL_TIM_PWM_Start_DMA+0xe2>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	bf0c      	ite	eq
 800f8d6:	2301      	moveq	r3, #1
 800f8d8:	2300      	movne	r3, #0
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	e02f      	b.n	800f93e <HAL_TIM_PWM_Start_DMA+0x142>
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	2b08      	cmp	r3, #8
 800f8e2:	d109      	bne.n	800f8f8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	bf0c      	ite	eq
 800f8f0:	2301      	moveq	r3, #1
 800f8f2:	2300      	movne	r3, #0
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	e022      	b.n	800f93e <HAL_TIM_PWM_Start_DMA+0x142>
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	2b0c      	cmp	r3, #12
 800f8fc:	d109      	bne.n	800f912 <HAL_TIM_PWM_Start_DMA+0x116>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f904:	b2db      	uxtb	r3, r3
 800f906:	2b01      	cmp	r3, #1
 800f908:	bf0c      	ite	eq
 800f90a:	2301      	moveq	r3, #1
 800f90c:	2300      	movne	r3, #0
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	e015      	b.n	800f93e <HAL_TIM_PWM_Start_DMA+0x142>
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2b10      	cmp	r3, #16
 800f916:	d109      	bne.n	800f92c <HAL_TIM_PWM_Start_DMA+0x130>
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	2b01      	cmp	r3, #1
 800f922:	bf0c      	ite	eq
 800f924:	2301      	moveq	r3, #1
 800f926:	2300      	movne	r3, #0
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	e008      	b.n	800f93e <HAL_TIM_PWM_Start_DMA+0x142>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f932:	b2db      	uxtb	r3, r3
 800f934:	2b01      	cmp	r3, #1
 800f936:	bf0c      	ite	eq
 800f938:	2301      	moveq	r3, #1
 800f93a:	2300      	movne	r3, #0
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d034      	beq.n	800f9ac <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <HAL_TIM_PWM_Start_DMA+0x152>
 800f948:	887b      	ldrh	r3, [r7, #2]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f94e:	2301      	movs	r3, #1
 800f950:	e166      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d104      	bne.n	800f962 <HAL_TIM_PWM_Start_DMA+0x166>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2202      	movs	r2, #2
 800f95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f960:	e026      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	2b04      	cmp	r3, #4
 800f966:	d104      	bne.n	800f972 <HAL_TIM_PWM_Start_DMA+0x176>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2202      	movs	r2, #2
 800f96c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f970:	e01e      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	2b08      	cmp	r3, #8
 800f976:	d104      	bne.n	800f982 <HAL_TIM_PWM_Start_DMA+0x186>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2202      	movs	r2, #2
 800f97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f980:	e016      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	2b0c      	cmp	r3, #12
 800f986:	d104      	bne.n	800f992 <HAL_TIM_PWM_Start_DMA+0x196>
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2202      	movs	r2, #2
 800f98c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f990:	e00e      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2b10      	cmp	r3, #16
 800f996:	d104      	bne.n	800f9a2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2202      	movs	r2, #2
 800f99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9a0:	e006      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2202      	movs	r2, #2
 800f9a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9aa:	e001      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e137      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	2b0c      	cmp	r3, #12
 800f9b4:	f200 80ae 	bhi.w	800fb14 <HAL_TIM_PWM_Start_DMA+0x318>
 800f9b8:	a201      	add	r2, pc, #4	; (adr r2, 800f9c0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9be:	bf00      	nop
 800f9c0:	0800f9f5 	.word	0x0800f9f5
 800f9c4:	0800fb15 	.word	0x0800fb15
 800f9c8:	0800fb15 	.word	0x0800fb15
 800f9cc:	0800fb15 	.word	0x0800fb15
 800f9d0:	0800fa3d 	.word	0x0800fa3d
 800f9d4:	0800fb15 	.word	0x0800fb15
 800f9d8:	0800fb15 	.word	0x0800fb15
 800f9dc:	0800fb15 	.word	0x0800fb15
 800f9e0:	0800fa85 	.word	0x0800fa85
 800f9e4:	0800fb15 	.word	0x0800fb15
 800f9e8:	0800fb15 	.word	0x0800fb15
 800f9ec:	0800fb15 	.word	0x0800fb15
 800f9f0:	0800facd 	.word	0x0800facd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f8:	4a8b      	ldr	r2, [pc, #556]	; (800fc28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa00:	4a8a      	ldr	r2, [pc, #552]	; (800fc2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa08:	4a89      	ldr	r2, [pc, #548]	; (800fc30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fa10:	6879      	ldr	r1, [r7, #4]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	3334      	adds	r3, #52	; 0x34
 800fa18:	461a      	mov	r2, r3
 800fa1a:	887b      	ldrh	r3, [r7, #2]
 800fa1c:	f7f6 f872 	bl	8005b04 <HAL_DMA_Start_IT>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	e0fa      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68da      	ldr	r2, [r3, #12]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa38:	60da      	str	r2, [r3, #12]
      break;
 800fa3a:	e06e      	b.n	800fb1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa40:	4a79      	ldr	r2, [pc, #484]	; (800fc28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa48:	4a78      	ldr	r2, [pc, #480]	; (800fc2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa50:	4a77      	ldr	r2, [pc, #476]	; (800fc30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fa58:	6879      	ldr	r1, [r7, #4]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	3338      	adds	r3, #56	; 0x38
 800fa60:	461a      	mov	r2, r3
 800fa62:	887b      	ldrh	r3, [r7, #2]
 800fa64:	f7f6 f84e 	bl	8005b04 <HAL_DMA_Start_IT>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d001      	beq.n	800fa72 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e0d6      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68da      	ldr	r2, [r3, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa80:	60da      	str	r2, [r3, #12]
      break;
 800fa82:	e04a      	b.n	800fb1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa88:	4a67      	ldr	r2, [pc, #412]	; (800fc28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa90:	4a66      	ldr	r2, [pc, #408]	; (800fc2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa98:	4a65      	ldr	r2, [pc, #404]	; (800fc30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800faa0:	6879      	ldr	r1, [r7, #4]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	333c      	adds	r3, #60	; 0x3c
 800faa8:	461a      	mov	r2, r3
 800faaa:	887b      	ldrh	r3, [r7, #2]
 800faac:	f7f6 f82a 	bl	8005b04 <HAL_DMA_Start_IT>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fab6:	2301      	movs	r3, #1
 800fab8:	e0b2      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fac8:	60da      	str	r2, [r3, #12]
      break;
 800faca:	e026      	b.n	800fb1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad0:	4a55      	ldr	r2, [pc, #340]	; (800fc28 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fad2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad8:	4a54      	ldr	r2, [pc, #336]	; (800fc2c <HAL_TIM_PWM_Start_DMA+0x430>)
 800fada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae0:	4a53      	ldr	r2, [pc, #332]	; (800fc30 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fae2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fae8:	6879      	ldr	r1, [r7, #4]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3340      	adds	r3, #64	; 0x40
 800faf0:	461a      	mov	r2, r3
 800faf2:	887b      	ldrh	r3, [r7, #2]
 800faf4:	f7f6 f806 	bl	8005b04 <HAL_DMA_Start_IT>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d001      	beq.n	800fb02 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fafe:	2301      	movs	r3, #1
 800fb00:	e08e      	b.n	800fc20 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	68da      	ldr	r2, [r3, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fb10:	60da      	str	r2, [r3, #12]
      break;
 800fb12:	e002      	b.n	800fb1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fb14:	2301      	movs	r3, #1
 800fb16:	75fb      	strb	r3, [r7, #23]
      break;
 800fb18:	bf00      	nop
  }

  if (status == HAL_OK)
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d17e      	bne.n	800fc1e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2201      	movs	r2, #1
 800fb26:	68b9      	ldr	r1, [r7, #8]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 ff63 	bl	80109f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4a40      	ldr	r2, [pc, #256]	; (800fc34 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d013      	beq.n	800fb60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a3e      	ldr	r2, [pc, #248]	; (800fc38 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d00e      	beq.n	800fb60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a3d      	ldr	r2, [pc, #244]	; (800fc3c <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d009      	beq.n	800fb60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a3b      	ldr	r2, [pc, #236]	; (800fc40 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d004      	beq.n	800fb60 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a3a      	ldr	r2, [pc, #232]	; (800fc44 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d101      	bne.n	800fb64 <HAL_TIM_PWM_Start_DMA+0x368>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e000      	b.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x36a>
 800fb64:	2300      	movs	r3, #0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d007      	beq.n	800fb7a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a2d      	ldr	r2, [pc, #180]	; (800fc34 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d02c      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb8c:	d027      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a2d      	ldr	r2, [pc, #180]	; (800fc48 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d022      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a2b      	ldr	r2, [pc, #172]	; (800fc4c <HAL_TIM_PWM_Start_DMA+0x450>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d01d      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a2a      	ldr	r2, [pc, #168]	; (800fc50 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d018      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a21      	ldr	r2, [pc, #132]	; (800fc38 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d013      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a26      	ldr	r2, [pc, #152]	; (800fc54 <HAL_TIM_PWM_Start_DMA+0x458>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d00e      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a1d      	ldr	r2, [pc, #116]	; (800fc3c <HAL_TIM_PWM_Start_DMA+0x440>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d009      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a22      	ldr	r2, [pc, #136]	; (800fc58 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d004      	beq.n	800fbde <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a20      	ldr	r2, [pc, #128]	; (800fc5c <HAL_TIM_PWM_Start_DMA+0x460>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d115      	bne.n	800fc0a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	689a      	ldr	r2, [r3, #8]
 800fbe4:	4b1e      	ldr	r3, [pc, #120]	; (800fc60 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b06      	cmp	r3, #6
 800fbee:	d015      	beq.n	800fc1c <HAL_TIM_PWM_Start_DMA+0x420>
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbf6:	d011      	beq.n	800fc1c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f042 0201 	orr.w	r2, r2, #1
 800fc06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc08:	e008      	b.n	800fc1c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f042 0201 	orr.w	r2, r2, #1
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	e000      	b.n	800fc1e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3718      	adds	r7, #24
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	080101eb 	.word	0x080101eb
 800fc2c:	08010293 	.word	0x08010293
 800fc30:	08010159 	.word	0x08010159
 800fc34:	40010000 	.word	0x40010000
 800fc38:	40010400 	.word	0x40010400
 800fc3c:	40014000 	.word	0x40014000
 800fc40:	40014400 	.word	0x40014400
 800fc44:	40014800 	.word	0x40014800
 800fc48:	40000400 	.word	0x40000400
 800fc4c:	40000800 	.word	0x40000800
 800fc50:	40000c00 	.word	0x40000c00
 800fc54:	40001800 	.word	0x40001800
 800fc58:	4000e000 	.word	0x4000e000
 800fc5c:	4000e400 	.word	0x4000e400
 800fc60:	00010007 	.word	0x00010007

0800fc64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	f003 0302 	and.w	r3, r3, #2
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d122      	bne.n	800fcc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	f003 0302 	and.w	r3, r3, #2
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d11b      	bne.n	800fcc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f06f 0202 	mvn.w	r2, #2
 800fc90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2201      	movs	r2, #1
 800fc96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	699b      	ldr	r3, [r3, #24]
 800fc9e:	f003 0303 	and.w	r3, r3, #3
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d003      	beq.n	800fcae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 fa24 	bl	80100f4 <HAL_TIM_IC_CaptureCallback>
 800fcac:	e005      	b.n	800fcba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 fa16 	bl	80100e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fa27 	bl	8010108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	f003 0304 	and.w	r3, r3, #4
 800fcca:	2b04      	cmp	r3, #4
 800fccc:	d122      	bne.n	800fd14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	f003 0304 	and.w	r3, r3, #4
 800fcd8:	2b04      	cmp	r3, #4
 800fcda:	d11b      	bne.n	800fd14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f06f 0204 	mvn.w	r2, #4
 800fce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2202      	movs	r2, #2
 800fcea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	699b      	ldr	r3, [r3, #24]
 800fcf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d003      	beq.n	800fd02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f9fa 	bl	80100f4 <HAL_TIM_IC_CaptureCallback>
 800fd00:	e005      	b.n	800fd0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f9ec 	bl	80100e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 f9fd 	bl	8010108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2200      	movs	r2, #0
 800fd12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	f003 0308 	and.w	r3, r3, #8
 800fd1e:	2b08      	cmp	r3, #8
 800fd20:	d122      	bne.n	800fd68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	f003 0308 	and.w	r3, r3, #8
 800fd2c:	2b08      	cmp	r3, #8
 800fd2e:	d11b      	bne.n	800fd68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f06f 0208 	mvn.w	r2, #8
 800fd38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2204      	movs	r2, #4
 800fd3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	f003 0303 	and.w	r3, r3, #3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 f9d0 	bl	80100f4 <HAL_TIM_IC_CaptureCallback>
 800fd54:	e005      	b.n	800fd62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f9c2 	bl	80100e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f9d3 	bl	8010108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	f003 0310 	and.w	r3, r3, #16
 800fd72:	2b10      	cmp	r3, #16
 800fd74:	d122      	bne.n	800fdbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	f003 0310 	and.w	r3, r3, #16
 800fd80:	2b10      	cmp	r3, #16
 800fd82:	d11b      	bne.n	800fdbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f06f 0210 	mvn.w	r2, #16
 800fd8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2208      	movs	r2, #8
 800fd92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	69db      	ldr	r3, [r3, #28]
 800fd9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d003      	beq.n	800fdaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 f9a6 	bl	80100f4 <HAL_TIM_IC_CaptureCallback>
 800fda8:	e005      	b.n	800fdb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 f998 	bl	80100e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 f9a9 	bl	8010108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	f003 0301 	and.w	r3, r3, #1
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d10e      	bne.n	800fde8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d107      	bne.n	800fde8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f06f 0201 	mvn.w	r2, #1
 800fde0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f972 	bl	80100cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdf2:	2b80      	cmp	r3, #128	; 0x80
 800fdf4:	d10e      	bne.n	800fe14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe00:	2b80      	cmp	r3, #128	; 0x80
 800fe02:	d107      	bne.n	800fe14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fe0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 febc 	bl	8010b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe22:	d10e      	bne.n	800fe42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe2e:	2b80      	cmp	r3, #128	; 0x80
 800fe30:	d107      	bne.n	800fe42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fe3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 feaf 	bl	8010ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe4c:	2b40      	cmp	r3, #64	; 0x40
 800fe4e:	d10e      	bne.n	800fe6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe5a:	2b40      	cmp	r3, #64	; 0x40
 800fe5c:	d107      	bne.n	800fe6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f961 	bl	8010130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	f003 0320 	and.w	r3, r3, #32
 800fe78:	2b20      	cmp	r3, #32
 800fe7a:	d10e      	bne.n	800fe9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	f003 0320 	and.w	r3, r3, #32
 800fe86:	2b20      	cmp	r3, #32
 800fe88:	d107      	bne.n	800fe9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f06f 0220 	mvn.w	r2, #32
 800fe92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 fe6f 	bl	8010b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe9a:	bf00      	nop
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b086      	sub	sp, #24
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800feb0:	2300      	movs	r3, #0
 800feb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800feba:	2b01      	cmp	r3, #1
 800febc:	d101      	bne.n	800fec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800febe:	2302      	movs	r3, #2
 800fec0:	e0ff      	b.n	80100c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2201      	movs	r2, #1
 800fec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b14      	cmp	r3, #20
 800fece:	f200 80f0 	bhi.w	80100b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fed2:	a201      	add	r2, pc, #4	; (adr r2, 800fed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed8:	0800ff2d 	.word	0x0800ff2d
 800fedc:	080100b3 	.word	0x080100b3
 800fee0:	080100b3 	.word	0x080100b3
 800fee4:	080100b3 	.word	0x080100b3
 800fee8:	0800ff6d 	.word	0x0800ff6d
 800feec:	080100b3 	.word	0x080100b3
 800fef0:	080100b3 	.word	0x080100b3
 800fef4:	080100b3 	.word	0x080100b3
 800fef8:	0800ffaf 	.word	0x0800ffaf
 800fefc:	080100b3 	.word	0x080100b3
 800ff00:	080100b3 	.word	0x080100b3
 800ff04:	080100b3 	.word	0x080100b3
 800ff08:	0800ffef 	.word	0x0800ffef
 800ff0c:	080100b3 	.word	0x080100b3
 800ff10:	080100b3 	.word	0x080100b3
 800ff14:	080100b3 	.word	0x080100b3
 800ff18:	08010031 	.word	0x08010031
 800ff1c:	080100b3 	.word	0x080100b3
 800ff20:	080100b3 	.word	0x080100b3
 800ff24:	080100b3 	.word	0x080100b3
 800ff28:	08010071 	.word	0x08010071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	68b9      	ldr	r1, [r7, #8]
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 fa88 	bl	8010448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	699a      	ldr	r2, [r3, #24]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f042 0208 	orr.w	r2, r2, #8
 800ff46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	699a      	ldr	r2, [r3, #24]
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f022 0204 	bic.w	r2, r2, #4
 800ff56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	6999      	ldr	r1, [r3, #24]
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	691a      	ldr	r2, [r3, #16]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	430a      	orrs	r2, r1
 800ff68:	619a      	str	r2, [r3, #24]
      break;
 800ff6a:	e0a5      	b.n	80100b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 faf8 	bl	8010568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	699a      	ldr	r2, [r3, #24]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	699a      	ldr	r2, [r3, #24]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	6999      	ldr	r1, [r3, #24]
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	021a      	lsls	r2, r3, #8
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	619a      	str	r2, [r3, #24]
      break;
 800ffac:	e084      	b.n	80100b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68b9      	ldr	r1, [r7, #8]
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f000 fb61 	bl	801067c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	69da      	ldr	r2, [r3, #28]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f042 0208 	orr.w	r2, r2, #8
 800ffc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	69da      	ldr	r2, [r3, #28]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f022 0204 	bic.w	r2, r2, #4
 800ffd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	69d9      	ldr	r1, [r3, #28]
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	691a      	ldr	r2, [r3, #16]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	430a      	orrs	r2, r1
 800ffea:	61da      	str	r2, [r3, #28]
      break;
 800ffec:	e064      	b.n	80100b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	68b9      	ldr	r1, [r7, #8]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f000 fbc9 	bl	801078c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	69da      	ldr	r2, [r3, #28]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	69da      	ldr	r2, [r3, #28]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	69d9      	ldr	r1, [r3, #28]
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	021a      	lsls	r2, r3, #8
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	430a      	orrs	r2, r1
 801002c:	61da      	str	r2, [r3, #28]
      break;
 801002e:	e043      	b.n	80100b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fc12 	bl	8010860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f042 0208 	orr.w	r2, r2, #8
 801004a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f022 0204 	bic.w	r2, r2, #4
 801005a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	691a      	ldr	r2, [r3, #16]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	430a      	orrs	r2, r1
 801006c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801006e:	e023      	b.n	80100b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	68b9      	ldr	r1, [r7, #8]
 8010076:	4618      	mov	r0, r3
 8010078:	f000 fc56 	bl	8010928 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801008a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801009a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	021a      	lsls	r2, r3, #8
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	430a      	orrs	r2, r1
 80100ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80100b0:	e002      	b.n	80100b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80100b2:	2301      	movs	r3, #1
 80100b4:	75fb      	strb	r3, [r7, #23]
      break;
 80100b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3718      	adds	r7, #24
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop

080100cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010164:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	429a      	cmp	r2, r3
 801016e:	d107      	bne.n	8010180 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2201      	movs	r2, #1
 8010174:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2201      	movs	r2, #1
 801017a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801017e:	e02a      	b.n	80101d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	429a      	cmp	r2, r3
 8010188:	d107      	bne.n	801019a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2202      	movs	r2, #2
 801018e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2201      	movs	r2, #1
 8010194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010198:	e01d      	b.n	80101d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d107      	bne.n	80101b4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2204      	movs	r2, #4
 80101a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101b2:	e010      	b.n	80101d6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d107      	bne.n	80101ce <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2208      	movs	r2, #8
 80101c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101cc:	e003      	b.n	80101d6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2201      	movs	r2, #1
 80101d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80101d6:	68f8      	ldr	r0, [r7, #12]
 80101d8:	f7ff ffb4 	bl	8010144 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2200      	movs	r2, #0
 80101e0:	771a      	strb	r2, [r3, #28]
}
 80101e2:	bf00      	nop
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b084      	sub	sp, #16
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d10b      	bne.n	801021a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2201      	movs	r2, #1
 8010206:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d136      	bne.n	801027e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2201      	movs	r2, #1
 8010214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010218:	e031      	b.n	801027e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	429a      	cmp	r2, r3
 8010222:	d10b      	bne.n	801023c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2202      	movs	r2, #2
 8010228:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	69db      	ldr	r3, [r3, #28]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d125      	bne.n	801027e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2201      	movs	r2, #1
 8010236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801023a:	e020      	b.n	801027e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	429a      	cmp	r2, r3
 8010244:	d10b      	bne.n	801025e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2204      	movs	r2, #4
 801024a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d114      	bne.n	801027e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801025c:	e00f      	b.n	801027e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	429a      	cmp	r2, r3
 8010266:	d10a      	bne.n	801027e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2208      	movs	r2, #8
 801026c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	69db      	ldr	r3, [r3, #28]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d103      	bne.n	801027e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f7ff ff42 	bl	8010108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2200      	movs	r2, #0
 8010288:	771a      	strb	r2, [r3, #28]
}
 801028a:	bf00      	nop
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010292:	b580      	push	{r7, lr}
 8010294:	b084      	sub	sp, #16
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801029e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d103      	bne.n	80102b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2201      	movs	r2, #1
 80102ae:	771a      	strb	r2, [r3, #28]
 80102b0:	e019      	b.n	80102e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d103      	bne.n	80102c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2202      	movs	r2, #2
 80102c0:	771a      	strb	r2, [r3, #28]
 80102c2:	e010      	b.n	80102e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d103      	bne.n	80102d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2204      	movs	r2, #4
 80102d2:	771a      	strb	r2, [r3, #28]
 80102d4:	e007      	b.n	80102e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d102      	bne.n	80102e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2208      	movs	r2, #8
 80102e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f7ff ff18 	bl	801011c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	771a      	strb	r2, [r3, #28]
}
 80102f2:	bf00      	nop
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
	...

080102fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4a44      	ldr	r2, [pc, #272]	; (8010420 <TIM_Base_SetConfig+0x124>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d013      	beq.n	801033c <TIM_Base_SetConfig+0x40>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801031a:	d00f      	beq.n	801033c <TIM_Base_SetConfig+0x40>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4a41      	ldr	r2, [pc, #260]	; (8010424 <TIM_Base_SetConfig+0x128>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d00b      	beq.n	801033c <TIM_Base_SetConfig+0x40>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4a40      	ldr	r2, [pc, #256]	; (8010428 <TIM_Base_SetConfig+0x12c>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d007      	beq.n	801033c <TIM_Base_SetConfig+0x40>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	4a3f      	ldr	r2, [pc, #252]	; (801042c <TIM_Base_SetConfig+0x130>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d003      	beq.n	801033c <TIM_Base_SetConfig+0x40>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	4a3e      	ldr	r2, [pc, #248]	; (8010430 <TIM_Base_SetConfig+0x134>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d108      	bne.n	801034e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	4313      	orrs	r3, r2
 801034c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4a33      	ldr	r2, [pc, #204]	; (8010420 <TIM_Base_SetConfig+0x124>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d027      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801035c:	d023      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a30      	ldr	r2, [pc, #192]	; (8010424 <TIM_Base_SetConfig+0x128>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d01f      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4a2f      	ldr	r2, [pc, #188]	; (8010428 <TIM_Base_SetConfig+0x12c>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d01b      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4a2e      	ldr	r2, [pc, #184]	; (801042c <TIM_Base_SetConfig+0x130>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d017      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4a2d      	ldr	r2, [pc, #180]	; (8010430 <TIM_Base_SetConfig+0x134>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d013      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4a2c      	ldr	r2, [pc, #176]	; (8010434 <TIM_Base_SetConfig+0x138>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d00f      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4a2b      	ldr	r2, [pc, #172]	; (8010438 <TIM_Base_SetConfig+0x13c>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d00b      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4a2a      	ldr	r2, [pc, #168]	; (801043c <TIM_Base_SetConfig+0x140>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d007      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4a29      	ldr	r2, [pc, #164]	; (8010440 <TIM_Base_SetConfig+0x144>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d003      	beq.n	80103a6 <TIM_Base_SetConfig+0xaa>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4a28      	ldr	r2, [pc, #160]	; (8010444 <TIM_Base_SetConfig+0x148>)
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d108      	bne.n	80103b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	4313      	orrs	r3, r2
 80103b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	695b      	ldr	r3, [r3, #20]
 80103c2:	4313      	orrs	r3, r2
 80103c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	689a      	ldr	r2, [r3, #8]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a10      	ldr	r2, [pc, #64]	; (8010420 <TIM_Base_SetConfig+0x124>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d00f      	beq.n	8010404 <TIM_Base_SetConfig+0x108>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a12      	ldr	r2, [pc, #72]	; (8010430 <TIM_Base_SetConfig+0x134>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d00b      	beq.n	8010404 <TIM_Base_SetConfig+0x108>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a11      	ldr	r2, [pc, #68]	; (8010434 <TIM_Base_SetConfig+0x138>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d007      	beq.n	8010404 <TIM_Base_SetConfig+0x108>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	4a10      	ldr	r2, [pc, #64]	; (8010438 <TIM_Base_SetConfig+0x13c>)
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d003      	beq.n	8010404 <TIM_Base_SetConfig+0x108>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a0f      	ldr	r2, [pc, #60]	; (801043c <TIM_Base_SetConfig+0x140>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d103      	bne.n	801040c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	691a      	ldr	r2, [r3, #16]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	615a      	str	r2, [r3, #20]
}
 8010412:	bf00      	nop
 8010414:	3714      	adds	r7, #20
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	40010000 	.word	0x40010000
 8010424:	40000400 	.word	0x40000400
 8010428:	40000800 	.word	0x40000800
 801042c:	40000c00 	.word	0x40000c00
 8010430:	40010400 	.word	0x40010400
 8010434:	40014000 	.word	0x40014000
 8010438:	40014400 	.word	0x40014400
 801043c:	40014800 	.word	0x40014800
 8010440:	4000e000 	.word	0x4000e000
 8010444:	4000e400 	.word	0x4000e400

08010448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010448:	b480      	push	{r7}
 801044a:	b087      	sub	sp, #28
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6a1b      	ldr	r3, [r3, #32]
 8010456:	f023 0201 	bic.w	r2, r3, #1
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a1b      	ldr	r3, [r3, #32]
 8010462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	699b      	ldr	r3, [r3, #24]
 801046e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	4b37      	ldr	r3, [pc, #220]	; (8010550 <TIM_OC1_SetConfig+0x108>)
 8010474:	4013      	ands	r3, r2
 8010476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f023 0303 	bic.w	r3, r3, #3
 801047e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	4313      	orrs	r3, r2
 8010488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	f023 0302 	bic.w	r3, r3, #2
 8010490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	4313      	orrs	r3, r2
 801049a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4a2d      	ldr	r2, [pc, #180]	; (8010554 <TIM_OC1_SetConfig+0x10c>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d00f      	beq.n	80104c4 <TIM_OC1_SetConfig+0x7c>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4a2c      	ldr	r2, [pc, #176]	; (8010558 <TIM_OC1_SetConfig+0x110>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d00b      	beq.n	80104c4 <TIM_OC1_SetConfig+0x7c>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	4a2b      	ldr	r2, [pc, #172]	; (801055c <TIM_OC1_SetConfig+0x114>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d007      	beq.n	80104c4 <TIM_OC1_SetConfig+0x7c>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4a2a      	ldr	r2, [pc, #168]	; (8010560 <TIM_OC1_SetConfig+0x118>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d003      	beq.n	80104c4 <TIM_OC1_SetConfig+0x7c>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	4a29      	ldr	r2, [pc, #164]	; (8010564 <TIM_OC1_SetConfig+0x11c>)
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d10c      	bne.n	80104de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	f023 0308 	bic.w	r3, r3, #8
 80104ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	697a      	ldr	r2, [r7, #20]
 80104d2:	4313      	orrs	r3, r2
 80104d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	f023 0304 	bic.w	r3, r3, #4
 80104dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a1c      	ldr	r2, [pc, #112]	; (8010554 <TIM_OC1_SetConfig+0x10c>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d00f      	beq.n	8010506 <TIM_OC1_SetConfig+0xbe>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a1b      	ldr	r2, [pc, #108]	; (8010558 <TIM_OC1_SetConfig+0x110>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d00b      	beq.n	8010506 <TIM_OC1_SetConfig+0xbe>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a1a      	ldr	r2, [pc, #104]	; (801055c <TIM_OC1_SetConfig+0x114>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d007      	beq.n	8010506 <TIM_OC1_SetConfig+0xbe>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4a19      	ldr	r2, [pc, #100]	; (8010560 <TIM_OC1_SetConfig+0x118>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d003      	beq.n	8010506 <TIM_OC1_SetConfig+0xbe>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a18      	ldr	r2, [pc, #96]	; (8010564 <TIM_OC1_SetConfig+0x11c>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d111      	bne.n	801052a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801050c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	695b      	ldr	r3, [r3, #20]
 801051a:	693a      	ldr	r2, [r7, #16]
 801051c:	4313      	orrs	r3, r2
 801051e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	699b      	ldr	r3, [r3, #24]
 8010524:	693a      	ldr	r2, [r7, #16]
 8010526:	4313      	orrs	r3, r2
 8010528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	693a      	ldr	r2, [r7, #16]
 801052e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	685a      	ldr	r2, [r3, #4]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	621a      	str	r2, [r3, #32]
}
 8010544:	bf00      	nop
 8010546:	371c      	adds	r7, #28
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	fffeff8f 	.word	0xfffeff8f
 8010554:	40010000 	.word	0x40010000
 8010558:	40010400 	.word	0x40010400
 801055c:	40014000 	.word	0x40014000
 8010560:	40014400 	.word	0x40014400
 8010564:	40014800 	.word	0x40014800

08010568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010568:	b480      	push	{r7}
 801056a:	b087      	sub	sp, #28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	f023 0210 	bic.w	r2, r3, #16
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a1b      	ldr	r3, [r3, #32]
 8010582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	699b      	ldr	r3, [r3, #24]
 801058e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	4b34      	ldr	r3, [pc, #208]	; (8010664 <TIM_OC2_SetConfig+0xfc>)
 8010594:	4013      	ands	r3, r2
 8010596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801059e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	021b      	lsls	r3, r3, #8
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	4313      	orrs	r3, r2
 80105aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	f023 0320 	bic.w	r3, r3, #32
 80105b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	011b      	lsls	r3, r3, #4
 80105ba:	697a      	ldr	r2, [r7, #20]
 80105bc:	4313      	orrs	r3, r2
 80105be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4a29      	ldr	r2, [pc, #164]	; (8010668 <TIM_OC2_SetConfig+0x100>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d003      	beq.n	80105d0 <TIM_OC2_SetConfig+0x68>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4a28      	ldr	r2, [pc, #160]	; (801066c <TIM_OC2_SetConfig+0x104>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d10d      	bne.n	80105ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	011b      	lsls	r3, r3, #4
 80105de:	697a      	ldr	r2, [r7, #20]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4a1e      	ldr	r2, [pc, #120]	; (8010668 <TIM_OC2_SetConfig+0x100>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d00f      	beq.n	8010614 <TIM_OC2_SetConfig+0xac>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a1d      	ldr	r2, [pc, #116]	; (801066c <TIM_OC2_SetConfig+0x104>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d00b      	beq.n	8010614 <TIM_OC2_SetConfig+0xac>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a1c      	ldr	r2, [pc, #112]	; (8010670 <TIM_OC2_SetConfig+0x108>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d007      	beq.n	8010614 <TIM_OC2_SetConfig+0xac>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	4a1b      	ldr	r2, [pc, #108]	; (8010674 <TIM_OC2_SetConfig+0x10c>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d003      	beq.n	8010614 <TIM_OC2_SetConfig+0xac>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a1a      	ldr	r2, [pc, #104]	; (8010678 <TIM_OC2_SetConfig+0x110>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d113      	bne.n	801063c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801061a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	695b      	ldr	r3, [r3, #20]
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	693a      	ldr	r2, [r7, #16]
 801062c:	4313      	orrs	r3, r2
 801062e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	4313      	orrs	r3, r2
 801063a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	693a      	ldr	r2, [r7, #16]
 8010640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68fa      	ldr	r2, [r7, #12]
 8010646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	685a      	ldr	r2, [r3, #4]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	621a      	str	r2, [r3, #32]
}
 8010656:	bf00      	nop
 8010658:	371c      	adds	r7, #28
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	feff8fff 	.word	0xfeff8fff
 8010668:	40010000 	.word	0x40010000
 801066c:	40010400 	.word	0x40010400
 8010670:	40014000 	.word	0x40014000
 8010674:	40014400 	.word	0x40014400
 8010678:	40014800 	.word	0x40014800

0801067c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801067c:	b480      	push	{r7}
 801067e:	b087      	sub	sp, #28
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80106a4:	68fa      	ldr	r2, [r7, #12]
 80106a6:	4b33      	ldr	r3, [pc, #204]	; (8010774 <TIM_OC3_SetConfig+0xf8>)
 80106a8:	4013      	ands	r3, r2
 80106aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f023 0303 	bic.w	r3, r3, #3
 80106b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	4313      	orrs	r3, r2
 80106bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80106c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	689b      	ldr	r3, [r3, #8]
 80106ca:	021b      	lsls	r3, r3, #8
 80106cc:	697a      	ldr	r2, [r7, #20]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a28      	ldr	r2, [pc, #160]	; (8010778 <TIM_OC3_SetConfig+0xfc>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d003      	beq.n	80106e2 <TIM_OC3_SetConfig+0x66>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a27      	ldr	r2, [pc, #156]	; (801077c <TIM_OC3_SetConfig+0x100>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d10d      	bne.n	80106fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	021b      	lsls	r3, r3, #8
 80106f0:	697a      	ldr	r2, [r7, #20]
 80106f2:	4313      	orrs	r3, r2
 80106f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4a1d      	ldr	r2, [pc, #116]	; (8010778 <TIM_OC3_SetConfig+0xfc>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d00f      	beq.n	8010726 <TIM_OC3_SetConfig+0xaa>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4a1c      	ldr	r2, [pc, #112]	; (801077c <TIM_OC3_SetConfig+0x100>)
 801070a:	4293      	cmp	r3, r2
 801070c:	d00b      	beq.n	8010726 <TIM_OC3_SetConfig+0xaa>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4a1b      	ldr	r2, [pc, #108]	; (8010780 <TIM_OC3_SetConfig+0x104>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d007      	beq.n	8010726 <TIM_OC3_SetConfig+0xaa>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4a1a      	ldr	r2, [pc, #104]	; (8010784 <TIM_OC3_SetConfig+0x108>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d003      	beq.n	8010726 <TIM_OC3_SetConfig+0xaa>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4a19      	ldr	r2, [pc, #100]	; (8010788 <TIM_OC3_SetConfig+0x10c>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d113      	bne.n	801074e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801072c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	695b      	ldr	r3, [r3, #20]
 801073a:	011b      	lsls	r3, r3, #4
 801073c:	693a      	ldr	r2, [r7, #16]
 801073e:	4313      	orrs	r3, r2
 8010740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	699b      	ldr	r3, [r3, #24]
 8010746:	011b      	lsls	r3, r3, #4
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	4313      	orrs	r3, r2
 801074c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	693a      	ldr	r2, [r7, #16]
 8010752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	685a      	ldr	r2, [r3, #4]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	697a      	ldr	r2, [r7, #20]
 8010766:	621a      	str	r2, [r3, #32]
}
 8010768:	bf00      	nop
 801076a:	371c      	adds	r7, #28
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr
 8010774:	fffeff8f 	.word	0xfffeff8f
 8010778:	40010000 	.word	0x40010000
 801077c:	40010400 	.word	0x40010400
 8010780:	40014000 	.word	0x40014000
 8010784:	40014400 	.word	0x40014400
 8010788:	40014800 	.word	0x40014800

0801078c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801078c:	b480      	push	{r7}
 801078e:	b087      	sub	sp, #28
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6a1b      	ldr	r3, [r3, #32]
 801079a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6a1b      	ldr	r3, [r3, #32]
 80107a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	69db      	ldr	r3, [r3, #28]
 80107b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	4b24      	ldr	r3, [pc, #144]	; (8010848 <TIM_OC4_SetConfig+0xbc>)
 80107b8:	4013      	ands	r3, r2
 80107ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	021b      	lsls	r3, r3, #8
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	4313      	orrs	r3, r2
 80107ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	031b      	lsls	r3, r3, #12
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	4313      	orrs	r3, r2
 80107e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4a19      	ldr	r2, [pc, #100]	; (801084c <TIM_OC4_SetConfig+0xc0>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d00f      	beq.n	801080c <TIM_OC4_SetConfig+0x80>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4a18      	ldr	r2, [pc, #96]	; (8010850 <TIM_OC4_SetConfig+0xc4>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d00b      	beq.n	801080c <TIM_OC4_SetConfig+0x80>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	4a17      	ldr	r2, [pc, #92]	; (8010854 <TIM_OC4_SetConfig+0xc8>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d007      	beq.n	801080c <TIM_OC4_SetConfig+0x80>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	4a16      	ldr	r2, [pc, #88]	; (8010858 <TIM_OC4_SetConfig+0xcc>)
 8010800:	4293      	cmp	r3, r2
 8010802:	d003      	beq.n	801080c <TIM_OC4_SetConfig+0x80>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4a15      	ldr	r2, [pc, #84]	; (801085c <TIM_OC4_SetConfig+0xd0>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d109      	bne.n	8010820 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	695b      	ldr	r3, [r3, #20]
 8010818:	019b      	lsls	r3, r3, #6
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	4313      	orrs	r3, r2
 801081e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	693a      	ldr	r2, [r7, #16]
 8010838:	621a      	str	r2, [r3, #32]
}
 801083a:	bf00      	nop
 801083c:	371c      	adds	r7, #28
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	feff8fff 	.word	0xfeff8fff
 801084c:	40010000 	.word	0x40010000
 8010850:	40010400 	.word	0x40010400
 8010854:	40014000 	.word	0x40014000
 8010858:	40014400 	.word	0x40014400
 801085c:	40014800 	.word	0x40014800

08010860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010860:	b480      	push	{r7}
 8010862:	b087      	sub	sp, #28
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a1b      	ldr	r3, [r3, #32]
 801087a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	4b21      	ldr	r3, [pc, #132]	; (8010910 <TIM_OC5_SetConfig+0xb0>)
 801088c:	4013      	ands	r3, r2
 801088e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	4313      	orrs	r3, r2
 8010898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80108a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	041b      	lsls	r3, r3, #16
 80108a8:	693a      	ldr	r2, [r7, #16]
 80108aa:	4313      	orrs	r3, r2
 80108ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	4a18      	ldr	r2, [pc, #96]	; (8010914 <TIM_OC5_SetConfig+0xb4>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d00f      	beq.n	80108d6 <TIM_OC5_SetConfig+0x76>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4a17      	ldr	r2, [pc, #92]	; (8010918 <TIM_OC5_SetConfig+0xb8>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d00b      	beq.n	80108d6 <TIM_OC5_SetConfig+0x76>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4a16      	ldr	r2, [pc, #88]	; (801091c <TIM_OC5_SetConfig+0xbc>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d007      	beq.n	80108d6 <TIM_OC5_SetConfig+0x76>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	4a15      	ldr	r2, [pc, #84]	; (8010920 <TIM_OC5_SetConfig+0xc0>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d003      	beq.n	80108d6 <TIM_OC5_SetConfig+0x76>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4a14      	ldr	r2, [pc, #80]	; (8010924 <TIM_OC5_SetConfig+0xc4>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d109      	bne.n	80108ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	695b      	ldr	r3, [r3, #20]
 80108e2:	021b      	lsls	r3, r3, #8
 80108e4:	697a      	ldr	r2, [r7, #20]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685a      	ldr	r2, [r3, #4]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	693a      	ldr	r2, [r7, #16]
 8010902:	621a      	str	r2, [r3, #32]
}
 8010904:	bf00      	nop
 8010906:	371c      	adds	r7, #28
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr
 8010910:	fffeff8f 	.word	0xfffeff8f
 8010914:	40010000 	.word	0x40010000
 8010918:	40010400 	.word	0x40010400
 801091c:	40014000 	.word	0x40014000
 8010920:	40014400 	.word	0x40014400
 8010924:	40014800 	.word	0x40014800

08010928 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010928:	b480      	push	{r7}
 801092a:	b087      	sub	sp, #28
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a1b      	ldr	r3, [r3, #32]
 8010936:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6a1b      	ldr	r3, [r3, #32]
 8010942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801094e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010950:	68fa      	ldr	r2, [r7, #12]
 8010952:	4b22      	ldr	r3, [pc, #136]	; (80109dc <TIM_OC6_SetConfig+0xb4>)
 8010954:	4013      	ands	r3, r2
 8010956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	021b      	lsls	r3, r3, #8
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	4313      	orrs	r3, r2
 8010962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801096a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	051b      	lsls	r3, r3, #20
 8010972:	693a      	ldr	r2, [r7, #16]
 8010974:	4313      	orrs	r3, r2
 8010976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	4a19      	ldr	r2, [pc, #100]	; (80109e0 <TIM_OC6_SetConfig+0xb8>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d00f      	beq.n	80109a0 <TIM_OC6_SetConfig+0x78>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a18      	ldr	r2, [pc, #96]	; (80109e4 <TIM_OC6_SetConfig+0xbc>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d00b      	beq.n	80109a0 <TIM_OC6_SetConfig+0x78>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4a17      	ldr	r2, [pc, #92]	; (80109e8 <TIM_OC6_SetConfig+0xc0>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d007      	beq.n	80109a0 <TIM_OC6_SetConfig+0x78>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a16      	ldr	r2, [pc, #88]	; (80109ec <TIM_OC6_SetConfig+0xc4>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d003      	beq.n	80109a0 <TIM_OC6_SetConfig+0x78>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a15      	ldr	r2, [pc, #84]	; (80109f0 <TIM_OC6_SetConfig+0xc8>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d109      	bne.n	80109b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80109a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	695b      	ldr	r3, [r3, #20]
 80109ac:	029b      	lsls	r3, r3, #10
 80109ae:	697a      	ldr	r2, [r7, #20]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	685a      	ldr	r2, [r3, #4]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	693a      	ldr	r2, [r7, #16]
 80109cc:	621a      	str	r2, [r3, #32]
}
 80109ce:	bf00      	nop
 80109d0:	371c      	adds	r7, #28
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	feff8fff 	.word	0xfeff8fff
 80109e0:	40010000 	.word	0x40010000
 80109e4:	40010400 	.word	0x40010400
 80109e8:	40014000 	.word	0x40014000
 80109ec:	40014400 	.word	0x40014400
 80109f0:	40014800 	.word	0x40014800

080109f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b087      	sub	sp, #28
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	f003 031f 	and.w	r3, r3, #31
 8010a06:	2201      	movs	r2, #1
 8010a08:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6a1a      	ldr	r2, [r3, #32]
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	43db      	mvns	r3, r3
 8010a16:	401a      	ands	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6a1a      	ldr	r2, [r3, #32]
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	f003 031f 	and.w	r3, r3, #31
 8010a26:	6879      	ldr	r1, [r7, #4]
 8010a28:	fa01 f303 	lsl.w	r3, r1, r3
 8010a2c:	431a      	orrs	r2, r3
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	621a      	str	r2, [r3, #32]
}
 8010a32:	bf00      	nop
 8010a34:	371c      	adds	r7, #28
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr
	...

08010a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d101      	bne.n	8010a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a54:	2302      	movs	r3, #2
 8010a56:	e077      	b.n	8010b48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2202      	movs	r2, #2
 8010a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a35      	ldr	r2, [pc, #212]	; (8010b54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d004      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a34      	ldr	r2, [pc, #208]	; (8010b58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d108      	bne.n	8010a9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	68fa      	ldr	r2, [r7, #12]
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a25      	ldr	r2, [pc, #148]	; (8010b54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d02c      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010aca:	d027      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a22      	ldr	r2, [pc, #136]	; (8010b5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d022      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	4a21      	ldr	r2, [pc, #132]	; (8010b60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d01d      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4a1f      	ldr	r2, [pc, #124]	; (8010b64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d018      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	4a1a      	ldr	r2, [pc, #104]	; (8010b58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010af0:	4293      	cmp	r3, r2
 8010af2:	d013      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4a1b      	ldr	r2, [pc, #108]	; (8010b68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d00e      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a1a      	ldr	r2, [pc, #104]	; (8010b6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d009      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	4a18      	ldr	r2, [pc, #96]	; (8010b70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d004      	beq.n	8010b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a17      	ldr	r2, [pc, #92]	; (8010b74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d10c      	bne.n	8010b36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	68ba      	ldr	r2, [r7, #8]
 8010b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010b46:	2300      	movs	r3, #0
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3714      	adds	r7, #20
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	40010000 	.word	0x40010000
 8010b58:	40010400 	.word	0x40010400
 8010b5c:	40000400 	.word	0x40000400
 8010b60:	40000800 	.word	0x40000800
 8010b64:	40000c00 	.word	0x40000c00
 8010b68:	40001800 	.word	0x40001800
 8010b6c:	40014000 	.word	0x40014000
 8010b70:	4000e000 	.word	0x4000e000
 8010b74:	4000e400 	.word	0x4000e400

08010b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b80:	bf00      	nop
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr

08010b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b94:	bf00      	nop
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e042      	b.n	8010c4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d106      	bne.n	8010bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7f2 fcc5 	bl	8003568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2224      	movs	r2, #36	; 0x24
 8010be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f022 0201 	bic.w	r2, r2, #1
 8010bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 f82c 	bl	8010c54 <UART_SetConfig>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b01      	cmp	r3, #1
 8010c00:	d101      	bne.n	8010c06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e022      	b.n	8010c4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d002      	beq.n	8010c14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 fe8c 	bl	801192c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	689a      	ldr	r2, [r3, #8]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f042 0201 	orr.w	r2, r2, #1
 8010c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 ff13 	bl	8011a70 <UART_CheckIdleState>
 8010c4a:	4603      	mov	r3, r0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c58:	b092      	sub	sp, #72	; 0x48
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	689a      	ldr	r2, [r3, #8]
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	691b      	ldr	r3, [r3, #16]
 8010c6c:	431a      	orrs	r2, r3
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	695b      	ldr	r3, [r3, #20]
 8010c72:	431a      	orrs	r2, r3
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	69db      	ldr	r3, [r3, #28]
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	4bbe      	ldr	r3, [pc, #760]	; (8010f7c <UART_SetConfig+0x328>)
 8010c84:	4013      	ands	r3, r2
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c8c:	430b      	orrs	r3, r1
 8010c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	68da      	ldr	r2, [r3, #12]
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	430a      	orrs	r2, r1
 8010ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4ab3      	ldr	r2, [pc, #716]	; (8010f80 <UART_SetConfig+0x32c>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d004      	beq.n	8010cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	6a1b      	ldr	r3, [r3, #32]
 8010cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	689a      	ldr	r2, [r3, #8]
 8010cc6:	4baf      	ldr	r3, [pc, #700]	; (8010f84 <UART_SetConfig+0x330>)
 8010cc8:	4013      	ands	r3, r2
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	6812      	ldr	r2, [r2, #0]
 8010cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010cd0:	430b      	orrs	r3, r1
 8010cd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cda:	f023 010f 	bic.w	r1, r3, #15
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	430a      	orrs	r2, r1
 8010ce8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4aa6      	ldr	r2, [pc, #664]	; (8010f88 <UART_SetConfig+0x334>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d177      	bne.n	8010de4 <UART_SetConfig+0x190>
 8010cf4:	4ba5      	ldr	r3, [pc, #660]	; (8010f8c <UART_SetConfig+0x338>)
 8010cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cfc:	2b28      	cmp	r3, #40	; 0x28
 8010cfe:	d86d      	bhi.n	8010ddc <UART_SetConfig+0x188>
 8010d00:	a201      	add	r2, pc, #4	; (adr r2, 8010d08 <UART_SetConfig+0xb4>)
 8010d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d06:	bf00      	nop
 8010d08:	08010dad 	.word	0x08010dad
 8010d0c:	08010ddd 	.word	0x08010ddd
 8010d10:	08010ddd 	.word	0x08010ddd
 8010d14:	08010ddd 	.word	0x08010ddd
 8010d18:	08010ddd 	.word	0x08010ddd
 8010d1c:	08010ddd 	.word	0x08010ddd
 8010d20:	08010ddd 	.word	0x08010ddd
 8010d24:	08010ddd 	.word	0x08010ddd
 8010d28:	08010db5 	.word	0x08010db5
 8010d2c:	08010ddd 	.word	0x08010ddd
 8010d30:	08010ddd 	.word	0x08010ddd
 8010d34:	08010ddd 	.word	0x08010ddd
 8010d38:	08010ddd 	.word	0x08010ddd
 8010d3c:	08010ddd 	.word	0x08010ddd
 8010d40:	08010ddd 	.word	0x08010ddd
 8010d44:	08010ddd 	.word	0x08010ddd
 8010d48:	08010dbd 	.word	0x08010dbd
 8010d4c:	08010ddd 	.word	0x08010ddd
 8010d50:	08010ddd 	.word	0x08010ddd
 8010d54:	08010ddd 	.word	0x08010ddd
 8010d58:	08010ddd 	.word	0x08010ddd
 8010d5c:	08010ddd 	.word	0x08010ddd
 8010d60:	08010ddd 	.word	0x08010ddd
 8010d64:	08010ddd 	.word	0x08010ddd
 8010d68:	08010dc5 	.word	0x08010dc5
 8010d6c:	08010ddd 	.word	0x08010ddd
 8010d70:	08010ddd 	.word	0x08010ddd
 8010d74:	08010ddd 	.word	0x08010ddd
 8010d78:	08010ddd 	.word	0x08010ddd
 8010d7c:	08010ddd 	.word	0x08010ddd
 8010d80:	08010ddd 	.word	0x08010ddd
 8010d84:	08010ddd 	.word	0x08010ddd
 8010d88:	08010dcd 	.word	0x08010dcd
 8010d8c:	08010ddd 	.word	0x08010ddd
 8010d90:	08010ddd 	.word	0x08010ddd
 8010d94:	08010ddd 	.word	0x08010ddd
 8010d98:	08010ddd 	.word	0x08010ddd
 8010d9c:	08010ddd 	.word	0x08010ddd
 8010da0:	08010ddd 	.word	0x08010ddd
 8010da4:	08010ddd 	.word	0x08010ddd
 8010da8:	08010dd5 	.word	0x08010dd5
 8010dac:	2301      	movs	r3, #1
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e326      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010db4:	2304      	movs	r3, #4
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e322      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e31e      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010dc4:	2310      	movs	r3, #16
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e31a      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010dcc:	2320      	movs	r3, #32
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e316      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e312      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010ddc:	2380      	movs	r3, #128	; 0x80
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e30e      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a69      	ldr	r2, [pc, #420]	; (8010f90 <UART_SetConfig+0x33c>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d130      	bne.n	8010e50 <UART_SetConfig+0x1fc>
 8010dee:	4b67      	ldr	r3, [pc, #412]	; (8010f8c <UART_SetConfig+0x338>)
 8010df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010df2:	f003 0307 	and.w	r3, r3, #7
 8010df6:	2b05      	cmp	r3, #5
 8010df8:	d826      	bhi.n	8010e48 <UART_SetConfig+0x1f4>
 8010dfa:	a201      	add	r2, pc, #4	; (adr r2, 8010e00 <UART_SetConfig+0x1ac>)
 8010dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e00:	08010e19 	.word	0x08010e19
 8010e04:	08010e21 	.word	0x08010e21
 8010e08:	08010e29 	.word	0x08010e29
 8010e0c:	08010e31 	.word	0x08010e31
 8010e10:	08010e39 	.word	0x08010e39
 8010e14:	08010e41 	.word	0x08010e41
 8010e18:	2300      	movs	r3, #0
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1e:	e2f0      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e20:	2304      	movs	r3, #4
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e26:	e2ec      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e28:	2308      	movs	r3, #8
 8010e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2e:	e2e8      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e30:	2310      	movs	r3, #16
 8010e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e36:	e2e4      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e38:	2320      	movs	r3, #32
 8010e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3e:	e2e0      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e40:	2340      	movs	r3, #64	; 0x40
 8010e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e46:	e2dc      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e48:	2380      	movs	r3, #128	; 0x80
 8010e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4e:	e2d8      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a4f      	ldr	r2, [pc, #316]	; (8010f94 <UART_SetConfig+0x340>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d130      	bne.n	8010ebc <UART_SetConfig+0x268>
 8010e5a:	4b4c      	ldr	r3, [pc, #304]	; (8010f8c <UART_SetConfig+0x338>)
 8010e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e5e:	f003 0307 	and.w	r3, r3, #7
 8010e62:	2b05      	cmp	r3, #5
 8010e64:	d826      	bhi.n	8010eb4 <UART_SetConfig+0x260>
 8010e66:	a201      	add	r2, pc, #4	; (adr r2, 8010e6c <UART_SetConfig+0x218>)
 8010e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e6c:	08010e85 	.word	0x08010e85
 8010e70:	08010e8d 	.word	0x08010e8d
 8010e74:	08010e95 	.word	0x08010e95
 8010e78:	08010e9d 	.word	0x08010e9d
 8010e7c:	08010ea5 	.word	0x08010ea5
 8010e80:	08010ead 	.word	0x08010ead
 8010e84:	2300      	movs	r3, #0
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e2ba      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e8c:	2304      	movs	r3, #4
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e2b6      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e94:	2308      	movs	r3, #8
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9a:	e2b2      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010e9c:	2310      	movs	r3, #16
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea2:	e2ae      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010ea4:	2320      	movs	r3, #32
 8010ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eaa:	e2aa      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010eac:	2340      	movs	r3, #64	; 0x40
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e2a6      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010eb4:	2380      	movs	r3, #128	; 0x80
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e2a2      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4a35      	ldr	r2, [pc, #212]	; (8010f98 <UART_SetConfig+0x344>)
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d130      	bne.n	8010f28 <UART_SetConfig+0x2d4>
 8010ec6:	4b31      	ldr	r3, [pc, #196]	; (8010f8c <UART_SetConfig+0x338>)
 8010ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eca:	f003 0307 	and.w	r3, r3, #7
 8010ece:	2b05      	cmp	r3, #5
 8010ed0:	d826      	bhi.n	8010f20 <UART_SetConfig+0x2cc>
 8010ed2:	a201      	add	r2, pc, #4	; (adr r2, 8010ed8 <UART_SetConfig+0x284>)
 8010ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed8:	08010ef1 	.word	0x08010ef1
 8010edc:	08010ef9 	.word	0x08010ef9
 8010ee0:	08010f01 	.word	0x08010f01
 8010ee4:	08010f09 	.word	0x08010f09
 8010ee8:	08010f11 	.word	0x08010f11
 8010eec:	08010f19 	.word	0x08010f19
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef6:	e284      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010ef8:	2304      	movs	r3, #4
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efe:	e280      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f00:	2308      	movs	r3, #8
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f06:	e27c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f08:	2310      	movs	r3, #16
 8010f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0e:	e278      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f10:	2320      	movs	r3, #32
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f16:	e274      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f18:	2340      	movs	r3, #64	; 0x40
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e270      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f20:	2380      	movs	r3, #128	; 0x80
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e26c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a1b      	ldr	r2, [pc, #108]	; (8010f9c <UART_SetConfig+0x348>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d142      	bne.n	8010fb8 <UART_SetConfig+0x364>
 8010f32:	4b16      	ldr	r3, [pc, #88]	; (8010f8c <UART_SetConfig+0x338>)
 8010f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f36:	f003 0307 	and.w	r3, r3, #7
 8010f3a:	2b05      	cmp	r3, #5
 8010f3c:	d838      	bhi.n	8010fb0 <UART_SetConfig+0x35c>
 8010f3e:	a201      	add	r2, pc, #4	; (adr r2, 8010f44 <UART_SetConfig+0x2f0>)
 8010f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f44:	08010f5d 	.word	0x08010f5d
 8010f48:	08010f65 	.word	0x08010f65
 8010f4c:	08010f6d 	.word	0x08010f6d
 8010f50:	08010f75 	.word	0x08010f75
 8010f54:	08010fa1 	.word	0x08010fa1
 8010f58:	08010fa9 	.word	0x08010fa9
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f62:	e24e      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f64:	2304      	movs	r3, #4
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e24a      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f6c:	2308      	movs	r3, #8
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e246      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f74:	2310      	movs	r3, #16
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e242      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010f7c:	cfff69f3 	.word	0xcfff69f3
 8010f80:	58000c00 	.word	0x58000c00
 8010f84:	11fff4ff 	.word	0x11fff4ff
 8010f88:	40011000 	.word	0x40011000
 8010f8c:	58024400 	.word	0x58024400
 8010f90:	40004400 	.word	0x40004400
 8010f94:	40004800 	.word	0x40004800
 8010f98:	40004c00 	.word	0x40004c00
 8010f9c:	40005000 	.word	0x40005000
 8010fa0:	2320      	movs	r3, #32
 8010fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa6:	e22c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010fa8:	2340      	movs	r3, #64	; 0x40
 8010faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fae:	e228      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010fb0:	2380      	movs	r3, #128	; 0x80
 8010fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb6:	e224      	b.n	8011402 <UART_SetConfig+0x7ae>
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4ab1      	ldr	r2, [pc, #708]	; (8011284 <UART_SetConfig+0x630>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d176      	bne.n	80110b0 <UART_SetConfig+0x45c>
 8010fc2:	4bb1      	ldr	r3, [pc, #708]	; (8011288 <UART_SetConfig+0x634>)
 8010fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fca:	2b28      	cmp	r3, #40	; 0x28
 8010fcc:	d86c      	bhi.n	80110a8 <UART_SetConfig+0x454>
 8010fce:	a201      	add	r2, pc, #4	; (adr r2, 8010fd4 <UART_SetConfig+0x380>)
 8010fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd4:	08011079 	.word	0x08011079
 8010fd8:	080110a9 	.word	0x080110a9
 8010fdc:	080110a9 	.word	0x080110a9
 8010fe0:	080110a9 	.word	0x080110a9
 8010fe4:	080110a9 	.word	0x080110a9
 8010fe8:	080110a9 	.word	0x080110a9
 8010fec:	080110a9 	.word	0x080110a9
 8010ff0:	080110a9 	.word	0x080110a9
 8010ff4:	08011081 	.word	0x08011081
 8010ff8:	080110a9 	.word	0x080110a9
 8010ffc:	080110a9 	.word	0x080110a9
 8011000:	080110a9 	.word	0x080110a9
 8011004:	080110a9 	.word	0x080110a9
 8011008:	080110a9 	.word	0x080110a9
 801100c:	080110a9 	.word	0x080110a9
 8011010:	080110a9 	.word	0x080110a9
 8011014:	08011089 	.word	0x08011089
 8011018:	080110a9 	.word	0x080110a9
 801101c:	080110a9 	.word	0x080110a9
 8011020:	080110a9 	.word	0x080110a9
 8011024:	080110a9 	.word	0x080110a9
 8011028:	080110a9 	.word	0x080110a9
 801102c:	080110a9 	.word	0x080110a9
 8011030:	080110a9 	.word	0x080110a9
 8011034:	08011091 	.word	0x08011091
 8011038:	080110a9 	.word	0x080110a9
 801103c:	080110a9 	.word	0x080110a9
 8011040:	080110a9 	.word	0x080110a9
 8011044:	080110a9 	.word	0x080110a9
 8011048:	080110a9 	.word	0x080110a9
 801104c:	080110a9 	.word	0x080110a9
 8011050:	080110a9 	.word	0x080110a9
 8011054:	08011099 	.word	0x08011099
 8011058:	080110a9 	.word	0x080110a9
 801105c:	080110a9 	.word	0x080110a9
 8011060:	080110a9 	.word	0x080110a9
 8011064:	080110a9 	.word	0x080110a9
 8011068:	080110a9 	.word	0x080110a9
 801106c:	080110a9 	.word	0x080110a9
 8011070:	080110a9 	.word	0x080110a9
 8011074:	080110a1 	.word	0x080110a1
 8011078:	2301      	movs	r3, #1
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e1c0      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011080:	2304      	movs	r3, #4
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e1bc      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011088:	2308      	movs	r3, #8
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e1b8      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011090:	2310      	movs	r3, #16
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e1b4      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011098:	2320      	movs	r3, #32
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e1b0      	b.n	8011402 <UART_SetConfig+0x7ae>
 80110a0:	2340      	movs	r3, #64	; 0x40
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e1ac      	b.n	8011402 <UART_SetConfig+0x7ae>
 80110a8:	2380      	movs	r3, #128	; 0x80
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e1a8      	b.n	8011402 <UART_SetConfig+0x7ae>
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a75      	ldr	r2, [pc, #468]	; (801128c <UART_SetConfig+0x638>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d130      	bne.n	801111c <UART_SetConfig+0x4c8>
 80110ba:	4b73      	ldr	r3, [pc, #460]	; (8011288 <UART_SetConfig+0x634>)
 80110bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110be:	f003 0307 	and.w	r3, r3, #7
 80110c2:	2b05      	cmp	r3, #5
 80110c4:	d826      	bhi.n	8011114 <UART_SetConfig+0x4c0>
 80110c6:	a201      	add	r2, pc, #4	; (adr r2, 80110cc <UART_SetConfig+0x478>)
 80110c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110cc:	080110e5 	.word	0x080110e5
 80110d0:	080110ed 	.word	0x080110ed
 80110d4:	080110f5 	.word	0x080110f5
 80110d8:	080110fd 	.word	0x080110fd
 80110dc:	08011105 	.word	0x08011105
 80110e0:	0801110d 	.word	0x0801110d
 80110e4:	2300      	movs	r3, #0
 80110e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ea:	e18a      	b.n	8011402 <UART_SetConfig+0x7ae>
 80110ec:	2304      	movs	r3, #4
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e186      	b.n	8011402 <UART_SetConfig+0x7ae>
 80110f4:	2308      	movs	r3, #8
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e182      	b.n	8011402 <UART_SetConfig+0x7ae>
 80110fc:	2310      	movs	r3, #16
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e17e      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011104:	2320      	movs	r3, #32
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e17a      	b.n	8011402 <UART_SetConfig+0x7ae>
 801110c:	2340      	movs	r3, #64	; 0x40
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e176      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011114:	2380      	movs	r3, #128	; 0x80
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e172      	b.n	8011402 <UART_SetConfig+0x7ae>
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a5b      	ldr	r2, [pc, #364]	; (8011290 <UART_SetConfig+0x63c>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d130      	bne.n	8011188 <UART_SetConfig+0x534>
 8011126:	4b58      	ldr	r3, [pc, #352]	; (8011288 <UART_SetConfig+0x634>)
 8011128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801112a:	f003 0307 	and.w	r3, r3, #7
 801112e:	2b05      	cmp	r3, #5
 8011130:	d826      	bhi.n	8011180 <UART_SetConfig+0x52c>
 8011132:	a201      	add	r2, pc, #4	; (adr r2, 8011138 <UART_SetConfig+0x4e4>)
 8011134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011138:	08011151 	.word	0x08011151
 801113c:	08011159 	.word	0x08011159
 8011140:	08011161 	.word	0x08011161
 8011144:	08011169 	.word	0x08011169
 8011148:	08011171 	.word	0x08011171
 801114c:	08011179 	.word	0x08011179
 8011150:	2300      	movs	r3, #0
 8011152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011156:	e154      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011158:	2304      	movs	r3, #4
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e150      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011160:	2308      	movs	r3, #8
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e14c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011168:	2310      	movs	r3, #16
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e148      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011170:	2320      	movs	r3, #32
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e144      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011178:	2340      	movs	r3, #64	; 0x40
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e140      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011180:	2380      	movs	r3, #128	; 0x80
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e13c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4a41      	ldr	r2, [pc, #260]	; (8011294 <UART_SetConfig+0x640>)
 801118e:	4293      	cmp	r3, r2
 8011190:	f040 8082 	bne.w	8011298 <UART_SetConfig+0x644>
 8011194:	4b3c      	ldr	r3, [pc, #240]	; (8011288 <UART_SetConfig+0x634>)
 8011196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801119c:	2b28      	cmp	r3, #40	; 0x28
 801119e:	d86d      	bhi.n	801127c <UART_SetConfig+0x628>
 80111a0:	a201      	add	r2, pc, #4	; (adr r2, 80111a8 <UART_SetConfig+0x554>)
 80111a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a6:	bf00      	nop
 80111a8:	0801124d 	.word	0x0801124d
 80111ac:	0801127d 	.word	0x0801127d
 80111b0:	0801127d 	.word	0x0801127d
 80111b4:	0801127d 	.word	0x0801127d
 80111b8:	0801127d 	.word	0x0801127d
 80111bc:	0801127d 	.word	0x0801127d
 80111c0:	0801127d 	.word	0x0801127d
 80111c4:	0801127d 	.word	0x0801127d
 80111c8:	08011255 	.word	0x08011255
 80111cc:	0801127d 	.word	0x0801127d
 80111d0:	0801127d 	.word	0x0801127d
 80111d4:	0801127d 	.word	0x0801127d
 80111d8:	0801127d 	.word	0x0801127d
 80111dc:	0801127d 	.word	0x0801127d
 80111e0:	0801127d 	.word	0x0801127d
 80111e4:	0801127d 	.word	0x0801127d
 80111e8:	0801125d 	.word	0x0801125d
 80111ec:	0801127d 	.word	0x0801127d
 80111f0:	0801127d 	.word	0x0801127d
 80111f4:	0801127d 	.word	0x0801127d
 80111f8:	0801127d 	.word	0x0801127d
 80111fc:	0801127d 	.word	0x0801127d
 8011200:	0801127d 	.word	0x0801127d
 8011204:	0801127d 	.word	0x0801127d
 8011208:	08011265 	.word	0x08011265
 801120c:	0801127d 	.word	0x0801127d
 8011210:	0801127d 	.word	0x0801127d
 8011214:	0801127d 	.word	0x0801127d
 8011218:	0801127d 	.word	0x0801127d
 801121c:	0801127d 	.word	0x0801127d
 8011220:	0801127d 	.word	0x0801127d
 8011224:	0801127d 	.word	0x0801127d
 8011228:	0801126d 	.word	0x0801126d
 801122c:	0801127d 	.word	0x0801127d
 8011230:	0801127d 	.word	0x0801127d
 8011234:	0801127d 	.word	0x0801127d
 8011238:	0801127d 	.word	0x0801127d
 801123c:	0801127d 	.word	0x0801127d
 8011240:	0801127d 	.word	0x0801127d
 8011244:	0801127d 	.word	0x0801127d
 8011248:	08011275 	.word	0x08011275
 801124c:	2301      	movs	r3, #1
 801124e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011252:	e0d6      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011254:	2304      	movs	r3, #4
 8011256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125a:	e0d2      	b.n	8011402 <UART_SetConfig+0x7ae>
 801125c:	2308      	movs	r3, #8
 801125e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011262:	e0ce      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011264:	2310      	movs	r3, #16
 8011266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126a:	e0ca      	b.n	8011402 <UART_SetConfig+0x7ae>
 801126c:	2320      	movs	r3, #32
 801126e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011272:	e0c6      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011274:	2340      	movs	r3, #64	; 0x40
 8011276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127a:	e0c2      	b.n	8011402 <UART_SetConfig+0x7ae>
 801127c:	2380      	movs	r3, #128	; 0x80
 801127e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011282:	e0be      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011284:	40011400 	.word	0x40011400
 8011288:	58024400 	.word	0x58024400
 801128c:	40007800 	.word	0x40007800
 8011290:	40007c00 	.word	0x40007c00
 8011294:	40011800 	.word	0x40011800
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4aad      	ldr	r2, [pc, #692]	; (8011554 <UART_SetConfig+0x900>)
 801129e:	4293      	cmp	r3, r2
 80112a0:	d176      	bne.n	8011390 <UART_SetConfig+0x73c>
 80112a2:	4bad      	ldr	r3, [pc, #692]	; (8011558 <UART_SetConfig+0x904>)
 80112a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112aa:	2b28      	cmp	r3, #40	; 0x28
 80112ac:	d86c      	bhi.n	8011388 <UART_SetConfig+0x734>
 80112ae:	a201      	add	r2, pc, #4	; (adr r2, 80112b4 <UART_SetConfig+0x660>)
 80112b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b4:	08011359 	.word	0x08011359
 80112b8:	08011389 	.word	0x08011389
 80112bc:	08011389 	.word	0x08011389
 80112c0:	08011389 	.word	0x08011389
 80112c4:	08011389 	.word	0x08011389
 80112c8:	08011389 	.word	0x08011389
 80112cc:	08011389 	.word	0x08011389
 80112d0:	08011389 	.word	0x08011389
 80112d4:	08011361 	.word	0x08011361
 80112d8:	08011389 	.word	0x08011389
 80112dc:	08011389 	.word	0x08011389
 80112e0:	08011389 	.word	0x08011389
 80112e4:	08011389 	.word	0x08011389
 80112e8:	08011389 	.word	0x08011389
 80112ec:	08011389 	.word	0x08011389
 80112f0:	08011389 	.word	0x08011389
 80112f4:	08011369 	.word	0x08011369
 80112f8:	08011389 	.word	0x08011389
 80112fc:	08011389 	.word	0x08011389
 8011300:	08011389 	.word	0x08011389
 8011304:	08011389 	.word	0x08011389
 8011308:	08011389 	.word	0x08011389
 801130c:	08011389 	.word	0x08011389
 8011310:	08011389 	.word	0x08011389
 8011314:	08011371 	.word	0x08011371
 8011318:	08011389 	.word	0x08011389
 801131c:	08011389 	.word	0x08011389
 8011320:	08011389 	.word	0x08011389
 8011324:	08011389 	.word	0x08011389
 8011328:	08011389 	.word	0x08011389
 801132c:	08011389 	.word	0x08011389
 8011330:	08011389 	.word	0x08011389
 8011334:	08011379 	.word	0x08011379
 8011338:	08011389 	.word	0x08011389
 801133c:	08011389 	.word	0x08011389
 8011340:	08011389 	.word	0x08011389
 8011344:	08011389 	.word	0x08011389
 8011348:	08011389 	.word	0x08011389
 801134c:	08011389 	.word	0x08011389
 8011350:	08011389 	.word	0x08011389
 8011354:	08011381 	.word	0x08011381
 8011358:	2301      	movs	r3, #1
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e050      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011360:	2304      	movs	r3, #4
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e04c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011368:	2308      	movs	r3, #8
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136e:	e048      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011370:	2310      	movs	r3, #16
 8011372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011376:	e044      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011378:	2320      	movs	r3, #32
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137e:	e040      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011380:	2340      	movs	r3, #64	; 0x40
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011386:	e03c      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011388:	2380      	movs	r3, #128	; 0x80
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138e:	e038      	b.n	8011402 <UART_SetConfig+0x7ae>
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4a71      	ldr	r2, [pc, #452]	; (801155c <UART_SetConfig+0x908>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d130      	bne.n	80113fc <UART_SetConfig+0x7a8>
 801139a:	4b6f      	ldr	r3, [pc, #444]	; (8011558 <UART_SetConfig+0x904>)
 801139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	2b05      	cmp	r3, #5
 80113a4:	d826      	bhi.n	80113f4 <UART_SetConfig+0x7a0>
 80113a6:	a201      	add	r2, pc, #4	; (adr r2, 80113ac <UART_SetConfig+0x758>)
 80113a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ac:	080113c5 	.word	0x080113c5
 80113b0:	080113cd 	.word	0x080113cd
 80113b4:	080113d5 	.word	0x080113d5
 80113b8:	080113dd 	.word	0x080113dd
 80113bc:	080113e5 	.word	0x080113e5
 80113c0:	080113ed 	.word	0x080113ed
 80113c4:	2302      	movs	r3, #2
 80113c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ca:	e01a      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113cc:	2304      	movs	r3, #4
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d2:	e016      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113d4:	2308      	movs	r3, #8
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113da:	e012      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113dc:	2310      	movs	r3, #16
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e00e      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113e4:	2320      	movs	r3, #32
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e00a      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113ec:	2340      	movs	r3, #64	; 0x40
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f2:	e006      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113f4:	2380      	movs	r3, #128	; 0x80
 80113f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fa:	e002      	b.n	8011402 <UART_SetConfig+0x7ae>
 80113fc:	2380      	movs	r3, #128	; 0x80
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a55      	ldr	r2, [pc, #340]	; (801155c <UART_SetConfig+0x908>)
 8011408:	4293      	cmp	r3, r2
 801140a:	f040 80f8 	bne.w	80115fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801140e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011412:	2b20      	cmp	r3, #32
 8011414:	dc46      	bgt.n	80114a4 <UART_SetConfig+0x850>
 8011416:	2b02      	cmp	r3, #2
 8011418:	db75      	blt.n	8011506 <UART_SetConfig+0x8b2>
 801141a:	3b02      	subs	r3, #2
 801141c:	2b1e      	cmp	r3, #30
 801141e:	d872      	bhi.n	8011506 <UART_SetConfig+0x8b2>
 8011420:	a201      	add	r2, pc, #4	; (adr r2, 8011428 <UART_SetConfig+0x7d4>)
 8011422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011426:	bf00      	nop
 8011428:	080114ab 	.word	0x080114ab
 801142c:	08011507 	.word	0x08011507
 8011430:	080114b3 	.word	0x080114b3
 8011434:	08011507 	.word	0x08011507
 8011438:	08011507 	.word	0x08011507
 801143c:	08011507 	.word	0x08011507
 8011440:	080114c3 	.word	0x080114c3
 8011444:	08011507 	.word	0x08011507
 8011448:	08011507 	.word	0x08011507
 801144c:	08011507 	.word	0x08011507
 8011450:	08011507 	.word	0x08011507
 8011454:	08011507 	.word	0x08011507
 8011458:	08011507 	.word	0x08011507
 801145c:	08011507 	.word	0x08011507
 8011460:	080114d3 	.word	0x080114d3
 8011464:	08011507 	.word	0x08011507
 8011468:	08011507 	.word	0x08011507
 801146c:	08011507 	.word	0x08011507
 8011470:	08011507 	.word	0x08011507
 8011474:	08011507 	.word	0x08011507
 8011478:	08011507 	.word	0x08011507
 801147c:	08011507 	.word	0x08011507
 8011480:	08011507 	.word	0x08011507
 8011484:	08011507 	.word	0x08011507
 8011488:	08011507 	.word	0x08011507
 801148c:	08011507 	.word	0x08011507
 8011490:	08011507 	.word	0x08011507
 8011494:	08011507 	.word	0x08011507
 8011498:	08011507 	.word	0x08011507
 801149c:	08011507 	.word	0x08011507
 80114a0:	080114f9 	.word	0x080114f9
 80114a4:	2b40      	cmp	r3, #64	; 0x40
 80114a6:	d02a      	beq.n	80114fe <UART_SetConfig+0x8aa>
 80114a8:	e02d      	b.n	8011506 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80114aa:	f7fb f86b 	bl	800c584 <HAL_RCCEx_GetD3PCLK1Freq>
 80114ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114b0:	e02f      	b.n	8011512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fb f87a 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114c0:	e027      	b.n	8011512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114c2:	f107 0318 	add.w	r3, r7, #24
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fb f9c6 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114d0:	e01f      	b.n	8011512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114d2:	4b21      	ldr	r3, [pc, #132]	; (8011558 <UART_SetConfig+0x904>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f003 0320 	and.w	r3, r3, #32
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d009      	beq.n	80114f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114de:	4b1e      	ldr	r3, [pc, #120]	; (8011558 <UART_SetConfig+0x904>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	08db      	lsrs	r3, r3, #3
 80114e4:	f003 0303 	and.w	r3, r3, #3
 80114e8:	4a1d      	ldr	r2, [pc, #116]	; (8011560 <UART_SetConfig+0x90c>)
 80114ea:	fa22 f303 	lsr.w	r3, r2, r3
 80114ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114f0:	e00f      	b.n	8011512 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114f2:	4b1b      	ldr	r3, [pc, #108]	; (8011560 <UART_SetConfig+0x90c>)
 80114f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114f6:	e00c      	b.n	8011512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114f8:	4b1a      	ldr	r3, [pc, #104]	; (8011564 <UART_SetConfig+0x910>)
 80114fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114fc:	e009      	b.n	8011512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011504:	e005      	b.n	8011512 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011506:	2300      	movs	r3, #0
 8011508:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801150a:	2301      	movs	r3, #1
 801150c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 81ee 	beq.w	80118f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151e:	4a12      	ldr	r2, [pc, #72]	; (8011568 <UART_SetConfig+0x914>)
 8011520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011524:	461a      	mov	r2, r3
 8011526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011528:	fbb3 f3f2 	udiv	r3, r3, r2
 801152c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	685a      	ldr	r2, [r3, #4]
 8011532:	4613      	mov	r3, r2
 8011534:	005b      	lsls	r3, r3, #1
 8011536:	4413      	add	r3, r2
 8011538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801153a:	429a      	cmp	r2, r3
 801153c:	d305      	bcc.n	801154a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011546:	429a      	cmp	r2, r3
 8011548:	d910      	bls.n	801156c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801154a:	2301      	movs	r3, #1
 801154c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011550:	e1d1      	b.n	80118f6 <UART_SetConfig+0xca2>
 8011552:	bf00      	nop
 8011554:	40011c00 	.word	0x40011c00
 8011558:	58024400 	.word	0x58024400
 801155c:	58000c00 	.word	0x58000c00
 8011560:	03d09000 	.word	0x03d09000
 8011564:	003d0900 	.word	0x003d0900
 8011568:	080185f4 	.word	0x080185f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801156c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801156e:	2200      	movs	r2, #0
 8011570:	60bb      	str	r3, [r7, #8]
 8011572:	60fa      	str	r2, [r7, #12]
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011578:	4ac0      	ldr	r2, [pc, #768]	; (801187c <UART_SetConfig+0xc28>)
 801157a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801157e:	b29b      	uxth	r3, r3
 8011580:	2200      	movs	r2, #0
 8011582:	603b      	str	r3, [r7, #0]
 8011584:	607a      	str	r2, [r7, #4]
 8011586:	e9d7 2300 	ldrd	r2, r3, [r7]
 801158a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801158e:	f7ee ff27 	bl	80003e0 <__aeabi_uldivmod>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	4610      	mov	r0, r2
 8011598:	4619      	mov	r1, r3
 801159a:	f04f 0200 	mov.w	r2, #0
 801159e:	f04f 0300 	mov.w	r3, #0
 80115a2:	020b      	lsls	r3, r1, #8
 80115a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80115a8:	0202      	lsls	r2, r0, #8
 80115aa:	6979      	ldr	r1, [r7, #20]
 80115ac:	6849      	ldr	r1, [r1, #4]
 80115ae:	0849      	lsrs	r1, r1, #1
 80115b0:	2000      	movs	r0, #0
 80115b2:	460c      	mov	r4, r1
 80115b4:	4605      	mov	r5, r0
 80115b6:	eb12 0804 	adds.w	r8, r2, r4
 80115ba:	eb43 0905 	adc.w	r9, r3, r5
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	2200      	movs	r2, #0
 80115c4:	469a      	mov	sl, r3
 80115c6:	4693      	mov	fp, r2
 80115c8:	4652      	mov	r2, sl
 80115ca:	465b      	mov	r3, fp
 80115cc:	4640      	mov	r0, r8
 80115ce:	4649      	mov	r1, r9
 80115d0:	f7ee ff06 	bl	80003e0 <__aeabi_uldivmod>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	4613      	mov	r3, r2
 80115da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115e2:	d308      	bcc.n	80115f6 <UART_SetConfig+0x9a2>
 80115e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115ea:	d204      	bcs.n	80115f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115f2:	60da      	str	r2, [r3, #12]
 80115f4:	e17f      	b.n	80118f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115fc:	e17b      	b.n	80118f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	69db      	ldr	r3, [r3, #28]
 8011602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011606:	f040 80bd 	bne.w	8011784 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801160a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801160e:	2b20      	cmp	r3, #32
 8011610:	dc48      	bgt.n	80116a4 <UART_SetConfig+0xa50>
 8011612:	2b00      	cmp	r3, #0
 8011614:	db7b      	blt.n	801170e <UART_SetConfig+0xaba>
 8011616:	2b20      	cmp	r3, #32
 8011618:	d879      	bhi.n	801170e <UART_SetConfig+0xaba>
 801161a:	a201      	add	r2, pc, #4	; (adr r2, 8011620 <UART_SetConfig+0x9cc>)
 801161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011620:	080116ab 	.word	0x080116ab
 8011624:	080116b3 	.word	0x080116b3
 8011628:	0801170f 	.word	0x0801170f
 801162c:	0801170f 	.word	0x0801170f
 8011630:	080116bb 	.word	0x080116bb
 8011634:	0801170f 	.word	0x0801170f
 8011638:	0801170f 	.word	0x0801170f
 801163c:	0801170f 	.word	0x0801170f
 8011640:	080116cb 	.word	0x080116cb
 8011644:	0801170f 	.word	0x0801170f
 8011648:	0801170f 	.word	0x0801170f
 801164c:	0801170f 	.word	0x0801170f
 8011650:	0801170f 	.word	0x0801170f
 8011654:	0801170f 	.word	0x0801170f
 8011658:	0801170f 	.word	0x0801170f
 801165c:	0801170f 	.word	0x0801170f
 8011660:	080116db 	.word	0x080116db
 8011664:	0801170f 	.word	0x0801170f
 8011668:	0801170f 	.word	0x0801170f
 801166c:	0801170f 	.word	0x0801170f
 8011670:	0801170f 	.word	0x0801170f
 8011674:	0801170f 	.word	0x0801170f
 8011678:	0801170f 	.word	0x0801170f
 801167c:	0801170f 	.word	0x0801170f
 8011680:	0801170f 	.word	0x0801170f
 8011684:	0801170f 	.word	0x0801170f
 8011688:	0801170f 	.word	0x0801170f
 801168c:	0801170f 	.word	0x0801170f
 8011690:	0801170f 	.word	0x0801170f
 8011694:	0801170f 	.word	0x0801170f
 8011698:	0801170f 	.word	0x0801170f
 801169c:	0801170f 	.word	0x0801170f
 80116a0:	08011701 	.word	0x08011701
 80116a4:	2b40      	cmp	r3, #64	; 0x40
 80116a6:	d02e      	beq.n	8011706 <UART_SetConfig+0xab2>
 80116a8:	e031      	b.n	801170e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116aa:	f7f9 f8cd 	bl	800a848 <HAL_RCC_GetPCLK1Freq>
 80116ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116b0:	e033      	b.n	801171a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116b2:	f7f9 f8df 	bl	800a874 <HAL_RCC_GetPCLK2Freq>
 80116b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116b8:	e02f      	b.n	801171a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fa ff76 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116c8:	e027      	b.n	801171a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116ca:	f107 0318 	add.w	r3, r7, #24
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fb f8c2 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116d8:	e01f      	b.n	801171a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116da:	4b69      	ldr	r3, [pc, #420]	; (8011880 <UART_SetConfig+0xc2c>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f003 0320 	and.w	r3, r3, #32
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d009      	beq.n	80116fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116e6:	4b66      	ldr	r3, [pc, #408]	; (8011880 <UART_SetConfig+0xc2c>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	08db      	lsrs	r3, r3, #3
 80116ec:	f003 0303 	and.w	r3, r3, #3
 80116f0:	4a64      	ldr	r2, [pc, #400]	; (8011884 <UART_SetConfig+0xc30>)
 80116f2:	fa22 f303 	lsr.w	r3, r2, r3
 80116f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116f8:	e00f      	b.n	801171a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116fa:	4b62      	ldr	r3, [pc, #392]	; (8011884 <UART_SetConfig+0xc30>)
 80116fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116fe:	e00c      	b.n	801171a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011700:	4b61      	ldr	r3, [pc, #388]	; (8011888 <UART_SetConfig+0xc34>)
 8011702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011704:	e009      	b.n	801171a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801170a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801170c:	e005      	b.n	801171a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801170e:	2300      	movs	r3, #0
 8011710:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011712:	2301      	movs	r3, #1
 8011714:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801171a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801171c:	2b00      	cmp	r3, #0
 801171e:	f000 80ea 	beq.w	80118f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011726:	4a55      	ldr	r2, [pc, #340]	; (801187c <UART_SetConfig+0xc28>)
 8011728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801172c:	461a      	mov	r2, r3
 801172e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011730:	fbb3 f3f2 	udiv	r3, r3, r2
 8011734:	005a      	lsls	r2, r3, #1
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	085b      	lsrs	r3, r3, #1
 801173c:	441a      	add	r2, r3
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	fbb2 f3f3 	udiv	r3, r2, r3
 8011746:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801174a:	2b0f      	cmp	r3, #15
 801174c:	d916      	bls.n	801177c <UART_SetConfig+0xb28>
 801174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011754:	d212      	bcs.n	801177c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011758:	b29b      	uxth	r3, r3
 801175a:	f023 030f 	bic.w	r3, r3, #15
 801175e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011762:	085b      	lsrs	r3, r3, #1
 8011764:	b29b      	uxth	r3, r3
 8011766:	f003 0307 	and.w	r3, r3, #7
 801176a:	b29a      	uxth	r2, r3
 801176c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801176e:	4313      	orrs	r3, r2
 8011770:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011778:	60da      	str	r2, [r3, #12]
 801177a:	e0bc      	b.n	80118f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801177c:	2301      	movs	r3, #1
 801177e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011782:	e0b8      	b.n	80118f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011784:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011788:	2b20      	cmp	r3, #32
 801178a:	dc4b      	bgt.n	8011824 <UART_SetConfig+0xbd0>
 801178c:	2b00      	cmp	r3, #0
 801178e:	f2c0 8087 	blt.w	80118a0 <UART_SetConfig+0xc4c>
 8011792:	2b20      	cmp	r3, #32
 8011794:	f200 8084 	bhi.w	80118a0 <UART_SetConfig+0xc4c>
 8011798:	a201      	add	r2, pc, #4	; (adr r2, 80117a0 <UART_SetConfig+0xb4c>)
 801179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801179e:	bf00      	nop
 80117a0:	0801182b 	.word	0x0801182b
 80117a4:	08011833 	.word	0x08011833
 80117a8:	080118a1 	.word	0x080118a1
 80117ac:	080118a1 	.word	0x080118a1
 80117b0:	0801183b 	.word	0x0801183b
 80117b4:	080118a1 	.word	0x080118a1
 80117b8:	080118a1 	.word	0x080118a1
 80117bc:	080118a1 	.word	0x080118a1
 80117c0:	0801184b 	.word	0x0801184b
 80117c4:	080118a1 	.word	0x080118a1
 80117c8:	080118a1 	.word	0x080118a1
 80117cc:	080118a1 	.word	0x080118a1
 80117d0:	080118a1 	.word	0x080118a1
 80117d4:	080118a1 	.word	0x080118a1
 80117d8:	080118a1 	.word	0x080118a1
 80117dc:	080118a1 	.word	0x080118a1
 80117e0:	0801185b 	.word	0x0801185b
 80117e4:	080118a1 	.word	0x080118a1
 80117e8:	080118a1 	.word	0x080118a1
 80117ec:	080118a1 	.word	0x080118a1
 80117f0:	080118a1 	.word	0x080118a1
 80117f4:	080118a1 	.word	0x080118a1
 80117f8:	080118a1 	.word	0x080118a1
 80117fc:	080118a1 	.word	0x080118a1
 8011800:	080118a1 	.word	0x080118a1
 8011804:	080118a1 	.word	0x080118a1
 8011808:	080118a1 	.word	0x080118a1
 801180c:	080118a1 	.word	0x080118a1
 8011810:	080118a1 	.word	0x080118a1
 8011814:	080118a1 	.word	0x080118a1
 8011818:	080118a1 	.word	0x080118a1
 801181c:	080118a1 	.word	0x080118a1
 8011820:	08011893 	.word	0x08011893
 8011824:	2b40      	cmp	r3, #64	; 0x40
 8011826:	d037      	beq.n	8011898 <UART_SetConfig+0xc44>
 8011828:	e03a      	b.n	80118a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801182a:	f7f9 f80d 	bl	800a848 <HAL_RCC_GetPCLK1Freq>
 801182e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011830:	e03c      	b.n	80118ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011832:	f7f9 f81f 	bl	800a874 <HAL_RCC_GetPCLK2Freq>
 8011836:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011838:	e038      	b.n	80118ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801183e:	4618      	mov	r0, r3
 8011840:	f7fa feb6 	bl	800c5b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011848:	e030      	b.n	80118ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801184a:	f107 0318 	add.w	r3, r7, #24
 801184e:	4618      	mov	r0, r3
 8011850:	f7fb f802 	bl	800c858 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011858:	e028      	b.n	80118ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801185a:	4b09      	ldr	r3, [pc, #36]	; (8011880 <UART_SetConfig+0xc2c>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f003 0320 	and.w	r3, r3, #32
 8011862:	2b00      	cmp	r3, #0
 8011864:	d012      	beq.n	801188c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011866:	4b06      	ldr	r3, [pc, #24]	; (8011880 <UART_SetConfig+0xc2c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	08db      	lsrs	r3, r3, #3
 801186c:	f003 0303 	and.w	r3, r3, #3
 8011870:	4a04      	ldr	r2, [pc, #16]	; (8011884 <UART_SetConfig+0xc30>)
 8011872:	fa22 f303 	lsr.w	r3, r2, r3
 8011876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011878:	e018      	b.n	80118ac <UART_SetConfig+0xc58>
 801187a:	bf00      	nop
 801187c:	080185f4 	.word	0x080185f4
 8011880:	58024400 	.word	0x58024400
 8011884:	03d09000 	.word	0x03d09000
 8011888:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801188c:	4b24      	ldr	r3, [pc, #144]	; (8011920 <UART_SetConfig+0xccc>)
 801188e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011890:	e00c      	b.n	80118ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011892:	4b24      	ldr	r3, [pc, #144]	; (8011924 <UART_SetConfig+0xcd0>)
 8011894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011896:	e009      	b.n	80118ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801189c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801189e:	e005      	b.n	80118ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80118a0:	2300      	movs	r3, #0
 80118a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118a4:	2301      	movs	r3, #1
 80118a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118aa:	bf00      	nop
    }

    if (pclk != 0U)
 80118ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d021      	beq.n	80118f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b6:	4a1c      	ldr	r2, [pc, #112]	; (8011928 <UART_SetConfig+0xcd4>)
 80118b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118bc:	461a      	mov	r2, r3
 80118be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	085b      	lsrs	r3, r3, #1
 80118ca:	441a      	add	r2, r3
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80118d4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d8:	2b0f      	cmp	r3, #15
 80118da:	d909      	bls.n	80118f0 <UART_SetConfig+0xc9c>
 80118dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118e2:	d205      	bcs.n	80118f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	60da      	str	r2, [r3, #12]
 80118ee:	e002      	b.n	80118f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80118f0:	2301      	movs	r3, #1
 80118f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	2201      	movs	r2, #1
 80118fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	2201      	movs	r2, #1
 8011902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	2200      	movs	r2, #0
 801190a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	2200      	movs	r2, #0
 8011910:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011912:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011916:	4618      	mov	r0, r3
 8011918:	3748      	adds	r7, #72	; 0x48
 801191a:	46bd      	mov	sp, r7
 801191c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011920:	03d09000 	.word	0x03d09000
 8011924:	003d0900 	.word	0x003d0900
 8011928:	080185f4 	.word	0x080185f4

0801192c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011938:	f003 0301 	and.w	r3, r3, #1
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00a      	beq.n	8011956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	430a      	orrs	r2, r1
 8011954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801195a:	f003 0302 	and.w	r3, r3, #2
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00a      	beq.n	8011978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	430a      	orrs	r2, r1
 8011976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801197c:	f003 0304 	and.w	r3, r3, #4
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00a      	beq.n	801199a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	430a      	orrs	r2, r1
 8011998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199e:	f003 0308 	and.w	r3, r3, #8
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d00a      	beq.n	80119bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	430a      	orrs	r2, r1
 80119ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c0:	f003 0310 	and.w	r3, r3, #16
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d00a      	beq.n	80119de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	689b      	ldr	r3, [r3, #8]
 80119ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	430a      	orrs	r2, r1
 80119dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e2:	f003 0320 	and.w	r3, r3, #32
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00a      	beq.n	8011a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	430a      	orrs	r2, r1
 80119fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d01a      	beq.n	8011a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	430a      	orrs	r2, r1
 8011a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a2a:	d10a      	bne.n	8011a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	430a      	orrs	r2, r1
 8011a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00a      	beq.n	8011a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	430a      	orrs	r2, r1
 8011a62:	605a      	str	r2, [r3, #4]
  }
}
 8011a64:	bf00      	nop
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b098      	sub	sp, #96	; 0x60
 8011a74:	af02      	add	r7, sp, #8
 8011a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a80:	f7f2 f822 	bl	8003ac8 <HAL_GetTick>
 8011a84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f003 0308 	and.w	r3, r3, #8
 8011a90:	2b08      	cmp	r3, #8
 8011a92:	d12f      	bne.n	8011af4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a98:	9300      	str	r3, [sp, #0]
 8011a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 f88e 	bl	8011bc4 <UART_WaitOnFlagUntilTimeout>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d022      	beq.n	8011af4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab6:	e853 3f00 	ldrex	r3, [r3]
 8011aba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	461a      	mov	r2, r3
 8011aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011acc:	647b      	str	r3, [r7, #68]	; 0x44
 8011ace:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ad4:	e841 2300 	strex	r3, r2, [r1]
 8011ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d1e6      	bne.n	8011aae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2220      	movs	r2, #32
 8011ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011af0:	2303      	movs	r3, #3
 8011af2:	e063      	b.n	8011bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f003 0304 	and.w	r3, r3, #4
 8011afe:	2b04      	cmp	r3, #4
 8011b00:	d149      	bne.n	8011b96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 f857 	bl	8011bc4 <UART_WaitOnFlagUntilTimeout>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d03c      	beq.n	8011b96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b24:	e853 3f00 	ldrex	r3, [r3]
 8011b28:	623b      	str	r3, [r7, #32]
   return(result);
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	461a      	mov	r2, r3
 8011b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8011b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b42:	e841 2300 	strex	r3, r2, [r1]
 8011b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d1e6      	bne.n	8011b1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	3308      	adds	r3, #8
 8011b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	e853 3f00 	ldrex	r3, [r3]
 8011b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	f023 0301 	bic.w	r3, r3, #1
 8011b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	3308      	adds	r3, #8
 8011b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b6e:	61fa      	str	r2, [r7, #28]
 8011b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b72:	69b9      	ldr	r1, [r7, #24]
 8011b74:	69fa      	ldr	r2, [r7, #28]
 8011b76:	e841 2300 	strex	r3, r2, [r1]
 8011b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d1e5      	bne.n	8011b4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2220      	movs	r2, #32
 8011b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b92:	2303      	movs	r3, #3
 8011b94:	e012      	b.n	8011bbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2220      	movs	r2, #32
 8011b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2220      	movs	r2, #32
 8011ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3758      	adds	r7, #88	; 0x58
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	603b      	str	r3, [r7, #0]
 8011bd0:	4613      	mov	r3, r2
 8011bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bd4:	e049      	b.n	8011c6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011bd6:	69bb      	ldr	r3, [r7, #24]
 8011bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bdc:	d045      	beq.n	8011c6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bde:	f7f1 ff73 	bl	8003ac8 <HAL_GetTick>
 8011be2:	4602      	mov	r2, r0
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	69ba      	ldr	r2, [r7, #24]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d302      	bcc.n	8011bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d101      	bne.n	8011bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011bf4:	2303      	movs	r3, #3
 8011bf6:	e048      	b.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	f003 0304 	and.w	r3, r3, #4
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d031      	beq.n	8011c6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	69db      	ldr	r3, [r3, #28]
 8011c0c:	f003 0308 	and.w	r3, r3, #8
 8011c10:	2b08      	cmp	r3, #8
 8011c12:	d110      	bne.n	8011c36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2208      	movs	r2, #8
 8011c1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f000 f839 	bl	8011c94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2208      	movs	r2, #8
 8011c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011c32:	2301      	movs	r3, #1
 8011c34:	e029      	b.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	69db      	ldr	r3, [r3, #28]
 8011c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c44:	d111      	bne.n	8011c6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f000 f81f 	bl	8011c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2220      	movs	r2, #32
 8011c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2200      	movs	r2, #0
 8011c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c66:	2303      	movs	r3, #3
 8011c68:	e00f      	b.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	69da      	ldr	r2, [r3, #28]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	4013      	ands	r3, r2
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	bf0c      	ite	eq
 8011c7a:	2301      	moveq	r3, #1
 8011c7c:	2300      	movne	r3, #0
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	461a      	mov	r2, r3
 8011c82:	79fb      	ldrb	r3, [r7, #7]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d0a6      	beq.n	8011bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c88:	2300      	movs	r3, #0
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
	...

08011c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b095      	sub	sp, #84	; 0x54
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca4:	e853 3f00 	ldrex	r3, [r3]
 8011ca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cba:	643b      	str	r3, [r7, #64]	; 0x40
 8011cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cc2:	e841 2300 	strex	r3, r2, [r1]
 8011cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1e6      	bne.n	8011c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	3308      	adds	r3, #8
 8011cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
 8011cd8:	e853 3f00 	ldrex	r3, [r3]
 8011cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cde:	69fa      	ldr	r2, [r7, #28]
 8011ce0:	4b1e      	ldr	r3, [pc, #120]	; (8011d5c <UART_EndRxTransfer+0xc8>)
 8011ce2:	4013      	ands	r3, r2
 8011ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3308      	adds	r3, #8
 8011cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cf6:	e841 2300 	strex	r3, r2, [r1]
 8011cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1e5      	bne.n	8011cce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d118      	bne.n	8011d3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	e853 3f00 	ldrex	r3, [r3]
 8011d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	f023 0310 	bic.w	r3, r3, #16
 8011d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	461a      	mov	r2, r3
 8011d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d28:	61bb      	str	r3, [r7, #24]
 8011d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d2c:	6979      	ldr	r1, [r7, #20]
 8011d2e:	69ba      	ldr	r2, [r7, #24]
 8011d30:	e841 2300 	strex	r3, r2, [r1]
 8011d34:	613b      	str	r3, [r7, #16]
   return(result);
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d1e6      	bne.n	8011d0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2220      	movs	r2, #32
 8011d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d50:	bf00      	nop
 8011d52:	3754      	adds	r7, #84	; 0x54
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	effffffe 	.word	0xeffffffe

08011d60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d101      	bne.n	8011d76 <HAL_UARTEx_DisableFifoMode+0x16>
 8011d72:	2302      	movs	r3, #2
 8011d74:	e027      	b.n	8011dc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2224      	movs	r2, #36	; 0x24
 8011d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f022 0201 	bic.w	r2, r2, #1
 8011d9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011da4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2220      	movs	r2, #32
 8011db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3714      	adds	r7, #20
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b084      	sub	sp, #16
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
 8011dda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011de2:	2b01      	cmp	r3, #1
 8011de4:	d101      	bne.n	8011dea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011de6:	2302      	movs	r3, #2
 8011de8:	e02d      	b.n	8011e46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2201      	movs	r2, #1
 8011dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2224      	movs	r2, #36	; 0x24
 8011df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f022 0201 	bic.w	r2, r2, #1
 8011e10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	683a      	ldr	r2, [r7, #0]
 8011e22:	430a      	orrs	r2, r1
 8011e24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f000 f850 	bl	8011ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2220      	movs	r2, #32
 8011e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3710      	adds	r7, #16
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b084      	sub	sp, #16
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d101      	bne.n	8011e66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e62:	2302      	movs	r3, #2
 8011e64:	e02d      	b.n	8011ec2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2201      	movs	r2, #1
 8011e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2224      	movs	r2, #36	; 0x24
 8011e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f022 0201 	bic.w	r2, r2, #1
 8011e8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	683a      	ldr	r2, [r7, #0]
 8011e9e:	430a      	orrs	r2, r1
 8011ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 f812 	bl	8011ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2220      	movs	r2, #32
 8011eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ec0:	2300      	movs	r3, #0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3710      	adds	r7, #16
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
	...

08011ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d108      	bne.n	8011eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011eec:	e031      	b.n	8011f52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011eee:	2310      	movs	r3, #16
 8011ef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011ef2:	2310      	movs	r3, #16
 8011ef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	689b      	ldr	r3, [r3, #8]
 8011efc:	0e5b      	lsrs	r3, r3, #25
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	f003 0307 	and.w	r3, r3, #7
 8011f04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	0f5b      	lsrs	r3, r3, #29
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	f003 0307 	and.w	r3, r3, #7
 8011f14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f16:	7bbb      	ldrb	r3, [r7, #14]
 8011f18:	7b3a      	ldrb	r2, [r7, #12]
 8011f1a:	4911      	ldr	r1, [pc, #68]	; (8011f60 <UARTEx_SetNbDataToProcess+0x94>)
 8011f1c:	5c8a      	ldrb	r2, [r1, r2]
 8011f1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011f22:	7b3a      	ldrb	r2, [r7, #12]
 8011f24:	490f      	ldr	r1, [pc, #60]	; (8011f64 <UARTEx_SetNbDataToProcess+0x98>)
 8011f26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f34:	7bfb      	ldrb	r3, [r7, #15]
 8011f36:	7b7a      	ldrb	r2, [r7, #13]
 8011f38:	4909      	ldr	r1, [pc, #36]	; (8011f60 <UARTEx_SetNbDataToProcess+0x94>)
 8011f3a:	5c8a      	ldrb	r2, [r1, r2]
 8011f3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011f40:	7b7a      	ldrb	r2, [r7, #13]
 8011f42:	4908      	ldr	r1, [pc, #32]	; (8011f64 <UARTEx_SetNbDataToProcess+0x98>)
 8011f44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011f52:	bf00      	nop
 8011f54:	3714      	adds	r7, #20
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop
 8011f60:	0801860c 	.word	0x0801860c
 8011f64:	08018614 	.word	0x08018614

08011f68 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011f68:	b084      	sub	sp, #16
 8011f6a:	b480      	push	{r7}
 8011f6c:	b085      	sub	sp, #20
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	6078      	str	r0, [r7, #4]
 8011f72:	f107 001c 	add.w	r0, r7, #28
 8011f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f82:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	4313      	orrs	r3, r2
 8011f94:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	685a      	ldr	r2, [r3, #4]
 8011f9a:	4b07      	ldr	r3, [pc, #28]	; (8011fb8 <SDMMC_Init+0x50>)
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	68fa      	ldr	r2, [r7, #12]
 8011fa0:	431a      	orrs	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3714      	adds	r7, #20
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	b004      	add	sp, #16
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	ffc02c00 	.word	0xffc02c00

08011fbc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b083      	sub	sp, #12
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f043 0203 	orr.w	r2, r3, #3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801200c:	2300      	movs	r3, #0
}
 801200e:	4618      	mov	r0, r3
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801201a:	b480      	push	{r7}
 801201c:	b083      	sub	sp, #12
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f003 0303 	and.w	r3, r3, #3
}
 801202a:	4618      	mov	r0, r3
 801202c:	370c      	adds	r7, #12
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr
	...

08012038 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012038:	b480      	push	{r7}
 801203a:	b085      	sub	sp, #20
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012042:	2300      	movs	r3, #0
 8012044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012056:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801205c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012062:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	4313      	orrs	r3, r2
 8012068:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	68da      	ldr	r2, [r3, #12]
 801206e:	4b06      	ldr	r3, [pc, #24]	; (8012088 <SDMMC_SendCommand+0x50>)
 8012070:	4013      	ands	r3, r2
 8012072:	68fa      	ldr	r2, [r7, #12]
 8012074:	431a      	orrs	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801207a:	2300      	movs	r3, #0
}
 801207c:	4618      	mov	r0, r3
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	fffee0c0 	.word	0xfffee0c0

0801208c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	b2db      	uxtb	r3, r3
}
 801209a:	4618      	mov	r0, r3
 801209c:	370c      	adds	r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80120a6:	b480      	push	{r7}
 80120a8:	b085      	sub	sp, #20
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
 80120ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3314      	adds	r3, #20
 80120b4:	461a      	mov	r2, r3
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	4413      	add	r3, r2
 80120ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b085      	sub	sp, #20
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	685a      	ldr	r2, [r3, #4]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80120f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80120fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012100:	68fa      	ldr	r2, [r7, #12]
 8012102:	4313      	orrs	r3, r2
 8012104:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801210a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	431a      	orrs	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012116:	2300      	movs	r3, #0

}
 8012118:	4618      	mov	r0, r3
 801211a:	3714      	adds	r7, #20
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012132:	2310      	movs	r3, #16
 8012134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012136:	f44f 7380 	mov.w	r3, #256	; 0x100
 801213a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801213c:	2300      	movs	r3, #0
 801213e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012146:	f107 0308 	add.w	r3, r7, #8
 801214a:	4619      	mov	r1, r3
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7ff ff73 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012152:	f241 3288 	movw	r2, #5000	; 0x1388
 8012156:	2110      	movs	r1, #16
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f000 fa5f 	bl	801261c <SDMMC_GetCmdResp1>
 801215e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012160:	69fb      	ldr	r3, [r7, #28]
}
 8012162:	4618      	mov	r0, r3
 8012164:	3720      	adds	r7, #32
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b088      	sub	sp, #32
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
 8012172:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012178:	2311      	movs	r3, #17
 801217a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801217c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012182:	2300      	movs	r3, #0
 8012184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801218a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801218c:	f107 0308 	add.w	r3, r7, #8
 8012190:	4619      	mov	r1, r3
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7ff ff50 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012198:	f241 3288 	movw	r2, #5000	; 0x1388
 801219c:	2111      	movs	r1, #17
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fa3c 	bl	801261c <SDMMC_GetCmdResp1>
 80121a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a6:	69fb      	ldr	r3, [r7, #28]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3720      	adds	r7, #32
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b088      	sub	sp, #32
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80121be:	2312      	movs	r3, #18
 80121c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121c8:	2300      	movs	r3, #0
 80121ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121d2:	f107 0308 	add.w	r3, r7, #8
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f7ff ff2d 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80121de:	f241 3288 	movw	r2, #5000	; 0x1388
 80121e2:	2112      	movs	r1, #18
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 fa19 	bl	801261c <SDMMC_GetCmdResp1>
 80121ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121ec:	69fb      	ldr	r3, [r7, #28]
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3720      	adds	r7, #32
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b088      	sub	sp, #32
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	6078      	str	r0, [r7, #4]
 80121fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012204:	2318      	movs	r3, #24
 8012206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012208:	f44f 7380 	mov.w	r3, #256	; 0x100
 801220c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801220e:	2300      	movs	r3, #0
 8012210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012218:	f107 0308 	add.w	r3, r7, #8
 801221c:	4619      	mov	r1, r3
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ff ff0a 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012224:	f241 3288 	movw	r2, #5000	; 0x1388
 8012228:	2118      	movs	r1, #24
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f000 f9f6 	bl	801261c <SDMMC_GetCmdResp1>
 8012230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012232:	69fb      	ldr	r3, [r7, #28]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3720      	adds	r7, #32
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b088      	sub	sp, #32
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801224a:	2319      	movs	r3, #25
 801224c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801224e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012254:	2300      	movs	r3, #0
 8012256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801225c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801225e:	f107 0308 	add.w	r3, r7, #8
 8012262:	4619      	mov	r1, r3
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7ff fee7 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801226a:	f241 3288 	movw	r2, #5000	; 0x1388
 801226e:	2119      	movs	r1, #25
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f000 f9d3 	bl	801261c <SDMMC_GetCmdResp1>
 8012276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012278:	69fb      	ldr	r3, [r7, #28]
}
 801227a:	4618      	mov	r0, r3
 801227c:	3720      	adds	r7, #32
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
	...

08012284 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b088      	sub	sp, #32
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801228c:	2300      	movs	r3, #0
 801228e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012290:	230c      	movs	r3, #12
 8012292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801229a:	2300      	movs	r3, #0
 801229c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801229e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122bc:	f107 0308 	add.w	r3, r7, #8
 80122c0:	4619      	mov	r1, r3
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f7ff feb8 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80122c8:	4a0b      	ldr	r2, [pc, #44]	; (80122f8 <SDMMC_CmdStopTransfer+0x74>)
 80122ca:	210c      	movs	r1, #12
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f9a5 	bl	801261c <SDMMC_GetCmdResp1>
 80122d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80122e6:	d101      	bne.n	80122ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80122e8:	2300      	movs	r3, #0
 80122ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80122ec:	69fb      	ldr	r3, [r7, #28]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3720      	adds	r7, #32
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	05f5e100 	.word	0x05f5e100

080122fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801230a:	2307      	movs	r3, #7
 801230c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801230e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012314:	2300      	movs	r3, #0
 8012316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801231c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801231e:	f107 0308 	add.w	r3, r7, #8
 8012322:	4619      	mov	r1, r3
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff fe87 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801232a:	f241 3288 	movw	r2, #5000	; 0x1388
 801232e:	2107      	movs	r1, #7
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 f973 	bl	801261c <SDMMC_GetCmdResp1>
 8012336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012338:	69fb      	ldr	r3, [r7, #28]
}
 801233a:	4618      	mov	r0, r3
 801233c:	3720      	adds	r7, #32
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012342:	b580      	push	{r7, lr}
 8012344:	b088      	sub	sp, #32
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801234a:	2300      	movs	r3, #0
 801234c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801234e:	2300      	movs	r3, #0
 8012350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012352:	2300      	movs	r3, #0
 8012354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012356:	2300      	movs	r3, #0
 8012358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801235a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801235e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012360:	f107 0308 	add.w	r3, r7, #8
 8012364:	4619      	mov	r1, r3
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7ff fe66 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 fb97 	bl	8012aa0 <SDMMC_GetCmdError>
 8012372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012374:	69fb      	ldr	r3, [r7, #28]
}
 8012376:	4618      	mov	r0, r3
 8012378:	3720      	adds	r7, #32
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b088      	sub	sp, #32
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012386:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801238a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801238c:	2308      	movs	r3, #8
 801238e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012396:	2300      	movs	r3, #0
 8012398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801239e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123a0:	f107 0308 	add.w	r3, r7, #8
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff fe46 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f000 fb29 	bl	8012a04 <SDMMC_GetCmdResp7>
 80123b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123b4:	69fb      	ldr	r3, [r7, #28]
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3720      	adds	r7, #32
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}

080123be <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123be:	b580      	push	{r7, lr}
 80123c0:	b088      	sub	sp, #32
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	6078      	str	r0, [r7, #4]
 80123c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80123cc:	2337      	movs	r3, #55	; 0x37
 80123ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123d6:	2300      	movs	r3, #0
 80123d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123e0:	f107 0308 	add.w	r3, r7, #8
 80123e4:	4619      	mov	r1, r3
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7ff fe26 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80123ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80123f0:	2137      	movs	r1, #55	; 0x37
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f912 	bl	801261c <SDMMC_GetCmdResp1>
 80123f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123fa:	69fb      	ldr	r3, [r7, #28]
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3720      	adds	r7, #32
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b088      	sub	sp, #32
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012412:	2329      	movs	r3, #41	; 0x29
 8012414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012416:	f44f 7380 	mov.w	r3, #256	; 0x100
 801241a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801241c:	2300      	movs	r3, #0
 801241e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012426:	f107 0308 	add.w	r3, r7, #8
 801242a:	4619      	mov	r1, r3
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7ff fe03 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 fa2e 	bl	8012894 <SDMMC_GetCmdResp3>
 8012438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801243a:	69fb      	ldr	r3, [r7, #28]
}
 801243c:	4618      	mov	r0, r3
 801243e:	3720      	adds	r7, #32
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b088      	sub	sp, #32
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012452:	2306      	movs	r3, #6
 8012454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012456:	f44f 7380 	mov.w	r3, #256	; 0x100
 801245a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801245c:	2300      	movs	r3, #0
 801245e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012466:	f107 0308 	add.w	r3, r7, #8
 801246a:	4619      	mov	r1, r3
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff fde3 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012472:	f241 3288 	movw	r2, #5000	; 0x1388
 8012476:	2106      	movs	r1, #6
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 f8cf 	bl	801261c <SDMMC_GetCmdResp1>
 801247e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012480:	69fb      	ldr	r3, [r7, #28]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3720      	adds	r7, #32
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b088      	sub	sp, #32
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012492:	2300      	movs	r3, #0
 8012494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012496:	2333      	movs	r3, #51	; 0x33
 8012498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801249a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801249e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124aa:	f107 0308 	add.w	r3, r7, #8
 80124ae:	4619      	mov	r1, r3
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff fdc1 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80124b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ba:	2133      	movs	r1, #51	; 0x33
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 f8ad 	bl	801261c <SDMMC_GetCmdResp1>
 80124c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124c4:	69fb      	ldr	r3, [r7, #28]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3720      	adds	r7, #32
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b088      	sub	sp, #32
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80124d6:	2300      	movs	r3, #0
 80124d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80124da:	2302      	movs	r3, #2
 80124dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124e4:	2300      	movs	r3, #0
 80124e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124ee:	f107 0308 	add.w	r3, r7, #8
 80124f2:	4619      	mov	r1, r3
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff fd9f 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 f980 	bl	8012800 <SDMMC_GetCmdResp2>
 8012500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012502:	69fb      	ldr	r3, [r7, #28]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3720      	adds	r7, #32
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b088      	sub	sp, #32
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801251a:	2309      	movs	r3, #9
 801251c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801251e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012524:	2300      	movs	r3, #0
 8012526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801252c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801252e:	f107 0308 	add.w	r3, r7, #8
 8012532:	4619      	mov	r1, r3
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f7ff fd7f 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f960 	bl	8012800 <SDMMC_GetCmdResp2>
 8012540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012542:	69fb      	ldr	r3, [r7, #28]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3720      	adds	r7, #32
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b088      	sub	sp, #32
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012556:	2300      	movs	r3, #0
 8012558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801255a:	2303      	movs	r3, #3
 801255c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801255e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012564:	2300      	movs	r3, #0
 8012566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801256c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801256e:	f107 0308 	add.w	r3, r7, #8
 8012572:	4619      	mov	r1, r3
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff fd5f 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	2103      	movs	r1, #3
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f000 f9c8 	bl	8012914 <SDMMC_GetCmdResp6>
 8012584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012586:	69fb      	ldr	r3, [r7, #28]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3720      	adds	r7, #32
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b088      	sub	sp, #32
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801259e:	230d      	movs	r3, #13
 80125a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125a8:	2300      	movs	r3, #0
 80125aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125b2:	f107 0308 	add.w	r3, r7, #8
 80125b6:	4619      	mov	r1, r3
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f7ff fd3d 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80125be:	f241 3288 	movw	r2, #5000	; 0x1388
 80125c2:	210d      	movs	r1, #13
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 f829 	bl	801261c <SDMMC_GetCmdResp1>
 80125ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125cc:	69fb      	ldr	r3, [r7, #28]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3720      	adds	r7, #32
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b088      	sub	sp, #32
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80125de:	2300      	movs	r3, #0
 80125e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80125e2:	230d      	movs	r3, #13
 80125e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125ec:	2300      	movs	r3, #0
 80125ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125f6:	f107 0308 	add.w	r3, r7, #8
 80125fa:	4619      	mov	r1, r3
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f7ff fd1b 	bl	8012038 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012602:	f241 3288 	movw	r2, #5000	; 0x1388
 8012606:	210d      	movs	r1, #13
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f000 f807 	bl	801261c <SDMMC_GetCmdResp1>
 801260e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012610:	69fb      	ldr	r3, [r7, #28]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3720      	adds	r7, #32
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
	...

0801261c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b088      	sub	sp, #32
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	460b      	mov	r3, r1
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801262a:	4b70      	ldr	r3, [pc, #448]	; (80127ec <SDMMC_GetCmdResp1+0x1d0>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	4a70      	ldr	r2, [pc, #448]	; (80127f0 <SDMMC_GetCmdResp1+0x1d4>)
 8012630:	fba2 2303 	umull	r2, r3, r2, r3
 8012634:	0a5a      	lsrs	r2, r3, #9
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	fb02 f303 	mul.w	r3, r2, r3
 801263c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	1e5a      	subs	r2, r3, #1
 8012642:	61fa      	str	r2, [r7, #28]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d102      	bne.n	801264e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801264c:	e0c9      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012652:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	4b67      	ldr	r3, [pc, #412]	; (80127f4 <SDMMC_GetCmdResp1+0x1d8>)
 8012658:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801265a:	2b00      	cmp	r3, #0
 801265c:	d0ef      	beq.n	801263e <SDMMC_GetCmdResp1+0x22>
 801265e:	69bb      	ldr	r3, [r7, #24]
 8012660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1ea      	bne.n	801263e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801266c:	f003 0304 	and.w	r3, r3, #4
 8012670:	2b00      	cmp	r3, #0
 8012672:	d004      	beq.n	801267e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2204      	movs	r2, #4
 8012678:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801267a:	2304      	movs	r3, #4
 801267c:	e0b1      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012682:	f003 0301 	and.w	r3, r3, #1
 8012686:	2b00      	cmp	r3, #0
 8012688:	d004      	beq.n	8012694 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2201      	movs	r2, #1
 801268e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012690:	2301      	movs	r3, #1
 8012692:	e0a6      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	4a58      	ldr	r2, [pc, #352]	; (80127f8 <SDMMC_GetCmdResp1+0x1dc>)
 8012698:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f7ff fcf6 	bl	801208c <SDMMC_GetCommandResponse>
 80126a0:	4603      	mov	r3, r0
 80126a2:	461a      	mov	r2, r3
 80126a4:	7afb      	ldrb	r3, [r7, #11]
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d001      	beq.n	80126ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126aa:	2301      	movs	r3, #1
 80126ac:	e099      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80126ae:	2100      	movs	r1, #0
 80126b0:	68f8      	ldr	r0, [r7, #12]
 80126b2:	f7ff fcf8 	bl	80120a6 <SDMMC_GetResponse>
 80126b6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80126b8:	697a      	ldr	r2, [r7, #20]
 80126ba:	4b50      	ldr	r3, [pc, #320]	; (80127fc <SDMMC_GetCmdResp1+0x1e0>)
 80126bc:	4013      	ands	r3, r2
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d101      	bne.n	80126c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80126c2:	2300      	movs	r3, #0
 80126c4:	e08d      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	da02      	bge.n	80126d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80126cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80126d0:	e087      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d001      	beq.n	80126e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80126dc:	2340      	movs	r3, #64	; 0x40
 80126de:	e080      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d001      	beq.n	80126ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80126ea:	2380      	movs	r3, #128	; 0x80
 80126ec:	e079      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126fc:	e071      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012708:	f44f 7300 	mov.w	r3, #512	; 0x200
 801270c:	e069      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012714:	2b00      	cmp	r3, #0
 8012716:	d002      	beq.n	801271e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801271c:	e061      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012724:	2b00      	cmp	r3, #0
 8012726:	d002      	beq.n	801272e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801272c:	e059      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801273c:	e051      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801274c:	e049      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801275c:	e041      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801276c:	e039      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801277c:	e031      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012784:	2b00      	cmp	r3, #0
 8012786:	d002      	beq.n	801278e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012788:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801278c:	e029      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012794:	2b00      	cmp	r3, #0
 8012796:	d002      	beq.n	801279e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801279c:	e021      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d002      	beq.n	80127ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80127a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80127ac:	e019      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d002      	beq.n	80127be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80127b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80127bc:	e011      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d002      	beq.n	80127ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80127c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80127cc:	e009      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	f003 0308 	and.w	r3, r3, #8
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d002      	beq.n	80127de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80127d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80127dc:	e001      	b.n	80127e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3720      	adds	r7, #32
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	24000000 	.word	0x24000000
 80127f0:	10624dd3 	.word	0x10624dd3
 80127f4:	00200045 	.word	0x00200045
 80127f8:	002000c5 	.word	0x002000c5
 80127fc:	fdffe008 	.word	0xfdffe008

08012800 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012808:	4b1f      	ldr	r3, [pc, #124]	; (8012888 <SDMMC_GetCmdResp2+0x88>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a1f      	ldr	r2, [pc, #124]	; (801288c <SDMMC_GetCmdResp2+0x8c>)
 801280e:	fba2 2303 	umull	r2, r3, r2, r3
 8012812:	0a5b      	lsrs	r3, r3, #9
 8012814:	f241 3288 	movw	r2, #5000	; 0x1388
 8012818:	fb02 f303 	mul.w	r3, r2, r3
 801281c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	1e5a      	subs	r2, r3, #1
 8012822:	60fa      	str	r2, [r7, #12]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d102      	bne.n	801282e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801282c:	e026      	b.n	801287c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012832:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801283a:	2b00      	cmp	r3, #0
 801283c:	d0ef      	beq.n	801281e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012844:	2b00      	cmp	r3, #0
 8012846:	d1ea      	bne.n	801281e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801284c:	f003 0304 	and.w	r3, r3, #4
 8012850:	2b00      	cmp	r3, #0
 8012852:	d004      	beq.n	801285e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2204      	movs	r2, #4
 8012858:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801285a:	2304      	movs	r3, #4
 801285c:	e00e      	b.n	801287c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012862:	f003 0301 	and.w	r3, r3, #1
 8012866:	2b00      	cmp	r3, #0
 8012868:	d004      	beq.n	8012874 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2201      	movs	r2, #1
 801286e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012870:	2301      	movs	r3, #1
 8012872:	e003      	b.n	801287c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4a06      	ldr	r2, [pc, #24]	; (8012890 <SDMMC_GetCmdResp2+0x90>)
 8012878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801287a:	2300      	movs	r3, #0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3714      	adds	r7, #20
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr
 8012888:	24000000 	.word	0x24000000
 801288c:	10624dd3 	.word	0x10624dd3
 8012890:	002000c5 	.word	0x002000c5

08012894 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012894:	b480      	push	{r7}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801289c:	4b1a      	ldr	r3, [pc, #104]	; (8012908 <SDMMC_GetCmdResp3+0x74>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4a1a      	ldr	r2, [pc, #104]	; (801290c <SDMMC_GetCmdResp3+0x78>)
 80128a2:	fba2 2303 	umull	r2, r3, r2, r3
 80128a6:	0a5b      	lsrs	r3, r3, #9
 80128a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80128ac:	fb02 f303 	mul.w	r3, r2, r3
 80128b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	1e5a      	subs	r2, r3, #1
 80128b6:	60fa      	str	r2, [r7, #12]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d102      	bne.n	80128c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128c0:	e01b      	b.n	80128fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d0ef      	beq.n	80128b2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1ea      	bne.n	80128b2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e0:	f003 0304 	and.w	r3, r3, #4
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d004      	beq.n	80128f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2204      	movs	r2, #4
 80128ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128ee:	2304      	movs	r3, #4
 80128f0:	e003      	b.n	80128fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4a06      	ldr	r2, [pc, #24]	; (8012910 <SDMMC_GetCmdResp3+0x7c>)
 80128f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128f8:	2300      	movs	r3, #0
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3714      	adds	r7, #20
 80128fe:	46bd      	mov	sp, r7
 8012900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	24000000 	.word	0x24000000
 801290c:	10624dd3 	.word	0x10624dd3
 8012910:	002000c5 	.word	0x002000c5

08012914 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b088      	sub	sp, #32
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	460b      	mov	r3, r1
 801291e:	607a      	str	r2, [r7, #4]
 8012920:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012922:	4b35      	ldr	r3, [pc, #212]	; (80129f8 <SDMMC_GetCmdResp6+0xe4>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4a35      	ldr	r2, [pc, #212]	; (80129fc <SDMMC_GetCmdResp6+0xe8>)
 8012928:	fba2 2303 	umull	r2, r3, r2, r3
 801292c:	0a5b      	lsrs	r3, r3, #9
 801292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012932:	fb02 f303 	mul.w	r3, r2, r3
 8012936:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	1e5a      	subs	r2, r3, #1
 801293c:	61fa      	str	r2, [r7, #28]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d102      	bne.n	8012948 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012942:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012946:	e052      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801294c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012954:	2b00      	cmp	r3, #0
 8012956:	d0ef      	beq.n	8012938 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012958:	69bb      	ldr	r3, [r7, #24]
 801295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1ea      	bne.n	8012938 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012966:	f003 0304 	and.w	r3, r3, #4
 801296a:	2b00      	cmp	r3, #0
 801296c:	d004      	beq.n	8012978 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2204      	movs	r2, #4
 8012972:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012974:	2304      	movs	r3, #4
 8012976:	e03a      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801297c:	f003 0301 	and.w	r3, r3, #1
 8012980:	2b00      	cmp	r3, #0
 8012982:	d004      	beq.n	801298e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2201      	movs	r2, #1
 8012988:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801298a:	2301      	movs	r3, #1
 801298c:	e02f      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801298e:	68f8      	ldr	r0, [r7, #12]
 8012990:	f7ff fb7c 	bl	801208c <SDMMC_GetCommandResponse>
 8012994:	4603      	mov	r3, r0
 8012996:	461a      	mov	r2, r3
 8012998:	7afb      	ldrb	r3, [r7, #11]
 801299a:	4293      	cmp	r3, r2
 801299c:	d001      	beq.n	80129a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801299e:	2301      	movs	r3, #1
 80129a0:	e025      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	4a16      	ldr	r2, [pc, #88]	; (8012a00 <SDMMC_GetCmdResp6+0xec>)
 80129a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80129a8:	2100      	movs	r1, #0
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f7ff fb7b 	bl	80120a6 <SDMMC_GetResponse>
 80129b0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d106      	bne.n	80129ca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	0c1b      	lsrs	r3, r3, #16
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e011      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d002      	beq.n	80129da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80129d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80129d8:	e009      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d002      	beq.n	80129ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80129e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129e8:	e001      	b.n	80129ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80129ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3720      	adds	r7, #32
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	24000000 	.word	0x24000000
 80129fc:	10624dd3 	.word	0x10624dd3
 8012a00:	002000c5 	.word	0x002000c5

08012a04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a0c:	4b22      	ldr	r3, [pc, #136]	; (8012a98 <SDMMC_GetCmdResp7+0x94>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a22      	ldr	r2, [pc, #136]	; (8012a9c <SDMMC_GetCmdResp7+0x98>)
 8012a12:	fba2 2303 	umull	r2, r3, r2, r3
 8012a16:	0a5b      	lsrs	r3, r3, #9
 8012a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a1c:	fb02 f303 	mul.w	r3, r2, r3
 8012a20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	1e5a      	subs	r2, r3, #1
 8012a26:	60fa      	str	r2, [r7, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d102      	bne.n	8012a32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a30:	e02c      	b.n	8012a8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d0ef      	beq.n	8012a22 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d1ea      	bne.n	8012a22 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a50:	f003 0304 	and.w	r3, r3, #4
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d004      	beq.n	8012a62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2204      	movs	r2, #4
 8012a5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a5e:	2304      	movs	r3, #4
 8012a60:	e014      	b.n	8012a8c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a66:	f003 0301 	and.w	r3, r3, #1
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d004      	beq.n	8012a78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2201      	movs	r2, #1
 8012a72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a74:	2301      	movs	r3, #1
 8012a76:	e009      	b.n	8012a8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d002      	beq.n	8012a8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2240      	movs	r2, #64	; 0x40
 8012a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a8a:	2300      	movs	r3, #0

}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3714      	adds	r7, #20
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr
 8012a98:	24000000 	.word	0x24000000
 8012a9c:	10624dd3 	.word	0x10624dd3

08012aa0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b085      	sub	sp, #20
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012aa8:	4b11      	ldr	r3, [pc, #68]	; (8012af0 <SDMMC_GetCmdError+0x50>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a11      	ldr	r2, [pc, #68]	; (8012af4 <SDMMC_GetCmdError+0x54>)
 8012aae:	fba2 2303 	umull	r2, r3, r2, r3
 8012ab2:	0a5b      	lsrs	r3, r3, #9
 8012ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ab8:	fb02 f303 	mul.w	r3, r2, r3
 8012abc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	1e5a      	subs	r2, r3, #1
 8012ac2:	60fa      	str	r2, [r7, #12]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d102      	bne.n	8012ace <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012acc:	e009      	b.n	8012ae2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d0f1      	beq.n	8012abe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4a06      	ldr	r2, [pc, #24]	; (8012af8 <SDMMC_GetCmdError+0x58>)
 8012ade:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012ae0:	2300      	movs	r3, #0
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3714      	adds	r7, #20
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	24000000 	.word	0x24000000
 8012af4:	10624dd3 	.word	0x10624dd3
 8012af8:	002000c5 	.word	0x002000c5

08012afc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012afc:	b084      	sub	sp, #16
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b084      	sub	sp, #16
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	f107 001c 	add.w	r0, r7, #28
 8012b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d120      	bne.n	8012b56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	68da      	ldr	r2, [r3, #12]
 8012b24:	4b2a      	ldr	r3, [pc, #168]	; (8012bd0 <USB_CoreInit+0xd4>)
 8012b26:	4013      	ands	r3, r2
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d105      	bne.n	8012b4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f001 faf8 	bl	8014140 <USB_CoreReset>
 8012b50:	4603      	mov	r3, r0
 8012b52:	73fb      	strb	r3, [r7, #15]
 8012b54:	e01a      	b.n	8012b8c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f001 faec 	bl	8014140 <USB_CoreReset>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d106      	bne.n	8012b80 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8012b7e:	e005      	b.n	8012b8c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d116      	bne.n	8012bc0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ba0:	4b0c      	ldr	r3, [pc, #48]	; (8012bd4 <USB_CoreInit+0xd8>)
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	f043 0206 	orr.w	r2, r3, #6
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	f043 0220 	orr.w	r2, r3, #32
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3710      	adds	r7, #16
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012bcc:	b004      	add	sp, #16
 8012bce:	4770      	bx	lr
 8012bd0:	ffbdffbf 	.word	0xffbdffbf
 8012bd4:	03ee0000 	.word	0x03ee0000

08012bd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012bd8:	b480      	push	{r7}
 8012bda:	b087      	sub	sp, #28
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	4613      	mov	r3, r2
 8012be4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012be6:	79fb      	ldrb	r3, [r7, #7]
 8012be8:	2b02      	cmp	r3, #2
 8012bea:	d165      	bne.n	8012cb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	4a41      	ldr	r2, [pc, #260]	; (8012cf4 <USB_SetTurnaroundTime+0x11c>)
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d906      	bls.n	8012c02 <USB_SetTurnaroundTime+0x2a>
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	4a40      	ldr	r2, [pc, #256]	; (8012cf8 <USB_SetTurnaroundTime+0x120>)
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	d202      	bcs.n	8012c02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012bfc:	230f      	movs	r3, #15
 8012bfe:	617b      	str	r3, [r7, #20]
 8012c00:	e062      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	4a3c      	ldr	r2, [pc, #240]	; (8012cf8 <USB_SetTurnaroundTime+0x120>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d306      	bcc.n	8012c18 <USB_SetTurnaroundTime+0x40>
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	4a3b      	ldr	r2, [pc, #236]	; (8012cfc <USB_SetTurnaroundTime+0x124>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d202      	bcs.n	8012c18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012c12:	230e      	movs	r3, #14
 8012c14:	617b      	str	r3, [r7, #20]
 8012c16:	e057      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	4a38      	ldr	r2, [pc, #224]	; (8012cfc <USB_SetTurnaroundTime+0x124>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d306      	bcc.n	8012c2e <USB_SetTurnaroundTime+0x56>
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	4a37      	ldr	r2, [pc, #220]	; (8012d00 <USB_SetTurnaroundTime+0x128>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d202      	bcs.n	8012c2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012c28:	230d      	movs	r3, #13
 8012c2a:	617b      	str	r3, [r7, #20]
 8012c2c:	e04c      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	4a33      	ldr	r2, [pc, #204]	; (8012d00 <USB_SetTurnaroundTime+0x128>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d306      	bcc.n	8012c44 <USB_SetTurnaroundTime+0x6c>
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	4a32      	ldr	r2, [pc, #200]	; (8012d04 <USB_SetTurnaroundTime+0x12c>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d802      	bhi.n	8012c44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012c3e:	230c      	movs	r3, #12
 8012c40:	617b      	str	r3, [r7, #20]
 8012c42:	e041      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	4a2f      	ldr	r2, [pc, #188]	; (8012d04 <USB_SetTurnaroundTime+0x12c>)
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d906      	bls.n	8012c5a <USB_SetTurnaroundTime+0x82>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	4a2e      	ldr	r2, [pc, #184]	; (8012d08 <USB_SetTurnaroundTime+0x130>)
 8012c50:	4293      	cmp	r3, r2
 8012c52:	d802      	bhi.n	8012c5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012c54:	230b      	movs	r3, #11
 8012c56:	617b      	str	r3, [r7, #20]
 8012c58:	e036      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	4a2a      	ldr	r2, [pc, #168]	; (8012d08 <USB_SetTurnaroundTime+0x130>)
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d906      	bls.n	8012c70 <USB_SetTurnaroundTime+0x98>
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	4a29      	ldr	r2, [pc, #164]	; (8012d0c <USB_SetTurnaroundTime+0x134>)
 8012c66:	4293      	cmp	r3, r2
 8012c68:	d802      	bhi.n	8012c70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012c6a:	230a      	movs	r3, #10
 8012c6c:	617b      	str	r3, [r7, #20]
 8012c6e:	e02b      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	4a26      	ldr	r2, [pc, #152]	; (8012d0c <USB_SetTurnaroundTime+0x134>)
 8012c74:	4293      	cmp	r3, r2
 8012c76:	d906      	bls.n	8012c86 <USB_SetTurnaroundTime+0xae>
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	4a25      	ldr	r2, [pc, #148]	; (8012d10 <USB_SetTurnaroundTime+0x138>)
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d202      	bcs.n	8012c86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c80:	2309      	movs	r3, #9
 8012c82:	617b      	str	r3, [r7, #20]
 8012c84:	e020      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	4a21      	ldr	r2, [pc, #132]	; (8012d10 <USB_SetTurnaroundTime+0x138>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d306      	bcc.n	8012c9c <USB_SetTurnaroundTime+0xc4>
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	4a20      	ldr	r2, [pc, #128]	; (8012d14 <USB_SetTurnaroundTime+0x13c>)
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d802      	bhi.n	8012c9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c96:	2308      	movs	r3, #8
 8012c98:	617b      	str	r3, [r7, #20]
 8012c9a:	e015      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	4a1d      	ldr	r2, [pc, #116]	; (8012d14 <USB_SetTurnaroundTime+0x13c>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d906      	bls.n	8012cb2 <USB_SetTurnaroundTime+0xda>
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	4a1c      	ldr	r2, [pc, #112]	; (8012d18 <USB_SetTurnaroundTime+0x140>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d202      	bcs.n	8012cb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012cac:	2307      	movs	r3, #7
 8012cae:	617b      	str	r3, [r7, #20]
 8012cb0:	e00a      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012cb2:	2306      	movs	r3, #6
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	e007      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012cb8:	79fb      	ldrb	r3, [r7, #7]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d102      	bne.n	8012cc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012cbe:	2309      	movs	r3, #9
 8012cc0:	617b      	str	r3, [r7, #20]
 8012cc2:	e001      	b.n	8012cc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012cc4:	2309      	movs	r3, #9
 8012cc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	68db      	ldr	r3, [r3, #12]
 8012ccc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	68da      	ldr	r2, [r3, #12]
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	029b      	lsls	r3, r3, #10
 8012cdc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012ce0:	431a      	orrs	r2, r3
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012ce6:	2300      	movs	r3, #0
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	371c      	adds	r7, #28
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr
 8012cf4:	00d8acbf 	.word	0x00d8acbf
 8012cf8:	00e4e1c0 	.word	0x00e4e1c0
 8012cfc:	00f42400 	.word	0x00f42400
 8012d00:	01067380 	.word	0x01067380
 8012d04:	011a499f 	.word	0x011a499f
 8012d08:	01312cff 	.word	0x01312cff
 8012d0c:	014ca43f 	.word	0x014ca43f
 8012d10:	016e3600 	.word	0x016e3600
 8012d14:	01a6ab1f 	.word	0x01a6ab1f
 8012d18:	01e84800 	.word	0x01e84800

08012d1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	f043 0201 	orr.w	r2, r3, #1
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d30:	2300      	movs	r3, #0
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	370c      	adds	r7, #12
 8012d36:	46bd      	mov	sp, r7
 8012d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3c:	4770      	bx	lr

08012d3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012d3e:	b480      	push	{r7}
 8012d40:	b083      	sub	sp, #12
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	f023 0201 	bic.w	r2, r3, #1
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d52:	2300      	movs	r3, #0
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	370c      	adds	r7, #12
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5e:	4770      	bx	lr

08012d60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	460b      	mov	r3, r1
 8012d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d7c:	78fb      	ldrb	r3, [r7, #3]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d115      	bne.n	8012dae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	68db      	ldr	r3, [r3, #12]
 8012d86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d8e:	2001      	movs	r0, #1
 8012d90:	f7f0 fea6 	bl	8003ae0 <HAL_Delay>
      ms++;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3301      	adds	r3, #1
 8012d98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f001 f93f 	bl	801401e <USB_GetMode>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d01e      	beq.n	8012de4 <USB_SetCurrentMode+0x84>
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2b31      	cmp	r3, #49	; 0x31
 8012daa:	d9f0      	bls.n	8012d8e <USB_SetCurrentMode+0x2e>
 8012dac:	e01a      	b.n	8012de4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012dae:	78fb      	ldrb	r3, [r7, #3]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d115      	bne.n	8012de0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012dc0:	2001      	movs	r0, #1
 8012dc2:	f7f0 fe8d 	bl	8003ae0 <HAL_Delay>
      ms++;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f001 f926 	bl	801401e <USB_GetMode>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d005      	beq.n	8012de4 <USB_SetCurrentMode+0x84>
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2b31      	cmp	r3, #49	; 0x31
 8012ddc:	d9f0      	bls.n	8012dc0 <USB_SetCurrentMode+0x60>
 8012dde:	e001      	b.n	8012de4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012de0:	2301      	movs	r3, #1
 8012de2:	e005      	b.n	8012df0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2b32      	cmp	r3, #50	; 0x32
 8012de8:	d101      	bne.n	8012dee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012dea:	2301      	movs	r3, #1
 8012dec:	e000      	b.n	8012df0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012dee:	2300      	movs	r3, #0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012df8:	b084      	sub	sp, #16
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b086      	sub	sp, #24
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
 8012e02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012e12:	2300      	movs	r3, #0
 8012e14:	613b      	str	r3, [r7, #16]
 8012e16:	e009      	b.n	8012e2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	3340      	adds	r3, #64	; 0x40
 8012e1e:	009b      	lsls	r3, r3, #2
 8012e20:	4413      	add	r3, r2
 8012e22:	2200      	movs	r2, #0
 8012e24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	3301      	adds	r3, #1
 8012e2a:	613b      	str	r3, [r7, #16]
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	2b0e      	cmp	r3, #14
 8012e30:	d9f2      	bls.n	8012e18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d11c      	bne.n	8012e72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e46:	f043 0302 	orr.w	r3, r3, #2
 8012e4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	601a      	str	r2, [r3, #0]
 8012e70:	e005      	b.n	8012e7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e84:	461a      	mov	r2, r3
 8012e86:	2300      	movs	r3, #0
 8012e88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e90:	4619      	mov	r1, r3
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e98:	461a      	mov	r2, r3
 8012e9a:	680b      	ldr	r3, [r1, #0]
 8012e9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d10c      	bne.n	8012ebe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d104      	bne.n	8012eb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012eaa:	2100      	movs	r1, #0
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 f965 	bl	801317c <USB_SetDevSpeed>
 8012eb2:	e008      	b.n	8012ec6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012eb4:	2101      	movs	r1, #1
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f960 	bl	801317c <USB_SetDevSpeed>
 8012ebc:	e003      	b.n	8012ec6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012ebe:	2103      	movs	r1, #3
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f000 f95b 	bl	801317c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012ec6:	2110      	movs	r1, #16
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f000 f8f3 	bl	80130b4 <USB_FlushTxFifo>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f000 f91f 	bl	801311c <USB_FlushRxFifo>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eee:	461a      	mov	r2, r3
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012efa:	461a      	mov	r2, r3
 8012efc:	2300      	movs	r3, #0
 8012efe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f06:	461a      	mov	r2, r3
 8012f08:	2300      	movs	r3, #0
 8012f0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	613b      	str	r3, [r7, #16]
 8012f10:	e043      	b.n	8012f9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	015a      	lsls	r2, r3, #5
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	4413      	add	r3, r2
 8012f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f28:	d118      	bne.n	8012f5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10a      	bne.n	8012f46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	015a      	lsls	r2, r3, #5
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4413      	add	r3, r2
 8012f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f42:	6013      	str	r3, [r2, #0]
 8012f44:	e013      	b.n	8012f6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	015a      	lsls	r2, r3, #5
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f52:	461a      	mov	r2, r3
 8012f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f58:	6013      	str	r3, [r2, #0]
 8012f5a:	e008      	b.n	8012f6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	015a      	lsls	r2, r3, #5
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	4413      	add	r3, r2
 8012f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f68:	461a      	mov	r2, r3
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	015a      	lsls	r2, r3, #5
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	4413      	add	r3, r2
 8012f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	015a      	lsls	r2, r3, #5
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	4413      	add	r3, r2
 8012f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	3301      	adds	r3, #1
 8012f98:	613b      	str	r3, [r7, #16]
 8012f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9c:	693a      	ldr	r2, [r7, #16]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d3b7      	bcc.n	8012f12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	613b      	str	r3, [r7, #16]
 8012fa6:	e043      	b.n	8013030 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	015a      	lsls	r2, r3, #5
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4413      	add	r3, r2
 8012fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012fbe:	d118      	bne.n	8012ff2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d10a      	bne.n	8012fdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	015a      	lsls	r2, r3, #5
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	4413      	add	r3, r2
 8012fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012fd8:	6013      	str	r3, [r2, #0]
 8012fda:	e013      	b.n	8013004 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	015a      	lsls	r2, r3, #5
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fe8:	461a      	mov	r2, r3
 8012fea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012fee:	6013      	str	r3, [r2, #0]
 8012ff0:	e008      	b.n	8013004 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	015a      	lsls	r2, r3, #5
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ffe:	461a      	mov	r2, r3
 8013000:	2300      	movs	r3, #0
 8013002:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	015a      	lsls	r2, r3, #5
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	4413      	add	r3, r2
 801300c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013010:	461a      	mov	r2, r3
 8013012:	2300      	movs	r3, #0
 8013014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	015a      	lsls	r2, r3, #5
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	4413      	add	r3, r2
 801301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013022:	461a      	mov	r2, r3
 8013024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	3301      	adds	r3, #1
 801302e:	613b      	str	r3, [r7, #16]
 8013030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013032:	693a      	ldr	r2, [r7, #16]
 8013034:	429a      	cmp	r2, r3
 8013036:	d3b7      	bcc.n	8012fa8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	68fa      	ldr	r2, [r7, #12]
 8013042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801304a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013058:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305c:	2b00      	cmp	r3, #0
 801305e:	d105      	bne.n	801306c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	699b      	ldr	r3, [r3, #24]
 8013064:	f043 0210 	orr.w	r2, r3, #16
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	699a      	ldr	r2, [r3, #24]
 8013070:	4b0e      	ldr	r3, [pc, #56]	; (80130ac <USB_DevInit+0x2b4>)
 8013072:	4313      	orrs	r3, r2
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801307a:	2b00      	cmp	r3, #0
 801307c:	d005      	beq.n	801308a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	699b      	ldr	r3, [r3, #24]
 8013082:	f043 0208 	orr.w	r2, r3, #8
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801308c:	2b01      	cmp	r3, #1
 801308e:	d105      	bne.n	801309c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	699a      	ldr	r2, [r3, #24]
 8013094:	4b06      	ldr	r3, [pc, #24]	; (80130b0 <USB_DevInit+0x2b8>)
 8013096:	4313      	orrs	r3, r2
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801309c:	7dfb      	ldrb	r3, [r7, #23]
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3718      	adds	r7, #24
 80130a2:	46bd      	mov	sp, r7
 80130a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80130a8:	b004      	add	sp, #16
 80130aa:	4770      	bx	lr
 80130ac:	803c3800 	.word	0x803c3800
 80130b0:	40000004 	.word	0x40000004

080130b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80130be:	2300      	movs	r3, #0
 80130c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3301      	adds	r3, #1
 80130c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	4a13      	ldr	r2, [pc, #76]	; (8013118 <USB_FlushTxFifo+0x64>)
 80130cc:	4293      	cmp	r3, r2
 80130ce:	d901      	bls.n	80130d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80130d0:	2303      	movs	r3, #3
 80130d2:	e01b      	b.n	801310c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	691b      	ldr	r3, [r3, #16]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	daf2      	bge.n	80130c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80130dc:	2300      	movs	r3, #0
 80130de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	019b      	lsls	r3, r3, #6
 80130e4:	f043 0220 	orr.w	r2, r3, #32
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	3301      	adds	r3, #1
 80130f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	4a08      	ldr	r2, [pc, #32]	; (8013118 <USB_FlushTxFifo+0x64>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d901      	bls.n	80130fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80130fa:	2303      	movs	r3, #3
 80130fc:	e006      	b.n	801310c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	691b      	ldr	r3, [r3, #16]
 8013102:	f003 0320 	and.w	r3, r3, #32
 8013106:	2b20      	cmp	r3, #32
 8013108:	d0f0      	beq.n	80130ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801310a:	2300      	movs	r3, #0
}
 801310c:	4618      	mov	r0, r3
 801310e:	3714      	adds	r7, #20
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr
 8013118:	00030d40 	.word	0x00030d40

0801311c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013124:	2300      	movs	r3, #0
 8013126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	3301      	adds	r3, #1
 801312c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	4a11      	ldr	r2, [pc, #68]	; (8013178 <USB_FlushRxFifo+0x5c>)
 8013132:	4293      	cmp	r3, r2
 8013134:	d901      	bls.n	801313a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013136:	2303      	movs	r3, #3
 8013138:	e018      	b.n	801316c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	daf2      	bge.n	8013128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013142:	2300      	movs	r3, #0
 8013144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2210      	movs	r2, #16
 801314a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	3301      	adds	r3, #1
 8013150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	4a08      	ldr	r2, [pc, #32]	; (8013178 <USB_FlushRxFifo+0x5c>)
 8013156:	4293      	cmp	r3, r2
 8013158:	d901      	bls.n	801315e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801315a:	2303      	movs	r3, #3
 801315c:	e006      	b.n	801316c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	f003 0310 	and.w	r3, r3, #16
 8013166:	2b10      	cmp	r3, #16
 8013168:	d0f0      	beq.n	801314c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801316a:	2300      	movs	r3, #0
}
 801316c:	4618      	mov	r0, r3
 801316e:	3714      	adds	r7, #20
 8013170:	46bd      	mov	sp, r7
 8013172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013176:	4770      	bx	lr
 8013178:	00030d40 	.word	0x00030d40

0801317c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801317c:	b480      	push	{r7}
 801317e:	b085      	sub	sp, #20
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	460b      	mov	r3, r1
 8013186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	78fb      	ldrb	r3, [r7, #3]
 8013196:	68f9      	ldr	r1, [r7, #12]
 8013198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801319c:	4313      	orrs	r3, r2
 801319e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80131a0:	2300      	movs	r3, #0
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3714      	adds	r7, #20
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr

080131ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80131ae:	b480      	push	{r7}
 80131b0:	b087      	sub	sp, #28
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	f003 0306 	and.w	r3, r3, #6
 80131c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d102      	bne.n	80131d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80131ce:	2300      	movs	r3, #0
 80131d0:	75fb      	strb	r3, [r7, #23]
 80131d2:	e00a      	b.n	80131ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2b02      	cmp	r3, #2
 80131d8:	d002      	beq.n	80131e0 <USB_GetDevSpeed+0x32>
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2b06      	cmp	r3, #6
 80131de:	d102      	bne.n	80131e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80131e0:	2302      	movs	r3, #2
 80131e2:	75fb      	strb	r3, [r7, #23]
 80131e4:	e001      	b.n	80131ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80131e6:	230f      	movs	r3, #15
 80131e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80131ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	371c      	adds	r7, #28
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b085      	sub	sp, #20
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	785b      	ldrb	r3, [r3, #1]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d139      	bne.n	8013288 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801321a:	69da      	ldr	r2, [r3, #28]
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	f003 030f 	and.w	r3, r3, #15
 8013224:	2101      	movs	r1, #1
 8013226:	fa01 f303 	lsl.w	r3, r1, r3
 801322a:	b29b      	uxth	r3, r3
 801322c:	68f9      	ldr	r1, [r7, #12]
 801322e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013232:	4313      	orrs	r3, r2
 8013234:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	015a      	lsls	r2, r3, #5
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	4413      	add	r3, r2
 801323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013248:	2b00      	cmp	r3, #0
 801324a:	d153      	bne.n	80132f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	015a      	lsls	r2, r3, #5
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4413      	add	r3, r2
 8013254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	689b      	ldr	r3, [r3, #8]
 801325e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	791b      	ldrb	r3, [r3, #4]
 8013266:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013268:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	059b      	lsls	r3, r3, #22
 801326e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013270:	431a      	orrs	r2, r3
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	0159      	lsls	r1, r3, #5
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	440b      	add	r3, r1
 801327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801327e:	4619      	mov	r1, r3
 8013280:	4b20      	ldr	r3, [pc, #128]	; (8013304 <USB_ActivateEndpoint+0x10c>)
 8013282:	4313      	orrs	r3, r2
 8013284:	600b      	str	r3, [r1, #0]
 8013286:	e035      	b.n	80132f4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801328e:	69da      	ldr	r2, [r3, #28]
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	f003 030f 	and.w	r3, r3, #15
 8013298:	2101      	movs	r1, #1
 801329a:	fa01 f303 	lsl.w	r3, r1, r3
 801329e:	041b      	lsls	r3, r3, #16
 80132a0:	68f9      	ldr	r1, [r7, #12]
 80132a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132a6:	4313      	orrs	r3, r2
 80132a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	015a      	lsls	r2, r3, #5
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	4413      	add	r3, r2
 80132b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d119      	bne.n	80132f4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	015a      	lsls	r2, r3, #5
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	4413      	add	r3, r2
 80132c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	791b      	ldrb	r3, [r3, #4]
 80132da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80132dc:	430b      	orrs	r3, r1
 80132de:	431a      	orrs	r2, r3
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	0159      	lsls	r1, r3, #5
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	440b      	add	r3, r1
 80132e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132ec:	4619      	mov	r1, r3
 80132ee:	4b05      	ldr	r3, [pc, #20]	; (8013304 <USB_ActivateEndpoint+0x10c>)
 80132f0:	4313      	orrs	r3, r2
 80132f2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80132f4:	2300      	movs	r3, #0
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3714      	adds	r7, #20
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	10008000 	.word	0x10008000

08013308 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013308:	b480      	push	{r7}
 801330a:	b085      	sub	sp, #20
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	785b      	ldrb	r3, [r3, #1]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d161      	bne.n	80133e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	015a      	lsls	r2, r3, #5
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	4413      	add	r3, r2
 801332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801333a:	d11f      	bne.n	801337c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	015a      	lsls	r2, r3, #5
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	4413      	add	r3, r2
 8013344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	68ba      	ldr	r2, [r7, #8]
 801334c:	0151      	lsls	r1, r2, #5
 801334e:	68fa      	ldr	r2, [r7, #12]
 8013350:	440a      	add	r2, r1
 8013352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801335a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	015a      	lsls	r2, r3, #5
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	4413      	add	r3, r2
 8013364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	68ba      	ldr	r2, [r7, #8]
 801336c:	0151      	lsls	r1, r2, #5
 801336e:	68fa      	ldr	r2, [r7, #12]
 8013370:	440a      	add	r2, r1
 8013372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801337a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 030f 	and.w	r3, r3, #15
 801338c:	2101      	movs	r1, #1
 801338e:	fa01 f303 	lsl.w	r3, r1, r3
 8013392:	b29b      	uxth	r3, r3
 8013394:	43db      	mvns	r3, r3
 8013396:	68f9      	ldr	r1, [r7, #12]
 8013398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801339c:	4013      	ands	r3, r2
 801339e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133a6:	69da      	ldr	r2, [r3, #28]
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	f003 030f 	and.w	r3, r3, #15
 80133b0:	2101      	movs	r1, #1
 80133b2:	fa01 f303 	lsl.w	r3, r1, r3
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	43db      	mvns	r3, r3
 80133ba:	68f9      	ldr	r1, [r7, #12]
 80133bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133c0:	4013      	ands	r3, r2
 80133c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	015a      	lsls	r2, r3, #5
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	4413      	add	r3, r2
 80133cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	0159      	lsls	r1, r3, #5
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	440b      	add	r3, r1
 80133da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133de:	4619      	mov	r1, r3
 80133e0:	4b35      	ldr	r3, [pc, #212]	; (80134b8 <USB_DeactivateEndpoint+0x1b0>)
 80133e2:	4013      	ands	r3, r2
 80133e4:	600b      	str	r3, [r1, #0]
 80133e6:	e060      	b.n	80134aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	015a      	lsls	r2, r3, #5
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	4413      	add	r3, r2
 80133f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133fe:	d11f      	bne.n	8013440 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	015a      	lsls	r2, r3, #5
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	4413      	add	r3, r2
 8013408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	68ba      	ldr	r2, [r7, #8]
 8013410:	0151      	lsls	r1, r2, #5
 8013412:	68fa      	ldr	r2, [r7, #12]
 8013414:	440a      	add	r2, r1
 8013416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801341a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801341e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	015a      	lsls	r2, r3, #5
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	4413      	add	r3, r2
 8013428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	0151      	lsls	r1, r2, #5
 8013432:	68fa      	ldr	r2, [r7, #12]
 8013434:	440a      	add	r2, r1
 8013436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801343a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801343e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	f003 030f 	and.w	r3, r3, #15
 8013450:	2101      	movs	r1, #1
 8013452:	fa01 f303 	lsl.w	r3, r1, r3
 8013456:	041b      	lsls	r3, r3, #16
 8013458:	43db      	mvns	r3, r3
 801345a:	68f9      	ldr	r1, [r7, #12]
 801345c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013460:	4013      	ands	r3, r2
 8013462:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801346a:	69da      	ldr	r2, [r3, #28]
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	f003 030f 	and.w	r3, r3, #15
 8013474:	2101      	movs	r1, #1
 8013476:	fa01 f303 	lsl.w	r3, r1, r3
 801347a:	041b      	lsls	r3, r3, #16
 801347c:	43db      	mvns	r3, r3
 801347e:	68f9      	ldr	r1, [r7, #12]
 8013480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013484:	4013      	ands	r3, r2
 8013486:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	015a      	lsls	r2, r3, #5
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	4413      	add	r3, r2
 8013490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013494:	681a      	ldr	r2, [r3, #0]
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	0159      	lsls	r1, r3, #5
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	440b      	add	r3, r1
 801349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134a2:	4619      	mov	r1, r3
 80134a4:	4b05      	ldr	r3, [pc, #20]	; (80134bc <USB_DeactivateEndpoint+0x1b4>)
 80134a6:	4013      	ands	r3, r2
 80134a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80134aa:	2300      	movs	r3, #0
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3714      	adds	r7, #20
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr
 80134b8:	ec337800 	.word	0xec337800
 80134bc:	eff37800 	.word	0xeff37800

080134c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b08a      	sub	sp, #40	; 0x28
 80134c4:	af02      	add	r7, sp, #8
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	4613      	mov	r3, r2
 80134cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	785b      	ldrb	r3, [r3, #1]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	f040 8181 	bne.w	80137e4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	691b      	ldr	r3, [r3, #16]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d132      	bne.n	8013550 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	015a      	lsls	r2, r3, #5
 80134ee:	69fb      	ldr	r3, [r7, #28]
 80134f0:	4413      	add	r3, r2
 80134f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f6:	691a      	ldr	r2, [r3, #16]
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	0159      	lsls	r1, r3, #5
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	440b      	add	r3, r1
 8013500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013504:	4619      	mov	r1, r3
 8013506:	4ba5      	ldr	r3, [pc, #660]	; (801379c <USB_EPStartXfer+0x2dc>)
 8013508:	4013      	ands	r3, r2
 801350a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	015a      	lsls	r2, r3, #5
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	4413      	add	r3, r2
 8013514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013518:	691b      	ldr	r3, [r3, #16]
 801351a:	69ba      	ldr	r2, [r7, #24]
 801351c:	0151      	lsls	r1, r2, #5
 801351e:	69fa      	ldr	r2, [r7, #28]
 8013520:	440a      	add	r2, r1
 8013522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801352a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	015a      	lsls	r2, r3, #5
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	4413      	add	r3, r2
 8013534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013538:	691a      	ldr	r2, [r3, #16]
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	0159      	lsls	r1, r3, #5
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	440b      	add	r3, r1
 8013542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013546:	4619      	mov	r1, r3
 8013548:	4b95      	ldr	r3, [pc, #596]	; (80137a0 <USB_EPStartXfer+0x2e0>)
 801354a:	4013      	ands	r3, r2
 801354c:	610b      	str	r3, [r1, #16]
 801354e:	e092      	b.n	8013676 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	015a      	lsls	r2, r3, #5
 8013554:	69fb      	ldr	r3, [r7, #28]
 8013556:	4413      	add	r3, r2
 8013558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801355c:	691a      	ldr	r2, [r3, #16]
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	0159      	lsls	r1, r3, #5
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	440b      	add	r3, r1
 8013566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801356a:	4619      	mov	r1, r3
 801356c:	4b8c      	ldr	r3, [pc, #560]	; (80137a0 <USB_EPStartXfer+0x2e0>)
 801356e:	4013      	ands	r3, r2
 8013570:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	015a      	lsls	r2, r3, #5
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	4413      	add	r3, r2
 801357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801357e:	691a      	ldr	r2, [r3, #16]
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	0159      	lsls	r1, r3, #5
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	440b      	add	r3, r1
 8013588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358c:	4619      	mov	r1, r3
 801358e:	4b83      	ldr	r3, [pc, #524]	; (801379c <USB_EPStartXfer+0x2dc>)
 8013590:	4013      	ands	r3, r2
 8013592:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d11a      	bne.n	80135d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	691a      	ldr	r2, [r3, #16]
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d903      	bls.n	80135ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	689a      	ldr	r2, [r3, #8]
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80135ae:	69bb      	ldr	r3, [r7, #24]
 80135b0:	015a      	lsls	r2, r3, #5
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	4413      	add	r3, r2
 80135b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	69ba      	ldr	r2, [r7, #24]
 80135be:	0151      	lsls	r1, r2, #5
 80135c0:	69fa      	ldr	r2, [r7, #28]
 80135c2:	440a      	add	r2, r1
 80135c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80135cc:	6113      	str	r3, [r2, #16]
 80135ce:	e01b      	b.n	8013608 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	015a      	lsls	r2, r3, #5
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	4413      	add	r3, r2
 80135d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135dc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	6919      	ldr	r1, [r3, #16]
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	689b      	ldr	r3, [r3, #8]
 80135e6:	440b      	add	r3, r1
 80135e8:	1e59      	subs	r1, r3, #1
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80135f2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80135f4:	4b6b      	ldr	r3, [pc, #428]	; (80137a4 <USB_EPStartXfer+0x2e4>)
 80135f6:	400b      	ands	r3, r1
 80135f8:	69b9      	ldr	r1, [r7, #24]
 80135fa:	0148      	lsls	r0, r1, #5
 80135fc:	69f9      	ldr	r1, [r7, #28]
 80135fe:	4401      	add	r1, r0
 8013600:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013604:	4313      	orrs	r3, r2
 8013606:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	015a      	lsls	r2, r3, #5
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	4413      	add	r3, r2
 8013610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013614:	691a      	ldr	r2, [r3, #16]
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	691b      	ldr	r3, [r3, #16]
 801361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801361e:	69b9      	ldr	r1, [r7, #24]
 8013620:	0148      	lsls	r0, r1, #5
 8013622:	69f9      	ldr	r1, [r7, #28]
 8013624:	4401      	add	r1, r0
 8013626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801362a:	4313      	orrs	r3, r2
 801362c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	791b      	ldrb	r3, [r3, #4]
 8013632:	2b01      	cmp	r3, #1
 8013634:	d11f      	bne.n	8013676 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	015a      	lsls	r2, r3, #5
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	4413      	add	r3, r2
 801363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013642:	691b      	ldr	r3, [r3, #16]
 8013644:	69ba      	ldr	r2, [r7, #24]
 8013646:	0151      	lsls	r1, r2, #5
 8013648:	69fa      	ldr	r2, [r7, #28]
 801364a:	440a      	add	r2, r1
 801364c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013650:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013654:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	015a      	lsls	r2, r3, #5
 801365a:	69fb      	ldr	r3, [r7, #28]
 801365c:	4413      	add	r3, r2
 801365e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013662:	691b      	ldr	r3, [r3, #16]
 8013664:	69ba      	ldr	r2, [r7, #24]
 8013666:	0151      	lsls	r1, r2, #5
 8013668:	69fa      	ldr	r2, [r7, #28]
 801366a:	440a      	add	r2, r1
 801366c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013674:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	2b01      	cmp	r3, #1
 801367a:	d14b      	bne.n	8013714 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	69db      	ldr	r3, [r3, #28]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d009      	beq.n	8013698 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	015a      	lsls	r2, r3, #5
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	4413      	add	r3, r2
 801368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013690:	461a      	mov	r2, r3
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	69db      	ldr	r3, [r3, #28]
 8013696:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	791b      	ldrb	r3, [r3, #4]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d128      	bne.n	80136f2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136a6:	689b      	ldr	r3, [r3, #8]
 80136a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d110      	bne.n	80136d2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	015a      	lsls	r2, r3, #5
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	4413      	add	r3, r2
 80136b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	69ba      	ldr	r2, [r7, #24]
 80136c0:	0151      	lsls	r1, r2, #5
 80136c2:	69fa      	ldr	r2, [r7, #28]
 80136c4:	440a      	add	r2, r1
 80136c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80136ce:	6013      	str	r3, [r2, #0]
 80136d0:	e00f      	b.n	80136f2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	015a      	lsls	r2, r3, #5
 80136d6:	69fb      	ldr	r3, [r7, #28]
 80136d8:	4413      	add	r3, r2
 80136da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	69ba      	ldr	r2, [r7, #24]
 80136e2:	0151      	lsls	r1, r2, #5
 80136e4:	69fa      	ldr	r2, [r7, #28]
 80136e6:	440a      	add	r2, r1
 80136e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136f2:	69bb      	ldr	r3, [r7, #24]
 80136f4:	015a      	lsls	r2, r3, #5
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	4413      	add	r3, r2
 80136fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	69ba      	ldr	r2, [r7, #24]
 8013702:	0151      	lsls	r1, r2, #5
 8013704:	69fa      	ldr	r2, [r7, #28]
 8013706:	440a      	add	r2, r1
 8013708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801370c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013710:	6013      	str	r3, [r2, #0]
 8013712:	e16a      	b.n	80139ea <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013714:	69bb      	ldr	r3, [r7, #24]
 8013716:	015a      	lsls	r2, r3, #5
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	4413      	add	r3, r2
 801371c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	69ba      	ldr	r2, [r7, #24]
 8013724:	0151      	lsls	r1, r2, #5
 8013726:	69fa      	ldr	r2, [r7, #28]
 8013728:	440a      	add	r2, r1
 801372a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801372e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013732:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	791b      	ldrb	r3, [r3, #4]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d015      	beq.n	8013768 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	691b      	ldr	r3, [r3, #16]
 8013740:	2b00      	cmp	r3, #0
 8013742:	f000 8152 	beq.w	80139ea <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801374c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	f003 030f 	and.w	r3, r3, #15
 8013756:	2101      	movs	r1, #1
 8013758:	fa01 f303 	lsl.w	r3, r1, r3
 801375c:	69f9      	ldr	r1, [r7, #28]
 801375e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013762:	4313      	orrs	r3, r2
 8013764:	634b      	str	r3, [r1, #52]	; 0x34
 8013766:	e140      	b.n	80139ea <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801376e:	689b      	ldr	r3, [r3, #8]
 8013770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013774:	2b00      	cmp	r3, #0
 8013776:	d117      	bne.n	80137a8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	015a      	lsls	r2, r3, #5
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	4413      	add	r3, r2
 8013780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	69ba      	ldr	r2, [r7, #24]
 8013788:	0151      	lsls	r1, r2, #5
 801378a:	69fa      	ldr	r2, [r7, #28]
 801378c:	440a      	add	r2, r1
 801378e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013796:	6013      	str	r3, [r2, #0]
 8013798:	e016      	b.n	80137c8 <USB_EPStartXfer+0x308>
 801379a:	bf00      	nop
 801379c:	e007ffff 	.word	0xe007ffff
 80137a0:	fff80000 	.word	0xfff80000
 80137a4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	015a      	lsls	r2, r3, #5
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	4413      	add	r3, r2
 80137b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	69ba      	ldr	r2, [r7, #24]
 80137b8:	0151      	lsls	r1, r2, #5
 80137ba:	69fa      	ldr	r2, [r7, #28]
 80137bc:	440a      	add	r2, r1
 80137be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	68d9      	ldr	r1, [r3, #12]
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	781a      	ldrb	r2, [r3, #0]
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	691b      	ldr	r3, [r3, #16]
 80137d4:	b298      	uxth	r0, r3
 80137d6:	79fb      	ldrb	r3, [r7, #7]
 80137d8:	9300      	str	r3, [sp, #0]
 80137da:	4603      	mov	r3, r0
 80137dc:	68f8      	ldr	r0, [r7, #12]
 80137de:	f000 f9b9 	bl	8013b54 <USB_WritePacket>
 80137e2:	e102      	b.n	80139ea <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	015a      	lsls	r2, r3, #5
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	4413      	add	r3, r2
 80137ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137f0:	691a      	ldr	r2, [r3, #16]
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	0159      	lsls	r1, r3, #5
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	440b      	add	r3, r1
 80137fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fe:	4619      	mov	r1, r3
 8013800:	4b7c      	ldr	r3, [pc, #496]	; (80139f4 <USB_EPStartXfer+0x534>)
 8013802:	4013      	ands	r3, r2
 8013804:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	015a      	lsls	r2, r3, #5
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	4413      	add	r3, r2
 801380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013812:	691a      	ldr	r2, [r3, #16]
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	0159      	lsls	r1, r3, #5
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	440b      	add	r3, r1
 801381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013820:	4619      	mov	r1, r3
 8013822:	4b75      	ldr	r3, [pc, #468]	; (80139f8 <USB_EPStartXfer+0x538>)
 8013824:	4013      	ands	r3, r2
 8013826:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d12f      	bne.n	801388e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	691b      	ldr	r3, [r3, #16]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d003      	beq.n	801383e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	689a      	ldr	r2, [r3, #8]
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	689a      	ldr	r2, [r3, #8]
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	015a      	lsls	r2, r3, #5
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	4413      	add	r3, r2
 801384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013852:	691a      	ldr	r2, [r3, #16]
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	6a1b      	ldr	r3, [r3, #32]
 8013858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801385c:	69b9      	ldr	r1, [r7, #24]
 801385e:	0148      	lsls	r0, r1, #5
 8013860:	69f9      	ldr	r1, [r7, #28]
 8013862:	4401      	add	r1, r0
 8013864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013868:	4313      	orrs	r3, r2
 801386a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	015a      	lsls	r2, r3, #5
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	4413      	add	r3, r2
 8013874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	69ba      	ldr	r2, [r7, #24]
 801387c:	0151      	lsls	r1, r2, #5
 801387e:	69fa      	ldr	r2, [r7, #28]
 8013880:	440a      	add	r2, r1
 8013882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801388a:	6113      	str	r3, [r2, #16]
 801388c:	e05f      	b.n	801394e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	691b      	ldr	r3, [r3, #16]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d123      	bne.n	80138de <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	015a      	lsls	r2, r3, #5
 801389a:	69fb      	ldr	r3, [r7, #28]
 801389c:	4413      	add	r3, r2
 801389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a2:	691a      	ldr	r2, [r3, #16]
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138ac:	69b9      	ldr	r1, [r7, #24]
 80138ae:	0148      	lsls	r0, r1, #5
 80138b0:	69f9      	ldr	r1, [r7, #28]
 80138b2:	4401      	add	r1, r0
 80138b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138b8:	4313      	orrs	r3, r2
 80138ba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80138bc:	69bb      	ldr	r3, [r7, #24]
 80138be:	015a      	lsls	r2, r3, #5
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	4413      	add	r3, r2
 80138c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138c8:	691b      	ldr	r3, [r3, #16]
 80138ca:	69ba      	ldr	r2, [r7, #24]
 80138cc:	0151      	lsls	r1, r2, #5
 80138ce:	69fa      	ldr	r2, [r7, #28]
 80138d0:	440a      	add	r2, r1
 80138d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138da:	6113      	str	r3, [r2, #16]
 80138dc:	e037      	b.n	801394e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	691a      	ldr	r2, [r3, #16]
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	4413      	add	r3, r2
 80138e8:	1e5a      	subs	r2, r3, #1
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	689b      	ldr	r3, [r3, #8]
 80138ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80138f2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	689b      	ldr	r3, [r3, #8]
 80138f8:	8afa      	ldrh	r2, [r7, #22]
 80138fa:	fb03 f202 	mul.w	r2, r3, r2
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	015a      	lsls	r2, r3, #5
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	4413      	add	r3, r2
 801390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801390e:	691a      	ldr	r2, [r3, #16]
 8013910:	8afb      	ldrh	r3, [r7, #22]
 8013912:	04d9      	lsls	r1, r3, #19
 8013914:	4b39      	ldr	r3, [pc, #228]	; (80139fc <USB_EPStartXfer+0x53c>)
 8013916:	400b      	ands	r3, r1
 8013918:	69b9      	ldr	r1, [r7, #24]
 801391a:	0148      	lsls	r0, r1, #5
 801391c:	69f9      	ldr	r1, [r7, #28]
 801391e:	4401      	add	r1, r0
 8013920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013924:	4313      	orrs	r3, r2
 8013926:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	015a      	lsls	r2, r3, #5
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	4413      	add	r3, r2
 8013930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013934:	691a      	ldr	r2, [r3, #16]
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801393e:	69b9      	ldr	r1, [r7, #24]
 8013940:	0148      	lsls	r0, r1, #5
 8013942:	69f9      	ldr	r1, [r7, #28]
 8013944:	4401      	add	r1, r0
 8013946:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801394a:	4313      	orrs	r3, r2
 801394c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801394e:	79fb      	ldrb	r3, [r7, #7]
 8013950:	2b01      	cmp	r3, #1
 8013952:	d10d      	bne.n	8013970 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d009      	beq.n	8013970 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	68d9      	ldr	r1, [r3, #12]
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	015a      	lsls	r2, r3, #5
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	4413      	add	r3, r2
 8013968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801396c:	460a      	mov	r2, r1
 801396e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	791b      	ldrb	r3, [r3, #4]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d128      	bne.n	80139ca <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801397e:	689b      	ldr	r3, [r3, #8]
 8013980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013984:	2b00      	cmp	r3, #0
 8013986:	d110      	bne.n	80139aa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	015a      	lsls	r2, r3, #5
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	4413      	add	r3, r2
 8013990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	69ba      	ldr	r2, [r7, #24]
 8013998:	0151      	lsls	r1, r2, #5
 801399a:	69fa      	ldr	r2, [r7, #28]
 801399c:	440a      	add	r2, r1
 801399e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	e00f      	b.n	80139ca <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	015a      	lsls	r2, r3, #5
 80139ae:	69fb      	ldr	r3, [r7, #28]
 80139b0:	4413      	add	r3, r2
 80139b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	69ba      	ldr	r2, [r7, #24]
 80139ba:	0151      	lsls	r1, r2, #5
 80139bc:	69fa      	ldr	r2, [r7, #28]
 80139be:	440a      	add	r2, r1
 80139c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139c8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80139ca:	69bb      	ldr	r3, [r7, #24]
 80139cc:	015a      	lsls	r2, r3, #5
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	4413      	add	r3, r2
 80139d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	69ba      	ldr	r2, [r7, #24]
 80139da:	0151      	lsls	r1, r2, #5
 80139dc:	69fa      	ldr	r2, [r7, #28]
 80139de:	440a      	add	r2, r1
 80139e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80139e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139ea:	2300      	movs	r3, #0
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3720      	adds	r7, #32
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	fff80000 	.word	0xfff80000
 80139f8:	e007ffff 	.word	0xe007ffff
 80139fc:	1ff80000 	.word	0x1ff80000

08013a00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b087      	sub	sp, #28
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	785b      	ldrb	r3, [r3, #1]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d14a      	bne.n	8013ab4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	015a      	lsls	r2, r3, #5
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	4413      	add	r3, r2
 8013a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a36:	f040 8086 	bne.w	8013b46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	015a      	lsls	r2, r3, #5
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	4413      	add	r3, r2
 8013a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	7812      	ldrb	r2, [r2, #0]
 8013a4e:	0151      	lsls	r1, r2, #5
 8013a50:	693a      	ldr	r2, [r7, #16]
 8013a52:	440a      	add	r2, r1
 8013a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	015a      	lsls	r2, r3, #5
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	4413      	add	r3, r2
 8013a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	683a      	ldr	r2, [r7, #0]
 8013a70:	7812      	ldrb	r2, [r2, #0]
 8013a72:	0151      	lsls	r1, r2, #5
 8013a74:	693a      	ldr	r2, [r7, #16]
 8013a76:	440a      	add	r2, r1
 8013a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	3301      	adds	r3, #1
 8013a86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d902      	bls.n	8013a98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a92:	2301      	movs	r3, #1
 8013a94:	75fb      	strb	r3, [r7, #23]
          break;
 8013a96:	e056      	b.n	8013b46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	015a      	lsls	r2, r3, #5
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	4413      	add	r3, r2
 8013aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ab0:	d0e7      	beq.n	8013a82 <USB_EPStopXfer+0x82>
 8013ab2:	e048      	b.n	8013b46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	015a      	lsls	r2, r3, #5
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	4413      	add	r3, r2
 8013abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013acc:	d13b      	bne.n	8013b46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	015a      	lsls	r2, r3, #5
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	683a      	ldr	r2, [r7, #0]
 8013ae0:	7812      	ldrb	r2, [r2, #0]
 8013ae2:	0151      	lsls	r1, r2, #5
 8013ae4:	693a      	ldr	r2, [r7, #16]
 8013ae6:	440a      	add	r2, r1
 8013ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013aec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013af0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	015a      	lsls	r2, r3, #5
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	4413      	add	r3, r2
 8013afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	683a      	ldr	r2, [r7, #0]
 8013b04:	7812      	ldrb	r2, [r2, #0]
 8013b06:	0151      	lsls	r1, r2, #5
 8013b08:	693a      	ldr	r2, [r7, #16]
 8013b0a:	440a      	add	r2, r1
 8013b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	3301      	adds	r3, #1
 8013b1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d902      	bls.n	8013b2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013b26:	2301      	movs	r3, #1
 8013b28:	75fb      	strb	r3, [r7, #23]
          break;
 8013b2a:	e00c      	b.n	8013b46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	015a      	lsls	r2, r3, #5
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	4413      	add	r3, r2
 8013b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b44:	d0e7      	beq.n	8013b16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	371c      	adds	r7, #28
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b089      	sub	sp, #36	; 0x24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	4611      	mov	r1, r2
 8013b60:	461a      	mov	r2, r3
 8013b62:	460b      	mov	r3, r1
 8013b64:	71fb      	strb	r3, [r7, #7]
 8013b66:	4613      	mov	r3, r2
 8013b68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d123      	bne.n	8013bc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b7a:	88bb      	ldrh	r3, [r7, #4]
 8013b7c:	3303      	adds	r3, #3
 8013b7e:	089b      	lsrs	r3, r3, #2
 8013b80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b82:	2300      	movs	r3, #0
 8013b84:	61bb      	str	r3, [r7, #24]
 8013b86:	e018      	b.n	8013bba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b88:	79fb      	ldrb	r3, [r7, #7]
 8013b8a:	031a      	lsls	r2, r3, #12
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	4413      	add	r3, r2
 8013b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b94:	461a      	mov	r2, r3
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	3301      	adds	r3, #1
 8013bac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013bb4:	69bb      	ldr	r3, [r7, #24]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	61bb      	str	r3, [r7, #24]
 8013bba:	69ba      	ldr	r2, [r7, #24]
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d3e2      	bcc.n	8013b88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013bc2:	2300      	movs	r3, #0
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3724      	adds	r7, #36	; 0x24
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bce:	4770      	bx	lr

08013bd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b08b      	sub	sp, #44	; 0x2c
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	4613      	mov	r3, r2
 8013bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013be6:	88fb      	ldrh	r3, [r7, #6]
 8013be8:	089b      	lsrs	r3, r3, #2
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013bee:	88fb      	ldrh	r3, [r7, #6]
 8013bf0:	f003 0303 	and.w	r3, r3, #3
 8013bf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	623b      	str	r3, [r7, #32]
 8013bfa:	e014      	b.n	8013c26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013bfc:	69bb      	ldr	r3, [r7, #24]
 8013bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	601a      	str	r2, [r3, #0]
    pDest++;
 8013c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c10:	3301      	adds	r3, #1
 8013c12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c16:	3301      	adds	r3, #1
 8013c18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013c20:	6a3b      	ldr	r3, [r7, #32]
 8013c22:	3301      	adds	r3, #1
 8013c24:	623b      	str	r3, [r7, #32]
 8013c26:	6a3a      	ldr	r2, [r7, #32]
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d3e6      	bcc.n	8013bfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013c2e:	8bfb      	ldrh	r3, [r7, #30]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d01e      	beq.n	8013c72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013c34:	2300      	movs	r3, #0
 8013c36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013c3e:	461a      	mov	r2, r3
 8013c40:	f107 0310 	add.w	r3, r7, #16
 8013c44:	6812      	ldr	r2, [r2, #0]
 8013c46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013c48:	693a      	ldr	r2, [r7, #16]
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	fa22 f303 	lsr.w	r3, r2, r3
 8013c54:	b2da      	uxtb	r2, r3
 8013c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c58:	701a      	strb	r2, [r3, #0]
      i++;
 8013c5a:	6a3b      	ldr	r3, [r7, #32]
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c62:	3301      	adds	r3, #1
 8013c64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c66:	8bfb      	ldrh	r3, [r7, #30]
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c6c:	8bfb      	ldrh	r3, [r7, #30]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1ea      	bne.n	8013c48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	372c      	adds	r7, #44	; 0x2c
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr

08013c80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b085      	sub	sp, #20
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	785b      	ldrb	r3, [r3, #1]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d12c      	bne.n	8013cf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	015a      	lsls	r2, r3, #5
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	db12      	blt.n	8013cd4 <USB_EPSetStall+0x54>
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d00f      	beq.n	8013cd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	015a      	lsls	r2, r3, #5
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	4413      	add	r3, r2
 8013cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	68ba      	ldr	r2, [r7, #8]
 8013cc4:	0151      	lsls	r1, r2, #5
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	440a      	add	r2, r1
 8013cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	015a      	lsls	r2, r3, #5
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	4413      	add	r3, r2
 8013cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	68ba      	ldr	r2, [r7, #8]
 8013ce4:	0151      	lsls	r1, r2, #5
 8013ce6:	68fa      	ldr	r2, [r7, #12]
 8013ce8:	440a      	add	r2, r1
 8013cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cf2:	6013      	str	r3, [r2, #0]
 8013cf4:	e02b      	b.n	8013d4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	015a      	lsls	r2, r3, #5
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	db12      	blt.n	8013d2e <USB_EPSetStall+0xae>
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00f      	beq.n	8013d2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	015a      	lsls	r2, r3, #5
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	4413      	add	r3, r2
 8013d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	68ba      	ldr	r2, [r7, #8]
 8013d1e:	0151      	lsls	r1, r2, #5
 8013d20:	68fa      	ldr	r2, [r7, #12]
 8013d22:	440a      	add	r2, r1
 8013d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013d2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	015a      	lsls	r2, r3, #5
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	4413      	add	r3, r2
 8013d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	68ba      	ldr	r2, [r7, #8]
 8013d3e:	0151      	lsls	r1, r2, #5
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	440a      	add	r2, r1
 8013d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013d4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d4e:	2300      	movs	r3, #0
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3714      	adds	r7, #20
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr

08013d5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b085      	sub	sp, #20
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	785b      	ldrb	r3, [r3, #1]
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	d128      	bne.n	8013dca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	015a      	lsls	r2, r3, #5
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	4413      	add	r3, r2
 8013d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	0151      	lsls	r1, r2, #5
 8013d8a:	68fa      	ldr	r2, [r7, #12]
 8013d8c:	440a      	add	r2, r1
 8013d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	791b      	ldrb	r3, [r3, #4]
 8013d9c:	2b03      	cmp	r3, #3
 8013d9e:	d003      	beq.n	8013da8 <USB_EPClearStall+0x4c>
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	791b      	ldrb	r3, [r3, #4]
 8013da4:	2b02      	cmp	r3, #2
 8013da6:	d138      	bne.n	8013e1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	015a      	lsls	r2, r3, #5
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	4413      	add	r3, r2
 8013db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	68ba      	ldr	r2, [r7, #8]
 8013db8:	0151      	lsls	r1, r2, #5
 8013dba:	68fa      	ldr	r2, [r7, #12]
 8013dbc:	440a      	add	r2, r1
 8013dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dc6:	6013      	str	r3, [r2, #0]
 8013dc8:	e027      	b.n	8013e1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	015a      	lsls	r2, r3, #5
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	0151      	lsls	r1, r2, #5
 8013ddc:	68fa      	ldr	r2, [r7, #12]
 8013dde:	440a      	add	r2, r1
 8013de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013de8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	791b      	ldrb	r3, [r3, #4]
 8013dee:	2b03      	cmp	r3, #3
 8013df0:	d003      	beq.n	8013dfa <USB_EPClearStall+0x9e>
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	791b      	ldrb	r3, [r3, #4]
 8013df6:	2b02      	cmp	r3, #2
 8013df8:	d10f      	bne.n	8013e1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	015a      	lsls	r2, r3, #5
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	4413      	add	r3, r2
 8013e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	68ba      	ldr	r2, [r7, #8]
 8013e0a:	0151      	lsls	r1, r2, #5
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	440a      	add	r2, r1
 8013e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013e1a:	2300      	movs	r3, #0
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3714      	adds	r7, #20
 8013e20:	46bd      	mov	sp, r7
 8013e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e26:	4770      	bx	lr

08013e28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b085      	sub	sp, #20
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	460b      	mov	r3, r1
 8013e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013e4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	78fb      	ldrb	r3, [r7, #3]
 8013e56:	011b      	lsls	r3, r3, #4
 8013e58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e5c:	68f9      	ldr	r1, [r7, #12]
 8013e5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e62:	4313      	orrs	r3, r2
 8013e64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e66:	2300      	movs	r3, #0
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3714      	adds	r7, #20
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e72:	4770      	bx	lr

08013e74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	68fa      	ldr	r2, [r7, #12]
 8013e8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e8e:	f023 0303 	bic.w	r3, r3, #3
 8013e92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	68fa      	ldr	r2, [r7, #12]
 8013e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ea2:	f023 0302 	bic.w	r3, r3, #2
 8013ea6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013ea8:	2300      	movs	r3, #0
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3714      	adds	r7, #20
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb4:	4770      	bx	lr

08013eb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013eb6:	b480      	push	{r7}
 8013eb8:	b085      	sub	sp, #20
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ed0:	f023 0303 	bic.w	r3, r3, #3
 8013ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	68fa      	ldr	r2, [r7, #12]
 8013ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ee4:	f043 0302 	orr.w	r3, r3, #2
 8013ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013eea:	2300      	movs	r3, #0
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3714      	adds	r7, #20
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b085      	sub	sp, #20
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	695b      	ldr	r3, [r3, #20]
 8013f04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	699b      	ldr	r3, [r3, #24]
 8013f0a:	68fa      	ldr	r2, [r7, #12]
 8013f0c:	4013      	ands	r3, r2
 8013f0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013f10:	68fb      	ldr	r3, [r7, #12]
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3714      	adds	r7, #20
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr

08013f1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f1e:	b480      	push	{r7}
 8013f20:	b085      	sub	sp, #20
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f30:	699b      	ldr	r3, [r3, #24]
 8013f32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f3a:	69db      	ldr	r3, [r3, #28]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	4013      	ands	r3, r2
 8013f40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	0c1b      	lsrs	r3, r3, #16
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3714      	adds	r7, #20
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr

08013f52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f52:	b480      	push	{r7}
 8013f54:	b085      	sub	sp, #20
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f6e:	69db      	ldr	r3, [r3, #28]
 8013f70:	68ba      	ldr	r2, [r7, #8]
 8013f72:	4013      	ands	r3, r2
 8013f74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	b29b      	uxth	r3, r3
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3714      	adds	r7, #20
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr

08013f86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f86:	b480      	push	{r7}
 8013f88:	b085      	sub	sp, #20
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
 8013f8e:	460b      	mov	r3, r1
 8013f90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f96:	78fb      	ldrb	r3, [r7, #3]
 8013f98:	015a      	lsls	r2, r3, #5
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fa2:	689b      	ldr	r3, [r3, #8]
 8013fa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fac:	695b      	ldr	r3, [r3, #20]
 8013fae:	68ba      	ldr	r2, [r7, #8]
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fb4:	68bb      	ldr	r3, [r7, #8]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3714      	adds	r7, #20
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr

08013fc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013fc2:	b480      	push	{r7}
 8013fc4:	b087      	sub	sp, #28
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
 8013fca:	460b      	mov	r3, r1
 8013fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fd8:	691b      	ldr	r3, [r3, #16]
 8013fda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fe4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013fe6:	78fb      	ldrb	r3, [r7, #3]
 8013fe8:	f003 030f 	and.w	r3, r3, #15
 8013fec:	68fa      	ldr	r2, [r7, #12]
 8013fee:	fa22 f303 	lsr.w	r3, r2, r3
 8013ff2:	01db      	lsls	r3, r3, #7
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	693a      	ldr	r2, [r7, #16]
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ffc:	78fb      	ldrb	r3, [r7, #3]
 8013ffe:	015a      	lsls	r2, r3, #5
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	4413      	add	r3, r2
 8014004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014008:	689b      	ldr	r3, [r3, #8]
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	4013      	ands	r3, r2
 801400e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014010:	68bb      	ldr	r3, [r7, #8]
}
 8014012:	4618      	mov	r0, r3
 8014014:	371c      	adds	r7, #28
 8014016:	46bd      	mov	sp, r7
 8014018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401c:	4770      	bx	lr

0801401e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801401e:	b480      	push	{r7}
 8014020:	b083      	sub	sp, #12
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	695b      	ldr	r3, [r3, #20]
 801402a:	f003 0301 	and.w	r3, r3, #1
}
 801402e:	4618      	mov	r0, r3
 8014030:	370c      	adds	r7, #12
 8014032:	46bd      	mov	sp, r7
 8014034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014038:	4770      	bx	lr
	...

0801403c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801403c:	b480      	push	{r7}
 801403e:	b085      	sub	sp, #20
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014056:	4619      	mov	r1, r3
 8014058:	4b09      	ldr	r3, [pc, #36]	; (8014080 <USB_ActivateSetup+0x44>)
 801405a:	4013      	ands	r3, r2
 801405c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014070:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	3714      	adds	r7, #20
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr
 8014080:	fffff800 	.word	0xfffff800

08014084 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014084:	b480      	push	{r7}
 8014086:	b087      	sub	sp, #28
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	460b      	mov	r3, r1
 801408e:	607a      	str	r2, [r7, #4]
 8014090:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	333c      	adds	r3, #60	; 0x3c
 801409a:	3304      	adds	r3, #4
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	4a26      	ldr	r2, [pc, #152]	; (801413c <USB_EP0_OutStart+0xb8>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d90a      	bls.n	80140be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140b8:	d101      	bne.n	80140be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80140ba:	2300      	movs	r3, #0
 80140bc:	e037      	b.n	801412e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140c4:	461a      	mov	r2, r3
 80140c6:	2300      	movs	r3, #0
 80140c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140d0:	691b      	ldr	r3, [r3, #16]
 80140d2:	697a      	ldr	r2, [r7, #20]
 80140d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80140dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140e4:	691b      	ldr	r3, [r3, #16]
 80140e6:	697a      	ldr	r2, [r7, #20]
 80140e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140ec:	f043 0318 	orr.w	r3, r3, #24
 80140f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80140f2:	697b      	ldr	r3, [r7, #20]
 80140f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140f8:	691b      	ldr	r3, [r3, #16]
 80140fa:	697a      	ldr	r2, [r7, #20]
 80140fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014100:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014104:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014106:	7afb      	ldrb	r3, [r7, #11]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d10f      	bne.n	801412c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014112:	461a      	mov	r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	697a      	ldr	r2, [r7, #20]
 8014122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014126:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801412a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801412c:	2300      	movs	r3, #0
}
 801412e:	4618      	mov	r0, r3
 8014130:	371c      	adds	r7, #28
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop
 801413c:	4f54300a 	.word	0x4f54300a

08014140 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014140:	b480      	push	{r7}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014148:	2300      	movs	r3, #0
 801414a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	3301      	adds	r3, #1
 8014150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	4a13      	ldr	r2, [pc, #76]	; (80141a4 <USB_CoreReset+0x64>)
 8014156:	4293      	cmp	r3, r2
 8014158:	d901      	bls.n	801415e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801415a:	2303      	movs	r3, #3
 801415c:	e01b      	b.n	8014196 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	691b      	ldr	r3, [r3, #16]
 8014162:	2b00      	cmp	r3, #0
 8014164:	daf2      	bge.n	801414c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014166:	2300      	movs	r3, #0
 8014168:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	691b      	ldr	r3, [r3, #16]
 801416e:	f043 0201 	orr.w	r2, r3, #1
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	3301      	adds	r3, #1
 801417a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	4a09      	ldr	r2, [pc, #36]	; (80141a4 <USB_CoreReset+0x64>)
 8014180:	4293      	cmp	r3, r2
 8014182:	d901      	bls.n	8014188 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014184:	2303      	movs	r3, #3
 8014186:	e006      	b.n	8014196 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	f003 0301 	and.w	r3, r3, #1
 8014190:	2b01      	cmp	r3, #1
 8014192:	d0f0      	beq.n	8014176 <USB_CoreReset+0x36>

  return HAL_OK;
 8014194:	2300      	movs	r3, #0
}
 8014196:	4618      	mov	r0, r3
 8014198:	3714      	adds	r7, #20
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop
 80141a4:	00030d40 	.word	0x00030d40

080141a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80141ac:	4904      	ldr	r1, [pc, #16]	; (80141c0 <MX_FATFS_Init+0x18>)
 80141ae:	4805      	ldr	r0, [pc, #20]	; (80141c4 <MX_FATFS_Init+0x1c>)
 80141b0:	f002 fa56 	bl	8016660 <FATFS_LinkDriver>
 80141b4:	4603      	mov	r3, r0
 80141b6:	461a      	mov	r2, r3
 80141b8:	4b03      	ldr	r3, [pc, #12]	; (80141c8 <MX_FATFS_Init+0x20>)
 80141ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80141bc:	bf00      	nop
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	240015d8 	.word	0x240015d8
 80141c4:	0801861c 	.word	0x0801861c
 80141c8:	240015d4 	.word	0x240015d4

080141cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80141d2:	2300      	movs	r3, #0
 80141d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80141d6:	f000 f885 	bl	80142e4 <BSP_SD_IsDetected>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b01      	cmp	r3, #1
 80141de:	d001      	beq.n	80141e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80141e0:	2302      	movs	r3, #2
 80141e2:	e012      	b.n	801420a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80141e4:	480b      	ldr	r0, [pc, #44]	; (8014214 <BSP_SD_Init+0x48>)
 80141e6:	f7f8 ff41 	bl	800d06c <HAL_SD_Init>
 80141ea:	4603      	mov	r3, r0
 80141ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80141ee:	79fb      	ldrb	r3, [r7, #7]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d109      	bne.n	8014208 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80141f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141f8:	4806      	ldr	r0, [pc, #24]	; (8014214 <BSP_SD_Init+0x48>)
 80141fa:	f7f9 fdf7 	bl	800ddec <HAL_SD_ConfigWideBusOperation>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d001      	beq.n	8014208 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014204:	2301      	movs	r3, #1
 8014206:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014208:	79fb      	ldrb	r3, [r7, #7]
}
 801420a:	4618      	mov	r0, r3
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	24000ebc 	.word	0x24000ebc

08014218 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b086      	sub	sp, #24
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014224:	2300      	movs	r3, #0
 8014226:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	68ba      	ldr	r2, [r7, #8]
 801422c:	68f9      	ldr	r1, [r7, #12]
 801422e:	4806      	ldr	r0, [pc, #24]	; (8014248 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014230:	f7f9 f83c 	bl	800d2ac <HAL_SD_ReadBlocks_DMA>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d001      	beq.n	801423e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801423a:	2301      	movs	r3, #1
 801423c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3718      	adds	r7, #24
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	24000ebc 	.word	0x24000ebc

0801424c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b086      	sub	sp, #24
 8014250:	af00      	add	r7, sp, #0
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014258:	2300      	movs	r3, #0
 801425a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	68ba      	ldr	r2, [r7, #8]
 8014260:	68f9      	ldr	r1, [r7, #12]
 8014262:	4806      	ldr	r0, [pc, #24]	; (801427c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014264:	f7f9 f8ca 	bl	800d3fc <HAL_SD_WriteBlocks_DMA>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d001      	beq.n	8014272 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801426e:	2301      	movs	r3, #1
 8014270:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014272:	7dfb      	ldrb	r3, [r7, #23]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3718      	adds	r7, #24
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	24000ebc 	.word	0x24000ebc

08014280 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014284:	4805      	ldr	r0, [pc, #20]	; (801429c <BSP_SD_GetCardState+0x1c>)
 8014286:	f7f9 fec3 	bl	800e010 <HAL_SD_GetCardState>
 801428a:	4603      	mov	r3, r0
 801428c:	2b04      	cmp	r3, #4
 801428e:	bf14      	ite	ne
 8014290:	2301      	movne	r3, #1
 8014292:	2300      	moveq	r3, #0
 8014294:	b2db      	uxtb	r3, r3
}
 8014296:	4618      	mov	r0, r3
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	24000ebc 	.word	0x24000ebc

080142a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80142a8:	6879      	ldr	r1, [r7, #4]
 80142aa:	4803      	ldr	r0, [pc, #12]	; (80142b8 <BSP_SD_GetCardInfo+0x18>)
 80142ac:	f7f9 fd72 	bl	800dd94 <HAL_SD_GetCardInfo>
}
 80142b0:	bf00      	nop
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	24000ebc 	.word	0x24000ebc

080142bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80142c4:	f000 f9a0 	bl	8014608 <BSP_SD_WriteCpltCallback>
}
 80142c8:	bf00      	nop
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80142d8:	f000 f9a2 	bl	8014620 <BSP_SD_ReadCpltCallback>
}
 80142dc:	bf00      	nop
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80142ea:	2301      	movs	r3, #1
 80142ec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80142ee:	f000 f80b 	bl	8014308 <BSP_PlatformIsDetected>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d101      	bne.n	80142fc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80142f8:	2300      	movs	r3, #0
 80142fa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80142fc:	79fb      	ldrb	r3, [r7, #7]
 80142fe:	b2db      	uxtb	r3, r3
}
 8014300:	4618      	mov	r0, r3
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801430e:	2301      	movs	r3, #1
 8014310:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014312:	2104      	movs	r1, #4
 8014314:	4806      	ldr	r0, [pc, #24]	; (8014330 <BSP_PlatformIsDetected+0x28>)
 8014316:	f7f3 fe7d 	bl	8008014 <HAL_GPIO_ReadPin>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d001      	beq.n	8014324 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014320:	2300      	movs	r3, #0
 8014322:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014324:	79fb      	ldrb	r3, [r7, #7]
}
 8014326:	4618      	mov	r0, r3
 8014328:	3708      	adds	r7, #8
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	58020400 	.word	0x58020400

08014334 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801433c:	f7ef fbc4 	bl	8003ac8 <HAL_GetTick>
 8014340:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014342:	e006      	b.n	8014352 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014344:	f7ff ff9c 	bl	8014280 <BSP_SD_GetCardState>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	d101      	bne.n	8014352 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801434e:	2300      	movs	r3, #0
 8014350:	e009      	b.n	8014366 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014352:	f7ef fbb9 	bl	8003ac8 <HAL_GetTick>
 8014356:	4602      	mov	r2, r0
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	1ad3      	subs	r3, r2, r3
 801435c:	687a      	ldr	r2, [r7, #4]
 801435e:	429a      	cmp	r2, r3
 8014360:	d8f0      	bhi.n	8014344 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014366:	4618      	mov	r0, r3
 8014368:	3710      	adds	r7, #16
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
	...

08014370 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	4603      	mov	r3, r0
 8014378:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801437a:	4b0b      	ldr	r3, [pc, #44]	; (80143a8 <SD_CheckStatus+0x38>)
 801437c:	2201      	movs	r2, #1
 801437e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014380:	f7ff ff7e 	bl	8014280 <BSP_SD_GetCardState>
 8014384:	4603      	mov	r3, r0
 8014386:	2b00      	cmp	r3, #0
 8014388:	d107      	bne.n	801439a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801438a:	4b07      	ldr	r3, [pc, #28]	; (80143a8 <SD_CheckStatus+0x38>)
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	b2db      	uxtb	r3, r3
 8014390:	f023 0301 	bic.w	r3, r3, #1
 8014394:	b2da      	uxtb	r2, r3
 8014396:	4b04      	ldr	r3, [pc, #16]	; (80143a8 <SD_CheckStatus+0x38>)
 8014398:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801439a:	4b03      	ldr	r3, [pc, #12]	; (80143a8 <SD_CheckStatus+0x38>)
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	b2db      	uxtb	r3, r3
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	2400000d 	.word	0x2400000d

080143ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4603      	mov	r3, r0
 80143b4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80143b6:	f7ff ff09 	bl	80141cc <BSP_SD_Init>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d107      	bne.n	80143d0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80143c0:	79fb      	ldrb	r3, [r7, #7]
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7ff ffd4 	bl	8014370 <SD_CheckStatus>
 80143c8:	4603      	mov	r3, r0
 80143ca:	461a      	mov	r2, r3
 80143cc:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <SD_initialize+0x34>)
 80143ce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80143d0:	4b03      	ldr	r3, [pc, #12]	; (80143e0 <SD_initialize+0x34>)
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	b2db      	uxtb	r3, r3
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	2400000d 	.word	0x2400000d

080143e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	4603      	mov	r3, r0
 80143ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80143ee:	79fb      	ldrb	r3, [r7, #7]
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7ff ffbd 	bl	8014370 <SD_CheckStatus>
 80143f6:	4603      	mov	r3, r0
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b086      	sub	sp, #24
 8014404:	af00      	add	r7, sp, #0
 8014406:	60b9      	str	r1, [r7, #8]
 8014408:	607a      	str	r2, [r7, #4]
 801440a:	603b      	str	r3, [r7, #0]
 801440c:	4603      	mov	r3, r0
 801440e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014410:	2301      	movs	r3, #1
 8014412:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014414:	f247 5030 	movw	r0, #30000	; 0x7530
 8014418:	f7ff ff8c 	bl	8014334 <SD_CheckStatusWithTimeout>
 801441c:	4603      	mov	r3, r0
 801441e:	2b00      	cmp	r3, #0
 8014420:	da01      	bge.n	8014426 <SD_read+0x26>
  {
    return res;
 8014422:	7dfb      	ldrb	r3, [r7, #23]
 8014424:	e03b      	b.n	801449e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014426:	683a      	ldr	r2, [r7, #0]
 8014428:	6879      	ldr	r1, [r7, #4]
 801442a:	68b8      	ldr	r0, [r7, #8]
 801442c:	f7ff fef4 	bl	8014218 <BSP_SD_ReadBlocks_DMA>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d132      	bne.n	801449c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014436:	4b1c      	ldr	r3, [pc, #112]	; (80144a8 <SD_read+0xa8>)
 8014438:	2200      	movs	r2, #0
 801443a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801443c:	f7ef fb44 	bl	8003ac8 <HAL_GetTick>
 8014440:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014442:	bf00      	nop
 8014444:	4b18      	ldr	r3, [pc, #96]	; (80144a8 <SD_read+0xa8>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d108      	bne.n	801445e <SD_read+0x5e>
 801444c:	f7ef fb3c 	bl	8003ac8 <HAL_GetTick>
 8014450:	4602      	mov	r2, r0
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	1ad3      	subs	r3, r2, r3
 8014456:	f247 522f 	movw	r2, #29999	; 0x752f
 801445a:	4293      	cmp	r3, r2
 801445c:	d9f2      	bls.n	8014444 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801445e:	4b12      	ldr	r3, [pc, #72]	; (80144a8 <SD_read+0xa8>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d102      	bne.n	801446c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014466:	2301      	movs	r3, #1
 8014468:	75fb      	strb	r3, [r7, #23]
 801446a:	e017      	b.n	801449c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801446c:	4b0e      	ldr	r3, [pc, #56]	; (80144a8 <SD_read+0xa8>)
 801446e:	2200      	movs	r2, #0
 8014470:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014472:	f7ef fb29 	bl	8003ac8 <HAL_GetTick>
 8014476:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014478:	e007      	b.n	801448a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801447a:	f7ff ff01 	bl	8014280 <BSP_SD_GetCardState>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d102      	bne.n	801448a <SD_read+0x8a>
          {
            res = RES_OK;
 8014484:	2300      	movs	r3, #0
 8014486:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014488:	e008      	b.n	801449c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801448a:	f7ef fb1d 	bl	8003ac8 <HAL_GetTick>
 801448e:	4602      	mov	r2, r0
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	1ad3      	subs	r3, r2, r3
 8014494:	f247 522f 	movw	r2, #29999	; 0x752f
 8014498:	4293      	cmp	r3, r2
 801449a:	d9ee      	bls.n	801447a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801449c:	7dfb      	ldrb	r3, [r7, #23]
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3718      	adds	r7, #24
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	240015e0 	.word	0x240015e0

080144ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b086      	sub	sp, #24
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60b9      	str	r1, [r7, #8]
 80144b4:	607a      	str	r2, [r7, #4]
 80144b6:	603b      	str	r3, [r7, #0]
 80144b8:	4603      	mov	r3, r0
 80144ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80144bc:	2301      	movs	r3, #1
 80144be:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80144c0:	4b24      	ldr	r3, [pc, #144]	; (8014554 <SD_write+0xa8>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80144c6:	f247 5030 	movw	r0, #30000	; 0x7530
 80144ca:	f7ff ff33 	bl	8014334 <SD_CheckStatusWithTimeout>
 80144ce:	4603      	mov	r3, r0
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	da01      	bge.n	80144d8 <SD_write+0x2c>
  {
    return res;
 80144d4:	7dfb      	ldrb	r3, [r7, #23]
 80144d6:	e038      	b.n	801454a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80144d8:	683a      	ldr	r2, [r7, #0]
 80144da:	6879      	ldr	r1, [r7, #4]
 80144dc:	68b8      	ldr	r0, [r7, #8]
 80144de:	f7ff feb5 	bl	801424c <BSP_SD_WriteBlocks_DMA>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d12f      	bne.n	8014548 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80144e8:	f7ef faee 	bl	8003ac8 <HAL_GetTick>
 80144ec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80144ee:	bf00      	nop
 80144f0:	4b18      	ldr	r3, [pc, #96]	; (8014554 <SD_write+0xa8>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d108      	bne.n	801450a <SD_write+0x5e>
 80144f8:	f7ef fae6 	bl	8003ac8 <HAL_GetTick>
 80144fc:	4602      	mov	r2, r0
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	1ad3      	subs	r3, r2, r3
 8014502:	f247 522f 	movw	r2, #29999	; 0x752f
 8014506:	4293      	cmp	r3, r2
 8014508:	d9f2      	bls.n	80144f0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801450a:	4b12      	ldr	r3, [pc, #72]	; (8014554 <SD_write+0xa8>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014512:	2301      	movs	r3, #1
 8014514:	75fb      	strb	r3, [r7, #23]
 8014516:	e017      	b.n	8014548 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014518:	4b0e      	ldr	r3, [pc, #56]	; (8014554 <SD_write+0xa8>)
 801451a:	2200      	movs	r2, #0
 801451c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801451e:	f7ef fad3 	bl	8003ac8 <HAL_GetTick>
 8014522:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014524:	e007      	b.n	8014536 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014526:	f7ff feab 	bl	8014280 <BSP_SD_GetCardState>
 801452a:	4603      	mov	r3, r0
 801452c:	2b00      	cmp	r3, #0
 801452e:	d102      	bne.n	8014536 <SD_write+0x8a>
          {
            res = RES_OK;
 8014530:	2300      	movs	r3, #0
 8014532:	75fb      	strb	r3, [r7, #23]
            break;
 8014534:	e008      	b.n	8014548 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014536:	f7ef fac7 	bl	8003ac8 <HAL_GetTick>
 801453a:	4602      	mov	r2, r0
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	1ad3      	subs	r3, r2, r3
 8014540:	f247 522f 	movw	r2, #29999	; 0x752f
 8014544:	4293      	cmp	r3, r2
 8014546:	d9ee      	bls.n	8014526 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014548:	7dfb      	ldrb	r3, [r7, #23]
}
 801454a:	4618      	mov	r0, r3
 801454c:	3718      	adds	r7, #24
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	240015dc 	.word	0x240015dc

08014558 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b08c      	sub	sp, #48	; 0x30
 801455c:	af00      	add	r7, sp, #0
 801455e:	4603      	mov	r3, r0
 8014560:	603a      	str	r2, [r7, #0]
 8014562:	71fb      	strb	r3, [r7, #7]
 8014564:	460b      	mov	r3, r1
 8014566:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014568:	2301      	movs	r3, #1
 801456a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801456e:	4b25      	ldr	r3, [pc, #148]	; (8014604 <SD_ioctl+0xac>)
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	b2db      	uxtb	r3, r3
 8014574:	f003 0301 	and.w	r3, r3, #1
 8014578:	2b00      	cmp	r3, #0
 801457a:	d001      	beq.n	8014580 <SD_ioctl+0x28>
 801457c:	2303      	movs	r3, #3
 801457e:	e03c      	b.n	80145fa <SD_ioctl+0xa2>

  switch (cmd)
 8014580:	79bb      	ldrb	r3, [r7, #6]
 8014582:	2b03      	cmp	r3, #3
 8014584:	d834      	bhi.n	80145f0 <SD_ioctl+0x98>
 8014586:	a201      	add	r2, pc, #4	; (adr r2, 801458c <SD_ioctl+0x34>)
 8014588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801458c:	0801459d 	.word	0x0801459d
 8014590:	080145a5 	.word	0x080145a5
 8014594:	080145bd 	.word	0x080145bd
 8014598:	080145d7 	.word	0x080145d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801459c:	2300      	movs	r3, #0
 801459e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145a2:	e028      	b.n	80145f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80145a4:	f107 0308 	add.w	r3, r7, #8
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7ff fe79 	bl	80142a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80145ae:	6a3a      	ldr	r2, [r7, #32]
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145ba:	e01c      	b.n	80145f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80145bc:	f107 0308 	add.w	r3, r7, #8
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7ff fe6d 	bl	80142a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80145c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80145ce:	2300      	movs	r3, #0
 80145d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145d4:	e00f      	b.n	80145f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80145d6:	f107 0308 	add.w	r3, r7, #8
 80145da:	4618      	mov	r0, r3
 80145dc:	f7ff fe60 	bl	80142a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80145e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e2:	0a5a      	lsrs	r2, r3, #9
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80145e8:	2300      	movs	r3, #0
 80145ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80145ee:	e002      	b.n	80145f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80145f0:	2304      	movs	r3, #4
 80145f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80145f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3730      	adds	r7, #48	; 0x30
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	2400000d 	.word	0x2400000d

08014608 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014608:	b480      	push	{r7}
 801460a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801460c:	4b03      	ldr	r3, [pc, #12]	; (801461c <BSP_SD_WriteCpltCallback+0x14>)
 801460e:	2201      	movs	r2, #1
 8014610:	601a      	str	r2, [r3, #0]
}
 8014612:	bf00      	nop
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr
 801461c:	240015dc 	.word	0x240015dc

08014620 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014620:	b480      	push	{r7}
 8014622:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014624:	4b03      	ldr	r3, [pc, #12]	; (8014634 <BSP_SD_ReadCpltCallback+0x14>)
 8014626:	2201      	movs	r2, #1
 8014628:	601a      	str	r2, [r3, #0]
}
 801462a:	bf00      	nop
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr
 8014634:	240015e0 	.word	0x240015e0

08014638 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	460b      	mov	r3, r1
 8014642:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014644:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014648:	f002 fd00 	bl	801704c <USBD_static_malloc>
 801464c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d109      	bne.n	8014668 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	32b0      	adds	r2, #176	; 0xb0
 801465e:	2100      	movs	r1, #0
 8014660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014664:	2302      	movs	r3, #2
 8014666:	e0d4      	b.n	8014812 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014668:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801466c:	2100      	movs	r1, #0
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f002 fd7e 	bl	8017170 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	32b0      	adds	r2, #176	; 0xb0
 801467e:	68f9      	ldr	r1, [r7, #12]
 8014680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	32b0      	adds	r2, #176	; 0xb0
 801468e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	7c1b      	ldrb	r3, [r3, #16]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d138      	bne.n	8014712 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146a0:	4b5e      	ldr	r3, [pc, #376]	; (801481c <USBD_CDC_Init+0x1e4>)
 80146a2:	7819      	ldrb	r1, [r3, #0]
 80146a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146a8:	2202      	movs	r2, #2
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f002 fbab 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146b0:	4b5a      	ldr	r3, [pc, #360]	; (801481c <USBD_CDC_Init+0x1e4>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	f003 020f 	and.w	r2, r3, #15
 80146b8:	6879      	ldr	r1, [r7, #4]
 80146ba:	4613      	mov	r3, r2
 80146bc:	009b      	lsls	r3, r3, #2
 80146be:	4413      	add	r3, r2
 80146c0:	009b      	lsls	r3, r3, #2
 80146c2:	440b      	add	r3, r1
 80146c4:	3324      	adds	r3, #36	; 0x24
 80146c6:	2201      	movs	r2, #1
 80146c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146ca:	4b55      	ldr	r3, [pc, #340]	; (8014820 <USBD_CDC_Init+0x1e8>)
 80146cc:	7819      	ldrb	r1, [r3, #0]
 80146ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146d2:	2202      	movs	r2, #2
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f002 fb96 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80146da:	4b51      	ldr	r3, [pc, #324]	; (8014820 <USBD_CDC_Init+0x1e8>)
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	f003 020f 	and.w	r2, r3, #15
 80146e2:	6879      	ldr	r1, [r7, #4]
 80146e4:	4613      	mov	r3, r2
 80146e6:	009b      	lsls	r3, r3, #2
 80146e8:	4413      	add	r3, r2
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	440b      	add	r3, r1
 80146ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146f2:	2201      	movs	r2, #1
 80146f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80146f6:	4b4b      	ldr	r3, [pc, #300]	; (8014824 <USBD_CDC_Init+0x1ec>)
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	f003 020f 	and.w	r2, r3, #15
 80146fe:	6879      	ldr	r1, [r7, #4]
 8014700:	4613      	mov	r3, r2
 8014702:	009b      	lsls	r3, r3, #2
 8014704:	4413      	add	r3, r2
 8014706:	009b      	lsls	r3, r3, #2
 8014708:	440b      	add	r3, r1
 801470a:	3326      	adds	r3, #38	; 0x26
 801470c:	2210      	movs	r2, #16
 801470e:	801a      	strh	r2, [r3, #0]
 8014710:	e035      	b.n	801477e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014712:	4b42      	ldr	r3, [pc, #264]	; (801481c <USBD_CDC_Init+0x1e4>)
 8014714:	7819      	ldrb	r1, [r3, #0]
 8014716:	2340      	movs	r3, #64	; 0x40
 8014718:	2202      	movs	r2, #2
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f002 fb73 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014720:	4b3e      	ldr	r3, [pc, #248]	; (801481c <USBD_CDC_Init+0x1e4>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	f003 020f 	and.w	r2, r3, #15
 8014728:	6879      	ldr	r1, [r7, #4]
 801472a:	4613      	mov	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	4413      	add	r3, r2
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	440b      	add	r3, r1
 8014734:	3324      	adds	r3, #36	; 0x24
 8014736:	2201      	movs	r2, #1
 8014738:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801473a:	4b39      	ldr	r3, [pc, #228]	; (8014820 <USBD_CDC_Init+0x1e8>)
 801473c:	7819      	ldrb	r1, [r3, #0]
 801473e:	2340      	movs	r3, #64	; 0x40
 8014740:	2202      	movs	r2, #2
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f002 fb5f 	bl	8016e06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014748:	4b35      	ldr	r3, [pc, #212]	; (8014820 <USBD_CDC_Init+0x1e8>)
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	f003 020f 	and.w	r2, r3, #15
 8014750:	6879      	ldr	r1, [r7, #4]
 8014752:	4613      	mov	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4413      	add	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	440b      	add	r3, r1
 801475c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014760:	2201      	movs	r2, #1
 8014762:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014764:	4b2f      	ldr	r3, [pc, #188]	; (8014824 <USBD_CDC_Init+0x1ec>)
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	f003 020f 	and.w	r2, r3, #15
 801476c:	6879      	ldr	r1, [r7, #4]
 801476e:	4613      	mov	r3, r2
 8014770:	009b      	lsls	r3, r3, #2
 8014772:	4413      	add	r3, r2
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	440b      	add	r3, r1
 8014778:	3326      	adds	r3, #38	; 0x26
 801477a:	2210      	movs	r2, #16
 801477c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801477e:	4b29      	ldr	r3, [pc, #164]	; (8014824 <USBD_CDC_Init+0x1ec>)
 8014780:	7819      	ldrb	r1, [r3, #0]
 8014782:	2308      	movs	r3, #8
 8014784:	2203      	movs	r2, #3
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f002 fb3d 	bl	8016e06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801478c:	4b25      	ldr	r3, [pc, #148]	; (8014824 <USBD_CDC_Init+0x1ec>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	f003 020f 	and.w	r2, r3, #15
 8014794:	6879      	ldr	r1, [r7, #4]
 8014796:	4613      	mov	r3, r2
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	4413      	add	r3, r2
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	440b      	add	r3, r1
 80147a0:	3324      	adds	r3, #36	; 0x24
 80147a2:	2201      	movs	r2, #1
 80147a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	2200      	movs	r2, #0
 80147aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147b4:	687a      	ldr	r2, [r7, #4]
 80147b6:	33b0      	adds	r3, #176	; 0xb0
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	4413      	add	r3, r2
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	2200      	movs	r2, #0
 80147c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2200      	movs	r2, #0
 80147ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d101      	bne.n	80147e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80147dc:	2302      	movs	r3, #2
 80147de:	e018      	b.n	8014812 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	7c1b      	ldrb	r3, [r3, #16]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d10a      	bne.n	80147fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147e8:	4b0d      	ldr	r3, [pc, #52]	; (8014820 <USBD_CDC_Init+0x1e8>)
 80147ea:	7819      	ldrb	r1, [r3, #0]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f002 fbf4 	bl	8016fe4 <USBD_LL_PrepareReceive>
 80147fc:	e008      	b.n	8014810 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147fe:	4b08      	ldr	r3, [pc, #32]	; (8014820 <USBD_CDC_Init+0x1e8>)
 8014800:	7819      	ldrb	r1, [r3, #0]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014808:	2340      	movs	r3, #64	; 0x40
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f002 fbea 	bl	8016fe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014810:	2300      	movs	r3, #0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	24000097 	.word	0x24000097
 8014820:	24000098 	.word	0x24000098
 8014824:	24000099 	.word	0x24000099

08014828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	460b      	mov	r3, r1
 8014832:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014834:	4b3a      	ldr	r3, [pc, #232]	; (8014920 <USBD_CDC_DeInit+0xf8>)
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	4619      	mov	r1, r3
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f002 fb09 	bl	8016e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014840:	4b37      	ldr	r3, [pc, #220]	; (8014920 <USBD_CDC_DeInit+0xf8>)
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	f003 020f 	and.w	r2, r3, #15
 8014848:	6879      	ldr	r1, [r7, #4]
 801484a:	4613      	mov	r3, r2
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	4413      	add	r3, r2
 8014850:	009b      	lsls	r3, r3, #2
 8014852:	440b      	add	r3, r1
 8014854:	3324      	adds	r3, #36	; 0x24
 8014856:	2200      	movs	r2, #0
 8014858:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801485a:	4b32      	ldr	r3, [pc, #200]	; (8014924 <USBD_CDC_DeInit+0xfc>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	4619      	mov	r1, r3
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f002 faf6 	bl	8016e52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014866:	4b2f      	ldr	r3, [pc, #188]	; (8014924 <USBD_CDC_DeInit+0xfc>)
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	f003 020f 	and.w	r2, r3, #15
 801486e:	6879      	ldr	r1, [r7, #4]
 8014870:	4613      	mov	r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	440b      	add	r3, r1
 801487a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801487e:	2200      	movs	r2, #0
 8014880:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014882:	4b29      	ldr	r3, [pc, #164]	; (8014928 <USBD_CDC_DeInit+0x100>)
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	4619      	mov	r1, r3
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f002 fae2 	bl	8016e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801488e:	4b26      	ldr	r3, [pc, #152]	; (8014928 <USBD_CDC_DeInit+0x100>)
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	f003 020f 	and.w	r2, r3, #15
 8014896:	6879      	ldr	r1, [r7, #4]
 8014898:	4613      	mov	r3, r2
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	4413      	add	r3, r2
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	440b      	add	r3, r1
 80148a2:	3324      	adds	r3, #36	; 0x24
 80148a4:	2200      	movs	r2, #0
 80148a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80148a8:	4b1f      	ldr	r3, [pc, #124]	; (8014928 <USBD_CDC_DeInit+0x100>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	f003 020f 	and.w	r2, r3, #15
 80148b0:	6879      	ldr	r1, [r7, #4]
 80148b2:	4613      	mov	r3, r2
 80148b4:	009b      	lsls	r3, r3, #2
 80148b6:	4413      	add	r3, r2
 80148b8:	009b      	lsls	r3, r3, #2
 80148ba:	440b      	add	r3, r1
 80148bc:	3326      	adds	r3, #38	; 0x26
 80148be:	2200      	movs	r2, #0
 80148c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	32b0      	adds	r2, #176	; 0xb0
 80148cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d01f      	beq.n	8014914 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148da:	687a      	ldr	r2, [r7, #4]
 80148dc:	33b0      	adds	r3, #176	; 0xb0
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	4413      	add	r3, r2
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	32b0      	adds	r2, #176	; 0xb0
 80148f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f6:	4618      	mov	r0, r3
 80148f8:	f002 fbb6 	bl	8017068 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	32b0      	adds	r2, #176	; 0xb0
 8014906:	2100      	movs	r1, #0
 8014908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2200      	movs	r2, #0
 8014910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014914:	2300      	movs	r3, #0
}
 8014916:	4618      	mov	r0, r3
 8014918:	3708      	adds	r7, #8
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	24000097 	.word	0x24000097
 8014924:	24000098 	.word	0x24000098
 8014928:	24000099 	.word	0x24000099

0801492c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	32b0      	adds	r2, #176	; 0xb0
 8014940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014944:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014946:	2300      	movs	r3, #0
 8014948:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801494a:	2300      	movs	r3, #0
 801494c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801494e:	2300      	movs	r3, #0
 8014950:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d101      	bne.n	801495c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014958:	2303      	movs	r3, #3
 801495a:	e0bf      	b.n	8014adc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014964:	2b00      	cmp	r3, #0
 8014966:	d050      	beq.n	8014a0a <USBD_CDC_Setup+0xde>
 8014968:	2b20      	cmp	r3, #32
 801496a:	f040 80af 	bne.w	8014acc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	88db      	ldrh	r3, [r3, #6]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d03a      	beq.n	80149ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	b25b      	sxtb	r3, r3
 801497c:	2b00      	cmp	r3, #0
 801497e:	da1b      	bge.n	80149b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014986:	687a      	ldr	r2, [r7, #4]
 8014988:	33b0      	adds	r3, #176	; 0xb0
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	4413      	add	r3, r2
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	689b      	ldr	r3, [r3, #8]
 8014992:	683a      	ldr	r2, [r7, #0]
 8014994:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014996:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014998:	683a      	ldr	r2, [r7, #0]
 801499a:	88d2      	ldrh	r2, [r2, #6]
 801499c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	88db      	ldrh	r3, [r3, #6]
 80149a2:	2b07      	cmp	r3, #7
 80149a4:	bf28      	it	cs
 80149a6:	2307      	movcs	r3, #7
 80149a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	89fa      	ldrh	r2, [r7, #14]
 80149ae:	4619      	mov	r1, r3
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f001 fd89 	bl	80164c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80149b6:	e090      	b.n	8014ada <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	785a      	ldrb	r2, [r3, #1]
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	88db      	ldrh	r3, [r3, #6]
 80149c6:	2b3f      	cmp	r3, #63	; 0x3f
 80149c8:	d803      	bhi.n	80149d2 <USBD_CDC_Setup+0xa6>
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	88db      	ldrh	r3, [r3, #6]
 80149ce:	b2da      	uxtb	r2, r3
 80149d0:	e000      	b.n	80149d4 <USBD_CDC_Setup+0xa8>
 80149d2:	2240      	movs	r2, #64	; 0x40
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80149da:	6939      	ldr	r1, [r7, #16]
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80149e2:	461a      	mov	r2, r3
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f001 fd9b 	bl	8016520 <USBD_CtlPrepareRx>
      break;
 80149ea:	e076      	b.n	8014ada <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149f2:	687a      	ldr	r2, [r7, #4]
 80149f4:	33b0      	adds	r3, #176	; 0xb0
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	4413      	add	r3, r2
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	689b      	ldr	r3, [r3, #8]
 80149fe:	683a      	ldr	r2, [r7, #0]
 8014a00:	7850      	ldrb	r0, [r2, #1]
 8014a02:	2200      	movs	r2, #0
 8014a04:	6839      	ldr	r1, [r7, #0]
 8014a06:	4798      	blx	r3
      break;
 8014a08:	e067      	b.n	8014ada <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	785b      	ldrb	r3, [r3, #1]
 8014a0e:	2b0b      	cmp	r3, #11
 8014a10:	d851      	bhi.n	8014ab6 <USBD_CDC_Setup+0x18a>
 8014a12:	a201      	add	r2, pc, #4	; (adr r2, 8014a18 <USBD_CDC_Setup+0xec>)
 8014a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a18:	08014a49 	.word	0x08014a49
 8014a1c:	08014ac5 	.word	0x08014ac5
 8014a20:	08014ab7 	.word	0x08014ab7
 8014a24:	08014ab7 	.word	0x08014ab7
 8014a28:	08014ab7 	.word	0x08014ab7
 8014a2c:	08014ab7 	.word	0x08014ab7
 8014a30:	08014ab7 	.word	0x08014ab7
 8014a34:	08014ab7 	.word	0x08014ab7
 8014a38:	08014ab7 	.word	0x08014ab7
 8014a3c:	08014ab7 	.word	0x08014ab7
 8014a40:	08014a73 	.word	0x08014a73
 8014a44:	08014a9d 	.word	0x08014a9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	2b03      	cmp	r3, #3
 8014a52:	d107      	bne.n	8014a64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a54:	f107 030a 	add.w	r3, r7, #10
 8014a58:	2202      	movs	r2, #2
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f001 fd33 	bl	80164c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a62:	e032      	b.n	8014aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a64:	6839      	ldr	r1, [r7, #0]
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f001 fcbd 	bl	80163e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a6c:	2303      	movs	r3, #3
 8014a6e:	75fb      	strb	r3, [r7, #23]
          break;
 8014a70:	e02b      	b.n	8014aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	2b03      	cmp	r3, #3
 8014a7c:	d107      	bne.n	8014a8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a7e:	f107 030d 	add.w	r3, r7, #13
 8014a82:	2201      	movs	r2, #1
 8014a84:	4619      	mov	r1, r3
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f001 fd1e 	bl	80164c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a8c:	e01d      	b.n	8014aca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a8e:	6839      	ldr	r1, [r7, #0]
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f001 fca8 	bl	80163e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a96:	2303      	movs	r3, #3
 8014a98:	75fb      	strb	r3, [r7, #23]
          break;
 8014a9a:	e016      	b.n	8014aca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	2b03      	cmp	r3, #3
 8014aa6:	d00f      	beq.n	8014ac8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014aa8:	6839      	ldr	r1, [r7, #0]
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f001 fc9b 	bl	80163e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014ab0:	2303      	movs	r3, #3
 8014ab2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014ab4:	e008      	b.n	8014ac8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014ab6:	6839      	ldr	r1, [r7, #0]
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f001 fc94 	bl	80163e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8014abe:	2303      	movs	r3, #3
 8014ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8014ac2:	e002      	b.n	8014aca <USBD_CDC_Setup+0x19e>
          break;
 8014ac4:	bf00      	nop
 8014ac6:	e008      	b.n	8014ada <USBD_CDC_Setup+0x1ae>
          break;
 8014ac8:	bf00      	nop
      }
      break;
 8014aca:	e006      	b.n	8014ada <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014acc:	6839      	ldr	r1, [r7, #0]
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f001 fc89 	bl	80163e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8014ad4:	2303      	movs	r3, #3
 8014ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8014ad8:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3718      	adds	r7, #24
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	460b      	mov	r3, r1
 8014aee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	32b0      	adds	r2, #176	; 0xb0
 8014b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d101      	bne.n	8014b0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014b0a:	2303      	movs	r3, #3
 8014b0c:	e065      	b.n	8014bda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	32b0      	adds	r2, #176	; 0xb0
 8014b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b1e:	78fb      	ldrb	r3, [r7, #3]
 8014b20:	f003 020f 	and.w	r2, r3, #15
 8014b24:	6879      	ldr	r1, [r7, #4]
 8014b26:	4613      	mov	r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	4413      	add	r3, r2
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	440b      	add	r3, r1
 8014b30:	3318      	adds	r3, #24
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d02f      	beq.n	8014b98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014b38:	78fb      	ldrb	r3, [r7, #3]
 8014b3a:	f003 020f 	and.w	r2, r3, #15
 8014b3e:	6879      	ldr	r1, [r7, #4]
 8014b40:	4613      	mov	r3, r2
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	4413      	add	r3, r2
 8014b46:	009b      	lsls	r3, r3, #2
 8014b48:	440b      	add	r3, r1
 8014b4a:	3318      	adds	r3, #24
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	78fb      	ldrb	r3, [r7, #3]
 8014b50:	f003 010f 	and.w	r1, r3, #15
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	460b      	mov	r3, r1
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	440b      	add	r3, r1
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4403      	add	r3, r0
 8014b60:	3344      	adds	r3, #68	; 0x44
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b68:	fb01 f303 	mul.w	r3, r1, r3
 8014b6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d112      	bne.n	8014b98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014b72:	78fb      	ldrb	r3, [r7, #3]
 8014b74:	f003 020f 	and.w	r2, r3, #15
 8014b78:	6879      	ldr	r1, [r7, #4]
 8014b7a:	4613      	mov	r3, r2
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	4413      	add	r3, r2
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	440b      	add	r3, r1
 8014b84:	3318      	adds	r3, #24
 8014b86:	2200      	movs	r2, #0
 8014b88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b8a:	78f9      	ldrb	r1, [r7, #3]
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	2200      	movs	r2, #0
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f002 fa06 	bl	8016fa2 <USBD_LL_Transmit>
 8014b96:	e01f      	b.n	8014bd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	33b0      	adds	r3, #176	; 0xb0
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	4413      	add	r3, r2
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	691b      	ldr	r3, [r3, #16]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d010      	beq.n	8014bd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	33b0      	adds	r3, #176	; 0xb0
 8014bc0:	009b      	lsls	r3, r3, #2
 8014bc2:	4413      	add	r3, r2
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	691b      	ldr	r3, [r3, #16]
 8014bc8:	68ba      	ldr	r2, [r7, #8]
 8014bca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014bce:	68ba      	ldr	r2, [r7, #8]
 8014bd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014bd4:	78fa      	ldrb	r2, [r7, #3]
 8014bd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014bd8:	2300      	movs	r3, #0
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3710      	adds	r7, #16
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}

08014be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014be2:	b580      	push	{r7, lr}
 8014be4:	b084      	sub	sp, #16
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
 8014bea:	460b      	mov	r3, r1
 8014bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	32b0      	adds	r2, #176	; 0xb0
 8014bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	32b0      	adds	r2, #176	; 0xb0
 8014c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014c10:	2303      	movs	r3, #3
 8014c12:	e01a      	b.n	8014c4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014c14:	78fb      	ldrb	r3, [r7, #3]
 8014c16:	4619      	mov	r1, r3
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f002 fa04 	bl	8017026 <USBD_LL_GetRxDataSize>
 8014c1e:	4602      	mov	r2, r0
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	33b0      	adds	r3, #176	; 0xb0
 8014c30:	009b      	lsls	r3, r3, #2
 8014c32:	4413      	add	r3, r2
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	68db      	ldr	r3, [r3, #12]
 8014c38:	68fa      	ldr	r2, [r7, #12]
 8014c3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014c3e:	68fa      	ldr	r2, [r7, #12]
 8014c40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014c44:	4611      	mov	r1, r2
 8014c46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014c48:	2300      	movs	r3, #0
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c52:	b580      	push	{r7, lr}
 8014c54:	b084      	sub	sp, #16
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	32b0      	adds	r2, #176	; 0xb0
 8014c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d101      	bne.n	8014c74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c70:	2303      	movs	r3, #3
 8014c72:	e025      	b.n	8014cc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c7a:	687a      	ldr	r2, [r7, #4]
 8014c7c:	33b0      	adds	r3, #176	; 0xb0
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	4413      	add	r3, r2
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d01a      	beq.n	8014cbe <USBD_CDC_EP0_RxReady+0x6c>
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c8e:	2bff      	cmp	r3, #255	; 0xff
 8014c90:	d015      	beq.n	8014cbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	33b0      	adds	r3, #176	; 0xb0
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	4413      	add	r3, r2
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	689b      	ldr	r3, [r3, #8]
 8014ca4:	68fa      	ldr	r2, [r7, #12]
 8014ca6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014caa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014cac:	68fa      	ldr	r2, [r7, #12]
 8014cae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014cb2:	b292      	uxth	r2, r2
 8014cb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	22ff      	movs	r2, #255	; 0xff
 8014cba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3710      	adds	r7, #16
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014cd0:	2182      	movs	r1, #130	; 0x82
 8014cd2:	4818      	ldr	r0, [pc, #96]	; (8014d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014cd4:	f000 fd4f 	bl	8015776 <USBD_GetEpDesc>
 8014cd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014cda:	2101      	movs	r1, #1
 8014cdc:	4815      	ldr	r0, [pc, #84]	; (8014d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014cde:	f000 fd4a 	bl	8015776 <USBD_GetEpDesc>
 8014ce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ce4:	2181      	movs	r1, #129	; 0x81
 8014ce6:	4813      	ldr	r0, [pc, #76]	; (8014d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ce8:	f000 fd45 	bl	8015776 <USBD_GetEpDesc>
 8014cec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d002      	beq.n	8014cfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	2210      	movs	r2, #16
 8014cf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d006      	beq.n	8014d0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	2200      	movs	r2, #0
 8014d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d08:	711a      	strb	r2, [r3, #4]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d006      	beq.n	8014d22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d1c:	711a      	strb	r2, [r3, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2243      	movs	r2, #67	; 0x43
 8014d26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d28:	4b02      	ldr	r3, [pc, #8]	; (8014d34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3718      	adds	r7, #24
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}
 8014d32:	bf00      	nop
 8014d34:	24000054 	.word	0x24000054

08014d38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d40:	2182      	movs	r1, #130	; 0x82
 8014d42:	4818      	ldr	r0, [pc, #96]	; (8014da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d44:	f000 fd17 	bl	8015776 <USBD_GetEpDesc>
 8014d48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d4a:	2101      	movs	r1, #1
 8014d4c:	4815      	ldr	r0, [pc, #84]	; (8014da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d4e:	f000 fd12 	bl	8015776 <USBD_GetEpDesc>
 8014d52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d54:	2181      	movs	r1, #129	; 0x81
 8014d56:	4813      	ldr	r0, [pc, #76]	; (8014da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d58:	f000 fd0d 	bl	8015776 <USBD_GetEpDesc>
 8014d5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d002      	beq.n	8014d6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	2210      	movs	r2, #16
 8014d68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d006      	beq.n	8014d7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d70:	693b      	ldr	r3, [r7, #16]
 8014d72:	2200      	movs	r2, #0
 8014d74:	711a      	strb	r2, [r3, #4]
 8014d76:	2200      	movs	r2, #0
 8014d78:	f042 0202 	orr.w	r2, r2, #2
 8014d7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d006      	beq.n	8014d92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2200      	movs	r2, #0
 8014d88:	711a      	strb	r2, [r3, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f042 0202 	orr.w	r2, r2, #2
 8014d90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2243      	movs	r2, #67	; 0x43
 8014d96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d98:	4b02      	ldr	r3, [pc, #8]	; (8014da4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3718      	adds	r7, #24
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop
 8014da4:	24000054 	.word	0x24000054

08014da8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b086      	sub	sp, #24
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014db0:	2182      	movs	r1, #130	; 0x82
 8014db2:	4818      	ldr	r0, [pc, #96]	; (8014e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014db4:	f000 fcdf 	bl	8015776 <USBD_GetEpDesc>
 8014db8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014dba:	2101      	movs	r1, #1
 8014dbc:	4815      	ldr	r0, [pc, #84]	; (8014e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014dbe:	f000 fcda 	bl	8015776 <USBD_GetEpDesc>
 8014dc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014dc4:	2181      	movs	r1, #129	; 0x81
 8014dc6:	4813      	ldr	r0, [pc, #76]	; (8014e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014dc8:	f000 fcd5 	bl	8015776 <USBD_GetEpDesc>
 8014dcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d002      	beq.n	8014dda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	2210      	movs	r2, #16
 8014dd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d006      	beq.n	8014dee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	2200      	movs	r2, #0
 8014de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014de8:	711a      	strb	r2, [r3, #4]
 8014dea:	2200      	movs	r2, #0
 8014dec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d006      	beq.n	8014e02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2200      	movs	r2, #0
 8014df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014dfc:	711a      	strb	r2, [r3, #4]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2243      	movs	r2, #67	; 0x43
 8014e06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014e08:	4b02      	ldr	r3, [pc, #8]	; (8014e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3718      	adds	r7, #24
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	24000054 	.word	0x24000054

08014e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	220a      	movs	r2, #10
 8014e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014e26:	4b03      	ldr	r3, [pc, #12]	; (8014e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	370c      	adds	r7, #12
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e32:	4770      	bx	lr
 8014e34:	24000010 	.word	0x24000010

08014e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d101      	bne.n	8014e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014e48:	2303      	movs	r3, #3
 8014e4a:	e009      	b.n	8014e60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	33b0      	adds	r3, #176	; 0xb0
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	4413      	add	r3, r2
 8014e5a:	683a      	ldr	r2, [r7, #0]
 8014e5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e5e:	2300      	movs	r3, #0
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b087      	sub	sp, #28
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	32b0      	adds	r2, #176	; 0xb0
 8014e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d101      	bne.n	8014e92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e8e:	2303      	movs	r3, #3
 8014e90:	e008      	b.n	8014ea4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e92:	697b      	ldr	r3, [r7, #20]
 8014e94:	68ba      	ldr	r2, [r7, #8]
 8014e96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	687a      	ldr	r2, [r7, #4]
 8014e9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014ea2:	2300      	movs	r3, #0
}
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	371c      	adds	r7, #28
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr

08014eb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b085      	sub	sp, #20
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	32b0      	adds	r2, #176	; 0xb0
 8014ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d101      	bne.n	8014ed4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014ed0:	2303      	movs	r3, #3
 8014ed2:	e004      	b.n	8014ede <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	683a      	ldr	r2, [r7, #0]
 8014ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014edc:	2300      	movs	r3, #0
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3714      	adds	r7, #20
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee8:	4770      	bx	lr
	...

08014eec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	32b0      	adds	r2, #176	; 0xb0
 8014efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014f04:	2301      	movs	r3, #1
 8014f06:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d101      	bne.n	8014f12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014f0e:	2303      	movs	r3, #3
 8014f10:	e025      	b.n	8014f5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d11f      	bne.n	8014f5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014f24:	4b10      	ldr	r3, [pc, #64]	; (8014f68 <USBD_CDC_TransmitPacket+0x7c>)
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	f003 020f 	and.w	r2, r3, #15
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	4613      	mov	r3, r2
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	4413      	add	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4403      	add	r3, r0
 8014f3e:	3318      	adds	r3, #24
 8014f40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014f42:	4b09      	ldr	r3, [pc, #36]	; (8014f68 <USBD_CDC_TransmitPacket+0x7c>)
 8014f44:	7819      	ldrb	r1, [r3, #0]
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f002 f825 	bl	8016fa2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3710      	adds	r7, #16
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	24000097 	.word	0x24000097

08014f6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	32b0      	adds	r2, #176	; 0xb0
 8014f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	32b0      	adds	r2, #176	; 0xb0
 8014f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d101      	bne.n	8014f9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f96:	2303      	movs	r3, #3
 8014f98:	e018      	b.n	8014fcc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	7c1b      	ldrb	r3, [r3, #16]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10a      	bne.n	8014fb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014fa2:	4b0c      	ldr	r3, [pc, #48]	; (8014fd4 <USBD_CDC_ReceivePacket+0x68>)
 8014fa4:	7819      	ldrb	r1, [r3, #0]
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f002 f817 	bl	8016fe4 <USBD_LL_PrepareReceive>
 8014fb6:	e008      	b.n	8014fca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014fb8:	4b06      	ldr	r3, [pc, #24]	; (8014fd4 <USBD_CDC_ReceivePacket+0x68>)
 8014fba:	7819      	ldrb	r1, [r3, #0]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014fc2:	2340      	movs	r3, #64	; 0x40
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f002 f80d 	bl	8016fe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3710      	adds	r7, #16
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	24000098 	.word	0x24000098

08014fd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b086      	sub	sp, #24
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	4613      	mov	r3, r2
 8014fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d101      	bne.n	8014ff0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014fec:	2303      	movs	r3, #3
 8014fee:	e01f      	b.n	8015030 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2200      	movs	r2, #0
 8014ffc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	2200      	movs	r2, #0
 8015004:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d003      	beq.n	8015016 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	68ba      	ldr	r2, [r7, #8]
 8015012:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	2201      	movs	r2, #1
 801501a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	79fa      	ldrb	r2, [r7, #7]
 8015022:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f001 fe81 	bl	8016d2c <USBD_LL_Init>
 801502a:	4603      	mov	r3, r0
 801502c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015030:	4618      	mov	r0, r3
 8015032:	3718      	adds	r7, #24
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}

08015038 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b084      	sub	sp, #16
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015042:	2300      	movs	r3, #0
 8015044:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d101      	bne.n	8015050 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801504c:	2303      	movs	r3, #3
 801504e:	e025      	b.n	801509c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	683a      	ldr	r2, [r7, #0]
 8015054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	32ae      	adds	r2, #174	; 0xae
 8015062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015068:	2b00      	cmp	r3, #0
 801506a:	d00f      	beq.n	801508c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	32ae      	adds	r2, #174	; 0xae
 8015076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801507c:	f107 020e 	add.w	r2, r7, #14
 8015080:	4610      	mov	r0, r2
 8015082:	4798      	blx	r3
 8015084:	4602      	mov	r2, r0
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015092:	1c5a      	adds	r2, r3, #1
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801509a:	2300      	movs	r3, #0
}
 801509c:	4618      	mov	r0, r3
 801509e:	3710      	adds	r7, #16
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f001 fe8f 	bl	8016dd0 <USBD_LL_Start>
 80150b2:	4603      	mov	r3, r0
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3708      	adds	r7, #8
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80150c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	370c      	adds	r7, #12
 80150ca:	46bd      	mov	sp, r7
 80150cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d0:	4770      	bx	lr

080150d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150d2:	b580      	push	{r7, lr}
 80150d4:	b084      	sub	sp, #16
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	6078      	str	r0, [r7, #4]
 80150da:	460b      	mov	r3, r1
 80150dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150de:	2300      	movs	r3, #0
 80150e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d009      	beq.n	8015100 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	78fa      	ldrb	r2, [r7, #3]
 80150f6:	4611      	mov	r1, r2
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	4798      	blx	r3
 80150fc:	4603      	mov	r3, r0
 80150fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015100:	7bfb      	ldrb	r3, [r7, #15]
}
 8015102:	4618      	mov	r0, r3
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b084      	sub	sp, #16
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
 8015112:	460b      	mov	r3, r1
 8015114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015116:	2300      	movs	r3, #0
 8015118:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	78fa      	ldrb	r2, [r7, #3]
 8015124:	4611      	mov	r1, r2
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	4798      	blx	r3
 801512a:	4603      	mov	r3, r0
 801512c:	2b00      	cmp	r3, #0
 801512e:	d001      	beq.n	8015134 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015130:	2303      	movs	r3, #3
 8015132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015134:	7bfb      	ldrb	r3, [r7, #15]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}

0801513e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801513e:	b580      	push	{r7, lr}
 8015140:	b084      	sub	sp, #16
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
 8015146:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801514e:	6839      	ldr	r1, [r7, #0]
 8015150:	4618      	mov	r0, r3
 8015152:	f001 f90e 	bl	8016372 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2201      	movs	r2, #1
 801515a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015164:	461a      	mov	r2, r3
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015172:	f003 031f 	and.w	r3, r3, #31
 8015176:	2b02      	cmp	r3, #2
 8015178:	d01a      	beq.n	80151b0 <USBD_LL_SetupStage+0x72>
 801517a:	2b02      	cmp	r3, #2
 801517c:	d822      	bhi.n	80151c4 <USBD_LL_SetupStage+0x86>
 801517e:	2b00      	cmp	r3, #0
 8015180:	d002      	beq.n	8015188 <USBD_LL_SetupStage+0x4a>
 8015182:	2b01      	cmp	r3, #1
 8015184:	d00a      	beq.n	801519c <USBD_LL_SetupStage+0x5e>
 8015186:	e01d      	b.n	80151c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801518e:	4619      	mov	r1, r3
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f000 fb65 	bl	8015860 <USBD_StdDevReq>
 8015196:	4603      	mov	r3, r0
 8015198:	73fb      	strb	r3, [r7, #15]
      break;
 801519a:	e020      	b.n	80151de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151a2:	4619      	mov	r1, r3
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f000 fbcd 	bl	8015944 <USBD_StdItfReq>
 80151aa:	4603      	mov	r3, r0
 80151ac:	73fb      	strb	r3, [r7, #15]
      break;
 80151ae:	e016      	b.n	80151de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80151b6:	4619      	mov	r1, r3
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	f000 fc2f 	bl	8015a1c <USBD_StdEPReq>
 80151be:	4603      	mov	r3, r0
 80151c0:	73fb      	strb	r3, [r7, #15]
      break;
 80151c2:	e00c      	b.n	80151de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	4619      	mov	r1, r3
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f001 fe5c 	bl	8016e90 <USBD_LL_StallEP>
 80151d8:	4603      	mov	r3, r0
 80151da:	73fb      	strb	r3, [r7, #15]
      break;
 80151dc:	bf00      	nop
  }

  return ret;
 80151de:	7bfb      	ldrb	r3, [r7, #15]
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b086      	sub	sp, #24
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	460b      	mov	r3, r1
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80151f6:	2300      	movs	r3, #0
 80151f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151fa:	7afb      	ldrb	r3, [r7, #11]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d16e      	bne.n	80152de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801520e:	2b03      	cmp	r3, #3
 8015210:	f040 8098 	bne.w	8015344 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	689a      	ldr	r2, [r3, #8]
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	429a      	cmp	r2, r3
 801521e:	d913      	bls.n	8015248 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	689a      	ldr	r2, [r3, #8]
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	1ad2      	subs	r2, r2, r3
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	68da      	ldr	r2, [r3, #12]
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	689b      	ldr	r3, [r3, #8]
 8015236:	4293      	cmp	r3, r2
 8015238:	bf28      	it	cs
 801523a:	4613      	movcs	r3, r2
 801523c:	461a      	mov	r2, r3
 801523e:	6879      	ldr	r1, [r7, #4]
 8015240:	68f8      	ldr	r0, [r7, #12]
 8015242:	f001 f98a 	bl	801655a <USBD_CtlContinueRx>
 8015246:	e07d      	b.n	8015344 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801524e:	f003 031f 	and.w	r3, r3, #31
 8015252:	2b02      	cmp	r3, #2
 8015254:	d014      	beq.n	8015280 <USBD_LL_DataOutStage+0x98>
 8015256:	2b02      	cmp	r3, #2
 8015258:	d81d      	bhi.n	8015296 <USBD_LL_DataOutStage+0xae>
 801525a:	2b00      	cmp	r3, #0
 801525c:	d002      	beq.n	8015264 <USBD_LL_DataOutStage+0x7c>
 801525e:	2b01      	cmp	r3, #1
 8015260:	d003      	beq.n	801526a <USBD_LL_DataOutStage+0x82>
 8015262:	e018      	b.n	8015296 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015264:	2300      	movs	r3, #0
 8015266:	75bb      	strb	r3, [r7, #22]
            break;
 8015268:	e018      	b.n	801529c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015270:	b2db      	uxtb	r3, r3
 8015272:	4619      	mov	r1, r3
 8015274:	68f8      	ldr	r0, [r7, #12]
 8015276:	f000 fa64 	bl	8015742 <USBD_CoreFindIF>
 801527a:	4603      	mov	r3, r0
 801527c:	75bb      	strb	r3, [r7, #22]
            break;
 801527e:	e00d      	b.n	801529c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015286:	b2db      	uxtb	r3, r3
 8015288:	4619      	mov	r1, r3
 801528a:	68f8      	ldr	r0, [r7, #12]
 801528c:	f000 fa66 	bl	801575c <USBD_CoreFindEP>
 8015290:	4603      	mov	r3, r0
 8015292:	75bb      	strb	r3, [r7, #22]
            break;
 8015294:	e002      	b.n	801529c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015296:	2300      	movs	r3, #0
 8015298:	75bb      	strb	r3, [r7, #22]
            break;
 801529a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801529c:	7dbb      	ldrb	r3, [r7, #22]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d119      	bne.n	80152d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	2b03      	cmp	r3, #3
 80152ac:	d113      	bne.n	80152d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80152ae:	7dba      	ldrb	r2, [r7, #22]
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	32ae      	adds	r2, #174	; 0xae
 80152b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152b8:	691b      	ldr	r3, [r3, #16]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d00b      	beq.n	80152d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80152be:	7dba      	ldrb	r2, [r7, #22]
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80152c6:	7dba      	ldrb	r2, [r7, #22]
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	32ae      	adds	r2, #174	; 0xae
 80152cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d0:	691b      	ldr	r3, [r3, #16]
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80152d6:	68f8      	ldr	r0, [r7, #12]
 80152d8:	f001 f950 	bl	801657c <USBD_CtlSendStatus>
 80152dc:	e032      	b.n	8015344 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80152de:	7afb      	ldrb	r3, [r7, #11]
 80152e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152e4:	b2db      	uxtb	r3, r3
 80152e6:	4619      	mov	r1, r3
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f000 fa37 	bl	801575c <USBD_CoreFindEP>
 80152ee:	4603      	mov	r3, r0
 80152f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152f2:	7dbb      	ldrb	r3, [r7, #22]
 80152f4:	2bff      	cmp	r3, #255	; 0xff
 80152f6:	d025      	beq.n	8015344 <USBD_LL_DataOutStage+0x15c>
 80152f8:	7dbb      	ldrb	r3, [r7, #22]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d122      	bne.n	8015344 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015304:	b2db      	uxtb	r3, r3
 8015306:	2b03      	cmp	r3, #3
 8015308:	d117      	bne.n	801533a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801530a:	7dba      	ldrb	r2, [r7, #22]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	32ae      	adds	r2, #174	; 0xae
 8015310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015314:	699b      	ldr	r3, [r3, #24]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d00f      	beq.n	801533a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801531a:	7dba      	ldrb	r2, [r7, #22]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015322:	7dba      	ldrb	r2, [r7, #22]
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	32ae      	adds	r2, #174	; 0xae
 8015328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801532c:	699b      	ldr	r3, [r3, #24]
 801532e:	7afa      	ldrb	r2, [r7, #11]
 8015330:	4611      	mov	r1, r2
 8015332:	68f8      	ldr	r0, [r7, #12]
 8015334:	4798      	blx	r3
 8015336:	4603      	mov	r3, r0
 8015338:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801533a:	7dfb      	ldrb	r3, [r7, #23]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d001      	beq.n	8015344 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015340:	7dfb      	ldrb	r3, [r7, #23]
 8015342:	e000      	b.n	8015346 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015344:	2300      	movs	r3, #0
}
 8015346:	4618      	mov	r0, r3
 8015348:	3718      	adds	r7, #24
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}

0801534e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801534e:	b580      	push	{r7, lr}
 8015350:	b086      	sub	sp, #24
 8015352:	af00      	add	r7, sp, #0
 8015354:	60f8      	str	r0, [r7, #12]
 8015356:	460b      	mov	r3, r1
 8015358:	607a      	str	r2, [r7, #4]
 801535a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801535c:	7afb      	ldrb	r3, [r7, #11]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d16f      	bne.n	8015442 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	3314      	adds	r3, #20
 8015366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801536e:	2b02      	cmp	r3, #2
 8015370:	d15a      	bne.n	8015428 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	689a      	ldr	r2, [r3, #8]
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	429a      	cmp	r2, r3
 801537c:	d914      	bls.n	80153a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	689a      	ldr	r2, [r3, #8]
 8015382:	693b      	ldr	r3, [r7, #16]
 8015384:	68db      	ldr	r3, [r3, #12]
 8015386:	1ad2      	subs	r2, r2, r3
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	689b      	ldr	r3, [r3, #8]
 8015390:	461a      	mov	r2, r3
 8015392:	6879      	ldr	r1, [r7, #4]
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f001 f8b2 	bl	80164fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801539a:	2300      	movs	r3, #0
 801539c:	2200      	movs	r2, #0
 801539e:	2100      	movs	r1, #0
 80153a0:	68f8      	ldr	r0, [r7, #12]
 80153a2:	f001 fe1f 	bl	8016fe4 <USBD_LL_PrepareReceive>
 80153a6:	e03f      	b.n	8015428 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	68da      	ldr	r2, [r3, #12]
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	689b      	ldr	r3, [r3, #8]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d11c      	bne.n	80153ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	685a      	ldr	r2, [r3, #4]
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80153bc:	429a      	cmp	r2, r3
 80153be:	d316      	bcc.n	80153ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	685a      	ldr	r2, [r3, #4]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d20f      	bcs.n	80153ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80153ce:	2200      	movs	r2, #0
 80153d0:	2100      	movs	r1, #0
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f001 f893 	bl	80164fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	2200      	movs	r2, #0
 80153dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153e0:	2300      	movs	r3, #0
 80153e2:	2200      	movs	r2, #0
 80153e4:	2100      	movs	r1, #0
 80153e6:	68f8      	ldr	r0, [r7, #12]
 80153e8:	f001 fdfc 	bl	8016fe4 <USBD_LL_PrepareReceive>
 80153ec:	e01c      	b.n	8015428 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153f4:	b2db      	uxtb	r3, r3
 80153f6:	2b03      	cmp	r3, #3
 80153f8:	d10f      	bne.n	801541a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d009      	beq.n	801541a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2200      	movs	r2, #0
 801540a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015414:	68db      	ldr	r3, [r3, #12]
 8015416:	68f8      	ldr	r0, [r7, #12]
 8015418:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801541a:	2180      	movs	r1, #128	; 0x80
 801541c:	68f8      	ldr	r0, [r7, #12]
 801541e:	f001 fd37 	bl	8016e90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f001 f8bd 	bl	80165a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801542e:	2b00      	cmp	r3, #0
 8015430:	d03a      	beq.n	80154a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015432:	68f8      	ldr	r0, [r7, #12]
 8015434:	f7ff fe42 	bl	80150bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	2200      	movs	r2, #0
 801543c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015440:	e032      	b.n	80154a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015442:	7afb      	ldrb	r3, [r7, #11]
 8015444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015448:	b2db      	uxtb	r3, r3
 801544a:	4619      	mov	r1, r3
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f000 f985 	bl	801575c <USBD_CoreFindEP>
 8015452:	4603      	mov	r3, r0
 8015454:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015456:	7dfb      	ldrb	r3, [r7, #23]
 8015458:	2bff      	cmp	r3, #255	; 0xff
 801545a:	d025      	beq.n	80154a8 <USBD_LL_DataInStage+0x15a>
 801545c:	7dfb      	ldrb	r3, [r7, #23]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d122      	bne.n	80154a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015468:	b2db      	uxtb	r3, r3
 801546a:	2b03      	cmp	r3, #3
 801546c:	d11c      	bne.n	80154a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801546e:	7dfa      	ldrb	r2, [r7, #23]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	32ae      	adds	r2, #174	; 0xae
 8015474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015478:	695b      	ldr	r3, [r3, #20]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d014      	beq.n	80154a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801547e:	7dfa      	ldrb	r2, [r7, #23]
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015486:	7dfa      	ldrb	r2, [r7, #23]
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	32ae      	adds	r2, #174	; 0xae
 801548c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015490:	695b      	ldr	r3, [r3, #20]
 8015492:	7afa      	ldrb	r2, [r7, #11]
 8015494:	4611      	mov	r1, r2
 8015496:	68f8      	ldr	r0, [r7, #12]
 8015498:	4798      	blx	r3
 801549a:	4603      	mov	r3, r0
 801549c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801549e:	7dbb      	ldrb	r3, [r7, #22]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d001      	beq.n	80154a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80154a4:	7dbb      	ldrb	r3, [r7, #22]
 80154a6:	e000      	b.n	80154aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80154a8:	2300      	movs	r3, #0
}
 80154aa:	4618      	mov	r0, r3
 80154ac:	3718      	adds	r7, #24
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}

080154b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80154b2:	b580      	push	{r7, lr}
 80154b4:	b084      	sub	sp, #16
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80154ba:	2300      	movs	r3, #0
 80154bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	2201      	movs	r2, #1
 80154c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2200      	movs	r2, #0
 80154d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2200      	movs	r2, #0
 80154d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2200      	movs	r2, #0
 80154e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d014      	beq.n	8015518 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d00e      	beq.n	8015518 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	6852      	ldr	r2, [r2, #4]
 8015506:	b2d2      	uxtb	r2, r2
 8015508:	4611      	mov	r1, r2
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	4798      	blx	r3
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d001      	beq.n	8015518 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015514:	2303      	movs	r3, #3
 8015516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015518:	2340      	movs	r3, #64	; 0x40
 801551a:	2200      	movs	r2, #0
 801551c:	2100      	movs	r1, #0
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f001 fc71 	bl	8016e06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2201      	movs	r2, #1
 8015528:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2240      	movs	r2, #64	; 0x40
 8015530:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015534:	2340      	movs	r3, #64	; 0x40
 8015536:	2200      	movs	r2, #0
 8015538:	2180      	movs	r1, #128	; 0x80
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f001 fc63 	bl	8016e06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2201      	movs	r2, #1
 8015544:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2240      	movs	r2, #64	; 0x40
 801554a:	621a      	str	r2, [r3, #32]

  return ret;
 801554c:	7bfb      	ldrb	r3, [r7, #15]
}
 801554e:	4618      	mov	r0, r3
 8015550:	3710      	adds	r7, #16
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}

08015556 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015556:	b480      	push	{r7}
 8015558:	b083      	sub	sp, #12
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]
 801555e:	460b      	mov	r3, r1
 8015560:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	78fa      	ldrb	r2, [r7, #3]
 8015566:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015568:	2300      	movs	r3, #0
}
 801556a:	4618      	mov	r0, r3
 801556c:	370c      	adds	r7, #12
 801556e:	46bd      	mov	sp, r7
 8015570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015574:	4770      	bx	lr

08015576 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015576:	b480      	push	{r7}
 8015578:	b083      	sub	sp, #12
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015584:	b2db      	uxtb	r3, r3
 8015586:	2b04      	cmp	r3, #4
 8015588:	d006      	beq.n	8015598 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015590:	b2da      	uxtb	r2, r3
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2204      	movs	r2, #4
 801559c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr

080155ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80155ae:	b480      	push	{r7}
 80155b0:	b083      	sub	sp, #12
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b04      	cmp	r3, #4
 80155c0:	d106      	bne.n	80155d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr

080155de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b082      	sub	sp, #8
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	2b03      	cmp	r3, #3
 80155f0:	d110      	bne.n	8015614 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d00b      	beq.n	8015614 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015602:	69db      	ldr	r3, [r3, #28]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d005      	beq.n	8015614 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801560e:	69db      	ldr	r3, [r3, #28]
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	3708      	adds	r7, #8
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}

0801561e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801561e:	b580      	push	{r7, lr}
 8015620:	b082      	sub	sp, #8
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
 8015626:	460b      	mov	r3, r1
 8015628:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	32ae      	adds	r2, #174	; 0xae
 8015634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d101      	bne.n	8015640 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801563c:	2303      	movs	r3, #3
 801563e:	e01c      	b.n	801567a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015646:	b2db      	uxtb	r3, r3
 8015648:	2b03      	cmp	r3, #3
 801564a:	d115      	bne.n	8015678 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	32ae      	adds	r2, #174	; 0xae
 8015656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801565a:	6a1b      	ldr	r3, [r3, #32]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d00b      	beq.n	8015678 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	32ae      	adds	r2, #174	; 0xae
 801566a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801566e:	6a1b      	ldr	r3, [r3, #32]
 8015670:	78fa      	ldrb	r2, [r7, #3]
 8015672:	4611      	mov	r1, r2
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015678:	2300      	movs	r3, #0
}
 801567a:	4618      	mov	r0, r3
 801567c:	3708      	adds	r7, #8
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}

08015682 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015682:	b580      	push	{r7, lr}
 8015684:	b082      	sub	sp, #8
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
 801568a:	460b      	mov	r3, r1
 801568c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	32ae      	adds	r2, #174	; 0xae
 8015698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d101      	bne.n	80156a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80156a0:	2303      	movs	r3, #3
 80156a2:	e01c      	b.n	80156de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	2b03      	cmp	r3, #3
 80156ae:	d115      	bne.n	80156dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	32ae      	adds	r2, #174	; 0xae
 80156ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d00b      	beq.n	80156dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	32ae      	adds	r2, #174	; 0xae
 80156ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d4:	78fa      	ldrb	r2, [r7, #3]
 80156d6:	4611      	mov	r1, r2
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156dc:	2300      	movs	r3, #0
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80156e6:	b480      	push	{r7}
 80156e8:	b083      	sub	sp, #12
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80156ee:	2300      	movs	r3, #0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	370c      	adds	r7, #12
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr

080156fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015704:	2300      	movs	r3, #0
 8015706:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2201      	movs	r2, #1
 801570c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015716:	2b00      	cmp	r3, #0
 8015718:	d00e      	beq.n	8015738 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	6852      	ldr	r2, [r2, #4]
 8015726:	b2d2      	uxtb	r2, r2
 8015728:	4611      	mov	r1, r2
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	4798      	blx	r3
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d001      	beq.n	8015738 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015734:	2303      	movs	r3, #3
 8015736:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015738:	7bfb      	ldrb	r3, [r7, #15]
}
 801573a:	4618      	mov	r0, r3
 801573c:	3710      	adds	r7, #16
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}

08015742 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015742:	b480      	push	{r7}
 8015744:	b083      	sub	sp, #12
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
 801574a:	460b      	mov	r3, r1
 801574c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801574e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015750:	4618      	mov	r0, r3
 8015752:	370c      	adds	r7, #12
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801575c:	b480      	push	{r7}
 801575e:	b083      	sub	sp, #12
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	460b      	mov	r3, r1
 8015766:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015768:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801576a:	4618      	mov	r0, r3
 801576c:	370c      	adds	r7, #12
 801576e:	46bd      	mov	sp, r7
 8015770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015774:	4770      	bx	lr

08015776 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015776:	b580      	push	{r7, lr}
 8015778:	b086      	sub	sp, #24
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
 801577e:	460b      	mov	r3, r1
 8015780:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801578a:	2300      	movs	r3, #0
 801578c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	885b      	ldrh	r3, [r3, #2]
 8015792:	b29a      	uxth	r2, r3
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	b29b      	uxth	r3, r3
 801579a:	429a      	cmp	r2, r3
 801579c:	d920      	bls.n	80157e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80157a6:	e013      	b.n	80157d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80157a8:	f107 030a 	add.w	r3, r7, #10
 80157ac:	4619      	mov	r1, r3
 80157ae:	6978      	ldr	r0, [r7, #20]
 80157b0:	f000 f81b 	bl	80157ea <USBD_GetNextDesc>
 80157b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	785b      	ldrb	r3, [r3, #1]
 80157ba:	2b05      	cmp	r3, #5
 80157bc:	d108      	bne.n	80157d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	789b      	ldrb	r3, [r3, #2]
 80157c6:	78fa      	ldrb	r2, [r7, #3]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d008      	beq.n	80157de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80157cc:	2300      	movs	r3, #0
 80157ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	885b      	ldrh	r3, [r3, #2]
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	897b      	ldrh	r3, [r7, #10]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d8e5      	bhi.n	80157a8 <USBD_GetEpDesc+0x32>
 80157dc:	e000      	b.n	80157e0 <USBD_GetEpDesc+0x6a>
          break;
 80157de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80157e0:	693b      	ldr	r3, [r7, #16]
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80157ea:	b480      	push	{r7}
 80157ec:	b085      	sub	sp, #20
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
 80157f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	881a      	ldrh	r2, [r3, #0]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	b29b      	uxth	r3, r3
 8015802:	4413      	add	r3, r2
 8015804:	b29a      	uxth	r2, r3
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	461a      	mov	r2, r3
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	4413      	add	r3, r2
 8015814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015816:	68fb      	ldr	r3, [r7, #12]
}
 8015818:	4618      	mov	r0, r3
 801581a:	3714      	adds	r7, #20
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015824:	b480      	push	{r7}
 8015826:	b087      	sub	sp, #28
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	3301      	adds	r3, #1
 801583a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015842:	8a3b      	ldrh	r3, [r7, #16]
 8015844:	021b      	lsls	r3, r3, #8
 8015846:	b21a      	sxth	r2, r3
 8015848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801584c:	4313      	orrs	r3, r2
 801584e:	b21b      	sxth	r3, r3
 8015850:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015852:	89fb      	ldrh	r3, [r7, #14]
}
 8015854:	4618      	mov	r0, r3
 8015856:	371c      	adds	r7, #28
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801586a:	2300      	movs	r3, #0
 801586c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015876:	2b40      	cmp	r3, #64	; 0x40
 8015878:	d005      	beq.n	8015886 <USBD_StdDevReq+0x26>
 801587a:	2b40      	cmp	r3, #64	; 0x40
 801587c:	d857      	bhi.n	801592e <USBD_StdDevReq+0xce>
 801587e:	2b00      	cmp	r3, #0
 8015880:	d00f      	beq.n	80158a2 <USBD_StdDevReq+0x42>
 8015882:	2b20      	cmp	r3, #32
 8015884:	d153      	bne.n	801592e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	32ae      	adds	r2, #174	; 0xae
 8015890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015894:	689b      	ldr	r3, [r3, #8]
 8015896:	6839      	ldr	r1, [r7, #0]
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	4798      	blx	r3
 801589c:	4603      	mov	r3, r0
 801589e:	73fb      	strb	r3, [r7, #15]
      break;
 80158a0:	e04a      	b.n	8015938 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	785b      	ldrb	r3, [r3, #1]
 80158a6:	2b09      	cmp	r3, #9
 80158a8:	d83b      	bhi.n	8015922 <USBD_StdDevReq+0xc2>
 80158aa:	a201      	add	r2, pc, #4	; (adr r2, 80158b0 <USBD_StdDevReq+0x50>)
 80158ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158b0:	08015905 	.word	0x08015905
 80158b4:	08015919 	.word	0x08015919
 80158b8:	08015923 	.word	0x08015923
 80158bc:	0801590f 	.word	0x0801590f
 80158c0:	08015923 	.word	0x08015923
 80158c4:	080158e3 	.word	0x080158e3
 80158c8:	080158d9 	.word	0x080158d9
 80158cc:	08015923 	.word	0x08015923
 80158d0:	080158fb 	.word	0x080158fb
 80158d4:	080158ed 	.word	0x080158ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80158d8:	6839      	ldr	r1, [r7, #0]
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f000 fa3c 	bl	8015d58 <USBD_GetDescriptor>
          break;
 80158e0:	e024      	b.n	801592c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80158e2:	6839      	ldr	r1, [r7, #0]
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f000 fba1 	bl	801602c <USBD_SetAddress>
          break;
 80158ea:	e01f      	b.n	801592c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 fbe0 	bl	80160b4 <USBD_SetConfig>
 80158f4:	4603      	mov	r3, r0
 80158f6:	73fb      	strb	r3, [r7, #15]
          break;
 80158f8:	e018      	b.n	801592c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fc83 	bl	8016208 <USBD_GetConfig>
          break;
 8015902:	e013      	b.n	801592c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015904:	6839      	ldr	r1, [r7, #0]
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 fcb4 	bl	8016274 <USBD_GetStatus>
          break;
 801590c:	e00e      	b.n	801592c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801590e:	6839      	ldr	r1, [r7, #0]
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f000 fce3 	bl	80162dc <USBD_SetFeature>
          break;
 8015916:	e009      	b.n	801592c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015918:	6839      	ldr	r1, [r7, #0]
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f000 fd07 	bl	801632e <USBD_ClrFeature>
          break;
 8015920:	e004      	b.n	801592c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015922:	6839      	ldr	r1, [r7, #0]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 fd5e 	bl	80163e6 <USBD_CtlError>
          break;
 801592a:	bf00      	nop
      }
      break;
 801592c:	e004      	b.n	8015938 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801592e:	6839      	ldr	r1, [r7, #0]
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f000 fd58 	bl	80163e6 <USBD_CtlError>
      break;
 8015936:	bf00      	nop
  }

  return ret;
 8015938:	7bfb      	ldrb	r3, [r7, #15]
}
 801593a:	4618      	mov	r0, r3
 801593c:	3710      	adds	r7, #16
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}
 8015942:	bf00      	nop

08015944 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b084      	sub	sp, #16
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801594e:	2300      	movs	r3, #0
 8015950:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801595a:	2b40      	cmp	r3, #64	; 0x40
 801595c:	d005      	beq.n	801596a <USBD_StdItfReq+0x26>
 801595e:	2b40      	cmp	r3, #64	; 0x40
 8015960:	d852      	bhi.n	8015a08 <USBD_StdItfReq+0xc4>
 8015962:	2b00      	cmp	r3, #0
 8015964:	d001      	beq.n	801596a <USBD_StdItfReq+0x26>
 8015966:	2b20      	cmp	r3, #32
 8015968:	d14e      	bne.n	8015a08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015970:	b2db      	uxtb	r3, r3
 8015972:	3b01      	subs	r3, #1
 8015974:	2b02      	cmp	r3, #2
 8015976:	d840      	bhi.n	80159fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	889b      	ldrh	r3, [r3, #4]
 801597c:	b2db      	uxtb	r3, r3
 801597e:	2b01      	cmp	r3, #1
 8015980:	d836      	bhi.n	80159f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	889b      	ldrh	r3, [r3, #4]
 8015986:	b2db      	uxtb	r3, r3
 8015988:	4619      	mov	r1, r3
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7ff fed9 	bl	8015742 <USBD_CoreFindIF>
 8015990:	4603      	mov	r3, r0
 8015992:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015994:	7bbb      	ldrb	r3, [r7, #14]
 8015996:	2bff      	cmp	r3, #255	; 0xff
 8015998:	d01d      	beq.n	80159d6 <USBD_StdItfReq+0x92>
 801599a:	7bbb      	ldrb	r3, [r7, #14]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d11a      	bne.n	80159d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80159a0:	7bba      	ldrb	r2, [r7, #14]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	32ae      	adds	r2, #174	; 0xae
 80159a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159aa:	689b      	ldr	r3, [r3, #8]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d00f      	beq.n	80159d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80159b0:	7bba      	ldrb	r2, [r7, #14]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159b8:	7bba      	ldrb	r2, [r7, #14]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	32ae      	adds	r2, #174	; 0xae
 80159be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159c2:	689b      	ldr	r3, [r3, #8]
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	4798      	blx	r3
 80159ca:	4603      	mov	r3, r0
 80159cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80159ce:	e004      	b.n	80159da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80159d0:	2303      	movs	r3, #3
 80159d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80159d4:	e001      	b.n	80159da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80159d6:	2303      	movs	r3, #3
 80159d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	88db      	ldrh	r3, [r3, #6]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d110      	bne.n	8015a04 <USBD_StdItfReq+0xc0>
 80159e2:	7bfb      	ldrb	r3, [r7, #15]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10d      	bne.n	8015a04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fdc7 	bl	801657c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80159ee:	e009      	b.n	8015a04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 fcf7 	bl	80163e6 <USBD_CtlError>
          break;
 80159f8:	e004      	b.n	8015a04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159fa:	6839      	ldr	r1, [r7, #0]
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f000 fcf2 	bl	80163e6 <USBD_CtlError>
          break;
 8015a02:	e000      	b.n	8015a06 <USBD_StdItfReq+0xc2>
          break;
 8015a04:	bf00      	nop
      }
      break;
 8015a06:	e004      	b.n	8015a12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015a08:	6839      	ldr	r1, [r7, #0]
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f000 fceb 	bl	80163e6 <USBD_CtlError>
      break;
 8015a10:	bf00      	nop
  }

  return ret;
 8015a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3710      	adds	r7, #16
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a26:	2300      	movs	r3, #0
 8015a28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	889b      	ldrh	r3, [r3, #4]
 8015a2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	781b      	ldrb	r3, [r3, #0]
 8015a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a38:	2b40      	cmp	r3, #64	; 0x40
 8015a3a:	d007      	beq.n	8015a4c <USBD_StdEPReq+0x30>
 8015a3c:	2b40      	cmp	r3, #64	; 0x40
 8015a3e:	f200 817f 	bhi.w	8015d40 <USBD_StdEPReq+0x324>
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d02a      	beq.n	8015a9c <USBD_StdEPReq+0x80>
 8015a46:	2b20      	cmp	r3, #32
 8015a48:	f040 817a 	bne.w	8015d40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a4c:	7bbb      	ldrb	r3, [r7, #14]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f7ff fe83 	bl	801575c <USBD_CoreFindEP>
 8015a56:	4603      	mov	r3, r0
 8015a58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a5a:	7b7b      	ldrb	r3, [r7, #13]
 8015a5c:	2bff      	cmp	r3, #255	; 0xff
 8015a5e:	f000 8174 	beq.w	8015d4a <USBD_StdEPReq+0x32e>
 8015a62:	7b7b      	ldrb	r3, [r7, #13]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	f040 8170 	bne.w	8015d4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a6a:	7b7a      	ldrb	r2, [r7, #13]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a72:	7b7a      	ldrb	r2, [r7, #13]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	32ae      	adds	r2, #174	; 0xae
 8015a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7c:	689b      	ldr	r3, [r3, #8]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f000 8163 	beq.w	8015d4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a84:	7b7a      	ldrb	r2, [r7, #13]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	32ae      	adds	r2, #174	; 0xae
 8015a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a8e:	689b      	ldr	r3, [r3, #8]
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	4798      	blx	r3
 8015a96:	4603      	mov	r3, r0
 8015a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a9a:	e156      	b.n	8015d4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	785b      	ldrb	r3, [r3, #1]
 8015aa0:	2b03      	cmp	r3, #3
 8015aa2:	d008      	beq.n	8015ab6 <USBD_StdEPReq+0x9a>
 8015aa4:	2b03      	cmp	r3, #3
 8015aa6:	f300 8145 	bgt.w	8015d34 <USBD_StdEPReq+0x318>
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f000 809b 	beq.w	8015be6 <USBD_StdEPReq+0x1ca>
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	d03c      	beq.n	8015b2e <USBD_StdEPReq+0x112>
 8015ab4:	e13e      	b.n	8015d34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	d002      	beq.n	8015ac8 <USBD_StdEPReq+0xac>
 8015ac2:	2b03      	cmp	r3, #3
 8015ac4:	d016      	beq.n	8015af4 <USBD_StdEPReq+0xd8>
 8015ac6:	e02c      	b.n	8015b22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ac8:	7bbb      	ldrb	r3, [r7, #14]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00d      	beq.n	8015aea <USBD_StdEPReq+0xce>
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	2b80      	cmp	r3, #128	; 0x80
 8015ad2:	d00a      	beq.n	8015aea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ad4:	7bbb      	ldrb	r3, [r7, #14]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f001 f9d9 	bl	8016e90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ade:	2180      	movs	r1, #128	; 0x80
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f001 f9d5 	bl	8016e90 <USBD_LL_StallEP>
 8015ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015ae8:	e020      	b.n	8015b2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015aea:	6839      	ldr	r1, [r7, #0]
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f000 fc7a 	bl	80163e6 <USBD_CtlError>
              break;
 8015af2:	e01b      	b.n	8015b2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	885b      	ldrh	r3, [r3, #2]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d10e      	bne.n	8015b1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d00b      	beq.n	8015b1a <USBD_StdEPReq+0xfe>
 8015b02:	7bbb      	ldrb	r3, [r7, #14]
 8015b04:	2b80      	cmp	r3, #128	; 0x80
 8015b06:	d008      	beq.n	8015b1a <USBD_StdEPReq+0xfe>
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	88db      	ldrh	r3, [r3, #6]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d104      	bne.n	8015b1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b10:	7bbb      	ldrb	r3, [r7, #14]
 8015b12:	4619      	mov	r1, r3
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f001 f9bb 	bl	8016e90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 fd2e 	bl	801657c <USBD_CtlSendStatus>

              break;
 8015b20:	e004      	b.n	8015b2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015b22:	6839      	ldr	r1, [r7, #0]
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f000 fc5e 	bl	80163e6 <USBD_CtlError>
              break;
 8015b2a:	bf00      	nop
          }
          break;
 8015b2c:	e107      	b.n	8015d3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b34:	b2db      	uxtb	r3, r3
 8015b36:	2b02      	cmp	r3, #2
 8015b38:	d002      	beq.n	8015b40 <USBD_StdEPReq+0x124>
 8015b3a:	2b03      	cmp	r3, #3
 8015b3c:	d016      	beq.n	8015b6c <USBD_StdEPReq+0x150>
 8015b3e:	e04b      	b.n	8015bd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b40:	7bbb      	ldrb	r3, [r7, #14]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d00d      	beq.n	8015b62 <USBD_StdEPReq+0x146>
 8015b46:	7bbb      	ldrb	r3, [r7, #14]
 8015b48:	2b80      	cmp	r3, #128	; 0x80
 8015b4a:	d00a      	beq.n	8015b62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015b4c:	7bbb      	ldrb	r3, [r7, #14]
 8015b4e:	4619      	mov	r1, r3
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f001 f99d 	bl	8016e90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b56:	2180      	movs	r1, #128	; 0x80
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f001 f999 	bl	8016e90 <USBD_LL_StallEP>
 8015b5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b60:	e040      	b.n	8015be4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 fc3e 	bl	80163e6 <USBD_CtlError>
              break;
 8015b6a:	e03b      	b.n	8015be4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	885b      	ldrh	r3, [r3, #2]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d136      	bne.n	8015be2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b74:	7bbb      	ldrb	r3, [r7, #14]
 8015b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d004      	beq.n	8015b88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b7e:	7bbb      	ldrb	r3, [r7, #14]
 8015b80:	4619      	mov	r1, r3
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f001 f9a3 	bl	8016ece <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f000 fcf7 	bl	801657c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b8e:	7bbb      	ldrb	r3, [r7, #14]
 8015b90:	4619      	mov	r1, r3
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7ff fde2 	bl	801575c <USBD_CoreFindEP>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b9c:	7b7b      	ldrb	r3, [r7, #13]
 8015b9e:	2bff      	cmp	r3, #255	; 0xff
 8015ba0:	d01f      	beq.n	8015be2 <USBD_StdEPReq+0x1c6>
 8015ba2:	7b7b      	ldrb	r3, [r7, #13]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d11c      	bne.n	8015be2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015ba8:	7b7a      	ldrb	r2, [r7, #13]
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015bb0:	7b7a      	ldrb	r2, [r7, #13]
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	32ae      	adds	r2, #174	; 0xae
 8015bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bba:	689b      	ldr	r3, [r3, #8]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d010      	beq.n	8015be2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015bc0:	7b7a      	ldrb	r2, [r7, #13]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	32ae      	adds	r2, #174	; 0xae
 8015bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bca:	689b      	ldr	r3, [r3, #8]
 8015bcc:	6839      	ldr	r1, [r7, #0]
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	4798      	blx	r3
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015bd6:	e004      	b.n	8015be2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015bd8:	6839      	ldr	r1, [r7, #0]
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f000 fc03 	bl	80163e6 <USBD_CtlError>
              break;
 8015be0:	e000      	b.n	8015be4 <USBD_StdEPReq+0x1c8>
              break;
 8015be2:	bf00      	nop
          }
          break;
 8015be4:	e0ab      	b.n	8015d3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	2b02      	cmp	r3, #2
 8015bf0:	d002      	beq.n	8015bf8 <USBD_StdEPReq+0x1dc>
 8015bf2:	2b03      	cmp	r3, #3
 8015bf4:	d032      	beq.n	8015c5c <USBD_StdEPReq+0x240>
 8015bf6:	e097      	b.n	8015d28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d007      	beq.n	8015c0e <USBD_StdEPReq+0x1f2>
 8015bfe:	7bbb      	ldrb	r3, [r7, #14]
 8015c00:	2b80      	cmp	r3, #128	; 0x80
 8015c02:	d004      	beq.n	8015c0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015c04:	6839      	ldr	r1, [r7, #0]
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 fbed 	bl	80163e6 <USBD_CtlError>
                break;
 8015c0c:	e091      	b.n	8015d32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	da0b      	bge.n	8015c2e <USBD_StdEPReq+0x212>
 8015c16:	7bbb      	ldrb	r3, [r7, #14]
 8015c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	009b      	lsls	r3, r3, #2
 8015c20:	4413      	add	r3, r2
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	3310      	adds	r3, #16
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	4413      	add	r3, r2
 8015c2a:	3304      	adds	r3, #4
 8015c2c:	e00b      	b.n	8015c46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c2e:	7bbb      	ldrb	r3, [r7, #14]
 8015c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c34:	4613      	mov	r3, r2
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	4413      	add	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	4413      	add	r3, r2
 8015c44:	3304      	adds	r3, #4
 8015c46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	2202      	movs	r2, #2
 8015c52:	4619      	mov	r1, r3
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f000 fc37 	bl	80164c8 <USBD_CtlSendData>
              break;
 8015c5a:	e06a      	b.n	8015d32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	da11      	bge.n	8015c88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c64:	7bbb      	ldrb	r3, [r7, #14]
 8015c66:	f003 020f 	and.w	r2, r3, #15
 8015c6a:	6879      	ldr	r1, [r7, #4]
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	4413      	add	r3, r2
 8015c72:	009b      	lsls	r3, r3, #2
 8015c74:	440b      	add	r3, r1
 8015c76:	3324      	adds	r3, #36	; 0x24
 8015c78:	881b      	ldrh	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d117      	bne.n	8015cae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c7e:	6839      	ldr	r1, [r7, #0]
 8015c80:	6878      	ldr	r0, [r7, #4]
 8015c82:	f000 fbb0 	bl	80163e6 <USBD_CtlError>
                  break;
 8015c86:	e054      	b.n	8015d32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c88:	7bbb      	ldrb	r3, [r7, #14]
 8015c8a:	f003 020f 	and.w	r2, r3, #15
 8015c8e:	6879      	ldr	r1, [r7, #4]
 8015c90:	4613      	mov	r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	4413      	add	r3, r2
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	440b      	add	r3, r1
 8015c9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d104      	bne.n	8015cae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ca4:	6839      	ldr	r1, [r7, #0]
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f000 fb9d 	bl	80163e6 <USBD_CtlError>
                  break;
 8015cac:	e041      	b.n	8015d32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	da0b      	bge.n	8015cce <USBD_StdEPReq+0x2b2>
 8015cb6:	7bbb      	ldrb	r3, [r7, #14]
 8015cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	009b      	lsls	r3, r3, #2
 8015cc0:	4413      	add	r3, r2
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	3310      	adds	r3, #16
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	4413      	add	r3, r2
 8015cca:	3304      	adds	r3, #4
 8015ccc:	e00b      	b.n	8015ce6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015cce:	7bbb      	ldrb	r3, [r7, #14]
 8015cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015cd4:	4613      	mov	r3, r2
 8015cd6:	009b      	lsls	r3, r3, #2
 8015cd8:	4413      	add	r3, r2
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	4413      	add	r3, r2
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015ce8:	7bbb      	ldrb	r3, [r7, #14]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d002      	beq.n	8015cf4 <USBD_StdEPReq+0x2d8>
 8015cee:	7bbb      	ldrb	r3, [r7, #14]
 8015cf0:	2b80      	cmp	r3, #128	; 0x80
 8015cf2:	d103      	bne.n	8015cfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	601a      	str	r2, [r3, #0]
 8015cfa:	e00e      	b.n	8015d1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015cfc:	7bbb      	ldrb	r3, [r7, #14]
 8015cfe:	4619      	mov	r1, r3
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f001 f903 	bl	8016f0c <USBD_LL_IsStallEP>
 8015d06:	4603      	mov	r3, r0
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d003      	beq.n	8015d14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	601a      	str	r2, [r3, #0]
 8015d12:	e002      	b.n	8015d1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	2200      	movs	r2, #0
 8015d18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2202      	movs	r2, #2
 8015d1e:	4619      	mov	r1, r3
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f000 fbd1 	bl	80164c8 <USBD_CtlSendData>
              break;
 8015d26:	e004      	b.n	8015d32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015d28:	6839      	ldr	r1, [r7, #0]
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f000 fb5b 	bl	80163e6 <USBD_CtlError>
              break;
 8015d30:	bf00      	nop
          }
          break;
 8015d32:	e004      	b.n	8015d3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015d34:	6839      	ldr	r1, [r7, #0]
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f000 fb55 	bl	80163e6 <USBD_CtlError>
          break;
 8015d3c:	bf00      	nop
      }
      break;
 8015d3e:	e005      	b.n	8015d4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fb4f 	bl	80163e6 <USBD_CtlError>
      break;
 8015d48:	e000      	b.n	8015d4c <USBD_StdEPReq+0x330>
      break;
 8015d4a:	bf00      	nop
  }

  return ret;
 8015d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3710      	adds	r7, #16
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
	...

08015d58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d62:	2300      	movs	r3, #0
 8015d64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d66:	2300      	movs	r3, #0
 8015d68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	885b      	ldrh	r3, [r3, #2]
 8015d72:	0a1b      	lsrs	r3, r3, #8
 8015d74:	b29b      	uxth	r3, r3
 8015d76:	3b01      	subs	r3, #1
 8015d78:	2b06      	cmp	r3, #6
 8015d7a:	f200 8128 	bhi.w	8015fce <USBD_GetDescriptor+0x276>
 8015d7e:	a201      	add	r2, pc, #4	; (adr r2, 8015d84 <USBD_GetDescriptor+0x2c>)
 8015d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d84:	08015da1 	.word	0x08015da1
 8015d88:	08015db9 	.word	0x08015db9
 8015d8c:	08015df9 	.word	0x08015df9
 8015d90:	08015fcf 	.word	0x08015fcf
 8015d94:	08015fcf 	.word	0x08015fcf
 8015d98:	08015f6f 	.word	0x08015f6f
 8015d9c:	08015f9b 	.word	0x08015f9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	7c12      	ldrb	r2, [r2, #16]
 8015dac:	f107 0108 	add.w	r1, r7, #8
 8015db0:	4610      	mov	r0, r2
 8015db2:	4798      	blx	r3
 8015db4:	60f8      	str	r0, [r7, #12]
      break;
 8015db6:	e112      	b.n	8015fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	7c1b      	ldrb	r3, [r3, #16]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d10d      	bne.n	8015ddc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dc8:	f107 0208 	add.w	r2, r7, #8
 8015dcc:	4610      	mov	r0, r2
 8015dce:	4798      	blx	r3
 8015dd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	3301      	adds	r3, #1
 8015dd6:	2202      	movs	r2, #2
 8015dd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015dda:	e100      	b.n	8015fde <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015de4:	f107 0208 	add.w	r2, r7, #8
 8015de8:	4610      	mov	r0, r2
 8015dea:	4798      	blx	r3
 8015dec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3301      	adds	r3, #1
 8015df2:	2202      	movs	r2, #2
 8015df4:	701a      	strb	r2, [r3, #0]
      break;
 8015df6:	e0f2      	b.n	8015fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	885b      	ldrh	r3, [r3, #2]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	2b05      	cmp	r3, #5
 8015e00:	f200 80ac 	bhi.w	8015f5c <USBD_GetDescriptor+0x204>
 8015e04:	a201      	add	r2, pc, #4	; (adr r2, 8015e0c <USBD_GetDescriptor+0xb4>)
 8015e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e0a:	bf00      	nop
 8015e0c:	08015e25 	.word	0x08015e25
 8015e10:	08015e59 	.word	0x08015e59
 8015e14:	08015e8d 	.word	0x08015e8d
 8015e18:	08015ec1 	.word	0x08015ec1
 8015e1c:	08015ef5 	.word	0x08015ef5
 8015e20:	08015f29 	.word	0x08015f29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00b      	beq.n	8015e48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e36:	685b      	ldr	r3, [r3, #4]
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	7c12      	ldrb	r2, [r2, #16]
 8015e3c:	f107 0108 	add.w	r1, r7, #8
 8015e40:	4610      	mov	r0, r2
 8015e42:	4798      	blx	r3
 8015e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e46:	e091      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e48:	6839      	ldr	r1, [r7, #0]
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f000 facb 	bl	80163e6 <USBD_CtlError>
            err++;
 8015e50:	7afb      	ldrb	r3, [r7, #11]
 8015e52:	3301      	adds	r3, #1
 8015e54:	72fb      	strb	r3, [r7, #11]
          break;
 8015e56:	e089      	b.n	8015f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e5e:	689b      	ldr	r3, [r3, #8]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00b      	beq.n	8015e7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e6a:	689b      	ldr	r3, [r3, #8]
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	7c12      	ldrb	r2, [r2, #16]
 8015e70:	f107 0108 	add.w	r1, r7, #8
 8015e74:	4610      	mov	r0, r2
 8015e76:	4798      	blx	r3
 8015e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e7a:	e077      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 fab1 	bl	80163e6 <USBD_CtlError>
            err++;
 8015e84:	7afb      	ldrb	r3, [r7, #11]
 8015e86:	3301      	adds	r3, #1
 8015e88:	72fb      	strb	r3, [r7, #11]
          break;
 8015e8a:	e06f      	b.n	8015f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e92:	68db      	ldr	r3, [r3, #12]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d00b      	beq.n	8015eb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	7c12      	ldrb	r2, [r2, #16]
 8015ea4:	f107 0108 	add.w	r1, r7, #8
 8015ea8:	4610      	mov	r0, r2
 8015eaa:	4798      	blx	r3
 8015eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eae:	e05d      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015eb0:	6839      	ldr	r1, [r7, #0]
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f000 fa97 	bl	80163e6 <USBD_CtlError>
            err++;
 8015eb8:	7afb      	ldrb	r3, [r7, #11]
 8015eba:	3301      	adds	r3, #1
 8015ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8015ebe:	e055      	b.n	8015f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ec6:	691b      	ldr	r3, [r3, #16]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d00b      	beq.n	8015ee4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ed2:	691b      	ldr	r3, [r3, #16]
 8015ed4:	687a      	ldr	r2, [r7, #4]
 8015ed6:	7c12      	ldrb	r2, [r2, #16]
 8015ed8:	f107 0108 	add.w	r1, r7, #8
 8015edc:	4610      	mov	r0, r2
 8015ede:	4798      	blx	r3
 8015ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ee2:	e043      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 fa7d 	bl	80163e6 <USBD_CtlError>
            err++;
 8015eec:	7afb      	ldrb	r3, [r7, #11]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ef2:	e03b      	b.n	8015f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015efa:	695b      	ldr	r3, [r3, #20]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d00b      	beq.n	8015f18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f06:	695b      	ldr	r3, [r3, #20]
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	7c12      	ldrb	r2, [r2, #16]
 8015f0c:	f107 0108 	add.w	r1, r7, #8
 8015f10:	4610      	mov	r0, r2
 8015f12:	4798      	blx	r3
 8015f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f16:	e029      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f18:	6839      	ldr	r1, [r7, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f000 fa63 	bl	80163e6 <USBD_CtlError>
            err++;
 8015f20:	7afb      	ldrb	r3, [r7, #11]
 8015f22:	3301      	adds	r3, #1
 8015f24:	72fb      	strb	r3, [r7, #11]
          break;
 8015f26:	e021      	b.n	8015f6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f2e:	699b      	ldr	r3, [r3, #24]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d00b      	beq.n	8015f4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f3a:	699b      	ldr	r3, [r3, #24]
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	7c12      	ldrb	r2, [r2, #16]
 8015f40:	f107 0108 	add.w	r1, r7, #8
 8015f44:	4610      	mov	r0, r2
 8015f46:	4798      	blx	r3
 8015f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f4a:	e00f      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015f4c:	6839      	ldr	r1, [r7, #0]
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 fa49 	bl	80163e6 <USBD_CtlError>
            err++;
 8015f54:	7afb      	ldrb	r3, [r7, #11]
 8015f56:	3301      	adds	r3, #1
 8015f58:	72fb      	strb	r3, [r7, #11]
          break;
 8015f5a:	e007      	b.n	8015f6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f5c:	6839      	ldr	r1, [r7, #0]
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	f000 fa41 	bl	80163e6 <USBD_CtlError>
          err++;
 8015f64:	7afb      	ldrb	r3, [r7, #11]
 8015f66:	3301      	adds	r3, #1
 8015f68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f6a:	bf00      	nop
      }
      break;
 8015f6c:	e037      	b.n	8015fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	7c1b      	ldrb	r3, [r3, #16]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d109      	bne.n	8015f8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f7e:	f107 0208 	add.w	r2, r7, #8
 8015f82:	4610      	mov	r0, r2
 8015f84:	4798      	blx	r3
 8015f86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f88:	e029      	b.n	8015fde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 fa2a 	bl	80163e6 <USBD_CtlError>
        err++;
 8015f92:	7afb      	ldrb	r3, [r7, #11]
 8015f94:	3301      	adds	r3, #1
 8015f96:	72fb      	strb	r3, [r7, #11]
      break;
 8015f98:	e021      	b.n	8015fde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	7c1b      	ldrb	r3, [r3, #16]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d10d      	bne.n	8015fbe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015faa:	f107 0208 	add.w	r2, r7, #8
 8015fae:	4610      	mov	r0, r2
 8015fb0:	4798      	blx	r3
 8015fb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	2207      	movs	r2, #7
 8015fba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015fbc:	e00f      	b.n	8015fde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015fbe:	6839      	ldr	r1, [r7, #0]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f000 fa10 	bl	80163e6 <USBD_CtlError>
        err++;
 8015fc6:	7afb      	ldrb	r3, [r7, #11]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	72fb      	strb	r3, [r7, #11]
      break;
 8015fcc:	e007      	b.n	8015fde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015fce:	6839      	ldr	r1, [r7, #0]
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f000 fa08 	bl	80163e6 <USBD_CtlError>
      err++;
 8015fd6:	7afb      	ldrb	r3, [r7, #11]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	72fb      	strb	r3, [r7, #11]
      break;
 8015fdc:	bf00      	nop
  }

  if (err != 0U)
 8015fde:	7afb      	ldrb	r3, [r7, #11]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d11e      	bne.n	8016022 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	88db      	ldrh	r3, [r3, #6]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d016      	beq.n	801601a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015fec:	893b      	ldrh	r3, [r7, #8]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d00e      	beq.n	8016010 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	88da      	ldrh	r2, [r3, #6]
 8015ff6:	893b      	ldrh	r3, [r7, #8]
 8015ff8:	4293      	cmp	r3, r2
 8015ffa:	bf28      	it	cs
 8015ffc:	4613      	movcs	r3, r2
 8015ffe:	b29b      	uxth	r3, r3
 8016000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016002:	893b      	ldrh	r3, [r7, #8]
 8016004:	461a      	mov	r2, r3
 8016006:	68f9      	ldr	r1, [r7, #12]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 fa5d 	bl	80164c8 <USBD_CtlSendData>
 801600e:	e009      	b.n	8016024 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f000 f9e7 	bl	80163e6 <USBD_CtlError>
 8016018:	e004      	b.n	8016024 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f000 faae 	bl	801657c <USBD_CtlSendStatus>
 8016020:	e000      	b.n	8016024 <USBD_GetDescriptor+0x2cc>
    return;
 8016022:	bf00      	nop
  }
}
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop

0801602c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	889b      	ldrh	r3, [r3, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d131      	bne.n	80160a2 <USBD_SetAddress+0x76>
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	88db      	ldrh	r3, [r3, #6]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d12d      	bne.n	80160a2 <USBD_SetAddress+0x76>
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	885b      	ldrh	r3, [r3, #2]
 801604a:	2b7f      	cmp	r3, #127	; 0x7f
 801604c:	d829      	bhi.n	80160a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	885b      	ldrh	r3, [r3, #2]
 8016052:	b2db      	uxtb	r3, r3
 8016054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016060:	b2db      	uxtb	r3, r3
 8016062:	2b03      	cmp	r3, #3
 8016064:	d104      	bne.n	8016070 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016066:	6839      	ldr	r1, [r7, #0]
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f000 f9bc 	bl	80163e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801606e:	e01d      	b.n	80160ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	7bfa      	ldrb	r2, [r7, #15]
 8016074:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016078:	7bfb      	ldrb	r3, [r7, #15]
 801607a:	4619      	mov	r1, r3
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f000 ff71 	bl	8016f64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f000 fa7a 	bl	801657c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016088:	7bfb      	ldrb	r3, [r7, #15]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d004      	beq.n	8016098 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2202      	movs	r2, #2
 8016092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016096:	e009      	b.n	80160ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2201      	movs	r2, #1
 801609c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160a0:	e004      	b.n	80160ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80160a2:	6839      	ldr	r1, [r7, #0]
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f000 f99e 	bl	80163e6 <USBD_CtlError>
  }
}
 80160aa:	bf00      	nop
 80160ac:	bf00      	nop
 80160ae:	3710      	adds	r7, #16
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b084      	sub	sp, #16
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160be:	2300      	movs	r3, #0
 80160c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	885b      	ldrh	r3, [r3, #2]
 80160c6:	b2da      	uxtb	r2, r3
 80160c8:	4b4e      	ldr	r3, [pc, #312]	; (8016204 <USBD_SetConfig+0x150>)
 80160ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80160cc:	4b4d      	ldr	r3, [pc, #308]	; (8016204 <USBD_SetConfig+0x150>)
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	2b01      	cmp	r3, #1
 80160d2:	d905      	bls.n	80160e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80160d4:	6839      	ldr	r1, [r7, #0]
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f000 f985 	bl	80163e6 <USBD_CtlError>
    return USBD_FAIL;
 80160dc:	2303      	movs	r3, #3
 80160de:	e08c      	b.n	80161fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	2b02      	cmp	r3, #2
 80160ea:	d002      	beq.n	80160f2 <USBD_SetConfig+0x3e>
 80160ec:	2b03      	cmp	r3, #3
 80160ee:	d029      	beq.n	8016144 <USBD_SetConfig+0x90>
 80160f0:	e075      	b.n	80161de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160f2:	4b44      	ldr	r3, [pc, #272]	; (8016204 <USBD_SetConfig+0x150>)
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d020      	beq.n	801613c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160fa:	4b42      	ldr	r3, [pc, #264]	; (8016204 <USBD_SetConfig+0x150>)
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	461a      	mov	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016104:	4b3f      	ldr	r3, [pc, #252]	; (8016204 <USBD_SetConfig+0x150>)
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	4619      	mov	r1, r3
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7fe ffe1 	bl	80150d2 <USBD_SetClassConfig>
 8016110:	4603      	mov	r3, r0
 8016112:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016114:	7bfb      	ldrb	r3, [r7, #15]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d008      	beq.n	801612c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801611a:	6839      	ldr	r1, [r7, #0]
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f000 f962 	bl	80163e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2202      	movs	r2, #2
 8016126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801612a:	e065      	b.n	80161f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f000 fa25 	bl	801657c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2203      	movs	r2, #3
 8016136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801613a:	e05d      	b.n	80161f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f000 fa1d 	bl	801657c <USBD_CtlSendStatus>
      break;
 8016142:	e059      	b.n	80161f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016144:	4b2f      	ldr	r3, [pc, #188]	; (8016204 <USBD_SetConfig+0x150>)
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d112      	bne.n	8016172 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2202      	movs	r2, #2
 8016150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016154:	4b2b      	ldr	r3, [pc, #172]	; (8016204 <USBD_SetConfig+0x150>)
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	461a      	mov	r2, r3
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801615e:	4b29      	ldr	r3, [pc, #164]	; (8016204 <USBD_SetConfig+0x150>)
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	4619      	mov	r1, r3
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f7fe ffd0 	bl	801510a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f000 fa06 	bl	801657c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016170:	e042      	b.n	80161f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016172:	4b24      	ldr	r3, [pc, #144]	; (8016204 <USBD_SetConfig+0x150>)
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	461a      	mov	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	429a      	cmp	r2, r3
 801617e:	d02a      	beq.n	80161d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	685b      	ldr	r3, [r3, #4]
 8016184:	b2db      	uxtb	r3, r3
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f7fe ffbe 	bl	801510a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801618e:	4b1d      	ldr	r3, [pc, #116]	; (8016204 <USBD_SetConfig+0x150>)
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	461a      	mov	r2, r3
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016198:	4b1a      	ldr	r3, [pc, #104]	; (8016204 <USBD_SetConfig+0x150>)
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	4619      	mov	r1, r3
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f7fe ff97 	bl	80150d2 <USBD_SetClassConfig>
 80161a4:	4603      	mov	r3, r0
 80161a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80161a8:	7bfb      	ldrb	r3, [r7, #15]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d00f      	beq.n	80161ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80161ae:	6839      	ldr	r1, [r7, #0]
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 f918 	bl	80163e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	4619      	mov	r1, r3
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f7fe ffa3 	bl	801510a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2202      	movs	r2, #2
 80161c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80161cc:	e014      	b.n	80161f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 f9d4 	bl	801657c <USBD_CtlSendStatus>
      break;
 80161d4:	e010      	b.n	80161f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 f9d0 	bl	801657c <USBD_CtlSendStatus>
      break;
 80161dc:	e00c      	b.n	80161f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80161de:	6839      	ldr	r1, [r7, #0]
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 f900 	bl	80163e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80161e6:	4b07      	ldr	r3, [pc, #28]	; (8016204 <USBD_SetConfig+0x150>)
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	4619      	mov	r1, r3
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f7fe ff8c 	bl	801510a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80161f2:	2303      	movs	r3, #3
 80161f4:	73fb      	strb	r3, [r7, #15]
      break;
 80161f6:	bf00      	nop
  }

  return ret;
 80161f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	3710      	adds	r7, #16
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop
 8016204:	240015e4 	.word	0x240015e4

08016208 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	88db      	ldrh	r3, [r3, #6]
 8016216:	2b01      	cmp	r3, #1
 8016218:	d004      	beq.n	8016224 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801621a:	6839      	ldr	r1, [r7, #0]
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f000 f8e2 	bl	80163e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016222:	e023      	b.n	801626c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801622a:	b2db      	uxtb	r3, r3
 801622c:	2b02      	cmp	r3, #2
 801622e:	dc02      	bgt.n	8016236 <USBD_GetConfig+0x2e>
 8016230:	2b00      	cmp	r3, #0
 8016232:	dc03      	bgt.n	801623c <USBD_GetConfig+0x34>
 8016234:	e015      	b.n	8016262 <USBD_GetConfig+0x5a>
 8016236:	2b03      	cmp	r3, #3
 8016238:	d00b      	beq.n	8016252 <USBD_GetConfig+0x4a>
 801623a:	e012      	b.n	8016262 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2200      	movs	r2, #0
 8016240:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	3308      	adds	r3, #8
 8016246:	2201      	movs	r2, #1
 8016248:	4619      	mov	r1, r3
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f000 f93c 	bl	80164c8 <USBD_CtlSendData>
        break;
 8016250:	e00c      	b.n	801626c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	3304      	adds	r3, #4
 8016256:	2201      	movs	r2, #1
 8016258:	4619      	mov	r1, r3
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f934 	bl	80164c8 <USBD_CtlSendData>
        break;
 8016260:	e004      	b.n	801626c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016262:	6839      	ldr	r1, [r7, #0]
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f000 f8be 	bl	80163e6 <USBD_CtlError>
        break;
 801626a:	bf00      	nop
}
 801626c:	bf00      	nop
 801626e:	3708      	adds	r7, #8
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}

08016274 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016284:	b2db      	uxtb	r3, r3
 8016286:	3b01      	subs	r3, #1
 8016288:	2b02      	cmp	r3, #2
 801628a:	d81e      	bhi.n	80162ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801628c:	683b      	ldr	r3, [r7, #0]
 801628e:	88db      	ldrh	r3, [r3, #6]
 8016290:	2b02      	cmp	r3, #2
 8016292:	d004      	beq.n	801629e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016294:	6839      	ldr	r1, [r7, #0]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 f8a5 	bl	80163e6 <USBD_CtlError>
        break;
 801629c:	e01a      	b.n	80162d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2201      	movs	r2, #1
 80162a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d005      	beq.n	80162ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	f043 0202 	orr.w	r2, r3, #2
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	330c      	adds	r3, #12
 80162be:	2202      	movs	r2, #2
 80162c0:	4619      	mov	r1, r3
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 f900 	bl	80164c8 <USBD_CtlSendData>
      break;
 80162c8:	e004      	b.n	80162d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80162ca:	6839      	ldr	r1, [r7, #0]
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f000 f88a 	bl	80163e6 <USBD_CtlError>
      break;
 80162d2:	bf00      	nop
  }
}
 80162d4:	bf00      	nop
 80162d6:	3708      	adds	r7, #8
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}

080162dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
 80162e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	885b      	ldrh	r3, [r3, #2]
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d107      	bne.n	80162fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2201      	movs	r2, #1
 80162f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f000 f940 	bl	801657c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162fc:	e013      	b.n	8016326 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	885b      	ldrh	r3, [r3, #2]
 8016302:	2b02      	cmp	r3, #2
 8016304:	d10b      	bne.n	801631e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	889b      	ldrh	r3, [r3, #4]
 801630a:	0a1b      	lsrs	r3, r3, #8
 801630c:	b29b      	uxth	r3, r3
 801630e:	b2da      	uxtb	r2, r3
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	f000 f930 	bl	801657c <USBD_CtlSendStatus>
}
 801631c:	e003      	b.n	8016326 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801631e:	6839      	ldr	r1, [r7, #0]
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f000 f860 	bl	80163e6 <USBD_CtlError>
}
 8016326:	bf00      	nop
 8016328:	3708      	adds	r7, #8
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801632e:	b580      	push	{r7, lr}
 8016330:	b082      	sub	sp, #8
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
 8016336:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801633e:	b2db      	uxtb	r3, r3
 8016340:	3b01      	subs	r3, #1
 8016342:	2b02      	cmp	r3, #2
 8016344:	d80b      	bhi.n	801635e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	885b      	ldrh	r3, [r3, #2]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d10c      	bne.n	8016368 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2200      	movs	r2, #0
 8016352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f000 f910 	bl	801657c <USBD_CtlSendStatus>
      }
      break;
 801635c:	e004      	b.n	8016368 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801635e:	6839      	ldr	r1, [r7, #0]
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f000 f840 	bl	80163e6 <USBD_CtlError>
      break;
 8016366:	e000      	b.n	801636a <USBD_ClrFeature+0x3c>
      break;
 8016368:	bf00      	nop
  }
}
 801636a:	bf00      	nop
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}

08016372 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016372:	b580      	push	{r7, lr}
 8016374:	b084      	sub	sp, #16
 8016376:	af00      	add	r7, sp, #0
 8016378:	6078      	str	r0, [r7, #4]
 801637a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	781a      	ldrb	r2, [r3, #0]
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	3301      	adds	r3, #1
 801638c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	781a      	ldrb	r2, [r3, #0]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	3301      	adds	r3, #1
 801639a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801639c:	68f8      	ldr	r0, [r7, #12]
 801639e:	f7ff fa41 	bl	8015824 <SWAPBYTE>
 80163a2:	4603      	mov	r3, r0
 80163a4:	461a      	mov	r2, r3
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	3301      	adds	r3, #1
 80163ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	3301      	adds	r3, #1
 80163b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	f7ff fa34 	bl	8015824 <SWAPBYTE>
 80163bc:	4603      	mov	r3, r0
 80163be:	461a      	mov	r2, r3
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	3301      	adds	r3, #1
 80163c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	3301      	adds	r3, #1
 80163ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f7ff fa27 	bl	8015824 <SWAPBYTE>
 80163d6:	4603      	mov	r3, r0
 80163d8:	461a      	mov	r2, r3
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	80da      	strh	r2, [r3, #6]
}
 80163de:	bf00      	nop
 80163e0:	3710      	adds	r7, #16
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}

080163e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163e6:	b580      	push	{r7, lr}
 80163e8:	b082      	sub	sp, #8
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	6078      	str	r0, [r7, #4]
 80163ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163f0:	2180      	movs	r1, #128	; 0x80
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f000 fd4c 	bl	8016e90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163f8:	2100      	movs	r1, #0
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f000 fd48 	bl	8016e90 <USBD_LL_StallEP>
}
 8016400:	bf00      	nop
 8016402:	3708      	adds	r7, #8
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}

08016408 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b086      	sub	sp, #24
 801640c:	af00      	add	r7, sp, #0
 801640e:	60f8      	str	r0, [r7, #12]
 8016410:	60b9      	str	r1, [r7, #8]
 8016412:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016414:	2300      	movs	r3, #0
 8016416:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d036      	beq.n	801648c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016422:	6938      	ldr	r0, [r7, #16]
 8016424:	f000 f836 	bl	8016494 <USBD_GetLen>
 8016428:	4603      	mov	r3, r0
 801642a:	3301      	adds	r3, #1
 801642c:	b29b      	uxth	r3, r3
 801642e:	005b      	lsls	r3, r3, #1
 8016430:	b29a      	uxth	r2, r3
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016436:	7dfb      	ldrb	r3, [r7, #23]
 8016438:	68ba      	ldr	r2, [r7, #8]
 801643a:	4413      	add	r3, r2
 801643c:	687a      	ldr	r2, [r7, #4]
 801643e:	7812      	ldrb	r2, [r2, #0]
 8016440:	701a      	strb	r2, [r3, #0]
  idx++;
 8016442:	7dfb      	ldrb	r3, [r7, #23]
 8016444:	3301      	adds	r3, #1
 8016446:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016448:	7dfb      	ldrb	r3, [r7, #23]
 801644a:	68ba      	ldr	r2, [r7, #8]
 801644c:	4413      	add	r3, r2
 801644e:	2203      	movs	r2, #3
 8016450:	701a      	strb	r2, [r3, #0]
  idx++;
 8016452:	7dfb      	ldrb	r3, [r7, #23]
 8016454:	3301      	adds	r3, #1
 8016456:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016458:	e013      	b.n	8016482 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801645a:	7dfb      	ldrb	r3, [r7, #23]
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	4413      	add	r3, r2
 8016460:	693a      	ldr	r2, [r7, #16]
 8016462:	7812      	ldrb	r2, [r2, #0]
 8016464:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016466:	693b      	ldr	r3, [r7, #16]
 8016468:	3301      	adds	r3, #1
 801646a:	613b      	str	r3, [r7, #16]
    idx++;
 801646c:	7dfb      	ldrb	r3, [r7, #23]
 801646e:	3301      	adds	r3, #1
 8016470:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016472:	7dfb      	ldrb	r3, [r7, #23]
 8016474:	68ba      	ldr	r2, [r7, #8]
 8016476:	4413      	add	r3, r2
 8016478:	2200      	movs	r2, #0
 801647a:	701a      	strb	r2, [r3, #0]
    idx++;
 801647c:	7dfb      	ldrb	r3, [r7, #23]
 801647e:	3301      	adds	r3, #1
 8016480:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	781b      	ldrb	r3, [r3, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d1e7      	bne.n	801645a <USBD_GetString+0x52>
 801648a:	e000      	b.n	801648e <USBD_GetString+0x86>
    return;
 801648c:	bf00      	nop
  }
}
 801648e:	3718      	adds	r7, #24
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016494:	b480      	push	{r7}
 8016496:	b085      	sub	sp, #20
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801649c:	2300      	movs	r3, #0
 801649e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80164a4:	e005      	b.n	80164b2 <USBD_GetLen+0x1e>
  {
    len++;
 80164a6:	7bfb      	ldrb	r3, [r7, #15]
 80164a8:	3301      	adds	r3, #1
 80164aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	3301      	adds	r3, #1
 80164b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	781b      	ldrb	r3, [r3, #0]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d1f5      	bne.n	80164a6 <USBD_GetLen+0x12>
  }

  return len;
 80164ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3714      	adds	r7, #20
 80164c0:	46bd      	mov	sp, r7
 80164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c6:	4770      	bx	lr

080164c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2202      	movs	r2, #2
 80164d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	68ba      	ldr	r2, [r7, #8]
 80164ec:	2100      	movs	r1, #0
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f000 fd57 	bl	8016fa2 <USBD_LL_Transmit>

  return USBD_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164fe:	b580      	push	{r7, lr}
 8016500:	b084      	sub	sp, #16
 8016502:	af00      	add	r7, sp, #0
 8016504:	60f8      	str	r0, [r7, #12]
 8016506:	60b9      	str	r1, [r7, #8]
 8016508:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	2100      	movs	r1, #0
 8016510:	68f8      	ldr	r0, [r7, #12]
 8016512:	f000 fd46 	bl	8016fa2 <USBD_LL_Transmit>

  return USBD_OK;
 8016516:	2300      	movs	r3, #0
}
 8016518:	4618      	mov	r0, r3
 801651a:	3710      	adds	r7, #16
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	60f8      	str	r0, [r7, #12]
 8016528:	60b9      	str	r1, [r7, #8]
 801652a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2203      	movs	r2, #3
 8016530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	68ba      	ldr	r2, [r7, #8]
 8016548:	2100      	movs	r1, #0
 801654a:	68f8      	ldr	r0, [r7, #12]
 801654c:	f000 fd4a 	bl	8016fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016550:	2300      	movs	r3, #0
}
 8016552:	4618      	mov	r0, r3
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b084      	sub	sp, #16
 801655e:	af00      	add	r7, sp, #0
 8016560:	60f8      	str	r0, [r7, #12]
 8016562:	60b9      	str	r1, [r7, #8]
 8016564:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	68ba      	ldr	r2, [r7, #8]
 801656a:	2100      	movs	r1, #0
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f000 fd39 	bl	8016fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016572:	2300      	movs	r3, #0
}
 8016574:	4618      	mov	r0, r3
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b082      	sub	sp, #8
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2204      	movs	r2, #4
 8016588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801658c:	2300      	movs	r3, #0
 801658e:	2200      	movs	r2, #0
 8016590:	2100      	movs	r1, #0
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f000 fd05 	bl	8016fa2 <USBD_LL_Transmit>

  return USBD_OK;
 8016598:	2300      	movs	r3, #0
}
 801659a:	4618      	mov	r0, r3
 801659c:	3708      	adds	r7, #8
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}

080165a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80165a2:	b580      	push	{r7, lr}
 80165a4:	b082      	sub	sp, #8
 80165a6:	af00      	add	r7, sp, #0
 80165a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2205      	movs	r2, #5
 80165ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80165b2:	2300      	movs	r3, #0
 80165b4:	2200      	movs	r2, #0
 80165b6:	2100      	movs	r1, #0
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f000 fd13 	bl	8016fe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80165be:	2300      	movs	r3, #0
}
 80165c0:	4618      	mov	r0, r3
 80165c2:	3708      	adds	r7, #8
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80165c8:	b480      	push	{r7}
 80165ca:	b087      	sub	sp, #28
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	4613      	mov	r3, r2
 80165d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80165d6:	2301      	movs	r3, #1
 80165d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80165da:	2300      	movs	r3, #0
 80165dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80165de:	4b1f      	ldr	r3, [pc, #124]	; (801665c <FATFS_LinkDriverEx+0x94>)
 80165e0:	7a5b      	ldrb	r3, [r3, #9]
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d131      	bne.n	801664c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80165e8:	4b1c      	ldr	r3, [pc, #112]	; (801665c <FATFS_LinkDriverEx+0x94>)
 80165ea:	7a5b      	ldrb	r3, [r3, #9]
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	461a      	mov	r2, r3
 80165f0:	4b1a      	ldr	r3, [pc, #104]	; (801665c <FATFS_LinkDriverEx+0x94>)
 80165f2:	2100      	movs	r1, #0
 80165f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80165f6:	4b19      	ldr	r3, [pc, #100]	; (801665c <FATFS_LinkDriverEx+0x94>)
 80165f8:	7a5b      	ldrb	r3, [r3, #9]
 80165fa:	b2db      	uxtb	r3, r3
 80165fc:	4a17      	ldr	r2, [pc, #92]	; (801665c <FATFS_LinkDriverEx+0x94>)
 80165fe:	009b      	lsls	r3, r3, #2
 8016600:	4413      	add	r3, r2
 8016602:	68fa      	ldr	r2, [r7, #12]
 8016604:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016606:	4b15      	ldr	r3, [pc, #84]	; (801665c <FATFS_LinkDriverEx+0x94>)
 8016608:	7a5b      	ldrb	r3, [r3, #9]
 801660a:	b2db      	uxtb	r3, r3
 801660c:	461a      	mov	r2, r3
 801660e:	4b13      	ldr	r3, [pc, #76]	; (801665c <FATFS_LinkDriverEx+0x94>)
 8016610:	4413      	add	r3, r2
 8016612:	79fa      	ldrb	r2, [r7, #7]
 8016614:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016616:	4b11      	ldr	r3, [pc, #68]	; (801665c <FATFS_LinkDriverEx+0x94>)
 8016618:	7a5b      	ldrb	r3, [r3, #9]
 801661a:	b2db      	uxtb	r3, r3
 801661c:	1c5a      	adds	r2, r3, #1
 801661e:	b2d1      	uxtb	r1, r2
 8016620:	4a0e      	ldr	r2, [pc, #56]	; (801665c <FATFS_LinkDriverEx+0x94>)
 8016622:	7251      	strb	r1, [r2, #9]
 8016624:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016626:	7dbb      	ldrb	r3, [r7, #22]
 8016628:	3330      	adds	r3, #48	; 0x30
 801662a:	b2da      	uxtb	r2, r3
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	3301      	adds	r3, #1
 8016634:	223a      	movs	r2, #58	; 0x3a
 8016636:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	3302      	adds	r3, #2
 801663c:	222f      	movs	r2, #47	; 0x2f
 801663e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	3303      	adds	r3, #3
 8016644:	2200      	movs	r2, #0
 8016646:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016648:	2300      	movs	r3, #0
 801664a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801664c:	7dfb      	ldrb	r3, [r7, #23]
}
 801664e:	4618      	mov	r0, r3
 8016650:	371c      	adds	r7, #28
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	240015e8 	.word	0x240015e8

08016660 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b082      	sub	sp, #8
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801666a:	2200      	movs	r2, #0
 801666c:	6839      	ldr	r1, [r7, #0]
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f7ff ffaa 	bl	80165c8 <FATFS_LinkDriverEx>
 8016674:	4603      	mov	r3, r0
}
 8016676:	4618      	mov	r0, r3
 8016678:	3708      	adds	r7, #8
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
	...

08016680 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016684:	2201      	movs	r2, #1
 8016686:	4913      	ldr	r1, [pc, #76]	; (80166d4 <MX_USB_DEVICE_Init+0x54>)
 8016688:	4813      	ldr	r0, [pc, #76]	; (80166d8 <MX_USB_DEVICE_Init+0x58>)
 801668a:	f7fe fca5 	bl	8014fd8 <USBD_Init>
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	d001      	beq.n	8016698 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016694:	f7ec f986 	bl	80029a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016698:	4910      	ldr	r1, [pc, #64]	; (80166dc <MX_USB_DEVICE_Init+0x5c>)
 801669a:	480f      	ldr	r0, [pc, #60]	; (80166d8 <MX_USB_DEVICE_Init+0x58>)
 801669c:	f7fe fccc 	bl	8015038 <USBD_RegisterClass>
 80166a0:	4603      	mov	r3, r0
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d001      	beq.n	80166aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80166a6:	f7ec f97d 	bl	80029a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80166aa:	490d      	ldr	r1, [pc, #52]	; (80166e0 <MX_USB_DEVICE_Init+0x60>)
 80166ac:	480a      	ldr	r0, [pc, #40]	; (80166d8 <MX_USB_DEVICE_Init+0x58>)
 80166ae:	f7fe fbc3 	bl	8014e38 <USBD_CDC_RegisterInterface>
 80166b2:	4603      	mov	r3, r0
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d001      	beq.n	80166bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80166b8:	f7ec f974 	bl	80029a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80166bc:	4806      	ldr	r0, [pc, #24]	; (80166d8 <MX_USB_DEVICE_Init+0x58>)
 80166be:	f7fe fcf1 	bl	80150a4 <USBD_Start>
 80166c2:	4603      	mov	r3, r0
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d001      	beq.n	80166cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80166c8:	f7ec f96c 	bl	80029a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80166cc:	f7f3 f908 	bl	80098e0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80166d0:	bf00      	nop
 80166d2:	bd80      	pop	{r7, pc}
 80166d4:	240000b0 	.word	0x240000b0
 80166d8:	240015f4 	.word	0x240015f4
 80166dc:	2400001c 	.word	0x2400001c
 80166e0:	2400009c 	.word	0x2400009c

080166e4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80166e8:	2200      	movs	r2, #0
 80166ea:	4905      	ldr	r1, [pc, #20]	; (8016700 <CDC_Init_HS+0x1c>)
 80166ec:	4805      	ldr	r0, [pc, #20]	; (8016704 <CDC_Init_HS+0x20>)
 80166ee:	f7fe fbbd 	bl	8014e6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80166f2:	4905      	ldr	r1, [pc, #20]	; (8016708 <CDC_Init_HS+0x24>)
 80166f4:	4803      	ldr	r0, [pc, #12]	; (8016704 <CDC_Init_HS+0x20>)
 80166f6:	f7fe fbdb 	bl	8014eb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	240020d0 	.word	0x240020d0
 8016704:	240015f4 	.word	0x240015f4
 8016708:	240018d0 	.word	0x240018d0

0801670c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801670c:	b480      	push	{r7}
 801670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016710:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016712:	4618      	mov	r0, r3
 8016714:	46bd      	mov	sp, r7
 8016716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671a:	4770      	bx	lr

0801671c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801671c:	b480      	push	{r7}
 801671e:	b083      	sub	sp, #12
 8016720:	af00      	add	r7, sp, #0
 8016722:	4603      	mov	r3, r0
 8016724:	6039      	str	r1, [r7, #0]
 8016726:	71fb      	strb	r3, [r7, #7]
 8016728:	4613      	mov	r3, r2
 801672a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801672c:	79fb      	ldrb	r3, [r7, #7]
 801672e:	2b23      	cmp	r3, #35	; 0x23
 8016730:	d84a      	bhi.n	80167c8 <CDC_Control_HS+0xac>
 8016732:	a201      	add	r2, pc, #4	; (adr r2, 8016738 <CDC_Control_HS+0x1c>)
 8016734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016738:	080167c9 	.word	0x080167c9
 801673c:	080167c9 	.word	0x080167c9
 8016740:	080167c9 	.word	0x080167c9
 8016744:	080167c9 	.word	0x080167c9
 8016748:	080167c9 	.word	0x080167c9
 801674c:	080167c9 	.word	0x080167c9
 8016750:	080167c9 	.word	0x080167c9
 8016754:	080167c9 	.word	0x080167c9
 8016758:	080167c9 	.word	0x080167c9
 801675c:	080167c9 	.word	0x080167c9
 8016760:	080167c9 	.word	0x080167c9
 8016764:	080167c9 	.word	0x080167c9
 8016768:	080167c9 	.word	0x080167c9
 801676c:	080167c9 	.word	0x080167c9
 8016770:	080167c9 	.word	0x080167c9
 8016774:	080167c9 	.word	0x080167c9
 8016778:	080167c9 	.word	0x080167c9
 801677c:	080167c9 	.word	0x080167c9
 8016780:	080167c9 	.word	0x080167c9
 8016784:	080167c9 	.word	0x080167c9
 8016788:	080167c9 	.word	0x080167c9
 801678c:	080167c9 	.word	0x080167c9
 8016790:	080167c9 	.word	0x080167c9
 8016794:	080167c9 	.word	0x080167c9
 8016798:	080167c9 	.word	0x080167c9
 801679c:	080167c9 	.word	0x080167c9
 80167a0:	080167c9 	.word	0x080167c9
 80167a4:	080167c9 	.word	0x080167c9
 80167a8:	080167c9 	.word	0x080167c9
 80167ac:	080167c9 	.word	0x080167c9
 80167b0:	080167c9 	.word	0x080167c9
 80167b4:	080167c9 	.word	0x080167c9
 80167b8:	080167c9 	.word	0x080167c9
 80167bc:	080167c9 	.word	0x080167c9
 80167c0:	080167c9 	.word	0x080167c9
 80167c4:	080167c9 	.word	0x080167c9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80167c8:	bf00      	nop
  }

  return (USBD_OK);
 80167ca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	370c      	adds	r7, #12
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr

080167d8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80167e2:	6879      	ldr	r1, [r7, #4]
 80167e4:	480e      	ldr	r0, [pc, #56]	; (8016820 <CDC_Receive_HS+0x48>)
 80167e6:	f7fe fb63 	bl	8014eb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80167ea:	480d      	ldr	r0, [pc, #52]	; (8016820 <CDC_Receive_HS+0x48>)
 80167ec:	f7fe fbbe 	bl	8014f6c <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80167f6:	4b0b      	ldr	r3, [pc, #44]	; (8016824 <CDC_Receive_HS+0x4c>)
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	4a0b      	ldr	r2, [pc, #44]	; (8016828 <CDC_Receive_HS+0x50>)
 80167fc:	4413      	add	r3, r2
 80167fe:	68fa      	ldr	r2, [r7, #12]
 8016800:	6879      	ldr	r1, [r7, #4]
 8016802:	4618      	mov	r0, r3
 8016804:	f000 fcf0 	bl	80171e8 <memcpy>
  usbBytesReady += cpyLen;
 8016808:	4b06      	ldr	r3, [pc, #24]	; (8016824 <CDC_Receive_HS+0x4c>)
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	4413      	add	r3, r2
 8016810:	4a04      	ldr	r2, [pc, #16]	; (8016824 <CDC_Receive_HS+0x4c>)
 8016812:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016814:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016816:	4618      	mov	r0, r3
 8016818:	3710      	adds	r7, #16
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	240015f4 	.word	0x240015f4
 8016824:	2400026c 	.word	0x2400026c
 8016828:	2400016c 	.word	0x2400016c

0801682c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	460b      	mov	r3, r1
 8016836:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016838:	2300      	movs	r3, #0
 801683a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801683c:	4b0d      	ldr	r3, [pc, #52]	; (8016874 <CDC_Transmit_HS+0x48>)
 801683e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016842:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801684a:	2b00      	cmp	r3, #0
 801684c:	d001      	beq.n	8016852 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801684e:	2301      	movs	r3, #1
 8016850:	e00b      	b.n	801686a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016852:	887b      	ldrh	r3, [r7, #2]
 8016854:	461a      	mov	r2, r3
 8016856:	6879      	ldr	r1, [r7, #4]
 8016858:	4806      	ldr	r0, [pc, #24]	; (8016874 <CDC_Transmit_HS+0x48>)
 801685a:	f7fe fb07 	bl	8014e6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801685e:	4805      	ldr	r0, [pc, #20]	; (8016874 <CDC_Transmit_HS+0x48>)
 8016860:	f7fe fb44 	bl	8014eec <USBD_CDC_TransmitPacket>
 8016864:	4603      	mov	r3, r0
 8016866:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016868:	7bfb      	ldrb	r3, [r7, #15]
}
 801686a:	4618      	mov	r0, r3
 801686c:	3710      	adds	r7, #16
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	240015f4 	.word	0x240015f4

08016878 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016878:	b480      	push	{r7}
 801687a:	b087      	sub	sp, #28
 801687c:	af00      	add	r7, sp, #0
 801687e:	60f8      	str	r0, [r7, #12]
 8016880:	60b9      	str	r1, [r7, #8]
 8016882:	4613      	mov	r3, r2
 8016884:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016886:	2300      	movs	r3, #0
 8016888:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801688a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801688e:	4618      	mov	r0, r3
 8016890:	371c      	adds	r7, #28
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr
	...

0801689c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801689c:	b480      	push	{r7}
 801689e:	b083      	sub	sp, #12
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	4603      	mov	r3, r0
 80168a4:	6039      	str	r1, [r7, #0]
 80168a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	2212      	movs	r2, #18
 80168ac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80168ae:	4b03      	ldr	r3, [pc, #12]	; (80168bc <USBD_HS_DeviceDescriptor+0x20>)
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	370c      	adds	r7, #12
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr
 80168bc:	240000cc 	.word	0x240000cc

080168c0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168c0:	b480      	push	{r7}
 80168c2:	b083      	sub	sp, #12
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	4603      	mov	r3, r0
 80168c8:	6039      	str	r1, [r7, #0]
 80168ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	2204      	movs	r2, #4
 80168d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80168d2:	4b03      	ldr	r3, [pc, #12]	; (80168e0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr
 80168e0:	240000e0 	.word	0x240000e0

080168e4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	4603      	mov	r3, r0
 80168ec:	6039      	str	r1, [r7, #0]
 80168ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168f0:	79fb      	ldrb	r3, [r7, #7]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d105      	bne.n	8016902 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168f6:	683a      	ldr	r2, [r7, #0]
 80168f8:	4907      	ldr	r1, [pc, #28]	; (8016918 <USBD_HS_ProductStrDescriptor+0x34>)
 80168fa:	4808      	ldr	r0, [pc, #32]	; (801691c <USBD_HS_ProductStrDescriptor+0x38>)
 80168fc:	f7ff fd84 	bl	8016408 <USBD_GetString>
 8016900:	e004      	b.n	801690c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016902:	683a      	ldr	r2, [r7, #0]
 8016904:	4904      	ldr	r1, [pc, #16]	; (8016918 <USBD_HS_ProductStrDescriptor+0x34>)
 8016906:	4805      	ldr	r0, [pc, #20]	; (801691c <USBD_HS_ProductStrDescriptor+0x38>)
 8016908:	f7ff fd7e 	bl	8016408 <USBD_GetString>
  }
  return USBD_StrDesc;
 801690c:	4b02      	ldr	r3, [pc, #8]	; (8016918 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801690e:	4618      	mov	r0, r3
 8016910:	3708      	adds	r7, #8
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	240028d0 	.word	0x240028d0
 801691c:	08018524 	.word	0x08018524

08016920 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	4603      	mov	r3, r0
 8016928:	6039      	str	r1, [r7, #0]
 801692a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801692c:	683a      	ldr	r2, [r7, #0]
 801692e:	4904      	ldr	r1, [pc, #16]	; (8016940 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016930:	4804      	ldr	r0, [pc, #16]	; (8016944 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016932:	f7ff fd69 	bl	8016408 <USBD_GetString>
  return USBD_StrDesc;
 8016936:	4b02      	ldr	r3, [pc, #8]	; (8016940 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016938:	4618      	mov	r0, r3
 801693a:	3708      	adds	r7, #8
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}
 8016940:	240028d0 	.word	0x240028d0
 8016944:	08018540 	.word	0x08018540

08016948 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	4603      	mov	r3, r0
 8016950:	6039      	str	r1, [r7, #0]
 8016952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	221a      	movs	r2, #26
 8016958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801695a:	f000 f843 	bl	80169e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801695e:	4b02      	ldr	r3, [pc, #8]	; (8016968 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016960:	4618      	mov	r0, r3
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}
 8016968:	240000e4 	.word	0x240000e4

0801696c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	4603      	mov	r3, r0
 8016974:	6039      	str	r1, [r7, #0]
 8016976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016978:	79fb      	ldrb	r3, [r7, #7]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d105      	bne.n	801698a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801697e:	683a      	ldr	r2, [r7, #0]
 8016980:	4907      	ldr	r1, [pc, #28]	; (80169a0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016982:	4808      	ldr	r0, [pc, #32]	; (80169a4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016984:	f7ff fd40 	bl	8016408 <USBD_GetString>
 8016988:	e004      	b.n	8016994 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801698a:	683a      	ldr	r2, [r7, #0]
 801698c:	4904      	ldr	r1, [pc, #16]	; (80169a0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801698e:	4805      	ldr	r0, [pc, #20]	; (80169a4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016990:	f7ff fd3a 	bl	8016408 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016994:	4b02      	ldr	r3, [pc, #8]	; (80169a0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016996:	4618      	mov	r0, r3
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	240028d0 	.word	0x240028d0
 80169a4:	08018544 	.word	0x08018544

080169a8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	4603      	mov	r3, r0
 80169b0:	6039      	str	r1, [r7, #0]
 80169b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80169b4:	79fb      	ldrb	r3, [r7, #7]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d105      	bne.n	80169c6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80169ba:	683a      	ldr	r2, [r7, #0]
 80169bc:	4907      	ldr	r1, [pc, #28]	; (80169dc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80169be:	4808      	ldr	r0, [pc, #32]	; (80169e0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80169c0:	f7ff fd22 	bl	8016408 <USBD_GetString>
 80169c4:	e004      	b.n	80169d0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80169c6:	683a      	ldr	r2, [r7, #0]
 80169c8:	4904      	ldr	r1, [pc, #16]	; (80169dc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80169ca:	4805      	ldr	r0, [pc, #20]	; (80169e0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80169cc:	f7ff fd1c 	bl	8016408 <USBD_GetString>
  }
  return USBD_StrDesc;
 80169d0:	4b02      	ldr	r3, [pc, #8]	; (80169dc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	240028d0 	.word	0x240028d0
 80169e0:	08018550 	.word	0x08018550

080169e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80169ea:	4b0f      	ldr	r3, [pc, #60]	; (8016a28 <Get_SerialNum+0x44>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80169f0:	4b0e      	ldr	r3, [pc, #56]	; (8016a2c <Get_SerialNum+0x48>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80169f6:	4b0e      	ldr	r3, [pc, #56]	; (8016a30 <Get_SerialNum+0x4c>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80169fc:	68fa      	ldr	r2, [r7, #12]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	4413      	add	r3, r2
 8016a02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d009      	beq.n	8016a1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016a0a:	2208      	movs	r2, #8
 8016a0c:	4909      	ldr	r1, [pc, #36]	; (8016a34 <Get_SerialNum+0x50>)
 8016a0e:	68f8      	ldr	r0, [r7, #12]
 8016a10:	f000 f814 	bl	8016a3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016a14:	2204      	movs	r2, #4
 8016a16:	4908      	ldr	r1, [pc, #32]	; (8016a38 <Get_SerialNum+0x54>)
 8016a18:	68b8      	ldr	r0, [r7, #8]
 8016a1a:	f000 f80f 	bl	8016a3c <IntToUnicode>
  }
}
 8016a1e:	bf00      	nop
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	1ff1e800 	.word	0x1ff1e800
 8016a2c:	1ff1e804 	.word	0x1ff1e804
 8016a30:	1ff1e808 	.word	0x1ff1e808
 8016a34:	240000e6 	.word	0x240000e6
 8016a38:	240000f6 	.word	0x240000f6

08016a3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016a3c:	b480      	push	{r7}
 8016a3e:	b087      	sub	sp, #28
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	60f8      	str	r0, [r7, #12]
 8016a44:	60b9      	str	r1, [r7, #8]
 8016a46:	4613      	mov	r3, r2
 8016a48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016a4e:	2300      	movs	r3, #0
 8016a50:	75fb      	strb	r3, [r7, #23]
 8016a52:	e027      	b.n	8016aa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	0f1b      	lsrs	r3, r3, #28
 8016a58:	2b09      	cmp	r3, #9
 8016a5a:	d80b      	bhi.n	8016a74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	0f1b      	lsrs	r3, r3, #28
 8016a60:	b2da      	uxtb	r2, r3
 8016a62:	7dfb      	ldrb	r3, [r7, #23]
 8016a64:	005b      	lsls	r3, r3, #1
 8016a66:	4619      	mov	r1, r3
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	440b      	add	r3, r1
 8016a6c:	3230      	adds	r2, #48	; 0x30
 8016a6e:	b2d2      	uxtb	r2, r2
 8016a70:	701a      	strb	r2, [r3, #0]
 8016a72:	e00a      	b.n	8016a8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	0f1b      	lsrs	r3, r3, #28
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	7dfb      	ldrb	r3, [r7, #23]
 8016a7c:	005b      	lsls	r3, r3, #1
 8016a7e:	4619      	mov	r1, r3
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	440b      	add	r3, r1
 8016a84:	3237      	adds	r2, #55	; 0x37
 8016a86:	b2d2      	uxtb	r2, r2
 8016a88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	011b      	lsls	r3, r3, #4
 8016a8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a90:	7dfb      	ldrb	r3, [r7, #23]
 8016a92:	005b      	lsls	r3, r3, #1
 8016a94:	3301      	adds	r3, #1
 8016a96:	68ba      	ldr	r2, [r7, #8]
 8016a98:	4413      	add	r3, r2
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a9e:	7dfb      	ldrb	r3, [r7, #23]
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	75fb      	strb	r3, [r7, #23]
 8016aa4:	7dfa      	ldrb	r2, [r7, #23]
 8016aa6:	79fb      	ldrb	r3, [r7, #7]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d3d3      	bcc.n	8016a54 <IntToUnicode+0x18>
  }
}
 8016aac:	bf00      	nop
 8016aae:	bf00      	nop
 8016ab0:	371c      	adds	r7, #28
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab8:	4770      	bx	lr
	...

08016abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b0b2      	sub	sp, #200	; 0xc8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016ac4:	f107 0310 	add.w	r3, r7, #16
 8016ac8:	22b8      	movs	r2, #184	; 0xb8
 8016aca:	2100      	movs	r1, #0
 8016acc:	4618      	mov	r0, r3
 8016ace:	f000 fb4f 	bl	8017170 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	4a1a      	ldr	r2, [pc, #104]	; (8016b40 <HAL_PCD_MspInit+0x84>)
 8016ad8:	4293      	cmp	r3, r2
 8016ada:	d12c      	bne.n	8016b36 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016adc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016ae0:	f04f 0300 	mov.w	r3, #0
 8016ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016ae8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016aec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016af0:	f107 0310 	add.w	r3, r7, #16
 8016af4:	4618      	mov	r0, r3
 8016af6:	f7f3 fed3 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d001      	beq.n	8016b04 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016b00:	f7eb ff50 	bl	80029a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016b04:	f7f2 feec 	bl	80098e0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016b08:	4b0e      	ldr	r3, [pc, #56]	; (8016b44 <HAL_PCD_MspInit+0x88>)
 8016b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016b0e:	4a0d      	ldr	r2, [pc, #52]	; (8016b44 <HAL_PCD_MspInit+0x88>)
 8016b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016b14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016b18:	4b0a      	ldr	r3, [pc, #40]	; (8016b44 <HAL_PCD_MspInit+0x88>)
 8016b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016b22:	60fb      	str	r3, [r7, #12]
 8016b24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016b26:	2200      	movs	r2, #0
 8016b28:	2100      	movs	r1, #0
 8016b2a:	204d      	movs	r0, #77	; 0x4d
 8016b2c:	f7ee fc5d 	bl	80053ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016b30:	204d      	movs	r0, #77	; 0x4d
 8016b32:	f7ee fc74 	bl	800541e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016b36:	bf00      	nop
 8016b38:	37c8      	adds	r7, #200	; 0xc8
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	40040000 	.word	0x40040000
 8016b44:	58024400 	.word	0x58024400

08016b48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016b5c:	4619      	mov	r1, r3
 8016b5e:	4610      	mov	r0, r2
 8016b60:	f7fe faed 	bl	801513e <USBD_LL_SetupStage>
}
 8016b64:	bf00      	nop
 8016b66:	3708      	adds	r7, #8
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	460b      	mov	r3, r1
 8016b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b7e:	78fa      	ldrb	r2, [r7, #3]
 8016b80:	6879      	ldr	r1, [r7, #4]
 8016b82:	4613      	mov	r3, r2
 8016b84:	00db      	lsls	r3, r3, #3
 8016b86:	4413      	add	r3, r2
 8016b88:	009b      	lsls	r3, r3, #2
 8016b8a:	440b      	add	r3, r1
 8016b8c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b90:	681a      	ldr	r2, [r3, #0]
 8016b92:	78fb      	ldrb	r3, [r7, #3]
 8016b94:	4619      	mov	r1, r3
 8016b96:	f7fe fb27 	bl	80151e8 <USBD_LL_DataOutStage>
}
 8016b9a:	bf00      	nop
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}

08016ba2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b082      	sub	sp, #8
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
 8016baa:	460b      	mov	r3, r1
 8016bac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016bb4:	78fa      	ldrb	r2, [r7, #3]
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	4613      	mov	r3, r2
 8016bba:	00db      	lsls	r3, r3, #3
 8016bbc:	4413      	add	r3, r2
 8016bbe:	009b      	lsls	r3, r3, #2
 8016bc0:	440b      	add	r3, r1
 8016bc2:	3348      	adds	r3, #72	; 0x48
 8016bc4:	681a      	ldr	r2, [r3, #0]
 8016bc6:	78fb      	ldrb	r3, [r7, #3]
 8016bc8:	4619      	mov	r1, r3
 8016bca:	f7fe fbc0 	bl	801534e <USBD_LL_DataInStage>
}
 8016bce:	bf00      	nop
 8016bd0:	3708      	adds	r7, #8
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}

08016bd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b082      	sub	sp, #8
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fcfa 	bl	80155de <USBD_LL_SOF>
}
 8016bea:	bf00      	nop
 8016bec:	3708      	adds	r7, #8
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}

08016bf2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf2:	b580      	push	{r7, lr}
 8016bf4:	b084      	sub	sp, #16
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	691b      	ldr	r3, [r3, #16]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d102      	bne.n	8016c0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016c06:	2300      	movs	r3, #0
 8016c08:	73fb      	strb	r3, [r7, #15]
 8016c0a:	e008      	b.n	8016c1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	691b      	ldr	r3, [r3, #16]
 8016c10:	2b02      	cmp	r3, #2
 8016c12:	d102      	bne.n	8016c1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016c14:	2301      	movs	r3, #1
 8016c16:	73fb      	strb	r3, [r7, #15]
 8016c18:	e001      	b.n	8016c1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016c1a:	f7eb fec3 	bl	80029a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c24:	7bfa      	ldrb	r2, [r7, #15]
 8016c26:	4611      	mov	r1, r2
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f7fe fc94 	bl	8015556 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7fe fc3c 	bl	80154b2 <USBD_LL_Reset>
}
 8016c3a:	bf00      	nop
 8016c3c:	3710      	adds	r7, #16
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}
	...

08016c44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b082      	sub	sp, #8
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fe fc8f 	bl	8015576 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	6812      	ldr	r2, [r2, #0]
 8016c66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c6a:	f043 0301 	orr.w	r3, r3, #1
 8016c6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6a1b      	ldr	r3, [r3, #32]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d005      	beq.n	8016c84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c78:	4b04      	ldr	r3, [pc, #16]	; (8016c8c <HAL_PCD_SuspendCallback+0x48>)
 8016c7a:	691b      	ldr	r3, [r3, #16]
 8016c7c:	4a03      	ldr	r2, [pc, #12]	; (8016c8c <HAL_PCD_SuspendCallback+0x48>)
 8016c7e:	f043 0306 	orr.w	r3, r3, #6
 8016c82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c84:	bf00      	nop
 8016c86:	3708      	adds	r7, #8
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}
 8016c8c:	e000ed00 	.word	0xe000ed00

08016c90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7fe fc85 	bl	80155ae <USBD_LL_Resume>
}
 8016ca4:	bf00      	nop
 8016ca6:	3708      	adds	r7, #8
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}

08016cac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	460b      	mov	r3, r1
 8016cb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cbe:	78fa      	ldrb	r2, [r7, #3]
 8016cc0:	4611      	mov	r1, r2
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7fe fcdd 	bl	8015682 <USBD_LL_IsoOUTIncomplete>
}
 8016cc8:	bf00      	nop
 8016cca:	3708      	adds	r7, #8
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	460b      	mov	r3, r1
 8016cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ce2:	78fa      	ldrb	r2, [r7, #3]
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7fe fc99 	bl	801561e <USBD_LL_IsoINIncomplete>
}
 8016cec:	bf00      	nop
 8016cee:	3708      	adds	r7, #8
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7fe fcef 	bl	80156e6 <USBD_LL_DevConnected>
}
 8016d08:	bf00      	nop
 8016d0a:	3708      	adds	r7, #8
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}

08016d10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b082      	sub	sp, #8
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7fe fcec 	bl	80156fc <USBD_LL_DevDisconnected>
}
 8016d24:	bf00      	nop
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	781b      	ldrb	r3, [r3, #0]
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d140      	bne.n	8016dbe <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016d3c:	4a22      	ldr	r2, [pc, #136]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	4a20      	ldr	r2, [pc, #128]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016d4c:	4b1e      	ldr	r3, [pc, #120]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d4e:	4a1f      	ldr	r2, [pc, #124]	; (8016dcc <USBD_LL_Init+0xa0>)
 8016d50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016d52:	4b1d      	ldr	r3, [pc, #116]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d54:	2209      	movs	r2, #9
 8016d56:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016d58:	4b1b      	ldr	r3, [pc, #108]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d5a:	2202      	movs	r2, #2
 8016d5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016d5e:	4b1a      	ldr	r3, [pc, #104]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d60:	2200      	movs	r2, #0
 8016d62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d64:	4b18      	ldr	r3, [pc, #96]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d66:	2202      	movs	r2, #2
 8016d68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016d6a:	4b17      	ldr	r3, [pc, #92]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016d70:	4b15      	ldr	r3, [pc, #84]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d72:	2200      	movs	r2, #0
 8016d74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016d76:	4b14      	ldr	r3, [pc, #80]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d78:	2200      	movs	r2, #0
 8016d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d7c:	4b12      	ldr	r3, [pc, #72]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d7e:	2200      	movs	r2, #0
 8016d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d82:	4b11      	ldr	r3, [pc, #68]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d84:	2200      	movs	r2, #0
 8016d86:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d88:	4b0f      	ldr	r3, [pc, #60]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d8e:	480e      	ldr	r0, [pc, #56]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016d90:	f7f1 fab3 	bl	80082fa <HAL_PCD_Init>
 8016d94:	4603      	mov	r3, r0
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d001      	beq.n	8016d9e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d9a:	f7eb fe03 	bl	80029a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016da2:	4809      	ldr	r0, [pc, #36]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016da4:	f7f2 fd21 	bl	80097ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016da8:	2280      	movs	r2, #128	; 0x80
 8016daa:	2100      	movs	r1, #0
 8016dac:	4806      	ldr	r0, [pc, #24]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016dae:	f7f2 fcd5 	bl	800975c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016db2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016db6:	2101      	movs	r1, #1
 8016db8:	4803      	ldr	r0, [pc, #12]	; (8016dc8 <USBD_LL_Init+0x9c>)
 8016dba:	f7f2 fccf 	bl	800975c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016dbe:	2300      	movs	r3, #0
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	24002ad0 	.word	0x24002ad0
 8016dcc:	40040000 	.word	0x40040000

08016dd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016de6:	4618      	mov	r0, r3
 8016de8:	f7f1 fbab 	bl	8008542 <HAL_PCD_Start>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df0:	7bfb      	ldrb	r3, [r7, #15]
 8016df2:	4618      	mov	r0, r3
 8016df4:	f000 f942 	bl	801707c <USBD_Get_USB_Status>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}

08016e06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016e06:	b580      	push	{r7, lr}
 8016e08:	b084      	sub	sp, #16
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
 8016e0e:	4608      	mov	r0, r1
 8016e10:	4611      	mov	r1, r2
 8016e12:	461a      	mov	r2, r3
 8016e14:	4603      	mov	r3, r0
 8016e16:	70fb      	strb	r3, [r7, #3]
 8016e18:	460b      	mov	r3, r1
 8016e1a:	70bb      	strb	r3, [r7, #2]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e20:	2300      	movs	r3, #0
 8016e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016e2e:	78bb      	ldrb	r3, [r7, #2]
 8016e30:	883a      	ldrh	r2, [r7, #0]
 8016e32:	78f9      	ldrb	r1, [r7, #3]
 8016e34:	f7f2 f8ab 	bl	8008f8e <HAL_PCD_EP_Open>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e3c:	7bfb      	ldrb	r3, [r7, #15]
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f000 f91c 	bl	801707c <USBD_Get_USB_Status>
 8016e44:	4603      	mov	r3, r0
 8016e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3710      	adds	r7, #16
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}

08016e52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e52:	b580      	push	{r7, lr}
 8016e54:	b084      	sub	sp, #16
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	6078      	str	r0, [r7, #4]
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e62:	2300      	movs	r3, #0
 8016e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e6c:	78fa      	ldrb	r2, [r7, #3]
 8016e6e:	4611      	mov	r1, r2
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7f2 f8f4 	bl	800905e <HAL_PCD_EP_Close>
 8016e76:	4603      	mov	r3, r0
 8016e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f000 f8fd 	bl	801707c <USBD_Get_USB_Status>
 8016e82:	4603      	mov	r3, r0
 8016e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b084      	sub	sp, #16
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	460b      	mov	r3, r1
 8016e9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016eaa:	78fa      	ldrb	r2, [r7, #3]
 8016eac:	4611      	mov	r1, r2
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f7f2 f9ae 	bl	8009210 <HAL_PCD_EP_SetStall>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eb8:	7bfb      	ldrb	r3, [r7, #15]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f000 f8de 	bl	801707c <USBD_Get_USB_Status>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	3710      	adds	r7, #16
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}

08016ece <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ece:	b580      	push	{r7, lr}
 8016ed0:	b084      	sub	sp, #16
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
 8016ed6:	460b      	mov	r3, r1
 8016ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016eda:	2300      	movs	r3, #0
 8016edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ee8:	78fa      	ldrb	r2, [r7, #3]
 8016eea:	4611      	mov	r1, r2
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7f2 f9f3 	bl	80092d8 <HAL_PCD_EP_ClrStall>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ef6:	7bfb      	ldrb	r3, [r7, #15]
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f000 f8bf 	bl	801707c <USBD_Get_USB_Status>
 8016efe:	4603      	mov	r3, r0
 8016f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	3710      	adds	r7, #16
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}

08016f0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f0c:	b480      	push	{r7}
 8016f0e:	b085      	sub	sp, #20
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	460b      	mov	r3, r1
 8016f16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	da0b      	bge.n	8016f40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016f28:	78fb      	ldrb	r3, [r7, #3]
 8016f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f2e:	68f9      	ldr	r1, [r7, #12]
 8016f30:	4613      	mov	r3, r2
 8016f32:	00db      	lsls	r3, r3, #3
 8016f34:	4413      	add	r3, r2
 8016f36:	009b      	lsls	r3, r3, #2
 8016f38:	440b      	add	r3, r1
 8016f3a:	333e      	adds	r3, #62	; 0x3e
 8016f3c:	781b      	ldrb	r3, [r3, #0]
 8016f3e:	e00b      	b.n	8016f58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016f40:	78fb      	ldrb	r3, [r7, #3]
 8016f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f46:	68f9      	ldr	r1, [r7, #12]
 8016f48:	4613      	mov	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	4413      	add	r3, r2
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	440b      	add	r3, r1
 8016f52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016f56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3714      	adds	r7, #20
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f62:	4770      	bx	lr

08016f64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b084      	sub	sp, #16
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f70:	2300      	movs	r3, #0
 8016f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f74:	2300      	movs	r3, #0
 8016f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f7e:	78fa      	ldrb	r2, [r7, #3]
 8016f80:	4611      	mov	r1, r2
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7f1 ffde 	bl	8008f44 <HAL_PCD_SetAddress>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f8c:	7bfb      	ldrb	r3, [r7, #15]
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f000 f874 	bl	801707c <USBD_Get_USB_Status>
 8016f94:	4603      	mov	r3, r0
 8016f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3710      	adds	r7, #16
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fa2:	b580      	push	{r7, lr}
 8016fa4:	b086      	sub	sp, #24
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	60f8      	str	r0, [r7, #12]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	603b      	str	r3, [r7, #0]
 8016fae:	460b      	mov	r3, r1
 8016fb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016fc0:	7af9      	ldrb	r1, [r7, #11]
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	687a      	ldr	r2, [r7, #4]
 8016fc6:	f7f2 f8e8 	bl	800919a <HAL_PCD_EP_Transmit>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fce:	7dfb      	ldrb	r3, [r7, #23]
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f000 f853 	bl	801707c <USBD_Get_USB_Status>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fda:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3718      	adds	r7, #24
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}

08016fe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b086      	sub	sp, #24
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	607a      	str	r2, [r7, #4]
 8016fee:	603b      	str	r3, [r7, #0]
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017002:	7af9      	ldrb	r1, [r7, #11]
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	687a      	ldr	r2, [r7, #4]
 8017008:	f7f2 f873 	bl	80090f2 <HAL_PCD_EP_Receive>
 801700c:	4603      	mov	r3, r0
 801700e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017010:	7dfb      	ldrb	r3, [r7, #23]
 8017012:	4618      	mov	r0, r3
 8017014:	f000 f832 	bl	801707c <USBD_Get_USB_Status>
 8017018:	4603      	mov	r3, r0
 801701a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801701c:	7dbb      	ldrb	r3, [r7, #22]
}
 801701e:	4618      	mov	r0, r3
 8017020:	3718      	adds	r7, #24
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}

08017026 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017026:	b580      	push	{r7, lr}
 8017028:	b082      	sub	sp, #8
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
 801702e:	460b      	mov	r3, r1
 8017030:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017038:	78fa      	ldrb	r2, [r7, #3]
 801703a:	4611      	mov	r1, r2
 801703c:	4618      	mov	r0, r3
 801703e:	f7f2 f894 	bl	800916a <HAL_PCD_EP_GetRxCount>
 8017042:	4603      	mov	r3, r0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801704c:	b480      	push	{r7}
 801704e:	b083      	sub	sp, #12
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017054:	4b03      	ldr	r3, [pc, #12]	; (8017064 <USBD_static_malloc+0x18>)
}
 8017056:	4618      	mov	r0, r3
 8017058:	370c      	adds	r7, #12
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr
 8017062:	bf00      	nop
 8017064:	24002fdc 	.word	0x24002fdc

08017068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017068:	b480      	push	{r7}
 801706a:	b083      	sub	sp, #12
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017070:	bf00      	nop
 8017072:	370c      	adds	r7, #12
 8017074:	46bd      	mov	sp, r7
 8017076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707a:	4770      	bx	lr

0801707c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801707c:	b480      	push	{r7}
 801707e:	b085      	sub	sp, #20
 8017080:	af00      	add	r7, sp, #0
 8017082:	4603      	mov	r3, r0
 8017084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017086:	2300      	movs	r3, #0
 8017088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801708a:	79fb      	ldrb	r3, [r7, #7]
 801708c:	2b03      	cmp	r3, #3
 801708e:	d817      	bhi.n	80170c0 <USBD_Get_USB_Status+0x44>
 8017090:	a201      	add	r2, pc, #4	; (adr r2, 8017098 <USBD_Get_USB_Status+0x1c>)
 8017092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017096:	bf00      	nop
 8017098:	080170a9 	.word	0x080170a9
 801709c:	080170af 	.word	0x080170af
 80170a0:	080170b5 	.word	0x080170b5
 80170a4:	080170bb 	.word	0x080170bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80170a8:	2300      	movs	r3, #0
 80170aa:	73fb      	strb	r3, [r7, #15]
    break;
 80170ac:	e00b      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170ae:	2303      	movs	r3, #3
 80170b0:	73fb      	strb	r3, [r7, #15]
    break;
 80170b2:	e008      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170b4:	2301      	movs	r3, #1
 80170b6:	73fb      	strb	r3, [r7, #15]
    break;
 80170b8:	e005      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170ba:	2303      	movs	r3, #3
 80170bc:	73fb      	strb	r3, [r7, #15]
    break;
 80170be:	e002      	b.n	80170c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80170c0:	2303      	movs	r3, #3
 80170c2:	73fb      	strb	r3, [r7, #15]
    break;
 80170c4:	bf00      	nop
  }
  return usb_status;
 80170c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c8:	4618      	mov	r0, r3
 80170ca:	3714      	adds	r7, #20
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr

080170d4 <siprintf>:
 80170d4:	b40e      	push	{r1, r2, r3}
 80170d6:	b500      	push	{lr}
 80170d8:	b09c      	sub	sp, #112	; 0x70
 80170da:	ab1d      	add	r3, sp, #116	; 0x74
 80170dc:	9002      	str	r0, [sp, #8]
 80170de:	9006      	str	r0, [sp, #24]
 80170e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170e4:	4809      	ldr	r0, [pc, #36]	; (801710c <siprintf+0x38>)
 80170e6:	9107      	str	r1, [sp, #28]
 80170e8:	9104      	str	r1, [sp, #16]
 80170ea:	4909      	ldr	r1, [pc, #36]	; (8017110 <siprintf+0x3c>)
 80170ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80170f0:	9105      	str	r1, [sp, #20]
 80170f2:	6800      	ldr	r0, [r0, #0]
 80170f4:	9301      	str	r3, [sp, #4]
 80170f6:	a902      	add	r1, sp, #8
 80170f8:	f000 f9d6 	bl	80174a8 <_svfiprintf_r>
 80170fc:	9b02      	ldr	r3, [sp, #8]
 80170fe:	2200      	movs	r2, #0
 8017100:	701a      	strb	r2, [r3, #0]
 8017102:	b01c      	add	sp, #112	; 0x70
 8017104:	f85d eb04 	ldr.w	lr, [sp], #4
 8017108:	b003      	add	sp, #12
 801710a:	4770      	bx	lr
 801710c:	2400014c 	.word	0x2400014c
 8017110:	ffff0208 	.word	0xffff0208

08017114 <siscanf>:
 8017114:	b40e      	push	{r1, r2, r3}
 8017116:	b510      	push	{r4, lr}
 8017118:	b09f      	sub	sp, #124	; 0x7c
 801711a:	ac21      	add	r4, sp, #132	; 0x84
 801711c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017120:	f854 2b04 	ldr.w	r2, [r4], #4
 8017124:	9201      	str	r2, [sp, #4]
 8017126:	f8ad 101c 	strh.w	r1, [sp, #28]
 801712a:	9004      	str	r0, [sp, #16]
 801712c:	9008      	str	r0, [sp, #32]
 801712e:	f7e9 f8f9 	bl	8000324 <strlen>
 8017132:	4b0c      	ldr	r3, [pc, #48]	; (8017164 <siscanf+0x50>)
 8017134:	9005      	str	r0, [sp, #20]
 8017136:	9009      	str	r0, [sp, #36]	; 0x24
 8017138:	930d      	str	r3, [sp, #52]	; 0x34
 801713a:	480b      	ldr	r0, [pc, #44]	; (8017168 <siscanf+0x54>)
 801713c:	9a01      	ldr	r2, [sp, #4]
 801713e:	6800      	ldr	r0, [r0, #0]
 8017140:	9403      	str	r4, [sp, #12]
 8017142:	2300      	movs	r3, #0
 8017144:	9311      	str	r3, [sp, #68]	; 0x44
 8017146:	9316      	str	r3, [sp, #88]	; 0x58
 8017148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801714c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017150:	a904      	add	r1, sp, #16
 8017152:	4623      	mov	r3, r4
 8017154:	f000 fb00 	bl	8017758 <__ssvfiscanf_r>
 8017158:	b01f      	add	sp, #124	; 0x7c
 801715a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801715e:	b003      	add	sp, #12
 8017160:	4770      	bx	lr
 8017162:	bf00      	nop
 8017164:	0801716d 	.word	0x0801716d
 8017168:	2400014c 	.word	0x2400014c

0801716c <__seofread>:
 801716c:	2000      	movs	r0, #0
 801716e:	4770      	bx	lr

08017170 <memset>:
 8017170:	4402      	add	r2, r0
 8017172:	4603      	mov	r3, r0
 8017174:	4293      	cmp	r3, r2
 8017176:	d100      	bne.n	801717a <memset+0xa>
 8017178:	4770      	bx	lr
 801717a:	f803 1b01 	strb.w	r1, [r3], #1
 801717e:	e7f9      	b.n	8017174 <memset+0x4>

08017180 <__errno>:
 8017180:	4b01      	ldr	r3, [pc, #4]	; (8017188 <__errno+0x8>)
 8017182:	6818      	ldr	r0, [r3, #0]
 8017184:	4770      	bx	lr
 8017186:	bf00      	nop
 8017188:	2400014c 	.word	0x2400014c

0801718c <__libc_init_array>:
 801718c:	b570      	push	{r4, r5, r6, lr}
 801718e:	4d0d      	ldr	r5, [pc, #52]	; (80171c4 <__libc_init_array+0x38>)
 8017190:	4c0d      	ldr	r4, [pc, #52]	; (80171c8 <__libc_init_array+0x3c>)
 8017192:	1b64      	subs	r4, r4, r5
 8017194:	10a4      	asrs	r4, r4, #2
 8017196:	2600      	movs	r6, #0
 8017198:	42a6      	cmp	r6, r4
 801719a:	d109      	bne.n	80171b0 <__libc_init_array+0x24>
 801719c:	4d0b      	ldr	r5, [pc, #44]	; (80171cc <__libc_init_array+0x40>)
 801719e:	4c0c      	ldr	r4, [pc, #48]	; (80171d0 <__libc_init_array+0x44>)
 80171a0:	f001 f8fe 	bl	80183a0 <_init>
 80171a4:	1b64      	subs	r4, r4, r5
 80171a6:	10a4      	asrs	r4, r4, #2
 80171a8:	2600      	movs	r6, #0
 80171aa:	42a6      	cmp	r6, r4
 80171ac:	d105      	bne.n	80171ba <__libc_init_array+0x2e>
 80171ae:	bd70      	pop	{r4, r5, r6, pc}
 80171b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80171b4:	4798      	blx	r3
 80171b6:	3601      	adds	r6, #1
 80171b8:	e7ee      	b.n	8017198 <__libc_init_array+0xc>
 80171ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80171be:	4798      	blx	r3
 80171c0:	3601      	adds	r6, #1
 80171c2:	e7f2      	b.n	80171aa <__libc_init_array+0x1e>
 80171c4:	08018788 	.word	0x08018788
 80171c8:	08018788 	.word	0x08018788
 80171cc:	08018788 	.word	0x08018788
 80171d0:	0801878c 	.word	0x0801878c

080171d4 <__retarget_lock_acquire_recursive>:
 80171d4:	4770      	bx	lr

080171d6 <__retarget_lock_release_recursive>:
 80171d6:	4770      	bx	lr

080171d8 <strcpy>:
 80171d8:	4603      	mov	r3, r0
 80171da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171de:	f803 2b01 	strb.w	r2, [r3], #1
 80171e2:	2a00      	cmp	r2, #0
 80171e4:	d1f9      	bne.n	80171da <strcpy+0x2>
 80171e6:	4770      	bx	lr

080171e8 <memcpy>:
 80171e8:	440a      	add	r2, r1
 80171ea:	4291      	cmp	r1, r2
 80171ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80171f0:	d100      	bne.n	80171f4 <memcpy+0xc>
 80171f2:	4770      	bx	lr
 80171f4:	b510      	push	{r4, lr}
 80171f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171fe:	4291      	cmp	r1, r2
 8017200:	d1f9      	bne.n	80171f6 <memcpy+0xe>
 8017202:	bd10      	pop	{r4, pc}

08017204 <_free_r>:
 8017204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017206:	2900      	cmp	r1, #0
 8017208:	d044      	beq.n	8017294 <_free_r+0x90>
 801720a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801720e:	9001      	str	r0, [sp, #4]
 8017210:	2b00      	cmp	r3, #0
 8017212:	f1a1 0404 	sub.w	r4, r1, #4
 8017216:	bfb8      	it	lt
 8017218:	18e4      	addlt	r4, r4, r3
 801721a:	f000 f8df 	bl	80173dc <__malloc_lock>
 801721e:	4a1e      	ldr	r2, [pc, #120]	; (8017298 <_free_r+0x94>)
 8017220:	9801      	ldr	r0, [sp, #4]
 8017222:	6813      	ldr	r3, [r2, #0]
 8017224:	b933      	cbnz	r3, 8017234 <_free_r+0x30>
 8017226:	6063      	str	r3, [r4, #4]
 8017228:	6014      	str	r4, [r2, #0]
 801722a:	b003      	add	sp, #12
 801722c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017230:	f000 b8da 	b.w	80173e8 <__malloc_unlock>
 8017234:	42a3      	cmp	r3, r4
 8017236:	d908      	bls.n	801724a <_free_r+0x46>
 8017238:	6825      	ldr	r5, [r4, #0]
 801723a:	1961      	adds	r1, r4, r5
 801723c:	428b      	cmp	r3, r1
 801723e:	bf01      	itttt	eq
 8017240:	6819      	ldreq	r1, [r3, #0]
 8017242:	685b      	ldreq	r3, [r3, #4]
 8017244:	1949      	addeq	r1, r1, r5
 8017246:	6021      	streq	r1, [r4, #0]
 8017248:	e7ed      	b.n	8017226 <_free_r+0x22>
 801724a:	461a      	mov	r2, r3
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	b10b      	cbz	r3, 8017254 <_free_r+0x50>
 8017250:	42a3      	cmp	r3, r4
 8017252:	d9fa      	bls.n	801724a <_free_r+0x46>
 8017254:	6811      	ldr	r1, [r2, #0]
 8017256:	1855      	adds	r5, r2, r1
 8017258:	42a5      	cmp	r5, r4
 801725a:	d10b      	bne.n	8017274 <_free_r+0x70>
 801725c:	6824      	ldr	r4, [r4, #0]
 801725e:	4421      	add	r1, r4
 8017260:	1854      	adds	r4, r2, r1
 8017262:	42a3      	cmp	r3, r4
 8017264:	6011      	str	r1, [r2, #0]
 8017266:	d1e0      	bne.n	801722a <_free_r+0x26>
 8017268:	681c      	ldr	r4, [r3, #0]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	6053      	str	r3, [r2, #4]
 801726e:	440c      	add	r4, r1
 8017270:	6014      	str	r4, [r2, #0]
 8017272:	e7da      	b.n	801722a <_free_r+0x26>
 8017274:	d902      	bls.n	801727c <_free_r+0x78>
 8017276:	230c      	movs	r3, #12
 8017278:	6003      	str	r3, [r0, #0]
 801727a:	e7d6      	b.n	801722a <_free_r+0x26>
 801727c:	6825      	ldr	r5, [r4, #0]
 801727e:	1961      	adds	r1, r4, r5
 8017280:	428b      	cmp	r3, r1
 8017282:	bf04      	itt	eq
 8017284:	6819      	ldreq	r1, [r3, #0]
 8017286:	685b      	ldreq	r3, [r3, #4]
 8017288:	6063      	str	r3, [r4, #4]
 801728a:	bf04      	itt	eq
 801728c:	1949      	addeq	r1, r1, r5
 801728e:	6021      	streq	r1, [r4, #0]
 8017290:	6054      	str	r4, [r2, #4]
 8017292:	e7ca      	b.n	801722a <_free_r+0x26>
 8017294:	b003      	add	sp, #12
 8017296:	bd30      	pop	{r4, r5, pc}
 8017298:	2400333c 	.word	0x2400333c

0801729c <sbrk_aligned>:
 801729c:	b570      	push	{r4, r5, r6, lr}
 801729e:	4e0e      	ldr	r6, [pc, #56]	; (80172d8 <sbrk_aligned+0x3c>)
 80172a0:	460c      	mov	r4, r1
 80172a2:	6831      	ldr	r1, [r6, #0]
 80172a4:	4605      	mov	r5, r0
 80172a6:	b911      	cbnz	r1, 80172ae <sbrk_aligned+0x12>
 80172a8:	f000 ff3a 	bl	8018120 <_sbrk_r>
 80172ac:	6030      	str	r0, [r6, #0]
 80172ae:	4621      	mov	r1, r4
 80172b0:	4628      	mov	r0, r5
 80172b2:	f000 ff35 	bl	8018120 <_sbrk_r>
 80172b6:	1c43      	adds	r3, r0, #1
 80172b8:	d00a      	beq.n	80172d0 <sbrk_aligned+0x34>
 80172ba:	1cc4      	adds	r4, r0, #3
 80172bc:	f024 0403 	bic.w	r4, r4, #3
 80172c0:	42a0      	cmp	r0, r4
 80172c2:	d007      	beq.n	80172d4 <sbrk_aligned+0x38>
 80172c4:	1a21      	subs	r1, r4, r0
 80172c6:	4628      	mov	r0, r5
 80172c8:	f000 ff2a 	bl	8018120 <_sbrk_r>
 80172cc:	3001      	adds	r0, #1
 80172ce:	d101      	bne.n	80172d4 <sbrk_aligned+0x38>
 80172d0:	f04f 34ff 	mov.w	r4, #4294967295
 80172d4:	4620      	mov	r0, r4
 80172d6:	bd70      	pop	{r4, r5, r6, pc}
 80172d8:	24003340 	.word	0x24003340

080172dc <_malloc_r>:
 80172dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172e0:	1ccd      	adds	r5, r1, #3
 80172e2:	f025 0503 	bic.w	r5, r5, #3
 80172e6:	3508      	adds	r5, #8
 80172e8:	2d0c      	cmp	r5, #12
 80172ea:	bf38      	it	cc
 80172ec:	250c      	movcc	r5, #12
 80172ee:	2d00      	cmp	r5, #0
 80172f0:	4607      	mov	r7, r0
 80172f2:	db01      	blt.n	80172f8 <_malloc_r+0x1c>
 80172f4:	42a9      	cmp	r1, r5
 80172f6:	d905      	bls.n	8017304 <_malloc_r+0x28>
 80172f8:	230c      	movs	r3, #12
 80172fa:	603b      	str	r3, [r7, #0]
 80172fc:	2600      	movs	r6, #0
 80172fe:	4630      	mov	r0, r6
 8017300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80173d8 <_malloc_r+0xfc>
 8017308:	f000 f868 	bl	80173dc <__malloc_lock>
 801730c:	f8d8 3000 	ldr.w	r3, [r8]
 8017310:	461c      	mov	r4, r3
 8017312:	bb5c      	cbnz	r4, 801736c <_malloc_r+0x90>
 8017314:	4629      	mov	r1, r5
 8017316:	4638      	mov	r0, r7
 8017318:	f7ff ffc0 	bl	801729c <sbrk_aligned>
 801731c:	1c43      	adds	r3, r0, #1
 801731e:	4604      	mov	r4, r0
 8017320:	d155      	bne.n	80173ce <_malloc_r+0xf2>
 8017322:	f8d8 4000 	ldr.w	r4, [r8]
 8017326:	4626      	mov	r6, r4
 8017328:	2e00      	cmp	r6, #0
 801732a:	d145      	bne.n	80173b8 <_malloc_r+0xdc>
 801732c:	2c00      	cmp	r4, #0
 801732e:	d048      	beq.n	80173c2 <_malloc_r+0xe6>
 8017330:	6823      	ldr	r3, [r4, #0]
 8017332:	4631      	mov	r1, r6
 8017334:	4638      	mov	r0, r7
 8017336:	eb04 0903 	add.w	r9, r4, r3
 801733a:	f000 fef1 	bl	8018120 <_sbrk_r>
 801733e:	4581      	cmp	r9, r0
 8017340:	d13f      	bne.n	80173c2 <_malloc_r+0xe6>
 8017342:	6821      	ldr	r1, [r4, #0]
 8017344:	1a6d      	subs	r5, r5, r1
 8017346:	4629      	mov	r1, r5
 8017348:	4638      	mov	r0, r7
 801734a:	f7ff ffa7 	bl	801729c <sbrk_aligned>
 801734e:	3001      	adds	r0, #1
 8017350:	d037      	beq.n	80173c2 <_malloc_r+0xe6>
 8017352:	6823      	ldr	r3, [r4, #0]
 8017354:	442b      	add	r3, r5
 8017356:	6023      	str	r3, [r4, #0]
 8017358:	f8d8 3000 	ldr.w	r3, [r8]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d038      	beq.n	80173d2 <_malloc_r+0xf6>
 8017360:	685a      	ldr	r2, [r3, #4]
 8017362:	42a2      	cmp	r2, r4
 8017364:	d12b      	bne.n	80173be <_malloc_r+0xe2>
 8017366:	2200      	movs	r2, #0
 8017368:	605a      	str	r2, [r3, #4]
 801736a:	e00f      	b.n	801738c <_malloc_r+0xb0>
 801736c:	6822      	ldr	r2, [r4, #0]
 801736e:	1b52      	subs	r2, r2, r5
 8017370:	d41f      	bmi.n	80173b2 <_malloc_r+0xd6>
 8017372:	2a0b      	cmp	r2, #11
 8017374:	d917      	bls.n	80173a6 <_malloc_r+0xca>
 8017376:	1961      	adds	r1, r4, r5
 8017378:	42a3      	cmp	r3, r4
 801737a:	6025      	str	r5, [r4, #0]
 801737c:	bf18      	it	ne
 801737e:	6059      	strne	r1, [r3, #4]
 8017380:	6863      	ldr	r3, [r4, #4]
 8017382:	bf08      	it	eq
 8017384:	f8c8 1000 	streq.w	r1, [r8]
 8017388:	5162      	str	r2, [r4, r5]
 801738a:	604b      	str	r3, [r1, #4]
 801738c:	4638      	mov	r0, r7
 801738e:	f104 060b 	add.w	r6, r4, #11
 8017392:	f000 f829 	bl	80173e8 <__malloc_unlock>
 8017396:	f026 0607 	bic.w	r6, r6, #7
 801739a:	1d23      	adds	r3, r4, #4
 801739c:	1af2      	subs	r2, r6, r3
 801739e:	d0ae      	beq.n	80172fe <_malloc_r+0x22>
 80173a0:	1b9b      	subs	r3, r3, r6
 80173a2:	50a3      	str	r3, [r4, r2]
 80173a4:	e7ab      	b.n	80172fe <_malloc_r+0x22>
 80173a6:	42a3      	cmp	r3, r4
 80173a8:	6862      	ldr	r2, [r4, #4]
 80173aa:	d1dd      	bne.n	8017368 <_malloc_r+0x8c>
 80173ac:	f8c8 2000 	str.w	r2, [r8]
 80173b0:	e7ec      	b.n	801738c <_malloc_r+0xb0>
 80173b2:	4623      	mov	r3, r4
 80173b4:	6864      	ldr	r4, [r4, #4]
 80173b6:	e7ac      	b.n	8017312 <_malloc_r+0x36>
 80173b8:	4634      	mov	r4, r6
 80173ba:	6876      	ldr	r6, [r6, #4]
 80173bc:	e7b4      	b.n	8017328 <_malloc_r+0x4c>
 80173be:	4613      	mov	r3, r2
 80173c0:	e7cc      	b.n	801735c <_malloc_r+0x80>
 80173c2:	230c      	movs	r3, #12
 80173c4:	603b      	str	r3, [r7, #0]
 80173c6:	4638      	mov	r0, r7
 80173c8:	f000 f80e 	bl	80173e8 <__malloc_unlock>
 80173cc:	e797      	b.n	80172fe <_malloc_r+0x22>
 80173ce:	6025      	str	r5, [r4, #0]
 80173d0:	e7dc      	b.n	801738c <_malloc_r+0xb0>
 80173d2:	605b      	str	r3, [r3, #4]
 80173d4:	deff      	udf	#255	; 0xff
 80173d6:	bf00      	nop
 80173d8:	2400333c 	.word	0x2400333c

080173dc <__malloc_lock>:
 80173dc:	4801      	ldr	r0, [pc, #4]	; (80173e4 <__malloc_lock+0x8>)
 80173de:	f7ff bef9 	b.w	80171d4 <__retarget_lock_acquire_recursive>
 80173e2:	bf00      	nop
 80173e4:	24003338 	.word	0x24003338

080173e8 <__malloc_unlock>:
 80173e8:	4801      	ldr	r0, [pc, #4]	; (80173f0 <__malloc_unlock+0x8>)
 80173ea:	f7ff bef4 	b.w	80171d6 <__retarget_lock_release_recursive>
 80173ee:	bf00      	nop
 80173f0:	24003338 	.word	0x24003338

080173f4 <__ssputs_r>:
 80173f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173f8:	688e      	ldr	r6, [r1, #8]
 80173fa:	461f      	mov	r7, r3
 80173fc:	42be      	cmp	r6, r7
 80173fe:	680b      	ldr	r3, [r1, #0]
 8017400:	4682      	mov	sl, r0
 8017402:	460c      	mov	r4, r1
 8017404:	4690      	mov	r8, r2
 8017406:	d82c      	bhi.n	8017462 <__ssputs_r+0x6e>
 8017408:	898a      	ldrh	r2, [r1, #12]
 801740a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801740e:	d026      	beq.n	801745e <__ssputs_r+0x6a>
 8017410:	6965      	ldr	r5, [r4, #20]
 8017412:	6909      	ldr	r1, [r1, #16]
 8017414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017418:	eba3 0901 	sub.w	r9, r3, r1
 801741c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017420:	1c7b      	adds	r3, r7, #1
 8017422:	444b      	add	r3, r9
 8017424:	106d      	asrs	r5, r5, #1
 8017426:	429d      	cmp	r5, r3
 8017428:	bf38      	it	cc
 801742a:	461d      	movcc	r5, r3
 801742c:	0553      	lsls	r3, r2, #21
 801742e:	d527      	bpl.n	8017480 <__ssputs_r+0x8c>
 8017430:	4629      	mov	r1, r5
 8017432:	f7ff ff53 	bl	80172dc <_malloc_r>
 8017436:	4606      	mov	r6, r0
 8017438:	b360      	cbz	r0, 8017494 <__ssputs_r+0xa0>
 801743a:	6921      	ldr	r1, [r4, #16]
 801743c:	464a      	mov	r2, r9
 801743e:	f7ff fed3 	bl	80171e8 <memcpy>
 8017442:	89a3      	ldrh	r3, [r4, #12]
 8017444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801744c:	81a3      	strh	r3, [r4, #12]
 801744e:	6126      	str	r6, [r4, #16]
 8017450:	6165      	str	r5, [r4, #20]
 8017452:	444e      	add	r6, r9
 8017454:	eba5 0509 	sub.w	r5, r5, r9
 8017458:	6026      	str	r6, [r4, #0]
 801745a:	60a5      	str	r5, [r4, #8]
 801745c:	463e      	mov	r6, r7
 801745e:	42be      	cmp	r6, r7
 8017460:	d900      	bls.n	8017464 <__ssputs_r+0x70>
 8017462:	463e      	mov	r6, r7
 8017464:	6820      	ldr	r0, [r4, #0]
 8017466:	4632      	mov	r2, r6
 8017468:	4641      	mov	r1, r8
 801746a:	f000 fe3e 	bl	80180ea <memmove>
 801746e:	68a3      	ldr	r3, [r4, #8]
 8017470:	1b9b      	subs	r3, r3, r6
 8017472:	60a3      	str	r3, [r4, #8]
 8017474:	6823      	ldr	r3, [r4, #0]
 8017476:	4433      	add	r3, r6
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	2000      	movs	r0, #0
 801747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017480:	462a      	mov	r2, r5
 8017482:	f000 fe5d 	bl	8018140 <_realloc_r>
 8017486:	4606      	mov	r6, r0
 8017488:	2800      	cmp	r0, #0
 801748a:	d1e0      	bne.n	801744e <__ssputs_r+0x5a>
 801748c:	6921      	ldr	r1, [r4, #16]
 801748e:	4650      	mov	r0, sl
 8017490:	f7ff feb8 	bl	8017204 <_free_r>
 8017494:	230c      	movs	r3, #12
 8017496:	f8ca 3000 	str.w	r3, [sl]
 801749a:	89a3      	ldrh	r3, [r4, #12]
 801749c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174a0:	81a3      	strh	r3, [r4, #12]
 80174a2:	f04f 30ff 	mov.w	r0, #4294967295
 80174a6:	e7e9      	b.n	801747c <__ssputs_r+0x88>

080174a8 <_svfiprintf_r>:
 80174a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ac:	4698      	mov	r8, r3
 80174ae:	898b      	ldrh	r3, [r1, #12]
 80174b0:	061b      	lsls	r3, r3, #24
 80174b2:	b09d      	sub	sp, #116	; 0x74
 80174b4:	4607      	mov	r7, r0
 80174b6:	460d      	mov	r5, r1
 80174b8:	4614      	mov	r4, r2
 80174ba:	d50e      	bpl.n	80174da <_svfiprintf_r+0x32>
 80174bc:	690b      	ldr	r3, [r1, #16]
 80174be:	b963      	cbnz	r3, 80174da <_svfiprintf_r+0x32>
 80174c0:	2140      	movs	r1, #64	; 0x40
 80174c2:	f7ff ff0b 	bl	80172dc <_malloc_r>
 80174c6:	6028      	str	r0, [r5, #0]
 80174c8:	6128      	str	r0, [r5, #16]
 80174ca:	b920      	cbnz	r0, 80174d6 <_svfiprintf_r+0x2e>
 80174cc:	230c      	movs	r3, #12
 80174ce:	603b      	str	r3, [r7, #0]
 80174d0:	f04f 30ff 	mov.w	r0, #4294967295
 80174d4:	e0d0      	b.n	8017678 <_svfiprintf_r+0x1d0>
 80174d6:	2340      	movs	r3, #64	; 0x40
 80174d8:	616b      	str	r3, [r5, #20]
 80174da:	2300      	movs	r3, #0
 80174dc:	9309      	str	r3, [sp, #36]	; 0x24
 80174de:	2320      	movs	r3, #32
 80174e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80174e8:	2330      	movs	r3, #48	; 0x30
 80174ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017690 <_svfiprintf_r+0x1e8>
 80174ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174f2:	f04f 0901 	mov.w	r9, #1
 80174f6:	4623      	mov	r3, r4
 80174f8:	469a      	mov	sl, r3
 80174fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174fe:	b10a      	cbz	r2, 8017504 <_svfiprintf_r+0x5c>
 8017500:	2a25      	cmp	r2, #37	; 0x25
 8017502:	d1f9      	bne.n	80174f8 <_svfiprintf_r+0x50>
 8017504:	ebba 0b04 	subs.w	fp, sl, r4
 8017508:	d00b      	beq.n	8017522 <_svfiprintf_r+0x7a>
 801750a:	465b      	mov	r3, fp
 801750c:	4622      	mov	r2, r4
 801750e:	4629      	mov	r1, r5
 8017510:	4638      	mov	r0, r7
 8017512:	f7ff ff6f 	bl	80173f4 <__ssputs_r>
 8017516:	3001      	adds	r0, #1
 8017518:	f000 80a9 	beq.w	801766e <_svfiprintf_r+0x1c6>
 801751c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801751e:	445a      	add	r2, fp
 8017520:	9209      	str	r2, [sp, #36]	; 0x24
 8017522:	f89a 3000 	ldrb.w	r3, [sl]
 8017526:	2b00      	cmp	r3, #0
 8017528:	f000 80a1 	beq.w	801766e <_svfiprintf_r+0x1c6>
 801752c:	2300      	movs	r3, #0
 801752e:	f04f 32ff 	mov.w	r2, #4294967295
 8017532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017536:	f10a 0a01 	add.w	sl, sl, #1
 801753a:	9304      	str	r3, [sp, #16]
 801753c:	9307      	str	r3, [sp, #28]
 801753e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017542:	931a      	str	r3, [sp, #104]	; 0x68
 8017544:	4654      	mov	r4, sl
 8017546:	2205      	movs	r2, #5
 8017548:	f814 1b01 	ldrb.w	r1, [r4], #1
 801754c:	4850      	ldr	r0, [pc, #320]	; (8017690 <_svfiprintf_r+0x1e8>)
 801754e:	f7e8 fef7 	bl	8000340 <memchr>
 8017552:	9a04      	ldr	r2, [sp, #16]
 8017554:	b9d8      	cbnz	r0, 801758e <_svfiprintf_r+0xe6>
 8017556:	06d0      	lsls	r0, r2, #27
 8017558:	bf44      	itt	mi
 801755a:	2320      	movmi	r3, #32
 801755c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017560:	0711      	lsls	r1, r2, #28
 8017562:	bf44      	itt	mi
 8017564:	232b      	movmi	r3, #43	; 0x2b
 8017566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801756a:	f89a 3000 	ldrb.w	r3, [sl]
 801756e:	2b2a      	cmp	r3, #42	; 0x2a
 8017570:	d015      	beq.n	801759e <_svfiprintf_r+0xf6>
 8017572:	9a07      	ldr	r2, [sp, #28]
 8017574:	4654      	mov	r4, sl
 8017576:	2000      	movs	r0, #0
 8017578:	f04f 0c0a 	mov.w	ip, #10
 801757c:	4621      	mov	r1, r4
 801757e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017582:	3b30      	subs	r3, #48	; 0x30
 8017584:	2b09      	cmp	r3, #9
 8017586:	d94d      	bls.n	8017624 <_svfiprintf_r+0x17c>
 8017588:	b1b0      	cbz	r0, 80175b8 <_svfiprintf_r+0x110>
 801758a:	9207      	str	r2, [sp, #28]
 801758c:	e014      	b.n	80175b8 <_svfiprintf_r+0x110>
 801758e:	eba0 0308 	sub.w	r3, r0, r8
 8017592:	fa09 f303 	lsl.w	r3, r9, r3
 8017596:	4313      	orrs	r3, r2
 8017598:	9304      	str	r3, [sp, #16]
 801759a:	46a2      	mov	sl, r4
 801759c:	e7d2      	b.n	8017544 <_svfiprintf_r+0x9c>
 801759e:	9b03      	ldr	r3, [sp, #12]
 80175a0:	1d19      	adds	r1, r3, #4
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	9103      	str	r1, [sp, #12]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	bfbb      	ittet	lt
 80175aa:	425b      	neglt	r3, r3
 80175ac:	f042 0202 	orrlt.w	r2, r2, #2
 80175b0:	9307      	strge	r3, [sp, #28]
 80175b2:	9307      	strlt	r3, [sp, #28]
 80175b4:	bfb8      	it	lt
 80175b6:	9204      	strlt	r2, [sp, #16]
 80175b8:	7823      	ldrb	r3, [r4, #0]
 80175ba:	2b2e      	cmp	r3, #46	; 0x2e
 80175bc:	d10c      	bne.n	80175d8 <_svfiprintf_r+0x130>
 80175be:	7863      	ldrb	r3, [r4, #1]
 80175c0:	2b2a      	cmp	r3, #42	; 0x2a
 80175c2:	d134      	bne.n	801762e <_svfiprintf_r+0x186>
 80175c4:	9b03      	ldr	r3, [sp, #12]
 80175c6:	1d1a      	adds	r2, r3, #4
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	9203      	str	r2, [sp, #12]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	bfb8      	it	lt
 80175d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80175d4:	3402      	adds	r4, #2
 80175d6:	9305      	str	r3, [sp, #20]
 80175d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80176a0 <_svfiprintf_r+0x1f8>
 80175dc:	7821      	ldrb	r1, [r4, #0]
 80175de:	2203      	movs	r2, #3
 80175e0:	4650      	mov	r0, sl
 80175e2:	f7e8 fead 	bl	8000340 <memchr>
 80175e6:	b138      	cbz	r0, 80175f8 <_svfiprintf_r+0x150>
 80175e8:	9b04      	ldr	r3, [sp, #16]
 80175ea:	eba0 000a 	sub.w	r0, r0, sl
 80175ee:	2240      	movs	r2, #64	; 0x40
 80175f0:	4082      	lsls	r2, r0
 80175f2:	4313      	orrs	r3, r2
 80175f4:	3401      	adds	r4, #1
 80175f6:	9304      	str	r3, [sp, #16]
 80175f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175fc:	4825      	ldr	r0, [pc, #148]	; (8017694 <_svfiprintf_r+0x1ec>)
 80175fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017602:	2206      	movs	r2, #6
 8017604:	f7e8 fe9c 	bl	8000340 <memchr>
 8017608:	2800      	cmp	r0, #0
 801760a:	d038      	beq.n	801767e <_svfiprintf_r+0x1d6>
 801760c:	4b22      	ldr	r3, [pc, #136]	; (8017698 <_svfiprintf_r+0x1f0>)
 801760e:	bb1b      	cbnz	r3, 8017658 <_svfiprintf_r+0x1b0>
 8017610:	9b03      	ldr	r3, [sp, #12]
 8017612:	3307      	adds	r3, #7
 8017614:	f023 0307 	bic.w	r3, r3, #7
 8017618:	3308      	adds	r3, #8
 801761a:	9303      	str	r3, [sp, #12]
 801761c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801761e:	4433      	add	r3, r6
 8017620:	9309      	str	r3, [sp, #36]	; 0x24
 8017622:	e768      	b.n	80174f6 <_svfiprintf_r+0x4e>
 8017624:	fb0c 3202 	mla	r2, ip, r2, r3
 8017628:	460c      	mov	r4, r1
 801762a:	2001      	movs	r0, #1
 801762c:	e7a6      	b.n	801757c <_svfiprintf_r+0xd4>
 801762e:	2300      	movs	r3, #0
 8017630:	3401      	adds	r4, #1
 8017632:	9305      	str	r3, [sp, #20]
 8017634:	4619      	mov	r1, r3
 8017636:	f04f 0c0a 	mov.w	ip, #10
 801763a:	4620      	mov	r0, r4
 801763c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017640:	3a30      	subs	r2, #48	; 0x30
 8017642:	2a09      	cmp	r2, #9
 8017644:	d903      	bls.n	801764e <_svfiprintf_r+0x1a6>
 8017646:	2b00      	cmp	r3, #0
 8017648:	d0c6      	beq.n	80175d8 <_svfiprintf_r+0x130>
 801764a:	9105      	str	r1, [sp, #20]
 801764c:	e7c4      	b.n	80175d8 <_svfiprintf_r+0x130>
 801764e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017652:	4604      	mov	r4, r0
 8017654:	2301      	movs	r3, #1
 8017656:	e7f0      	b.n	801763a <_svfiprintf_r+0x192>
 8017658:	ab03      	add	r3, sp, #12
 801765a:	9300      	str	r3, [sp, #0]
 801765c:	462a      	mov	r2, r5
 801765e:	4b0f      	ldr	r3, [pc, #60]	; (801769c <_svfiprintf_r+0x1f4>)
 8017660:	a904      	add	r1, sp, #16
 8017662:	4638      	mov	r0, r7
 8017664:	f3af 8000 	nop.w
 8017668:	1c42      	adds	r2, r0, #1
 801766a:	4606      	mov	r6, r0
 801766c:	d1d6      	bne.n	801761c <_svfiprintf_r+0x174>
 801766e:	89ab      	ldrh	r3, [r5, #12]
 8017670:	065b      	lsls	r3, r3, #25
 8017672:	f53f af2d 	bmi.w	80174d0 <_svfiprintf_r+0x28>
 8017676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017678:	b01d      	add	sp, #116	; 0x74
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	ab03      	add	r3, sp, #12
 8017680:	9300      	str	r3, [sp, #0]
 8017682:	462a      	mov	r2, r5
 8017684:	4b05      	ldr	r3, [pc, #20]	; (801769c <_svfiprintf_r+0x1f4>)
 8017686:	a904      	add	r1, sp, #16
 8017688:	4638      	mov	r0, r7
 801768a:	f000 fa4b 	bl	8017b24 <_printf_i>
 801768e:	e7eb      	b.n	8017668 <_svfiprintf_r+0x1c0>
 8017690:	08018630 	.word	0x08018630
 8017694:	0801863a 	.word	0x0801863a
 8017698:	00000000 	.word	0x00000000
 801769c:	080173f5 	.word	0x080173f5
 80176a0:	08018636 	.word	0x08018636

080176a4 <_sungetc_r>:
 80176a4:	b538      	push	{r3, r4, r5, lr}
 80176a6:	1c4b      	adds	r3, r1, #1
 80176a8:	4614      	mov	r4, r2
 80176aa:	d103      	bne.n	80176b4 <_sungetc_r+0x10>
 80176ac:	f04f 35ff 	mov.w	r5, #4294967295
 80176b0:	4628      	mov	r0, r5
 80176b2:	bd38      	pop	{r3, r4, r5, pc}
 80176b4:	8993      	ldrh	r3, [r2, #12]
 80176b6:	f023 0320 	bic.w	r3, r3, #32
 80176ba:	8193      	strh	r3, [r2, #12]
 80176bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80176be:	6852      	ldr	r2, [r2, #4]
 80176c0:	b2cd      	uxtb	r5, r1
 80176c2:	b18b      	cbz	r3, 80176e8 <_sungetc_r+0x44>
 80176c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80176c6:	4293      	cmp	r3, r2
 80176c8:	dd08      	ble.n	80176dc <_sungetc_r+0x38>
 80176ca:	6823      	ldr	r3, [r4, #0]
 80176cc:	1e5a      	subs	r2, r3, #1
 80176ce:	6022      	str	r2, [r4, #0]
 80176d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80176d4:	6863      	ldr	r3, [r4, #4]
 80176d6:	3301      	adds	r3, #1
 80176d8:	6063      	str	r3, [r4, #4]
 80176da:	e7e9      	b.n	80176b0 <_sungetc_r+0xc>
 80176dc:	4621      	mov	r1, r4
 80176de:	f000 fcca 	bl	8018076 <__submore>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	d0f1      	beq.n	80176ca <_sungetc_r+0x26>
 80176e6:	e7e1      	b.n	80176ac <_sungetc_r+0x8>
 80176e8:	6921      	ldr	r1, [r4, #16]
 80176ea:	6823      	ldr	r3, [r4, #0]
 80176ec:	b151      	cbz	r1, 8017704 <_sungetc_r+0x60>
 80176ee:	4299      	cmp	r1, r3
 80176f0:	d208      	bcs.n	8017704 <_sungetc_r+0x60>
 80176f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80176f6:	42a9      	cmp	r1, r5
 80176f8:	d104      	bne.n	8017704 <_sungetc_r+0x60>
 80176fa:	3b01      	subs	r3, #1
 80176fc:	3201      	adds	r2, #1
 80176fe:	6023      	str	r3, [r4, #0]
 8017700:	6062      	str	r2, [r4, #4]
 8017702:	e7d5      	b.n	80176b0 <_sungetc_r+0xc>
 8017704:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801770c:	6363      	str	r3, [r4, #52]	; 0x34
 801770e:	2303      	movs	r3, #3
 8017710:	63a3      	str	r3, [r4, #56]	; 0x38
 8017712:	4623      	mov	r3, r4
 8017714:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017718:	6023      	str	r3, [r4, #0]
 801771a:	2301      	movs	r3, #1
 801771c:	e7dc      	b.n	80176d8 <_sungetc_r+0x34>

0801771e <__ssrefill_r>:
 801771e:	b510      	push	{r4, lr}
 8017720:	460c      	mov	r4, r1
 8017722:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017724:	b169      	cbz	r1, 8017742 <__ssrefill_r+0x24>
 8017726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801772a:	4299      	cmp	r1, r3
 801772c:	d001      	beq.n	8017732 <__ssrefill_r+0x14>
 801772e:	f7ff fd69 	bl	8017204 <_free_r>
 8017732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017734:	6063      	str	r3, [r4, #4]
 8017736:	2000      	movs	r0, #0
 8017738:	6360      	str	r0, [r4, #52]	; 0x34
 801773a:	b113      	cbz	r3, 8017742 <__ssrefill_r+0x24>
 801773c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801773e:	6023      	str	r3, [r4, #0]
 8017740:	bd10      	pop	{r4, pc}
 8017742:	6923      	ldr	r3, [r4, #16]
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	2300      	movs	r3, #0
 8017748:	6063      	str	r3, [r4, #4]
 801774a:	89a3      	ldrh	r3, [r4, #12]
 801774c:	f043 0320 	orr.w	r3, r3, #32
 8017750:	81a3      	strh	r3, [r4, #12]
 8017752:	f04f 30ff 	mov.w	r0, #4294967295
 8017756:	e7f3      	b.n	8017740 <__ssrefill_r+0x22>

08017758 <__ssvfiscanf_r>:
 8017758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801775c:	460c      	mov	r4, r1
 801775e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017762:	2100      	movs	r1, #0
 8017764:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017768:	49a6      	ldr	r1, [pc, #664]	; (8017a04 <__ssvfiscanf_r+0x2ac>)
 801776a:	91a0      	str	r1, [sp, #640]	; 0x280
 801776c:	f10d 0804 	add.w	r8, sp, #4
 8017770:	49a5      	ldr	r1, [pc, #660]	; (8017a08 <__ssvfiscanf_r+0x2b0>)
 8017772:	4fa6      	ldr	r7, [pc, #664]	; (8017a0c <__ssvfiscanf_r+0x2b4>)
 8017774:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017a10 <__ssvfiscanf_r+0x2b8>
 8017778:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801777c:	4606      	mov	r6, r0
 801777e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017780:	9300      	str	r3, [sp, #0]
 8017782:	7813      	ldrb	r3, [r2, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	f000 815a 	beq.w	8017a3e <__ssvfiscanf_r+0x2e6>
 801778a:	5cf9      	ldrb	r1, [r7, r3]
 801778c:	f011 0108 	ands.w	r1, r1, #8
 8017790:	f102 0501 	add.w	r5, r2, #1
 8017794:	d019      	beq.n	80177ca <__ssvfiscanf_r+0x72>
 8017796:	6863      	ldr	r3, [r4, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	dd0f      	ble.n	80177bc <__ssvfiscanf_r+0x64>
 801779c:	6823      	ldr	r3, [r4, #0]
 801779e:	781a      	ldrb	r2, [r3, #0]
 80177a0:	5cba      	ldrb	r2, [r7, r2]
 80177a2:	0712      	lsls	r2, r2, #28
 80177a4:	d401      	bmi.n	80177aa <__ssvfiscanf_r+0x52>
 80177a6:	462a      	mov	r2, r5
 80177a8:	e7eb      	b.n	8017782 <__ssvfiscanf_r+0x2a>
 80177aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80177ac:	3201      	adds	r2, #1
 80177ae:	9245      	str	r2, [sp, #276]	; 0x114
 80177b0:	6862      	ldr	r2, [r4, #4]
 80177b2:	3301      	adds	r3, #1
 80177b4:	3a01      	subs	r2, #1
 80177b6:	6062      	str	r2, [r4, #4]
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	e7ec      	b.n	8017796 <__ssvfiscanf_r+0x3e>
 80177bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177be:	4621      	mov	r1, r4
 80177c0:	4630      	mov	r0, r6
 80177c2:	4798      	blx	r3
 80177c4:	2800      	cmp	r0, #0
 80177c6:	d0e9      	beq.n	801779c <__ssvfiscanf_r+0x44>
 80177c8:	e7ed      	b.n	80177a6 <__ssvfiscanf_r+0x4e>
 80177ca:	2b25      	cmp	r3, #37	; 0x25
 80177cc:	d012      	beq.n	80177f4 <__ssvfiscanf_r+0x9c>
 80177ce:	469a      	mov	sl, r3
 80177d0:	6863      	ldr	r3, [r4, #4]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f340 8091 	ble.w	80178fa <__ssvfiscanf_r+0x1a2>
 80177d8:	6822      	ldr	r2, [r4, #0]
 80177da:	7813      	ldrb	r3, [r2, #0]
 80177dc:	4553      	cmp	r3, sl
 80177de:	f040 812e 	bne.w	8017a3e <__ssvfiscanf_r+0x2e6>
 80177e2:	6863      	ldr	r3, [r4, #4]
 80177e4:	3b01      	subs	r3, #1
 80177e6:	6063      	str	r3, [r4, #4]
 80177e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80177ea:	3201      	adds	r2, #1
 80177ec:	3301      	adds	r3, #1
 80177ee:	6022      	str	r2, [r4, #0]
 80177f0:	9345      	str	r3, [sp, #276]	; 0x114
 80177f2:	e7d8      	b.n	80177a6 <__ssvfiscanf_r+0x4e>
 80177f4:	9141      	str	r1, [sp, #260]	; 0x104
 80177f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80177f8:	7853      	ldrb	r3, [r2, #1]
 80177fa:	2b2a      	cmp	r3, #42	; 0x2a
 80177fc:	bf02      	ittt	eq
 80177fe:	2310      	moveq	r3, #16
 8017800:	1c95      	addeq	r5, r2, #2
 8017802:	9341      	streq	r3, [sp, #260]	; 0x104
 8017804:	220a      	movs	r2, #10
 8017806:	46aa      	mov	sl, r5
 8017808:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801780c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017810:	2b09      	cmp	r3, #9
 8017812:	d91c      	bls.n	801784e <__ssvfiscanf_r+0xf6>
 8017814:	487e      	ldr	r0, [pc, #504]	; (8017a10 <__ssvfiscanf_r+0x2b8>)
 8017816:	2203      	movs	r2, #3
 8017818:	f7e8 fd92 	bl	8000340 <memchr>
 801781c:	b138      	cbz	r0, 801782e <__ssvfiscanf_r+0xd6>
 801781e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017820:	eba0 0009 	sub.w	r0, r0, r9
 8017824:	2301      	movs	r3, #1
 8017826:	4083      	lsls	r3, r0
 8017828:	4313      	orrs	r3, r2
 801782a:	9341      	str	r3, [sp, #260]	; 0x104
 801782c:	4655      	mov	r5, sl
 801782e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017832:	2b78      	cmp	r3, #120	; 0x78
 8017834:	d806      	bhi.n	8017844 <__ssvfiscanf_r+0xec>
 8017836:	2b57      	cmp	r3, #87	; 0x57
 8017838:	d810      	bhi.n	801785c <__ssvfiscanf_r+0x104>
 801783a:	2b25      	cmp	r3, #37	; 0x25
 801783c:	d0c7      	beq.n	80177ce <__ssvfiscanf_r+0x76>
 801783e:	d857      	bhi.n	80178f0 <__ssvfiscanf_r+0x198>
 8017840:	2b00      	cmp	r3, #0
 8017842:	d065      	beq.n	8017910 <__ssvfiscanf_r+0x1b8>
 8017844:	2303      	movs	r3, #3
 8017846:	9347      	str	r3, [sp, #284]	; 0x11c
 8017848:	230a      	movs	r3, #10
 801784a:	9342      	str	r3, [sp, #264]	; 0x108
 801784c:	e076      	b.n	801793c <__ssvfiscanf_r+0x1e4>
 801784e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017850:	fb02 1103 	mla	r1, r2, r3, r1
 8017854:	3930      	subs	r1, #48	; 0x30
 8017856:	9143      	str	r1, [sp, #268]	; 0x10c
 8017858:	4655      	mov	r5, sl
 801785a:	e7d4      	b.n	8017806 <__ssvfiscanf_r+0xae>
 801785c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017860:	2a20      	cmp	r2, #32
 8017862:	d8ef      	bhi.n	8017844 <__ssvfiscanf_r+0xec>
 8017864:	a101      	add	r1, pc, #4	; (adr r1, 801786c <__ssvfiscanf_r+0x114>)
 8017866:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801786a:	bf00      	nop
 801786c:	0801791f 	.word	0x0801791f
 8017870:	08017845 	.word	0x08017845
 8017874:	08017845 	.word	0x08017845
 8017878:	0801797d 	.word	0x0801797d
 801787c:	08017845 	.word	0x08017845
 8017880:	08017845 	.word	0x08017845
 8017884:	08017845 	.word	0x08017845
 8017888:	08017845 	.word	0x08017845
 801788c:	08017845 	.word	0x08017845
 8017890:	08017845 	.word	0x08017845
 8017894:	08017845 	.word	0x08017845
 8017898:	08017993 	.word	0x08017993
 801789c:	08017979 	.word	0x08017979
 80178a0:	080178f7 	.word	0x080178f7
 80178a4:	080178f7 	.word	0x080178f7
 80178a8:	080178f7 	.word	0x080178f7
 80178ac:	08017845 	.word	0x08017845
 80178b0:	08017935 	.word	0x08017935
 80178b4:	08017845 	.word	0x08017845
 80178b8:	08017845 	.word	0x08017845
 80178bc:	08017845 	.word	0x08017845
 80178c0:	08017845 	.word	0x08017845
 80178c4:	080179a3 	.word	0x080179a3
 80178c8:	08017971 	.word	0x08017971
 80178cc:	08017917 	.word	0x08017917
 80178d0:	08017845 	.word	0x08017845
 80178d4:	08017845 	.word	0x08017845
 80178d8:	0801799f 	.word	0x0801799f
 80178dc:	08017845 	.word	0x08017845
 80178e0:	08017979 	.word	0x08017979
 80178e4:	08017845 	.word	0x08017845
 80178e8:	08017845 	.word	0x08017845
 80178ec:	0801791f 	.word	0x0801791f
 80178f0:	3b45      	subs	r3, #69	; 0x45
 80178f2:	2b02      	cmp	r3, #2
 80178f4:	d8a6      	bhi.n	8017844 <__ssvfiscanf_r+0xec>
 80178f6:	2305      	movs	r3, #5
 80178f8:	e01f      	b.n	801793a <__ssvfiscanf_r+0x1e2>
 80178fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178fc:	4621      	mov	r1, r4
 80178fe:	4630      	mov	r0, r6
 8017900:	4798      	blx	r3
 8017902:	2800      	cmp	r0, #0
 8017904:	f43f af68 	beq.w	80177d8 <__ssvfiscanf_r+0x80>
 8017908:	9844      	ldr	r0, [sp, #272]	; 0x110
 801790a:	2800      	cmp	r0, #0
 801790c:	f040 808d 	bne.w	8017a2a <__ssvfiscanf_r+0x2d2>
 8017910:	f04f 30ff 	mov.w	r0, #4294967295
 8017914:	e08f      	b.n	8017a36 <__ssvfiscanf_r+0x2de>
 8017916:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017918:	f042 0220 	orr.w	r2, r2, #32
 801791c:	9241      	str	r2, [sp, #260]	; 0x104
 801791e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017924:	9241      	str	r2, [sp, #260]	; 0x104
 8017926:	2210      	movs	r2, #16
 8017928:	2b6f      	cmp	r3, #111	; 0x6f
 801792a:	9242      	str	r2, [sp, #264]	; 0x108
 801792c:	bf34      	ite	cc
 801792e:	2303      	movcc	r3, #3
 8017930:	2304      	movcs	r3, #4
 8017932:	e002      	b.n	801793a <__ssvfiscanf_r+0x1e2>
 8017934:	2300      	movs	r3, #0
 8017936:	9342      	str	r3, [sp, #264]	; 0x108
 8017938:	2303      	movs	r3, #3
 801793a:	9347      	str	r3, [sp, #284]	; 0x11c
 801793c:	6863      	ldr	r3, [r4, #4]
 801793e:	2b00      	cmp	r3, #0
 8017940:	dd3d      	ble.n	80179be <__ssvfiscanf_r+0x266>
 8017942:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017944:	0659      	lsls	r1, r3, #25
 8017946:	d404      	bmi.n	8017952 <__ssvfiscanf_r+0x1fa>
 8017948:	6823      	ldr	r3, [r4, #0]
 801794a:	781a      	ldrb	r2, [r3, #0]
 801794c:	5cba      	ldrb	r2, [r7, r2]
 801794e:	0712      	lsls	r2, r2, #28
 8017950:	d43c      	bmi.n	80179cc <__ssvfiscanf_r+0x274>
 8017952:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017954:	2b02      	cmp	r3, #2
 8017956:	dc4b      	bgt.n	80179f0 <__ssvfiscanf_r+0x298>
 8017958:	466b      	mov	r3, sp
 801795a:	4622      	mov	r2, r4
 801795c:	a941      	add	r1, sp, #260	; 0x104
 801795e:	4630      	mov	r0, r6
 8017960:	f000 fa02 	bl	8017d68 <_scanf_chars>
 8017964:	2801      	cmp	r0, #1
 8017966:	d06a      	beq.n	8017a3e <__ssvfiscanf_r+0x2e6>
 8017968:	2802      	cmp	r0, #2
 801796a:	f47f af1c 	bne.w	80177a6 <__ssvfiscanf_r+0x4e>
 801796e:	e7cb      	b.n	8017908 <__ssvfiscanf_r+0x1b0>
 8017970:	2308      	movs	r3, #8
 8017972:	9342      	str	r3, [sp, #264]	; 0x108
 8017974:	2304      	movs	r3, #4
 8017976:	e7e0      	b.n	801793a <__ssvfiscanf_r+0x1e2>
 8017978:	220a      	movs	r2, #10
 801797a:	e7d5      	b.n	8017928 <__ssvfiscanf_r+0x1d0>
 801797c:	4629      	mov	r1, r5
 801797e:	4640      	mov	r0, r8
 8017980:	f000 fb40 	bl	8018004 <__sccl>
 8017984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801798a:	9341      	str	r3, [sp, #260]	; 0x104
 801798c:	4605      	mov	r5, r0
 801798e:	2301      	movs	r3, #1
 8017990:	e7d3      	b.n	801793a <__ssvfiscanf_r+0x1e2>
 8017992:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017998:	9341      	str	r3, [sp, #260]	; 0x104
 801799a:	2300      	movs	r3, #0
 801799c:	e7cd      	b.n	801793a <__ssvfiscanf_r+0x1e2>
 801799e:	2302      	movs	r3, #2
 80179a0:	e7cb      	b.n	801793a <__ssvfiscanf_r+0x1e2>
 80179a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80179a4:	06c3      	lsls	r3, r0, #27
 80179a6:	f53f aefe 	bmi.w	80177a6 <__ssvfiscanf_r+0x4e>
 80179aa:	9b00      	ldr	r3, [sp, #0]
 80179ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80179ae:	1d19      	adds	r1, r3, #4
 80179b0:	9100      	str	r1, [sp, #0]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	07c0      	lsls	r0, r0, #31
 80179b6:	bf4c      	ite	mi
 80179b8:	801a      	strhmi	r2, [r3, #0]
 80179ba:	601a      	strpl	r2, [r3, #0]
 80179bc:	e6f3      	b.n	80177a6 <__ssvfiscanf_r+0x4e>
 80179be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179c0:	4621      	mov	r1, r4
 80179c2:	4630      	mov	r0, r6
 80179c4:	4798      	blx	r3
 80179c6:	2800      	cmp	r0, #0
 80179c8:	d0bb      	beq.n	8017942 <__ssvfiscanf_r+0x1ea>
 80179ca:	e79d      	b.n	8017908 <__ssvfiscanf_r+0x1b0>
 80179cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80179ce:	3201      	adds	r2, #1
 80179d0:	9245      	str	r2, [sp, #276]	; 0x114
 80179d2:	6862      	ldr	r2, [r4, #4]
 80179d4:	3a01      	subs	r2, #1
 80179d6:	2a00      	cmp	r2, #0
 80179d8:	6062      	str	r2, [r4, #4]
 80179da:	dd02      	ble.n	80179e2 <__ssvfiscanf_r+0x28a>
 80179dc:	3301      	adds	r3, #1
 80179de:	6023      	str	r3, [r4, #0]
 80179e0:	e7b2      	b.n	8017948 <__ssvfiscanf_r+0x1f0>
 80179e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179e4:	4621      	mov	r1, r4
 80179e6:	4630      	mov	r0, r6
 80179e8:	4798      	blx	r3
 80179ea:	2800      	cmp	r0, #0
 80179ec:	d0ac      	beq.n	8017948 <__ssvfiscanf_r+0x1f0>
 80179ee:	e78b      	b.n	8017908 <__ssvfiscanf_r+0x1b0>
 80179f0:	2b04      	cmp	r3, #4
 80179f2:	dc0f      	bgt.n	8017a14 <__ssvfiscanf_r+0x2bc>
 80179f4:	466b      	mov	r3, sp
 80179f6:	4622      	mov	r2, r4
 80179f8:	a941      	add	r1, sp, #260	; 0x104
 80179fa:	4630      	mov	r0, r6
 80179fc:	f000 fa0e 	bl	8017e1c <_scanf_i>
 8017a00:	e7b0      	b.n	8017964 <__ssvfiscanf_r+0x20c>
 8017a02:	bf00      	nop
 8017a04:	080176a5 	.word	0x080176a5
 8017a08:	0801771f 	.word	0x0801771f
 8017a0c:	0801867f 	.word	0x0801867f
 8017a10:	08018636 	.word	0x08018636
 8017a14:	4b0b      	ldr	r3, [pc, #44]	; (8017a44 <__ssvfiscanf_r+0x2ec>)
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	f43f aec5 	beq.w	80177a6 <__ssvfiscanf_r+0x4e>
 8017a1c:	466b      	mov	r3, sp
 8017a1e:	4622      	mov	r2, r4
 8017a20:	a941      	add	r1, sp, #260	; 0x104
 8017a22:	4630      	mov	r0, r6
 8017a24:	f3af 8000 	nop.w
 8017a28:	e79c      	b.n	8017964 <__ssvfiscanf_r+0x20c>
 8017a2a:	89a3      	ldrh	r3, [r4, #12]
 8017a2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017a30:	bf18      	it	ne
 8017a32:	f04f 30ff 	movne.w	r0, #4294967295
 8017a36:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017a40:	e7f9      	b.n	8017a36 <__ssvfiscanf_r+0x2de>
 8017a42:	bf00      	nop
 8017a44:	00000000 	.word	0x00000000

08017a48 <_printf_common>:
 8017a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a4c:	4616      	mov	r6, r2
 8017a4e:	4699      	mov	r9, r3
 8017a50:	688a      	ldr	r2, [r1, #8]
 8017a52:	690b      	ldr	r3, [r1, #16]
 8017a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a58:	4293      	cmp	r3, r2
 8017a5a:	bfb8      	it	lt
 8017a5c:	4613      	movlt	r3, r2
 8017a5e:	6033      	str	r3, [r6, #0]
 8017a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a64:	4607      	mov	r7, r0
 8017a66:	460c      	mov	r4, r1
 8017a68:	b10a      	cbz	r2, 8017a6e <_printf_common+0x26>
 8017a6a:	3301      	adds	r3, #1
 8017a6c:	6033      	str	r3, [r6, #0]
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	0699      	lsls	r1, r3, #26
 8017a72:	bf42      	ittt	mi
 8017a74:	6833      	ldrmi	r3, [r6, #0]
 8017a76:	3302      	addmi	r3, #2
 8017a78:	6033      	strmi	r3, [r6, #0]
 8017a7a:	6825      	ldr	r5, [r4, #0]
 8017a7c:	f015 0506 	ands.w	r5, r5, #6
 8017a80:	d106      	bne.n	8017a90 <_printf_common+0x48>
 8017a82:	f104 0a19 	add.w	sl, r4, #25
 8017a86:	68e3      	ldr	r3, [r4, #12]
 8017a88:	6832      	ldr	r2, [r6, #0]
 8017a8a:	1a9b      	subs	r3, r3, r2
 8017a8c:	42ab      	cmp	r3, r5
 8017a8e:	dc26      	bgt.n	8017ade <_printf_common+0x96>
 8017a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a94:	1e13      	subs	r3, r2, #0
 8017a96:	6822      	ldr	r2, [r4, #0]
 8017a98:	bf18      	it	ne
 8017a9a:	2301      	movne	r3, #1
 8017a9c:	0692      	lsls	r2, r2, #26
 8017a9e:	d42b      	bmi.n	8017af8 <_printf_common+0xb0>
 8017aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017aa4:	4649      	mov	r1, r9
 8017aa6:	4638      	mov	r0, r7
 8017aa8:	47c0      	blx	r8
 8017aaa:	3001      	adds	r0, #1
 8017aac:	d01e      	beq.n	8017aec <_printf_common+0xa4>
 8017aae:	6823      	ldr	r3, [r4, #0]
 8017ab0:	6922      	ldr	r2, [r4, #16]
 8017ab2:	f003 0306 	and.w	r3, r3, #6
 8017ab6:	2b04      	cmp	r3, #4
 8017ab8:	bf02      	ittt	eq
 8017aba:	68e5      	ldreq	r5, [r4, #12]
 8017abc:	6833      	ldreq	r3, [r6, #0]
 8017abe:	1aed      	subeq	r5, r5, r3
 8017ac0:	68a3      	ldr	r3, [r4, #8]
 8017ac2:	bf0c      	ite	eq
 8017ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ac8:	2500      	movne	r5, #0
 8017aca:	4293      	cmp	r3, r2
 8017acc:	bfc4      	itt	gt
 8017ace:	1a9b      	subgt	r3, r3, r2
 8017ad0:	18ed      	addgt	r5, r5, r3
 8017ad2:	2600      	movs	r6, #0
 8017ad4:	341a      	adds	r4, #26
 8017ad6:	42b5      	cmp	r5, r6
 8017ad8:	d11a      	bne.n	8017b10 <_printf_common+0xc8>
 8017ada:	2000      	movs	r0, #0
 8017adc:	e008      	b.n	8017af0 <_printf_common+0xa8>
 8017ade:	2301      	movs	r3, #1
 8017ae0:	4652      	mov	r2, sl
 8017ae2:	4649      	mov	r1, r9
 8017ae4:	4638      	mov	r0, r7
 8017ae6:	47c0      	blx	r8
 8017ae8:	3001      	adds	r0, #1
 8017aea:	d103      	bne.n	8017af4 <_printf_common+0xac>
 8017aec:	f04f 30ff 	mov.w	r0, #4294967295
 8017af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017af4:	3501      	adds	r5, #1
 8017af6:	e7c6      	b.n	8017a86 <_printf_common+0x3e>
 8017af8:	18e1      	adds	r1, r4, r3
 8017afa:	1c5a      	adds	r2, r3, #1
 8017afc:	2030      	movs	r0, #48	; 0x30
 8017afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b02:	4422      	add	r2, r4
 8017b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b0c:	3302      	adds	r3, #2
 8017b0e:	e7c7      	b.n	8017aa0 <_printf_common+0x58>
 8017b10:	2301      	movs	r3, #1
 8017b12:	4622      	mov	r2, r4
 8017b14:	4649      	mov	r1, r9
 8017b16:	4638      	mov	r0, r7
 8017b18:	47c0      	blx	r8
 8017b1a:	3001      	adds	r0, #1
 8017b1c:	d0e6      	beq.n	8017aec <_printf_common+0xa4>
 8017b1e:	3601      	adds	r6, #1
 8017b20:	e7d9      	b.n	8017ad6 <_printf_common+0x8e>
	...

08017b24 <_printf_i>:
 8017b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b28:	7e0f      	ldrb	r7, [r1, #24]
 8017b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017b2c:	2f78      	cmp	r7, #120	; 0x78
 8017b2e:	4691      	mov	r9, r2
 8017b30:	4680      	mov	r8, r0
 8017b32:	460c      	mov	r4, r1
 8017b34:	469a      	mov	sl, r3
 8017b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017b3a:	d807      	bhi.n	8017b4c <_printf_i+0x28>
 8017b3c:	2f62      	cmp	r7, #98	; 0x62
 8017b3e:	d80a      	bhi.n	8017b56 <_printf_i+0x32>
 8017b40:	2f00      	cmp	r7, #0
 8017b42:	f000 80d4 	beq.w	8017cee <_printf_i+0x1ca>
 8017b46:	2f58      	cmp	r7, #88	; 0x58
 8017b48:	f000 80c0 	beq.w	8017ccc <_printf_i+0x1a8>
 8017b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b54:	e03a      	b.n	8017bcc <_printf_i+0xa8>
 8017b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b5a:	2b15      	cmp	r3, #21
 8017b5c:	d8f6      	bhi.n	8017b4c <_printf_i+0x28>
 8017b5e:	a101      	add	r1, pc, #4	; (adr r1, 8017b64 <_printf_i+0x40>)
 8017b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b64:	08017bbd 	.word	0x08017bbd
 8017b68:	08017bd1 	.word	0x08017bd1
 8017b6c:	08017b4d 	.word	0x08017b4d
 8017b70:	08017b4d 	.word	0x08017b4d
 8017b74:	08017b4d 	.word	0x08017b4d
 8017b78:	08017b4d 	.word	0x08017b4d
 8017b7c:	08017bd1 	.word	0x08017bd1
 8017b80:	08017b4d 	.word	0x08017b4d
 8017b84:	08017b4d 	.word	0x08017b4d
 8017b88:	08017b4d 	.word	0x08017b4d
 8017b8c:	08017b4d 	.word	0x08017b4d
 8017b90:	08017cd5 	.word	0x08017cd5
 8017b94:	08017bfd 	.word	0x08017bfd
 8017b98:	08017c8f 	.word	0x08017c8f
 8017b9c:	08017b4d 	.word	0x08017b4d
 8017ba0:	08017b4d 	.word	0x08017b4d
 8017ba4:	08017cf7 	.word	0x08017cf7
 8017ba8:	08017b4d 	.word	0x08017b4d
 8017bac:	08017bfd 	.word	0x08017bfd
 8017bb0:	08017b4d 	.word	0x08017b4d
 8017bb4:	08017b4d 	.word	0x08017b4d
 8017bb8:	08017c97 	.word	0x08017c97
 8017bbc:	682b      	ldr	r3, [r5, #0]
 8017bbe:	1d1a      	adds	r2, r3, #4
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	602a      	str	r2, [r5, #0]
 8017bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bcc:	2301      	movs	r3, #1
 8017bce:	e09f      	b.n	8017d10 <_printf_i+0x1ec>
 8017bd0:	6820      	ldr	r0, [r4, #0]
 8017bd2:	682b      	ldr	r3, [r5, #0]
 8017bd4:	0607      	lsls	r7, r0, #24
 8017bd6:	f103 0104 	add.w	r1, r3, #4
 8017bda:	6029      	str	r1, [r5, #0]
 8017bdc:	d501      	bpl.n	8017be2 <_printf_i+0xbe>
 8017bde:	681e      	ldr	r6, [r3, #0]
 8017be0:	e003      	b.n	8017bea <_printf_i+0xc6>
 8017be2:	0646      	lsls	r6, r0, #25
 8017be4:	d5fb      	bpl.n	8017bde <_printf_i+0xba>
 8017be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017bea:	2e00      	cmp	r6, #0
 8017bec:	da03      	bge.n	8017bf6 <_printf_i+0xd2>
 8017bee:	232d      	movs	r3, #45	; 0x2d
 8017bf0:	4276      	negs	r6, r6
 8017bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bf6:	485a      	ldr	r0, [pc, #360]	; (8017d60 <_printf_i+0x23c>)
 8017bf8:	230a      	movs	r3, #10
 8017bfa:	e012      	b.n	8017c22 <_printf_i+0xfe>
 8017bfc:	682b      	ldr	r3, [r5, #0]
 8017bfe:	6820      	ldr	r0, [r4, #0]
 8017c00:	1d19      	adds	r1, r3, #4
 8017c02:	6029      	str	r1, [r5, #0]
 8017c04:	0605      	lsls	r5, r0, #24
 8017c06:	d501      	bpl.n	8017c0c <_printf_i+0xe8>
 8017c08:	681e      	ldr	r6, [r3, #0]
 8017c0a:	e002      	b.n	8017c12 <_printf_i+0xee>
 8017c0c:	0641      	lsls	r1, r0, #25
 8017c0e:	d5fb      	bpl.n	8017c08 <_printf_i+0xe4>
 8017c10:	881e      	ldrh	r6, [r3, #0]
 8017c12:	4853      	ldr	r0, [pc, #332]	; (8017d60 <_printf_i+0x23c>)
 8017c14:	2f6f      	cmp	r7, #111	; 0x6f
 8017c16:	bf0c      	ite	eq
 8017c18:	2308      	moveq	r3, #8
 8017c1a:	230a      	movne	r3, #10
 8017c1c:	2100      	movs	r1, #0
 8017c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c22:	6865      	ldr	r5, [r4, #4]
 8017c24:	60a5      	str	r5, [r4, #8]
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	bfa2      	ittt	ge
 8017c2a:	6821      	ldrge	r1, [r4, #0]
 8017c2c:	f021 0104 	bicge.w	r1, r1, #4
 8017c30:	6021      	strge	r1, [r4, #0]
 8017c32:	b90e      	cbnz	r6, 8017c38 <_printf_i+0x114>
 8017c34:	2d00      	cmp	r5, #0
 8017c36:	d04b      	beq.n	8017cd0 <_printf_i+0x1ac>
 8017c38:	4615      	mov	r5, r2
 8017c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8017c42:	5dc7      	ldrb	r7, [r0, r7]
 8017c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c48:	4637      	mov	r7, r6
 8017c4a:	42bb      	cmp	r3, r7
 8017c4c:	460e      	mov	r6, r1
 8017c4e:	d9f4      	bls.n	8017c3a <_printf_i+0x116>
 8017c50:	2b08      	cmp	r3, #8
 8017c52:	d10b      	bne.n	8017c6c <_printf_i+0x148>
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	07de      	lsls	r6, r3, #31
 8017c58:	d508      	bpl.n	8017c6c <_printf_i+0x148>
 8017c5a:	6923      	ldr	r3, [r4, #16]
 8017c5c:	6861      	ldr	r1, [r4, #4]
 8017c5e:	4299      	cmp	r1, r3
 8017c60:	bfde      	ittt	le
 8017c62:	2330      	movle	r3, #48	; 0x30
 8017c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c6c:	1b52      	subs	r2, r2, r5
 8017c6e:	6122      	str	r2, [r4, #16]
 8017c70:	f8cd a000 	str.w	sl, [sp]
 8017c74:	464b      	mov	r3, r9
 8017c76:	aa03      	add	r2, sp, #12
 8017c78:	4621      	mov	r1, r4
 8017c7a:	4640      	mov	r0, r8
 8017c7c:	f7ff fee4 	bl	8017a48 <_printf_common>
 8017c80:	3001      	adds	r0, #1
 8017c82:	d14a      	bne.n	8017d1a <_printf_i+0x1f6>
 8017c84:	f04f 30ff 	mov.w	r0, #4294967295
 8017c88:	b004      	add	sp, #16
 8017c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c8e:	6823      	ldr	r3, [r4, #0]
 8017c90:	f043 0320 	orr.w	r3, r3, #32
 8017c94:	6023      	str	r3, [r4, #0]
 8017c96:	4833      	ldr	r0, [pc, #204]	; (8017d64 <_printf_i+0x240>)
 8017c98:	2778      	movs	r7, #120	; 0x78
 8017c9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c9e:	6823      	ldr	r3, [r4, #0]
 8017ca0:	6829      	ldr	r1, [r5, #0]
 8017ca2:	061f      	lsls	r7, r3, #24
 8017ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ca8:	d402      	bmi.n	8017cb0 <_printf_i+0x18c>
 8017caa:	065f      	lsls	r7, r3, #25
 8017cac:	bf48      	it	mi
 8017cae:	b2b6      	uxthmi	r6, r6
 8017cb0:	07df      	lsls	r7, r3, #31
 8017cb2:	bf48      	it	mi
 8017cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8017cb8:	6029      	str	r1, [r5, #0]
 8017cba:	bf48      	it	mi
 8017cbc:	6023      	strmi	r3, [r4, #0]
 8017cbe:	b91e      	cbnz	r6, 8017cc8 <_printf_i+0x1a4>
 8017cc0:	6823      	ldr	r3, [r4, #0]
 8017cc2:	f023 0320 	bic.w	r3, r3, #32
 8017cc6:	6023      	str	r3, [r4, #0]
 8017cc8:	2310      	movs	r3, #16
 8017cca:	e7a7      	b.n	8017c1c <_printf_i+0xf8>
 8017ccc:	4824      	ldr	r0, [pc, #144]	; (8017d60 <_printf_i+0x23c>)
 8017cce:	e7e4      	b.n	8017c9a <_printf_i+0x176>
 8017cd0:	4615      	mov	r5, r2
 8017cd2:	e7bd      	b.n	8017c50 <_printf_i+0x12c>
 8017cd4:	682b      	ldr	r3, [r5, #0]
 8017cd6:	6826      	ldr	r6, [r4, #0]
 8017cd8:	6961      	ldr	r1, [r4, #20]
 8017cda:	1d18      	adds	r0, r3, #4
 8017cdc:	6028      	str	r0, [r5, #0]
 8017cde:	0635      	lsls	r5, r6, #24
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	d501      	bpl.n	8017ce8 <_printf_i+0x1c4>
 8017ce4:	6019      	str	r1, [r3, #0]
 8017ce6:	e002      	b.n	8017cee <_printf_i+0x1ca>
 8017ce8:	0670      	lsls	r0, r6, #25
 8017cea:	d5fb      	bpl.n	8017ce4 <_printf_i+0x1c0>
 8017cec:	8019      	strh	r1, [r3, #0]
 8017cee:	2300      	movs	r3, #0
 8017cf0:	6123      	str	r3, [r4, #16]
 8017cf2:	4615      	mov	r5, r2
 8017cf4:	e7bc      	b.n	8017c70 <_printf_i+0x14c>
 8017cf6:	682b      	ldr	r3, [r5, #0]
 8017cf8:	1d1a      	adds	r2, r3, #4
 8017cfa:	602a      	str	r2, [r5, #0]
 8017cfc:	681d      	ldr	r5, [r3, #0]
 8017cfe:	6862      	ldr	r2, [r4, #4]
 8017d00:	2100      	movs	r1, #0
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7e8 fb1c 	bl	8000340 <memchr>
 8017d08:	b108      	cbz	r0, 8017d0e <_printf_i+0x1ea>
 8017d0a:	1b40      	subs	r0, r0, r5
 8017d0c:	6060      	str	r0, [r4, #4]
 8017d0e:	6863      	ldr	r3, [r4, #4]
 8017d10:	6123      	str	r3, [r4, #16]
 8017d12:	2300      	movs	r3, #0
 8017d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d18:	e7aa      	b.n	8017c70 <_printf_i+0x14c>
 8017d1a:	6923      	ldr	r3, [r4, #16]
 8017d1c:	462a      	mov	r2, r5
 8017d1e:	4649      	mov	r1, r9
 8017d20:	4640      	mov	r0, r8
 8017d22:	47d0      	blx	sl
 8017d24:	3001      	adds	r0, #1
 8017d26:	d0ad      	beq.n	8017c84 <_printf_i+0x160>
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	079b      	lsls	r3, r3, #30
 8017d2c:	d413      	bmi.n	8017d56 <_printf_i+0x232>
 8017d2e:	68e0      	ldr	r0, [r4, #12]
 8017d30:	9b03      	ldr	r3, [sp, #12]
 8017d32:	4298      	cmp	r0, r3
 8017d34:	bfb8      	it	lt
 8017d36:	4618      	movlt	r0, r3
 8017d38:	e7a6      	b.n	8017c88 <_printf_i+0x164>
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	4632      	mov	r2, r6
 8017d3e:	4649      	mov	r1, r9
 8017d40:	4640      	mov	r0, r8
 8017d42:	47d0      	blx	sl
 8017d44:	3001      	adds	r0, #1
 8017d46:	d09d      	beq.n	8017c84 <_printf_i+0x160>
 8017d48:	3501      	adds	r5, #1
 8017d4a:	68e3      	ldr	r3, [r4, #12]
 8017d4c:	9903      	ldr	r1, [sp, #12]
 8017d4e:	1a5b      	subs	r3, r3, r1
 8017d50:	42ab      	cmp	r3, r5
 8017d52:	dcf2      	bgt.n	8017d3a <_printf_i+0x216>
 8017d54:	e7eb      	b.n	8017d2e <_printf_i+0x20a>
 8017d56:	2500      	movs	r5, #0
 8017d58:	f104 0619 	add.w	r6, r4, #25
 8017d5c:	e7f5      	b.n	8017d4a <_printf_i+0x226>
 8017d5e:	bf00      	nop
 8017d60:	08018641 	.word	0x08018641
 8017d64:	08018652 	.word	0x08018652

08017d68 <_scanf_chars>:
 8017d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d6c:	4615      	mov	r5, r2
 8017d6e:	688a      	ldr	r2, [r1, #8]
 8017d70:	4680      	mov	r8, r0
 8017d72:	460c      	mov	r4, r1
 8017d74:	b932      	cbnz	r2, 8017d84 <_scanf_chars+0x1c>
 8017d76:	698a      	ldr	r2, [r1, #24]
 8017d78:	2a00      	cmp	r2, #0
 8017d7a:	bf0c      	ite	eq
 8017d7c:	2201      	moveq	r2, #1
 8017d7e:	f04f 32ff 	movne.w	r2, #4294967295
 8017d82:	608a      	str	r2, [r1, #8]
 8017d84:	6822      	ldr	r2, [r4, #0]
 8017d86:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017e18 <_scanf_chars+0xb0>
 8017d8a:	06d1      	lsls	r1, r2, #27
 8017d8c:	bf5f      	itttt	pl
 8017d8e:	681a      	ldrpl	r2, [r3, #0]
 8017d90:	1d11      	addpl	r1, r2, #4
 8017d92:	6019      	strpl	r1, [r3, #0]
 8017d94:	6816      	ldrpl	r6, [r2, #0]
 8017d96:	2700      	movs	r7, #0
 8017d98:	69a0      	ldr	r0, [r4, #24]
 8017d9a:	b188      	cbz	r0, 8017dc0 <_scanf_chars+0x58>
 8017d9c:	2801      	cmp	r0, #1
 8017d9e:	d107      	bne.n	8017db0 <_scanf_chars+0x48>
 8017da0:	682a      	ldr	r2, [r5, #0]
 8017da2:	7811      	ldrb	r1, [r2, #0]
 8017da4:	6962      	ldr	r2, [r4, #20]
 8017da6:	5c52      	ldrb	r2, [r2, r1]
 8017da8:	b952      	cbnz	r2, 8017dc0 <_scanf_chars+0x58>
 8017daa:	2f00      	cmp	r7, #0
 8017dac:	d031      	beq.n	8017e12 <_scanf_chars+0xaa>
 8017dae:	e022      	b.n	8017df6 <_scanf_chars+0x8e>
 8017db0:	2802      	cmp	r0, #2
 8017db2:	d120      	bne.n	8017df6 <_scanf_chars+0x8e>
 8017db4:	682b      	ldr	r3, [r5, #0]
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017dbc:	071b      	lsls	r3, r3, #28
 8017dbe:	d41a      	bmi.n	8017df6 <_scanf_chars+0x8e>
 8017dc0:	6823      	ldr	r3, [r4, #0]
 8017dc2:	06da      	lsls	r2, r3, #27
 8017dc4:	bf5e      	ittt	pl
 8017dc6:	682b      	ldrpl	r3, [r5, #0]
 8017dc8:	781b      	ldrbpl	r3, [r3, #0]
 8017dca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017dce:	682a      	ldr	r2, [r5, #0]
 8017dd0:	686b      	ldr	r3, [r5, #4]
 8017dd2:	3201      	adds	r2, #1
 8017dd4:	602a      	str	r2, [r5, #0]
 8017dd6:	68a2      	ldr	r2, [r4, #8]
 8017dd8:	3b01      	subs	r3, #1
 8017dda:	3a01      	subs	r2, #1
 8017ddc:	606b      	str	r3, [r5, #4]
 8017dde:	3701      	adds	r7, #1
 8017de0:	60a2      	str	r2, [r4, #8]
 8017de2:	b142      	cbz	r2, 8017df6 <_scanf_chars+0x8e>
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	dcd7      	bgt.n	8017d98 <_scanf_chars+0x30>
 8017de8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017dec:	4629      	mov	r1, r5
 8017dee:	4640      	mov	r0, r8
 8017df0:	4798      	blx	r3
 8017df2:	2800      	cmp	r0, #0
 8017df4:	d0d0      	beq.n	8017d98 <_scanf_chars+0x30>
 8017df6:	6823      	ldr	r3, [r4, #0]
 8017df8:	f013 0310 	ands.w	r3, r3, #16
 8017dfc:	d105      	bne.n	8017e0a <_scanf_chars+0xa2>
 8017dfe:	68e2      	ldr	r2, [r4, #12]
 8017e00:	3201      	adds	r2, #1
 8017e02:	60e2      	str	r2, [r4, #12]
 8017e04:	69a2      	ldr	r2, [r4, #24]
 8017e06:	b102      	cbz	r2, 8017e0a <_scanf_chars+0xa2>
 8017e08:	7033      	strb	r3, [r6, #0]
 8017e0a:	6923      	ldr	r3, [r4, #16]
 8017e0c:	443b      	add	r3, r7
 8017e0e:	6123      	str	r3, [r4, #16]
 8017e10:	2000      	movs	r0, #0
 8017e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e16:	bf00      	nop
 8017e18:	0801867f 	.word	0x0801867f

08017e1c <_scanf_i>:
 8017e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e20:	4698      	mov	r8, r3
 8017e22:	4b74      	ldr	r3, [pc, #464]	; (8017ff4 <_scanf_i+0x1d8>)
 8017e24:	460c      	mov	r4, r1
 8017e26:	4682      	mov	sl, r0
 8017e28:	4616      	mov	r6, r2
 8017e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017e2e:	b087      	sub	sp, #28
 8017e30:	ab03      	add	r3, sp, #12
 8017e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017e36:	4b70      	ldr	r3, [pc, #448]	; (8017ff8 <_scanf_i+0x1dc>)
 8017e38:	69a1      	ldr	r1, [r4, #24]
 8017e3a:	4a70      	ldr	r2, [pc, #448]	; (8017ffc <_scanf_i+0x1e0>)
 8017e3c:	2903      	cmp	r1, #3
 8017e3e:	bf18      	it	ne
 8017e40:	461a      	movne	r2, r3
 8017e42:	68a3      	ldr	r3, [r4, #8]
 8017e44:	9201      	str	r2, [sp, #4]
 8017e46:	1e5a      	subs	r2, r3, #1
 8017e48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017e4c:	bf88      	it	hi
 8017e4e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017e52:	4627      	mov	r7, r4
 8017e54:	bf82      	ittt	hi
 8017e56:	eb03 0905 	addhi.w	r9, r3, r5
 8017e5a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017e5e:	60a3      	strhi	r3, [r4, #8]
 8017e60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e64:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017e68:	bf98      	it	ls
 8017e6a:	f04f 0900 	movls.w	r9, #0
 8017e6e:	6023      	str	r3, [r4, #0]
 8017e70:	463d      	mov	r5, r7
 8017e72:	f04f 0b00 	mov.w	fp, #0
 8017e76:	6831      	ldr	r1, [r6, #0]
 8017e78:	ab03      	add	r3, sp, #12
 8017e7a:	7809      	ldrb	r1, [r1, #0]
 8017e7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e80:	2202      	movs	r2, #2
 8017e82:	f7e8 fa5d 	bl	8000340 <memchr>
 8017e86:	b328      	cbz	r0, 8017ed4 <_scanf_i+0xb8>
 8017e88:	f1bb 0f01 	cmp.w	fp, #1
 8017e8c:	d159      	bne.n	8017f42 <_scanf_i+0x126>
 8017e8e:	6862      	ldr	r2, [r4, #4]
 8017e90:	b92a      	cbnz	r2, 8017e9e <_scanf_i+0x82>
 8017e92:	6822      	ldr	r2, [r4, #0]
 8017e94:	2308      	movs	r3, #8
 8017e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e9a:	6063      	str	r3, [r4, #4]
 8017e9c:	6022      	str	r2, [r4, #0]
 8017e9e:	6822      	ldr	r2, [r4, #0]
 8017ea0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017ea4:	6022      	str	r2, [r4, #0]
 8017ea6:	68a2      	ldr	r2, [r4, #8]
 8017ea8:	1e51      	subs	r1, r2, #1
 8017eaa:	60a1      	str	r1, [r4, #8]
 8017eac:	b192      	cbz	r2, 8017ed4 <_scanf_i+0xb8>
 8017eae:	6832      	ldr	r2, [r6, #0]
 8017eb0:	1c51      	adds	r1, r2, #1
 8017eb2:	6031      	str	r1, [r6, #0]
 8017eb4:	7812      	ldrb	r2, [r2, #0]
 8017eb6:	f805 2b01 	strb.w	r2, [r5], #1
 8017eba:	6872      	ldr	r2, [r6, #4]
 8017ebc:	3a01      	subs	r2, #1
 8017ebe:	2a00      	cmp	r2, #0
 8017ec0:	6072      	str	r2, [r6, #4]
 8017ec2:	dc07      	bgt.n	8017ed4 <_scanf_i+0xb8>
 8017ec4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017ec8:	4631      	mov	r1, r6
 8017eca:	4650      	mov	r0, sl
 8017ecc:	4790      	blx	r2
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	f040 8085 	bne.w	8017fde <_scanf_i+0x1c2>
 8017ed4:	f10b 0b01 	add.w	fp, fp, #1
 8017ed8:	f1bb 0f03 	cmp.w	fp, #3
 8017edc:	d1cb      	bne.n	8017e76 <_scanf_i+0x5a>
 8017ede:	6863      	ldr	r3, [r4, #4]
 8017ee0:	b90b      	cbnz	r3, 8017ee6 <_scanf_i+0xca>
 8017ee2:	230a      	movs	r3, #10
 8017ee4:	6063      	str	r3, [r4, #4]
 8017ee6:	6863      	ldr	r3, [r4, #4]
 8017ee8:	4945      	ldr	r1, [pc, #276]	; (8018000 <_scanf_i+0x1e4>)
 8017eea:	6960      	ldr	r0, [r4, #20]
 8017eec:	1ac9      	subs	r1, r1, r3
 8017eee:	f000 f889 	bl	8018004 <__sccl>
 8017ef2:	f04f 0b00 	mov.w	fp, #0
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	6822      	ldr	r2, [r4, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d03d      	beq.n	8017f7a <_scanf_i+0x15e>
 8017efe:	6831      	ldr	r1, [r6, #0]
 8017f00:	6960      	ldr	r0, [r4, #20]
 8017f02:	f891 c000 	ldrb.w	ip, [r1]
 8017f06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017f0a:	2800      	cmp	r0, #0
 8017f0c:	d035      	beq.n	8017f7a <_scanf_i+0x15e>
 8017f0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017f12:	d124      	bne.n	8017f5e <_scanf_i+0x142>
 8017f14:	0510      	lsls	r0, r2, #20
 8017f16:	d522      	bpl.n	8017f5e <_scanf_i+0x142>
 8017f18:	f10b 0b01 	add.w	fp, fp, #1
 8017f1c:	f1b9 0f00 	cmp.w	r9, #0
 8017f20:	d003      	beq.n	8017f2a <_scanf_i+0x10e>
 8017f22:	3301      	adds	r3, #1
 8017f24:	f109 39ff 	add.w	r9, r9, #4294967295
 8017f28:	60a3      	str	r3, [r4, #8]
 8017f2a:	6873      	ldr	r3, [r6, #4]
 8017f2c:	3b01      	subs	r3, #1
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	6073      	str	r3, [r6, #4]
 8017f32:	dd1b      	ble.n	8017f6c <_scanf_i+0x150>
 8017f34:	6833      	ldr	r3, [r6, #0]
 8017f36:	3301      	adds	r3, #1
 8017f38:	6033      	str	r3, [r6, #0]
 8017f3a:	68a3      	ldr	r3, [r4, #8]
 8017f3c:	3b01      	subs	r3, #1
 8017f3e:	60a3      	str	r3, [r4, #8]
 8017f40:	e7d9      	b.n	8017ef6 <_scanf_i+0xda>
 8017f42:	f1bb 0f02 	cmp.w	fp, #2
 8017f46:	d1ae      	bne.n	8017ea6 <_scanf_i+0x8a>
 8017f48:	6822      	ldr	r2, [r4, #0]
 8017f4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017f4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017f52:	d1bf      	bne.n	8017ed4 <_scanf_i+0xb8>
 8017f54:	2310      	movs	r3, #16
 8017f56:	6063      	str	r3, [r4, #4]
 8017f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f5c:	e7a2      	b.n	8017ea4 <_scanf_i+0x88>
 8017f5e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017f62:	6022      	str	r2, [r4, #0]
 8017f64:	780b      	ldrb	r3, [r1, #0]
 8017f66:	f805 3b01 	strb.w	r3, [r5], #1
 8017f6a:	e7de      	b.n	8017f2a <_scanf_i+0x10e>
 8017f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f70:	4631      	mov	r1, r6
 8017f72:	4650      	mov	r0, sl
 8017f74:	4798      	blx	r3
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d0df      	beq.n	8017f3a <_scanf_i+0x11e>
 8017f7a:	6823      	ldr	r3, [r4, #0]
 8017f7c:	05d9      	lsls	r1, r3, #23
 8017f7e:	d50d      	bpl.n	8017f9c <_scanf_i+0x180>
 8017f80:	42bd      	cmp	r5, r7
 8017f82:	d909      	bls.n	8017f98 <_scanf_i+0x17c>
 8017f84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f8c:	4632      	mov	r2, r6
 8017f8e:	4650      	mov	r0, sl
 8017f90:	4798      	blx	r3
 8017f92:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f96:	464d      	mov	r5, r9
 8017f98:	42bd      	cmp	r5, r7
 8017f9a:	d028      	beq.n	8017fee <_scanf_i+0x1d2>
 8017f9c:	6822      	ldr	r2, [r4, #0]
 8017f9e:	f012 0210 	ands.w	r2, r2, #16
 8017fa2:	d113      	bne.n	8017fcc <_scanf_i+0x1b0>
 8017fa4:	702a      	strb	r2, [r5, #0]
 8017fa6:	6863      	ldr	r3, [r4, #4]
 8017fa8:	9e01      	ldr	r6, [sp, #4]
 8017faa:	4639      	mov	r1, r7
 8017fac:	4650      	mov	r0, sl
 8017fae:	47b0      	blx	r6
 8017fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8017fb4:	6821      	ldr	r1, [r4, #0]
 8017fb6:	1d1a      	adds	r2, r3, #4
 8017fb8:	f8c8 2000 	str.w	r2, [r8]
 8017fbc:	f011 0f20 	tst.w	r1, #32
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	d00f      	beq.n	8017fe4 <_scanf_i+0x1c8>
 8017fc4:	6018      	str	r0, [r3, #0]
 8017fc6:	68e3      	ldr	r3, [r4, #12]
 8017fc8:	3301      	adds	r3, #1
 8017fca:	60e3      	str	r3, [r4, #12]
 8017fcc:	6923      	ldr	r3, [r4, #16]
 8017fce:	1bed      	subs	r5, r5, r7
 8017fd0:	445d      	add	r5, fp
 8017fd2:	442b      	add	r3, r5
 8017fd4:	6123      	str	r3, [r4, #16]
 8017fd6:	2000      	movs	r0, #0
 8017fd8:	b007      	add	sp, #28
 8017fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fde:	f04f 0b00 	mov.w	fp, #0
 8017fe2:	e7ca      	b.n	8017f7a <_scanf_i+0x15e>
 8017fe4:	07ca      	lsls	r2, r1, #31
 8017fe6:	bf4c      	ite	mi
 8017fe8:	8018      	strhmi	r0, [r3, #0]
 8017fea:	6018      	strpl	r0, [r3, #0]
 8017fec:	e7eb      	b.n	8017fc6 <_scanf_i+0x1aa>
 8017fee:	2001      	movs	r0, #1
 8017ff0:	e7f2      	b.n	8017fd8 <_scanf_i+0x1bc>
 8017ff2:	bf00      	nop
 8017ff4:	08018560 	.word	0x08018560
 8017ff8:	0801838d 	.word	0x0801838d
 8017ffc:	080182a5 	.word	0x080182a5
 8018000:	08018673 	.word	0x08018673

08018004 <__sccl>:
 8018004:	b570      	push	{r4, r5, r6, lr}
 8018006:	780b      	ldrb	r3, [r1, #0]
 8018008:	4604      	mov	r4, r0
 801800a:	2b5e      	cmp	r3, #94	; 0x5e
 801800c:	bf0b      	itete	eq
 801800e:	784b      	ldrbeq	r3, [r1, #1]
 8018010:	1c4a      	addne	r2, r1, #1
 8018012:	1c8a      	addeq	r2, r1, #2
 8018014:	2100      	movne	r1, #0
 8018016:	bf08      	it	eq
 8018018:	2101      	moveq	r1, #1
 801801a:	3801      	subs	r0, #1
 801801c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018020:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018024:	42a8      	cmp	r0, r5
 8018026:	d1fb      	bne.n	8018020 <__sccl+0x1c>
 8018028:	b90b      	cbnz	r3, 801802e <__sccl+0x2a>
 801802a:	1e50      	subs	r0, r2, #1
 801802c:	bd70      	pop	{r4, r5, r6, pc}
 801802e:	f081 0101 	eor.w	r1, r1, #1
 8018032:	54e1      	strb	r1, [r4, r3]
 8018034:	4610      	mov	r0, r2
 8018036:	4602      	mov	r2, r0
 8018038:	f812 5b01 	ldrb.w	r5, [r2], #1
 801803c:	2d2d      	cmp	r5, #45	; 0x2d
 801803e:	d005      	beq.n	801804c <__sccl+0x48>
 8018040:	2d5d      	cmp	r5, #93	; 0x5d
 8018042:	d016      	beq.n	8018072 <__sccl+0x6e>
 8018044:	2d00      	cmp	r5, #0
 8018046:	d0f1      	beq.n	801802c <__sccl+0x28>
 8018048:	462b      	mov	r3, r5
 801804a:	e7f2      	b.n	8018032 <__sccl+0x2e>
 801804c:	7846      	ldrb	r6, [r0, #1]
 801804e:	2e5d      	cmp	r6, #93	; 0x5d
 8018050:	d0fa      	beq.n	8018048 <__sccl+0x44>
 8018052:	42b3      	cmp	r3, r6
 8018054:	dcf8      	bgt.n	8018048 <__sccl+0x44>
 8018056:	3002      	adds	r0, #2
 8018058:	461a      	mov	r2, r3
 801805a:	3201      	adds	r2, #1
 801805c:	4296      	cmp	r6, r2
 801805e:	54a1      	strb	r1, [r4, r2]
 8018060:	dcfb      	bgt.n	801805a <__sccl+0x56>
 8018062:	1af2      	subs	r2, r6, r3
 8018064:	3a01      	subs	r2, #1
 8018066:	1c5d      	adds	r5, r3, #1
 8018068:	42b3      	cmp	r3, r6
 801806a:	bfa8      	it	ge
 801806c:	2200      	movge	r2, #0
 801806e:	18ab      	adds	r3, r5, r2
 8018070:	e7e1      	b.n	8018036 <__sccl+0x32>
 8018072:	4610      	mov	r0, r2
 8018074:	e7da      	b.n	801802c <__sccl+0x28>

08018076 <__submore>:
 8018076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801807a:	460c      	mov	r4, r1
 801807c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801807e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018082:	4299      	cmp	r1, r3
 8018084:	d11d      	bne.n	80180c2 <__submore+0x4c>
 8018086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801808a:	f7ff f927 	bl	80172dc <_malloc_r>
 801808e:	b918      	cbnz	r0, 8018098 <__submore+0x22>
 8018090:	f04f 30ff 	mov.w	r0, #4294967295
 8018094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801809c:	63a3      	str	r3, [r4, #56]	; 0x38
 801809e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80180a2:	6360      	str	r0, [r4, #52]	; 0x34
 80180a4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80180a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80180ac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80180b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80180b4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80180b8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80180bc:	6020      	str	r0, [r4, #0]
 80180be:	2000      	movs	r0, #0
 80180c0:	e7e8      	b.n	8018094 <__submore+0x1e>
 80180c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80180c4:	0077      	lsls	r7, r6, #1
 80180c6:	463a      	mov	r2, r7
 80180c8:	f000 f83a 	bl	8018140 <_realloc_r>
 80180cc:	4605      	mov	r5, r0
 80180ce:	2800      	cmp	r0, #0
 80180d0:	d0de      	beq.n	8018090 <__submore+0x1a>
 80180d2:	eb00 0806 	add.w	r8, r0, r6
 80180d6:	4601      	mov	r1, r0
 80180d8:	4632      	mov	r2, r6
 80180da:	4640      	mov	r0, r8
 80180dc:	f7ff f884 	bl	80171e8 <memcpy>
 80180e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80180e4:	f8c4 8000 	str.w	r8, [r4]
 80180e8:	e7e9      	b.n	80180be <__submore+0x48>

080180ea <memmove>:
 80180ea:	4288      	cmp	r0, r1
 80180ec:	b510      	push	{r4, lr}
 80180ee:	eb01 0402 	add.w	r4, r1, r2
 80180f2:	d902      	bls.n	80180fa <memmove+0x10>
 80180f4:	4284      	cmp	r4, r0
 80180f6:	4623      	mov	r3, r4
 80180f8:	d807      	bhi.n	801810a <memmove+0x20>
 80180fa:	1e43      	subs	r3, r0, #1
 80180fc:	42a1      	cmp	r1, r4
 80180fe:	d008      	beq.n	8018112 <memmove+0x28>
 8018100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018104:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018108:	e7f8      	b.n	80180fc <memmove+0x12>
 801810a:	4402      	add	r2, r0
 801810c:	4601      	mov	r1, r0
 801810e:	428a      	cmp	r2, r1
 8018110:	d100      	bne.n	8018114 <memmove+0x2a>
 8018112:	bd10      	pop	{r4, pc}
 8018114:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018118:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801811c:	e7f7      	b.n	801810e <memmove+0x24>
	...

08018120 <_sbrk_r>:
 8018120:	b538      	push	{r3, r4, r5, lr}
 8018122:	4d06      	ldr	r5, [pc, #24]	; (801813c <_sbrk_r+0x1c>)
 8018124:	2300      	movs	r3, #0
 8018126:	4604      	mov	r4, r0
 8018128:	4608      	mov	r0, r1
 801812a:	602b      	str	r3, [r5, #0]
 801812c:	f7eb fb6e 	bl	800380c <_sbrk>
 8018130:	1c43      	adds	r3, r0, #1
 8018132:	d102      	bne.n	801813a <_sbrk_r+0x1a>
 8018134:	682b      	ldr	r3, [r5, #0]
 8018136:	b103      	cbz	r3, 801813a <_sbrk_r+0x1a>
 8018138:	6023      	str	r3, [r4, #0]
 801813a:	bd38      	pop	{r3, r4, r5, pc}
 801813c:	24003334 	.word	0x24003334

08018140 <_realloc_r>:
 8018140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018144:	4680      	mov	r8, r0
 8018146:	4614      	mov	r4, r2
 8018148:	460e      	mov	r6, r1
 801814a:	b921      	cbnz	r1, 8018156 <_realloc_r+0x16>
 801814c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018150:	4611      	mov	r1, r2
 8018152:	f7ff b8c3 	b.w	80172dc <_malloc_r>
 8018156:	b92a      	cbnz	r2, 8018164 <_realloc_r+0x24>
 8018158:	f7ff f854 	bl	8017204 <_free_r>
 801815c:	4625      	mov	r5, r4
 801815e:	4628      	mov	r0, r5
 8018160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018164:	f000 f914 	bl	8018390 <_malloc_usable_size_r>
 8018168:	4284      	cmp	r4, r0
 801816a:	4607      	mov	r7, r0
 801816c:	d802      	bhi.n	8018174 <_realloc_r+0x34>
 801816e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018172:	d812      	bhi.n	801819a <_realloc_r+0x5a>
 8018174:	4621      	mov	r1, r4
 8018176:	4640      	mov	r0, r8
 8018178:	f7ff f8b0 	bl	80172dc <_malloc_r>
 801817c:	4605      	mov	r5, r0
 801817e:	2800      	cmp	r0, #0
 8018180:	d0ed      	beq.n	801815e <_realloc_r+0x1e>
 8018182:	42bc      	cmp	r4, r7
 8018184:	4622      	mov	r2, r4
 8018186:	4631      	mov	r1, r6
 8018188:	bf28      	it	cs
 801818a:	463a      	movcs	r2, r7
 801818c:	f7ff f82c 	bl	80171e8 <memcpy>
 8018190:	4631      	mov	r1, r6
 8018192:	4640      	mov	r0, r8
 8018194:	f7ff f836 	bl	8017204 <_free_r>
 8018198:	e7e1      	b.n	801815e <_realloc_r+0x1e>
 801819a:	4635      	mov	r5, r6
 801819c:	e7df      	b.n	801815e <_realloc_r+0x1e>
	...

080181a0 <_strtol_l.constprop.0>:
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181a6:	d001      	beq.n	80181ac <_strtol_l.constprop.0+0xc>
 80181a8:	2b24      	cmp	r3, #36	; 0x24
 80181aa:	d906      	bls.n	80181ba <_strtol_l.constprop.0+0x1a>
 80181ac:	f7fe ffe8 	bl	8017180 <__errno>
 80181b0:	2316      	movs	r3, #22
 80181b2:	6003      	str	r3, [r0, #0]
 80181b4:	2000      	movs	r0, #0
 80181b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80182a0 <_strtol_l.constprop.0+0x100>
 80181be:	460d      	mov	r5, r1
 80181c0:	462e      	mov	r6, r5
 80181c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80181ca:	f017 0708 	ands.w	r7, r7, #8
 80181ce:	d1f7      	bne.n	80181c0 <_strtol_l.constprop.0+0x20>
 80181d0:	2c2d      	cmp	r4, #45	; 0x2d
 80181d2:	d132      	bne.n	801823a <_strtol_l.constprop.0+0x9a>
 80181d4:	782c      	ldrb	r4, [r5, #0]
 80181d6:	2701      	movs	r7, #1
 80181d8:	1cb5      	adds	r5, r6, #2
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d05b      	beq.n	8018296 <_strtol_l.constprop.0+0xf6>
 80181de:	2b10      	cmp	r3, #16
 80181e0:	d109      	bne.n	80181f6 <_strtol_l.constprop.0+0x56>
 80181e2:	2c30      	cmp	r4, #48	; 0x30
 80181e4:	d107      	bne.n	80181f6 <_strtol_l.constprop.0+0x56>
 80181e6:	782c      	ldrb	r4, [r5, #0]
 80181e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80181ec:	2c58      	cmp	r4, #88	; 0x58
 80181ee:	d14d      	bne.n	801828c <_strtol_l.constprop.0+0xec>
 80181f0:	786c      	ldrb	r4, [r5, #1]
 80181f2:	2310      	movs	r3, #16
 80181f4:	3502      	adds	r5, #2
 80181f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80181fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80181fe:	f04f 0e00 	mov.w	lr, #0
 8018202:	fbb8 f9f3 	udiv	r9, r8, r3
 8018206:	4676      	mov	r6, lr
 8018208:	fb03 8a19 	mls	sl, r3, r9, r8
 801820c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018210:	f1bc 0f09 	cmp.w	ip, #9
 8018214:	d816      	bhi.n	8018244 <_strtol_l.constprop.0+0xa4>
 8018216:	4664      	mov	r4, ip
 8018218:	42a3      	cmp	r3, r4
 801821a:	dd24      	ble.n	8018266 <_strtol_l.constprop.0+0xc6>
 801821c:	f1be 3fff 	cmp.w	lr, #4294967295
 8018220:	d008      	beq.n	8018234 <_strtol_l.constprop.0+0x94>
 8018222:	45b1      	cmp	r9, r6
 8018224:	d31c      	bcc.n	8018260 <_strtol_l.constprop.0+0xc0>
 8018226:	d101      	bne.n	801822c <_strtol_l.constprop.0+0x8c>
 8018228:	45a2      	cmp	sl, r4
 801822a:	db19      	blt.n	8018260 <_strtol_l.constprop.0+0xc0>
 801822c:	fb06 4603 	mla	r6, r6, r3, r4
 8018230:	f04f 0e01 	mov.w	lr, #1
 8018234:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018238:	e7e8      	b.n	801820c <_strtol_l.constprop.0+0x6c>
 801823a:	2c2b      	cmp	r4, #43	; 0x2b
 801823c:	bf04      	itt	eq
 801823e:	782c      	ldrbeq	r4, [r5, #0]
 8018240:	1cb5      	addeq	r5, r6, #2
 8018242:	e7ca      	b.n	80181da <_strtol_l.constprop.0+0x3a>
 8018244:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018248:	f1bc 0f19 	cmp.w	ip, #25
 801824c:	d801      	bhi.n	8018252 <_strtol_l.constprop.0+0xb2>
 801824e:	3c37      	subs	r4, #55	; 0x37
 8018250:	e7e2      	b.n	8018218 <_strtol_l.constprop.0+0x78>
 8018252:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018256:	f1bc 0f19 	cmp.w	ip, #25
 801825a:	d804      	bhi.n	8018266 <_strtol_l.constprop.0+0xc6>
 801825c:	3c57      	subs	r4, #87	; 0x57
 801825e:	e7db      	b.n	8018218 <_strtol_l.constprop.0+0x78>
 8018260:	f04f 3eff 	mov.w	lr, #4294967295
 8018264:	e7e6      	b.n	8018234 <_strtol_l.constprop.0+0x94>
 8018266:	f1be 3fff 	cmp.w	lr, #4294967295
 801826a:	d105      	bne.n	8018278 <_strtol_l.constprop.0+0xd8>
 801826c:	2322      	movs	r3, #34	; 0x22
 801826e:	6003      	str	r3, [r0, #0]
 8018270:	4646      	mov	r6, r8
 8018272:	b942      	cbnz	r2, 8018286 <_strtol_l.constprop.0+0xe6>
 8018274:	4630      	mov	r0, r6
 8018276:	e79e      	b.n	80181b6 <_strtol_l.constprop.0+0x16>
 8018278:	b107      	cbz	r7, 801827c <_strtol_l.constprop.0+0xdc>
 801827a:	4276      	negs	r6, r6
 801827c:	2a00      	cmp	r2, #0
 801827e:	d0f9      	beq.n	8018274 <_strtol_l.constprop.0+0xd4>
 8018280:	f1be 0f00 	cmp.w	lr, #0
 8018284:	d000      	beq.n	8018288 <_strtol_l.constprop.0+0xe8>
 8018286:	1e69      	subs	r1, r5, #1
 8018288:	6011      	str	r1, [r2, #0]
 801828a:	e7f3      	b.n	8018274 <_strtol_l.constprop.0+0xd4>
 801828c:	2430      	movs	r4, #48	; 0x30
 801828e:	2b00      	cmp	r3, #0
 8018290:	d1b1      	bne.n	80181f6 <_strtol_l.constprop.0+0x56>
 8018292:	2308      	movs	r3, #8
 8018294:	e7af      	b.n	80181f6 <_strtol_l.constprop.0+0x56>
 8018296:	2c30      	cmp	r4, #48	; 0x30
 8018298:	d0a5      	beq.n	80181e6 <_strtol_l.constprop.0+0x46>
 801829a:	230a      	movs	r3, #10
 801829c:	e7ab      	b.n	80181f6 <_strtol_l.constprop.0+0x56>
 801829e:	bf00      	nop
 80182a0:	0801867f 	.word	0x0801867f

080182a4 <_strtol_r>:
 80182a4:	f7ff bf7c 	b.w	80181a0 <_strtol_l.constprop.0>

080182a8 <_strtoul_l.constprop.0>:
 80182a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182ac:	4f36      	ldr	r7, [pc, #216]	; (8018388 <_strtoul_l.constprop.0+0xe0>)
 80182ae:	4686      	mov	lr, r0
 80182b0:	460d      	mov	r5, r1
 80182b2:	4628      	mov	r0, r5
 80182b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182b8:	5d3e      	ldrb	r6, [r7, r4]
 80182ba:	f016 0608 	ands.w	r6, r6, #8
 80182be:	d1f8      	bne.n	80182b2 <_strtoul_l.constprop.0+0xa>
 80182c0:	2c2d      	cmp	r4, #45	; 0x2d
 80182c2:	d130      	bne.n	8018326 <_strtoul_l.constprop.0+0x7e>
 80182c4:	782c      	ldrb	r4, [r5, #0]
 80182c6:	2601      	movs	r6, #1
 80182c8:	1c85      	adds	r5, r0, #2
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d057      	beq.n	801837e <_strtoul_l.constprop.0+0xd6>
 80182ce:	2b10      	cmp	r3, #16
 80182d0:	d109      	bne.n	80182e6 <_strtoul_l.constprop.0+0x3e>
 80182d2:	2c30      	cmp	r4, #48	; 0x30
 80182d4:	d107      	bne.n	80182e6 <_strtoul_l.constprop.0+0x3e>
 80182d6:	7828      	ldrb	r0, [r5, #0]
 80182d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80182dc:	2858      	cmp	r0, #88	; 0x58
 80182de:	d149      	bne.n	8018374 <_strtoul_l.constprop.0+0xcc>
 80182e0:	786c      	ldrb	r4, [r5, #1]
 80182e2:	2310      	movs	r3, #16
 80182e4:	3502      	adds	r5, #2
 80182e6:	f04f 38ff 	mov.w	r8, #4294967295
 80182ea:	2700      	movs	r7, #0
 80182ec:	fbb8 f8f3 	udiv	r8, r8, r3
 80182f0:	fb03 f908 	mul.w	r9, r3, r8
 80182f4:	ea6f 0909 	mvn.w	r9, r9
 80182f8:	4638      	mov	r0, r7
 80182fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80182fe:	f1bc 0f09 	cmp.w	ip, #9
 8018302:	d815      	bhi.n	8018330 <_strtoul_l.constprop.0+0x88>
 8018304:	4664      	mov	r4, ip
 8018306:	42a3      	cmp	r3, r4
 8018308:	dd23      	ble.n	8018352 <_strtoul_l.constprop.0+0xaa>
 801830a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801830e:	d007      	beq.n	8018320 <_strtoul_l.constprop.0+0x78>
 8018310:	4580      	cmp	r8, r0
 8018312:	d31b      	bcc.n	801834c <_strtoul_l.constprop.0+0xa4>
 8018314:	d101      	bne.n	801831a <_strtoul_l.constprop.0+0x72>
 8018316:	45a1      	cmp	r9, r4
 8018318:	db18      	blt.n	801834c <_strtoul_l.constprop.0+0xa4>
 801831a:	fb00 4003 	mla	r0, r0, r3, r4
 801831e:	2701      	movs	r7, #1
 8018320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018324:	e7e9      	b.n	80182fa <_strtoul_l.constprop.0+0x52>
 8018326:	2c2b      	cmp	r4, #43	; 0x2b
 8018328:	bf04      	itt	eq
 801832a:	782c      	ldrbeq	r4, [r5, #0]
 801832c:	1c85      	addeq	r5, r0, #2
 801832e:	e7cc      	b.n	80182ca <_strtoul_l.constprop.0+0x22>
 8018330:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018334:	f1bc 0f19 	cmp.w	ip, #25
 8018338:	d801      	bhi.n	801833e <_strtoul_l.constprop.0+0x96>
 801833a:	3c37      	subs	r4, #55	; 0x37
 801833c:	e7e3      	b.n	8018306 <_strtoul_l.constprop.0+0x5e>
 801833e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018342:	f1bc 0f19 	cmp.w	ip, #25
 8018346:	d804      	bhi.n	8018352 <_strtoul_l.constprop.0+0xaa>
 8018348:	3c57      	subs	r4, #87	; 0x57
 801834a:	e7dc      	b.n	8018306 <_strtoul_l.constprop.0+0x5e>
 801834c:	f04f 37ff 	mov.w	r7, #4294967295
 8018350:	e7e6      	b.n	8018320 <_strtoul_l.constprop.0+0x78>
 8018352:	1c7b      	adds	r3, r7, #1
 8018354:	d106      	bne.n	8018364 <_strtoul_l.constprop.0+0xbc>
 8018356:	2322      	movs	r3, #34	; 0x22
 8018358:	f8ce 3000 	str.w	r3, [lr]
 801835c:	4638      	mov	r0, r7
 801835e:	b932      	cbnz	r2, 801836e <_strtoul_l.constprop.0+0xc6>
 8018360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018364:	b106      	cbz	r6, 8018368 <_strtoul_l.constprop.0+0xc0>
 8018366:	4240      	negs	r0, r0
 8018368:	2a00      	cmp	r2, #0
 801836a:	d0f9      	beq.n	8018360 <_strtoul_l.constprop.0+0xb8>
 801836c:	b107      	cbz	r7, 8018370 <_strtoul_l.constprop.0+0xc8>
 801836e:	1e69      	subs	r1, r5, #1
 8018370:	6011      	str	r1, [r2, #0]
 8018372:	e7f5      	b.n	8018360 <_strtoul_l.constprop.0+0xb8>
 8018374:	2430      	movs	r4, #48	; 0x30
 8018376:	2b00      	cmp	r3, #0
 8018378:	d1b5      	bne.n	80182e6 <_strtoul_l.constprop.0+0x3e>
 801837a:	2308      	movs	r3, #8
 801837c:	e7b3      	b.n	80182e6 <_strtoul_l.constprop.0+0x3e>
 801837e:	2c30      	cmp	r4, #48	; 0x30
 8018380:	d0a9      	beq.n	80182d6 <_strtoul_l.constprop.0+0x2e>
 8018382:	230a      	movs	r3, #10
 8018384:	e7af      	b.n	80182e6 <_strtoul_l.constprop.0+0x3e>
 8018386:	bf00      	nop
 8018388:	0801867f 	.word	0x0801867f

0801838c <_strtoul_r>:
 801838c:	f7ff bf8c 	b.w	80182a8 <_strtoul_l.constprop.0>

08018390 <_malloc_usable_size_r>:
 8018390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018394:	1f18      	subs	r0, r3, #4
 8018396:	2b00      	cmp	r3, #0
 8018398:	bfbc      	itt	lt
 801839a:	580b      	ldrlt	r3, [r1, r0]
 801839c:	18c0      	addlt	r0, r0, r3
 801839e:	4770      	bx	lr

080183a0 <_init>:
 80183a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183a2:	bf00      	nop
 80183a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183a6:	bc08      	pop	{r3}
 80183a8:	469e      	mov	lr, r3
 80183aa:	4770      	bx	lr

080183ac <_fini>:
 80183ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ae:	bf00      	nop
 80183b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183b2:	bc08      	pop	{r3}
 80183b4:	469e      	mov	lr, r3
 80183b6:	4770      	bx	lr
