
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f1c8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0801f498  0801f498  0002f498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020234  08020234  00030234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802023c  0802023c  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020240  08020240  00030240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  08020244  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000322c  240002d4  08020518  000402d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003500  08020518  00043500  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a330  00000000  00000000  00040302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006324  00000000  00000000  0007a632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00080958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b40  00000000  00000000  00083708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba4e  00000000  00000000  00086248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ded9  00000000  00000000  00091c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017fa07  00000000  00000000  000cfb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024f576  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000db04  00000000  00000000  0024f5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f480 	.word	0x0801f480

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801f480 	.word	0x0801f480

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9ac 	b.w	8000ac8 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	4604      	mov	r4, r0
 8000800:	468e      	mov	lr, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d14d      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000806:	428a      	cmp	r2, r1
 8000808:	4694      	mov	ip, r2
 800080a:	d969      	bls.n	80008e0 <__udivmoddi4+0xe8>
 800080c:	fab2 f282 	clz	r2, r2
 8000810:	b152      	cbz	r2, 8000828 <__udivmoddi4+0x30>
 8000812:	fa01 f302 	lsl.w	r3, r1, r2
 8000816:	f1c2 0120 	rsb	r1, r2, #32
 800081a:	fa20 f101 	lsr.w	r1, r0, r1
 800081e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000822:	ea41 0e03 	orr.w	lr, r1, r3
 8000826:	4094      	lsls	r4, r2
 8000828:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800082c:	0c21      	lsrs	r1, r4, #16
 800082e:	fbbe f6f8 	udiv	r6, lr, r8
 8000832:	fa1f f78c 	uxth.w	r7, ip
 8000836:	fb08 e316 	mls	r3, r8, r6, lr
 800083a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800083e:	fb06 f107 	mul.w	r1, r6, r7
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f106 30ff 	add.w	r0, r6, #4294967295
 800084e:	f080 811f 	bcs.w	8000a90 <__udivmoddi4+0x298>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 811c 	bls.w	8000a90 <__udivmoddi4+0x298>
 8000858:	3e02      	subs	r6, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb3 f0f8 	udiv	r0, r3, r8
 8000864:	fb08 3310 	mls	r3, r8, r0, r3
 8000868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086c:	fb00 f707 	mul.w	r7, r0, r7
 8000870:	42a7      	cmp	r7, r4
 8000872:	d90a      	bls.n	800088a <__udivmoddi4+0x92>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 33ff 	add.w	r3, r0, #4294967295
 800087c:	f080 810a 	bcs.w	8000a94 <__udivmoddi4+0x29c>
 8000880:	42a7      	cmp	r7, r4
 8000882:	f240 8107 	bls.w	8000a94 <__udivmoddi4+0x29c>
 8000886:	4464      	add	r4, ip
 8000888:	3802      	subs	r0, #2
 800088a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800088e:	1be4      	subs	r4, r4, r7
 8000890:	2600      	movs	r6, #0
 8000892:	b11d      	cbz	r5, 800089c <__udivmoddi4+0xa4>
 8000894:	40d4      	lsrs	r4, r2
 8000896:	2300      	movs	r3, #0
 8000898:	e9c5 4300 	strd	r4, r3, [r5]
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0xc2>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	f000 80ef 	beq.w	8000a8a <__udivmoddi4+0x292>
 80008ac:	2600      	movs	r6, #0
 80008ae:	e9c5 0100 	strd	r0, r1, [r5]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	fab3 f683 	clz	r6, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d14a      	bne.n	8000958 <__udivmoddi4+0x160>
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xd4>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 80f9 	bhi.w	8000abe <__udivmoddi4+0x2c6>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb61 0303 	sbc.w	r3, r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	469e      	mov	lr, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e0      	beq.n	800089c <__udivmoddi4+0xa4>
 80008da:	e9c5 4e00 	strd	r4, lr, [r5]
 80008de:	e7dd      	b.n	800089c <__udivmoddi4+0xa4>
 80008e0:	b902      	cbnz	r2, 80008e4 <__udivmoddi4+0xec>
 80008e2:	deff      	udf	#255	; 0xff
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 8092 	bne.w	8000a12 <__udivmoddi4+0x21a>
 80008ee:	eba1 010c 	sub.w	r1, r1, ip
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2601      	movs	r6, #1
 80008fc:	0c20      	lsrs	r0, r4, #16
 80008fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000902:	fb07 1113 	mls	r1, r7, r3, r1
 8000906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090a:	fb0e f003 	mul.w	r0, lr, r3
 800090e:	4288      	cmp	r0, r1
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x12c>
 8000912:	eb1c 0101 	adds.w	r1, ip, r1
 8000916:	f103 38ff 	add.w	r8, r3, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x12a>
 800091c:	4288      	cmp	r0, r1
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2c0>
 8000922:	4643      	mov	r3, r8
 8000924:	1a09      	subs	r1, r1, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb1 f0f7 	udiv	r0, r1, r7
 800092c:	fb07 1110 	mls	r1, r7, r0, r1
 8000930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x156>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 31ff 	add.w	r1, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x154>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2ca>
 800094c:	4608      	mov	r0, r1
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	e79c      	b.n	8000892 <__udivmoddi4+0x9a>
 8000958:	f1c6 0720 	rsb	r7, r6, #32
 800095c:	40b3      	lsls	r3, r6
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa20 f407 	lsr.w	r4, r0, r7
 800096a:	fa01 f306 	lsl.w	r3, r1, r6
 800096e:	431c      	orrs	r4, r3
 8000970:	40f9      	lsrs	r1, r7
 8000972:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000976:	fa00 f306 	lsl.w	r3, r0, r6
 800097a:	fbb1 f8f9 	udiv	r8, r1, r9
 800097e:	0c20      	lsrs	r0, r4, #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fb09 1118 	mls	r1, r9, r8, r1
 8000988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098c:	fb08 f00e 	mul.w	r0, r8, lr
 8000990:	4288      	cmp	r0, r1
 8000992:	fa02 f206 	lsl.w	r2, r2, r6
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b8>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2bc>
 80009a4:	4288      	cmp	r0, r1
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2bc>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009b8:	fb09 1110 	mls	r1, r9, r0, r1
 80009bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c4:	458e      	cmp	lr, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1e2>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2b4>
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2b4>
 80009d6:	3802      	subs	r0, #2
 80009d8:	4461      	add	r1, ip
 80009da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009de:	fba0 9402 	umull	r9, r4, r0, r2
 80009e2:	eba1 010e 	sub.w	r1, r1, lr
 80009e6:	42a1      	cmp	r1, r4
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46a6      	mov	lr, r4
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x2a4>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x2a0>
 80009f0:	b15d      	cbz	r5, 8000a0a <__udivmoddi4+0x212>
 80009f2:	ebb3 0208 	subs.w	r2, r3, r8
 80009f6:	eb61 010e 	sbc.w	r1, r1, lr
 80009fa:	fa01 f707 	lsl.w	r7, r1, r7
 80009fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000a02:	40f1      	lsrs	r1, r6
 8000a04:	431f      	orrs	r7, r3
 8000a06:	e9c5 7100 	strd	r7, r1, [r5]
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	40d8      	lsrs	r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4301      	orrs	r1, r0
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a30:	fb07 3610 	mls	r6, r7, r0, r3
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	fa04 f402 	lsl.w	r4, r4, r2
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x260>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a50:	429e      	cmp	r6, r3
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	b289      	uxth	r1, r1
 8000a5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a60:	fb07 3316 	mls	r3, r7, r6, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb06 f30e 	mul.w	r3, r6, lr
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x28a>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7e:	3e02      	subs	r6, #2
 8000a80:	4461      	add	r1, ip
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0x104>
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e705      	b.n	800089c <__udivmoddi4+0xa4>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e3      	b.n	800085c <__udivmoddi4+0x64>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6f8      	b.n	800088a <__udivmoddi4+0x92>
 8000a98:	454b      	cmp	r3, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f8>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f8>
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x28a>
 8000aac:	4620      	mov	r0, r4
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1e2>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x260>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b8>
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x12c>
 8000abe:	4630      	mov	r0, r6
 8000ac0:	e709      	b.n	80008d6 <__udivmoddi4+0xde>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x156>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad8:	ed97 7a00 	vldr	s14, [r7]
 8000adc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b4c <setServo+0x80>
 8000ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b50 <setServo+0x84>
 8000ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b54 <setServo+0x88>
 8000af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af8:	ee17 3a90 	vmov	r3, s15
 8000afc:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d81a      	bhi.n	8000b3c <setServo+0x70>
 8000b06:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <setServo+0x40>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b35 	.word	0x08000b35
	case 1:
		TIM4->CCR4 = timerVal;
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b22:	e00c      	b.n	8000b3e <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b2a:	e008      	b.n	8000b3e <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b32:	e004      	b.n	8000b3e <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <setServo+0x8c>)
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b3a:	e000      	b.n	8000b3e <setServo+0x72>

	default:
		break;
 8000b3c:	bf00      	nop
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	42c80000 	.word	0x42c80000
 8000b50:	457a0000 	.word	0x457a0000
 8000b54:	453b8000 	.word	0x453b8000
 8000b58:	40000800 	.word	0x40000800

08000b5c <setLEDs>:

void setLEDs(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
 8000b66:	e181      	b.n	8000e6c <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b68:	4aa1      	ldr	r2, [pc, #644]	; (8000df0 <setLEDs+0x294>)
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	f200 8177 	bhi.w	8000e64 <setLEDs+0x308>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <setLEDs+0x20>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000c3d 	.word	0x08000c3d
 8000b84:	08000ced 	.word	0x08000ced
 8000b88:	08000d9d 	.word	0x08000d9d
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b90:	e042      	b.n	8000c18 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b96:	e039      	b.n	8000c0c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b98:	4996      	ldr	r1, [pc, #600]	; (8000df4 <setLEDs+0x298>)
 8000b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bae:	fa41 f202 	asr.w	r2, r1, r2
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d013      	beq.n	8000be0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bba:	00da      	lsls	r2, r3, #3
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	18d1      	adds	r1, r2, r3
 8000bc0:	4a8b      	ldr	r2, [pc, #556]	; (8000df0 <setLEDs+0x294>)
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
								+ 8] = 60;
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	4a88      	ldr	r2, [pc, #544]	; (8000df8 <setLEDs+0x29c>)
 8000bd8:	213c      	movs	r1, #60	; 0x3c
 8000bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bde:	e012      	b.n	8000c06 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	00da      	lsls	r2, r3, #3
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	18d1      	adds	r1, r2, r3
 8000be8:	4a81      	ldr	r2, [pc, #516]	; (8000df0 <setLEDs+0x294>)
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4413      	add	r3, r2
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
								+ 8] = 30;
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	4a7e      	ldr	r2, [pc, #504]	; (8000df8 <setLEDs+0x29c>)
 8000c00:	211e      	movs	r1, #30
 8000c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	3301      	adds	r3, #1
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	ddc2      	ble.n	8000b98 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	3301      	adds	r3, #1
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	ddb9      	ble.n	8000b92 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c22:	e007      	b.n	8000c34 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c24:	4a74      	ldr	r2, [pc, #464]	; (8000df8 <setLEDs+0x29c>)
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	3301      	adds	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	2bb1      	cmp	r3, #177	; 0xb1
 8000c38:	ddf4      	ble.n	8000c24 <setLEDs+0xc8>
			}
			break;
 8000c3a:	e114      	b.n	8000e66 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c40:	e042      	b.n	8000cc8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	e039      	b.n	8000cbc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c48:	496a      	ldr	r1, [pc, #424]	; (8000df4 <setLEDs+0x298>)
 8000c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c54:	4413      	add	r3, r2
 8000c56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	6a3a      	ldr	r2, [r7, #32]
 8000c5e:	fa41 f202 	asr.w	r2, r1, r2
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	00da      	lsls	r2, r3, #3
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	18d1      	adds	r1, r2, r3
 8000c70:	4a5f      	ldr	r2, [pc, #380]	; (8000df0 <setLEDs+0x294>)
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
								+ 8] = 60;
 8000c84:	3308      	adds	r3, #8
 8000c86:	4a5d      	ldr	r2, [pc, #372]	; (8000dfc <setLEDs+0x2a0>)
 8000c88:	213c      	movs	r1, #60	; 0x3c
 8000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c8e:	e012      	b.n	8000cb6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	00da      	lsls	r2, r3, #3
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	18d1      	adds	r1, r2, r3
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <setLEDs+0x294>)
 8000c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
								+ 8] = 30;
 8000cac:	3308      	adds	r3, #8
 8000cae:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <setLEDs+0x2a0>)
 8000cb0:	211e      	movs	r1, #30
 8000cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	ddc2      	ble.n	8000c48 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddb9      	ble.n	8000c42 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e007      	b.n	8000ce4 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <setLEDs+0x2a0>)
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce8:	ddf4      	ble.n	8000cd4 <setLEDs+0x178>
			}
			break;
 8000cea:	e0bc      	b.n	8000e66 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	e042      	b.n	8000d78 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e039      	b.n	8000d6c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf8:	493e      	ldr	r1, [pc, #248]	; (8000df4 <setLEDs+0x298>)
 8000cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4413      	add	r3, r2
 8000d06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	fa41 f202 	asr.w	r2, r1, r2
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d013      	beq.n	8000d40 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	00da      	lsls	r2, r3, #3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <setLEDs+0x294>)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
								+ 8] = 60;
 8000d34:	3308      	adds	r3, #8
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <setLEDs+0x2a4>)
 8000d38:	213c      	movs	r1, #60	; 0x3c
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d3e:	e012      	b.n	8000d66 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	00da      	lsls	r2, r3, #3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	18d1      	adds	r1, r2, r3
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <setLEDs+0x294>)
 8000d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4413      	add	r3, r2
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
								+ 8] = 30;
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <setLEDs+0x2a4>)
 8000d60:	211e      	movs	r1, #30
 8000d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	ddc2      	ble.n	8000cf8 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	3301      	adds	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	ddb9      	ble.n	8000cf2 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d7e:	2338      	movs	r3, #56	; 0x38
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e007      	b.n	8000d94 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <setLEDs+0x2a4>)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b69      	cmp	r3, #105	; 0x69
 8000d98:	ddf4      	ble.n	8000d84 <setLEDs+0x228>
			}
			break;
 8000d9a:	e064      	b.n	8000e66 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e04e      	b.n	8000e40 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	e045      	b.n	8000e34 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da8:	4912      	ldr	r1, [pc, #72]	; (8000df4 <setLEDs+0x298>)
 8000daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	fa41 f202 	asr.w	r2, r1, r2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d01f      	beq.n	8000e08 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	00da      	lsls	r2, r3, #3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	18d1      	adds	r1, r2, r3
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <setLEDs+0x294>)
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
								+ 8] = 60;
 8000de4:	3308      	adds	r3, #8
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <setLEDs+0x2a8>)
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dee:	e01e      	b.n	8000e2e <setLEDs+0x2d2>
 8000df0:	0801f88c 	.word	0x0801f88c
 8000df4:	24000bd0 	.word	0x24000bd0
 8000df8:	240002f0 	.word	0x240002f0
 8000dfc:	240005b8 	.word	0x240005b8
 8000e00:	24000880 	.word	0x24000880
 8000e04:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	00da      	lsls	r2, r3, #3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	18d1      	adds	r1, r2, r3
 8000e10:	4a26      	ldr	r2, [pc, #152]	; (8000eac <setLEDs+0x350>)
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
								+ 8] = 30;
 8000e24:	3308      	adds	r3, #8
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <setLEDs+0x354>)
 8000e28:	211e      	movs	r1, #30
 8000e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	ddb6      	ble.n	8000da8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	ddad      	ble.n	8000da2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e46:	2338      	movs	r3, #56	; 0x38
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e007      	b.n	8000e5c <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <setLEDs+0x354>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2100      	movs	r1, #0
 8000e52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b69      	cmp	r3, #105	; 0x69
 8000e60:	ddf4      	ble.n	8000e4c <setLEDs+0x2f0>
			}
			break;
 8000e62:	e000      	b.n	8000e66 <setLEDs+0x30a>
		default:
			break;
 8000e64:	bf00      	nop
			i++) {
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	f77f ae7a 	ble.w	8000b68 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e74:	23b2      	movs	r3, #178	; 0xb2
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <setLEDs+0x358>)
 8000e78:	210c      	movs	r1, #12
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <setLEDs+0x35c>)
 8000e7c:	f00f fb84 	bl	8010588 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e80:	23b2      	movs	r3, #178	; 0xb2
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <setLEDs+0x360>)
 8000e84:	2108      	movs	r1, #8
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <setLEDs+0x364>)
 8000e88:	f00f fb7e 	bl	8010588 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e8c:	236a      	movs	r3, #106	; 0x6a
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <setLEDs+0x368>)
 8000e90:	2104      	movs	r1, #4
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <setLEDs+0x36c>)
 8000e94:	f00f fb78 	bl	8010588 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e98:	236a      	movs	r3, #106	; 0x6a
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <setLEDs+0x354>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <setLEDs+0x36c>)
 8000ea0:	f00f fb72 	bl	8010588 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000ea4:	bf00      	nop
 8000ea6:	3738      	adds	r7, #56	; 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0801f88c 	.word	0x0801f88c
 8000eb0:	24000a28 	.word	0x24000a28
 8000eb4:	240002f0 	.word	0x240002f0
 8000eb8:	24001234 	.word	0x24001234
 8000ebc:	240005b8 	.word	0x240005b8
 8000ec0:	24001150 	.word	0x24001150
 8000ec4:	24000880 	.word	0x24000880
 8000ec8:	2400119c 	.word	0x2400119c

08000ecc <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoRA_Read_Register+0x48>)
 8000ede:	f007 ff77 	bl	8008dd0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000ee2:	1df9      	adds	r1, r7, #7
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoRA_Read_Register+0x4c>)
 8000eea:	f00e fd0d 	bl	800f908 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000eee:	f107 010f 	add.w	r1, r7, #15
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <LoRA_Read_Register+0x4c>)
 8000ef8:	f00e ff02 	bl	800fd00 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <LoRA_Read_Register+0x48>)
 8000f04:	f007 ff64 	bl	8008dd0 <HAL_GPIO_WritePin>

	return reg_value;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020000 	.word	0x58020000
 8000f18:	240010c8 	.word	0x240010c8

08000f1c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoRA_Write_Register+0x54>)
 8000f3e:	f007 ff47 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f42:	1df9      	adds	r1, r7, #7
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <LoRA_Write_Register+0x58>)
 8000f4a:	f00e fcdd 	bl	800f908 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f4e:	1db9      	adds	r1, r7, #6
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <LoRA_Write_Register+0x58>)
 8000f56:	f00e fcd7 	bl	800f908 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <LoRA_Write_Register+0x54>)
 8000f62:	f007 ff35 	bl	8008dd0 <HAL_GPIO_WritePin>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58020000 	.word	0x58020000
 8000f74:	240010c8 	.word	0x240010c8

08000f78 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ffcc 	bl	8000f1c <LoRA_Write_Register>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	17c8      	asrs	r0, r1, #31
 8000f94:	460a      	mov	r2, r1
 8000f96:	4603      	mov	r3, r0
 8000f98:	1355      	asrs	r5, r2, #13
 8000f9a:	04d4      	lsls	r4, r2, #19
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <LoRA_set_frequency+0x78>)
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	4629      	mov	r1, r5
 8000fa6:	f7ff fbd7 	bl	8000758 <__aeabi_uldivmod>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	0c02      	lsrs	r2, r0, #16
 8000fc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	b2d3      	uxtb	r3, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f7ff ffa6 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	0a02      	lsrs	r2, r0, #8
 8000fde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fe2:	0a0b      	lsrs	r3, r1, #8
 8000fe4:	b2d3      	uxtb	r3, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f7ff ff97 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f7ff ff92 	bl	8000f1c <LoRA_Write_Register>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	01e84800 	.word	0x01e84800

08001004 <LoRA_idle>:

void LoRA_idle() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001008:	2181      	movs	r1, #129	; 0x81
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff86 	bl	8000f1c <LoRA_Write_Register>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 800101e:	231b      	movs	r3, #27
 8001020:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b78      	cmp	r3, #120	; 0x78
 8001026:	d809      	bhi.n	800103c <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	3b2d      	subs	r3, #45	; 0x2d
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <LoRA_setOCP+0x60>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1052      	asrs	r2, r2, #1
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e00b      	b.n	8001054 <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2bf0      	cmp	r3, #240	; 0xf0
 8001040:	d808      	bhi.n	8001054 <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	331e      	adds	r3, #30
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoRA_setOCP+0x60>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	1092      	asrs	r2, r2, #2
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	200b      	movs	r0, #11
 8001066:	f7ff ff59 	bl	8000f1c <LoRA_Write_Register>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	66666667 	.word	0x66666667

08001078 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b11      	cmp	r3, #17
 8001084:	dd0f      	ble.n	80010a6 <LoRA_setTxPower+0x2e>
		if (level > 20) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b14      	cmp	r3, #20
 800108a:	dd01      	ble.n	8001090 <LoRA_setTxPower+0x18>
			level = 20;
 800108c:	2314      	movs	r3, #20
 800108e:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b03      	subs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 8001096:	2187      	movs	r1, #135	; 0x87
 8001098:	204d      	movs	r0, #77	; 0x4d
 800109a:	f7ff ff3f 	bl	8000f1c <LoRA_Write_Register>
		LoRA_setOCP(140);
 800109e:	208c      	movs	r0, #140	; 0x8c
 80010a0:	f7ff ffb8 	bl	8001014 <LoRA_setOCP>
 80010a4:	e00b      	b.n	80010be <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	dc01      	bgt.n	80010b0 <LoRA_setTxPower+0x38>
			level = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 80010b0:	2184      	movs	r1, #132	; 0x84
 80010b2:	204d      	movs	r0, #77	; 0x4d
 80010b4:	f7ff ff32 	bl	8000f1c <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f7ff ffab 	bl	8001014 <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3b02      	subs	r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	2009      	movs	r0, #9
 80010d4:	f7ff ff22 	bl	8000f1c <LoRA_Write_Register>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010e4:	201d      	movs	r0, #29
 80010e6:	f7ff fef1 	bl	8000ecc <LoRA_Read_Register>
 80010ea:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	201d      	movs	r0, #29
 80010f6:	f7ff ff11 	bl	8000f1c <LoRA_Write_Register>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <LoRA_begin>:

void LoRA_begin(long frequency) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2101      	movs	r1, #1
 800110c:	4818      	ldr	r0, [pc, #96]	; (8001170 <LoRA_begin+0x70>)
 800110e:	f007 fe5f 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <LoRA_begin+0x74>)
 800111a:	f007 fe59 	bl	8008dd0 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800111e:	2042      	movs	r0, #66	; 0x42
 8001120:	f7ff fed4 	bl	8000ecc <LoRA_Read_Register>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001128:	f7ff ff26 	bl	8000f78 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800112c:	4812      	ldr	r0, [pc, #72]	; (8001178 <LoRA_begin+0x78>)
 800112e:	f7ff ff2b 	bl	8000f88 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	200f      	movs	r0, #15
 8001136:	f7ff fef1 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 800113a:	2100      	movs	r1, #0
 800113c:	200e      	movs	r0, #14
 800113e:	f7ff feed 	bl	8000f1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff fec2 	bl	8000ecc <LoRA_Read_Register>
 8001148:	4603      	mov	r3, r0
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	200c      	movs	r0, #12
 8001154:	f7ff fee2 	bl	8000f1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001158:	2104      	movs	r1, #4
 800115a:	2026      	movs	r0, #38	; 0x26
 800115c:	f7ff fede 	bl	8000f1c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001160:	2011      	movs	r0, #17
 8001162:	f7ff ff89 	bl	8001078 <LoRA_setTxPower>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58020000 	.word	0x58020000
 8001178:	33bca100 	.word	0x33bca100

0800117c <LoRA_beginPacket>:

void LoRA_beginPacket() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001180:	f7ff ffae 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001184:	2100      	movs	r1, #0
 8001186:	200d      	movs	r0, #13
 8001188:	f7ff fec8 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 800118c:	2100      	movs	r1, #0
 800118e:	2022      	movs	r0, #34	; 0x22
 8001190:	f7ff fec4 	bl	8000f1c <LoRA_Write_Register>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <LoRA_endPacket>:

void LoRA_endPacket() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800119e:	2183      	movs	r1, #131	; 0x83
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff febb 	bl	8000f1c <LoRA_Write_Register>

	while ((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80011a6:	bf00      	nop
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff fe8f 	bl	8000ecc <LoRA_Read_Register>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f7      	beq.n	80011a8 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011b8:	2108      	movs	r1, #8
 80011ba:	2012      	movs	r0, #18
 80011bc:	f7ff feae 	bl	8000f1c <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011c0:	2012      	movs	r0, #18
 80011c2:	f7ff fe83 	bl	8000ecc <LoRA_Read_Register>
 80011c6:	4603      	mov	r3, r0
 80011c8:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 80011ca:	f7ff ff89 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	2012      	movs	r0, #18
 80011d6:	f7ff fea1 	bl	8000f1c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <LoRA_endPacket+0x6c>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 80011ee:	2010      	movs	r0, #16
 80011f0:	f7ff fe6c 	bl	8000ecc <LoRA_Read_Register>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4619      	mov	r1, r3
 80011f8:	200d      	movs	r0, #13
 80011fa:	f7ff fe8f 	bl	8000f1c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 80011fe:	f7ff ff01 	bl	8001004 <LoRA_idle>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8001202:	e00d      	b.n	8001220 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fe61 	bl	8000ecc <LoRA_Read_Register>
 800120a:	4603      	mov	r3, r0
 800120c:	2b86      	cmp	r3, #134	; 0x86
 800120e:	d007      	beq.n	8001220 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001210:	2100      	movs	r1, #0
 8001212:	200d      	movs	r0, #13
 8001214:	f7ff fe82 	bl	8000f1c <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001218:	2186      	movs	r1, #134	; 0x86
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fe7e 	bl	8000f1c <LoRA_Write_Register>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LoRA_parsePacket>:

int LoRA_parsePacket() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001232:	2012      	movs	r0, #18
 8001234:	f7ff fe4a 	bl	8000ecc <LoRA_Read_Register>
 8001238:	4603      	mov	r3, r0
 800123a:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800123c:	f7ff ff50 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2012      	movs	r0, #18
 8001248:	f7ff fe68 	bl	8000f1c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d014      	beq.n	8001280 <LoRA_parsePacket+0x58>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10f      	bne.n	8001280 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001260:	2013      	movs	r0, #19
 8001262:	f7ff fe33 	bl	8000ecc <LoRA_Read_Register>
 8001266:	4603      	mov	r3, r0
 8001268:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff fe2e 	bl	8000ecc <LoRA_Read_Register>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	200d      	movs	r0, #13
 8001276:	f7ff fe51 	bl	8000f1c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 800127a:	f7ff fec3 	bl	8001004 <LoRA_idle>
 800127e:	e00d      	b.n	800129c <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fe23 	bl	8000ecc <LoRA_Read_Register>
 8001286:	4603      	mov	r3, r0
 8001288:	2b86      	cmp	r3, #134	; 0x86
 800128a:	d007      	beq.n	800129c <LoRA_parsePacket+0x74>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	200d      	movs	r0, #13
 8001290:	f7ff fe44 	bl	8000f1c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001294:	2186      	movs	r1, #134	; 0x86
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fe40 	bl	8000f1c <LoRA_Write_Register>
	}
	return packetLenght;
 800129c:	687b      	ldr	r3, [r7, #4]

}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 80012ae:	f7ff ff65 	bl	800117c <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e00a      	b.n	80012ce <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fe2a 	bl	8000f1c <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f828 	bl	8000324 <strlen>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8ed      	bhi.n	80012b8 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f821 	bl	8000324 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	2022      	movs	r0, #34	; 0x22
 80012ea:	f7ff fe17 	bl	8000f1c <LoRA_Write_Register>
	LoRA_endPacket();
 80012ee:	f7ff ff53 	bl	8001198 <LoRA_endPacket>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <disarm+0xc4>)
 800130a:	f007 fd61 	bl	8008dd0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2102      	movs	r1, #2
 8001312:	482c      	ldr	r0, [pc, #176]	; (80013c4 <disarm+0xc8>)
 8001314:	f007 fd5c 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131e:	482a      	ldr	r0, [pc, #168]	; (80013c8 <disarm+0xcc>)
 8001320:	f007 fd56 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4827      	ldr	r0, [pc, #156]	; (80013c8 <disarm+0xcc>)
 800132c:	f007 fd50 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <disarm+0xcc>)
 8001338:	f007 fd4a 	bl	8008dd0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2102      	movs	r1, #2
 8001340:	4822      	ldr	r0, [pc, #136]	; (80013cc <disarm+0xd0>)
 8001342:	f007 fd45 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4820      	ldr	r0, [pc, #128]	; (80013d0 <disarm+0xd4>)
 800134e:	f007 fd3f 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	481d      	ldr	r0, [pc, #116]	; (80013d0 <disarm+0xd4>)
 800135a:	f007 fd39 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <disarm+0xd4>)
 8001366:	f007 fd33 	bl	8008dd0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800136a:	210c      	movs	r1, #12
 800136c:	4819      	ldr	r0, [pc, #100]	; (80013d4 <disarm+0xd8>)
 800136e:	f00e ffef 	bl	8010350 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8001372:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013d8 <disarm+0xdc>
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fba8 	bl	8000acc <setServo>

	LED_Color_Data[7][0] = 255;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <disarm+0xe0>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <disarm+0xe0>)
 8001384:	2200      	movs	r2, #0
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <disarm+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <disarm+0xe0>)
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <disarm+0xe0>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <disarm+0xe0>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
	setLEDs();
 80013a0:	f7ff fbdc 	bl	8000b5c <setLEDs>

	strcpy(state, "DISARMED");
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <disarm+0xe4>)
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	cb03      	ldmia	r3!, {r0, r1}
 80013ae:	6010      	str	r0, [r2, #0]
 80013b0:	6051      	str	r1, [r2, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	7213      	strb	r3, [r2, #8]
	return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58020000 	.word	0x58020000
 80013c4:	58020400 	.word	0x58020400
 80013c8:	58021400 	.word	0x58021400
 80013cc:	58021800 	.word	0x58021800
 80013d0:	58021000 	.word	0x58021000
 80013d4:	240011e8 	.word	0x240011e8
 80013d8:	00000000 	.word	0x00000000
 80013dc:	24000bd0 	.word	0x24000bd0
 80013e0:	0801f498 	.word	0x0801f498

080013e4 <arm>:

int arm(char *state) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2102      	movs	r1, #2
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <arm+0x50>)
 80013f2:	f007 fced 	bl	8008dd0 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013f6:	210c      	movs	r1, #12
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <arm+0x54>)
 80013fa:	f00e ffa9 	bl	8010350 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 80013fe:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800143c <arm+0x58>
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fb62 	bl	8000acc <setServo>

	strcpy(state, "ARMED");
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <arm+0x5c>)
 800140c:	6810      	ldr	r0, [r2, #0]
 800140e:	6018      	str	r0, [r3, #0]
 8001410:	8892      	ldrh	r2, [r2, #4]
 8001412:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <arm+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <arm+0x60>)
 800141c:	22ff      	movs	r2, #255	; 0xff
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <arm+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8001426:	f7ff fb99 	bl	8000b5c <setLEDs>
	return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58020000 	.word	0x58020000
 8001438:	240011e8 	.word	0x240011e8
 800143c:	42c80000 	.word	0x42c80000
 8001440:	0801f4a4 	.word	0x0801f4a4
 8001444:	24000bd0 	.word	0x24000bd0

08001448 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 8001452:	f7ff fee9 	bl	8001228 <LoRA_parsePacket>
 8001456:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	dc01      	bgt.n	8001464 <recv_packet+0x1c>
			{
		return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e01c      	b.n	800149e <recv_packet+0x56>
	}
	if (packet_length) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d018      	beq.n	800149c <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e00a      	b.n	8001486 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	18d4      	adds	r4, r2, r3
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fd28 	bl	8000ecc <LoRA_Read_Register>
 800147c:	4603      	mov	r3, r0
 800147e:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbf0      	blt.n	8001470 <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		return packet_length;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	e000      	b.n	800149e <recv_packet+0x56>
	} else {
		return 0;
 800149c:	2300      	movs	r3, #0
	}
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}

080014a6 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80014a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	466b      	mov	r3, sp
 80014b2:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe ff35 	bl	8000324 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 80014c2:	8a79      	ldrh	r1, [r7, #18]
 80014c4:	460b      	mov	r3, r1
 80014c6:	3b01      	subs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	b28b      	uxth	r3, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	4698      	mov	r8, r3
 80014d0:	4691      	mov	r9, r2
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e6:	b28b      	uxth	r3, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	461c      	mov	r4, r3
 80014ec:	4615      	mov	r5, r2
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	00eb      	lsls	r3, r5, #3
 80014f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fc:	00e2      	lsls	r2, r4, #3
 80014fe:	460b      	mov	r3, r1
 8001500:	3307      	adds	r3, #7
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	ebad 0d03 	sub.w	sp, sp, r3
 800150a:	466b      	mov	r3, sp
 800150c:	3300      	adds	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001510:	f002 fd52 	bl	8003fb8 <HAL_GetTick>
 8001514:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fec5 	bl	80012a6 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 800151c:	8a7b      	ldrh	r3, [r7, #18]
 800151e:	4619      	mov	r1, r3
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff ff91 	bl	8001448 <recv_packet>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7fe feee 	bl	8000310 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d011      	beq.n	800155e <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff feb3 	bl	80012a6 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001540:	f002 fd3a 	bl	8003fb8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154e:	d9e5      	bls.n	800151c <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fea8 	bl	80012a6 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001556:	f002 fd2f 	bl	8003fb8 <HAL_GetTick>
 800155a:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 800155c:	e7de      	b.n	800151c <reliable_send_packet+0x76>
				break;
 800155e:	bf00      	nop
 8001560:	46b5      	mov	sp, r6
		}
	}
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800156c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001576:	f002 fc99 	bl	8003eac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800157a:	f000 fc59 	bl	8001e30 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800157e:	f000 fccf 	bl	8001f20 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001582:	f001 fa7b 	bl	8002a7c <MX_GPIO_Init>
	MX_DMA_Init();
 8001586:	f001 fa19 	bl	80029bc <MX_DMA_Init>
	MX_SPI3_Init();
 800158a:	f000 ff4f 	bl	800242c <MX_SPI3_Init>
	MX_FDCAN3_Init();
 800158e:	f000 fddf 	bl	8002150 <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001592:	f001 f9c7 	bl	8002924 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001596:	f000 fcf5 	bl	8001f84 <MX_ADC1_Init>
	MX_TIM4_Init();
 800159a:	f001 f859 	bl	8002650 <MX_TIM4_Init>
	MX_ADC3_Init();
 800159e:	f000 fd69 	bl	8002074 <MX_ADC3_Init>
	MX_SPI2_Init();
 80015a2:	f000 feed 	bl	8002380 <MX_SPI2_Init>
	MX_I2C2_Init();
 80015a6:	f000 fe37 	bl	8002218 <MX_I2C2_Init>
	MX_TIM2_Init();
 80015aa:	f000 ff95 	bl	80024d8 <MX_TIM2_Init>
	MX_TIM5_Init();
 80015ae:	f001 f8cb 	bl	8002748 <MX_TIM5_Init>
	MX_TIM3_Init();
 80015b2:	f000 ffe9 	bl	8002588 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80015b6:	f018 fe9f 	bl	801a2f8 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 80015ba:	f000 fe8b 	bl	80022d4 <MX_SPI1_Init>
	MX_UART4_Init();
 80015be:	f001 f965 	bl	800288c <MX_UART4_Init>
	MX_FATFS_Init();
 80015c2:	f013 fcb7 	bl	8014f34 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 80015c6:	f000 fe67 	bl	8002298 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 80015ca:	f001 f917 	bl	80027fc <MX_TIM13_Init>
	MX_TIM14_Init();
 80015ce:	f001 f939 	bl	8002844 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80015d2:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80015d6:	443b      	add	r3, r7
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe8f 	bl	80012fc <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80015de:	4bc9      	ldr	r3, [pc, #804]	; (8001904 <main+0x398>)
 80015e0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015e4:	f103 0308 	add.w	r3, r3, #8
 80015e8:	443b      	add	r3, r7
 80015ea:	2201      	movs	r2, #1
 80015ec:	49c6      	ldr	r1, [pc, #792]	; (8001908 <main+0x39c>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f018 f876 	bl	80196e0 <f_mount>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f242 72ff 	movw	r2, #10239	; 0x27ff
 80015fa:	443a      	add	r2, r7
 80015fc:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015fe:	210c      	movs	r1, #12
 8001600:	48c2      	ldr	r0, [pc, #776]	; (800190c <main+0x3a0>)
 8001602:	f00e fea5 	bl	8010350 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	2104      	movs	r1, #4
 800160a:	48c1      	ldr	r0, [pc, #772]	; (8001910 <main+0x3a4>)
 800160c:	f007 fbe0 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	2108      	movs	r1, #8
 8001614:	48be      	ldr	r0, [pc, #760]	; (8001910 <main+0x3a4>)
 8001616:	f007 fbdb 	bl	8008dd0 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 800161a:	4bbe      	ldr	r3, [pc, #760]	; (8001914 <main+0x3a8>)
 800161c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001620:	f103 0308 	add.w	r3, r3, #8
 8001624:	443b      	add	r3, r7
 8001626:	2204      	movs	r2, #4
 8001628:	49bb      	ldr	r1, [pc, #748]	; (8001918 <main+0x3ac>)
 800162a:	4618      	mov	r0, r3
 800162c:	f018 f89e 	bl	801976c <f_open>
 8001630:	4603      	mov	r3, r0
 8001632:	f242 72ff 	movw	r2, #10239	; 0x27ff
 8001636:	443a      	add	r2, r7
 8001638:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 800163a:	4bb6      	ldr	r3, [pc, #728]	; (8001914 <main+0x3a8>)
 800163c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001640:	f103 0308 	add.w	r3, r3, #8
 8001644:	443b      	add	r3, r7
 8001646:	4618      	mov	r0, r3
 8001648:	f018 fc6e 	bl	8019f28 <f_close>

	LoRA_begin(868000000);
 800164c:	48b3      	ldr	r0, [pc, #716]	; (800191c <main+0x3b0>)
 800164e:	f7ff fd57 	bl	8001100 <LoRA_begin>

	int connected = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8001658:	443a      	add	r2, r7
 800165a:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f242 72f4 	movw	r2, #10228	; 0x27f4
 8001662:	443a      	add	r2, r7
 8001664:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	f242 72f0 	movw	r2, #10224	; 0x27f0
 800166c:	443a      	add	r2, r7
 800166e:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 8001670:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001674:	f5a3 742b 	sub.w	r4, r3, #684	; 0x2ac
 8001678:	4aa9      	ldr	r2, [pc, #676]	; (8001920 <main+0x3b4>)
 800167a:	4623      	mov	r3, r4
 800167c:	ca07      	ldmia	r2, {r0, r1, r2}
 800167e:	c303      	stmia	r3!, {r0, r1}
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	f104 0309 	add.w	r3, r4, #9
 8001686:	22f1      	movs	r2, #241	; 0xf1
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f019 fb80 	bl	801ad90 <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH];
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "RECIEVING";
 8001690:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001694:	f5a3 64f3 	sub.w	r4, r3, #1944	; 0x798
 8001698:	4aa2      	ldr	r2, [pc, #648]	; (8001924 <main+0x3b8>)
 800169a:	4623      	mov	r3, r4
 800169c:	ca07      	ldmia	r2, {r0, r1, r2}
 800169e:	c303      	stmia	r3!, {r0, r1}
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	f104 030a 	add.w	r3, r4, #10
 80016a6:	22f0      	movs	r2, #240	; 0xf0
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f019 fb70 	bl	801ad90 <memset>

	uint32_t previousTime = HAL_GetTick();
 80016b0:	f002 fc82 	bl	8003fb8 <HAL_GetTick>
 80016b4:	f642 0304 	movw	r3, #10244	; 0x2804
 80016b8:	443b      	add	r3, r7
 80016ba:	6018      	str	r0, [r3, #0]

	while (1) {
		strcpy(buffered_debug_data, "");
 80016bc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80016c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		while (1) {
			HAL_ADC_Start(&hadc1); // start the adc
 80016c8:	4897      	ldr	r0, [pc, #604]	; (8001928 <main+0x3bc>)
 80016ca:	f003 f9af 	bl	8004a2c <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 80016ce:	2164      	movs	r1, #100	; 0x64
 80016d0:	4895      	ldr	r0, [pc, #596]	; (8001928 <main+0x3bc>)
 80016d2:	f003 faa9 	bl	8004c28 <HAL_ADC_PollForConversion>

			char debug_data[100];
			uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 80016d6:	4894      	ldr	r0, [pc, #592]	; (8001928 <main+0x3bc>)
 80016d8:	f003 fb9a 	bl	8004e10 <HAL_ADC_GetValue>
 80016dc:	4603      	mov	r3, r0
 80016de:	f242 72ee 	movw	r2, #10222	; 0x27ee
 80016e2:	443a      	add	r2, r7
 80016e4:	8013      	strh	r3, [r2, #0]

			sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 80016e6:	f002 fc67 	bl	8003fb8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f242 73ee 	movw	r3, #10222	; 0x27ee
 80016f0:	443b      	add	r3, r7
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	488d      	ldr	r0, [pc, #564]	; (800192c <main+0x3c0>)
 80016f6:	f642 0108 	movw	r1, #10248	; 0x2808
 80016fa:	4401      	add	r1, r0
 80016fc:	19c8      	adds	r0, r1, r7
 80016fe:	498c      	ldr	r1, [pc, #560]	; (8001930 <main+0x3c4>)
 8001700:	f01a f99c 	bl	801ba3c <siprintf>
			FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001704:	4b83      	ldr	r3, [pc, #524]	; (8001914 <main+0x3a8>)
 8001706:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800170a:	f103 0308 	add.w	r3, r3, #8
 800170e:	443b      	add	r3, r7
 8001710:	2232      	movs	r2, #50	; 0x32
 8001712:	4981      	ldr	r1, [pc, #516]	; (8001918 <main+0x3ac>)
 8001714:	4618      	mov	r0, r3
 8001716:	f018 f829 	bl	801976c <f_open>
 800171a:	4603      	mov	r3, r0
 800171c:	f242 72ff 	movw	r2, #10239	; 0x27ff
 8001720:	443a      	add	r2, r7
 8001722:	7013      	strb	r3, [r2, #0]
					FA_OPEN_APPEND | FA_WRITE);
			f_puts(debug_data, &Fil);
 8001724:	4a7b      	ldr	r2, [pc, #492]	; (8001914 <main+0x3a8>)
 8001726:	f642 0308 	movw	r3, #10248	; 0x2808
 800172a:	4413      	add	r3, r2
 800172c:	19da      	adds	r2, r3, r7
 800172e:	4b7f      	ldr	r3, [pc, #508]	; (800192c <main+0x3c0>)
 8001730:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001734:	f103 0308 	add.w	r3, r3, #8
 8001738:	443b      	add	r3, r7
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f018 fc94 	bl	801a06a <f_puts>
			f_close(&Fil);
 8001742:	4b74      	ldr	r3, [pc, #464]	; (8001914 <main+0x3a8>)
 8001744:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001748:	f103 0308 	add.w	r3, r3, #8
 800174c:	443b      	add	r3, r7
 800174e:	4618      	mov	r0, r3
 8001750:	f018 fbea 	bl	8019f28 <f_close>

			HAL_ADC_Stop(&hadc1); // stop adc
 8001754:	4874      	ldr	r0, [pc, #464]	; (8001928 <main+0x3bc>)
 8001756:	f003 fa33 	bl	8004bc0 <HAL_ADC_Stop>

			//buffer data for sending
			if (strlen(debug_data) + strlen(buffered_debug_data) + 1
 800175a:	4b74      	ldr	r3, [pc, #464]	; (800192c <main+0x3c0>)
 800175c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001760:	f103 0308 	add.w	r3, r3, #8
 8001764:	443b      	add	r3, r7
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fddc 	bl	8000324 <strlen>
 800176c:	4604      	mov	r4, r0
 800176e:	4b71      	ldr	r3, [pc, #452]	; (8001934 <main+0x3c8>)
 8001770:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001774:	f103 0308 	add.w	r3, r3, #8
 8001778:	443b      	add	r3, r7
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fdd2 	bl	8000324 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	4423      	add	r3, r4
 8001784:	3301      	adds	r3, #1
 8001786:	2bfa      	cmp	r3, #250	; 0xfa
 8001788:	d923      	bls.n	80017d2 <main+0x266>
					> MAX_PACKET_LENGTH) {
				CDC_Transmit_HS(buffered_debug_data, strlen(buffered_debug_data));
 800178a:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <main+0x3c8>)
 800178c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001790:	f103 0308 	add.w	r3, r3, #8
 8001794:	443b      	add	r3, r7
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fdc4 	bl	8000324 <strlen>
 800179c:	4602      	mov	r2, r0
 800179e:	4b65      	ldr	r3, [pc, #404]	; (8001934 <main+0x3c8>)
 80017a0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017a4:	f103 0308 	add.w	r3, r3, #8
 80017a8:	443b      	add	r3, r7
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f018 fe63 	bl	801a478 <CDC_Transmit_HS>

				break;
 80017b2:	bf00      	nop
			} else {
				strcat(buffered_debug_data, debug_data);
			}
		}

		if (strcmp(communication_state, "RECIEVING") == 0) {
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <main+0x3cc>)
 80017b6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017ba:	f103 0308 	add.w	r3, r3, #8
 80017be:	443b      	add	r3, r7
 80017c0:	495e      	ldr	r1, [pc, #376]	; (800193c <main+0x3d0>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fda4 	bl	8000310 <strcmp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80ed 	bne.w	80019aa <main+0x43e>
 80017d0:	e00f      	b.n	80017f2 <main+0x286>
				strcat(buffered_debug_data, debug_data);
 80017d2:	4a56      	ldr	r2, [pc, #344]	; (800192c <main+0x3c0>)
 80017d4:	f642 0308 	movw	r3, #10248	; 0x2808
 80017d8:	4413      	add	r3, r2
 80017da:	19da      	adds	r2, r3, r7
 80017dc:	4b55      	ldr	r3, [pc, #340]	; (8001934 <main+0x3c8>)
 80017de:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017e2:	f103 0308 	add.w	r3, r3, #8
 80017e6:	443b      	add	r3, r7
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f01a f989 	bl	801bb02 <strcat>
		while (1) {
 80017f0:	e76a      	b.n	80016c8 <main+0x15c>
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <main+0x3d4>)
 80017f4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017f8:	f103 0308 	add.w	r3, r3, #8
 80017fc:	443b      	add	r3, r7
 80017fe:	21fa      	movs	r1, #250	; 0xfa
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fe21 	bl	8001448 <recv_packet>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a3 	beq.w	8001954 <main+0x3e8>

				previousTime = HAL_GetTick();
 800180e:	f002 fbd3 	bl	8003fb8 <HAL_GetTick>
 8001812:	f642 0304 	movw	r3, #10244	; 0x2804
 8001816:	443b      	add	r3, r7
 8001818:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <main+0x3d4>)
 800181c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001820:	f103 0308 	add.w	r3, r3, #8
 8001824:	443b      	add	r3, r7
 8001826:	4947      	ldr	r1, [pc, #284]	; (8001944 <main+0x3d8>)
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fd71 	bl	8000310 <strcmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10f      	bne.n	8001854 <main+0x2e8>

					strcpy(communication_state, "MASTER");
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <main+0x3cc>)
 8001836:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800183a:	f103 0308 	add.w	r3, r3, #8
 800183e:	443b      	add	r3, r7
 8001840:	4a41      	ldr	r2, [pc, #260]	; (8001948 <main+0x3dc>)
 8001842:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001846:	6018      	str	r0, [r3, #0]
 8001848:	3304      	adds	r3, #4
 800184a:	8019      	strh	r1, [r3, #0]
 800184c:	3302      	adds	r3, #2
 800184e:	0c0a      	lsrs	r2, r1, #16
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e733      	b.n	80016bc <main+0x150>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 8001854:	4a3d      	ldr	r2, [pc, #244]	; (800194c <main+0x3e0>)
 8001856:	f642 0308 	movw	r3, #10248	; 0x2808
 800185a:	4413      	add	r3, r2
 800185c:	19da      	adds	r2, r3, r7
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <main+0x3d4>)
 8001860:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001864:	f103 0308 	add.w	r3, r3, #8
 8001868:	443b      	add	r3, r7
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fd4f 	bl	8000310 <strcmp>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <main+0x320>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <main+0x3d4>)
 800187a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800187e:	f103 0308 	add.w	r3, r3, #8
 8001882:	443b      	add	r3, r7
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd0e 	bl	80012a6 <LoRA_sendPacket>
 800188a:	e717      	b.n	80016bc <main+0x150>
				} else {
					strcpy(previous_packet, recieved_packet);
 800188c:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <main+0x3d4>)
 800188e:	f642 0308 	movw	r3, #10248	; 0x2808
 8001892:	4413      	add	r3, r2
 8001894:	19da      	adds	r2, r3, r7
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <main+0x3e0>)
 8001898:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800189c:	f103 0308 	add.w	r3, r3, #8
 80018a0:	443b      	add	r3, r7
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f01a f93b 	bl	801bb20 <strcpy>
					LoRA_sendPacket(recieved_packet);
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <main+0x3d4>)
 80018ac:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018b0:	f103 0308 	add.w	r3, r3, #8
 80018b4:	443b      	add	r3, r7
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fcf5 	bl	80012a6 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 80018bc:	4a20      	ldr	r2, [pc, #128]	; (8001940 <main+0x3d4>)
 80018be:	f642 0308 	movw	r3, #10248	; 0x2808
 80018c2:	4413      	add	r3, r2
 80018c4:	19da      	adds	r2, r3, r7
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <main+0x3e4>)
 80018c8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018cc:	f103 0308 	add.w	r3, r3, #8
 80018d0:	443b      	add	r3, r7
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f01a f923 	bl	801bb20 <strcpy>
					CDC_Transmit_HS(command, strlen(command));
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <main+0x3e4>)
 80018dc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018e0:	f103 0308 	add.w	r3, r3, #8
 80018e4:	443b      	add	r3, r7
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd1c 	bl	8000324 <strlen>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <main+0x3e4>)
 80018f0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018f4:	f103 0308 	add.w	r3, r3, #8
 80018f8:	443b      	add	r3, r7
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f018 fdbb 	bl	801a478 <CDC_Transmit_HS>
 8001902:	e6db      	b.n	80016bc <main+0x150>
 8001904:	ffffef7c 	.word	0xffffef7c
 8001908:	240016a4 	.word	0x240016a4
 800190c:	240011e8 	.word	0x240011e8
 8001910:	58021800 	.word	0x58021800
 8001914:	ffffdf4c 	.word	0xffffdf4c
 8001918:	0801f4ac 	.word	0x0801f4ac
 800191c:	33bca100 	.word	0x33bca100
 8001920:	0801f5c0 	.word	0x0801f5c0
 8001924:	0801f6bc 	.word	0x0801f6bc
 8001928:	24000c78 	.word	0x24000c78
 800192c:	ffffd7fc 	.word	0xffffd7fc
 8001930:	0801f4bc 	.word	0x0801f4bc
 8001934:	ffffde50 	.word	0xffffde50
 8001938:	ffffd868 	.word	0xffffd868
 800193c:	0801f4c4 	.word	0x0801f4c4
 8001940:	ffffdb5c 	.word	0xffffdb5c
 8001944:	0801f4d0 	.word	0x0801f4d0
 8001948:	0801f4d4 	.word	0x0801f4d4
 800194c:	ffffda60 	.word	0xffffda60
 8001950:	ffffdc58 	.word	0xffffdc58

				}
			} else if (HAL_GetTick() - previousTime > 1000) {
 8001954:	f002 fb30 	bl	8003fb8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	f642 0304 	movw	r3, #10244	; 0x2804
 800195e:	443b      	add	r3, r7
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001968:	f67f aea8 	bls.w	80016bc <main+0x150>
				previousTime = HAL_GetTick();
 800196c:	f002 fb24 	bl	8003fb8 <HAL_GetTick>
 8001970:	f642 0304 	movw	r3, #10244	; 0x2804
 8001974:	443b      	add	r3, r7
 8001976:	6018      	str	r0, [r3, #0]
				//give up MASTER
				sprintf(response_packet, "$ %s", state);
 8001978:	4acf      	ldr	r2, [pc, #828]	; (8001cb8 <main+0x74c>)
 800197a:	f642 0308 	movw	r3, #10248	; 0x2808
 800197e:	4413      	add	r3, r2
 8001980:	19da      	adds	r2, r3, r7
 8001982:	4bce      	ldr	r3, [pc, #824]	; (8001cbc <main+0x750>)
 8001984:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001988:	f103 0308 	add.w	r3, r3, #8
 800198c:	443b      	add	r3, r7
 800198e:	49cc      	ldr	r1, [pc, #816]	; (8001cc0 <main+0x754>)
 8001990:	4618      	mov	r0, r3
 8001992:	f01a f853 	bl	801ba3c <siprintf>
				LoRA_sendPacket(response_packet);
 8001996:	4bc9      	ldr	r3, [pc, #804]	; (8001cbc <main+0x750>)
 8001998:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800199c:	f103 0308 	add.w	r3, r3, #8
 80019a0:	443b      	add	r3, r7
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fc7f 	bl	80012a6 <LoRA_sendPacket>
 80019a8:	e688      	b.n	80016bc <main+0x150>
			}
		} else if (strcmp(communication_state, "MASTER") == 0) {
 80019aa:	4bc6      	ldr	r3, [pc, #792]	; (8001cc4 <main+0x758>)
 80019ac:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019b0:	f103 0308 	add.w	r3, r3, #8
 80019b4:	443b      	add	r3, r7
 80019b6:	49c4      	ldr	r1, [pc, #784]	; (8001cc8 <main+0x75c>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fca9 	bl	8000310 <strcmp>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f47f ae7b 	bne.w	80016bc <main+0x150>
			CDC_Transmit_HS(state, strlen(state));
 80019c6:	4bbc      	ldr	r3, [pc, #752]	; (8001cb8 <main+0x74c>)
 80019c8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019cc:	f103 0308 	add.w	r3, r3, #8
 80019d0:	443b      	add	r3, r7
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fca6 	bl	8000324 <strlen>
 80019d8:	4602      	mov	r2, r0
 80019da:	4bb7      	ldr	r3, [pc, #732]	; (8001cb8 <main+0x74c>)
 80019dc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019e0:	f103 0308 	add.w	r3, r3, #8
 80019e4:	443b      	add	r3, r7
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 fd45 	bl	801a478 <CDC_Transmit_HS>
			if (strcmp(state, "DISARMED") == 0) {
 80019ee:	4bb2      	ldr	r3, [pc, #712]	; (8001cb8 <main+0x74c>)
 80019f0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019f4:	f103 0308 	add.w	r3, r3, #8
 80019f8:	443b      	add	r3, r7
 80019fa:	49b4      	ldr	r1, [pc, #720]	; (8001ccc <main+0x760>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fc87 	bl	8000310 <strcmp>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 8105 	bne.w	8001c14 <main+0x6a8>
				HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f002 fae0 	bl	8003fd0 <HAL_Delay>
				CDC_Transmit_HS(command, strlen(command));
 8001a10:	4baf      	ldr	r3, [pc, #700]	; (8001cd0 <main+0x764>)
 8001a12:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a16:	f103 0308 	add.w	r3, r3, #8
 8001a1a:	443b      	add	r3, r7
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fc81 	bl	8000324 <strlen>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4baa      	ldr	r3, [pc, #680]	; (8001cd0 <main+0x764>)
 8001a26:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a2a:	f103 0308 	add.w	r3, r3, #8
 8001a2e:	443b      	add	r3, r7
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f018 fd20 	bl	801a478 <CDC_Transmit_HS>
				if (strcmp(command, "ARM") == 0) {
 8001a38:	4ba5      	ldr	r3, [pc, #660]	; (8001cd0 <main+0x764>)
 8001a3a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a3e:	f103 0308 	add.w	r3, r3, #8
 8001a42:	443b      	add	r3, r7
 8001a44:	49a3      	ldr	r1, [pc, #652]	; (8001cd4 <main+0x768>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fc62 	bl	8000310 <strcmp>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d121      	bne.n	8001a96 <main+0x52a>
					HAL_Delay(10);
 8001a52:	200a      	movs	r0, #10
 8001a54:	f002 fabc 	bl	8003fd0 <HAL_Delay>
					CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
 8001a58:	2107      	movs	r1, #7
 8001a5a:	489f      	ldr	r0, [pc, #636]	; (8001cd8 <main+0x76c>)
 8001a5c:	f018 fd0c 	bl	801a478 <CDC_Transmit_HS>
					if (!arm(state)) {
 8001a60:	4b95      	ldr	r3, [pc, #596]	; (8001cb8 <main+0x74c>)
 8001a62:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a66:	f103 0308 	add.w	r3, r3, #8
 8001a6a:	443b      	add	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fcb9 	bl	80013e4 <arm>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <main+0x522>
						HAL_Delay(10);
 8001a78:	200a      	movs	r0, #10
 8001a7a:	f002 faa9 	bl	8003fd0 <HAL_Delay>
						CDC_Transmit_HS("HELLO 3", strlen("HELLO 3"));
 8001a7e:	2107      	movs	r1, #7
 8001a80:	4896      	ldr	r0, [pc, #600]	; (8001cdc <main+0x770>)
 8001a82:	f018 fcf9 	bl	801a478 <CDC_Transmit_HS>
						reliable_send_packet("ARM SUCCESS");
 8001a86:	4896      	ldr	r0, [pc, #600]	; (8001ce0 <main+0x774>)
 8001a88:	f7ff fd0d 	bl	80014a6 <reliable_send_packet>
 8001a8c:	e195      	b.n	8001dba <main+0x84e>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001a8e:	4895      	ldr	r0, [pc, #596]	; (8001ce4 <main+0x778>)
 8001a90:	f7ff fd09 	bl	80014a6 <reliable_send_packet>
 8001a94:	e191      	b.n	8001dba <main+0x84e>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001a96:	4b8e      	ldr	r3, [pc, #568]	; (8001cd0 <main+0x764>)
 8001a98:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a9c:	f103 0308 	add.w	r3, r3, #8
 8001aa0:	443b      	add	r3, r7
 8001aa2:	4991      	ldr	r1, [pc, #580]	; (8001ce8 <main+0x77c>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fc33 	bl	8000310 <strcmp>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <main+0x54c>
					reliable_send_packet("ALREADY DISARMED");
 8001ab0:	488e      	ldr	r0, [pc, #568]	; (8001cec <main+0x780>)
 8001ab2:	f7ff fcf8 	bl	80014a6 <reliable_send_packet>
 8001ab6:	e180      	b.n	8001dba <main+0x84e>
				} else if (strcmp(command, "CONT") == 0) {
 8001ab8:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <main+0x764>)
 8001aba:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001abe:	f103 0308 	add.w	r3, r3, #8
 8001ac2:	443b      	add	r3, r7
 8001ac4:	498a      	ldr	r1, [pc, #552]	; (8001cf0 <main+0x784>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fc22 	bl	8000310 <strcmp>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8173 	bne.w	8001dba <main+0x84e>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	4887      	ldr	r0, [pc, #540]	; (8001cf4 <main+0x788>)
 8001ad8:	f007 f962 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001ae4:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001ae8:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aee:	4882      	ldr	r0, [pc, #520]	; (8001cf8 <main+0x78c>)
 8001af0:	f007 f956 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001afc:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b00:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b06:	487c      	ldr	r0, [pc, #496]	; (8001cf8 <main+0x78c>)
 8001b08:	f007 f94a 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b14:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b18:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4877      	ldr	r0, [pc, #476]	; (8001cfc <main+0x790>)
 8001b1e:	f007 f93f 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b2a:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b2e:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	4873      	ldr	r0, [pc, #460]	; (8001d00 <main+0x794>)
 8001b34:	f007 f934 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b40:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b44:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4a:	486d      	ldr	r0, [pc, #436]	; (8001d00 <main+0x794>)
 8001b4c:	f007 f928 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b58:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b5c:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b62:	4867      	ldr	r0, [pc, #412]	; (8001d00 <main+0x794>)
 8001b64:	f007 f91c 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b70:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b74:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <main+0x794>)
 8001b7c:	f007 f910 	bl	8008da0 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b88:	f5a3 63f4 	sub.w	r3, r3, #1952	; 0x7a0
 8001b8c:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e037      	b.n	8001c08 <main+0x69c>
						if (CONTS[i]) {
 8001b98:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001b9c:	f5a3 62f4 	sub.w	r2, r3, #1952	; 0x7a0
 8001ba0:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <main+0x660>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001bae:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <main+0x798>)
 8001bb8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bbc:	f103 0308 	add.w	r3, r3, #8
 8001bc0:	443b      	add	r3, r7
 8001bc2:	4951      	ldr	r1, [pc, #324]	; (8001d08 <main+0x79c>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f019 ff39 	bl	801ba3c <siprintf>
 8001bca:	e00d      	b.n	8001be8 <main+0x67c>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001bcc:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <main+0x798>)
 8001bd6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bda:	f103 0308 	add.w	r3, r3, #8
 8001bde:	443b      	add	r3, r7
 8001be0:	494a      	ldr	r1, [pc, #296]	; (8001d0c <main+0x7a0>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f019 ff2a 	bl	801ba3c <siprintf>
						}

						reliable_send_packet(message);
 8001be8:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <main+0x798>)
 8001bea:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001bee:	f103 0308 	add.w	r3, r3, #8
 8001bf2:	443b      	add	r3, r7
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fc56 	bl	80014a6 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001bfa:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	ddc2      	ble.n	8001b98 <main+0x62c>
 8001c12:	e0d2      	b.n	8001dba <main+0x84e>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <main+0x74c>)
 8001c16:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c1a:	f103 0308 	add.w	r3, r3, #8
 8001c1e:	443b      	add	r3, r7
 8001c20:	493b      	ldr	r1, [pc, #236]	; (8001d10 <main+0x7a4>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fb74 	bl	8000310 <strcmp>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d178      	bne.n	8001d20 <main+0x7b4>
				if (strcmp(command, "DISARM") == 0) {
 8001c2e:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <main+0x764>)
 8001c30:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c34:	f103 0308 	add.w	r3, r3, #8
 8001c38:	443b      	add	r3, r7
 8001c3a:	492b      	ldr	r1, [pc, #172]	; (8001ce8 <main+0x77c>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fb67 	bl	8000310 <strcmp>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <main+0x6f0>
					if (disarm(state)) {
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <main+0x74c>)
 8001c4a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c4e:	f103 0308 	add.w	r3, r3, #8
 8001c52:	443b      	add	r3, r7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb51 	bl	80012fc <disarm>
 8001c5a:	e0ae      	b.n	8001dba <main+0x84e>
						//not success
					} else {
						//success
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <main+0x764>)
 8001c5e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c62:	f103 0308 	add.w	r3, r3, #8
 8001c66:	443b      	add	r3, r7
 8001c68:	491a      	ldr	r1, [pc, #104]	; (8001cd4 <main+0x768>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fb50 	bl	8000310 <strcmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <main+0x712>
					reliable_send_packet("ALREADY ARMED");
 8001c76:	4827      	ldr	r0, [pc, #156]	; (8001d14 <main+0x7a8>)
 8001c78:	f7ff fc15 	bl	80014a6 <reliable_send_packet>
 8001c7c:	e09d      	b.n	8001dba <main+0x84e>
				} else if (strcmp(command, "FIRE") == 0) {
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <main+0x764>)
 8001c80:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001c84:	f103 0308 	add.w	r3, r3, #8
 8001c88:	443b      	add	r3, r7
 8001c8a:	4923      	ldr	r1, [pc, #140]	; (8001d18 <main+0x7ac>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb3f 	bl	8000310 <strcmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 8090 	bne.w	8001dba <main+0x84e>
					strcpy(state, "STATIC_FIRE_LOGGING");
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <main+0x74c>)
 8001c9c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ca0:	f103 0308 	add.w	r3, r3, #8
 8001ca4:	443b      	add	r3, r7
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <main+0x7b0>)
 8001ca8:	461c      	mov	r4, r3
 8001caa:	4615      	mov	r5, r2
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	6023      	str	r3, [r4, #0]
 8001cb4:	e081      	b.n	8001dba <main+0x84e>
 8001cb6:	bf00      	nop
 8001cb8:	ffffdd54 	.word	0xffffdd54
 8001cbc:	ffffd964 	.word	0xffffd964
 8001cc0:	0801f4dc 	.word	0x0801f4dc
 8001cc4:	ffffd868 	.word	0xffffd868
 8001cc8:	0801f4d4 	.word	0x0801f4d4
 8001ccc:	0801f498 	.word	0x0801f498
 8001cd0:	ffffdc58 	.word	0xffffdc58
 8001cd4:	0801f4e4 	.word	0x0801f4e4
 8001cd8:	0801f4e8 	.word	0x0801f4e8
 8001cdc:	0801f4f0 	.word	0x0801f4f0
 8001ce0:	0801f4f8 	.word	0x0801f4f8
 8001ce4:	0801f504 	.word	0x0801f504
 8001ce8:	0801f518 	.word	0x0801f518
 8001cec:	0801f520 	.word	0x0801f520
 8001cf0:	0801f534 	.word	0x0801f534
 8001cf4:	58020400 	.word	0x58020400
 8001cf8:	58021400 	.word	0x58021400
 8001cfc:	58021800 	.word	0x58021800
 8001d00:	58021000 	.word	0x58021000
 8001d04:	ffffd7fc 	.word	0xffffd7fc
 8001d08:	0801f53c 	.word	0x0801f53c
 8001d0c:	0801f55c 	.word	0x0801f55c
 8001d10:	0801f4a4 	.word	0x0801f4a4
 8001d14:	0801f574 	.word	0x0801f574
 8001d18:	0801f584 	.word	0x0801f584
 8001d1c:	0801f58c 	.word	0x0801f58c
				}
			} else if (strcmp(state, "STATIC_FIRE_LOGGING") == 0) {
 8001d20:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <main+0x894>)
 8001d22:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d26:	f103 0308 	add.w	r3, r3, #8
 8001d2a:	443b      	add	r3, r7
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <main+0x898>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe faee 	bl	8000310 <strcmp>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d130      	bne.n	8001d9c <main+0x830>
				if (strcmp(command, "STOP") == 0) {
 8001d3a:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <main+0x89c>)
 8001d3c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d40:	f103 0308 	add.w	r3, r3, #8
 8001d44:	443b      	add	r3, r7
 8001d46:	4931      	ldr	r1, [pc, #196]	; (8001e0c <main+0x8a0>)
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fae1 	bl	8000310 <strcmp>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10c      	bne.n	8001d6e <main+0x802>
					strcpy(state, "ARMED");
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <main+0x894>)
 8001d56:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d5a:	f103 0308 	add.w	r3, r3, #8
 8001d5e:	443b      	add	r3, r7
 8001d60:	4a2b      	ldr	r2, [pc, #172]	; (8001e10 <main+0x8a4>)
 8001d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d66:	6018      	str	r0, [r3, #0]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	8019      	strh	r1, [r3, #0]
 8001d6c:	e025      	b.n	8001dba <main+0x84e>
				} else if (strcmp(command, "DATA") == 0) {
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <main+0x89c>)
 8001d70:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d74:	f103 0308 	add.w	r3, r3, #8
 8001d78:	443b      	add	r3, r7
 8001d7a:	4926      	ldr	r1, [pc, #152]	; (8001e14 <main+0x8a8>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fac7 	bl	8000310 <strcmp>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d118      	bne.n	8001dba <main+0x84e>
					reliable_send_packet(buffered_debug_data);
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <main+0x8ac>)
 8001d8a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001d8e:	f103 0308 	add.w	r3, r3, #8
 8001d92:	443b      	add	r3, r7
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fb86 	bl	80014a6 <reliable_send_packet>
 8001d9a:	e00e      	b.n	8001dba <main+0x84e>
				}
			} else {
				LoRA_sendPacket("state wrong!");
 8001d9c:	481f      	ldr	r0, [pc, #124]	; (8001e1c <main+0x8b0>)
 8001d9e:	f7ff fa82 	bl	80012a6 <LoRA_sendPacket>
				HAL_Delay(100);
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	f002 f914 	bl	8003fd0 <HAL_Delay>
				LoRA_sendPacket(state);
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <main+0x894>)
 8001daa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dae:	f103 0308 	add.w	r3, r3, #8
 8001db2:	443b      	add	r3, r7
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa76 	bl	80012a6 <LoRA_sendPacket>
			}

			sprintf(response_packet, "$ %s", state);
 8001dba:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <main+0x894>)
 8001dbc:	f642 0308 	movw	r3, #10248	; 0x2808
 8001dc0:	4413      	add	r3, r2
 8001dc2:	19da      	adds	r2, r3, r7
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <main+0x8b4>)
 8001dc6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dca:	f103 0308 	add.w	r3, r3, #8
 8001dce:	443b      	add	r3, r7
 8001dd0:	4914      	ldr	r1, [pc, #80]	; (8001e24 <main+0x8b8>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f019 fe32 	bl	801ba3c <siprintf>
			LoRA_sendPacket(response_packet);
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <main+0x8b4>)
 8001dda:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001dde:	f103 0308 	add.w	r3, r3, #8
 8001de2:	443b      	add	r3, r7
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa5e 	bl	80012a6 <LoRA_sendPacket>
			strcpy(communication_state, "RECIEVING");
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <main+0x8bc>)
 8001dec:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001df0:	f103 0308 	add.w	r3, r3, #8
 8001df4:	443b      	add	r3, r7
 8001df6:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <main+0x8c0>)
 8001df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfa:	c303      	stmia	r3!, {r0, r1}
 8001dfc:	801a      	strh	r2, [r3, #0]
		strcpy(buffered_debug_data, "");
 8001dfe:	e45d      	b.n	80016bc <main+0x150>
 8001e00:	ffffdd54 	.word	0xffffdd54
 8001e04:	0801f58c 	.word	0x0801f58c
 8001e08:	ffffdc58 	.word	0xffffdc58
 8001e0c:	0801f5a0 	.word	0x0801f5a0
 8001e10:	0801f4a4 	.word	0x0801f4a4
 8001e14:	0801f5a8 	.word	0x0801f5a8
 8001e18:	ffffde50 	.word	0xffffde50
 8001e1c:	0801f5b0 	.word	0x0801f5b0
 8001e20:	ffffd964 	.word	0xffffd964
 8001e24:	0801f4dc 	.word	0x0801f4dc
 8001e28:	ffffd868 	.word	0xffffd868
 8001e2c:	0801f4c4 	.word	0x0801f4c4

08001e30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09c      	sub	sp, #112	; 0x70
 8001e34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	224c      	movs	r2, #76	; 0x4c
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f018 ffa6 	bl	801ad90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2220      	movs	r2, #32
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f018 ffa0 	bl	801ad90 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e50:	2002      	movs	r0, #2
 8001e52:	f008 fbd1 	bl	800a5f8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <SystemClock_Config+0xec>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e62:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <SystemClock_Config+0xec>)
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <SystemClock_Config+0xec>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001e76:	bf00      	nop
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <SystemClock_Config+0xec>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e84:	d1f8      	bne.n	8001e78 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8001e86:	2322      	movs	r3, #34	; 0x22
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001e8e:	2340      	movs	r3, #64	; 0x40
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e92:	2301      	movs	r3, #1
 8001e94:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e96:	2302      	movs	r3, #2
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f008 fbe2 	bl	800a68c <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0xa2>
		Error_Handler();
 8001ece:	f000 ff39 	bl	8002d44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ed2:	233f      	movs	r3, #63	; 0x3f
 8001ed4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ee6:	2340      	movs	r3, #64	; 0x40
 8001ee8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eee:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f008 ffa1 	bl	800ae40 <HAL_RCC_ClockConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0xd8>
		Error_Handler();
 8001f04:	f000 ff1e 	bl	8002d44 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001f08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f009 f94c 	bl	800b1ac <HAL_RCC_MCOConfig>
}
 8001f14:	bf00      	nop
 8001f16:	3770      	adds	r7, #112	; 0x70
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58024800 	.word	0x58024800

08001f20 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0ae      	sub	sp, #184	; 0xb8
 8001f24:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001f26:	463b      	mov	r3, r7
 8001f28:	22b8      	movs	r2, #184	; 0xb8
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f018 ff2f 	bl	801ad90 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 8001f32:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f42:	230c      	movs	r3, #12
 8001f44:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001f46:	2304      	movs	r3, #4
 8001f48:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f52:	23c0      	movs	r3, #192	; 0xc0
 8001f54:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f62:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f009 fb5d 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8001f78:	f000 fee4 	bl	8002d44 <Error_Handler>
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	37b8      	adds	r7, #184	; 0xb8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	; 0x30
 8001f88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f96:	463b      	mov	r3, r7
 8001f98:	2224      	movs	r2, #36	; 0x24
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f018 fef7 	bl	801ad90 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fa4:	4a31      	ldr	r2, [pc, #196]	; (800206c <MX_ADC1_Init+0xe8>)
 8001fa6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001faa:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001fae:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_ADC1_Init+0xe4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002002:	4819      	ldr	r0, [pc, #100]	; (8002068 <MX_ADC1_Init+0xe4>)
 8002004:	f002 fb0a 	bl	800461c <HAL_ADC_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_ADC1_Init+0x8e>
		Error_Handler();
 800200e:	f000 fe99 	bl	8002d44 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	4812      	ldr	r0, [pc, #72]	; (8002068 <MX_ADC1_Init+0xe4>)
 800201e:	f003 feeb 	bl	8005df8 <HAL_ADCEx_MultiModeConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC1_Init+0xa8>
		Error_Handler();
 8002028:	f000 fe8c 	bl	8002d44 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_ADC1_Init+0xec>)
 800202e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002030:	2306      	movs	r3, #6
 8002032:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002034:	2303      	movs	r3, #3
 8002036:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002038:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800203c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800203e:	2304      	movs	r3, #4
 8002040:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800204c:	463b      	mov	r3, r7
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_ADC1_Init+0xe4>)
 8002052:	f002 feeb 	bl	8004e2c <HAL_ADC_ConfigChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC1_Init+0xdc>
		Error_Handler();
 800205c:	f000 fe72 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	24000c78 	.word	0x24000c78
 800206c:	40022000 	.word	0x40022000
 8002070:	3ac04000 	.word	0x3ac04000

08002074 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2224      	movs	r2, #36	; 0x24
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f018 fe85 	bl	801ad90 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8002086:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <MX_ADC3_Init+0xd0>)
 8002088:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <MX_ADC3_Init+0xd4>)
 800208a:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <MX_ADC3_Init+0xd0>)
 800208e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002092:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <MX_ADC3_Init+0xd0>)
 8002096:	2208      	movs	r2, #8
 8002098:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <MX_ADC3_Init+0xd0>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020a8:	2204      	movs	r2, #4
 80020aa:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <MX_ADC3_Init+0xd0>)
 80020fc:	f002 fa8e 	bl	800461c <HAL_ADC_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_ADC3_Init+0x96>
		Error_Handler();
 8002106:	f000 fe1d 	bl	8002d44 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_ADC3_Init+0xd8>)
 800210c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800210e:	2306      	movs	r3, #6
 8002110:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002116:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800211a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800211c:	2304      	movs	r3, #4
 800211e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_ADC3_Init+0xd0>)
 800212e:	f002 fe7d 	bl	8004e2c <HAL_ADC_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_ADC3_Init+0xc8>
		Error_Handler();
 8002138:	f000 fe04 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	24000ce8 	.word	0x24000ce8
 8002148:	58026000 	.word	0x58026000
 800214c:	04300002 	.word	0x04300002

08002150 <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002156:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <MX_FDCAN3_Init+0xc4>)
 8002158:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002160:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002168:	2200      	movs	r2, #0
 800216a:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 800216e:	2200      	movs	r2, #0
 8002170:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002174:	2200      	movs	r2, #0
 8002176:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 800217a:	2210      	movs	r2, #16
 800217c:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002180:	2201      	movs	r2, #1
 8002182:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002186:	2202      	movs	r2, #2
 8002188:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 800218c:	2202      	movs	r2, #2
 800218e:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002192:	2201      	movs	r2, #1
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 8002198:	2201      	movs	r2, #1
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 800219e:	2201      	movs	r2, #1
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021c2:	2204      	movs	r2, #4
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021da:	2204      	movs	r2, #4
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021f8:	2204      	movs	r2, #4
 80021fa:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <MX_FDCAN3_Init+0xc0>)
 80021fe:	f006 f8c3 	bl	8008388 <HAL_FDCAN_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8002208:	f000 fd9c 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	24000e48 	.word	0x24000e48
 8002214:	4000d400 	.word	0x4000d400

08002218 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <MX_I2C2_Init+0x74>)
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <MX_I2C2_Init+0x78>)
 8002220:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_I2C2_Init+0x74>)
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <MX_I2C2_Init+0x7c>)
 8002226:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <MX_I2C2_Init+0x74>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_I2C2_Init+0x74>)
 8002230:	2201      	movs	r2, #1
 8002232:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_I2C2_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_I2C2_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MX_I2C2_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_I2C2_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_I2C2_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002252:	480e      	ldr	r0, [pc, #56]	; (800228c <MX_I2C2_Init+0x74>)
 8002254:	f006 fdd6 	bl	8008e04 <HAL_I2C_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_I2C2_Init+0x4a>
		Error_Handler();
 800225e:	f000 fd71 	bl	8002d44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8002262:	2100      	movs	r1, #0
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <MX_I2C2_Init+0x74>)
 8002266:	f006 fe77 	bl	8008f58 <HAL_I2CEx_ConfigAnalogFilter>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002270:	f000 fd68 	bl	8002d44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002274:	2100      	movs	r1, #0
 8002276:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_I2C2_Init+0x74>)
 8002278:	f006 feb9 	bl	8008fee <HAL_I2CEx_ConfigDigitalFilter>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8002282:	f000 fd5f 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	24000ee8 	.word	0x24000ee8
 8002290:	40005800 	.word	0x40005800
 8002294:	20303e5d 	.word	0x20303e5d

08002298 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <MX_SDMMC2_SD_Init+0x34>)
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <MX_SDMMC2_SD_Init+0x38>)
 80022a0:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <MX_SDMMC2_SD_Init+0x34>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <MX_SDMMC2_SD_Init+0x34>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <MX_SDMMC2_SD_Init+0x34>)
 80022b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b4:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <MX_SDMMC2_SD_Init+0x34>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <MX_SDMMC2_SD_Init+0x34>)
 80022be:	2208      	movs	r2, #8
 80022c0:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	24000f3c 	.word	0x24000f3c
 80022d0:	48022400 	.word	0x48022400

080022d4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <MX_SPI1_Init+0xa4>)
 80022da:	4a28      	ldr	r2, [pc, #160]	; (800237c <MX_SPI1_Init+0xa8>)
 80022dc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <MX_SPI1_Init+0xa4>)
 80022e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022e4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <MX_SPI1_Init+0xa4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <MX_SPI1_Init+0xa4>)
 80022ee:	2207      	movs	r2, #7
 80022f0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_SPI1_Init+0xa4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f8:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_SPI1_Init+0xa4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002300:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002304:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002308:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800230c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MX_SPI1_Init+0xa4>)
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002336:	2200      	movs	r2, #0
 8002338:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_SPI1_Init+0xa4>)
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002348:	2200      	movs	r2, #0
 800234a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_SPI1_Init+0xa4>)
 800234e:	2200      	movs	r2, #0
 8002350:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002354:	2200      	movs	r2, #0
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_SPI1_Init+0xa4>)
 800235a:	2200      	movs	r2, #0
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002360:	2200      	movs	r2, #0
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_SPI1_Init+0xa4>)
 8002366:	f00d f9ab 	bl	800f6c0 <HAL_SPI_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_SPI1_Init+0xa0>
		Error_Handler();
 8002370:	f000 fce8 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24000fb8 	.word	0x24000fb8
 800237c:	40013000 	.word	0x40013000

08002380 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <MX_SPI2_Init+0xa4>)
 8002386:	4a28      	ldr	r2, [pc, #160]	; (8002428 <MX_SPI2_Init+0xa8>)
 8002388:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <MX_SPI2_Init+0xa4>)
 800238c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002390:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <MX_SPI2_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <MX_SPI2_Init+0xa4>)
 800239a:	2207      	movs	r2, #7
 800239c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023b0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023b8:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <MX_SPI2_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_SPI2_Init+0xa4>)
 8002400:	2200      	movs	r2, #0
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MX_SPI2_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_SPI2_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_SPI2_Init+0xa4>)
 8002412:	f00d f955 	bl	800f6c0 <HAL_SPI_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_SPI2_Init+0xa0>
		Error_Handler();
 800241c:	f000 fc92 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	24001040 	.word	0x24001040
 8002428:	40003800 	.word	0x40003800

0800242c <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <MX_SPI3_Init+0xa8>)
 8002434:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002438:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800243c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002446:	2207      	movs	r2, #7
 8002448:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_SPI3_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002458:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800245c:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002460:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002464:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_SPI3_Init+0xa4>)
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <MX_SPI3_Init+0xa4>)
 800247a:	2200      	movs	r2, #0
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002488:	2200      	movs	r2, #0
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <MX_SPI3_Init+0xa4>)
 800248e:	2200      	movs	r2, #0
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_SPI3_Init+0xa4>)
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_SPI3_Init+0xa4>)
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_SPI3_Init+0xa4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_SPI3_Init+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_SPI3_Init+0xa4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_SPI3_Init+0xa4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_SPI3_Init+0xa4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_SPI3_Init+0xa4>)
 80024be:	f00d f8ff 	bl	800f6c0 <HAL_SPI_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_SPI3_Init+0xa0>
		Error_Handler();
 80024c8:	f000 fc3c 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	240010c8 	.word	0x240010c8
 80024d4:	40003c00 	.word	0x40003c00

080024d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <MX_TIM2_Init+0xac>)
 80024fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002502:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_TIM2_Init+0xac>)
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <MX_TIM2_Init+0xac>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <MX_TIM2_Init+0xac>)
 8002512:	225a      	movs	r2, #90	; 0x5a
 8002514:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_TIM2_Init+0xac>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_TIM2_Init+0xac>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002522:	4818      	ldr	r0, [pc, #96]	; (8002584 <MX_TIM2_Init+0xac>)
 8002524:	f00d febc 	bl	80102a0 <HAL_TIM_PWM_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x5a>
		Error_Handler();
 800252e:	f000 fc09 	bl	8002d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4810      	ldr	r0, [pc, #64]	; (8002584 <MX_TIM2_Init+0xac>)
 8002542:	f00f f943 	bl	80117cc <HAL_TIMEx_MasterConfigSynchronization>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 800254c:	f000 fbfa 	bl	8002d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002550:	2360      	movs	r3, #96	; 0x60
 8002552:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8002560:	463b      	mov	r3, r7
 8002562:	2208      	movs	r2, #8
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <MX_TIM2_Init+0xac>)
 8002568:	f00e fb62 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002572:	f000 fbe7 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <MX_TIM2_Init+0xac>)
 8002578:	f001 f91a 	bl	80037b0 <HAL_TIM_MspPostInit>

}
 800257c:	bf00      	nop
 800257e:	3728      	adds	r7, #40	; 0x28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	24001150 	.word	0x24001150

08002588 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800259a:	463b      	mov	r3, r7
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
 80025a8:	615a      	str	r2, [r3, #20]
 80025aa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80025ac:	4b26      	ldr	r3, [pc, #152]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <MX_TIM3_Init+0xc4>)
 80025b0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025c0:	225a      	movs	r2, #90	; 0x5a
 80025c2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80025d0:	481d      	ldr	r0, [pc, #116]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025d2:	f00d fe65 	bl	80102a0 <HAL_TIM_PWM_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM3_Init+0x58>
		Error_Handler();
 80025dc:	f000 fbb2 	bl	8002d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	4816      	ldr	r0, [pc, #88]	; (8002648 <MX_TIM3_Init+0xc0>)
 80025f0:	f00f f8ec 	bl	80117cc <HAL_TIMEx_MasterConfigSynchronization>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80025fa:	f000 fba3 	bl	8002d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fe:	2360      	movs	r3, #96	; 0x60
 8002600:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800260e:	463b      	mov	r3, r7
 8002610:	2200      	movs	r2, #0
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_TIM3_Init+0xc0>)
 8002616:	f00e fb0b 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002620:	f000 fb90 	bl	8002d44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002624:	463b      	mov	r3, r7
 8002626:	2204      	movs	r2, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <MX_TIM3_Init+0xc0>)
 800262c:	f00e fb00 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002636:	f000 fb85 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <MX_TIM3_Init+0xc0>)
 800263c:	f001 f8b8 	bl	80037b0 <HAL_TIM_MspPostInit>

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	2400119c 	.word	0x2400119c
 800264c:	40000400 	.word	0x40000400

08002650 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002662:	463b      	mov	r3, r7
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
 8002670:	615a      	str	r2, [r3, #20]
 8002672:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002676:	4a33      	ldr	r2, [pc, #204]	; (8002744 <MX_TIM4_Init+0xf4>)
 8002678:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <MX_TIM4_Init+0xf0>)
 800267c:	221d      	movs	r2, #29
 800267e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002688:	f242 720f 	movw	r2, #9999	; 0x270f
 800268c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800269a:	4829      	ldr	r0, [pc, #164]	; (8002740 <MX_TIM4_Init+0xf0>)
 800269c:	f00d fe00 	bl	80102a0 <HAL_TIM_PWM_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM4_Init+0x5a>
		Error_Handler();
 80026a6:	f000 fb4d 	bl	8002d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	4619      	mov	r1, r3
 80026b8:	4821      	ldr	r0, [pc, #132]	; (8002740 <MX_TIM4_Init+0xf0>)
 80026ba:	f00f f887 	bl	80117cc <HAL_TIMEx_MasterConfigSynchronization>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80026c4:	f000 fb3e 	bl	8002d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c8:	2360      	movs	r3, #96	; 0x60
 80026ca:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80026d8:	463b      	mov	r3, r7
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	4818      	ldr	r0, [pc, #96]	; (8002740 <MX_TIM4_Init+0xf0>)
 80026e0:	f00e faa6 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80026ea:	f000 fb2b 	bl	8002d44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80026ee:	463b      	mov	r3, r7
 80026f0:	2204      	movs	r2, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4812      	ldr	r0, [pc, #72]	; (8002740 <MX_TIM4_Init+0xf0>)
 80026f6:	f00e fa9b 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8002700:	f000 fb20 	bl	8002d44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002704:	463b      	mov	r3, r7
 8002706:	2208      	movs	r2, #8
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_TIM4_Init+0xf0>)
 800270c:	f00e fa90 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8002716:	f000 fb15 	bl	8002d44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800271a:	463b      	mov	r3, r7
 800271c:	220c      	movs	r2, #12
 800271e:	4619      	mov	r1, r3
 8002720:	4807      	ldr	r0, [pc, #28]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002722:	f00e fa85 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 800272c:	f000 fb0a 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <MX_TIM4_Init+0xf0>)
 8002732:	f001 f83d 	bl	80037b0 <HAL_TIM_MspPostInit>

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	240011e8 	.word	0x240011e8
 8002744:	40000800 	.word	0x40000800

08002748 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800275a:	463b      	mov	r3, r7
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
 8002768:	615a      	str	r2, [r3, #20]
 800276a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <MX_TIM5_Init+0xac>)
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <MX_TIM5_Init+0xb0>)
 8002770:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <MX_TIM5_Init+0xac>)
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MX_TIM5_Init+0xac>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_TIM5_Init+0xac>)
 8002780:	225a      	movs	r2, #90	; 0x5a
 8002782:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <MX_TIM5_Init+0xac>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_TIM5_Init+0xac>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8002790:	4818      	ldr	r0, [pc, #96]	; (80027f4 <MX_TIM5_Init+0xac>)
 8002792:	f00d fd85 	bl	80102a0 <HAL_TIM_PWM_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM5_Init+0x58>
		Error_Handler();
 800279c:	f000 fad2 	bl	8002d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	4811      	ldr	r0, [pc, #68]	; (80027f4 <MX_TIM5_Init+0xac>)
 80027b0:	f00f f80c 	bl	80117cc <HAL_TIMEx_MasterConfigSynchronization>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80027ba:	f000 fac3 	bl	8002d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027be:	2360      	movs	r3, #96	; 0x60
 80027c0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 80027ce:	463b      	mov	r3, r7
 80027d0:	220c      	movs	r2, #12
 80027d2:	4619      	mov	r1, r3
 80027d4:	4807      	ldr	r0, [pc, #28]	; (80027f4 <MX_TIM5_Init+0xac>)
 80027d6:	f00e fa2b 	bl	8010c30 <HAL_TIM_PWM_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80027e0:	f000 fab0 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80027e4:	4803      	ldr	r0, [pc, #12]	; (80027f4 <MX_TIM5_Init+0xac>)
 80027e6:	f000 ffe3 	bl	80037b0 <HAL_TIM_MspPostInit>

}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	24001234 	.word	0x24001234
 80027f8:	40000c00 	.word	0x40000c00

080027fc <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_TIM13_Init+0x40>)
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <MX_TIM13_Init+0x44>)
 8002804:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <MX_TIM13_Init+0x40>)
 8002808:	2263      	movs	r2, #99	; 0x63
 800280a:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_TIM13_Init+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <MX_TIM13_Init+0x40>)
 8002814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002818:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <MX_TIM13_Init+0x40>)
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_TIM13_Init+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_TIM13_Init+0x40>)
 8002828:	f00d fce3 	bl	80101f2 <HAL_TIM_Base_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM13_Init+0x3a>
		Error_Handler();
 8002832:	f000 fa87 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	24001280 	.word	0x24001280
 8002840:	40001c00 	.word	0x40001c00

08002844 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <MX_TIM14_Init+0x40>)
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <MX_TIM14_Init+0x44>)
 800284c:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <MX_TIM14_Init+0x40>)
 8002850:	2263      	movs	r2, #99	; 0x63
 8002852:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <MX_TIM14_Init+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <MX_TIM14_Init+0x40>)
 800285c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002860:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <MX_TIM14_Init+0x40>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <MX_TIM14_Init+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_TIM14_Init+0x40>)
 8002870:	f00d fcbf 	bl	80101f2 <HAL_TIM_Base_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM14_Init+0x3a>
		Error_Handler();
 800287a:	f000 fa63 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	240012cc 	.word	0x240012cc
 8002888:	40002000 	.word	0x40002000

0800288c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <MX_UART4_Init+0x90>)
 8002892:	4a23      	ldr	r2, [pc, #140]	; (8002920 <MX_UART4_Init+0x94>)
 8002894:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <MX_UART4_Init+0x90>)
 8002898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800289c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <MX_UART4_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <MX_UART4_Init+0x90>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <MX_UART4_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <MX_UART4_Init+0x90>)
 80028b2:	220c      	movs	r2, #12
 80028b4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <MX_UART4_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <MX_UART4_Init+0x90>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <MX_UART4_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <MX_UART4_Init+0x90>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <MX_UART4_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80028d4:	4811      	ldr	r0, [pc, #68]	; (800291c <MX_UART4_Init+0x90>)
 80028d6:	f00f f833 	bl	8011940 <HAL_UART_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_UART4_Init+0x58>
		Error_Handler();
 80028e0:	f000 fa30 	bl	8002d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80028e4:	2100      	movs	r1, #0
 80028e6:	480d      	ldr	r0, [pc, #52]	; (800291c <MX_UART4_Init+0x90>)
 80028e8:	f010 f939 	bl	8012b5e <HAL_UARTEx_SetTxFifoThreshold>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80028f2:	f000 fa27 	bl	8002d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80028f6:	2100      	movs	r1, #0
 80028f8:	4808      	ldr	r0, [pc, #32]	; (800291c <MX_UART4_Init+0x90>)
 80028fa:	f010 f96e 	bl	8012bda <HAL_UARTEx_SetRxFifoThreshold>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002904:	f000 fa1e 	bl	8002d44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002908:	4804      	ldr	r0, [pc, #16]	; (800291c <MX_UART4_Init+0x90>)
 800290a:	f010 f8ef 	bl	8012aec <HAL_UARTEx_DisableFifoMode>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002914:	f000 fa16 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	24001570 	.word	0x24001570
 8002920:	40004c00 	.word	0x40004c00

08002924 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 800292a:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <MX_USART6_UART_Init+0x94>)
 800292c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002934:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 800294a:	220c      	movs	r2, #12
 800294c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800296c:	4811      	ldr	r0, [pc, #68]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 800296e:	f00e ffe7 	bl	8011940 <HAL_UART_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002978:	f000 f9e4 	bl	8002d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 800297c:	2100      	movs	r1, #0
 800297e:	480d      	ldr	r0, [pc, #52]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002980:	f010 f8ed 	bl	8012b5e <HAL_UARTEx_SetTxFifoThreshold>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800298a:	f000 f9db 	bl	8002d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 800298e:	2100      	movs	r1, #0
 8002990:	4808      	ldr	r0, [pc, #32]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 8002992:	f010 f922 	bl	8012bda <HAL_UARTEx_SetRxFifoThreshold>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800299c:	f000 f9d2 	bl	8002d44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <MX_USART6_UART_Init+0x90>)
 80029a2:	f010 f8a3 	bl	8012aec <HAL_UARTEx_DisableFifoMode>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 80029ac:	f000 f9ca 	bl	8002d44 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	24001604 	.word	0x24001604
 80029b8:	40011400 	.word	0x40011400

080029bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <MX_DMA_Init+0xbc>)
 80029c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029c8:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <MX_DMA_Init+0xbc>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <MX_DMA_Init+0xbc>)
 80029d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <MX_DMA_Init+0xbc>)
 80029e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <MX_DMA_Init+0xbc>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <MX_DMA_Init+0xbc>)
 80029f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	200b      	movs	r0, #11
 8002a04:	f003 fbb5 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a08:	200b      	movs	r0, #11
 8002a0a:	f003 fbcc 	bl	80061a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	200c      	movs	r0, #12
 8002a14:	f003 fbad 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a18:	200c      	movs	r0, #12
 8002a1a:	f003 fbc4 	bl	80061a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	200d      	movs	r0, #13
 8002a24:	f003 fba5 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002a28:	200d      	movs	r0, #13
 8002a2a:	f003 fbbc 	bl	80061a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	200e      	movs	r0, #14
 8002a34:	f003 fb9d 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002a38:	200e      	movs	r0, #14
 8002a3a:	f003 fbb4 	bl	80061a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	200f      	movs	r0, #15
 8002a44:	f003 fb95 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002a48:	200f      	movs	r0, #15
 8002a4a:	f003 fbac 	bl	80061a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2010      	movs	r0, #16
 8002a54:	f003 fb8d 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a58:	2010      	movs	r0, #16
 8002a5a:	f003 fba4 	bl	80061a6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2046      	movs	r0, #70	; 0x46
 8002a64:	f003 fb85 	bl	8006172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002a68:	2046      	movs	r0, #70	; 0x46
 8002a6a:	f003 fb9c 	bl	80061a6 <HAL_NVIC_EnableIRQ>

}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400

08002a7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002a92:	4ba4      	ldr	r3, [pc, #656]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a98:	4aa2      	ldr	r2, [pc, #648]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa2:	4ba0      	ldr	r3, [pc, #640]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002ab0:	4b9c      	ldr	r3, [pc, #624]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab6:	4a9b      	ldr	r2, [pc, #620]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002ab8:	f043 0320 	orr.w	r3, r3, #32
 8002abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac0:	4b98      	ldr	r3, [pc, #608]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	4b95      	ldr	r3, [pc, #596]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad4:	4a93      	ldr	r2, [pc, #588]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ade:	4b91      	ldr	r3, [pc, #580]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	4b8d      	ldr	r3, [pc, #564]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af2:	4a8c      	ldr	r2, [pc, #560]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afc:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	4a84      	ldr	r2, [pc, #528]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2e:	4a7d      	ldr	r2, [pc, #500]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b38:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4c:	4a75      	ldr	r2, [pc, #468]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <MX_GPIO_Init+0x2a8>)
 8002b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002b64:	2200      	movs	r2, #0
 8002b66:	f241 5104 	movw	r1, #5380	; 0x1504
 8002b6a:	486f      	ldr	r0, [pc, #444]	; (8002d28 <MX_GPIO_Init+0x2ac>)
 8002b6c:	f006 f930 	bl	8008dd0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	f248 0102 	movw	r1, #32770	; 0x8002
 8002b76:	486d      	ldr	r0, [pc, #436]	; (8002d2c <MX_GPIO_Init+0x2b0>)
 8002b78:	f006 f92a 	bl	8008dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2130      	movs	r1, #48	; 0x30
 8002b80:	486b      	ldr	r0, [pc, #428]	; (8002d30 <MX_GPIO_Init+0x2b4>)
 8002b82:	f006 f925 	bl	8008dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2102      	movs	r1, #2
 8002b8a:	486a      	ldr	r0, [pc, #424]	; (8002d34 <MX_GPIO_Init+0x2b8>)
 8002b8c:	f006 f920 	bl	8008dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002b96:	4868      	ldr	r0, [pc, #416]	; (8002d38 <MX_GPIO_Init+0x2bc>)
 8002b98:	f006 f91a 	bl	8008dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	210e      	movs	r1, #14
 8002ba0:	4866      	ldr	r0, [pc, #408]	; (8002d3c <MX_GPIO_Init+0x2c0>)
 8002ba2:	f006 f915 	bl	8008dd0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f240 3101 	movw	r1, #769	; 0x301
 8002bac:	4864      	ldr	r0, [pc, #400]	; (8002d40 <MX_GPIO_Init+0x2c4>)
 8002bae:	f006 f90f 	bl	8008dd0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002bb2:	f241 5304 	movw	r3, #5380	; 0x1504
 8002bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4857      	ldr	r0, [pc, #348]	; (8002d28 <MX_GPIO_Init+0x2ac>)
 8002bcc:	f005 ff40 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002bd0:	f248 0302 	movw	r3, #32770	; 0x8002
 8002bd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4850      	ldr	r0, [pc, #320]	; (8002d2c <MX_GPIO_Init+0x2b0>)
 8002bea:	f005 ff31 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002bee:	2330      	movs	r3, #48	; 0x30
 8002bf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	484a      	ldr	r0, [pc, #296]	; (8002d30 <MX_GPIO_Init+0x2b4>)
 8002c06:	f005 ff23 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4844      	ldr	r0, [pc, #272]	; (8002d34 <MX_GPIO_Init+0x2b8>)
 8002c22:	f005 ff15 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8002c26:	2304      	movs	r3, #4
 8002c28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	483e      	ldr	r0, [pc, #248]	; (8002d34 <MX_GPIO_Init+0x2b8>)
 8002c3a:	f005 ff09 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002c3e:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002c42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	4838      	ldr	r0, [pc, #224]	; (8002d38 <MX_GPIO_Init+0x2bc>)
 8002c58:	f005 fefa 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002c5c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002c60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4831      	ldr	r0, [pc, #196]	; (8002d38 <MX_GPIO_Init+0x2bc>)
 8002c72:	f005 feed 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	482c      	ldr	r0, [pc, #176]	; (8002d3c <MX_GPIO_Init+0x2c0>)
 8002c8a:	f005 fee1 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002c8e:	230e      	movs	r3, #14
 8002c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4825      	ldr	r0, [pc, #148]	; (8002d3c <MX_GPIO_Init+0x2c0>)
 8002ca6:	f005 fed3 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002caa:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002cae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	481a      	ldr	r0, [pc, #104]	; (8002d28 <MX_GPIO_Init+0x2ac>)
 8002cc0:	f005 fec6 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002cc4:	f240 3301 	movw	r3, #769	; 0x301
 8002cc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <MX_GPIO_Init+0x2c4>)
 8002cde:	f005 feb7 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4811      	ldr	r0, [pc, #68]	; (8002d3c <MX_GPIO_Init+0x2c0>)
 8002cf6:	f005 feab 	bl	8008a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	4619      	mov	r1, r3
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_GPIO_Init+0x2b0>)
 8002d18:	f005 fe9a 	bl	8008a50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002d1c:	bf00      	nop
 8002d1e:	3730      	adds	r7, #48	; 0x30
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	58024400 	.word	0x58024400
 8002d28:	58021000 	.word	0x58021000
 8002d2c:	58020000 	.word	0x58020000
 8002d30:	58020800 	.word	0x58020800
 8002d34:	58020400 	.word	0x58020400
 8002d38:	58021400 	.word	0x58021400
 8002d3c:	58021800 	.word	0x58021800
 8002d40:	58020c00 	.word	0x58020c00

08002d44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d4c:	e7fe      	b.n	8002d4c <Error_Handler+0x8>
	...

08002d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_MspInit+0x30>)
 8002d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d5c:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <HAL_MspInit+0x30>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_MspInit+0x30>)
 8002d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	58024400 	.word	0x58024400

08002d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5d      	ldr	r2, [pc, #372]	; (8002f18 <HAL_ADC_MspInit+0x194>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d159      	bne.n	8002e5a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dac:	4a5b      	ldr	r2, [pc, #364]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002dae:	f043 0320 	orr.w	r3, r3, #32
 8002db2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002db6:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dca:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd4:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002de2:	2304      	movs	r3, #4
 8002de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de6:	2303      	movs	r3, #3
 8002de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f107 031c 	add.w	r3, r7, #28
 8002df2:	4619      	mov	r1, r3
 8002df4:	484a      	ldr	r0, [pc, #296]	; (8002f20 <HAL_ADC_MspInit+0x19c>)
 8002df6:	f005 fe2b 	bl	8008a50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002dfc:	4a4a      	ldr	r2, [pc, #296]	; (8002f28 <HAL_ADC_MspInit+0x1a4>)
 8002dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e02:	2209      	movs	r2, #9
 8002e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e12:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e1a:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e22:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e30:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e3c:	4839      	ldr	r0, [pc, #228]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e3e:	f003 f9cd 	bl	80061dc <HAL_DMA_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002e48:	f7ff ff7c 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a35      	ldr	r2, [pc, #212]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_ADC_MspInit+0x1a0>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e58:	e059      	b.n	8002f0e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a33      	ldr	r2, [pc, #204]	; (8002f2c <HAL_ADC_MspInit+0x1a8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d154      	bne.n	8002f0e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_ADC_MspInit+0x198>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ea0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ea4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ea8:	f001 f8b6 	bl	8004018 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002eae:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_ADC_MspInit+0x1b0>)
 8002eb0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002eb4:	2273      	movs	r2, #115	; 0x73
 8002eb6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eca:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eda:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002eea:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ef2:	480f      	ldr	r0, [pc, #60]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002ef4:	f003 f972 	bl	80061dc <HAL_DMA_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002efe:	f7ff ff21 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002f06:	659a      	str	r2, [r3, #88]	; 0x58
 8002f08:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_ADC_MspInit+0x1ac>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f0e:	bf00      	nop
 8002f10:	3730      	adds	r7, #48	; 0x30
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	58020000 	.word	0x58020000
 8002f24:	24000d58 	.word	0x24000d58
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	58026000 	.word	0x58026000
 8002f30:	24000dd0 	.word	0x24000dd0
 8002f34:	400204b8 	.word	0x400204b8

08002f38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0b8      	sub	sp, #224	; 0xe0
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	22b8      	movs	r2, #184	; 0xb8
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f017 ff19 	bl	801ad90 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <HAL_FDCAN_MspInit+0xc4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d145      	bne.n	8002ff4 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002f74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f78:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f008 fb54 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002f8a:	f7ff fedb 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_FDCAN_MspInit+0xc8>)
 8002f90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002f94:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_FDCAN_MspInit+0xc8>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_FDCAN_MspInit+0xc8>)
 8002fa0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_FDCAN_MspInit+0xc8>)
 8002fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb2:	4a13      	ldr	r2, [pc, #76]	; (8003000 <HAL_FDCAN_MspInit+0xc8>)
 8002fb4:	f043 0320 	orr.w	r3, r3, #32
 8002fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_FDCAN_MspInit+0xc8>)
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fca:	23c0      	movs	r3, #192	; 0xc0
 8002fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fe8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fec:	4619      	mov	r1, r3
 8002fee:	4805      	ldr	r0, [pc, #20]	; (8003004 <HAL_FDCAN_MspInit+0xcc>)
 8002ff0:	f005 fd2e 	bl	8008a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002ff4:	bf00      	nop
 8002ff6:	37e0      	adds	r7, #224	; 0xe0
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	4000d400 	.word	0x4000d400
 8003000:	58024400 	.word	0x58024400
 8003004:	58021400 	.word	0x58021400

08003008 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0b8      	sub	sp, #224	; 0xe0
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	22b8      	movs	r2, #184	; 0xb8
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f017 feb1 	bl	801ad90 <memset>
  if(hi2c->Instance==I2C2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_I2C_MspInit+0xd4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d14d      	bne.n	80030d4 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003038:	f04f 0208 	mov.w	r2, #8
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304a:	f107 0310 	add.w	r3, r7, #16
 800304e:	4618      	mov	r0, r3
 8003050:	f008 faec 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800305a:	f7ff fe73 	bl	8002d44 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_I2C_MspInit+0xd8>)
 8003060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_I2C_MspInit+0xd8>)
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_I2C_MspInit+0xd8>)
 8003070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800307c:	2303      	movs	r3, #3
 800307e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003082:	2312      	movs	r3, #18
 8003084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003094:	2304      	movs	r3, #4
 8003096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800309a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800309e:	4619      	mov	r1, r3
 80030a0:	4810      	ldr	r0, [pc, #64]	; (80030e4 <HAL_I2C_MspInit+0xdc>)
 80030a2:	f005 fcd5 	bl	8008a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_I2C_MspInit+0xd8>)
 80030a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ac:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <HAL_I2C_MspInit+0xd8>)
 80030ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_I2C_MspInit+0xd8>)
 80030b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2101      	movs	r1, #1
 80030c8:	2021      	movs	r0, #33	; 0x21
 80030ca:	f003 f852 	bl	8006172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80030ce:	2021      	movs	r0, #33	; 0x21
 80030d0:	f003 f869 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80030d4:	bf00      	nop
 80030d6:	37e0      	adds	r7, #224	; 0xe0
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40005800 	.word	0x40005800
 80030e0:	58024400 	.word	0x58024400
 80030e4:	58021400 	.word	0x58021400

080030e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0ba      	sub	sp, #232	; 0xe8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003100:	f107 0318 	add.w	r3, r7, #24
 8003104:	22b8      	movs	r2, #184	; 0xb8
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f017 fe41 	bl	801ad90 <memset>
  if(hsd->Instance==SDMMC2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5d      	ldr	r2, [pc, #372]	; (8003288 <HAL_SD_MspInit+0x1a0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	f040 80b3 	bne.w	8003280 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800311a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003126:	2300      	movs	r3, #0
 8003128:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800312a:	f107 0318 	add.w	r3, r7, #24
 800312e:	4618      	mov	r0, r3
 8003130:	f008 fa7c 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800313a:	f7ff fe03 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800313e:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_SD_MspInit+0x1a4>)
 8003140:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_SD_MspInit+0x1a4>)
 8003146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800314e:	4b4f      	ldr	r3, [pc, #316]	; (800328c <HAL_SD_MspInit+0x1a4>)
 8003150:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_SD_MspInit+0x1a4>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003162:	4a4a      	ldr	r2, [pc, #296]	; (800328c <HAL_SD_MspInit+0x1a4>)
 8003164:	f043 0308 	orr.w	r3, r3, #8
 8003168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316c:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_SD_MspInit+0x1a4>)
 800316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_SD_MspInit+0x1a4>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003180:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_SD_MspInit+0x1a4>)
 8003182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_SD_MspInit+0x1a4>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80031b0:	230b      	movs	r3, #11
 80031b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4834      	ldr	r0, [pc, #208]	; (8003290 <HAL_SD_MspInit+0x1a8>)
 80031be:	f005 fc47 	bl	8008a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d4:	2303      	movs	r3, #3
 80031d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80031da:	230b      	movs	r3, #11
 80031dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031e4:	4619      	mov	r1, r3
 80031e6:	482a      	ldr	r0, [pc, #168]	; (8003290 <HAL_SD_MspInit+0x1a8>)
 80031e8:	f005 fc32 	bl	8008a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003206:	230b      	movs	r3, #11
 8003208:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800320c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003210:	4619      	mov	r1, r3
 8003212:	4820      	ldr	r0, [pc, #128]	; (8003294 <HAL_SD_MspInit+0x1ac>)
 8003214:	f005 fc1c 	bl	8008a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003232:	230b      	movs	r3, #11
 8003234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800323c:	4619      	mov	r1, r3
 800323e:	4815      	ldr	r0, [pc, #84]	; (8003294 <HAL_SD_MspInit+0x1ac>)
 8003240:	f005 fc06 	bl	8008a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003244:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	2303      	movs	r3, #3
 800325a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800325e:	230a      	movs	r3, #10
 8003260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003264:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003268:	4619      	mov	r1, r3
 800326a:	480a      	ldr	r0, [pc, #40]	; (8003294 <HAL_SD_MspInit+0x1ac>)
 800326c:	f005 fbf0 	bl	8008a50 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	207c      	movs	r0, #124	; 0x7c
 8003276:	f002 ff7c 	bl	8006172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800327a:	207c      	movs	r0, #124	; 0x7c
 800327c:	f002 ff93 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003280:	bf00      	nop
 8003282:	37e8      	adds	r7, #232	; 0xe8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	48022400 	.word	0x48022400
 800328c:	58024400 	.word	0x58024400
 8003290:	58020c00 	.word	0x58020c00
 8003294:	58021800 	.word	0x58021800

08003298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08e      	sub	sp, #56	; 0x38
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a4f      	ldr	r2, [pc, #316]	; (80033f4 <HAL_SPI_MspInit+0x15c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d12e      	bne.n	8003318 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ba:	4b4f      	ldr	r3, [pc, #316]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c0:	4a4d      	ldr	r2, [pc, #308]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032ca:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d8:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032de:	4a46      	ldr	r2, [pc, #280]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e8:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80032ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032f6:	23e0      	movs	r3, #224	; 0xe0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003306:	2305      	movs	r3, #5
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330e:	4619      	mov	r1, r3
 8003310:	483a      	ldr	r0, [pc, #232]	; (80033fc <HAL_SPI_MspInit+0x164>)
 8003312:	f005 fb9d 	bl	8008a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003316:	e068      	b.n	80033ea <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a38      	ldr	r2, [pc, #224]	; (8003400 <HAL_SPI_MspInit+0x168>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12f      	bne.n	8003382 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003328:	4a33      	ldr	r2, [pc, #204]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 800332a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003332:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800335e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003370:	2305      	movs	r3, #5
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003378:	4619      	mov	r1, r3
 800337a:	4822      	ldr	r0, [pc, #136]	; (8003404 <HAL_SPI_MspInit+0x16c>)
 800337c:	f005 fb68 	bl	8008a50 <HAL_GPIO_Init>
}
 8003380:	e033      	b.n	80033ea <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_SPI_MspInit+0x170>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d12e      	bne.n	80033ea <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 800338e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003392:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 800339e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80033ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ba:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_SPI_MspInit+0x160>)
 80033bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80033c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033da:	2306      	movs	r3, #6
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e2:	4619      	mov	r1, r3
 80033e4:	4809      	ldr	r0, [pc, #36]	; (800340c <HAL_SPI_MspInit+0x174>)
 80033e6:	f005 fb33 	bl	8008a50 <HAL_GPIO_Init>
}
 80033ea:	bf00      	nop
 80033ec:	3738      	adds	r7, #56	; 0x38
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40013000 	.word	0x40013000
 80033f8:	58024400 	.word	0x58024400
 80033fc:	58020000 	.word	0x58020000
 8003400:	40003800 	.word	0x40003800
 8003404:	58020400 	.word	0x58020400
 8003408:	40003c00 	.word	0x40003c00
 800340c:	58020800 	.word	0x58020800

08003410 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	; 0x30
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d15d      	bne.n	80034ee <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003432:	4b8e      	ldr	r3, [pc, #568]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 8003434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003438:	4a8c      	ldr	r2, [pc, #560]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003442:	4b8a      	ldr	r3, [pc, #552]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 8003444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b86      	ldr	r3, [pc, #536]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 8003452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003456:	4a85      	ldr	r2, [pc, #532]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003460:	4b82      	ldr	r3, [pc, #520]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 8003462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	2300      	movs	r3, #0
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800347e:	2301      	movs	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	4619      	mov	r1, r3
 8003488:	4879      	ldr	r0, [pc, #484]	; (8003670 <HAL_TIM_PWM_MspInit+0x260>)
 800348a:	f005 fae1 	bl	8008a50 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800348e:	4b79      	ldr	r3, [pc, #484]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 8003490:	4a79      	ldr	r2, [pc, #484]	; (8003678 <HAL_TIM_PWM_MspInit+0x268>)
 8003492:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003494:	4b77      	ldr	r3, [pc, #476]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 8003496:	2214      	movs	r2, #20
 8003498:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a0:	4b74      	ldr	r3, [pc, #464]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80034a6:	4b73      	ldr	r3, [pc, #460]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ac:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ae:	4b71      	ldr	r3, [pc, #452]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034b4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034b6:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034bc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80034be:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80034c4:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ca:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80034d0:	4868      	ldr	r0, [pc, #416]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034d2:	f002 fe83 	bl	80061dc <HAL_DMA_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80034dc:	f7ff fc32 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a64      	ldr	r2, [pc, #400]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e6:	4a63      	ldr	r2, [pc, #396]	; (8003674 <HAL_TIM_PWM_MspInit+0x264>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80034ec:	e119      	b.n	8003722 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a62      	ldr	r2, [pc, #392]	; (800367c <HAL_TIM_PWM_MspInit+0x26c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d16d      	bne.n	80035d4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034f8:	4b5c      	ldr	r3, [pc, #368]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 80034fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fe:	4a5b      	ldr	r2, [pc, #364]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003508:	4b58      	ldr	r3, [pc, #352]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 800350a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003516:	4b5a      	ldr	r3, [pc, #360]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003518:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_TIM_PWM_MspInit+0x274>)
 800351a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 800351e:	2218      	movs	r2, #24
 8003520:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003524:	2240      	movs	r2, #64	; 0x40
 8003526:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	4b55      	ldr	r3, [pc, #340]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003536:	4b52      	ldr	r3, [pc, #328]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800353c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800353e:	4b50      	ldr	r3, [pc, #320]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003540:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003544:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003546:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003548:	2200      	movs	r2, #0
 800354a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 800354e:	2200      	movs	r2, #0
 8003550:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003552:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003554:	2200      	movs	r2, #0
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003558:	4849      	ldr	r0, [pc, #292]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 800355a:	f002 fe3f 	bl	80061dc <HAL_DMA_Init>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003564:	f7ff fbee 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a45      	ldr	r2, [pc, #276]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
 800356e:	4a44      	ldr	r2, [pc, #272]	; (8003680 <HAL_TIM_PWM_MspInit+0x270>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003574:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 8003576:	4a45      	ldr	r2, [pc, #276]	; (800368c <HAL_TIM_PWM_MspInit+0x27c>)
 8003578:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800357a:	4b43      	ldr	r3, [pc, #268]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 800357c:	2217      	movs	r2, #23
 800357e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003580:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 800358e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003592:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003594:	4b3c      	ldr	r3, [pc, #240]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 8003596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800359c:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 800359e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035a2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b0:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80035b6:	4834      	ldr	r0, [pc, #208]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 80035b8:	f002 fe10 	bl	80061dc <HAL_DMA_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80035c2:	f7ff fbbf 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
 80035cc:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <HAL_TIM_PWM_MspInit+0x278>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035d2:	e0a6      	b.n	8003722 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2d      	ldr	r2, [pc, #180]	; (8003690 <HAL_TIM_PWM_MspInit+0x280>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d15e      	bne.n	800369c <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 80035e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035e4:	4a21      	ldr	r2, [pc, #132]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_TIM_PWM_MspInit+0x25c>)
 80035f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 80035fe:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_TIM_PWM_MspInit+0x288>)
 8003600:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003604:	221f      	movs	r2, #31
 8003606:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003608:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003614:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 800361e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003622:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800362a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003632:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003634:	2200      	movs	r2, #0
 8003636:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 800363a:	2200      	movs	r2, #0
 800363c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800363e:	4815      	ldr	r0, [pc, #84]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003640:	f002 fdcc 	bl	80061dc <HAL_DMA_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800364a:	f7ff fb7b 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
 8003654:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <HAL_TIM_PWM_MspInit+0x284>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	2100      	movs	r1, #0
 800365e:	201e      	movs	r0, #30
 8003660:	f002 fd87 	bl	8006172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003664:	201e      	movs	r0, #30
 8003666:	f002 fd9e 	bl	80061a6 <HAL_NVIC_EnableIRQ>
}
 800366a:	e05a      	b.n	8003722 <HAL_TIM_PWM_MspInit+0x312>
 800366c:	58024400 	.word	0x58024400
 8003670:	58020000 	.word	0x58020000
 8003674:	24001318 	.word	0x24001318
 8003678:	40020028 	.word	0x40020028
 800367c:	40000400 	.word	0x40000400
 8003680:	24001390 	.word	0x24001390
 8003684:	40020058 	.word	0x40020058
 8003688:	24001408 	.word	0x24001408
 800368c:	40020070 	.word	0x40020070
 8003690:	40000800 	.word	0x40000800
 8003694:	24001480 	.word	0x24001480
 8003698:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <HAL_TIM_PWM_MspInit+0x31c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d13d      	bne.n	8003722 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_TIM_PWM_MspInit+0x320>)
 80036a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_TIM_PWM_MspInit+0x320>)
 80036ae:	f043 0308 	orr.w	r3, r3, #8
 80036b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_TIM_PWM_MspInit+0x320>)
 80036b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036c6:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_TIM_PWM_MspInit+0x328>)
 80036c8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80036ca:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036cc:	223a      	movs	r2, #58	; 0x3a
 80036ce:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d0:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d6:	4b17      	ldr	r3, [pc, #92]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036d8:	2200      	movs	r2, #0
 80036da:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ea:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036f2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 8003702:	2200      	movs	r2, #0
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003706:	480b      	ldr	r0, [pc, #44]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 8003708:	f002 fd68 	bl	80061dc <HAL_DMA_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003712:	f7ff fb17 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
 800371c:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_TIM_PWM_MspInit+0x324>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003722:	bf00      	nop
 8003724:	3730      	adds	r7, #48	; 0x30
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40000c00 	.word	0x40000c00
 8003730:	58024400 	.word	0x58024400
 8003734:	240014f8 	.word	0x240014f8
 8003738:	40020040 	.word	0x40020040

0800373c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_TIM_Base_MspInit+0x68>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10f      	bne.n	800376e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800376c:	e013      	b.n	8003796 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <HAL_TIM_Base_MspInit+0x70>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10e      	bne.n	8003796 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_TIM_Base_MspInit+0x6c>)
 800377a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_TIM_Base_MspInit+0x6c>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_TIM_Base_MspInit+0x6c>)
 800378a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40001c00 	.word	0x40001c00
 80037a8:	58024400 	.word	0x58024400
 80037ac:	40002000 	.word	0x40002000

080037b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 031c 	add.w	r3, r7, #28
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d120      	bne.n	8003814 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	4b52      	ldr	r3, [pc, #328]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 80037d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d8:	4a50      	ldr	r2, [pc, #320]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037e2:	4b4e      	ldr	r3, [pc, #312]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 80037e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037fa:	2302      	movs	r3, #2
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003802:	2301      	movs	r3, #1
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003806:	f107 031c 	add.w	r3, r7, #28
 800380a:	4619      	mov	r1, r3
 800380c:	4844      	ldr	r0, [pc, #272]	; (8003920 <HAL_TIM_MspPostInit+0x170>)
 800380e:	f005 f91f 	bl	8008a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003812:	e07f      	b.n	8003914 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_TIM_MspPostInit+0x174>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d11f      	bne.n	800385e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 8003820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003824:	4a3d      	ldr	r2, [pc, #244]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 8003830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800383c:	2330      	movs	r3, #48	; 0x30
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003844:	2302      	movs	r3, #2
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800384c:	2302      	movs	r3, #2
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4832      	ldr	r0, [pc, #200]	; (8003920 <HAL_TIM_MspPostInit+0x170>)
 8003858:	f005 f8fa 	bl	8008a50 <HAL_GPIO_Init>
}
 800385c:	e05a      	b.n	8003914 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a31      	ldr	r2, [pc, #196]	; (8003928 <HAL_TIM_MspPostInit+0x178>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d131      	bne.n	80038cc <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 800386a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003878:	4b28      	ldr	r3, [pc, #160]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003886:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800388a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003894:	2300      	movs	r3, #0
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003898:	2302      	movs	r3, #2
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389c:	f107 031c 	add.w	r3, r7, #28
 80038a0:	4619      	mov	r1, r3
 80038a2:	4822      	ldr	r0, [pc, #136]	; (800392c <HAL_TIM_MspPostInit+0x17c>)
 80038a4:	f005 f8d4 	bl	8008a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80038a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038b2:	2302      	movs	r3, #2
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038ba:	2302      	movs	r3, #2
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4819      	ldr	r0, [pc, #100]	; (800392c <HAL_TIM_MspPostInit+0x17c>)
 80038c6:	f005 f8c3 	bl	8008a50 <HAL_GPIO_Init>
}
 80038ca:	e023      	b.n	8003914 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_TIM_MspPostInit+0x180>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d11e      	bne.n	8003914 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 80038d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_TIM_MspPostInit+0x16c>)
 80038e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038f4:	2308      	movs	r3, #8
 80038f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f8:	2302      	movs	r3, #2
 80038fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038fc:	2302      	movs	r3, #2
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003904:	2302      	movs	r3, #2
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003908:	f107 031c 	add.w	r3, r7, #28
 800390c:	4619      	mov	r1, r3
 800390e:	4809      	ldr	r0, [pc, #36]	; (8003934 <HAL_TIM_MspPostInit+0x184>)
 8003910:	f005 f89e 	bl	8008a50 <HAL_GPIO_Init>
}
 8003914:	bf00      	nop
 8003916:	3730      	adds	r7, #48	; 0x30
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	58024400 	.word	0x58024400
 8003920:	58020400 	.word	0x58020400
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	58020c00 	.word	0x58020c00
 8003930:	40000c00 	.word	0x40000c00
 8003934:	58020000 	.word	0x58020000

08003938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0ba      	sub	sp, #232	; 0xe8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003950:	f107 0318 	add.w	r3, r7, #24
 8003954:	22b8      	movs	r2, #184	; 0xb8
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f017 fa19 	bl	801ad90 <memset>
  if(huart->Instance==UART4)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a4d      	ldr	r2, [pc, #308]	; (8003a98 <HAL_UART_MspInit+0x160>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d147      	bne.n	80039f8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003968:	f04f 0202 	mov.w	r2, #2
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397a:	f107 0318 	add.w	r3, r7, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f007 fe54 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800398a:	f7ff f9db 	bl	8002d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003994:	4a41      	ldr	r2, [pc, #260]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800399a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_UART_MspInit+0x164>)
 80039a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ac:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <HAL_UART_MspInit+0x164>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b2:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <HAL_UART_MspInit+0x164>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039bc:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_UART_MspInit+0x164>)
 80039be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039e4:	2308      	movs	r3, #8
 80039e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ee:	4619      	mov	r1, r3
 80039f0:	482b      	ldr	r0, [pc, #172]	; (8003aa0 <HAL_UART_MspInit+0x168>)
 80039f2:	f005 f82d 	bl	8008a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80039f6:	e04a      	b.n	8003a8e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_UART_MspInit+0x16c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d145      	bne.n	8003a8e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003a02:	f04f 0201 	mov.w	r2, #1
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a14:	f107 0318 	add.w	r3, r7, #24
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f007 fe07 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003a24:	f7ff f98e 	bl	8002d44 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003a4e:	f043 0304 	orr.w	r3, r3, #4
 8003a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_UART_MspInit+0x164>)
 8003a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a64:	23c0      	movs	r3, #192	; 0xc0
 8003a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003a7c:	2307      	movs	r3, #7
 8003a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a82:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4807      	ldr	r0, [pc, #28]	; (8003aa8 <HAL_UART_MspInit+0x170>)
 8003a8a:	f004 ffe1 	bl	8008a50 <HAL_GPIO_Init>
}
 8003a8e:	bf00      	nop
 8003a90:	37e8      	adds	r7, #232	; 0xe8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40004c00 	.word	0x40004c00
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	58020400 	.word	0x58020400
 8003aa4:	40011400 	.word	0x40011400
 8003aa8:	58020800 	.word	0x58020800

08003aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <NMI_Handler+0x4>

08003ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <HardFault_Handler+0x4>

08003ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <MemManage_Handler+0x4>

08003abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac2:	e7fe      	b.n	8003ac2 <BusFault_Handler+0x4>

08003ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <UsageFault_Handler+0x4>

08003aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003af8:	f000 fa4a 	bl	8003f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <DMA1_Stream0_IRQHandler+0x10>)
 8003b06:	f003 f92d 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	24001480 	.word	0x24001480

08003b14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <DMA1_Stream1_IRQHandler+0x10>)
 8003b1a:	f003 f923 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	24001318 	.word	0x24001318

08003b28 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <DMA1_Stream2_IRQHandler+0x10>)
 8003b2e:	f003 f919 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	240014f8 	.word	0x240014f8

08003b3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <DMA1_Stream3_IRQHandler+0x10>)
 8003b42:	f003 f90f 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	24001390 	.word	0x24001390

08003b50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA1_Stream4_IRQHandler+0x10>)
 8003b56:	f003 f905 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	24001408 	.word	0x24001408

08003b64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <DMA1_Stream5_IRQHandler+0x10>)
 8003b6a:	f003 f8fb 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	24000d58 	.word	0x24000d58

08003b78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <TIM4_IRQHandler+0x10>)
 8003b7e:	f00c ff37 	bl	80109f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	240011e8 	.word	0x240011e8

08003b8c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <I2C2_EV_IRQHandler+0x10>)
 8003b92:	f005 f9c7 	bl	8008f24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	24000ee8 	.word	0x24000ee8

08003ba0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA2_Stream7_IRQHandler+0x10>)
 8003ba6:	f003 f8dd 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	24000dd0 	.word	0x24000dd0

08003bb4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <OTG_HS_IRQHandler+0x10>)
 8003bba:	f005 fbbd 	bl	8009338 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	24002dc4 	.word	0x24002dc4

08003bc8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <SDMMC2_IRQHandler+0x10>)
 8003bce:	f00a fb83 	bl	800e2d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	24000f3c 	.word	0x24000f3c

08003bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return 1;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_kill>:

int _kill(int pid, int sig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bf6:	f017 f893 	bl	801ad20 <__errno>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2216      	movs	r2, #22
 8003bfe:	601a      	str	r2, [r3, #0]
  return -1;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <_exit>:

void _exit (int status)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ffe7 	bl	8003bec <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c1e:	e7fe      	b.n	8003c1e <_exit+0x12>

08003c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e00a      	b.n	8003c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c32:	f3af 8000 	nop.w
 8003c36:	4601      	mov	r1, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	60ba      	str	r2, [r7, #8]
 8003c3e:	b2ca      	uxtb	r2, r1
 8003c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	dbf0      	blt.n	8003c32 <_read+0x12>
  }

  return len;
 8003c50:	687b      	ldr	r3, [r7, #4]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e009      	b.n	8003c80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	60ba      	str	r2, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	dbf1      	blt.n	8003c6c <_write+0x12>
  }
  return len;
 8003c88:	687b      	ldr	r3, [r7, #4]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_close>:

int _close(int file)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cba:	605a      	str	r2, [r3, #4]
  return 0;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <_isatty>:

int _isatty(int file)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cd2:	2301      	movs	r3, #1
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d04:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <_sbrk+0x5c>)
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <_sbrk+0x60>)
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <_sbrk+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <_sbrk+0x64>)
 8003d1a:	4a12      	ldr	r2, [pc, #72]	; (8003d64 <_sbrk+0x68>)
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <_sbrk+0x64>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d207      	bcs.n	8003d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d2c:	f016 fff8 	bl	801ad20 <__errno>
 8003d30:	4603      	mov	r3, r0
 8003d32:	220c      	movs	r2, #12
 8003d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	e009      	b.n	8003d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <_sbrk+0x64>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <_sbrk+0x64>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <_sbrk+0x64>)
 8003d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	24050000 	.word	0x24050000
 8003d5c:	00000800 	.word	0x00000800
 8003d60:	24001698 	.word	0x24001698
 8003d64:	24003500 	.word	0x24003500

08003d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d6c:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <SystemInit+0xd0>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	4a31      	ldr	r2, [pc, #196]	; (8003e38 <SystemInit+0xd0>)
 8003d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d7c:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <SystemInit+0xd4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d807      	bhi.n	8003d98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d88:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <SystemInit+0xd4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 030f 	bic.w	r3, r3, #15
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <SystemInit+0xd4>)
 8003d92:	f043 0307 	orr.w	r3, r3, #7
 8003d96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d98:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <SystemInit+0xd8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <SystemInit+0xd8>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <SystemInit+0xd8>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <SystemInit+0xd8>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4924      	ldr	r1, [pc, #144]	; (8003e40 <SystemInit+0xd8>)
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <SystemInit+0xdc>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <SystemInit+0xd4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <SystemInit+0xd4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 030f 	bic.w	r3, r3, #15
 8003dca:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <SystemInit+0xd4>)
 8003dcc:	f043 0307 	orr.w	r3, r3, #7
 8003dd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <SystemInit+0xd8>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003dd8:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <SystemInit+0xd8>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <SystemInit+0xd8>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <SystemInit+0xd8>)
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <SystemInit+0xe0>)
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <SystemInit+0xd8>)
 8003dec:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <SystemInit+0xe4>)
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <SystemInit+0xd8>)
 8003df2:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <SystemInit+0xe8>)
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <SystemInit+0xd8>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <SystemInit+0xd8>)
 8003dfe:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <SystemInit+0xe8>)
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <SystemInit+0xd8>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <SystemInit+0xd8>)
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <SystemInit+0xe8>)
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <SystemInit+0xd8>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <SystemInit+0xd8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <SystemInit+0xd8>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <SystemInit+0xd8>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <SystemInit+0xec>)
 8003e28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00
 8003e3c:	52002000 	.word	0x52002000
 8003e40:	58024400 	.word	0x58024400
 8003e44:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e48:	02020200 	.word	0x02020200
 8003e4c:	01ff0000 	.word	0x01ff0000
 8003e50:	01010280 	.word	0x01010280
 8003e54:	52004000 	.word	0x52004000

08003e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e5c:	f7ff ff84 	bl	8003d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e60:	480c      	ldr	r0, [pc, #48]	; (8003e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e62:	490d      	ldr	r1, [pc, #52]	; (8003e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e68:	e002      	b.n	8003e70 <LoopCopyDataInit>

08003e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6e:	3304      	adds	r3, #4

08003e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e74:	d3f9      	bcc.n	8003e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e78:	4c0a      	ldr	r4, [pc, #40]	; (8003ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e7c:	e001      	b.n	8003e82 <LoopFillZerobss>

08003e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e80:	3204      	adds	r2, #4

08003e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e84:	d3fb      	bcc.n	8003e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e86:	f016 ff51 	bl	801ad2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e8a:	f7fd fb6f 	bl	800156c <main>
  bx  lr
 8003e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e90:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e98:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8003e9c:	08020244 	.word	0x08020244
  ldr r2, =_sbss
 8003ea0:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8003ea4:	24003500 	.word	0x24003500

08003ea8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ea8:	e7fe      	b.n	8003ea8 <ADC3_IRQHandler>
	...

08003eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	f002 f952 	bl	800615c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eb8:	f007 f9e2 	bl	800b280 <HAL_RCC_GetSysClockFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_Init+0x68>)
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	4913      	ldr	r1, [pc, #76]	; (8003f18 <HAL_Init+0x6c>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_Init+0x68>)
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <HAL_Init+0x6c>)
 8003ee0:	5cd3      	ldrb	r3, [r2, r3]
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <HAL_Init+0x70>)
 8003eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ef0:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <HAL_Init+0x74>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ef6:	200f      	movs	r0, #15
 8003ef8:	f000 f814 	bl	8003f24 <HAL_InitTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e002      	b.n	8003f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f06:	f7fe ff23 	bl	8002d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	58024400 	.word	0x58024400
 8003f18:	0801f8fc 	.word	0x0801f8fc
 8003f1c:	24000004 	.word	0x24000004
 8003f20:	24000000 	.word	0x24000000

08003f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f2c:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_InitTick+0x60>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e021      	b.n	8003f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <HAL_InitTick+0x64>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_InitTick+0x60>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	4619      	mov	r1, r3
 8003f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f002 f937 	bl	80061c2 <HAL_SYSTICK_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00e      	b.n	8003f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b0f      	cmp	r3, #15
 8003f62:	d80a      	bhi.n	8003f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f64:	2200      	movs	r2, #0
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	f002 f901 	bl	8006172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f70:	4a06      	ldr	r2, [pc, #24]	; (8003f8c <HAL_InitTick+0x68>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	2400000c 	.word	0x2400000c
 8003f88:	24000000 	.word	0x24000000
 8003f8c:	24000008 	.word	0x24000008

08003f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_IncTick+0x20>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_IncTick+0x24>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_IncTick+0x24>)
 8003fa2:	6013      	str	r3, [r2, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	2400000c 	.word	0x2400000c
 8003fb4:	2400169c 	.word	0x2400169c

08003fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return uwTick;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_GetTick+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	2400169c 	.word	0x2400169c

08003fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7ff ffee 	bl	8003fb8 <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d005      	beq.n	8003ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_Delay+0x44>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ff6:	bf00      	nop
 8003ff8:	f7ff ffde 	bl	8003fb8 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d8f7      	bhi.n	8003ff8 <HAL_Delay+0x28>
  {
  }
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	2400000c 	.word	0x2400000c

08004018 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	4904      	ldr	r1, [pc, #16]	; (8004040 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	58000400 	.word	0x58000400

08004044 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3360      	adds	r3, #96	; 0x60
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <LL_ADC_SetOffset+0x60>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10b      	bne.n	80040e8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80040e6:	e00b      	b.n	8004100 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	58026000 	.word	0x58026000

08004110 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3360      	adds	r3, #96	; 0x60
 800411e:	461a      	mov	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	611a      	str	r2, [r3, #16]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3360      	adds	r3, #96	; 0x60
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	431a      	orrs	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	601a      	str	r2, [r3, #0]
  }
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	58026000 	.word	0x58026000

080041b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <LL_ADC_SetOffsetSaturation+0x40>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d10e      	bne.n	80041e6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3360      	adds	r3, #96	; 0x60
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	58026000 	.word	0x58026000

080041f8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <LL_ADC_SetOffsetSign+0x40>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10e      	bne.n	800422a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3360      	adds	r3, #96	; 0x60
 8004210:	461a      	mov	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	431a      	orrs	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	58026000 	.word	0x58026000

0800423c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3360      	adds	r3, #96	; 0x60
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a0c      	ldr	r2, [pc, #48]	; (800428c <LL_ADC_SetOffsetState+0x50>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800426e:	e007      	b.n	8004280 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	58026000 	.word	0x58026000

08004290 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b087      	sub	sp, #28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3330      	adds	r3, #48	; 0x30
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	4413      	add	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	211f      	movs	r1, #31
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	401a      	ands	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	f003 011f 	and.w	r1, r3, #31
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3314      	adds	r3, #20
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0e5b      	lsrs	r3, r3, #25
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	4413      	add	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0d1b      	lsrs	r3, r3, #20
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2107      	movs	r1, #7
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	0d1b      	lsrs	r3, r3, #20
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	431a      	orrs	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <LL_ADC_SetChannelSingleDiff+0x78>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d115      	bne.n	80043a4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004384:	43db      	mvns	r3, r3
 8004386:	401a      	ands	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0318 	and.w	r3, r3, #24
 800438e:	4914      	ldr	r1, [pc, #80]	; (80043e0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004390:	40d9      	lsrs	r1, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	400b      	ands	r3, r1
 8004396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800439a:	431a      	orrs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80043a2:	e014      	b.n	80043ce <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b0:	43db      	mvns	r3, r3
 80043b2:	401a      	ands	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0318 	and.w	r3, r3, #24
 80043ba:	4909      	ldr	r1, [pc, #36]	; (80043e0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80043bc:	40d9      	lsrs	r1, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	400b      	ands	r3, r1
 80043c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	58026000 	.word	0x58026000
 80043e0:	000fffff 	.word	0x000fffff

080043e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 031f 	and.w	r3, r3, #31
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <LL_ADC_DisableDeepPowerDown+0x20>)
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6093      	str	r3, [r2, #8]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	5fffffc0 	.word	0x5fffffc0

08004440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004454:	d101      	bne.n	800445a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <LL_ADC_EnableInternalRegulator+0x24>)
 8004476:	4013      	ands	r3, r2
 8004478:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	6fffffc0 	.word	0x6fffffc0

08004490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a4:	d101      	bne.n	80044aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <LL_ADC_Enable+0x24>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	7fffffc0 	.word	0x7fffffc0

080044e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <LL_ADC_Disable+0x24>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	f043 0202 	orr.w	r2, r3, #2
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	7fffffc0 	.word	0x7fffffc0

08004508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <LL_ADC_IsEnabled+0x18>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <LL_ADC_IsEnabled+0x1a>
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d101      	bne.n	8004546 <LL_ADC_IsDisableOngoing+0x18>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_ADC_IsDisableOngoing+0x1a>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <LL_ADC_REG_StartConversion+0x24>)
 8004562:	4013      	ands	r3, r2
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	7fffffc0 	.word	0x7fffffc0

0800457c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <LL_ADC_REG_StopConversion+0x24>)
 800458a:	4013      	ands	r3, r2
 800458c:	f043 0210 	orr.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	7fffffc0 	.word	0x7fffffc0

080045a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d101      	bne.n	80045bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <LL_ADC_INJ_StopConversion+0x24>)
 80045da:	4013      	ands	r3, r2
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	7fffffc0 	.word	0x7fffffc0

080045f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d101      	bne.n	800460c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004628:	2300      	movs	r3, #0
 800462a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e1ee      	b.n	8004a14 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fe fb9d 	bl	8002d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff feef 	bl	8004440 <LL_ADC_IsDeepPowerDownEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d004      	beq.n	8004672 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fed5 	bl	800441c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff0a 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d114      	bne.n	80046ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff feee 	bl	8004468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800468c:	4b8e      	ldr	r3, [pc, #568]	; (80048c8 <HAL_ADC_Init+0x2ac>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	4a8e      	ldr	r2, [pc, #568]	; (80048cc <HAL_ADC_Init+0x2b0>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	3301      	adds	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800469e:	e002      	b.n	80046a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f9      	bne.n	80046a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff feed 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	f043 0210 	orr.w	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046cc:	f043 0201 	orr.w	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff61 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 80046e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 8188 	bne.w	8004a02 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 8184 	bne.w	8004a02 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004702:	f043 0202 	orr.w	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fefa 	bl	8004508 <LL_ADC_IsEnabled>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d136      	bne.n	8004788 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a6c      	ldr	r2, [pc, #432]	; (80048d0 <HAL_ADC_Init+0x2b4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_ADC_Init+0x112>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a6a      	ldr	r2, [pc, #424]	; (80048d4 <HAL_ADC_Init+0x2b8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10e      	bne.n	800474c <HAL_ADC_Init+0x130>
 800472e:	4868      	ldr	r0, [pc, #416]	; (80048d0 <HAL_ADC_Init+0x2b4>)
 8004730:	f7ff feea 	bl	8004508 <LL_ADC_IsEnabled>
 8004734:	4604      	mov	r4, r0
 8004736:	4867      	ldr	r0, [pc, #412]	; (80048d4 <HAL_ADC_Init+0x2b8>)
 8004738:	f7ff fee6 	bl	8004508 <LL_ADC_IsEnabled>
 800473c:	4603      	mov	r3, r0
 800473e:	4323      	orrs	r3, r4
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e008      	b.n	800475e <HAL_ADC_Init+0x142>
 800474c:	4862      	ldr	r0, [pc, #392]	; (80048d8 <HAL_ADC_Init+0x2bc>)
 800474e:	f7ff fedb 	bl	8004508 <LL_ADC_IsEnabled>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a5a      	ldr	r2, [pc, #360]	; (80048d0 <HAL_ADC_Init+0x2b4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_ADC_Init+0x15a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_ADC_Init+0x2b8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_ADC_Init+0x15e>
 8004776:	4a59      	ldr	r2, [pc, #356]	; (80048dc <HAL_ADC_Init+0x2c0>)
 8004778:	e000      	b.n	800477c <HAL_ADC_Init+0x160>
 800477a:	4a59      	ldr	r2, [pc, #356]	; (80048e0 <HAL_ADC_Init+0x2c4>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f7ff fc5e 	bl	8004044 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a52      	ldr	r2, [pc, #328]	; (80048d8 <HAL_ADC_Init+0x2bc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d129      	bne.n	80047e6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7e5b      	ldrb	r3, [r3, #25]
 8004796:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800479c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80047a2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d013      	beq.n	80047d4 <HAL_ADC_Init+0x1b8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d00d      	beq.n	80047d0 <HAL_ADC_Init+0x1b4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b1c      	cmp	r3, #28
 80047ba:	d007      	beq.n	80047cc <HAL_ADC_Init+0x1b0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b18      	cmp	r3, #24
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_Init+0x1ac>
 80047c4:	2318      	movs	r3, #24
 80047c6:	e006      	b.n	80047d6 <HAL_ADC_Init+0x1ba>
 80047c8:	2300      	movs	r3, #0
 80047ca:	e004      	b.n	80047d6 <HAL_ADC_Init+0x1ba>
 80047cc:	2310      	movs	r3, #16
 80047ce:	e002      	b.n	80047d6 <HAL_ADC_Init+0x1ba>
 80047d0:	2308      	movs	r3, #8
 80047d2:	e000      	b.n	80047d6 <HAL_ADC_Init+0x1ba>
 80047d4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80047d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	e00e      	b.n	8004804 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7e5b      	ldrb	r3, [r3, #25]
 80047ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d106      	bne.n	800481c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	3b01      	subs	r3, #1
 8004814:	045b      	lsls	r3, r3, #17
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4313      	orrs	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a26      	ldr	r2, [pc, #152]	; (80048d8 <HAL_ADC_Init+0x2bc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d115      	bne.n	800486e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <HAL_ADC_Init+0x2c8>)
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	430b      	orrs	r3, r1
 8004854:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	611a      	str	r2, [r3, #16]
 800486c:	e009      	b.n	8004882 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <HAL_ADC_Init+0x2cc>)
 8004876:	4013      	ands	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	69b9      	ldr	r1, [r7, #24]
 800487e:	430b      	orrs	r3, r1
 8004880:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fe8c 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 800488c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff feae 	bl	80045f4 <LL_ADC_INJ_IsConversionOngoing>
 8004898:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f040 808e 	bne.w	80049be <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 808a 	bne.w	80049be <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_ADC_Init+0x2bc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d11b      	bne.n	80048ec <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7e1b      	ldrb	r3, [r3, #24]
 80048b8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048c0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e018      	b.n	80048fa <HAL_ADC_Init+0x2de>
 80048c8:	24000000 	.word	0x24000000
 80048cc:	053e2d63 	.word	0x053e2d63
 80048d0:	40022000 	.word	0x40022000
 80048d4:	40022100 	.word	0x40022100
 80048d8:	58026000 	.word	0x58026000
 80048dc:	40022300 	.word	0x40022300
 80048e0:	58026300 	.word	0x58026300
 80048e4:	fff04007 	.word	0xfff04007
 80048e8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7e1b      	ldrb	r3, [r3, #24]
 80048f0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_ADC_Init+0x400>)
 8004902:	4013      	ands	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	69b9      	ldr	r1, [r7, #24]
 800490a:	430b      	orrs	r3, r1
 800490c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004914:	2b01      	cmp	r3, #1
 8004916:	d137      	bne.n	8004988 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3f      	ldr	r2, [pc, #252]	; (8004a20 <HAL_ADC_Init+0x404>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d116      	bne.n	8004956 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_ADC_Init+0x408>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004940:	4311      	orrs	r1, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004946:	430a      	orrs	r2, r1
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	611a      	str	r2, [r3, #16]
 8004954:	e020      	b.n	8004998 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <HAL_ADC_Init+0x40c>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004964:	3a01      	subs	r2, #1
 8004966:	0411      	lsls	r1, r2, #16
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004978:	430a      	orrs	r2, r1
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	611a      	str	r2, [r3, #16]
 8004986:	e007      	b.n	8004998 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_ADC_Init+0x404>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d002      	beq.n	80049be <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 f909 	bl	8005bd0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10c      	bne.n	80049e0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f023 010f 	bic.w	r1, r3, #15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	1e5a      	subs	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
 80049de:	e007      	b.n	80049f0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 020f 	bic.w	r2, r2, #15
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	661a      	str	r2, [r3, #96]	; 0x60
 8004a00:	e007      	b.n	8004a12 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a06:	f043 0210 	orr.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3724      	adds	r7, #36	; 0x24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}
 8004a1c:	ffffbffc 	.word	0xffffbffc
 8004a20:	58026000 	.word	0x58026000
 8004a24:	fc00f81f 	.word	0xfc00f81f
 8004a28:	fc00f81e 	.word	0xfc00f81e

08004a2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <HAL_ADC_Start+0x180>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADC_Start+0x1c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a5b      	ldr	r2, [pc, #364]	; (8004bb0 <HAL_ADC_Start+0x184>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_Start+0x20>
 8004a48:	4b5a      	ldr	r3, [pc, #360]	; (8004bb4 <HAL_ADC_Start+0x188>)
 8004a4a:	e000      	b.n	8004a4e <HAL_ADC_Start+0x22>
 8004a4c:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <HAL_ADC_Start+0x18c>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fcc8 	bl	80043e4 <LL_ADC_GetMultimode>
 8004a54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fda2 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 809a 	bne.w	8004b9c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_Start+0x4a>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e095      	b.n	8004ba2 <HAL_ADC_Start+0x176>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 ffbc 	bl	80059fc <ADC_Enable>
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 8081 	bne.w	8004b92 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a94:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <HAL_ADC_Start+0x190>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a42      	ldr	r2, [pc, #264]	; (8004bb0 <HAL_ADC_Start+0x184>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d002      	beq.n	8004ab0 <HAL_ADC_Start+0x84>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e000      	b.n	8004ab2 <HAL_ADC_Start+0x86>
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <HAL_ADC_Start+0x180>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d002      	beq.n	8004ac0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ade:	f023 0206 	bic.w	r2, r3, #6
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	665a      	str	r2, [r3, #100]	; 0x64
 8004ae6:	e002      	b.n	8004aee <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	221c      	movs	r2, #28
 8004af4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <HAL_ADC_Start+0x184>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d002      	beq.n	8004b0e <HAL_ADC_Start+0xe2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	e000      	b.n	8004b10 <HAL_ADC_Start+0xe4>
 8004b0e:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_ADC_Start+0x180>)
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d008      	beq.n	8004b2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d002      	beq.n	8004b2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b09      	cmp	r3, #9
 8004b28:	d114      	bne.n	8004b54 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fd01 	bl	8004554 <LL_ADC_REG_StartConversion>
 8004b52:	e025      	b.n	8004ba0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <HAL_ADC_Start+0x184>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d002      	beq.n	8004b70 <HAL_ADC_Start+0x144>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	e000      	b.n	8004b72 <HAL_ADC_Start+0x146>
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <HAL_ADC_Start+0x180>)
 8004b72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00f      	beq.n	8004ba0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	661a      	str	r2, [r3, #96]	; 0x60
 8004b90:	e006      	b.n	8004ba0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004b9a:	e001      	b.n	8004ba0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40022100 	.word	0x40022100
 8004bb4:	40022300 	.word	0x40022300
 8004bb8:	58026300 	.word	0x58026300
 8004bbc:	fffff0fe 	.word	0xfffff0fe

08004bc0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_Stop+0x16>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e021      	b.n	8004c1a <HAL_ADC_Stop+0x5a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004bde:	2103      	movs	r1, #3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fe4f 	bl	8005884 <ADC_ConversionStop>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10f      	bne.n	8004c10 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 ff8d 	bl	8005b10 <ADC_Disable>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <HAL_ADC_Stop+0x64>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	f043 0201 	orr.w	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	ffffeefe 	.word	0xffffeefe

08004c28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a72      	ldr	r2, [pc, #456]	; (8004e00 <HAL_ADC_PollForConversion+0x1d8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_ADC_PollForConversion+0x1e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a70      	ldr	r2, [pc, #448]	; (8004e04 <HAL_ADC_PollForConversion+0x1dc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_PollForConversion+0x22>
 8004c46:	4b70      	ldr	r3, [pc, #448]	; (8004e08 <HAL_ADC_PollForConversion+0x1e0>)
 8004c48:	e000      	b.n	8004c4c <HAL_ADC_PollForConversion+0x24>
 8004c4a:	4b70      	ldr	r3, [pc, #448]	; (8004e0c <HAL_ADC_PollForConversion+0x1e4>)
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fbc9 	bl	80043e4 <LL_ADC_GetMultimode>
 8004c52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d102      	bne.n	8004c62 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e037      	b.n	8004cd2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d002      	beq.n	8004c74 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d111      	bne.n	8004c98 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0b1      	b.n	8004df6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004c92:	2304      	movs	r3, #4
 8004c94:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004c96:	e01c      	b.n	8004cd2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a58      	ldr	r2, [pc, #352]	; (8004e00 <HAL_ADC_PollForConversion+0x1d8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_ADC_PollForConversion+0x84>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a57      	ldr	r2, [pc, #348]	; (8004e04 <HAL_ADC_PollForConversion+0x1dc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_ADC_PollForConversion+0x88>
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_ADC_PollForConversion+0x1e0>)
 8004cae:	e000      	b.n	8004cb2 <HAL_ADC_PollForConversion+0x8a>
 8004cb0:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <HAL_ADC_PollForConversion+0x1e4>)
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fba4 	bl	8004400 <LL_ADC_GetMultiDMATransfer>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e093      	b.n	8004df6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004cce:	2304      	movs	r3, #4
 8004cd0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004cd2:	f7ff f971 	bl	8003fb8 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004cd8:	e021      	b.n	8004d1e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d01d      	beq.n	8004d1e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004ce2:	f7ff f969 	bl	8003fb8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <HAL_ADC_PollForConversion+0xd0>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d112      	bne.n	8004d1e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e06b      	b.n	8004df6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0d6      	beq.n	8004cda <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff faa7 	bl	8004290 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e5b      	ldrb	r3, [r3, #25]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d111      	bne.n	8004d82 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d105      	bne.n	8004d82 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_ADC_PollForConversion+0x1dc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d002      	beq.n	8004d92 <HAL_ADC_PollForConversion+0x16a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	e000      	b.n	8004d94 <HAL_ADC_PollForConversion+0x16c>
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_ADC_PollForConversion+0x1d8>)
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d008      	beq.n	8004dae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	d002      	beq.n	8004dae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	d104      	bne.n	8004db8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e00c      	b.n	8004dd2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <HAL_ADC_PollForConversion+0x1dc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d002      	beq.n	8004dc8 <HAL_ADC_PollForConversion+0x1a0>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	e000      	b.n	8004dca <HAL_ADC_PollForConversion+0x1a2>
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <HAL_ADC_PollForConversion+0x1d8>)
 8004dca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d104      	bne.n	8004de2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e008      	b.n	8004df4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	220c      	movs	r2, #12
 8004df2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40022000 	.word	0x40022000
 8004e04:	40022100 	.word	0x40022100
 8004e08:	40022300 	.word	0x40022300
 8004e0c:	58026300 	.word	0x58026300

08004e10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b0b9      	sub	sp, #228	; 0xe4
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e46:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4aa9      	ldr	r2, [pc, #676]	; (80050f4 <HAL_ADC_ConfigChannel+0x2c8>)
 8004e4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x34>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	f000 bcfa 	b.w	8005854 <HAL_ADC_ConfigChannel+0xa28>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fb99 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f040 84de 	bne.w	8005836 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a9e      	ldr	r2, [pc, #632]	; (80050f8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d033      	beq.n	8004eec <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x76>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e9b      	lsrs	r3, r3, #26
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	e01d      	b.n	8004ede <HAL_ADC_ConfigChannel+0xb2>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	e004      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2201      	movs	r2, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	69d1      	ldr	r1, [r2, #28]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6859      	ldr	r1, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f7ff f9dc 	bl	80042b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fb4e 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 8004f08:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fb6f 	bl	80045f4 <LL_ADC_INJ_IsConversionOngoing>
 8004f16:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8270 	bne.w	8005404 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 826b 	bne.w	8005404 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7ff f9e7 	bl	800430e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a6c      	ldr	r2, [pc, #432]	; (80050f8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10d      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	08db      	lsrs	r3, r3, #3
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f64:	e032      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f66:	4b65      	ldr	r3, [pc, #404]	; (80050fc <HAL_ADC_ConfigChannel+0x2d0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f72:	d10b      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x160>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	e01d      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x19c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x186>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	e00a      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x19c>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d048      	beq.n	8005066 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6919      	ldr	r1, [r3, #16]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fe4:	f7ff f862 	bl	80040ac <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a42      	ldr	r2, [pc, #264]	; (80050f8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d119      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6919      	ldr	r1, [r3, #16]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7ff f8fa 	bl	80041f8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6919      	ldr	r1, [r3, #16]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d102      	bne.n	800501c <HAL_ADC_ConfigChannel+0x1f0>
 8005016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501a:	e000      	b.n	800501e <HAL_ADC_ConfigChannel+0x1f2>
 800501c:	2300      	movs	r3, #0
 800501e:	461a      	mov	r2, r3
 8005020:	f7ff f8c8 	bl	80041b4 <LL_ADC_SetOffsetSaturation>
 8005024:	e1ee      	b.n	8005404 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6919      	ldr	r1, [r3, #16]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <HAL_ADC_ConfigChannel+0x212>
 8005038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800503c:	e000      	b.n	8005040 <HAL_ADC_ConfigChannel+0x214>
 800503e:	2300      	movs	r3, #0
 8005040:	461a      	mov	r2, r3
 8005042:	f7ff f895 	bl	8004170 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6919      	ldr	r1, [r3, #16]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	7e1b      	ldrb	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d102      	bne.n	800505c <HAL_ADC_ConfigChannel+0x230>
 8005056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800505a:	e000      	b.n	800505e <HAL_ADC_ConfigChannel+0x232>
 800505c:	2300      	movs	r3, #0
 800505e:	461a      	mov	r2, r3
 8005060:	f7ff f86c 	bl	800413c <LL_ADC_SetDataRightShift>
 8005064:	e1ce      	b.n	8005404 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a23      	ldr	r2, [pc, #140]	; (80050f8 <HAL_ADC_ConfigChannel+0x2cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	f040 8181 	bne.w	8005374 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff f849 	bl	8004110 <LL_ADC_GetOffsetChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <HAL_ADC_ConfigChannel+0x272>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f83e 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8005094:	4603      	mov	r3, r0
 8005096:	0e9b      	lsrs	r3, r3, #26
 8005098:	f003 021f 	and.w	r2, r3, #31
 800509c:	e01e      	b.n	80050dc <HAL_ADC_ConfigChannel+0x2b0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff f833 	bl	8004110 <LL_ADC_GetOffsetChannel>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050b4:	fa93 f3a3 	rbit	r3, r3
 80050b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80050bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80050c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80050cc:	2320      	movs	r3, #32
 80050ce:	e004      	b.n	80050da <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80050d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x2d4>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	0e9b      	lsrs	r3, r3, #26
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	e01e      	b.n	8005132 <HAL_ADC_ConfigChannel+0x306>
 80050f4:	47ff0000 	.word	0x47ff0000
 80050f8:	58026000 	.word	0x58026000
 80050fc:	5c001000 	.word	0x5c001000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800511c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e004      	b.n	8005132 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
 8005132:	429a      	cmp	r2, r3
 8005134:	d106      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff f87c 	bl	800423c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe ffe0 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8005150:	4603      	mov	r3, r0
 8005152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x344>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe ffd5 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8005166:	4603      	mov	r3, r0
 8005168:	0e9b      	lsrs	r3, r3, #26
 800516a:	f003 021f 	and.w	r2, r3, #31
 800516e:	e01e      	b.n	80051ae <HAL_ADC_ConfigChannel+0x382>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe ffca 	bl	8004110 <LL_ADC_GetOffsetChannel>
 800517c:	4603      	mov	r3, r0
 800517e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800518e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800519e:	2320      	movs	r3, #32
 80051a0:	e004      	b.n	80051ac <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80051a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x39a>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	e018      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x3cc>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80051da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80051e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80051ea:	2320      	movs	r3, #32
 80051ec:	e004      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80051ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f2:	fab3 f383 	clz	r3, r3
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d106      	bne.n	800520a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff f819 	bl	800423c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe ff7d 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x40a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ff72 	bl	8004110 <LL_ADC_GetOffsetChannel>
 800522c:	4603      	mov	r3, r0
 800522e:	0e9b      	lsrs	r3, r3, #26
 8005230:	f003 021f 	and.w	r2, r3, #31
 8005234:	e01e      	b.n	8005274 <HAL_ADC_ConfigChannel+0x448>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2102      	movs	r1, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe ff67 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8005242:	4603      	mov	r3, r0
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524c:	fa93 f3a3 	rbit	r3, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800525c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005264:	2320      	movs	r3, #32
 8005266:	e004      	b.n	8005272 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800526c:	fab3 f383 	clz	r3, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_ADC_ConfigChannel+0x460>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	0e9b      	lsrs	r3, r3, #26
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	e014      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x48a>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800529a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80052a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80052a8:	2320      	movs	r3, #32
 80052aa:	e004      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80052ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d106      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	2102      	movs	r1, #2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe ffba 	bl	800423c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2103      	movs	r1, #3
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe ff1e 	bl	8004110 <LL_ADC_GetOffsetChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x4c8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2103      	movs	r1, #3
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe ff13 	bl	8004110 <LL_ADC_GetOffsetChannel>
 80052ea:	4603      	mov	r3, r0
 80052ec:	0e9b      	lsrs	r3, r3, #26
 80052ee:	f003 021f 	and.w	r2, r3, #31
 80052f2:	e017      	b.n	8005324 <HAL_ADC_ConfigChannel+0x4f8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2103      	movs	r1, #3
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe ff08 	bl	8004110 <LL_ADC_GetOffsetChannel>
 8005300:	4603      	mov	r3, r0
 8005302:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005306:	fa93 f3a3 	rbit	r3, r3
 800530a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800530c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005316:	2320      	movs	r3, #32
 8005318:	e003      	b.n	8005322 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800531a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_ADC_ConfigChannel+0x510>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0e9b      	lsrs	r3, r3, #26
 8005336:	f003 031f 	and.w	r3, r3, #31
 800533a:	e011      	b.n	8005360 <HAL_ADC_ConfigChannel+0x534>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005344:	fa93 f3a3 	rbit	r3, r3
 8005348:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800534a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800534c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800534e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005354:	2320      	movs	r3, #32
 8005356:	e003      	b.n	8005360 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	429a      	cmp	r2, r3
 8005362:	d14f      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2200      	movs	r2, #0
 800536a:	2103      	movs	r1, #3
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe ff65 	bl	800423c <LL_ADC_SetOffsetState>
 8005372:	e047      	b.n	8005404 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	069b      	lsls	r3, r3, #26
 8005384:	429a      	cmp	r2, r3
 8005386:	d107      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800539e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	069b      	lsls	r3, r3, #26
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d107      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053ba:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	069b      	lsls	r3, r3, #26
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d107      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053de:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	069b      	lsls	r3, r3, #26
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005402:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff f87d 	bl	8004508 <LL_ADC_IsEnabled>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	f040 8219 	bne.w	8005848 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6819      	ldr	r1, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	461a      	mov	r2, r3
 8005424:	f7fe ff9e 	bl	8004364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4aa1      	ldr	r2, [pc, #644]	; (80056b4 <HAL_ADC_ConfigChannel+0x888>)
 800542e:	4293      	cmp	r3, r2
 8005430:	f040 812e 	bne.w	8005690 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_ADC_ConfigChannel+0x630>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0e9b      	lsrs	r3, r3, #26
 800544a:	3301      	adds	r3, #1
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	2b09      	cmp	r3, #9
 8005452:	bf94      	ite	ls
 8005454:	2301      	movls	r3, #1
 8005456:	2300      	movhi	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e019      	b.n	8005490 <HAL_ADC_ConfigChannel+0x664>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005464:	fa93 f3a3 	rbit	r3, r3
 8005468:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800546a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800546e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005474:	2320      	movs	r3, #32
 8005476:	e003      	b.n	8005480 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	3301      	adds	r3, #1
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2b09      	cmp	r3, #9
 8005488:	bf94      	ite	ls
 800548a:	2301      	movls	r3, #1
 800548c:	2300      	movhi	r3, #0
 800548e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005490:	2b00      	cmp	r3, #0
 8005492:	d079      	beq.n	8005588 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x684>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	3301      	adds	r3, #1
 80054a8:	069b      	lsls	r3, r3, #26
 80054aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054ae:	e015      	b.n	80054dc <HAL_ADC_ConfigChannel+0x6b0>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80054be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80054c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80054c8:	2320      	movs	r3, #32
 80054ca:	e003      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80054cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	3301      	adds	r3, #1
 80054d6:	069b      	lsls	r3, r3, #26
 80054d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x6d0>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	0e9b      	lsrs	r3, r3, #26
 80054ee:	3301      	adds	r3, #1
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f303 	lsl.w	r3, r1, r3
 80054fa:	e017      	b.n	800552c <HAL_ADC_ConfigChannel+0x700>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800550e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005514:	2320      	movs	r3, #32
 8005516:	e003      	b.n	8005520 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	3301      	adds	r3, #1
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	ea42 0103 	orr.w	r1, r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x726>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0e9b      	lsrs	r3, r3, #26
 8005542:	3301      	adds	r3, #1
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	051b      	lsls	r3, r3, #20
 8005550:	e018      	b.n	8005584 <HAL_ADC_ConfigChannel+0x758>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800556a:	2320      	movs	r3, #32
 800556c:	e003      	b.n	8005576 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f003 021f 	and.w	r2, r3, #31
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005584:	430b      	orrs	r3, r1
 8005586:	e07e      	b.n	8005686 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x778>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	0e9b      	lsrs	r3, r3, #26
 800559a:	3301      	adds	r3, #1
 800559c:	069b      	lsls	r3, r3, #26
 800559e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055a2:	e015      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x7a4>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80055bc:	2320      	movs	r3, #32
 80055be:	e003      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	3301      	adds	r3, #1
 80055ca:	069b      	lsls	r3, r3, #26
 80055cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x7c4>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	0e9b      	lsrs	r3, r3, #26
 80055e2:	3301      	adds	r3, #1
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	e017      	b.n	8005620 <HAL_ADC_ConfigChannel+0x7f4>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa93 f3a3 	rbit	r3, r3
 80055fc:	61bb      	str	r3, [r7, #24]
  return result;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005608:	2320      	movs	r3, #32
 800560a:	e003      	b.n	8005614 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	fab3 f383 	clz	r3, r3
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2101      	movs	r1, #1
 800561c:	fa01 f303 	lsl.w	r3, r1, r3
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <HAL_ADC_ConfigChannel+0x820>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	3301      	adds	r3, #1
 8005638:	f003 021f 	and.w	r2, r3, #31
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	3b1e      	subs	r3, #30
 8005644:	051b      	lsls	r3, r3, #20
 8005646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800564a:	e01b      	b.n	8005684 <HAL_ADC_ConfigChannel+0x858>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	fa93 f3a3 	rbit	r3, r3
 8005658:	60fb      	str	r3, [r7, #12]
  return result;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005664:	2320      	movs	r3, #32
 8005666:	e003      	b.n	8005670 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f003 021f 	and.w	r2, r3, #31
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	3b1e      	subs	r3, #30
 800567e:	051b      	lsls	r3, r3, #20
 8005680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005684:	430b      	orrs	r3, r1
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	4619      	mov	r1, r3
 800568c:	f7fe fe3f 	bl	800430e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f280 80d7 	bge.w	8005848 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <HAL_ADC_ConfigChannel+0x88c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_ADC_ConfigChannel+0x882>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <HAL_ADC_ConfigChannel+0x890>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d10a      	bne.n	80056c4 <HAL_ADC_ConfigChannel+0x898>
 80056ae:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <HAL_ADC_ConfigChannel+0x894>)
 80056b0:	e009      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x89a>
 80056b2:	bf00      	nop
 80056b4:	47ff0000 	.word	0x47ff0000
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40022100 	.word	0x40022100
 80056c0:	40022300 	.word	0x40022300
 80056c4:	4b65      	ldr	r3, [pc, #404]	; (800585c <HAL_ADC_ConfigChannel+0xa30>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fce2 	bl	8004090 <LL_ADC_GetCommonPathInternalCh>
 80056cc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a62      	ldr	r2, [pc, #392]	; (8005860 <HAL_ADC_ConfigChannel+0xa34>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_ADC_ConfigChannel+0x8b8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a61      	ldr	r2, [pc, #388]	; (8005864 <HAL_ADC_ConfigChannel+0xa38>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d10e      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x8d6>
 80056e4:	485e      	ldr	r0, [pc, #376]	; (8005860 <HAL_ADC_ConfigChannel+0xa34>)
 80056e6:	f7fe ff0f 	bl	8004508 <LL_ADC_IsEnabled>
 80056ea:	4604      	mov	r4, r0
 80056ec:	485d      	ldr	r0, [pc, #372]	; (8005864 <HAL_ADC_ConfigChannel+0xa38>)
 80056ee:	f7fe ff0b 	bl	8004508 <LL_ADC_IsEnabled>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4323      	orrs	r3, r4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e008      	b.n	8005714 <HAL_ADC_ConfigChannel+0x8e8>
 8005702:	4859      	ldr	r0, [pc, #356]	; (8005868 <HAL_ADC_ConfigChannel+0xa3c>)
 8005704:	f7fe ff00 	bl	8004508 <LL_ADC_IsEnabled>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8084 	beq.w	8005822 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a53      	ldr	r2, [pc, #332]	; (800586c <HAL_ADC_ConfigChannel+0xa40>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d132      	bne.n	800578a <HAL_ADC_ConfigChannel+0x95e>
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d12c      	bne.n	800578a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a4c      	ldr	r2, [pc, #304]	; (8005868 <HAL_ADC_ConfigChannel+0xa3c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f040 8086 	bne.w	8005848 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a47      	ldr	r2, [pc, #284]	; (8005860 <HAL_ADC_ConfigChannel+0xa34>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_ADC_ConfigChannel+0x924>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a46      	ldr	r2, [pc, #280]	; (8005864 <HAL_ADC_ConfigChannel+0xa38>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d101      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x928>
 8005750:	4a47      	ldr	r2, [pc, #284]	; (8005870 <HAL_ADC_ConfigChannel+0xa44>)
 8005752:	e000      	b.n	8005756 <HAL_ADC_ConfigChannel+0x92a>
 8005754:	4a41      	ldr	r2, [pc, #260]	; (800585c <HAL_ADC_ConfigChannel+0xa30>)
 8005756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800575a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe fc82 	bl	800406a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005766:	4b43      	ldr	r3, [pc, #268]	; (8005874 <HAL_ADC_ConfigChannel+0xa48>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	4a42      	ldr	r2, [pc, #264]	; (8005878 <HAL_ADC_ConfigChannel+0xa4c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	099b      	lsrs	r3, r3, #6
 8005774:	3301      	adds	r3, #1
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800577a:	e002      	b.n	8005782 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	3b01      	subs	r3, #1
 8005780:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f9      	bne.n	800577c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005788:	e05e      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a3b      	ldr	r2, [pc, #236]	; (800587c <HAL_ADC_ConfigChannel+0xa50>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d120      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x9aa>
 8005794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11a      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	; (8005868 <HAL_ADC_ConfigChannel+0xa3c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d14e      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	; (8005860 <HAL_ADC_ConfigChannel+0xa34>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_ADC_ConfigChannel+0x992>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <HAL_ADC_ConfigChannel+0xa38>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d101      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x996>
 80057be:	4a2c      	ldr	r2, [pc, #176]	; (8005870 <HAL_ADC_ConfigChannel+0xa44>)
 80057c0:	e000      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x998>
 80057c2:	4a26      	ldr	r2, [pc, #152]	; (800585c <HAL_ADC_ConfigChannel+0xa30>)
 80057c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fc4b 	bl	800406a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057d4:	e038      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a29      	ldr	r2, [pc, #164]	; (8005880 <HAL_ADC_ConfigChannel+0xa54>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d133      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
 80057e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d12d      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <HAL_ADC_ConfigChannel+0xa3c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d128      	bne.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a19      	ldr	r2, [pc, #100]	; (8005860 <HAL_ADC_ConfigChannel+0xa34>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_ADC_ConfigChannel+0x9de>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a17      	ldr	r2, [pc, #92]	; (8005864 <HAL_ADC_ConfigChannel+0xa38>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d101      	bne.n	800580e <HAL_ADC_ConfigChannel+0x9e2>
 800580a:	4a19      	ldr	r2, [pc, #100]	; (8005870 <HAL_ADC_ConfigChannel+0xa44>)
 800580c:	e000      	b.n	8005810 <HAL_ADC_ConfigChannel+0x9e4>
 800580e:	4a13      	ldr	r2, [pc, #76]	; (800585c <HAL_ADC_ConfigChannel+0xa30>)
 8005810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005818:	4619      	mov	r1, r3
 800581a:	4610      	mov	r0, r2
 800581c:	f7fe fc25 	bl	800406a <LL_ADC_SetCommonPathInternalCh>
 8005820:	e012      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005834:	e008      	b.n	8005848 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005850:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005854:	4618      	mov	r0, r3
 8005856:	37e4      	adds	r7, #228	; 0xe4
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}
 800585c:	58026300 	.word	0x58026300
 8005860:	40022000 	.word	0x40022000
 8005864:	40022100 	.word	0x40022100
 8005868:	58026000 	.word	0x58026000
 800586c:	c7520000 	.word	0xc7520000
 8005870:	40022300 	.word	0x40022300
 8005874:	24000000 	.word	0x24000000
 8005878:	053e2d63 	.word	0x053e2d63
 800587c:	c3210000 	.word	0xc3210000
 8005880:	cb840000 	.word	0xcb840000

08005884 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fe82 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 80058a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fea4 	bl	80045f4 <LL_ADC_INJ_IsConversionOngoing>
 80058ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d103      	bne.n	80058bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8098 	beq.w	80059ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02a      	beq.n	8005920 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	7e5b      	ldrb	r3, [r3, #25]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d126      	bne.n	8005920 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7e1b      	ldrb	r3, [r3, #24]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d122      	bne.n	8005920 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80058da:	2301      	movs	r3, #1
 80058dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80058de:	e014      	b.n	800590a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4a45      	ldr	r2, [pc, #276]	; (80059f8 <ADC_ConversionStop+0x174>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d90d      	bls.n	8005904 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	f043 0210 	orr.w	r2, r3, #16
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f8:	f043 0201 	orr.w	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e074      	b.n	80059ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d1e3      	bne.n	80058e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2240      	movs	r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d014      	beq.n	8005950 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe fe3a 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fdf7 	bl	800452e <LL_ADC_IsDisableOngoing>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fe16 	bl	800457c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d014      	beq.n	8005980 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fe4a 	bl	80045f4 <LL_ADC_INJ_IsConversionOngoing>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fddf 	bl	800452e <LL_ADC_IsDisableOngoing>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe fe26 	bl	80045cc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d005      	beq.n	8005992 <ADC_ConversionStop+0x10e>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d105      	bne.n	8005998 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800598c:	230c      	movs	r3, #12
 800598e:	617b      	str	r3, [r7, #20]
        break;
 8005990:	e005      	b.n	800599e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005992:	2308      	movs	r3, #8
 8005994:	617b      	str	r3, [r7, #20]
        break;
 8005996:	e002      	b.n	800599e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005998:	2304      	movs	r3, #4
 800599a:	617b      	str	r3, [r7, #20]
        break;
 800599c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800599e:	f7fe fb0b 	bl	8003fb8 <HAL_GetTick>
 80059a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059a4:	e01b      	b.n	80059de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80059a6:	f7fe fb07 	bl	8003fb8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d914      	bls.n	80059de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c6:	f043 0210 	orr.w	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e007      	b.n	80059ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1dc      	bne.n	80059a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	000cdbff 	.word	0x000cdbff

080059fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe fd7d 	bl	8004508 <LL_ADC_IsEnabled>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d16e      	bne.n	8005af2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <ADC_Enable+0x100>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	f043 0210 	orr.w	r2, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e05a      	b.n	8005af4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fd38 	bl	80044b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a48:	f7fe fab6 	bl	8003fb8 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <ADC_Enable+0x104>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <ADC_Enable+0x66>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a29      	ldr	r2, [pc, #164]	; (8005b04 <ADC_Enable+0x108>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d101      	bne.n	8005a66 <ADC_Enable+0x6a>
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <ADC_Enable+0x10c>)
 8005a64:	e000      	b.n	8005a68 <ADC_Enable+0x6c>
 8005a66:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <ADC_Enable+0x110>)
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fcbb 	bl	80043e4 <LL_ADC_GetMultimode>
 8005a6e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a23      	ldr	r2, [pc, #140]	; (8005b04 <ADC_Enable+0x108>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d002      	beq.n	8005a80 <ADC_Enable+0x84>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	e000      	b.n	8005a82 <ADC_Enable+0x86>
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <ADC_Enable+0x104>)
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02c      	beq.n	8005ae4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d130      	bne.n	8005af2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a90:	e028      	b.n	8005ae4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fd36 	bl	8004508 <LL_ADC_IsEnabled>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fd06 	bl	80044b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005aac:	f7fe fa84 	bl	8003fb8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d914      	bls.n	8005ae4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d00d      	beq.n	8005ae4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005acc:	f043 0210 	orr.w	r2, r3, #16
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad8:	f043 0201 	orr.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e007      	b.n	8005af4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d1cf      	bne.n	8005a92 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	8000003f 	.word	0x8000003f
 8005b00:	40022000 	.word	0x40022000
 8005b04:	40022100 	.word	0x40022100
 8005b08:	40022300 	.word	0x40022300
 8005b0c:	58026300 	.word	0x58026300

08005b10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe fd06 	bl	800452e <LL_ADC_IsDisableOngoing>
 8005b22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe fced 	bl	8004508 <LL_ADC_IsEnabled>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d047      	beq.n	8005bc4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d144      	bne.n	8005bc4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 030d 	and.w	r3, r3, #13
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10c      	bne.n	8005b62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe fcc7 	bl	80044e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2203      	movs	r2, #3
 8005b58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b5a:	f7fe fa2d 	bl	8003fb8 <HAL_GetTick>
 8005b5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b60:	e029      	b.n	8005bb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b66:	f043 0210 	orr.w	r2, r3, #16
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e023      	b.n	8005bc6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b7e:	f7fe fa1b 	bl	8003fb8 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d914      	bls.n	8005bb6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9e:	f043 0210 	orr.w	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e007      	b.n	8005bc6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1dc      	bne.n	8005b7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6c      	ldr	r2, [pc, #432]	; (8005d90 <ADC_ConfigureBoostMode+0x1c0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <ADC_ConfigureBoostMode+0x1c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6b      	ldr	r2, [pc, #428]	; (8005d94 <ADC_ConfigureBoostMode+0x1c4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d109      	bne.n	8005c00 <ADC_ConfigureBoostMode+0x30>
 8005bec:	4b6a      	ldr	r3, [pc, #424]	; (8005d98 <ADC_ConfigureBoostMode+0x1c8>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e008      	b.n	8005c12 <ADC_ConfigureBoostMode+0x42>
 8005c00:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <ADC_ConfigureBoostMode+0x1cc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01c      	beq.n	8005c50 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005c16:	f005 fcad 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 8005c1a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c24:	d010      	beq.n	8005c48 <ADC_ConfigureBoostMode+0x78>
 8005c26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c2a:	d873      	bhi.n	8005d14 <ADC_ConfigureBoostMode+0x144>
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c30:	d002      	beq.n	8005c38 <ADC_ConfigureBoostMode+0x68>
 8005c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c36:	d16d      	bne.n	8005d14 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	60fb      	str	r3, [r7, #12]
        break;
 8005c46:	e068      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	60fb      	str	r3, [r7, #12]
        break;
 8005c4e:	e064      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005c50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	f006 fe88 	bl	800c96c <HAL_RCCEx_GetPeriphCLKFreq>
 8005c5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c66:	d051      	beq.n	8005d0c <ADC_ConfigureBoostMode+0x13c>
 8005c68:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c6c:	d854      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005c6e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c72:	d047      	beq.n	8005d04 <ADC_ConfigureBoostMode+0x134>
 8005c74:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c78:	d84e      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005c7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c7e:	d03d      	beq.n	8005cfc <ADC_ConfigureBoostMode+0x12c>
 8005c80:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c84:	d848      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c8a:	d033      	beq.n	8005cf4 <ADC_ConfigureBoostMode+0x124>
 8005c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c90:	d842      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005c92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c96:	d029      	beq.n	8005cec <ADC_ConfigureBoostMode+0x11c>
 8005c98:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c9c:	d83c      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005c9e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ca2:	d01a      	beq.n	8005cda <ADC_ConfigureBoostMode+0x10a>
 8005ca4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ca8:	d836      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005caa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005cae:	d014      	beq.n	8005cda <ADC_ConfigureBoostMode+0x10a>
 8005cb0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005cb4:	d830      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cba:	d00e      	beq.n	8005cda <ADC_ConfigureBoostMode+0x10a>
 8005cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc0:	d82a      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005cc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cc6:	d008      	beq.n	8005cda <ADC_ConfigureBoostMode+0x10a>
 8005cc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ccc:	d824      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x148>
 8005cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cd2:	d002      	beq.n	8005cda <ADC_ConfigureBoostMode+0x10a>
 8005cd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cd8:	d11e      	bne.n	8005d18 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	0c9b      	lsrs	r3, r3, #18
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	60fb      	str	r3, [r7, #12]
        break;
 8005cea:	e016      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
        break;
 8005cf2:	e012      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	60fb      	str	r3, [r7, #12]
        break;
 8005cfa:	e00e      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	099b      	lsrs	r3, r3, #6
 8005d00:	60fb      	str	r3, [r7, #12]
        break;
 8005d02:	e00a      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	60fb      	str	r3, [r7, #12]
        break;
 8005d0a:	e006      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	60fb      	str	r3, [r7, #12]
        break;
 8005d12:	e002      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005d18:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <ADC_ConfigureBoostMode+0x1d0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d808      	bhi.n	8005d3a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d36:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005d38:	e025      	b.n	8005d86 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <ADC_ConfigureBoostMode+0x1d4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d80a      	bhi.n	8005d58 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d54:	609a      	str	r2, [r3, #8]
}
 8005d56:	e016      	b.n	8005d86 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <ADC_ConfigureBoostMode+0x1d8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d80a      	bhi.n	8005d76 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d72:	609a      	str	r2, [r3, #8]
}
 8005d74:	e007      	b.n	8005d86 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d84:	609a      	str	r2, [r3, #8]
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40022000 	.word	0x40022000
 8005d94:	40022100 	.word	0x40022100
 8005d98:	40022300 	.word	0x40022300
 8005d9c:	58026300 	.word	0x58026300
 8005da0:	005f5e10 	.word	0x005f5e10
 8005da4:	00bebc20 	.word	0x00bebc20
 8005da8:	017d7840 	.word	0x017d7840

08005dac <LL_ADC_IsEnabled>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <LL_ADC_IsEnabled+0x18>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <LL_ADC_IsEnabled+0x1a>
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d101      	bne.n	8005dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b0a3      	sub	sp, #140	; 0x8c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e0c1      	b.n	8005f9a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a5e      	ldr	r2, [pc, #376]	; (8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d102      	bne.n	8005e36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e30:	4b5d      	ldr	r3, [pc, #372]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e001      	b.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0a0      	b.n	8005f9a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff ffb9 	bl	8005dd2 <LL_ADC_REG_IsConversionOngoing>
 8005e60:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ffb2 	bl	8005dd2 <LL_ADC_REG_IsConversionOngoing>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8081 	bne.w	8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d17c      	bne.n	8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a48      	ldr	r2, [pc, #288]	; (8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a46      	ldr	r2, [pc, #280]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d101      	bne.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005e92:	4b46      	ldr	r3, [pc, #280]	; (8005fac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005e94:	e000      	b.n	8005e98 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005e96:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005e98:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d039      	beq.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a39      	ldr	r2, [pc, #228]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d10e      	bne.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005ec8:	4836      	ldr	r0, [pc, #216]	; (8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005eca:	f7ff ff6f 	bl	8005dac <LL_ADC_IsEnabled>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4835      	ldr	r0, [pc, #212]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ed2:	f7ff ff6b 	bl	8005dac <LL_ADC_IsEnabled>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4323      	orrs	r3, r4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bf0c      	ite	eq
 8005ede:	2301      	moveq	r3, #1
 8005ee0:	2300      	movne	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	e008      	b.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005ee6:	4833      	ldr	r0, [pc, #204]	; (8005fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005ee8:	f7ff ff60 	bl	8005dac <LL_ADC_IsEnabled>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d047      	beq.n	8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	4b2d      	ldr	r3, [pc, #180]	; (8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	6811      	ldr	r1, [r2, #0]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	6892      	ldr	r2, [r2, #8]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f12:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f14:	e03a      	b.n	8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f20:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10e      	bne.n	8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005f36:	481b      	ldr	r0, [pc, #108]	; (8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f38:	f7ff ff38 	bl	8005dac <LL_ADC_IsEnabled>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	481a      	ldr	r0, [pc, #104]	; (8005fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f40:	f7ff ff34 	bl	8005dac <LL_ADC_IsEnabled>
 8005f44:	4603      	mov	r3, r0
 8005f46:	4323      	orrs	r3, r4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e008      	b.n	8005f66 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005f54:	4817      	ldr	r0, [pc, #92]	; (8005fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005f56:	f7ff ff29 	bl	8005dac <LL_ADC_IsEnabled>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d010      	beq.n	8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f74:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f76:	e009      	b.n	8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005f8a:	e000      	b.n	8005f8e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005f96:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	378c      	adds	r7, #140	; 0x8c
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd90      	pop	{r4, r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40022000 	.word	0x40022000
 8005fa8:	40022100 	.word	0x40022100
 8005fac:	40022300 	.word	0x40022300
 8005fb0:	58026300 	.word	0x58026300
 8005fb4:	58026000 	.word	0x58026000
 8005fb8:	fffff0e0 	.word	0xfffff0e0

08005fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <__NVIC_SetPriorityGrouping+0x40>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fd8:	4013      	ands	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <__NVIC_SetPriorityGrouping+0x44>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <__NVIC_SetPriorityGrouping+0x40>)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	60d3      	str	r3, [r2, #12]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	e000ed00 	.word	0xe000ed00
 8006000:	05fa0000 	.word	0x05fa0000

08006004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <__NVIC_GetPriorityGrouping+0x18>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 0307 	and.w	r3, r3, #7
}
 8006012:	4618      	mov	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800602a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	db0b      	blt.n	800604a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	f003 021f 	and.w	r2, r3, #31
 8006038:	4907      	ldr	r1, [pc, #28]	; (8006058 <__NVIC_EnableIRQ+0x38>)
 800603a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2001      	movs	r0, #1
 8006042:	fa00 f202 	lsl.w	r2, r0, r2
 8006046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	e000e100 	.word	0xe000e100

0800605c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	6039      	str	r1, [r7, #0]
 8006066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	db0a      	blt.n	8006086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	490c      	ldr	r1, [pc, #48]	; (80060a8 <__NVIC_SetPriority+0x4c>)
 8006076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800607a:	0112      	lsls	r2, r2, #4
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	440b      	add	r3, r1
 8006080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006084:	e00a      	b.n	800609c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	4908      	ldr	r1, [pc, #32]	; (80060ac <__NVIC_SetPriority+0x50>)
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	3b04      	subs	r3, #4
 8006094:	0112      	lsls	r2, r2, #4
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	440b      	add	r3, r1
 800609a:	761a      	strb	r2, [r3, #24]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	e000e100 	.word	0xe000e100
 80060ac:	e000ed00 	.word	0xe000ed00

080060b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b089      	sub	sp, #36	; 0x24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f1c3 0307 	rsb	r3, r3, #7
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	bf28      	it	cs
 80060ce:	2304      	movcs	r3, #4
 80060d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	3304      	adds	r3, #4
 80060d6:	2b06      	cmp	r3, #6
 80060d8:	d902      	bls.n	80060e0 <NVIC_EncodePriority+0x30>
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	3b03      	subs	r3, #3
 80060de:	e000      	b.n	80060e2 <NVIC_EncodePriority+0x32>
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060e4:	f04f 32ff 	mov.w	r2, #4294967295
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43da      	mvns	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	401a      	ands	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060f8:	f04f 31ff 	mov.w	r1, #4294967295
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006102:	43d9      	mvns	r1, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006108:	4313      	orrs	r3, r2
         );
}
 800610a:	4618      	mov	r0, r3
 800610c:	3724      	adds	r7, #36	; 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3b01      	subs	r3, #1
 8006124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006128:	d301      	bcc.n	800612e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800612a:	2301      	movs	r3, #1
 800612c:	e00f      	b.n	800614e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <SysTick_Config+0x40>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3b01      	subs	r3, #1
 8006134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006136:	210f      	movs	r1, #15
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	f7ff ff8e 	bl	800605c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <SysTick_Config+0x40>)
 8006142:	2200      	movs	r2, #0
 8006144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006146:	4b04      	ldr	r3, [pc, #16]	; (8006158 <SysTick_Config+0x40>)
 8006148:	2207      	movs	r2, #7
 800614a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	e000e010 	.word	0xe000e010

0800615c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff29 	bl	8005fbc <__NVIC_SetPriorityGrouping>
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	4603      	mov	r3, r0
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006180:	f7ff ff40 	bl	8006004 <__NVIC_GetPriorityGrouping>
 8006184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	6978      	ldr	r0, [r7, #20]
 800618c:	f7ff ff90 	bl	80060b0 <NVIC_EncodePriority>
 8006190:	4602      	mov	r2, r0
 8006192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff ff5f 	bl	800605c <__NVIC_SetPriority>
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	4603      	mov	r3, r0
 80061ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff ff33 	bl	8006020 <__NVIC_EnableIRQ>
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff ffa4 	bl	8006118 <SysTick_Config>
 80061d0:	4603      	mov	r3, r0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80061e4:	f7fd fee8 	bl	8003fb8 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e314      	b.n	800681e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a66      	ldr	r2, [pc, #408]	; (8006394 <HAL_DMA_Init+0x1b8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d04a      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a65      	ldr	r2, [pc, #404]	; (8006398 <HAL_DMA_Init+0x1bc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d045      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a63      	ldr	r2, [pc, #396]	; (800639c <HAL_DMA_Init+0x1c0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d040      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a62      	ldr	r2, [pc, #392]	; (80063a0 <HAL_DMA_Init+0x1c4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d03b      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a60      	ldr	r2, [pc, #384]	; (80063a4 <HAL_DMA_Init+0x1c8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d036      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5f      	ldr	r2, [pc, #380]	; (80063a8 <HAL_DMA_Init+0x1cc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d031      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5d      	ldr	r2, [pc, #372]	; (80063ac <HAL_DMA_Init+0x1d0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02c      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5c      	ldr	r2, [pc, #368]	; (80063b0 <HAL_DMA_Init+0x1d4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d027      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a5a      	ldr	r2, [pc, #360]	; (80063b4 <HAL_DMA_Init+0x1d8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a59      	ldr	r2, [pc, #356]	; (80063b8 <HAL_DMA_Init+0x1dc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01d      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a57      	ldr	r2, [pc, #348]	; (80063bc <HAL_DMA_Init+0x1e0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a56      	ldr	r2, [pc, #344]	; (80063c0 <HAL_DMA_Init+0x1e4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a54      	ldr	r2, [pc, #336]	; (80063c4 <HAL_DMA_Init+0x1e8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a53      	ldr	r2, [pc, #332]	; (80063c8 <HAL_DMA_Init+0x1ec>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a51      	ldr	r2, [pc, #324]	; (80063cc <HAL_DMA_Init+0x1f0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_DMA_Init+0xb8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a50      	ldr	r2, [pc, #320]	; (80063d0 <HAL_DMA_Init+0x1f4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_DMA_Init+0xbc>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_DMA_Init+0xbe>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 813c 	beq.w	8006518 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a37      	ldr	r2, [pc, #220]	; (8006394 <HAL_DMA_Init+0x1b8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d04a      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a36      	ldr	r2, [pc, #216]	; (8006398 <HAL_DMA_Init+0x1bc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d045      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a34      	ldr	r2, [pc, #208]	; (800639c <HAL_DMA_Init+0x1c0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d040      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a33      	ldr	r2, [pc, #204]	; (80063a0 <HAL_DMA_Init+0x1c4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d03b      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a31      	ldr	r2, [pc, #196]	; (80063a4 <HAL_DMA_Init+0x1c8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d036      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a30      	ldr	r2, [pc, #192]	; (80063a8 <HAL_DMA_Init+0x1cc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d031      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a2e      	ldr	r2, [pc, #184]	; (80063ac <HAL_DMA_Init+0x1d0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d02c      	beq.n	8006350 <HAL_DMA_Init+0x174>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2d      	ldr	r2, [pc, #180]	; (80063b0 <HAL_DMA_Init+0x1d4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d027      	beq.n	8006350 <HAL_DMA_Init+0x174>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2b      	ldr	r2, [pc, #172]	; (80063b4 <HAL_DMA_Init+0x1d8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_DMA_Init+0x174>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a2a      	ldr	r2, [pc, #168]	; (80063b8 <HAL_DMA_Init+0x1dc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d01d      	beq.n	8006350 <HAL_DMA_Init+0x174>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a28      	ldr	r2, [pc, #160]	; (80063bc <HAL_DMA_Init+0x1e0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_DMA_Init+0x174>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <HAL_DMA_Init+0x1e4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_DMA_Init+0x174>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <HAL_DMA_Init+0x1e8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_DMA_Init+0x174>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a24      	ldr	r2, [pc, #144]	; (80063c8 <HAL_DMA_Init+0x1ec>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_DMA_Init+0x174>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a22      	ldr	r2, [pc, #136]	; (80063cc <HAL_DMA_Init+0x1f0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_DMA_Init+0x174>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <HAL_DMA_Init+0x1f4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <HAL_DMA_Init+0x186>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e007      	b.n	8006372 <HAL_DMA_Init+0x196>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006372:	e02f      	b.n	80063d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006374:	f7fd fe20 	bl	8003fb8 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b05      	cmp	r3, #5
 8006380:	d928      	bls.n	80063d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2203      	movs	r2, #3
 800638c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e244      	b.n	800681e <HAL_DMA_Init+0x642>
 8006394:	40020010 	.word	0x40020010
 8006398:	40020028 	.word	0x40020028
 800639c:	40020040 	.word	0x40020040
 80063a0:	40020058 	.word	0x40020058
 80063a4:	40020070 	.word	0x40020070
 80063a8:	40020088 	.word	0x40020088
 80063ac:	400200a0 	.word	0x400200a0
 80063b0:	400200b8 	.word	0x400200b8
 80063b4:	40020410 	.word	0x40020410
 80063b8:	40020428 	.word	0x40020428
 80063bc:	40020440 	.word	0x40020440
 80063c0:	40020458 	.word	0x40020458
 80063c4:	40020470 	.word	0x40020470
 80063c8:	40020488 	.word	0x40020488
 80063cc:	400204a0 	.word	0x400204a0
 80063d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1c8      	bne.n	8006374 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4b84      	ldr	r3, [pc, #528]	; (8006600 <HAL_DMA_Init+0x424>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006406:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006412:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b04      	cmp	r3, #4
 8006426:	d107      	bne.n	8006438 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	4313      	orrs	r3, r2
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b28      	cmp	r3, #40	; 0x28
 800643e:	d903      	bls.n	8006448 <HAL_DMA_Init+0x26c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b2e      	cmp	r3, #46	; 0x2e
 8006446:	d91f      	bls.n	8006488 <HAL_DMA_Init+0x2ac>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b3e      	cmp	r3, #62	; 0x3e
 800644e:	d903      	bls.n	8006458 <HAL_DMA_Init+0x27c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b42      	cmp	r3, #66	; 0x42
 8006456:	d917      	bls.n	8006488 <HAL_DMA_Init+0x2ac>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b46      	cmp	r3, #70	; 0x46
 800645e:	d903      	bls.n	8006468 <HAL_DMA_Init+0x28c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b48      	cmp	r3, #72	; 0x48
 8006466:	d90f      	bls.n	8006488 <HAL_DMA_Init+0x2ac>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b4e      	cmp	r3, #78	; 0x4e
 800646e:	d903      	bls.n	8006478 <HAL_DMA_Init+0x29c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b52      	cmp	r3, #82	; 0x52
 8006476:	d907      	bls.n	8006488 <HAL_DMA_Init+0x2ac>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b73      	cmp	r3, #115	; 0x73
 800647e:	d905      	bls.n	800648c <HAL_DMA_Init+0x2b0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b77      	cmp	r3, #119	; 0x77
 8006486:	d801      	bhi.n	800648c <HAL_DMA_Init+0x2b0>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_DMA_Init+0x2b2>
 800648c:	2300      	movs	r3, #0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006498:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d117      	bne.n	80064f4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00e      	beq.n	80064f4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fdcc 	bl	8008074 <DMA_CheckFifoParam>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2240      	movs	r2, #64	; 0x40
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e194      	b.n	800681e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fd07 	bl	8007f10 <DMA_CalcBaseAndBitshift>
 8006502:	4603      	mov	r3, r0
 8006504:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	223f      	movs	r2, #63	; 0x3f
 8006510:	409a      	lsls	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	609a      	str	r2, [r3, #8]
 8006516:	e0ca      	b.n	80066ae <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a39      	ldr	r2, [pc, #228]	; (8006604 <HAL_DMA_Init+0x428>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d022      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a38      	ldr	r2, [pc, #224]	; (8006608 <HAL_DMA_Init+0x42c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01d      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a36      	ldr	r2, [pc, #216]	; (800660c <HAL_DMA_Init+0x430>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d018      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a35      	ldr	r2, [pc, #212]	; (8006610 <HAL_DMA_Init+0x434>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a33      	ldr	r2, [pc, #204]	; (8006614 <HAL_DMA_Init+0x438>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a32      	ldr	r2, [pc, #200]	; (8006618 <HAL_DMA_Init+0x43c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d009      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a30      	ldr	r2, [pc, #192]	; (800661c <HAL_DMA_Init+0x440>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_DMA_Init+0x38c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <HAL_DMA_Init+0x444>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d101      	bne.n	800656c <HAL_DMA_Init+0x390>
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <HAL_DMA_Init+0x392>
 800656c:	2300      	movs	r3, #0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8094 	beq.w	800669c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <HAL_DMA_Init+0x428>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d021      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a21      	ldr	r2, [pc, #132]	; (8006608 <HAL_DMA_Init+0x42c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01c      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1f      	ldr	r2, [pc, #124]	; (800660c <HAL_DMA_Init+0x430>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d017      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <HAL_DMA_Init+0x434>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d012      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <HAL_DMA_Init+0x438>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00d      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <HAL_DMA_Init+0x43c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d008      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a19      	ldr	r2, [pc, #100]	; (800661c <HAL_DMA_Init+0x440>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <HAL_DMA_Init+0x3e6>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a18      	ldr	r2, [pc, #96]	; (8006620 <HAL_DMA_Init+0x444>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <HAL_DMA_Init+0x448>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d01d      	beq.n	8006628 <HAL_DMA_Init+0x44c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d102      	bne.n	80065fa <HAL_DMA_Init+0x41e>
 80065f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065f8:	e017      	b.n	800662a <HAL_DMA_Init+0x44e>
 80065fa:	2300      	movs	r3, #0
 80065fc:	e015      	b.n	800662a <HAL_DMA_Init+0x44e>
 80065fe:	bf00      	nop
 8006600:	fe10803f 	.word	0xfe10803f
 8006604:	58025408 	.word	0x58025408
 8006608:	5802541c 	.word	0x5802541c
 800660c:	58025430 	.word	0x58025430
 8006610:	58025444 	.word	0x58025444
 8006614:	58025458 	.word	0x58025458
 8006618:	5802546c 	.word	0x5802546c
 800661c:	58025480 	.word	0x58025480
 8006620:	58025494 	.word	0x58025494
 8006624:	fffe000f 	.word	0xfffe000f
 8006628:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68d2      	ldr	r2, [r2, #12]
 800662e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006658:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	4b6e      	ldr	r3, [pc, #440]	; (8006828 <HAL_DMA_Init+0x64c>)
 8006670:	4413      	add	r3, r2
 8006672:	4a6e      	ldr	r2, [pc, #440]	; (800682c <HAL_DMA_Init+0x650>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	009a      	lsls	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fc45 	bl	8007f10 <DMA_CalcBaseAndBitshift>
 8006686:	4603      	mov	r3, r0
 8006688:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2201      	movs	r2, #1
 8006694:	409a      	lsls	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e008      	b.n	80066ae <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2240      	movs	r2, #64	; 0x40
 80066a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2203      	movs	r2, #3
 80066a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e0b7      	b.n	800681e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a5f      	ldr	r2, [pc, #380]	; (8006830 <HAL_DMA_Init+0x654>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d072      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a5d      	ldr	r2, [pc, #372]	; (8006834 <HAL_DMA_Init+0x658>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d06d      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a5c      	ldr	r2, [pc, #368]	; (8006838 <HAL_DMA_Init+0x65c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d068      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a5a      	ldr	r2, [pc, #360]	; (800683c <HAL_DMA_Init+0x660>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d063      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a59      	ldr	r2, [pc, #356]	; (8006840 <HAL_DMA_Init+0x664>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d05e      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a57      	ldr	r2, [pc, #348]	; (8006844 <HAL_DMA_Init+0x668>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d059      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a56      	ldr	r2, [pc, #344]	; (8006848 <HAL_DMA_Init+0x66c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d054      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a54      	ldr	r2, [pc, #336]	; (800684c <HAL_DMA_Init+0x670>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d04f      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a53      	ldr	r2, [pc, #332]	; (8006850 <HAL_DMA_Init+0x674>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04a      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a51      	ldr	r2, [pc, #324]	; (8006854 <HAL_DMA_Init+0x678>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a50      	ldr	r2, [pc, #320]	; (8006858 <HAL_DMA_Init+0x67c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d040      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a4e      	ldr	r2, [pc, #312]	; (800685c <HAL_DMA_Init+0x680>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d03b      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a4d      	ldr	r2, [pc, #308]	; (8006860 <HAL_DMA_Init+0x684>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d036      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a4b      	ldr	r2, [pc, #300]	; (8006864 <HAL_DMA_Init+0x688>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d031      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a4a      	ldr	r2, [pc, #296]	; (8006868 <HAL_DMA_Init+0x68c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02c      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a48      	ldr	r2, [pc, #288]	; (800686c <HAL_DMA_Init+0x690>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d027      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a47      	ldr	r2, [pc, #284]	; (8006870 <HAL_DMA_Init+0x694>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a45      	ldr	r2, [pc, #276]	; (8006874 <HAL_DMA_Init+0x698>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a44      	ldr	r2, [pc, #272]	; (8006878 <HAL_DMA_Init+0x69c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a42      	ldr	r2, [pc, #264]	; (800687c <HAL_DMA_Init+0x6a0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a41      	ldr	r2, [pc, #260]	; (8006880 <HAL_DMA_Init+0x6a4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a3f      	ldr	r2, [pc, #252]	; (8006884 <HAL_DMA_Init+0x6a8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a3e      	ldr	r2, [pc, #248]	; (8006888 <HAL_DMA_Init+0x6ac>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_Init+0x5c2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a3c      	ldr	r2, [pc, #240]	; (800688c <HAL_DMA_Init+0x6b0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d101      	bne.n	80067a2 <HAL_DMA_Init+0x5c6>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <HAL_DMA_Init+0x5c8>
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d032      	beq.n	800680e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 fcdf 	bl	800816c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d102      	bne.n	80067bc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_DMA_Init+0x620>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d80c      	bhi.n	80067fc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 fd5c 	bl	80082a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	e008      	b.n	800680e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	a7fdabf8 	.word	0xa7fdabf8
 800682c:	cccccccd 	.word	0xcccccccd
 8006830:	40020010 	.word	0x40020010
 8006834:	40020028 	.word	0x40020028
 8006838:	40020040 	.word	0x40020040
 800683c:	40020058 	.word	0x40020058
 8006840:	40020070 	.word	0x40020070
 8006844:	40020088 	.word	0x40020088
 8006848:	400200a0 	.word	0x400200a0
 800684c:	400200b8 	.word	0x400200b8
 8006850:	40020410 	.word	0x40020410
 8006854:	40020428 	.word	0x40020428
 8006858:	40020440 	.word	0x40020440
 800685c:	40020458 	.word	0x40020458
 8006860:	40020470 	.word	0x40020470
 8006864:	40020488 	.word	0x40020488
 8006868:	400204a0 	.word	0x400204a0
 800686c:	400204b8 	.word	0x400204b8
 8006870:	58025408 	.word	0x58025408
 8006874:	5802541c 	.word	0x5802541c
 8006878:	58025430 	.word	0x58025430
 800687c:	58025444 	.word	0x58025444
 8006880:	58025458 	.word	0x58025458
 8006884:	5802546c 	.word	0x5802546c
 8006888:	58025480 	.word	0x58025480
 800688c:	58025494 	.word	0x58025494

08006890 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e226      	b.n	8006cfa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_DMA_Start_IT+0x2a>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e21f      	b.n	8006cfa <HAL_DMA_Start_IT+0x46a>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	f040 820a 	bne.w	8006ce4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a68      	ldr	r2, [pc, #416]	; (8006a84 <HAL_DMA_Start_IT+0x1f4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d04a      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a66      	ldr	r2, [pc, #408]	; (8006a88 <HAL_DMA_Start_IT+0x1f8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d045      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a65      	ldr	r2, [pc, #404]	; (8006a8c <HAL_DMA_Start_IT+0x1fc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d040      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a63      	ldr	r2, [pc, #396]	; (8006a90 <HAL_DMA_Start_IT+0x200>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d03b      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a62      	ldr	r2, [pc, #392]	; (8006a94 <HAL_DMA_Start_IT+0x204>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d036      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a60      	ldr	r2, [pc, #384]	; (8006a98 <HAL_DMA_Start_IT+0x208>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d031      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a5f      	ldr	r2, [pc, #380]	; (8006a9c <HAL_DMA_Start_IT+0x20c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d02c      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a5d      	ldr	r2, [pc, #372]	; (8006aa0 <HAL_DMA_Start_IT+0x210>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d027      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a5c      	ldr	r2, [pc, #368]	; (8006aa4 <HAL_DMA_Start_IT+0x214>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a5a      	ldr	r2, [pc, #360]	; (8006aa8 <HAL_DMA_Start_IT+0x218>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01d      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a59      	ldr	r2, [pc, #356]	; (8006aac <HAL_DMA_Start_IT+0x21c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a57      	ldr	r2, [pc, #348]	; (8006ab0 <HAL_DMA_Start_IT+0x220>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a56      	ldr	r2, [pc, #344]	; (8006ab4 <HAL_DMA_Start_IT+0x224>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a54      	ldr	r2, [pc, #336]	; (8006ab8 <HAL_DMA_Start_IT+0x228>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a53      	ldr	r2, [pc, #332]	; (8006abc <HAL_DMA_Start_IT+0x22c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_DMA_Start_IT+0xee>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a51      	ldr	r2, [pc, #324]	; (8006ac0 <HAL_DMA_Start_IT+0x230>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <HAL_DMA_Start_IT+0x100>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0201 	bic.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e007      	b.n	80069a0 <HAL_DMA_Start_IT+0x110>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 f906 	bl	8007bb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a34      	ldr	r2, [pc, #208]	; (8006a84 <HAL_DMA_Start_IT+0x1f4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d04a      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a33      	ldr	r2, [pc, #204]	; (8006a88 <HAL_DMA_Start_IT+0x1f8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d045      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a31      	ldr	r2, [pc, #196]	; (8006a8c <HAL_DMA_Start_IT+0x1fc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d040      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a30      	ldr	r2, [pc, #192]	; (8006a90 <HAL_DMA_Start_IT+0x200>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d03b      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a2e      	ldr	r2, [pc, #184]	; (8006a94 <HAL_DMA_Start_IT+0x204>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d036      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2d      	ldr	r2, [pc, #180]	; (8006a98 <HAL_DMA_Start_IT+0x208>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d031      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <HAL_DMA_Start_IT+0x20c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02c      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2a      	ldr	r2, [pc, #168]	; (8006aa0 <HAL_DMA_Start_IT+0x210>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d027      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <HAL_DMA_Start_IT+0x214>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <HAL_DMA_Start_IT+0x218>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a25      	ldr	r2, [pc, #148]	; (8006aac <HAL_DMA_Start_IT+0x21c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <HAL_DMA_Start_IT+0x220>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <HAL_DMA_Start_IT+0x224>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <HAL_DMA_Start_IT+0x228>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <HAL_DMA_Start_IT+0x22c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_DMA_Start_IT+0x1bc>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <HAL_DMA_Start_IT+0x230>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_DMA_Start_IT+0x1c0>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <HAL_DMA_Start_IT+0x1c2>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d036      	beq.n	8006ac4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f023 021e 	bic.w	r2, r3, #30
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0216 	orr.w	r2, r2, #22
 8006a68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03e      	beq.n	8006af0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0208 	orr.w	r2, r2, #8
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e035      	b.n	8006af0 <HAL_DMA_Start_IT+0x260>
 8006a84:	40020010 	.word	0x40020010
 8006a88:	40020028 	.word	0x40020028
 8006a8c:	40020040 	.word	0x40020040
 8006a90:	40020058 	.word	0x40020058
 8006a94:	40020070 	.word	0x40020070
 8006a98:	40020088 	.word	0x40020088
 8006a9c:	400200a0 	.word	0x400200a0
 8006aa0:	400200b8 	.word	0x400200b8
 8006aa4:	40020410 	.word	0x40020410
 8006aa8:	40020428 	.word	0x40020428
 8006aac:	40020440 	.word	0x40020440
 8006ab0:	40020458 	.word	0x40020458
 8006ab4:	40020470 	.word	0x40020470
 8006ab8:	40020488 	.word	0x40020488
 8006abc:	400204a0 	.word	0x400204a0
 8006ac0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 020e 	bic.w	r2, r3, #14
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 020a 	orr.w	r2, r2, #10
 8006ad6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0204 	orr.w	r2, r2, #4
 8006aee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a83      	ldr	r2, [pc, #524]	; (8006d04 <HAL_DMA_Start_IT+0x474>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d072      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a82      	ldr	r2, [pc, #520]	; (8006d08 <HAL_DMA_Start_IT+0x478>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d06d      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a80      	ldr	r2, [pc, #512]	; (8006d0c <HAL_DMA_Start_IT+0x47c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d068      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a7f      	ldr	r2, [pc, #508]	; (8006d10 <HAL_DMA_Start_IT+0x480>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d063      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a7d      	ldr	r2, [pc, #500]	; (8006d14 <HAL_DMA_Start_IT+0x484>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d05e      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a7c      	ldr	r2, [pc, #496]	; (8006d18 <HAL_DMA_Start_IT+0x488>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d059      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a7a      	ldr	r2, [pc, #488]	; (8006d1c <HAL_DMA_Start_IT+0x48c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d054      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a79      	ldr	r2, [pc, #484]	; (8006d20 <HAL_DMA_Start_IT+0x490>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d04f      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a77      	ldr	r2, [pc, #476]	; (8006d24 <HAL_DMA_Start_IT+0x494>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d04a      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a76      	ldr	r2, [pc, #472]	; (8006d28 <HAL_DMA_Start_IT+0x498>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d045      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a74      	ldr	r2, [pc, #464]	; (8006d2c <HAL_DMA_Start_IT+0x49c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d040      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a73      	ldr	r2, [pc, #460]	; (8006d30 <HAL_DMA_Start_IT+0x4a0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d03b      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a71      	ldr	r2, [pc, #452]	; (8006d34 <HAL_DMA_Start_IT+0x4a4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d036      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a70      	ldr	r2, [pc, #448]	; (8006d38 <HAL_DMA_Start_IT+0x4a8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d031      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a6e      	ldr	r2, [pc, #440]	; (8006d3c <HAL_DMA_Start_IT+0x4ac>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02c      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a6d      	ldr	r2, [pc, #436]	; (8006d40 <HAL_DMA_Start_IT+0x4b0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d027      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a6b      	ldr	r2, [pc, #428]	; (8006d44 <HAL_DMA_Start_IT+0x4b4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a6a      	ldr	r2, [pc, #424]	; (8006d48 <HAL_DMA_Start_IT+0x4b8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01d      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a68      	ldr	r2, [pc, #416]	; (8006d4c <HAL_DMA_Start_IT+0x4bc>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a67      	ldr	r2, [pc, #412]	; (8006d50 <HAL_DMA_Start_IT+0x4c0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a65      	ldr	r2, [pc, #404]	; (8006d54 <HAL_DMA_Start_IT+0x4c4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a64      	ldr	r2, [pc, #400]	; (8006d58 <HAL_DMA_Start_IT+0x4c8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a62      	ldr	r2, [pc, #392]	; (8006d5c <HAL_DMA_Start_IT+0x4cc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_DMA_Start_IT+0x350>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a61      	ldr	r2, [pc, #388]	; (8006d60 <HAL_DMA_Start_IT+0x4d0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_DMA_Start_IT+0x354>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_DMA_Start_IT+0x356>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01a      	beq.n	8006c20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a37      	ldr	r2, [pc, #220]	; (8006d04 <HAL_DMA_Start_IT+0x474>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d04a      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a36      	ldr	r2, [pc, #216]	; (8006d08 <HAL_DMA_Start_IT+0x478>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d045      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a34      	ldr	r2, [pc, #208]	; (8006d0c <HAL_DMA_Start_IT+0x47c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d040      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a33      	ldr	r2, [pc, #204]	; (8006d10 <HAL_DMA_Start_IT+0x480>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d03b      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a31      	ldr	r2, [pc, #196]	; (8006d14 <HAL_DMA_Start_IT+0x484>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d036      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a30      	ldr	r2, [pc, #192]	; (8006d18 <HAL_DMA_Start_IT+0x488>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d031      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_DMA_Start_IT+0x48c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d02c      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2d      	ldr	r2, [pc, #180]	; (8006d20 <HAL_DMA_Start_IT+0x490>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d027      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2b      	ldr	r2, [pc, #172]	; (8006d24 <HAL_DMA_Start_IT+0x494>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d022      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <HAL_DMA_Start_IT+0x498>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d01d      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <HAL_DMA_Start_IT+0x49c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d018      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a27      	ldr	r2, [pc, #156]	; (8006d30 <HAL_DMA_Start_IT+0x4a0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d013      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a25      	ldr	r2, [pc, #148]	; (8006d34 <HAL_DMA_Start_IT+0x4a4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <HAL_DMA_Start_IT+0x4a8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a22      	ldr	r2, [pc, #136]	; (8006d3c <HAL_DMA_Start_IT+0x4ac>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_DMA_Start_IT+0x430>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a21      	ldr	r2, [pc, #132]	; (8006d40 <HAL_DMA_Start_IT+0x4b0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d108      	bne.n	8006cd2 <HAL_DMA_Start_IT+0x442>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	e012      	b.n	8006cf8 <HAL_DMA_Start_IT+0x468>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0201 	orr.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e009      	b.n	8006cf8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40020010 	.word	0x40020010
 8006d08:	40020028 	.word	0x40020028
 8006d0c:	40020040 	.word	0x40020040
 8006d10:	40020058 	.word	0x40020058
 8006d14:	40020070 	.word	0x40020070
 8006d18:	40020088 	.word	0x40020088
 8006d1c:	400200a0 	.word	0x400200a0
 8006d20:	400200b8 	.word	0x400200b8
 8006d24:	40020410 	.word	0x40020410
 8006d28:	40020428 	.word	0x40020428
 8006d2c:	40020440 	.word	0x40020440
 8006d30:	40020458 	.word	0x40020458
 8006d34:	40020470 	.word	0x40020470
 8006d38:	40020488 	.word	0x40020488
 8006d3c:	400204a0 	.word	0x400204a0
 8006d40:	400204b8 	.word	0x400204b8
 8006d44:	58025408 	.word	0x58025408
 8006d48:	5802541c 	.word	0x5802541c
 8006d4c:	58025430 	.word	0x58025430
 8006d50:	58025444 	.word	0x58025444
 8006d54:	58025458 	.word	0x58025458
 8006d58:	5802546c 	.word	0x5802546c
 8006d5c:	58025480 	.word	0x58025480
 8006d60:	58025494 	.word	0x58025494

08006d64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	; 0x28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d70:	4b67      	ldr	r3, [pc, #412]	; (8006f10 <HAL_DMA_IRQHandler+0x1ac>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a67      	ldr	r2, [pc, #412]	; (8006f14 <HAL_DMA_IRQHandler+0x1b0>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	0a9b      	lsrs	r3, r3, #10
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a5f      	ldr	r2, [pc, #380]	; (8006f18 <HAL_DMA_IRQHandler+0x1b4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04a      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a5d      	ldr	r2, [pc, #372]	; (8006f1c <HAL_DMA_IRQHandler+0x1b8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d045      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a5c      	ldr	r2, [pc, #368]	; (8006f20 <HAL_DMA_IRQHandler+0x1bc>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d040      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a5a      	ldr	r2, [pc, #360]	; (8006f24 <HAL_DMA_IRQHandler+0x1c0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a59      	ldr	r2, [pc, #356]	; (8006f28 <HAL_DMA_IRQHandler+0x1c4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d036      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a57      	ldr	r2, [pc, #348]	; (8006f2c <HAL_DMA_IRQHandler+0x1c8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d031      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a56      	ldr	r2, [pc, #344]	; (8006f30 <HAL_DMA_IRQHandler+0x1cc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a54      	ldr	r2, [pc, #336]	; (8006f34 <HAL_DMA_IRQHandler+0x1d0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d027      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a53      	ldr	r2, [pc, #332]	; (8006f38 <HAL_DMA_IRQHandler+0x1d4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a51      	ldr	r2, [pc, #324]	; (8006f3c <HAL_DMA_IRQHandler+0x1d8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a50      	ldr	r2, [pc, #320]	; (8006f40 <HAL_DMA_IRQHandler+0x1dc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a4e      	ldr	r2, [pc, #312]	; (8006f44 <HAL_DMA_IRQHandler+0x1e0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a4d      	ldr	r2, [pc, #308]	; (8006f48 <HAL_DMA_IRQHandler+0x1e4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a4b      	ldr	r2, [pc, #300]	; (8006f4c <HAL_DMA_IRQHandler+0x1e8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a4a      	ldr	r2, [pc, #296]	; (8006f50 <HAL_DMA_IRQHandler+0x1ec>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_DMA_IRQHandler+0xd2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a48      	ldr	r2, [pc, #288]	; (8006f54 <HAL_DMA_IRQHandler+0x1f0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d101      	bne.n	8006e3a <HAL_DMA_IRQHandler+0xd6>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <HAL_DMA_IRQHandler+0xd8>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 842b 	beq.w	8007698 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80a2 	beq.w	8006f9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2e      	ldr	r2, [pc, #184]	; (8006f18 <HAL_DMA_IRQHandler+0x1b4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d04a      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2d      	ldr	r2, [pc, #180]	; (8006f1c <HAL_DMA_IRQHandler+0x1b8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d045      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a2b      	ldr	r2, [pc, #172]	; (8006f20 <HAL_DMA_IRQHandler+0x1bc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d040      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <HAL_DMA_IRQHandler+0x1c0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d03b      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a28      	ldr	r2, [pc, #160]	; (8006f28 <HAL_DMA_IRQHandler+0x1c4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d036      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <HAL_DMA_IRQHandler+0x1c8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d031      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a25      	ldr	r2, [pc, #148]	; (8006f30 <HAL_DMA_IRQHandler+0x1cc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02c      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <HAL_DMA_IRQHandler+0x1d0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d027      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <HAL_DMA_IRQHandler+0x1d4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d022      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <HAL_DMA_IRQHandler+0x1d8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d01d      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_DMA_IRQHandler+0x1dc>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d018      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <HAL_DMA_IRQHandler+0x1e0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <HAL_DMA_IRQHandler+0x1e4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00e      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_DMA_IRQHandler+0x1e8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d009      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <HAL_DMA_IRQHandler+0x1ec>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x194>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_DMA_IRQHandler+0x1f0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d12f      	bne.n	8006f58 <HAL_DMA_IRQHandler+0x1f4>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	e02e      	b.n	8006f6c <HAL_DMA_IRQHandler+0x208>
 8006f0e:	bf00      	nop
 8006f10:	24000000 	.word	0x24000000
 8006f14:	1b4e81b5 	.word	0x1b4e81b5
 8006f18:	40020010 	.word	0x40020010
 8006f1c:	40020028 	.word	0x40020028
 8006f20:	40020040 	.word	0x40020040
 8006f24:	40020058 	.word	0x40020058
 8006f28:	40020070 	.word	0x40020070
 8006f2c:	40020088 	.word	0x40020088
 8006f30:	400200a0 	.word	0x400200a0
 8006f34:	400200b8 	.word	0x400200b8
 8006f38:	40020410 	.word	0x40020410
 8006f3c:	40020428 	.word	0x40020428
 8006f40:	40020440 	.word	0x40020440
 8006f44:	40020458 	.word	0x40020458
 8006f48:	40020470 	.word	0x40020470
 8006f4c:	40020488 	.word	0x40020488
 8006f50:	400204a0 	.word	0x400204a0
 8006f54:	400204b8 	.word	0x400204b8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d015      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0204 	bic.w	r2, r2, #4
 8006f7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2208      	movs	r2, #8
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	f043 0201 	orr.w	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d06e      	beq.n	8007090 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a69      	ldr	r2, [pc, #420]	; (800715c <HAL_DMA_IRQHandler+0x3f8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d04a      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a67      	ldr	r2, [pc, #412]	; (8007160 <HAL_DMA_IRQHandler+0x3fc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d045      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a66      	ldr	r2, [pc, #408]	; (8007164 <HAL_DMA_IRQHandler+0x400>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d040      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a64      	ldr	r2, [pc, #400]	; (8007168 <HAL_DMA_IRQHandler+0x404>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d03b      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a63      	ldr	r2, [pc, #396]	; (800716c <HAL_DMA_IRQHandler+0x408>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d036      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a61      	ldr	r2, [pc, #388]	; (8007170 <HAL_DMA_IRQHandler+0x40c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d031      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a60      	ldr	r2, [pc, #384]	; (8007174 <HAL_DMA_IRQHandler+0x410>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d02c      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a5e      	ldr	r2, [pc, #376]	; (8007178 <HAL_DMA_IRQHandler+0x414>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d027      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a5d      	ldr	r2, [pc, #372]	; (800717c <HAL_DMA_IRQHandler+0x418>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d022      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a5b      	ldr	r2, [pc, #364]	; (8007180 <HAL_DMA_IRQHandler+0x41c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a5a      	ldr	r2, [pc, #360]	; (8007184 <HAL_DMA_IRQHandler+0x420>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a58      	ldr	r2, [pc, #352]	; (8007188 <HAL_DMA_IRQHandler+0x424>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a57      	ldr	r2, [pc, #348]	; (800718c <HAL_DMA_IRQHandler+0x428>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a55      	ldr	r2, [pc, #340]	; (8007190 <HAL_DMA_IRQHandler+0x42c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a54      	ldr	r2, [pc, #336]	; (8007194 <HAL_DMA_IRQHandler+0x430>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2ee>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a52      	ldr	r2, [pc, #328]	; (8007198 <HAL_DMA_IRQHandler+0x434>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10a      	bne.n	8007068 <HAL_DMA_IRQHandler+0x304>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705c:	2b00      	cmp	r3, #0
 800705e:	bf14      	ite	ne
 8007060:	2301      	movne	r3, #1
 8007062:	2300      	moveq	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	e003      	b.n	8007070 <HAL_DMA_IRQHandler+0x30c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00d      	beq.n	8007090 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2201      	movs	r2, #1
 800707e:	409a      	lsls	r2, r3
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	f043 0202 	orr.w	r2, r3, #2
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2204      	movs	r2, #4
 800709a:	409a      	lsls	r2, r3
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 808f 	beq.w	80071c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2c      	ldr	r2, [pc, #176]	; (800715c <HAL_DMA_IRQHandler+0x3f8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d04a      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2a      	ldr	r2, [pc, #168]	; (8007160 <HAL_DMA_IRQHandler+0x3fc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d045      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a29      	ldr	r2, [pc, #164]	; (8007164 <HAL_DMA_IRQHandler+0x400>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d040      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a27      	ldr	r2, [pc, #156]	; (8007168 <HAL_DMA_IRQHandler+0x404>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d03b      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a26      	ldr	r2, [pc, #152]	; (800716c <HAL_DMA_IRQHandler+0x408>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d036      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a24      	ldr	r2, [pc, #144]	; (8007170 <HAL_DMA_IRQHandler+0x40c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d031      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a23      	ldr	r2, [pc, #140]	; (8007174 <HAL_DMA_IRQHandler+0x410>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d02c      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a21      	ldr	r2, [pc, #132]	; (8007178 <HAL_DMA_IRQHandler+0x414>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d027      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a20      	ldr	r2, [pc, #128]	; (800717c <HAL_DMA_IRQHandler+0x418>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <HAL_DMA_IRQHandler+0x41c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01d      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <HAL_DMA_IRQHandler+0x420>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d018      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1b      	ldr	r2, [pc, #108]	; (8007188 <HAL_DMA_IRQHandler+0x424>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1a      	ldr	r2, [pc, #104]	; (800718c <HAL_DMA_IRQHandler+0x428>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a18      	ldr	r2, [pc, #96]	; (8007190 <HAL_DMA_IRQHandler+0x42c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d009      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a17      	ldr	r2, [pc, #92]	; (8007194 <HAL_DMA_IRQHandler+0x430>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d004      	beq.n	8007146 <HAL_DMA_IRQHandler+0x3e2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a15      	ldr	r2, [pc, #84]	; (8007198 <HAL_DMA_IRQHandler+0x434>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d12a      	bne.n	800719c <HAL_DMA_IRQHandler+0x438>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e023      	b.n	80071a4 <HAL_DMA_IRQHandler+0x440>
 800715c:	40020010 	.word	0x40020010
 8007160:	40020028 	.word	0x40020028
 8007164:	40020040 	.word	0x40020040
 8007168:	40020058 	.word	0x40020058
 800716c:	40020070 	.word	0x40020070
 8007170:	40020088 	.word	0x40020088
 8007174:	400200a0 	.word	0x400200a0
 8007178:	400200b8 	.word	0x400200b8
 800717c:	40020410 	.word	0x40020410
 8007180:	40020428 	.word	0x40020428
 8007184:	40020440 	.word	0x40020440
 8007188:	40020458 	.word	0x40020458
 800718c:	40020470 	.word	0x40020470
 8007190:	40020488 	.word	0x40020488
 8007194:	400204a0 	.word	0x400204a0
 8007198:	400204b8 	.word	0x400204b8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00d      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2204      	movs	r2, #4
 80071b2:	409a      	lsls	r2, r3
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	f043 0204 	orr.w	r2, r3, #4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2210      	movs	r2, #16
 80071ce:	409a      	lsls	r2, r3
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a6 	beq.w	8007326 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a85      	ldr	r2, [pc, #532]	; (80073f4 <HAL_DMA_IRQHandler+0x690>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d04a      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a83      	ldr	r2, [pc, #524]	; (80073f8 <HAL_DMA_IRQHandler+0x694>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d045      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a82      	ldr	r2, [pc, #520]	; (80073fc <HAL_DMA_IRQHandler+0x698>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d040      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a80      	ldr	r2, [pc, #512]	; (8007400 <HAL_DMA_IRQHandler+0x69c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d03b      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a7f      	ldr	r2, [pc, #508]	; (8007404 <HAL_DMA_IRQHandler+0x6a0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d036      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a7d      	ldr	r2, [pc, #500]	; (8007408 <HAL_DMA_IRQHandler+0x6a4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d031      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a7c      	ldr	r2, [pc, #496]	; (800740c <HAL_DMA_IRQHandler+0x6a8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d02c      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a7a      	ldr	r2, [pc, #488]	; (8007410 <HAL_DMA_IRQHandler+0x6ac>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d027      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a79      	ldr	r2, [pc, #484]	; (8007414 <HAL_DMA_IRQHandler+0x6b0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d022      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a77      	ldr	r2, [pc, #476]	; (8007418 <HAL_DMA_IRQHandler+0x6b4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d01d      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a76      	ldr	r2, [pc, #472]	; (800741c <HAL_DMA_IRQHandler+0x6b8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d018      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a74      	ldr	r2, [pc, #464]	; (8007420 <HAL_DMA_IRQHandler+0x6bc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a73      	ldr	r2, [pc, #460]	; (8007424 <HAL_DMA_IRQHandler+0x6c0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00e      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a71      	ldr	r2, [pc, #452]	; (8007428 <HAL_DMA_IRQHandler+0x6c4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d009      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a70      	ldr	r2, [pc, #448]	; (800742c <HAL_DMA_IRQHandler+0x6c8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_DMA_IRQHandler+0x516>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6e      	ldr	r2, [pc, #440]	; (8007430 <HAL_DMA_IRQHandler+0x6cc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d10a      	bne.n	8007290 <HAL_DMA_IRQHandler+0x52c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e009      	b.n	80072a4 <HAL_DMA_IRQHandler+0x540>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d03e      	beq.n	8007326 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2210      	movs	r2, #16
 80072b2:	409a      	lsls	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d018      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d108      	bne.n	80072e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d024      	beq.n	8007326 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
 80072e4:	e01f      	b.n	8007326 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01b      	beq.n	8007326 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
 80072f6:	e016      	b.n	8007326 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d107      	bne.n	8007316 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0208 	bic.w	r2, r2, #8
 8007314:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2220      	movs	r2, #32
 8007330:	409a      	lsls	r2, r3
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8110 	beq.w	800755c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <HAL_DMA_IRQHandler+0x690>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d04a      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2b      	ldr	r2, [pc, #172]	; (80073f8 <HAL_DMA_IRQHandler+0x694>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d045      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a29      	ldr	r2, [pc, #164]	; (80073fc <HAL_DMA_IRQHandler+0x698>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d040      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a28      	ldr	r2, [pc, #160]	; (8007400 <HAL_DMA_IRQHandler+0x69c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d03b      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a26      	ldr	r2, [pc, #152]	; (8007404 <HAL_DMA_IRQHandler+0x6a0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d036      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a25      	ldr	r2, [pc, #148]	; (8007408 <HAL_DMA_IRQHandler+0x6a4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d031      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a23      	ldr	r2, [pc, #140]	; (800740c <HAL_DMA_IRQHandler+0x6a8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d02c      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a22      	ldr	r2, [pc, #136]	; (8007410 <HAL_DMA_IRQHandler+0x6ac>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d027      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a20      	ldr	r2, [pc, #128]	; (8007414 <HAL_DMA_IRQHandler+0x6b0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d022      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1f      	ldr	r2, [pc, #124]	; (8007418 <HAL_DMA_IRQHandler+0x6b4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d01d      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1d      	ldr	r2, [pc, #116]	; (800741c <HAL_DMA_IRQHandler+0x6b8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <HAL_DMA_IRQHandler+0x6bc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <HAL_DMA_IRQHandler+0x6c0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a19      	ldr	r2, [pc, #100]	; (8007428 <HAL_DMA_IRQHandler+0x6c4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a17      	ldr	r2, [pc, #92]	; (800742c <HAL_DMA_IRQHandler+0x6c8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_DMA_IRQHandler+0x678>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a16      	ldr	r2, [pc, #88]	; (8007430 <HAL_DMA_IRQHandler+0x6cc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d12b      	bne.n	8007434 <HAL_DMA_IRQHandler+0x6d0>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bf14      	ite	ne
 80073ea:	2301      	movne	r3, #1
 80073ec:	2300      	moveq	r3, #0
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	e02a      	b.n	8007448 <HAL_DMA_IRQHandler+0x6e4>
 80073f2:	bf00      	nop
 80073f4:	40020010 	.word	0x40020010
 80073f8:	40020028 	.word	0x40020028
 80073fc:	40020040 	.word	0x40020040
 8007400:	40020058 	.word	0x40020058
 8007404:	40020070 	.word	0x40020070
 8007408:	40020088 	.word	0x40020088
 800740c:	400200a0 	.word	0x400200a0
 8007410:	400200b8 	.word	0x400200b8
 8007414:	40020410 	.word	0x40020410
 8007418:	40020428 	.word	0x40020428
 800741c:	40020440 	.word	0x40020440
 8007420:	40020458 	.word	0x40020458
 8007424:	40020470 	.word	0x40020470
 8007428:	40020488 	.word	0x40020488
 800742c:	400204a0 	.word	0x400204a0
 8007430:	400204b8 	.word	0x400204b8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	bf14      	ite	ne
 8007442:	2301      	movne	r3, #1
 8007444:	2300      	moveq	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8087 	beq.w	800755c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2220      	movs	r2, #32
 8007458:	409a      	lsls	r2, r3
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b04      	cmp	r3, #4
 8007468:	d139      	bne.n	80074de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0216 	bic.w	r2, r2, #22
 8007478:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007488:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <HAL_DMA_IRQHandler+0x736>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0208 	bic.w	r2, r2, #8
 80074a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	223f      	movs	r2, #63	; 0x3f
 80074b4:	409a      	lsls	r2, r3
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 834a 	beq.w	8007b68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
          }
          return;
 80074dc:	e344      	b.n	8007b68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d018      	beq.n	800751e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02c      	beq.n	800755c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
 800750a:	e027      	b.n	800755c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d023      	beq.n	800755c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
 800751c:	e01e      	b.n	800755c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10f      	bne.n	800754c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0210 	bic.w	r2, r2, #16
 800753a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8306 	beq.w	8007b72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8088 	beq.w	8007684 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a7a      	ldr	r2, [pc, #488]	; (800776c <HAL_DMA_IRQHandler+0xa08>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d04a      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a79      	ldr	r2, [pc, #484]	; (8007770 <HAL_DMA_IRQHandler+0xa0c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d045      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a77      	ldr	r2, [pc, #476]	; (8007774 <HAL_DMA_IRQHandler+0xa10>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d040      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a76      	ldr	r2, [pc, #472]	; (8007778 <HAL_DMA_IRQHandler+0xa14>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d03b      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a74      	ldr	r2, [pc, #464]	; (800777c <HAL_DMA_IRQHandler+0xa18>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d036      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a73      	ldr	r2, [pc, #460]	; (8007780 <HAL_DMA_IRQHandler+0xa1c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d031      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a71      	ldr	r2, [pc, #452]	; (8007784 <HAL_DMA_IRQHandler+0xa20>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d02c      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a70      	ldr	r2, [pc, #448]	; (8007788 <HAL_DMA_IRQHandler+0xa24>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d027      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a6e      	ldr	r2, [pc, #440]	; (800778c <HAL_DMA_IRQHandler+0xa28>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d022      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a6d      	ldr	r2, [pc, #436]	; (8007790 <HAL_DMA_IRQHandler+0xa2c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d01d      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a6b      	ldr	r2, [pc, #428]	; (8007794 <HAL_DMA_IRQHandler+0xa30>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d018      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a6a      	ldr	r2, [pc, #424]	; (8007798 <HAL_DMA_IRQHandler+0xa34>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d013      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a68      	ldr	r2, [pc, #416]	; (800779c <HAL_DMA_IRQHandler+0xa38>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d00e      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a67      	ldr	r2, [pc, #412]	; (80077a0 <HAL_DMA_IRQHandler+0xa3c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d009      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a65      	ldr	r2, [pc, #404]	; (80077a4 <HAL_DMA_IRQHandler+0xa40>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_DMA_IRQHandler+0x8b8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a64      	ldr	r2, [pc, #400]	; (80077a8 <HAL_DMA_IRQHandler+0xa44>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d108      	bne.n	800762e <HAL_DMA_IRQHandler+0x8ca>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0201 	bic.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	e007      	b.n	800763e <HAL_DMA_IRQHandler+0x8da>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007646:	429a      	cmp	r2, r3
 8007648:	d307      	bcc.n	800765a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f2      	bne.n	800763e <HAL_DMA_IRQHandler+0x8da>
 8007658:	e000      	b.n	800765c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800765a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2203      	movs	r2, #3
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007672:	e003      	b.n	800767c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8272 	beq.w	8007b72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
 8007696:	e26c      	b.n	8007b72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a43      	ldr	r2, [pc, #268]	; (80077ac <HAL_DMA_IRQHandler+0xa48>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a42      	ldr	r2, [pc, #264]	; (80077b0 <HAL_DMA_IRQHandler+0xa4c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d01d      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a40      	ldr	r2, [pc, #256]	; (80077b4 <HAL_DMA_IRQHandler+0xa50>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a3f      	ldr	r2, [pc, #252]	; (80077b8 <HAL_DMA_IRQHandler+0xa54>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a3d      	ldr	r2, [pc, #244]	; (80077bc <HAL_DMA_IRQHandler+0xa58>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a3c      	ldr	r2, [pc, #240]	; (80077c0 <HAL_DMA_IRQHandler+0xa5c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a3a      	ldr	r2, [pc, #232]	; (80077c4 <HAL_DMA_IRQHandler+0xa60>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_DMA_IRQHandler+0x984>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a39      	ldr	r2, [pc, #228]	; (80077c8 <HAL_DMA_IRQHandler+0xa64>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d101      	bne.n	80076ec <HAL_DMA_IRQHandler+0x988>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <HAL_DMA_IRQHandler+0x98a>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 823f 	beq.w	8007b72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2204      	movs	r2, #4
 8007706:	409a      	lsls	r2, r3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80cd 	beq.w	80078ac <HAL_DMA_IRQHandler+0xb48>
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80c7 	beq.w	80078ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2204      	movs	r2, #4
 8007728:	409a      	lsls	r2, r3
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d049      	beq.n	80077cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d109      	bne.n	8007756 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8210 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007754:	e20a      	b.n	8007b6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8206 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007768:	e200      	b.n	8007b6c <HAL_DMA_IRQHandler+0xe08>
 800776a:	bf00      	nop
 800776c:	40020010 	.word	0x40020010
 8007770:	40020028 	.word	0x40020028
 8007774:	40020040 	.word	0x40020040
 8007778:	40020058 	.word	0x40020058
 800777c:	40020070 	.word	0x40020070
 8007780:	40020088 	.word	0x40020088
 8007784:	400200a0 	.word	0x400200a0
 8007788:	400200b8 	.word	0x400200b8
 800778c:	40020410 	.word	0x40020410
 8007790:	40020428 	.word	0x40020428
 8007794:	40020440 	.word	0x40020440
 8007798:	40020458 	.word	0x40020458
 800779c:	40020470 	.word	0x40020470
 80077a0:	40020488 	.word	0x40020488
 80077a4:	400204a0 	.word	0x400204a0
 80077a8:	400204b8 	.word	0x400204b8
 80077ac:	58025408 	.word	0x58025408
 80077b0:	5802541c 	.word	0x5802541c
 80077b4:	58025430 	.word	0x58025430
 80077b8:	58025444 	.word	0x58025444
 80077bc:	58025458 	.word	0x58025458
 80077c0:	5802546c 	.word	0x5802546c
 80077c4:	58025480 	.word	0x58025480
 80077c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d160      	bne.n	8007898 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a7f      	ldr	r2, [pc, #508]	; (80079d8 <HAL_DMA_IRQHandler+0xc74>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d04a      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a7d      	ldr	r2, [pc, #500]	; (80079dc <HAL_DMA_IRQHandler+0xc78>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d045      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a7c      	ldr	r2, [pc, #496]	; (80079e0 <HAL_DMA_IRQHandler+0xc7c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d040      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a7a      	ldr	r2, [pc, #488]	; (80079e4 <HAL_DMA_IRQHandler+0xc80>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d03b      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a79      	ldr	r2, [pc, #484]	; (80079e8 <HAL_DMA_IRQHandler+0xc84>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d036      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a77      	ldr	r2, [pc, #476]	; (80079ec <HAL_DMA_IRQHandler+0xc88>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d031      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a76      	ldr	r2, [pc, #472]	; (80079f0 <HAL_DMA_IRQHandler+0xc8c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d02c      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a74      	ldr	r2, [pc, #464]	; (80079f4 <HAL_DMA_IRQHandler+0xc90>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d027      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a73      	ldr	r2, [pc, #460]	; (80079f8 <HAL_DMA_IRQHandler+0xc94>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a71      	ldr	r2, [pc, #452]	; (80079fc <HAL_DMA_IRQHandler+0xc98>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01d      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a70      	ldr	r2, [pc, #448]	; (8007a00 <HAL_DMA_IRQHandler+0xc9c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a6e      	ldr	r2, [pc, #440]	; (8007a04 <HAL_DMA_IRQHandler+0xca0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a6d      	ldr	r2, [pc, #436]	; (8007a08 <HAL_DMA_IRQHandler+0xca4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a6b      	ldr	r2, [pc, #428]	; (8007a0c <HAL_DMA_IRQHandler+0xca8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a6a      	ldr	r2, [pc, #424]	; (8007a10 <HAL_DMA_IRQHandler+0xcac>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_DMA_IRQHandler+0xb12>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a68      	ldr	r2, [pc, #416]	; (8007a14 <HAL_DMA_IRQHandler+0xcb0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d108      	bne.n	8007888 <HAL_DMA_IRQHandler+0xb24>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0208 	bic.w	r2, r2, #8
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e007      	b.n	8007898 <HAL_DMA_IRQHandler+0xb34>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0204 	bic.w	r2, r2, #4
 8007896:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8165 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078aa:	e15f      	b.n	8007b6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2202      	movs	r2, #2
 80078b6:	409a      	lsls	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80c5 	beq.w	8007a4c <HAL_DMA_IRQHandler+0xce8>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 80bf 	beq.w	8007a4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	2202      	movs	r2, #2
 80078d8:	409a      	lsls	r2, r3
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d018      	beq.n	800791a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 813a 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007904:	e134      	b.n	8007b70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8130 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007918:	e12a      	b.n	8007b70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	f040 8089 	bne.w	8007a38 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2b      	ldr	r2, [pc, #172]	; (80079d8 <HAL_DMA_IRQHandler+0xc74>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d04a      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a29      	ldr	r2, [pc, #164]	; (80079dc <HAL_DMA_IRQHandler+0xc78>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d045      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <HAL_DMA_IRQHandler+0xc7c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d040      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a26      	ldr	r2, [pc, #152]	; (80079e4 <HAL_DMA_IRQHandler+0xc80>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d03b      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a25      	ldr	r2, [pc, #148]	; (80079e8 <HAL_DMA_IRQHandler+0xc84>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d036      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a23      	ldr	r2, [pc, #140]	; (80079ec <HAL_DMA_IRQHandler+0xc88>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d031      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a22      	ldr	r2, [pc, #136]	; (80079f0 <HAL_DMA_IRQHandler+0xc8c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d02c      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a20      	ldr	r2, [pc, #128]	; (80079f4 <HAL_DMA_IRQHandler+0xc90>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d027      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <HAL_DMA_IRQHandler+0xc94>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d022      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a1d      	ldr	r2, [pc, #116]	; (80079fc <HAL_DMA_IRQHandler+0xc98>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d01d      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <HAL_DMA_IRQHandler+0xc9c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d018      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1a      	ldr	r2, [pc, #104]	; (8007a04 <HAL_DMA_IRQHandler+0xca0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d013      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <HAL_DMA_IRQHandler+0xca4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00e      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <HAL_DMA_IRQHandler+0xca8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d009      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <HAL_DMA_IRQHandler+0xcac>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d004      	beq.n	80079c6 <HAL_DMA_IRQHandler+0xc62>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a14      	ldr	r2, [pc, #80]	; (8007a14 <HAL_DMA_IRQHandler+0xcb0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d128      	bne.n	8007a18 <HAL_DMA_IRQHandler+0xcb4>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0214 	bic.w	r2, r2, #20
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	e027      	b.n	8007a28 <HAL_DMA_IRQHandler+0xcc4>
 80079d8:	40020010 	.word	0x40020010
 80079dc:	40020028 	.word	0x40020028
 80079e0:	40020040 	.word	0x40020040
 80079e4:	40020058 	.word	0x40020058
 80079e8:	40020070 	.word	0x40020070
 80079ec:	40020088 	.word	0x40020088
 80079f0:	400200a0 	.word	0x400200a0
 80079f4:	400200b8 	.word	0x400200b8
 80079f8:	40020410 	.word	0x40020410
 80079fc:	40020428 	.word	0x40020428
 8007a00:	40020440 	.word	0x40020440
 8007a04:	40020458 	.word	0x40020458
 8007a08:	40020470 	.word	0x40020470
 8007a0c:	40020488 	.word	0x40020488
 8007a10:	400204a0 	.word	0x400204a0
 8007a14:	400204b8 	.word	0x400204b8
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 020a 	bic.w	r2, r2, #10
 8007a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8097 	beq.w	8007b70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a4a:	e091      	b.n	8007b70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a50:	f003 031f 	and.w	r3, r3, #31
 8007a54:	2208      	movs	r2, #8
 8007a56:	409a      	lsls	r2, r3
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8088 	beq.w	8007b72 <HAL_DMA_IRQHandler+0xe0e>
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8082 	beq.w	8007b72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a41      	ldr	r2, [pc, #260]	; (8007b78 <HAL_DMA_IRQHandler+0xe14>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d04a      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3f      	ldr	r2, [pc, #252]	; (8007b7c <HAL_DMA_IRQHandler+0xe18>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d045      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a3e      	ldr	r2, [pc, #248]	; (8007b80 <HAL_DMA_IRQHandler+0xe1c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d040      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a3c      	ldr	r2, [pc, #240]	; (8007b84 <HAL_DMA_IRQHandler+0xe20>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d03b      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a3b      	ldr	r2, [pc, #236]	; (8007b88 <HAL_DMA_IRQHandler+0xe24>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d036      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a39      	ldr	r2, [pc, #228]	; (8007b8c <HAL_DMA_IRQHandler+0xe28>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d031      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a38      	ldr	r2, [pc, #224]	; (8007b90 <HAL_DMA_IRQHandler+0xe2c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d02c      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a36      	ldr	r2, [pc, #216]	; (8007b94 <HAL_DMA_IRQHandler+0xe30>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d027      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a35      	ldr	r2, [pc, #212]	; (8007b98 <HAL_DMA_IRQHandler+0xe34>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d022      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a33      	ldr	r2, [pc, #204]	; (8007b9c <HAL_DMA_IRQHandler+0xe38>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d01d      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a32      	ldr	r2, [pc, #200]	; (8007ba0 <HAL_DMA_IRQHandler+0xe3c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d018      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a30      	ldr	r2, [pc, #192]	; (8007ba4 <HAL_DMA_IRQHandler+0xe40>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2f      	ldr	r2, [pc, #188]	; (8007ba8 <HAL_DMA_IRQHandler+0xe44>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00e      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2d      	ldr	r2, [pc, #180]	; (8007bac <HAL_DMA_IRQHandler+0xe48>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a2c      	ldr	r2, [pc, #176]	; (8007bb0 <HAL_DMA_IRQHandler+0xe4c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_DMA_IRQHandler+0xdaa>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2a      	ldr	r2, [pc, #168]	; (8007bb4 <HAL_DMA_IRQHandler+0xe50>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d108      	bne.n	8007b20 <HAL_DMA_IRQHandler+0xdbc>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 021c 	bic.w	r2, r2, #28
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e007      	b.n	8007b30 <HAL_DMA_IRQHandler+0xdcc>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 020e 	bic.w	r2, r2, #14
 8007b2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	2201      	movs	r2, #1
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
 8007b66:	e004      	b.n	8007b72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007b68:	bf00      	nop
 8007b6a:	e002      	b.n	8007b72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b72:	3728      	adds	r7, #40	; 0x28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40020010 	.word	0x40020010
 8007b7c:	40020028 	.word	0x40020028
 8007b80:	40020040 	.word	0x40020040
 8007b84:	40020058 	.word	0x40020058
 8007b88:	40020070 	.word	0x40020070
 8007b8c:	40020088 	.word	0x40020088
 8007b90:	400200a0 	.word	0x400200a0
 8007b94:	400200b8 	.word	0x400200b8
 8007b98:	40020410 	.word	0x40020410
 8007b9c:	40020428 	.word	0x40020428
 8007ba0:	40020440 	.word	0x40020440
 8007ba4:	40020458 	.word	0x40020458
 8007ba8:	40020470 	.word	0x40020470
 8007bac:	40020488 	.word	0x40020488
 8007bb0:	400204a0 	.word	0x400204a0
 8007bb4:	400204b8 	.word	0x400204b8

08007bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a7f      	ldr	r2, [pc, #508]	; (8007dd4 <DMA_SetConfig+0x21c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d072      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a7d      	ldr	r2, [pc, #500]	; (8007dd8 <DMA_SetConfig+0x220>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d06d      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a7c      	ldr	r2, [pc, #496]	; (8007ddc <DMA_SetConfig+0x224>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d068      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a7a      	ldr	r2, [pc, #488]	; (8007de0 <DMA_SetConfig+0x228>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d063      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a79      	ldr	r2, [pc, #484]	; (8007de4 <DMA_SetConfig+0x22c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d05e      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a77      	ldr	r2, [pc, #476]	; (8007de8 <DMA_SetConfig+0x230>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d059      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a76      	ldr	r2, [pc, #472]	; (8007dec <DMA_SetConfig+0x234>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d054      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a74      	ldr	r2, [pc, #464]	; (8007df0 <DMA_SetConfig+0x238>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d04f      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a73      	ldr	r2, [pc, #460]	; (8007df4 <DMA_SetConfig+0x23c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d04a      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a71      	ldr	r2, [pc, #452]	; (8007df8 <DMA_SetConfig+0x240>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d045      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a70      	ldr	r2, [pc, #448]	; (8007dfc <DMA_SetConfig+0x244>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d040      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a6e      	ldr	r2, [pc, #440]	; (8007e00 <DMA_SetConfig+0x248>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d03b      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a6d      	ldr	r2, [pc, #436]	; (8007e04 <DMA_SetConfig+0x24c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d036      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a6b      	ldr	r2, [pc, #428]	; (8007e08 <DMA_SetConfig+0x250>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d031      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a6a      	ldr	r2, [pc, #424]	; (8007e0c <DMA_SetConfig+0x254>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d02c      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a68      	ldr	r2, [pc, #416]	; (8007e10 <DMA_SetConfig+0x258>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d027      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a67      	ldr	r2, [pc, #412]	; (8007e14 <DMA_SetConfig+0x25c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d022      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a65      	ldr	r2, [pc, #404]	; (8007e18 <DMA_SetConfig+0x260>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d01d      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a64      	ldr	r2, [pc, #400]	; (8007e1c <DMA_SetConfig+0x264>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d018      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a62      	ldr	r2, [pc, #392]	; (8007e20 <DMA_SetConfig+0x268>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d013      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a61      	ldr	r2, [pc, #388]	; (8007e24 <DMA_SetConfig+0x26c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00e      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5f      	ldr	r2, [pc, #380]	; (8007e28 <DMA_SetConfig+0x270>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a5e      	ldr	r2, [pc, #376]	; (8007e2c <DMA_SetConfig+0x274>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <DMA_SetConfig+0x10a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a5c      	ldr	r2, [pc, #368]	; (8007e30 <DMA_SetConfig+0x278>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d101      	bne.n	8007cc6 <DMA_SetConfig+0x10e>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <DMA_SetConfig+0x110>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00d      	beq.n	8007ce8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ce6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a39      	ldr	r2, [pc, #228]	; (8007dd4 <DMA_SetConfig+0x21c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d04a      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a38      	ldr	r2, [pc, #224]	; (8007dd8 <DMA_SetConfig+0x220>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d045      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a36      	ldr	r2, [pc, #216]	; (8007ddc <DMA_SetConfig+0x224>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d040      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a35      	ldr	r2, [pc, #212]	; (8007de0 <DMA_SetConfig+0x228>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d03b      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a33      	ldr	r2, [pc, #204]	; (8007de4 <DMA_SetConfig+0x22c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d036      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a32      	ldr	r2, [pc, #200]	; (8007de8 <DMA_SetConfig+0x230>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d031      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a30      	ldr	r2, [pc, #192]	; (8007dec <DMA_SetConfig+0x234>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d02c      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a2f      	ldr	r2, [pc, #188]	; (8007df0 <DMA_SetConfig+0x238>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d027      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a2d      	ldr	r2, [pc, #180]	; (8007df4 <DMA_SetConfig+0x23c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d022      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a2c      	ldr	r2, [pc, #176]	; (8007df8 <DMA_SetConfig+0x240>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d01d      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <DMA_SetConfig+0x244>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d018      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a29      	ldr	r2, [pc, #164]	; (8007e00 <DMA_SetConfig+0x248>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a27      	ldr	r2, [pc, #156]	; (8007e04 <DMA_SetConfig+0x24c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00e      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a26      	ldr	r2, [pc, #152]	; (8007e08 <DMA_SetConfig+0x250>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d009      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <DMA_SetConfig+0x254>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <DMA_SetConfig+0x1d0>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a23      	ldr	r2, [pc, #140]	; (8007e10 <DMA_SetConfig+0x258>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d101      	bne.n	8007d8c <DMA_SetConfig+0x1d4>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <DMA_SetConfig+0x1d6>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d059      	beq.n	8007e46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	223f      	movs	r2, #63	; 0x3f
 8007d9c:	409a      	lsls	r2, r3
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007db0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d138      	bne.n	8007e34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007dd2:	e086      	b.n	8007ee2 <DMA_SetConfig+0x32a>
 8007dd4:	40020010 	.word	0x40020010
 8007dd8:	40020028 	.word	0x40020028
 8007ddc:	40020040 	.word	0x40020040
 8007de0:	40020058 	.word	0x40020058
 8007de4:	40020070 	.word	0x40020070
 8007de8:	40020088 	.word	0x40020088
 8007dec:	400200a0 	.word	0x400200a0
 8007df0:	400200b8 	.word	0x400200b8
 8007df4:	40020410 	.word	0x40020410
 8007df8:	40020428 	.word	0x40020428
 8007dfc:	40020440 	.word	0x40020440
 8007e00:	40020458 	.word	0x40020458
 8007e04:	40020470 	.word	0x40020470
 8007e08:	40020488 	.word	0x40020488
 8007e0c:	400204a0 	.word	0x400204a0
 8007e10:	400204b8 	.word	0x400204b8
 8007e14:	58025408 	.word	0x58025408
 8007e18:	5802541c 	.word	0x5802541c
 8007e1c:	58025430 	.word	0x58025430
 8007e20:	58025444 	.word	0x58025444
 8007e24:	58025458 	.word	0x58025458
 8007e28:	5802546c 	.word	0x5802546c
 8007e2c:	58025480 	.word	0x58025480
 8007e30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
}
 8007e44:	e04d      	b.n	8007ee2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a29      	ldr	r2, [pc, #164]	; (8007ef0 <DMA_SetConfig+0x338>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d022      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a27      	ldr	r2, [pc, #156]	; (8007ef4 <DMA_SetConfig+0x33c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01d      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a26      	ldr	r2, [pc, #152]	; (8007ef8 <DMA_SetConfig+0x340>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d018      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a24      	ldr	r2, [pc, #144]	; (8007efc <DMA_SetConfig+0x344>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d013      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <DMA_SetConfig+0x348>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00e      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <DMA_SetConfig+0x34c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d009      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <DMA_SetConfig+0x350>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d004      	beq.n	8007e96 <DMA_SetConfig+0x2de>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <DMA_SetConfig+0x354>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d101      	bne.n	8007e9a <DMA_SetConfig+0x2e2>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <DMA_SetConfig+0x2e4>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d020      	beq.n	8007ee2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d108      	bne.n	8007ed2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	60da      	str	r2, [r3, #12]
}
 8007ed0:	e007      	b.n	8007ee2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	58025408 	.word	0x58025408
 8007ef4:	5802541c 	.word	0x5802541c
 8007ef8:	58025430 	.word	0x58025430
 8007efc:	58025444 	.word	0x58025444
 8007f00:	58025458 	.word	0x58025458
 8007f04:	5802546c 	.word	0x5802546c
 8007f08:	58025480 	.word	0x58025480
 8007f0c:	58025494 	.word	0x58025494

08007f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a42      	ldr	r2, [pc, #264]	; (8008028 <DMA_CalcBaseAndBitshift+0x118>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d04a      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a41      	ldr	r2, [pc, #260]	; (800802c <DMA_CalcBaseAndBitshift+0x11c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d045      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a3f      	ldr	r2, [pc, #252]	; (8008030 <DMA_CalcBaseAndBitshift+0x120>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d040      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a3e      	ldr	r2, [pc, #248]	; (8008034 <DMA_CalcBaseAndBitshift+0x124>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d03b      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a3c      	ldr	r2, [pc, #240]	; (8008038 <DMA_CalcBaseAndBitshift+0x128>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d036      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a3b      	ldr	r2, [pc, #236]	; (800803c <DMA_CalcBaseAndBitshift+0x12c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d031      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a39      	ldr	r2, [pc, #228]	; (8008040 <DMA_CalcBaseAndBitshift+0x130>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d02c      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a38      	ldr	r2, [pc, #224]	; (8008044 <DMA_CalcBaseAndBitshift+0x134>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d027      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a36      	ldr	r2, [pc, #216]	; (8008048 <DMA_CalcBaseAndBitshift+0x138>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d022      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a35      	ldr	r2, [pc, #212]	; (800804c <DMA_CalcBaseAndBitshift+0x13c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d01d      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a33      	ldr	r2, [pc, #204]	; (8008050 <DMA_CalcBaseAndBitshift+0x140>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d018      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a32      	ldr	r2, [pc, #200]	; (8008054 <DMA_CalcBaseAndBitshift+0x144>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d013      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a30      	ldr	r2, [pc, #192]	; (8008058 <DMA_CalcBaseAndBitshift+0x148>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00e      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a2f      	ldr	r2, [pc, #188]	; (800805c <DMA_CalcBaseAndBitshift+0x14c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d009      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a2d      	ldr	r2, [pc, #180]	; (8008060 <DMA_CalcBaseAndBitshift+0x150>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <DMA_CalcBaseAndBitshift+0xa8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a2c      	ldr	r2, [pc, #176]	; (8008064 <DMA_CalcBaseAndBitshift+0x154>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d101      	bne.n	8007fbc <DMA_CalcBaseAndBitshift+0xac>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <DMA_CalcBaseAndBitshift+0xae>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d024      	beq.n	800800c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	3b10      	subs	r3, #16
 8007fca:	4a27      	ldr	r2, [pc, #156]	; (8008068 <DMA_CalcBaseAndBitshift+0x158>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	4a24      	ldr	r2, [pc, #144]	; (800806c <DMA_CalcBaseAndBitshift+0x15c>)
 8007fdc:	5cd3      	ldrb	r3, [r2, r3]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d908      	bls.n	8007ffc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4b1f      	ldr	r3, [pc, #124]	; (8008070 <DMA_CalcBaseAndBitshift+0x160>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	1d1a      	adds	r2, r3, #4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	659a      	str	r2, [r3, #88]	; 0x58
 8007ffa:	e00d      	b.n	8008018 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <DMA_CalcBaseAndBitshift+0x160>)
 8008004:	4013      	ands	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6593      	str	r3, [r2, #88]	; 0x58
 800800a:	e005      	b.n	8008018 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	40020010 	.word	0x40020010
 800802c:	40020028 	.word	0x40020028
 8008030:	40020040 	.word	0x40020040
 8008034:	40020058 	.word	0x40020058
 8008038:	40020070 	.word	0x40020070
 800803c:	40020088 	.word	0x40020088
 8008040:	400200a0 	.word	0x400200a0
 8008044:	400200b8 	.word	0x400200b8
 8008048:	40020410 	.word	0x40020410
 800804c:	40020428 	.word	0x40020428
 8008050:	40020440 	.word	0x40020440
 8008054:	40020458 	.word	0x40020458
 8008058:	40020470 	.word	0x40020470
 800805c:	40020488 	.word	0x40020488
 8008060:	400204a0 	.word	0x400204a0
 8008064:	400204b8 	.word	0x400204b8
 8008068:	aaaaaaab 	.word	0xaaaaaaab
 800806c:	0801f90c 	.word	0x0801f90c
 8008070:	fffffc00 	.word	0xfffffc00

08008074 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d120      	bne.n	80080ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	2b03      	cmp	r3, #3
 800808e:	d858      	bhi.n	8008142 <DMA_CheckFifoParam+0xce>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <DMA_CheckFifoParam+0x24>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080bb 	.word	0x080080bb
 80080a0:	080080a9 	.word	0x080080a9
 80080a4:	08008143 	.word	0x08008143
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d048      	beq.n	8008146 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080b8:	e045      	b.n	8008146 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080c2:	d142      	bne.n	800814a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80080c8:	e03f      	b.n	800814a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d2:	d123      	bne.n	800811c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d838      	bhi.n	800814e <DMA_CheckFifoParam+0xda>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <DMA_CheckFifoParam+0x70>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	080080f5 	.word	0x080080f5
 80080e8:	080080fb 	.word	0x080080fb
 80080ec:	080080f5 	.word	0x080080f5
 80080f0:	0800810d 	.word	0x0800810d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
        break;
 80080f8:	e030      	b.n	800815c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d025      	beq.n	8008152 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800810a:	e022      	b.n	8008152 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008114:	d11f      	bne.n	8008156 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800811a:	e01c      	b.n	8008156 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	2b02      	cmp	r3, #2
 8008122:	d902      	bls.n	800812a <DMA_CheckFifoParam+0xb6>
 8008124:	2b03      	cmp	r3, #3
 8008126:	d003      	beq.n	8008130 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008128:	e018      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	73fb      	strb	r3, [r7, #15]
        break;
 800812e:	e015      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00e      	beq.n	800815a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]
    break;
 8008140:	e00b      	b.n	800815a <DMA_CheckFifoParam+0xe6>
        break;
 8008142:	bf00      	nop
 8008144:	e00a      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        break;
 8008146:	bf00      	nop
 8008148:	e008      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        break;
 800814a:	bf00      	nop
 800814c:	e006      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        break;
 800814e:	bf00      	nop
 8008150:	e004      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        break;
 8008152:	bf00      	nop
 8008154:	e002      	b.n	800815c <DMA_CheckFifoParam+0xe8>
        break;
 8008156:	bf00      	nop
 8008158:	e000      	b.n	800815c <DMA_CheckFifoParam+0xe8>
    break;
 800815a:	bf00      	nop
    }
  }

  return status;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a38      	ldr	r2, [pc, #224]	; (8008260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d022      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a36      	ldr	r2, [pc, #216]	; (8008264 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d01d      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a35      	ldr	r2, [pc, #212]	; (8008268 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d018      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a33      	ldr	r2, [pc, #204]	; (800826c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a32      	ldr	r2, [pc, #200]	; (8008270 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00e      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a30      	ldr	r2, [pc, #192]	; (8008274 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d009      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a2f      	ldr	r2, [pc, #188]	; (8008278 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d004      	beq.n	80081ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2d      	ldr	r2, [pc, #180]	; (800827c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d101      	bne.n	80081ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80081ce:	2300      	movs	r3, #0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01a      	beq.n	800820a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	3b08      	subs	r3, #8
 80081dc:	4a28      	ldr	r2, [pc, #160]	; (8008280 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	091b      	lsrs	r3, r3, #4
 80081e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4b26      	ldr	r3, [pc, #152]	; (8008284 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	461a      	mov	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a24      	ldr	r2, [pc, #144]	; (8008288 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80081f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2201      	movs	r2, #1
 8008202:	409a      	lsls	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008208:	e024      	b.n	8008254 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	3b10      	subs	r3, #16
 8008212:	4a1e      	ldr	r2, [pc, #120]	; (800828c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008214:	fba2 2303 	umull	r2, r3, r2, r3
 8008218:	091b      	lsrs	r3, r3, #4
 800821a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4a1c      	ldr	r2, [pc, #112]	; (8008290 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d806      	bhi.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d902      	bls.n	8008232 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3308      	adds	r3, #8
 8008230:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4b18      	ldr	r3, [pc, #96]	; (8008298 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	461a      	mov	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a16      	ldr	r2, [pc, #88]	; (800829c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008244:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2201      	movs	r2, #1
 800824e:	409a      	lsls	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	58025408 	.word	0x58025408
 8008264:	5802541c 	.word	0x5802541c
 8008268:	58025430 	.word	0x58025430
 800826c:	58025444 	.word	0x58025444
 8008270:	58025458 	.word	0x58025458
 8008274:	5802546c 	.word	0x5802546c
 8008278:	58025480 	.word	0x58025480
 800827c:	58025494 	.word	0x58025494
 8008280:	cccccccd 	.word	0xcccccccd
 8008284:	16009600 	.word	0x16009600
 8008288:	58025880 	.word	0x58025880
 800828c:	aaaaaaab 	.word	0xaaaaaaab
 8008290:	400204b8 	.word	0x400204b8
 8008294:	4002040f 	.word	0x4002040f
 8008298:	10008200 	.word	0x10008200
 800829c:	40020880 	.word	0x40020880

080082a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d04a      	beq.n	800834c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d847      	bhi.n	800834c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a25      	ldr	r2, [pc, #148]	; (8008358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d022      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a24      	ldr	r2, [pc, #144]	; (800835c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d01d      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a22      	ldr	r2, [pc, #136]	; (8008360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d018      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a21      	ldr	r2, [pc, #132]	; (8008364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d013      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a1f      	ldr	r2, [pc, #124]	; (8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00e      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a1e      	ldr	r2, [pc, #120]	; (800836c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d009      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1c      	ldr	r2, [pc, #112]	; (8008370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d004      	beq.n	800830c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1b      	ldr	r2, [pc, #108]	; (8008374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d101      	bne.n	8008310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008310:	2300      	movs	r3, #0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4b17      	ldr	r3, [pc, #92]	; (8008378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a15      	ldr	r2, [pc, #84]	; (800837c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008328:	671a      	str	r2, [r3, #112]	; 0x70
 800832a:	e009      	b.n	8008340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	461a      	mov	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a11      	ldr	r2, [pc, #68]	; (8008384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800833e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3b01      	subs	r3, #1
 8008344:	2201      	movs	r2, #1
 8008346:	409a      	lsls	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800834c:	bf00      	nop
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	58025408 	.word	0x58025408
 800835c:	5802541c 	.word	0x5802541c
 8008360:	58025430 	.word	0x58025430
 8008364:	58025444 	.word	0x58025444
 8008368:	58025458 	.word	0x58025458
 800836c:	5802546c 	.word	0x5802546c
 8008370:	58025480 	.word	0x58025480
 8008374:	58025494 	.word	0x58025494
 8008378:	1600963f 	.word	0x1600963f
 800837c:	58025940 	.word	0x58025940
 8008380:	1000823f 	.word	0x1000823f
 8008384:	40020940 	.word	0x40020940

08008388 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b098      	sub	sp, #96	; 0x60
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008390:	4a84      	ldr	r2, [pc, #528]	; (80085a4 <HAL_FDCAN_Init+0x21c>)
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4611      	mov	r1, r2
 8008398:	224c      	movs	r2, #76	; 0x4c
 800839a:	4618      	mov	r0, r3
 800839c:	f012 fcea 	bl	801ad74 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e1c6      	b.n	8008738 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7e      	ldr	r2, [pc, #504]	; (80085a8 <HAL_FDCAN_Init+0x220>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d106      	bne.n	80083c2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d106      	bne.n	80083dc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fa fdae 	bl	8002f38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	699a      	ldr	r2, [r3, #24]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0210 	bic.w	r2, r2, #16
 80083ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083ec:	f7fb fde4 	bl	8003fb8 <HAL_GetTick>
 80083f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80083f2:	e014      	b.n	800841e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80083f4:	f7fb fde0 	bl	8003fb8 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b0a      	cmp	r3, #10
 8008400:	d90d      	bls.n	800841e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008408:	f043 0201 	orr.w	r2, r3, #1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2203      	movs	r2, #3
 8008416:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e18c      	b.n	8008738 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b08      	cmp	r3, #8
 800842a:	d0e3      	beq.n	80083f4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800843c:	f7fb fdbc 	bl	8003fb8 <HAL_GetTick>
 8008440:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008442:	e014      	b.n	800846e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008444:	f7fb fdb8 	bl	8003fb8 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b0a      	cmp	r3, #10
 8008450:	d90d      	bls.n	800846e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008458:	f043 0201 	orr.w	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2203      	movs	r2, #3
 8008466:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e164      	b.n	8008738 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f003 0301 	and.w	r3, r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0e3      	beq.n	8008444 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0202 	orr.w	r2, r2, #2
 800848a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d108      	bne.n	80084a6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a2:	619a      	str	r2, [r3, #24]
 80084a4:	e007      	b.n	80084b6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7c5b      	ldrb	r3, [r3, #17]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d108      	bne.n	80084d0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084cc:	619a      	str	r2, [r3, #24]
 80084ce:	e007      	b.n	80084e0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084de:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7c9b      	ldrb	r3, [r3, #18]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d108      	bne.n	80084fa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084f6:	619a      	str	r2, [r3, #24]
 80084f8:	e007      	b.n	800850a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008508:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800852e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0210 	bic.w	r2, r2, #16
 800853e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d108      	bne.n	800855a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0204 	orr.w	r2, r2, #4
 8008556:	619a      	str	r2, [r3, #24]
 8008558:	e030      	b.n	80085bc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d02c      	beq.n	80085bc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d020      	beq.n	80085ac <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699a      	ldr	r2, [r3, #24]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008578:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f042 0210 	orr.w	r2, r2, #16
 8008588:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b03      	cmp	r3, #3
 8008590:	d114      	bne.n	80085bc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	699a      	ldr	r2, [r3, #24]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0220 	orr.w	r2, r2, #32
 80085a0:	619a      	str	r2, [r3, #24]
 80085a2:	e00b      	b.n	80085bc <HAL_FDCAN_Init+0x234>
 80085a4:	0801f7bc 	.word	0x0801f7bc
 80085a8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0220 	orr.w	r2, r2, #32
 80085ba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085cc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80085d4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	3b01      	subs	r3, #1
 80085de:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80085e4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80085e6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f0:	d115      	bne.n	800861e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	3b01      	subs	r3, #1
 80085fe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008600:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	3b01      	subs	r3, #1
 8008608:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800860a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	3b01      	subs	r3, #1
 8008614:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800861a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800861c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008644:	4413      	add	r3, r2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d011      	beq.n	800866e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008652:	f023 0107 	bic.w	r1, r3, #7
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	3360      	adds	r3, #96	; 0x60
 800865e:	443b      	add	r3, r7
 8008660:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d011      	beq.n	800869a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800867e:	f023 0107 	bic.w	r1, r3, #7
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	3360      	adds	r3, #96	; 0x60
 800868a:	443b      	add	r3, r7
 800868c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d012      	beq.n	80086c8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086aa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	3360      	adds	r3, #96	; 0x60
 80086b6:	443b      	add	r3, r7
 80086b8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80086bc:	011a      	lsls	r2, r3, #4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d012      	beq.n	80086f6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086d8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	3360      	adds	r3, #96	; 0x60
 80086e4:	443b      	add	r3, r7
 80086e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80086ea:	021a      	lsls	r2, r3, #8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a11      	ldr	r2, [pc, #68]	; (8008740 <HAL_FDCAN_Init+0x3b8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d107      	bne.n	8008710 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f022 0203 	bic.w	r2, r2, #3
 800870e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f80b 	bl	8008744 <FDCAN_CalcultateRamBlockAddresses>
 800872e:	4603      	mov	r3, r0
 8008730:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008734:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008738:	4618      	mov	r0, r3
 800873a:	3760      	adds	r7, #96	; 0x60
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	4000a000 	.word	0x4000a000

08008744 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800875a:	4ba7      	ldr	r3, [pc, #668]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800875c:	4013      	ands	r3, r2
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	0091      	lsls	r1, r2, #2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6812      	ldr	r2, [r2, #0]
 8008766:	430b      	orrs	r3, r1
 8008768:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008774:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	041a      	lsls	r2, r3, #16
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	4413      	add	r3, r2
 8008790:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800879a:	4b97      	ldr	r3, [pc, #604]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800879c:	4013      	ands	r3, r2
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	0091      	lsls	r1, r2, #2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	430b      	orrs	r3, r1
 80087a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087bc:	041a      	lsls	r2, r3, #16
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	4413      	add	r3, r2
 80087d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80087dc:	4b86      	ldr	r3, [pc, #536]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087de:	4013      	ands	r3, r2
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	0091      	lsls	r1, r2, #2
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	430b      	orrs	r3, r1
 80087ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80087f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	041a      	lsls	r2, r3, #16
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008824:	4b74      	ldr	r3, [pc, #464]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008826:	4013      	ands	r3, r2
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	0091      	lsls	r1, r2, #2
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6812      	ldr	r2, [r2, #0]
 8008830:	430b      	orrs	r3, r1
 8008832:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800883e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008846:	041a      	lsls	r2, r3, #16
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800885a:	fb02 f303 	mul.w	r3, r2, r3
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4413      	add	r3, r2
 8008862:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800886c:	4b62      	ldr	r3, [pc, #392]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800886e:	4013      	ands	r3, r2
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	0091      	lsls	r1, r2, #2
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	6812      	ldr	r2, [r2, #0]
 8008878:	430b      	orrs	r3, r1
 800887a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008898:	4b57      	ldr	r3, [pc, #348]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800889a:	4013      	ands	r3, r2
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	0091      	lsls	r1, r2, #2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	430b      	orrs	r3, r1
 80088a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088b2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ba:	041a      	lsls	r2, r3, #16
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	4413      	add	r3, r2
 80088d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80088da:	4b47      	ldr	r3, [pc, #284]	; (80089f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088dc:	4013      	ands	r3, r2
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	0091      	lsls	r1, r2, #2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	430b      	orrs	r3, r1
 80088e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088f4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088fc:	041a      	lsls	r2, r3, #16
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008910:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008918:	061a      	lsls	r2, r3, #24
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008928:	4b34      	ldr	r3, [pc, #208]	; (80089fc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800892a:	4413      	add	r3, r2
 800892c:	009a      	lsls	r2, r3, #2
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	441a      	add	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	441a      	add	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008976:	fb01 f303 	mul.w	r3, r1, r3
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	441a      	add	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800898e:	fb01 f303 	mul.w	r3, r1, r3
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	441a      	add	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80089be:	fb01 f303 	mul.w	r3, r1, r3
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ee:	4a04      	ldr	r2, [pc, #16]	; (8008a00 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d915      	bls.n	8008a20 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80089f4:	e006      	b.n	8008a04 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80089f6:	bf00      	nop
 80089f8:	ffff0003 	.word	0xffff0003
 80089fc:	10002b00 	.word	0x10002b00
 8008a00:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a0a:	f043 0220 	orr.w	r2, r3, #32
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2203      	movs	r2, #3
 8008a18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e010      	b.n	8008a42 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a24:	60fb      	str	r3, [r7, #12]
 8008a26:	e005      	b.n	8008a34 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3304      	adds	r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d3f3      	bcc.n	8008a28 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop

08008a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a5e:	4b86      	ldr	r3, [pc, #536]	; (8008c78 <HAL_GPIO_Init+0x228>)
 8008a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a62:	e18c      	b.n	8008d7e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	2101      	movs	r1, #1
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a70:	4013      	ands	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 817e 	beq.w	8008d78 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d005      	beq.n	8008a94 <HAL_GPIO_Init+0x44>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d130      	bne.n	8008af6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008aca:	2201      	movs	r2, #1
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	091b      	lsrs	r3, r3, #4
 8008ae0:	f003 0201 	and.w	r2, r3, #1
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d017      	beq.n	8008b32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	43db      	mvns	r3, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	4013      	ands	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f003 0303 	and.w	r3, r3, #3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d123      	bne.n	8008b86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	08da      	lsrs	r2, r3, #3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3208      	adds	r2, #8
 8008b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	220f      	movs	r2, #15
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	691a      	ldr	r2, [r3, #16]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	08da      	lsrs	r2, r3, #3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3208      	adds	r2, #8
 8008b80:	69b9      	ldr	r1, [r7, #24]
 8008b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	2203      	movs	r2, #3
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	43db      	mvns	r3, r3
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f003 0203 	and.w	r2, r3, #3
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 80d8 	beq.w	8008d78 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bc8:	4b2c      	ldr	r3, [pc, #176]	; (8008c7c <HAL_GPIO_Init+0x22c>)
 8008bca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bce:	4a2b      	ldr	r2, [pc, #172]	; (8008c7c <HAL_GPIO_Init+0x22c>)
 8008bd0:	f043 0302 	orr.w	r3, r3, #2
 8008bd4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008bd8:	4b28      	ldr	r3, [pc, #160]	; (8008c7c <HAL_GPIO_Init+0x22c>)
 8008bda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008be6:	4a26      	ldr	r2, [pc, #152]	; (8008c80 <HAL_GPIO_Init+0x230>)
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	089b      	lsrs	r3, r3, #2
 8008bec:	3302      	adds	r3, #2
 8008bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	220f      	movs	r2, #15
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4013      	ands	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <HAL_GPIO_Init+0x234>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d04a      	beq.n	8008ca8 <HAL_GPIO_Init+0x258>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <HAL_GPIO_Init+0x238>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d02b      	beq.n	8008c72 <HAL_GPIO_Init+0x222>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a1b      	ldr	r2, [pc, #108]	; (8008c8c <HAL_GPIO_Init+0x23c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d025      	beq.n	8008c6e <HAL_GPIO_Init+0x21e>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a1a      	ldr	r2, [pc, #104]	; (8008c90 <HAL_GPIO_Init+0x240>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d01f      	beq.n	8008c6a <HAL_GPIO_Init+0x21a>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a19      	ldr	r2, [pc, #100]	; (8008c94 <HAL_GPIO_Init+0x244>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d019      	beq.n	8008c66 <HAL_GPIO_Init+0x216>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a18      	ldr	r2, [pc, #96]	; (8008c98 <HAL_GPIO_Init+0x248>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d013      	beq.n	8008c62 <HAL_GPIO_Init+0x212>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a17      	ldr	r2, [pc, #92]	; (8008c9c <HAL_GPIO_Init+0x24c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d00d      	beq.n	8008c5e <HAL_GPIO_Init+0x20e>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a16      	ldr	r2, [pc, #88]	; (8008ca0 <HAL_GPIO_Init+0x250>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d007      	beq.n	8008c5a <HAL_GPIO_Init+0x20a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a15      	ldr	r2, [pc, #84]	; (8008ca4 <HAL_GPIO_Init+0x254>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d101      	bne.n	8008c56 <HAL_GPIO_Init+0x206>
 8008c52:	2309      	movs	r3, #9
 8008c54:	e029      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c56:	230a      	movs	r3, #10
 8008c58:	e027      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c5a:	2307      	movs	r3, #7
 8008c5c:	e025      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c5e:	2306      	movs	r3, #6
 8008c60:	e023      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c62:	2305      	movs	r3, #5
 8008c64:	e021      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c66:	2304      	movs	r3, #4
 8008c68:	e01f      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e01d      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e01b      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e019      	b.n	8008caa <HAL_GPIO_Init+0x25a>
 8008c76:	bf00      	nop
 8008c78:	58000080 	.word	0x58000080
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	58000400 	.word	0x58000400
 8008c84:	58020000 	.word	0x58020000
 8008c88:	58020400 	.word	0x58020400
 8008c8c:	58020800 	.word	0x58020800
 8008c90:	58020c00 	.word	0x58020c00
 8008c94:	58021000 	.word	0x58021000
 8008c98:	58021400 	.word	0x58021400
 8008c9c:	58021800 	.word	0x58021800
 8008ca0:	58021c00 	.word	0x58021c00
 8008ca4:	58022400 	.word	0x58022400
 8008ca8:	2300      	movs	r3, #0
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	f002 0203 	and.w	r2, r2, #3
 8008cb0:	0092      	lsls	r2, r2, #2
 8008cb2:	4093      	lsls	r3, r2
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cba:	4938      	ldr	r1, [pc, #224]	; (8008d9c <HAL_GPIO_Init+0x34c>)
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	089b      	lsrs	r3, r3, #2
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4013      	ands	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	4013      	ands	r3, r2
 8008d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	43db      	mvns	r3, r3
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f ae6b 	bne.w	8008a64 <HAL_GPIO_Init+0x14>
  }
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	3724      	adds	r7, #36	; 0x24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	58000400 	.word	0x58000400

08008da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	887b      	ldrh	r3, [r7, #2]
 8008db2:	4013      	ands	r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008db8:	2301      	movs	r3, #1
 8008dba:	73fb      	strb	r3, [r7, #15]
 8008dbc:	e001      	b.n	8008dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	807b      	strh	r3, [r7, #2]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008de0:	787b      	ldrb	r3, [r7, #1]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008de6:	887a      	ldrh	r2, [r7, #2]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008dec:	e003      	b.n	8008df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008dee:	887b      	ldrh	r3, [r7, #2]
 8008df0:	041a      	lsls	r2, r3, #16
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	619a      	str	r2, [r3, #24]
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e07f      	b.n	8008f16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7fa f8ec 	bl	8003008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2224      	movs	r2, #36	; 0x24
 8008e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 0201 	bic.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d107      	bne.n	8008e7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e7a:	609a      	str	r2, [r3, #8]
 8008e7c:	e006      	b.n	8008e8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d104      	bne.n	8008e9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6859      	ldr	r1, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <HAL_I2C_Init+0x11c>)
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	69d9      	ldr	r1, [r3, #28]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1a      	ldr	r2, [r3, #32]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	02008000 	.word	0x02008000

08008f24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	4798      	blx	r3
  }
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d138      	bne.n	8008fe0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e032      	b.n	8008fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2224      	movs	r2, #36	; 0x24
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0201 	bic.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008faa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6819      	ldr	r1, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0201 	orr.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e000      	b.n	8008fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fe0:	2302      	movs	r3, #2
  }
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b20      	cmp	r3, #32
 8009002:	d139      	bne.n	8009078 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800900e:	2302      	movs	r3, #2
 8009010:	e033      	b.n	800907a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2224      	movs	r2, #36	; 0x24
 800901e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0201 	bic.w	r2, r2, #1
 8009030:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009040:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0201 	orr.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	e000      	b.n	800907a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009078:	2302      	movs	r3, #2
  }
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009088:	b08f      	sub	sp, #60	; 0x3c
 800908a:	af0a      	add	r7, sp, #40	; 0x28
 800908c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e116      	b.n	80092c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f011 fb28 	bl	801a708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2203      	movs	r2, #3
 80090bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f00a fcf7 	bl	8013aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	603b      	str	r3, [r7, #0]
 80090e2:	687e      	ldr	r6, [r7, #4]
 80090e4:	466d      	mov	r5, sp
 80090e6:	f106 0410 	add.w	r4, r6, #16
 80090ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80090f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80090fa:	1d33      	adds	r3, r6, #4
 80090fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090fe:	6838      	ldr	r0, [r7, #0]
 8009100:	f00a fbc2 	bl	8013888 <USB_CoreInit>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e0d7      	b.n	80092c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2100      	movs	r1, #0
 800911c:	4618      	mov	r0, r3
 800911e:	f00a fce5 	bl	8013aec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
 8009126:	e04a      	b.n	80091be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009128:	7bfa      	ldrb	r2, [r7, #15]
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	333d      	adds	r3, #61	; 0x3d
 8009138:	2201      	movs	r2, #1
 800913a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800913c:	7bfa      	ldrb	r2, [r7, #15]
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	333c      	adds	r3, #60	; 0x3c
 800914c:	7bfa      	ldrb	r2, [r7, #15]
 800914e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009150:	7bfa      	ldrb	r2, [r7, #15]
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	b298      	uxth	r0, r3
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	3356      	adds	r3, #86	; 0x56
 8009164:	4602      	mov	r2, r0
 8009166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009168:	7bfa      	ldrb	r2, [r7, #15]
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	4613      	mov	r3, r2
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	3340      	adds	r3, #64	; 0x40
 8009178:	2200      	movs	r2, #0
 800917a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800917c:	7bfa      	ldrb	r2, [r7, #15]
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	3344      	adds	r3, #68	; 0x44
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009190:	7bfa      	ldrb	r2, [r7, #15]
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	4613      	mov	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	3348      	adds	r3, #72	; 0x48
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80091a4:	7bfa      	ldrb	r2, [r7, #15]
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	334c      	adds	r3, #76	; 0x4c
 80091b4:	2200      	movs	r2, #0
 80091b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
 80091ba:	3301      	adds	r3, #1
 80091bc:	73fb      	strb	r3, [r7, #15]
 80091be:	7bfa      	ldrb	r2, [r7, #15]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3af      	bcc.n	8009128 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	e044      	b.n	8009258 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80091ce:	7bfa      	ldrb	r2, [r7, #15]
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	4613      	mov	r3, r2
 80091d4:	00db      	lsls	r3, r3, #3
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80091e0:	2200      	movs	r2, #0
 80091e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80091e4:	7bfa      	ldrb	r2, [r7, #15]
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80091f6:	7bfa      	ldrb	r2, [r7, #15]
 80091f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80091fa:	7bfa      	ldrb	r2, [r7, #15]
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800920c:	2200      	movs	r2, #0
 800920e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009210:	7bfa      	ldrb	r2, [r7, #15]
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	4613      	mov	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009226:	7bfa      	ldrb	r2, [r7, #15]
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800923c:	7bfa      	ldrb	r2, [r7, #15]
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	3301      	adds	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	7bfa      	ldrb	r2, [r7, #15]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	429a      	cmp	r2, r3
 8009260:	d3b5      	bcc.n	80091ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	687e      	ldr	r6, [r7, #4]
 800926a:	466d      	mov	r5, sp
 800926c:	f106 0410 	add.w	r4, r6, #16
 8009270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800927c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009280:	1d33      	adds	r3, r6, #4
 8009282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009284:	6838      	ldr	r0, [r7, #0]
 8009286:	f00a fc7d 	bl	8013b84 <USB_DevInit>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e014      	b.n	80092c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d102      	bne.n	80092ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f96f 	bl	800a598 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f00b fcbf 	bl	8014c42 <USB_DevDisconnect>

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_PCD_Start+0x1c>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e022      	b.n	8009330 <HAL_PCD_Start+0x62>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009302:	2b01      	cmp	r3, #1
 8009304:	d105      	bne.n	8009312 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f00a fbc6 	bl	8013aa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f00b fc6d 	bl	8014c00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b08d      	sub	sp, #52	; 0x34
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f00b fd2b 	bl	8014daa <USB_GetMode>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 84b7 	bne.w	8009cca <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4618      	mov	r0, r3
 8009362:	f00b fc8f 	bl	8014c84 <USB_ReadInterrupts>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 84ad 	beq.w	8009cc8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	0a1b      	lsrs	r3, r3, #8
 8009378:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f00b fc7c 	bl	8014c84 <USB_ReadInterrupts>
 800938c:	4603      	mov	r3, r0
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b02      	cmp	r3, #2
 8009394:	d107      	bne.n	80093a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	695a      	ldr	r2, [r3, #20]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f002 0202 	and.w	r2, r2, #2
 80093a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00b fc6a 	bl	8014c84 <USB_ReadInterrupts>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d161      	bne.n	800947e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0210 	bic.w	r2, r2, #16
 80093c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f003 020f 	and.w	r2, r3, #15
 80093d6:	4613      	mov	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4413      	add	r3, r2
 80093e6:	3304      	adds	r3, #4
 80093e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	0c5b      	lsrs	r3, r3, #17
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d124      	bne.n	8009440 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80093fc:	4013      	ands	r3, r2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d035      	beq.n	800946e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	091b      	lsrs	r3, r3, #4
 800940a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800940c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009410:	b29b      	uxth	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	6a38      	ldr	r0, [r7, #32]
 8009416:	f00b faa1 	bl	801495c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	091b      	lsrs	r3, r3, #4
 8009422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009426:	441a      	add	r2, r3
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	695a      	ldr	r2, [r3, #20]
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	091b      	lsrs	r3, r3, #4
 8009434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009438:	441a      	add	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	615a      	str	r2, [r3, #20]
 800943e:	e016      	b.n	800946e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	0c5b      	lsrs	r3, r3, #17
 8009444:	f003 030f 	and.w	r3, r3, #15
 8009448:	2b06      	cmp	r3, #6
 800944a:	d110      	bne.n	800946e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009452:	2208      	movs	r2, #8
 8009454:	4619      	mov	r1, r3
 8009456:	6a38      	ldr	r0, [r7, #32]
 8009458:	f00b fa80 	bl	801495c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	695a      	ldr	r2, [r3, #20]
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	091b      	lsrs	r3, r3, #4
 8009464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009468:	441a      	add	r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0210 	orr.w	r2, r2, #16
 800947c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4618      	mov	r0, r3
 8009484:	f00b fbfe 	bl	8014c84 <USB_ReadInterrupts>
 8009488:	4603      	mov	r3, r0
 800948a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800948e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009492:	f040 80a7 	bne.w	80095e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f00b fc03 	bl	8014caa <USB_ReadDevAllOutEpInterrupt>
 80094a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80094a6:	e099      	b.n	80095dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 808e 	beq.w	80095d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f00b fc27 	bl	8014d12 <USB_ReadDevOutEPInterrupt>
 80094c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00c      	beq.n	80094ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	461a      	mov	r2, r3
 80094de:	2301      	movs	r3, #1
 80094e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80094e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fed1 	bl	800a28c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009500:	461a      	mov	r2, r3
 8009502:	2308      	movs	r3, #8
 8009504:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 ffa7 	bl	800a45c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f003 0310 	and.w	r3, r3, #16
 8009514:	2b00      	cmp	r3, #0
 8009516:	d008      	beq.n	800952a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009524:	461a      	mov	r2, r3
 8009526:	2310      	movs	r3, #16
 8009528:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d030      	beq.n	8009596 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953c:	2b80      	cmp	r3, #128	; 0x80
 800953e:	d109      	bne.n	8009554 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800954e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009552:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009556:	4613      	mov	r3, r2
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	4413      	add	r3, r2
 8009566:	3304      	adds	r3, #4
 8009568:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	78db      	ldrb	r3, [r3, #3]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d108      	bne.n	8009584 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2200      	movs	r2, #0
 8009576:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	b2db      	uxtb	r3, r3
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f011 f9ba 	bl	801a8f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009590:	461a      	mov	r2, r3
 8009592:	2302      	movs	r3, #2
 8009594:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d008      	beq.n	80095b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	461a      	mov	r2, r3
 80095ae:	2320      	movs	r3, #32
 80095b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d009      	beq.n	80095d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c8:	461a      	mov	r2, r3
 80095ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	3301      	adds	r3, #1
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	085b      	lsrs	r3, r3, #1
 80095da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f47f af62 	bne.w	80094a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f00b fb4b 	bl	8014c84 <USB_ReadInterrupts>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095f8:	f040 80db 	bne.w	80097b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f00b fb6c 	bl	8014cde <USB_ReadDevAllInEpInterrupt>
 8009606:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800960c:	e0cd      	b.n	80097aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80c2 	beq.w	800979e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009620:	b2d2      	uxtb	r2, r2
 8009622:	4611      	mov	r1, r2
 8009624:	4618      	mov	r0, r3
 8009626:	f00b fb92 	bl	8014d4e <USB_ReadDevInEPInterrupt>
 800962a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d057      	beq.n	80096e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	f003 030f 	and.w	r3, r3, #15
 800963c:	2201      	movs	r2, #1
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	43db      	mvns	r3, r3
 8009650:	69f9      	ldr	r1, [r7, #28]
 8009652:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009656:	4013      	ands	r3, r2
 8009658:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009666:	461a      	mov	r2, r3
 8009668:	2301      	movs	r3, #1
 800966a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d132      	bne.n	80096da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009678:	4613      	mov	r3, r2
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	440b      	add	r3, r1
 8009682:	3348      	adds	r3, #72	; 0x48
 8009684:	6819      	ldr	r1, [r3, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800968a:	4613      	mov	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4403      	add	r3, r0
 8009694:	3344      	adds	r3, #68	; 0x44
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4419      	add	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969e:	4613      	mov	r3, r2
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4403      	add	r3, r0
 80096a8:	3348      	adds	r3, #72	; 0x48
 80096aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d113      	bne.n	80096da <HAL_PCD_IRQHandler+0x3a2>
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b6:	4613      	mov	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	440b      	add	r3, r1
 80096c0:	334c      	adds	r3, #76	; 0x4c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096d2:	461a      	mov	r2, r3
 80096d4:	2101      	movs	r1, #1
 80096d6:	f00b fb9b 	bl	8014e10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f011 f884 	bl	801a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096fc:	461a      	mov	r2, r3
 80096fe:	2308      	movs	r3, #8
 8009700:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d008      	beq.n	800971e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	461a      	mov	r2, r3
 800971a:	2310      	movs	r3, #16
 800971c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009724:	2b00      	cmp	r3, #0
 8009726:	d008      	beq.n	800973a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009734:	461a      	mov	r2, r3
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d023      	beq.n	800978c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009746:	6a38      	ldr	r0, [r7, #32]
 8009748:	f00a fb7a 	bl	8013e40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800974c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974e:	4613      	mov	r3, r2
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3338      	adds	r3, #56	; 0x38
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	3304      	adds	r3, #4
 800975e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	78db      	ldrb	r3, [r3, #3]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d108      	bne.n	800977a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2200      	movs	r2, #0
 800976c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	b2db      	uxtb	r3, r3
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f011 f8d1 	bl	801a91c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009786:	461a      	mov	r2, r3
 8009788:	2302      	movs	r3, #2
 800978a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fcea 	bl	800a172 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	3301      	adds	r3, #1
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	085b      	lsrs	r3, r3, #1
 80097a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f47f af2e 	bne.w	800960e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f00b fa64 	bl	8014c84 <USB_ReadInterrupts>
 80097bc:	4603      	mov	r3, r0
 80097be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c6:	d122      	bne.n	800980e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097d6:	f023 0301 	bic.w	r3, r3, #1
 80097da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d108      	bne.n	80097f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80097ee:	2100      	movs	r1, #0
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fef5 	bl	800a5e0 <HAL_PCDEx_LPM_Callback>
 80097f6:	e002      	b.n	80097fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f011 f86f 	bl	801a8dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	695a      	ldr	r2, [r3, #20]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800980c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f00b fa36 	bl	8014c84 <USB_ReadInterrupts>
 8009818:	4603      	mov	r3, r0
 800981a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800981e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009822:	d112      	bne.n	800984a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b01      	cmp	r3, #1
 8009832:	d102      	bne.n	800983a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f011 f82b 	bl	801a890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	695a      	ldr	r2, [r3, #20]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009848:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4618      	mov	r0, r3
 8009850:	f00b fa18 	bl	8014c84 <USB_ReadInterrupts>
 8009854:	4603      	mov	r3, r0
 8009856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800985a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800985e:	d121      	bne.n	80098a4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695a      	ldr	r2, [r3, #20]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800986e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d111      	bne.n	800989e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009888:	089b      	lsrs	r3, r3, #2
 800988a:	f003 020f 	and.w	r2, r3, #15
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009894:	2101      	movs	r1, #1
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fea2 	bl	800a5e0 <HAL_PCDEx_LPM_Callback>
 800989c:	e002      	b.n	80098a4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f010 fff6 	bl	801a890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f00b f9eb 	bl	8014c84 <USB_ReadInterrupts>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b8:	f040 80b7 	bne.w	8009a2a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ca:	f023 0301 	bic.w	r3, r3, #1
 80098ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2110      	movs	r1, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f00a fab2 	bl	8013e40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098dc:	2300      	movs	r3, #0
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098e0:	e046      	b.n	8009970 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	461a      	mov	r2, r3
 80098f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	440a      	add	r2, r1
 800990c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009914:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009922:	461a      	mov	r2, r3
 8009924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009928:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009944:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009948:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009964:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009968:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	3301      	adds	r3, #1
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009976:	429a      	cmp	r2, r3
 8009978:	d3b3      	bcc.n	80098e2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009988:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800998c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009992:	2b00      	cmp	r3, #0
 8009994:	d016      	beq.n	80099c4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099a6:	f043 030b 	orr.w	r3, r3, #11
 80099aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099bc:	f043 030b 	orr.w	r3, r3, #11
 80099c0:	6453      	str	r3, [r2, #68]	; 0x44
 80099c2:	e015      	b.n	80099f0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	695a      	ldr	r2, [r3, #20]
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d2:	4619      	mov	r1, r3
 80099d4:	f242 032b 	movw	r3, #8235	; 0x202b
 80099d8:	4313      	orrs	r3, r2
 80099da:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099ea:	f043 030b 	orr.w	r3, r3, #11
 80099ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a14:	461a      	mov	r2, r3
 8009a16:	f00b f9fb 	bl	8014e10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	695a      	ldr	r2, [r3, #20]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f00b f928 	bl	8014c84 <USB_ReadInterrupts>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3e:	d124      	bne.n	8009a8a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f00b f9bf 	bl	8014dc8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f00a fa73 	bl	8013f3a <USB_GetDevSpeed>
 8009a54:	4603      	mov	r3, r0
 8009a56:	461a      	mov	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681c      	ldr	r4, [r3, #0]
 8009a60:	f001 fd88 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 8009a64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f009 ff78 	bl	8013964 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f010 fee2 	bl	801a83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695a      	ldr	r2, [r3, #20]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f00b f8f8 	bl	8014c84 <USB_ReadInterrupts>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	d10a      	bne.n	8009ab4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f010 febf 	bl	801a822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695a      	ldr	r2, [r3, #20]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f002 0208 	and.w	r2, r2, #8
 8009ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f00b f8e3 	bl	8014c84 <USB_ReadInterrupts>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac4:	2b80      	cmp	r3, #128	; 0x80
 8009ac6:	d122      	bne.n	8009b0e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad8:	e014      	b.n	8009b04 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d105      	bne.n	8009afe <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fb09 	bl	800a110 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	3301      	adds	r3, #1
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d3e5      	bcc.n	8009ada <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f00b f8b6 	bl	8014c84 <USB_ReadInterrupts>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b22:	d13b      	bne.n	8009b9c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b24:	2301      	movs	r3, #1
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
 8009b28:	e02b      	b.n	8009b82 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	4613      	mov	r3, r2
 8009b40:	00db      	lsls	r3, r3, #3
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	3340      	adds	r3, #64	; 0x40
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d115      	bne.n	8009b7c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009b50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	da12      	bge.n	8009b7c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	333f      	adds	r3, #63	; 0x3f
 8009b66:	2201      	movs	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 faca 	bl	800a110 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	3301      	adds	r3, #1
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d3ce      	bcc.n	8009b2a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695a      	ldr	r2, [r3, #20]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f00b f86f 	bl	8014c84 <USB_ReadInterrupts>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bb0:	d155      	bne.n	8009c5e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb6:	e045      	b.n	8009c44 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bcc:	4613      	mov	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d12e      	bne.n	8009c3e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009be0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	da2b      	bge.n	8009c3e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009bf2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d121      	bne.n	8009c3e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	4613      	mov	r3, r2
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	440b      	add	r3, r1
 8009c08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c3a:	6053      	str	r3, [r2, #4]
            break;
 8009c3c:	e007      	b.n	8009c4e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	3301      	adds	r3, #1
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d3b4      	bcc.n	8009bb8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	695a      	ldr	r2, [r3, #20]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f00b f80e 	bl	8014c84 <USB_ReadInterrupts>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c72:	d10a      	bne.n	8009c8a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f010 fe63 	bl	801a940 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695a      	ldr	r2, [r3, #20]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f00a fff8 	bl	8014c84 <USB_ReadInterrupts>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d115      	bne.n	8009cca <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f010 fe53 	bl	801a95c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6859      	ldr	r1, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	69ba      	ldr	r2, [r7, #24]
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	e000      	b.n	8009cca <HAL_PCD_IRQHandler+0x992>
      return;
 8009cc8:	bf00      	nop
    }
  }
}
 8009cca:	3734      	adds	r7, #52	; 0x34
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd90      	pop	{r4, r7, pc}

08009cd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <HAL_PCD_SetAddress+0x1a>
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e013      	b.n	8009d12 <HAL_PCD_SetAddress+0x42>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f00a ff56 	bl	8014bb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	4608      	mov	r0, r1
 8009d24:	4611      	mov	r1, r2
 8009d26:	461a      	mov	r2, r3
 8009d28:	4603      	mov	r3, r0
 8009d2a:	70fb      	strb	r3, [r7, #3]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	803b      	strh	r3, [r7, #0]
 8009d30:	4613      	mov	r3, r2
 8009d32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da0f      	bge.n	8009d60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	4613      	mov	r3, r2
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	3338      	adds	r3, #56	; 0x38
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	3304      	adds	r3, #4
 8009d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	705a      	strb	r2, [r3, #1]
 8009d5e:	e00f      	b.n	8009d80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	f003 020f 	and.w	r2, r3, #15
 8009d66:	4613      	mov	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4413      	add	r3, r2
 8009d76:	3304      	adds	r3, #4
 8009d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009d8c:	883a      	ldrh	r2, [r7, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	78ba      	ldrb	r2, [r7, #2]
 8009d96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009daa:	78bb      	ldrb	r3, [r7, #2]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d102      	bne.n	8009db6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_PCD_EP_Open+0xaa>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e00e      	b.n	8009de2 <HAL_PCD_EP_Open+0xc8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f00a f8d6 	bl	8013f84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	460b      	mov	r3, r1
 8009df4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	da0f      	bge.n	8009e1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dfe:	78fb      	ldrb	r3, [r7, #3]
 8009e00:	f003 020f 	and.w	r2, r3, #15
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	3338      	adds	r3, #56	; 0x38
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4413      	add	r3, r2
 8009e12:	3304      	adds	r3, #4
 8009e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	705a      	strb	r2, [r3, #1]
 8009e1c:	e00f      	b.n	8009e3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	f003 020f 	and.w	r2, r3, #15
 8009e24:	4613      	mov	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	3304      	adds	r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	f003 030f 	and.w	r3, r3, #15
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d101      	bne.n	8009e58 <HAL_PCD_EP_Close+0x6e>
 8009e54:	2302      	movs	r3, #2
 8009e56:	e00e      	b.n	8009e76 <HAL_PCD_EP_Close+0x8c>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68f9      	ldr	r1, [r7, #12]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f00a f914 	bl	8014094 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b086      	sub	sp, #24
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	f003 020f 	and.w	r2, r3, #15
 8009e94:	4613      	mov	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d102      	bne.n	8009eda <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6818      	ldr	r0, [r3, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6979      	ldr	r1, [r7, #20]
 8009ee8:	f00a f9b0 	bl	801424c <USB_EPStartXfer>

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	f003 020f 	and.w	r2, r3, #15
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	440b      	add	r3, r1
 8009f14:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009f18:	681b      	ldr	r3, [r3, #0]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b086      	sub	sp, #24
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
 8009f32:	460b      	mov	r3, r1
 8009f34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	f003 020f 	and.w	r2, r3, #15
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	4413      	add	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	3338      	adds	r3, #56	; 0x38
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2201      	movs	r2, #1
 8009f64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d102      	bne.n	8009f80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	f00a f95d 	bl	801424c <USB_EPStartXfer>

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	f003 020f 	and.w	r2, r3, #15
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d901      	bls.n	8009fba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e050      	b.n	800a05c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	da0f      	bge.n	8009fe2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	f003 020f 	and.w	r2, r3, #15
 8009fc8:	4613      	mov	r3, r2
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	3338      	adds	r3, #56	; 0x38
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	705a      	strb	r2, [r3, #1]
 8009fe0:	e00d      	b.n	8009ffe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009fe2:	78fa      	ldrb	r2, [r7, #3]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	00db      	lsls	r3, r3, #3
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a016:	2b01      	cmp	r3, #1
 800a018:	d101      	bne.n	800a01e <HAL_PCD_EP_SetStall+0x82>
 800a01a:	2302      	movs	r3, #2
 800a01c:	e01e      	b.n	800a05c <HAL_PCD_EP_SetStall+0xc0>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f00a fced 	bl	8014a0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	b2d9      	uxtb	r1, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a04c:	461a      	mov	r2, r3
 800a04e:	f00a fedf 	bl	8014e10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	f003 020f 	and.w	r2, r3, #15
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d901      	bls.n	800a082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e042      	b.n	800a108 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a086:	2b00      	cmp	r3, #0
 800a088:	da0f      	bge.n	800a0aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	f003 020f 	and.w	r2, r3, #15
 800a090:	4613      	mov	r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	3338      	adds	r3, #56	; 0x38
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	3304      	adds	r3, #4
 800a0a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	705a      	strb	r2, [r3, #1]
 800a0a8:	e00f      	b.n	800a0ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	f003 020f 	and.w	r2, r3, #15
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	4413      	add	r3, r2
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	f003 030f 	and.w	r3, r3, #15
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_PCD_EP_ClrStall+0x86>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e00e      	b.n	800a108 <HAL_PCD_EP_ClrStall+0xa4>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f00a fcf5 	bl	8014ae8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a11c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a120:	2b00      	cmp	r3, #0
 800a122:	da0c      	bge.n	800a13e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	f003 020f 	and.w	r2, r3, #15
 800a12a:	4613      	mov	r3, r2
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	3338      	adds	r3, #56	; 0x38
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	4413      	add	r3, r2
 800a138:	3304      	adds	r3, #4
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	e00c      	b.n	800a158 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	f003 020f 	and.w	r2, r3, #15
 800a144:	4613      	mov	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	3304      	adds	r3, #4
 800a156:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	4618      	mov	r0, r3
 800a160:	f00a fb14 	bl	801478c <USB_EPStopXfer>
 800a164:	4603      	mov	r3, r0
 800a166:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a168:	7afb      	ldrb	r3, [r7, #11]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b08a      	sub	sp, #40	; 0x28
 800a176:	af02      	add	r7, sp, #8
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	3338      	adds	r3, #56	; 0x38
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4413      	add	r3, r2
 800a196:	3304      	adds	r3, #4
 800a198:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	695a      	ldr	r2, [r3, #20]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d901      	bls.n	800a1aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e06c      	b.n	800a284 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	691a      	ldr	r2, [r3, #16]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d902      	bls.n	800a1c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	3303      	adds	r3, #3
 800a1ca:	089b      	lsrs	r3, r3, #2
 800a1cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a1ce:	e02b      	b.n	800a228 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	691a      	ldr	r2, [r3, #16]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	69fa      	ldr	r2, [r7, #28]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d902      	bls.n	800a1ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	3303      	adds	r3, #3
 800a1f0:	089b      	lsrs	r3, r3, #2
 800a1f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68d9      	ldr	r1, [r3, #12]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a204:	b2db      	uxtb	r3, r3
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4603      	mov	r3, r0
 800a20a:	6978      	ldr	r0, [r7, #20]
 800a20c:	f00a fb68 	bl	80148e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	441a      	add	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	695a      	ldr	r2, [r3, #20]
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	441a      	add	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	b29b      	uxth	r3, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d809      	bhi.n	800a252 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	695a      	ldr	r2, [r3, #20]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a246:	429a      	cmp	r2, r3
 800a248:	d203      	bcs.n	800a252 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1be      	bne.n	800a1d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	691a      	ldr	r2, [r3, #16]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d811      	bhi.n	800a282 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	f003 030f 	and.w	r3, r3, #15
 800a264:	2201      	movs	r2, #1
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	43db      	mvns	r3, r3
 800a278:	6939      	ldr	r1, [r7, #16]
 800a27a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a27e:	4013      	ands	r3, r2
 800a280:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	333c      	adds	r3, #60	; 0x3c
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d17b      	bne.n	800a3ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f003 0308 	and.w	r3, r3, #8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d015      	beq.n	800a2f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	4a61      	ldr	r2, [pc, #388]	; (800a454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	f240 80b9 	bls.w	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 80b3 	beq.w	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2f4:	6093      	str	r3, [r2, #8]
 800a2f6:	e0a7      	b.n	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d009      	beq.n	800a316 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	015a      	lsls	r2, r3, #5
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	4413      	add	r3, r2
 800a30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30e:	461a      	mov	r2, r3
 800a310:	2320      	movs	r3, #32
 800a312:	6093      	str	r3, [r2, #8]
 800a314:	e098      	b.n	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 8093 	bne.w	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	4a4b      	ldr	r2, [pc, #300]	; (800a454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d90f      	bls.n	800a34a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a340:	461a      	mov	r2, r3
 800a342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a346:	6093      	str	r3, [r2, #8]
 800a348:	e07e      	b.n	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	4613      	mov	r3, r2
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	4413      	add	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	4413      	add	r3, r2
 800a35c:	3304      	adds	r3, #4
 800a35e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6a1a      	ldr	r2, [r3, #32]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	0159      	lsls	r1, r3, #5
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	440b      	add	r3, r1
 800a36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a376:	1ad2      	subs	r2, r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d114      	bne.n	800a3ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d109      	bne.n	800a39e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6818      	ldr	r0, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a394:	461a      	mov	r2, r3
 800a396:	2101      	movs	r1, #1
 800a398:	f00a fd3a 	bl	8014e10 <USB_EP0_OutStart>
 800a39c:	e006      	b.n	800a3ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	441a      	add	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f010 fa00 	bl	801a7b8 <HAL_PCD_DataOutStageCallback>
 800a3b8:	e046      	b.n	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	4a26      	ldr	r2, [pc, #152]	; (800a458 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d124      	bne.n	800a40c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3de:	6093      	str	r3, [r2, #8]
 800a3e0:	e032      	b.n	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f003 0320 	and.w	r3, r3, #32
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	2320      	movs	r3, #32
 800a3fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f010 f9d7 	bl	801a7b8 <HAL_PCD_DataOutStageCallback>
 800a40a:	e01d      	b.n	800a448 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d114      	bne.n	800a43c <PCD_EP_OutXfrComplete_int+0x1b0>
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	4613      	mov	r3, r2
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d108      	bne.n	800a43c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a434:	461a      	mov	r2, r3
 800a436:	2100      	movs	r1, #0
 800a438:	f00a fcea 	bl	8014e10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f010 f9b8 	bl	801a7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3720      	adds	r7, #32
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	4f54300a 	.word	0x4f54300a
 800a458:	4f54310a 	.word	0x4f54310a

0800a45c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	333c      	adds	r3, #60	; 0x3c
 800a474:	3304      	adds	r3, #4
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	4413      	add	r3, r2
 800a482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d90e      	bls.n	800a4b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d009      	beq.n	800a4b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f010 f96f 	bl	801a794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a0a      	ldr	r2, [pc, #40]	; (800a4e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d90c      	bls.n	800a4d8 <PCD_EP_OutSetupPacket_int+0x7c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d108      	bne.n	800a4d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	f00a fc9c 	bl	8014e10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	4f54300a 	.word	0x4f54300a

0800a4e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a506:	883b      	ldrh	r3, [r7, #0]
 800a508:	0419      	lsls	r1, r3, #16
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	430a      	orrs	r2, r1
 800a512:	629a      	str	r2, [r3, #40]	; 0x28
 800a514:	e028      	b.n	800a568 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	0c1b      	lsrs	r3, r3, #16
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a524:	2300      	movs	r3, #0
 800a526:	73fb      	strb	r3, [r7, #15]
 800a528:	e00d      	b.n	800a546 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	3340      	adds	r3, #64	; 0x40
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	0c1b      	lsrs	r3, r3, #16
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	4413      	add	r3, r2
 800a53e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	3301      	adds	r3, #1
 800a544:	73fb      	strb	r3, [r7, #15]
 800a546:	7bfa      	ldrb	r2, [r7, #15]
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d3ec      	bcc.n	800a52a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a550:	883b      	ldrh	r3, [r7, #0]
 800a552:	0418      	lsls	r0, r3, #16
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6819      	ldr	r1, [r3, #0]
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	4302      	orrs	r2, r0
 800a560:	3340      	adds	r3, #64	; 0x40
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	887a      	ldrh	r2, [r7, #2]
 800a588:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <HAL_PCDEx_ActivateLPM+0x44>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	10000003 	.word	0x10000003

0800a5e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a600:	4b19      	ldr	r3, [pc, #100]	; (800a668 <HAL_PWREx_ConfigSupply+0x70>)
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d00a      	beq.n	800a622 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a60c:	4b16      	ldr	r3, [pc, #88]	; (800a668 <HAL_PWREx_ConfigSupply+0x70>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d001      	beq.n	800a61e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e01f      	b.n	800a65e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	e01d      	b.n	800a65e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <HAL_PWREx_ConfigSupply+0x70>)
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	f023 0207 	bic.w	r2, r3, #7
 800a62a:	490f      	ldr	r1, [pc, #60]	; (800a668 <HAL_PWREx_ConfigSupply+0x70>)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a632:	f7f9 fcc1 	bl	8003fb8 <HAL_GetTick>
 800a636:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a638:	e009      	b.n	800a64e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a63a:	f7f9 fcbd 	bl	8003fb8 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a648:	d901      	bls.n	800a64e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e007      	b.n	800a65e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a64e:	4b06      	ldr	r3, [pc, #24]	; (800a668 <HAL_PWREx_ConfigSupply+0x70>)
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65a:	d1ee      	bne.n	800a63a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	58024800 	.word	0x58024800

0800a66c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	4a04      	ldr	r2, [pc, #16]	; (800a688 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a67a:	60d3      	str	r3, [r2, #12]
}
 800a67c:	bf00      	nop
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	58024800 	.word	0x58024800

0800a68c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08c      	sub	sp, #48	; 0x30
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e3c8      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 8087 	beq.w	800a7ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6ac:	4b88      	ldr	r3, [pc, #544]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6b6:	4b86      	ldr	r3, [pc, #536]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	2b10      	cmp	r3, #16
 800a6c0:	d007      	beq.n	800a6d2 <HAL_RCC_OscConfig+0x46>
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	2b18      	cmp	r3, #24
 800a6c6:	d110      	bne.n	800a6ea <HAL_RCC_OscConfig+0x5e>
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d10b      	bne.n	800a6ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6d2:	4b7f      	ldr	r3, [pc, #508]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d06c      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x12c>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d168      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e3a2      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f2:	d106      	bne.n	800a702 <HAL_RCC_OscConfig+0x76>
 800a6f4:	4b76      	ldr	r3, [pc, #472]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a75      	ldr	r2, [pc, #468]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a6fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	e02e      	b.n	800a760 <HAL_RCC_OscConfig+0xd4>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10c      	bne.n	800a724 <HAL_RCC_OscConfig+0x98>
 800a70a:	4b71      	ldr	r3, [pc, #452]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a70      	ldr	r2, [pc, #448]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	4b6e      	ldr	r3, [pc, #440]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a6d      	ldr	r2, [pc, #436]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a71c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e01d      	b.n	800a760 <HAL_RCC_OscConfig+0xd4>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a72c:	d10c      	bne.n	800a748 <HAL_RCC_OscConfig+0xbc>
 800a72e:	4b68      	ldr	r3, [pc, #416]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a67      	ldr	r2, [pc, #412]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	4b65      	ldr	r3, [pc, #404]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a64      	ldr	r2, [pc, #400]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	e00b      	b.n	800a760 <HAL_RCC_OscConfig+0xd4>
 800a748:	4b61      	ldr	r3, [pc, #388]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a60      	ldr	r2, [pc, #384]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a74e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	4b5e      	ldr	r3, [pc, #376]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a5d      	ldr	r2, [pc, #372]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a75a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a75e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d013      	beq.n	800a790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a768:	f7f9 fc26 	bl	8003fb8 <HAL_GetTick>
 800a76c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a76e:	e008      	b.n	800a782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a770:	f7f9 fc22 	bl	8003fb8 <HAL_GetTick>
 800a774:	4602      	mov	r2, r0
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	2b64      	cmp	r3, #100	; 0x64
 800a77c:	d901      	bls.n	800a782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e356      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a782:	4b53      	ldr	r3, [pc, #332]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0f0      	beq.n	800a770 <HAL_RCC_OscConfig+0xe4>
 800a78e:	e014      	b.n	800a7ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a790:	f7f9 fc12 	bl	8003fb8 <HAL_GetTick>
 800a794:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a796:	e008      	b.n	800a7aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a798:	f7f9 fc0e 	bl	8003fb8 <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b64      	cmp	r3, #100	; 0x64
 800a7a4:	d901      	bls.n	800a7aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e342      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7aa:	4b49      	ldr	r3, [pc, #292]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1f0      	bne.n	800a798 <HAL_RCC_OscConfig+0x10c>
 800a7b6:	e000      	b.n	800a7ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 808c 	beq.w	800a8e0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7c8:	4b41      	ldr	r3, [pc, #260]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7d2:	4b3f      	ldr	r3, [pc, #252]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <HAL_RCC_OscConfig+0x162>
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	2b18      	cmp	r3, #24
 800a7e2:	d137      	bne.n	800a854 <HAL_RCC_OscConfig+0x1c8>
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	f003 0303 	and.w	r3, r3, #3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d132      	bne.n	800a854 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7ee:	4b38      	ldr	r3, [pc, #224]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0304 	and.w	r3, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d005      	beq.n	800a806 <HAL_RCC_OscConfig+0x17a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e314      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a806:	4b32      	ldr	r3, [pc, #200]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f023 0219 	bic.w	r2, r3, #25
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	492f      	ldr	r1, [pc, #188]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a814:	4313      	orrs	r3, r2
 800a816:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a818:	f7f9 fbce 	bl	8003fb8 <HAL_GetTick>
 800a81c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a81e:	e008      	b.n	800a832 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a820:	f7f9 fbca 	bl	8003fb8 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e2fe      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a832:	4b27      	ldr	r3, [pc, #156]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0304 	and.w	r3, r3, #4
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0f0      	beq.n	800a820 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a83e:	4b24      	ldr	r3, [pc, #144]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	061b      	lsls	r3, r3, #24
 800a84c:	4920      	ldr	r1, [pc, #128]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a84e:	4313      	orrs	r3, r2
 800a850:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a852:	e045      	b.n	800a8e0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d026      	beq.n	800a8aa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a85c:	4b1c      	ldr	r3, [pc, #112]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f023 0219 	bic.w	r2, r3, #25
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	4919      	ldr	r1, [pc, #100]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a86e:	f7f9 fba3 	bl	8003fb8 <HAL_GetTick>
 800a872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a874:	e008      	b.n	800a888 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a876:	f7f9 fb9f 	bl	8003fb8 <HAL_GetTick>
 800a87a:	4602      	mov	r2, r0
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	d901      	bls.n	800a888 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e2d3      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0f0      	beq.n	800a876 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a894:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	061b      	lsls	r3, r3, #24
 800a8a2:	490b      	ldr	r1, [pc, #44]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	604b      	str	r3, [r1, #4]
 800a8a8:	e01a      	b.n	800a8e0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a08      	ldr	r2, [pc, #32]	; (800a8d0 <HAL_RCC_OscConfig+0x244>)
 800a8b0:	f023 0301 	bic.w	r3, r3, #1
 800a8b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b6:	f7f9 fb7f 	bl	8003fb8 <HAL_GetTick>
 800a8ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8bc:	e00a      	b.n	800a8d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8be:	f7f9 fb7b 	bl	8003fb8 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d903      	bls.n	800a8d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e2af      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
 800a8d0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8d4:	4b96      	ldr	r3, [pc, #600]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1ee      	bne.n	800a8be <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d06a      	beq.n	800a9c2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ec:	4b90      	ldr	r3, [pc, #576]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8f6:	4b8e      	ldr	r3, [pc, #568]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d007      	beq.n	800a912 <HAL_RCC_OscConfig+0x286>
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	2b18      	cmp	r3, #24
 800a906:	d11b      	bne.n	800a940 <HAL_RCC_OscConfig+0x2b4>
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d116      	bne.n	800a940 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a912:	4b87      	ldr	r3, [pc, #540]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <HAL_RCC_OscConfig+0x29e>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	2b80      	cmp	r3, #128	; 0x80
 800a924:	d001      	beq.n	800a92a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e282      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a92a:	4b81      	ldr	r3, [pc, #516]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	061b      	lsls	r3, r3, #24
 800a938:	497d      	ldr	r1, [pc, #500]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a93e:	e040      	b.n	800a9c2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d023      	beq.n	800a990 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a948:	4b79      	ldr	r3, [pc, #484]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a78      	ldr	r2, [pc, #480]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a954:	f7f9 fb30 	bl	8003fb8 <HAL_GetTick>
 800a958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a95a:	e008      	b.n	800a96e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a95c:	f7f9 fb2c 	bl	8003fb8 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	2b02      	cmp	r3, #2
 800a968:	d901      	bls.n	800a96e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a96a:	2303      	movs	r3, #3
 800a96c:	e260      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a96e:	4b70      	ldr	r3, [pc, #448]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0f0      	beq.n	800a95c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a97a:	4b6d      	ldr	r3, [pc, #436]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	061b      	lsls	r3, r3, #24
 800a988:	4969      	ldr	r1, [pc, #420]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60cb      	str	r3, [r1, #12]
 800a98e:	e018      	b.n	800a9c2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a990:	4b67      	ldr	r3, [pc, #412]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a66      	ldr	r2, [pc, #408]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a99a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a99c:	f7f9 fb0c 	bl	8003fb8 <HAL_GetTick>
 800a9a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9a2:	e008      	b.n	800a9b6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9a4:	f7f9 fb08 	bl	8003fb8 <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d901      	bls.n	800a9b6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e23c      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9b6:	4b5e      	ldr	r3, [pc, #376]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1f0      	bne.n	800a9a4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0308 	and.w	r3, r3, #8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d036      	beq.n	800aa3c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d019      	beq.n	800aa0a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9d6:	4b56      	ldr	r3, [pc, #344]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9da:	4a55      	ldr	r2, [pc, #340]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a9dc:	f043 0301 	orr.w	r3, r3, #1
 800a9e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9e2:	f7f9 fae9 	bl	8003fb8 <HAL_GetTick>
 800a9e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9e8:	e008      	b.n	800a9fc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9ea:	f7f9 fae5 	bl	8003fb8 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d901      	bls.n	800a9fc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e219      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9fc:	4b4c      	ldr	r3, [pc, #304]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800a9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa00:	f003 0302 	and.w	r3, r3, #2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0f0      	beq.n	800a9ea <HAL_RCC_OscConfig+0x35e>
 800aa08:	e018      	b.n	800aa3c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa0a:	4b49      	ldr	r3, [pc, #292]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa0e:	4a48      	ldr	r2, [pc, #288]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa10:	f023 0301 	bic.w	r3, r3, #1
 800aa14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa16:	f7f9 facf 	bl	8003fb8 <HAL_GetTick>
 800aa1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa1c:	e008      	b.n	800aa30 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa1e:	f7f9 facb 	bl	8003fb8 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e1ff      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa30:	4b3f      	ldr	r3, [pc, #252]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f0      	bne.n	800aa1e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d036      	beq.n	800aab6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d019      	beq.n	800aa84 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa50:	4b37      	ldr	r3, [pc, #220]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a36      	ldr	r2, [pc, #216]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa5c:	f7f9 faac 	bl	8003fb8 <HAL_GetTick>
 800aa60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa64:	f7f9 faa8 	bl	8003fb8 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e1dc      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa76:	4b2e      	ldr	r3, [pc, #184]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f0      	beq.n	800aa64 <HAL_RCC_OscConfig+0x3d8>
 800aa82:	e018      	b.n	800aab6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa84:	4b2a      	ldr	r3, [pc, #168]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aa8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa90:	f7f9 fa92 	bl	8003fb8 <HAL_GetTick>
 800aa94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa96:	e008      	b.n	800aaaa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa98:	f7f9 fa8e 	bl	8003fb8 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e1c2      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaaa:	4b21      	ldr	r3, [pc, #132]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1f0      	bne.n	800aa98 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0304 	and.w	r3, r3, #4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 8086 	beq.w	800abd0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aac4:	4b1b      	ldr	r3, [pc, #108]	; (800ab34 <HAL_RCC_OscConfig+0x4a8>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a1a      	ldr	r2, [pc, #104]	; (800ab34 <HAL_RCC_OscConfig+0x4a8>)
 800aaca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aad0:	f7f9 fa72 	bl	8003fb8 <HAL_GetTick>
 800aad4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aad8:	f7f9 fa6e 	bl	8003fb8 <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b64      	cmp	r3, #100	; 0x64
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e1a2      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aaea:	4b12      	ldr	r3, [pc, #72]	; (800ab34 <HAL_RCC_OscConfig+0x4a8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0f0      	beq.n	800aad8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d106      	bne.n	800ab0c <HAL_RCC_OscConfig+0x480>
 800aafe:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800ab00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab02:	4a0b      	ldr	r2, [pc, #44]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800ab04:	f043 0301 	orr.w	r3, r3, #1
 800ab08:	6713      	str	r3, [r2, #112]	; 0x70
 800ab0a:	e032      	b.n	800ab72 <HAL_RCC_OscConfig+0x4e6>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d111      	bne.n	800ab38 <HAL_RCC_OscConfig+0x4ac>
 800ab14:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800ab16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab18:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab20:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	4a02      	ldr	r2, [pc, #8]	; (800ab30 <HAL_RCC_OscConfig+0x4a4>)
 800ab26:	f023 0304 	bic.w	r3, r3, #4
 800ab2a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab2c:	e021      	b.n	800ab72 <HAL_RCC_OscConfig+0x4e6>
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400
 800ab34:	58024800 	.word	0x58024800
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	d10c      	bne.n	800ab5a <HAL_RCC_OscConfig+0x4ce>
 800ab40:	4b83      	ldr	r3, [pc, #524]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab44:	4a82      	ldr	r2, [pc, #520]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab46:	f043 0304 	orr.w	r3, r3, #4
 800ab4a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab4c:	4b80      	ldr	r3, [pc, #512]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab50:	4a7f      	ldr	r2, [pc, #508]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab52:	f043 0301 	orr.w	r3, r3, #1
 800ab56:	6713      	str	r3, [r2, #112]	; 0x70
 800ab58:	e00b      	b.n	800ab72 <HAL_RCC_OscConfig+0x4e6>
 800ab5a:	4b7d      	ldr	r3, [pc, #500]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5e:	4a7c      	ldr	r2, [pc, #496]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab60:	f023 0301 	bic.w	r3, r3, #1
 800ab64:	6713      	str	r3, [r2, #112]	; 0x70
 800ab66:	4b7a      	ldr	r3, [pc, #488]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6a:	4a79      	ldr	r2, [pc, #484]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab6c:	f023 0304 	bic.w	r3, r3, #4
 800ab70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d015      	beq.n	800aba6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab7a:	f7f9 fa1d 	bl	8003fb8 <HAL_GetTick>
 800ab7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab80:	e00a      	b.n	800ab98 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab82:	f7f9 fa19 	bl	8003fb8 <HAL_GetTick>
 800ab86:	4602      	mov	r2, r0
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d901      	bls.n	800ab98 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e14b      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab98:	4b6d      	ldr	r3, [pc, #436]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ab9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0ee      	beq.n	800ab82 <HAL_RCC_OscConfig+0x4f6>
 800aba4:	e014      	b.n	800abd0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aba6:	f7f9 fa07 	bl	8003fb8 <HAL_GetTick>
 800abaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abac:	e00a      	b.n	800abc4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abae:	f7f9 fa03 	bl	8003fb8 <HAL_GetTick>
 800abb2:	4602      	mov	r2, r0
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d901      	bls.n	800abc4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e135      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abc4:	4b62      	ldr	r3, [pc, #392]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800abc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc8:	f003 0302 	and.w	r3, r3, #2
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1ee      	bne.n	800abae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 812a 	beq.w	800ae2e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800abda:	4b5d      	ldr	r3, [pc, #372]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abe2:	2b18      	cmp	r3, #24
 800abe4:	f000 80ba 	beq.w	800ad5c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	2b02      	cmp	r3, #2
 800abee:	f040 8095 	bne.w	800ad1c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abf2:	4b57      	ldr	r3, [pc, #348]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a56      	ldr	r2, [pc, #344]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800abf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abfe:	f7f9 f9db 	bl	8003fb8 <HAL_GetTick>
 800ac02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac04:	e008      	b.n	800ac18 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac06:	f7f9 f9d7 	bl	8003fb8 <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d901      	bls.n	800ac18 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e10b      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac18:	4b4d      	ldr	r3, [pc, #308]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1f0      	bne.n	800ac06 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac24:	4b4a      	ldr	r3, [pc, #296]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac28:	4b4a      	ldr	r3, [pc, #296]	; (800ad54 <HAL_RCC_OscConfig+0x6c8>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac34:	0112      	lsls	r2, r2, #4
 800ac36:	430a      	orrs	r2, r1
 800ac38:	4945      	ldr	r1, [pc, #276]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	628b      	str	r3, [r1, #40]	; 0x28
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	3b01      	subs	r3, #1
 800ac44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	025b      	lsls	r3, r3, #9
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	041b      	lsls	r3, r3, #16
 800ac5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac60:	431a      	orrs	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac66:	3b01      	subs	r3, #1
 800ac68:	061b      	lsls	r3, r3, #24
 800ac6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac6e:	4938      	ldr	r1, [pc, #224]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac74:	4b36      	ldr	r3, [pc, #216]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a35      	ldr	r2, [pc, #212]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac7a:	f023 0301 	bic.w	r3, r3, #1
 800ac7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac80:	4b33      	ldr	r3, [pc, #204]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac84:	4b34      	ldr	r3, [pc, #208]	; (800ad58 <HAL_RCC_OscConfig+0x6cc>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac8c:	00d2      	lsls	r2, r2, #3
 800ac8e:	4930      	ldr	r1, [pc, #192]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac94:	4b2e      	ldr	r3, [pc, #184]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac98:	f023 020c 	bic.w	r2, r3, #12
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca0:	492b      	ldr	r1, [pc, #172]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aca6:	4b2a      	ldr	r3, [pc, #168]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f023 0202 	bic.w	r2, r3, #2
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb2:	4927      	ldr	r1, [pc, #156]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800acb8:	4b25      	ldr	r3, [pc, #148]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4a24      	ldr	r2, [pc, #144]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc4:	4b22      	ldr	r3, [pc, #136]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc8:	4a21      	ldr	r2, [pc, #132]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800acd0:	4b1f      	ldr	r3, [pc, #124]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a1e      	ldr	r2, [pc, #120]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800acdc:	4b1c      	ldr	r3, [pc, #112]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	4a1b      	ldr	r2, [pc, #108]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ace2:	f043 0301 	orr.w	r3, r3, #1
 800ace6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ace8:	4b19      	ldr	r3, [pc, #100]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a18      	ldr	r2, [pc, #96]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800acee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf4:	f7f9 f960 	bl	8003fb8 <HAL_GetTick>
 800acf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acfa:	e008      	b.n	800ad0e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acfc:	f7f9 f95c 	bl	8003fb8 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e090      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <HAL_RCC_OscConfig+0x670>
 800ad1a:	e088      	b.n	800ae2e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a0b      	ldr	r2, [pc, #44]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ad22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad28:	f7f9 f946 	bl	8003fb8 <HAL_GetTick>
 800ad2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad2e:	e008      	b.n	800ad42 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad30:	f7f9 f942 	bl	8003fb8 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d901      	bls.n	800ad42 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e076      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad42:	4b03      	ldr	r3, [pc, #12]	; (800ad50 <HAL_RCC_OscConfig+0x6c4>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f0      	bne.n	800ad30 <HAL_RCC_OscConfig+0x6a4>
 800ad4e:	e06e      	b.n	800ae2e <HAL_RCC_OscConfig+0x7a2>
 800ad50:	58024400 	.word	0x58024400
 800ad54:	fffffc0c 	.word	0xfffffc0c
 800ad58:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad5c:	4b36      	ldr	r3, [pc, #216]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800ad5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad62:	4b35      	ldr	r3, [pc, #212]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800ad64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d031      	beq.n	800add4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f003 0203 	and.w	r2, r3, #3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d12a      	bne.n	800add4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	091b      	lsrs	r3, r3, #4
 800ad82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d122      	bne.n	800add4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d11a      	bne.n	800add4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	0a5b      	lsrs	r3, r3, #9
 800ada2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adaa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adac:	429a      	cmp	r2, r3
 800adae:	d111      	bne.n	800add4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	0c1b      	lsrs	r3, r3, #16
 800adb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d108      	bne.n	800add4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	0e1b      	lsrs	r3, r3, #24
 800adc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800add0:	429a      	cmp	r2, r3
 800add2:	d001      	beq.n	800add8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e02b      	b.n	800ae30 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800add8:	4b17      	ldr	r3, [pc, #92]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800adda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800addc:	08db      	lsrs	r3, r3, #3
 800adde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ade2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	429a      	cmp	r2, r3
 800adec:	d01f      	beq.n	800ae2e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800adee:	4b12      	ldr	r3, [pc, #72]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800adf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf2:	4a11      	ldr	r2, [pc, #68]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800adfa:	f7f9 f8dd 	bl	8003fb8 <HAL_GetTick>
 800adfe:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae00:	bf00      	nop
 800ae02:	f7f9 f8d9 	bl	8003fb8 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d0f9      	beq.n	800ae02 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae0e:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800ae10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae12:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <HAL_RCC_OscConfig+0x7b0>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae1a:	00d2      	lsls	r2, r2, #3
 800ae1c:	4906      	ldr	r1, [pc, #24]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae22:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae26:	4a04      	ldr	r2, [pc, #16]	; (800ae38 <HAL_RCC_OscConfig+0x7ac>)
 800ae28:	f043 0301 	orr.w	r3, r3, #1
 800ae2c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3730      	adds	r7, #48	; 0x30
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	58024400 	.word	0x58024400
 800ae3c:	ffff0007 	.word	0xffff0007

0800ae40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e19c      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae54:	4b8a      	ldr	r3, [pc, #552]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d910      	bls.n	800ae84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae62:	4b87      	ldr	r3, [pc, #540]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f023 020f 	bic.w	r2, r3, #15
 800ae6a:	4985      	ldr	r1, [pc, #532]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae72:	4b83      	ldr	r3, [pc, #524]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d001      	beq.n	800ae84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e184      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d010      	beq.n	800aeb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691a      	ldr	r2, [r3, #16]
 800ae94:	4b7b      	ldr	r3, [pc, #492]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d908      	bls.n	800aeb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aea0:	4b78      	ldr	r3, [pc, #480]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	4975      	ldr	r1, [pc, #468]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d010      	beq.n	800aee0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	695a      	ldr	r2, [r3, #20]
 800aec2:	4b70      	ldr	r3, [pc, #448]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d908      	bls.n	800aee0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aece:	4b6d      	ldr	r3, [pc, #436]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aed0:	69db      	ldr	r3, [r3, #28]
 800aed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	496a      	ldr	r1, [pc, #424]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0310 	and.w	r3, r3, #16
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	699a      	ldr	r2, [r3, #24]
 800aef0:	4b64      	ldr	r3, [pc, #400]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d908      	bls.n	800af0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aefc:	4b61      	ldr	r3, [pc, #388]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	495e      	ldr	r1, [pc, #376]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69da      	ldr	r2, [r3, #28]
 800af1e:	4b59      	ldr	r3, [pc, #356]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af26:	429a      	cmp	r2, r3
 800af28:	d908      	bls.n	800af3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af2a:	4b56      	ldr	r3, [pc, #344]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	4953      	ldr	r1, [pc, #332]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d010      	beq.n	800af6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	4b4d      	ldr	r3, [pc, #308]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	f003 030f 	and.w	r3, r3, #15
 800af54:	429a      	cmp	r2, r3
 800af56:	d908      	bls.n	800af6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af58:	4b4a      	ldr	r3, [pc, #296]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	f023 020f 	bic.w	r2, r3, #15
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	4947      	ldr	r1, [pc, #284]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af66:	4313      	orrs	r3, r2
 800af68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	d055      	beq.n	800b022 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af76:	4b43      	ldr	r3, [pc, #268]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	4940      	ldr	r1, [pc, #256]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af84:	4313      	orrs	r3, r2
 800af86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d107      	bne.n	800afa0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af90:	4b3c      	ldr	r3, [pc, #240]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d121      	bne.n	800afe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e0f6      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d107      	bne.n	800afb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afa8:	4b36      	ldr	r3, [pc, #216]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d115      	bne.n	800afe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e0ea      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d107      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afc0:	4b30      	ldr	r3, [pc, #192]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d109      	bne.n	800afe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0de      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afd0:	4b2c      	ldr	r3, [pc, #176]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0304 	and.w	r3, r3, #4
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e0d6      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800afe0:	4b28      	ldr	r3, [pc, #160]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f023 0207 	bic.w	r2, r3, #7
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4925      	ldr	r1, [pc, #148]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aff2:	f7f8 ffe1 	bl	8003fb8 <HAL_GetTick>
 800aff6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aff8:	e00a      	b.n	800b010 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800affa:	f7f8 ffdd 	bl	8003fb8 <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	f241 3288 	movw	r2, #5000	; 0x1388
 800b008:	4293      	cmp	r3, r2
 800b00a:	d901      	bls.n	800b010 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e0be      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b010:	4b1c      	ldr	r3, [pc, #112]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	429a      	cmp	r2, r3
 800b020:	d1eb      	bne.n	800affa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d010      	beq.n	800b050 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68da      	ldr	r2, [r3, #12]
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	f003 030f 	and.w	r3, r3, #15
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d208      	bcs.n	800b050 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b03e:	4b11      	ldr	r3, [pc, #68]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	f023 020f 	bic.w	r2, r3, #15
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	490e      	ldr	r1, [pc, #56]	; (800b084 <HAL_RCC_ClockConfig+0x244>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b050:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 030f 	and.w	r3, r3, #15
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d214      	bcs.n	800b088 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b05e:	4b08      	ldr	r3, [pc, #32]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f023 020f 	bic.w	r2, r3, #15
 800b066:	4906      	ldr	r1, [pc, #24]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b06e:	4b04      	ldr	r3, [pc, #16]	; (800b080 <HAL_RCC_ClockConfig+0x240>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d005      	beq.n	800b088 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e086      	b.n	800b18e <HAL_RCC_ClockConfig+0x34e>
 800b080:	52002000 	.word	0x52002000
 800b084:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0304 	and.w	r3, r3, #4
 800b090:	2b00      	cmp	r3, #0
 800b092:	d010      	beq.n	800b0b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	4b3f      	ldr	r3, [pc, #252]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d208      	bcs.n	800b0b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0a4:	4b3c      	ldr	r3, [pc, #240]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	4939      	ldr	r1, [pc, #228]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0308 	and.w	r3, r3, #8
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d010      	beq.n	800b0e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	695a      	ldr	r2, [r3, #20]
 800b0c6:	4b34      	ldr	r3, [pc, #208]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d208      	bcs.n	800b0e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0d2:	4b31      	ldr	r3, [pc, #196]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	492e      	ldr	r1, [pc, #184]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0310 	and.w	r3, r3, #16
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d010      	beq.n	800b112 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	699a      	ldr	r2, [r3, #24]
 800b0f4:	4b28      	ldr	r3, [pc, #160]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d208      	bcs.n	800b112 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b100:	4b25      	ldr	r3, [pc, #148]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	4922      	ldr	r1, [pc, #136]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0320 	and.w	r3, r3, #32
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d010      	beq.n	800b140 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	69da      	ldr	r2, [r3, #28]
 800b122:	4b1d      	ldr	r3, [pc, #116]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d208      	bcs.n	800b140 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b12e:	4b1a      	ldr	r3, [pc, #104]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	4917      	ldr	r1, [pc, #92]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b140:	f000 f89e 	bl	800b280 <HAL_RCC_GetSysClockFreq>
 800b144:	4602      	mov	r2, r0
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	0a1b      	lsrs	r3, r3, #8
 800b14c:	f003 030f 	and.w	r3, r3, #15
 800b150:	4912      	ldr	r1, [pc, #72]	; (800b19c <HAL_RCC_ClockConfig+0x35c>)
 800b152:	5ccb      	ldrb	r3, [r1, r3]
 800b154:	f003 031f 	and.w	r3, r3, #31
 800b158:	fa22 f303 	lsr.w	r3, r2, r3
 800b15c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b15e:	4b0e      	ldr	r3, [pc, #56]	; (800b198 <HAL_RCC_ClockConfig+0x358>)
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	f003 030f 	and.w	r3, r3, #15
 800b166:	4a0d      	ldr	r2, [pc, #52]	; (800b19c <HAL_RCC_ClockConfig+0x35c>)
 800b168:	5cd3      	ldrb	r3, [r2, r3]
 800b16a:	f003 031f 	and.w	r3, r3, #31
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	4a0a      	ldr	r2, [pc, #40]	; (800b1a0 <HAL_RCC_ClockConfig+0x360>)
 800b176:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b178:	4a0a      	ldr	r2, [pc, #40]	; (800b1a4 <HAL_RCC_ClockConfig+0x364>)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b17e:	4b0a      	ldr	r3, [pc, #40]	; (800b1a8 <HAL_RCC_ClockConfig+0x368>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f7f8 fece 	bl	8003f24 <HAL_InitTick>
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	58024400 	.word	0x58024400
 800b19c:	0801f8fc 	.word	0x0801f8fc
 800b1a0:	24000004 	.word	0x24000004
 800b1a4:	24000000 	.word	0x24000000
 800b1a8:	24000008 	.word	0x24000008

0800b1ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08c      	sub	sp, #48	; 0x30
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d12a      	bne.n	800b214 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b1be:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b1c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1c4:	4a2b      	ldr	r2, [pc, #172]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b1c6:	f043 0301 	orr.w	r3, r3, #1
 800b1ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b1ce:	4b29      	ldr	r3, [pc, #164]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b1d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	61bb      	str	r3, [r7, #24]
 800b1da:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b1dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b1f2:	f107 031c 	add.w	r3, r7, #28
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	481f      	ldr	r0, [pc, #124]	; (800b278 <HAL_RCC_MCOConfig+0xcc>)
 800b1fa:	f7fd fc29 	bl	8008a50 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b1fe:	4b1d      	ldr	r3, [pc, #116]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b206:	68b9      	ldr	r1, [r7, #8]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	430b      	orrs	r3, r1
 800b20c:	4919      	ldr	r1, [pc, #100]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b212:	e02a      	b.n	800b26a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b214:	4b17      	ldr	r3, [pc, #92]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b21a:	4a16      	ldr	r2, [pc, #88]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b21c:	f043 0304 	orr.w	r3, r3, #4
 800b220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b224:	4b13      	ldr	r3, [pc, #76]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b22a:	f003 0304 	and.w	r3, r3, #4
 800b22e:	617b      	str	r3, [r7, #20]
 800b230:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b232:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b238:	2302      	movs	r3, #2
 800b23a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b23c:	2303      	movs	r3, #3
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b240:	2300      	movs	r3, #0
 800b242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b244:	2300      	movs	r3, #0
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b248:	f107 031c 	add.w	r3, r7, #28
 800b24c:	4619      	mov	r1, r3
 800b24e:	480b      	ldr	r0, [pc, #44]	; (800b27c <HAL_RCC_MCOConfig+0xd0>)
 800b250:	f7fd fbfe 	bl	8008a50 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b254:	4b07      	ldr	r3, [pc, #28]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	01d9      	lsls	r1, r3, #7
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	430b      	orrs	r3, r1
 800b264:	4903      	ldr	r1, [pc, #12]	; (800b274 <HAL_RCC_MCOConfig+0xc8>)
 800b266:	4313      	orrs	r3, r2
 800b268:	610b      	str	r3, [r1, #16]
}
 800b26a:	bf00      	nop
 800b26c:	3730      	adds	r7, #48	; 0x30
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	58024400 	.word	0x58024400
 800b278:	58020000 	.word	0x58020000
 800b27c:	58020800 	.word	0x58020800

0800b280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b280:	b480      	push	{r7}
 800b282:	b089      	sub	sp, #36	; 0x24
 800b284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b286:	4bb3      	ldr	r3, [pc, #716]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b28e:	2b18      	cmp	r3, #24
 800b290:	f200 8155 	bhi.w	800b53e <HAL_RCC_GetSysClockFreq+0x2be>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b53f 	.word	0x0800b53f
 800b2a4:	0800b53f 	.word	0x0800b53f
 800b2a8:	0800b53f 	.word	0x0800b53f
 800b2ac:	0800b53f 	.word	0x0800b53f
 800b2b0:	0800b53f 	.word	0x0800b53f
 800b2b4:	0800b53f 	.word	0x0800b53f
 800b2b8:	0800b53f 	.word	0x0800b53f
 800b2bc:	0800b327 	.word	0x0800b327
 800b2c0:	0800b53f 	.word	0x0800b53f
 800b2c4:	0800b53f 	.word	0x0800b53f
 800b2c8:	0800b53f 	.word	0x0800b53f
 800b2cc:	0800b53f 	.word	0x0800b53f
 800b2d0:	0800b53f 	.word	0x0800b53f
 800b2d4:	0800b53f 	.word	0x0800b53f
 800b2d8:	0800b53f 	.word	0x0800b53f
 800b2dc:	0800b32d 	.word	0x0800b32d
 800b2e0:	0800b53f 	.word	0x0800b53f
 800b2e4:	0800b53f 	.word	0x0800b53f
 800b2e8:	0800b53f 	.word	0x0800b53f
 800b2ec:	0800b53f 	.word	0x0800b53f
 800b2f0:	0800b53f 	.word	0x0800b53f
 800b2f4:	0800b53f 	.word	0x0800b53f
 800b2f8:	0800b53f 	.word	0x0800b53f
 800b2fc:	0800b333 	.word	0x0800b333
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b300:	4b94      	ldr	r3, [pc, #592]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d009      	beq.n	800b320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b30c:	4b91      	ldr	r3, [pc, #580]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	08db      	lsrs	r3, r3, #3
 800b312:	f003 0303 	and.w	r3, r3, #3
 800b316:	4a90      	ldr	r2, [pc, #576]	; (800b558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b318:	fa22 f303 	lsr.w	r3, r2, r3
 800b31c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b31e:	e111      	b.n	800b544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b320:	4b8d      	ldr	r3, [pc, #564]	; (800b558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b322:	61bb      	str	r3, [r7, #24]
      break;
 800b324:	e10e      	b.n	800b544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b326:	4b8d      	ldr	r3, [pc, #564]	; (800b55c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b328:	61bb      	str	r3, [r7, #24]
      break;
 800b32a:	e10b      	b.n	800b544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b32c:	4b8c      	ldr	r3, [pc, #560]	; (800b560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b32e:	61bb      	str	r3, [r7, #24]
      break;
 800b330:	e108      	b.n	800b544 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b332:	4b88      	ldr	r3, [pc, #544]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b33c:	4b85      	ldr	r3, [pc, #532]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b340:	091b      	lsrs	r3, r3, #4
 800b342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b346:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b348:	4b82      	ldr	r3, [pc, #520]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b352:	4b80      	ldr	r3, [pc, #512]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b356:	08db      	lsrs	r3, r3, #3
 800b358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	fb02 f303 	mul.w	r3, r2, r3
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 80e1 	beq.w	800b538 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	f000 8083 	beq.w	800b484 <HAL_RCC_GetSysClockFreq+0x204>
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b02      	cmp	r3, #2
 800b382:	f200 80a1 	bhi.w	800b4c8 <HAL_RCC_GetSysClockFreq+0x248>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <HAL_RCC_GetSysClockFreq+0x114>
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d056      	beq.n	800b440 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b392:	e099      	b.n	800b4c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b394:	4b6f      	ldr	r3, [pc, #444]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0320 	and.w	r3, r3, #32
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d02d      	beq.n	800b3fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3a0:	4b6c      	ldr	r3, [pc, #432]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	08db      	lsrs	r3, r3, #3
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	4a6b      	ldr	r2, [pc, #428]	; (800b558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ca:	4b62      	ldr	r3, [pc, #392]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3de:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b3fa:	e087      	b.n	800b50c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b406:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b568 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40e:	4b51      	ldr	r3, [pc, #324]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b422:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b43e:	e065      	b.n	800b50c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b56c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b452:	4b40      	ldr	r3, [pc, #256]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b462:	ed97 6a02 	vldr	s12, [r7, #8]
 800b466:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b482:	e043      	b.n	800b50c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b570 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b496:	4b2f      	ldr	r3, [pc, #188]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4c6:	e021      	b.n	800b50c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	ee07 3a90 	vmov	s15, r3
 800b4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b56c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4da:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b50a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b50c:	4b11      	ldr	r3, [pc, #68]	; (800b554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b510:	0a5b      	lsrs	r3, r3, #9
 800b512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b516:	3301      	adds	r3, #1
 800b518:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	ee07 3a90 	vmov	s15, r3
 800b520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b524:	edd7 6a07 	vldr	s13, [r7, #28]
 800b528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b530:	ee17 3a90 	vmov	r3, s15
 800b534:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b536:	e005      	b.n	800b544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
      break;
 800b53c:	e002      	b.n	800b544 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b53e:	4b07      	ldr	r3, [pc, #28]	; (800b55c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b540:	61bb      	str	r3, [r7, #24]
      break;
 800b542:	bf00      	nop
  }

  return sysclockfreq;
 800b544:	69bb      	ldr	r3, [r7, #24]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3724      	adds	r7, #36	; 0x24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	58024400 	.word	0x58024400
 800b558:	03d09000 	.word	0x03d09000
 800b55c:	003d0900 	.word	0x003d0900
 800b560:	02faf080 	.word	0x02faf080
 800b564:	46000000 	.word	0x46000000
 800b568:	4c742400 	.word	0x4c742400
 800b56c:	4a742400 	.word	0x4a742400
 800b570:	4c3ebc20 	.word	0x4c3ebc20

0800b574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b57a:	f7ff fe81 	bl	800b280 <HAL_RCC_GetSysClockFreq>
 800b57e:	4602      	mov	r2, r0
 800b580:	4b10      	ldr	r3, [pc, #64]	; (800b5c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	0a1b      	lsrs	r3, r3, #8
 800b586:	f003 030f 	and.w	r3, r3, #15
 800b58a:	490f      	ldr	r1, [pc, #60]	; (800b5c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b58c:	5ccb      	ldrb	r3, [r1, r3]
 800b58e:	f003 031f 	and.w	r3, r3, #31
 800b592:	fa22 f303 	lsr.w	r3, r2, r3
 800b596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b598:	4b0a      	ldr	r3, [pc, #40]	; (800b5c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	f003 030f 	and.w	r3, r3, #15
 800b5a0:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b5a2:	5cd3      	ldrb	r3, [r2, r3]
 800b5a4:	f003 031f 	and.w	r3, r3, #31
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ae:	4a07      	ldr	r2, [pc, #28]	; (800b5cc <HAL_RCC_GetHCLKFreq+0x58>)
 800b5b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b5b2:	4a07      	ldr	r2, [pc, #28]	; (800b5d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b5b8:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <HAL_RCC_GetHCLKFreq+0x58>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	0801f8fc 	.word	0x0801f8fc
 800b5cc:	24000004 	.word	0x24000004
 800b5d0:	24000000 	.word	0x24000000

0800b5d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b5d8:	f7ff ffcc 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	091b      	lsrs	r3, r3, #4
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	4904      	ldr	r1, [pc, #16]	; (800b5fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b5ea:	5ccb      	ldrb	r3, [r1, r3]
 800b5ec:	f003 031f 	and.w	r3, r3, #31
 800b5f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	58024400 	.word	0x58024400
 800b5fc:	0801f8fc 	.word	0x0801f8fc

0800b600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b604:	f7ff ffb6 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 800b608:	4602      	mov	r2, r0
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	0a1b      	lsrs	r3, r3, #8
 800b610:	f003 0307 	and.w	r3, r3, #7
 800b614:	4904      	ldr	r1, [pc, #16]	; (800b628 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b616:	5ccb      	ldrb	r3, [r1, r3]
 800b618:	f003 031f 	and.w	r3, r3, #31
 800b61c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b620:	4618      	mov	r0, r3
 800b622:	bd80      	pop	{r7, pc}
 800b624:	58024400 	.word	0x58024400
 800b628:	0801f8fc 	.word	0x0801f8fc

0800b62c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b62c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b630:	b0c6      	sub	sp, #280	; 0x118
 800b632:	af00      	add	r7, sp, #0
 800b634:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b638:	2300      	movs	r3, #0
 800b63a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b63e:	2300      	movs	r3, #0
 800b640:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b650:	2500      	movs	r5, #0
 800b652:	ea54 0305 	orrs.w	r3, r4, r5
 800b656:	d049      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b65e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b662:	d02f      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b668:	d828      	bhi.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b66a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b66e:	d01a      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b674:	d822      	bhi.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b67e:	d007      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b680:	e01c      	b.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b682:	4bab      	ldr	r3, [pc, #684]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b686:	4aaa      	ldr	r2, [pc, #680]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b68c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b68e:	e01a      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	3308      	adds	r3, #8
 800b696:	2102      	movs	r1, #2
 800b698:	4618      	mov	r0, r3
 800b69a:	f002 fa49 	bl	800db30 <RCCEx_PLL2_Config>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b6a4:	e00f      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	3328      	adds	r3, #40	; 0x28
 800b6ac:	2102      	movs	r1, #2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f002 faf0 	bl	800dc94 <RCCEx_PLL3_Config>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b6ba:	e004      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6c2:	e000      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b6ce:	4b98      	ldr	r3, [pc, #608]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6dc:	4a94      	ldr	r2, [pc, #592]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6de:	430b      	orrs	r3, r1
 800b6e0:	6513      	str	r3, [r2, #80]	; 0x50
 800b6e2:	e003      	b.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b6f8:	f04f 0900 	mov.w	r9, #0
 800b6fc:	ea58 0309 	orrs.w	r3, r8, r9
 800b700:	d047      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d82a      	bhi.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b70c:	a201      	add	r2, pc, #4	; (adr r2, 800b714 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b712:	bf00      	nop
 800b714:	0800b729 	.word	0x0800b729
 800b718:	0800b737 	.word	0x0800b737
 800b71c:	0800b74d 	.word	0x0800b74d
 800b720:	0800b76b 	.word	0x0800b76b
 800b724:	0800b76b 	.word	0x0800b76b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b728:	4b81      	ldr	r3, [pc, #516]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72c:	4a80      	ldr	r2, [pc, #512]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b72e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b734:	e01a      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73a:	3308      	adds	r3, #8
 800b73c:	2100      	movs	r1, #0
 800b73e:	4618      	mov	r0, r3
 800b740:	f002 f9f6 	bl	800db30 <RCCEx_PLL2_Config>
 800b744:	4603      	mov	r3, r0
 800b746:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b74a:	e00f      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b750:	3328      	adds	r3, #40	; 0x28
 800b752:	2100      	movs	r1, #0
 800b754:	4618      	mov	r0, r3
 800b756:	f002 fa9d 	bl	800dc94 <RCCEx_PLL3_Config>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b760:	e004      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b768:	e000      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b76a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b76c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b774:	4b6e      	ldr	r3, [pc, #440]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b778:	f023 0107 	bic.w	r1, r3, #7
 800b77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b782:	4a6b      	ldr	r2, [pc, #428]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b784:	430b      	orrs	r3, r1
 800b786:	6513      	str	r3, [r2, #80]	; 0x50
 800b788:	e003      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b78e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b79e:	f04f 0b00 	mov.w	fp, #0
 800b7a2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b7a6:	d05b      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7b0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b7b4:	d03b      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b7b6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b7ba:	d834      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b7c0:	d037      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b7c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b7c6:	d82e      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b7cc:	d033      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b7ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b7d2:	d828      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7d8:	d01a      	beq.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b7da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7de:	d822      	bhi.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b7e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7e8:	d007      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b7ea:	e01c      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ec:	4b50      	ldr	r3, [pc, #320]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f0:	4a4f      	ldr	r2, [pc, #316]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7f8:	e01e      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fe:	3308      	adds	r3, #8
 800b800:	2100      	movs	r1, #0
 800b802:	4618      	mov	r0, r3
 800b804:	f002 f994 	bl	800db30 <RCCEx_PLL2_Config>
 800b808:	4603      	mov	r3, r0
 800b80a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b80e:	e013      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b814:	3328      	adds	r3, #40	; 0x28
 800b816:	2100      	movs	r1, #0
 800b818:	4618      	mov	r0, r3
 800b81a:	f002 fa3b 	bl	800dc94 <RCCEx_PLL3_Config>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b824:	e008      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b82c:	e004      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b82e:	bf00      	nop
 800b830:	e002      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b832:	bf00      	nop
 800b834:	e000      	b.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b836:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10b      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b840:	4b3b      	ldr	r3, [pc, #236]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b844:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b850:	4a37      	ldr	r2, [pc, #220]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b852:	430b      	orrs	r3, r1
 800b854:	6593      	str	r3, [r2, #88]	; 0x58
 800b856:	e003      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b85c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b870:	2300      	movs	r3, #0
 800b872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b876:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b87a:	460b      	mov	r3, r1
 800b87c:	4313      	orrs	r3, r2
 800b87e:	d05d      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b884:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b888:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b88c:	d03b      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b88e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b892:	d834      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b898:	d037      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b89a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b89e:	d82e      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b8a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8a4:	d033      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b8a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8aa:	d828      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b8ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b0:	d01a      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b8b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b6:	d822      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b8bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8c0:	d007      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b8c2:	e01c      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c4:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	4a19      	ldr	r2, [pc, #100]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8d0:	e01e      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	2100      	movs	r1, #0
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f002 f928 	bl	800db30 <RCCEx_PLL2_Config>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b8e6:	e013      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ec:	3328      	adds	r3, #40	; 0x28
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f002 f9cf 	bl	800dc94 <RCCEx_PLL3_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8fc:	e008      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b904:	e004      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b906:	bf00      	nop
 800b908:	e002      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b90a:	bf00      	nop
 800b90c:	e000      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b90e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10d      	bne.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b918:	4b05      	ldr	r3, [pc, #20]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b91c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b928:	4a01      	ldr	r2, [pc, #4]	; (800b930 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b92a:	430b      	orrs	r3, r1
 800b92c:	6593      	str	r3, [r2, #88]	; 0x58
 800b92e:	e005      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b934:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b938:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b948:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b94c:	2300      	movs	r3, #0
 800b94e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b952:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b956:	460b      	mov	r3, r1
 800b958:	4313      	orrs	r3, r2
 800b95a:	d03a      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b962:	2b30      	cmp	r3, #48	; 0x30
 800b964:	d01f      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b966:	2b30      	cmp	r3, #48	; 0x30
 800b968:	d819      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b96a:	2b20      	cmp	r3, #32
 800b96c:	d00c      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b96e:	2b20      	cmp	r3, #32
 800b970:	d815      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d019      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b976:	2b10      	cmp	r3, #16
 800b978:	d111      	bne.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b97a:	4baa      	ldr	r3, [pc, #680]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	4aa9      	ldr	r2, [pc, #676]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b984:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b986:	e011      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98c:	3308      	adds	r3, #8
 800b98e:	2102      	movs	r1, #2
 800b990:	4618      	mov	r0, r3
 800b992:	f002 f8cd 	bl	800db30 <RCCEx_PLL2_Config>
 800b996:	4603      	mov	r3, r0
 800b998:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b99c:	e006      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9a4:	e002      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b9a6:	bf00      	nop
 800b9a8:	e000      	b.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b9aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10a      	bne.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b9b4:	4b9b      	ldr	r3, [pc, #620]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c2:	4a98      	ldr	r2, [pc, #608]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9c4:	430b      	orrs	r3, r1
 800b9c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9c8:	e003      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b9de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	d051      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9fc:	d035      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b9fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba02:	d82e      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba08:	d031      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ba0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba0e:	d828      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba14:	d01a      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ba16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba1a:	d822      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ba20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba24:	d007      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ba26:	e01c      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b7e      	ldr	r3, [pc, #504]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	4a7d      	ldr	r2, [pc, #500]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba34:	e01c      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f002 f876 	bl	800db30 <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba4a:	e011      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	3328      	adds	r3, #40	; 0x28
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f002 f91d 	bl	800dc94 <RCCEx_PLL3_Config>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba60:	e006      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba68:	e002      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba6a:	bf00      	nop
 800ba6c:	e000      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10a      	bne.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba78:	4b6a      	ldr	r3, [pc, #424]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba7c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba86:	4a67      	ldr	r2, [pc, #412]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba88:	430b      	orrs	r3, r1
 800ba8a:	6513      	str	r3, [r2, #80]	; 0x50
 800ba8c:	e003      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800baa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800baa6:	2300      	movs	r3, #0
 800baa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800baac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4313      	orrs	r3, r2
 800bab4:	d053      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800babc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bac0:	d033      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bac2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bac6:	d82c      	bhi.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bacc:	d02f      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bace:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bad2:	d826      	bhi.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bad8:	d02b      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bada:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bade:	d820      	bhi.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bae4:	d012      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baea:	d81a      	bhi.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800baec:	2b00      	cmp	r3, #0
 800baee:	d022      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800baf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf4:	d115      	bne.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafa:	3308      	adds	r3, #8
 800bafc:	2101      	movs	r1, #1
 800bafe:	4618      	mov	r0, r3
 800bb00:	f002 f816 	bl	800db30 <RCCEx_PLL2_Config>
 800bb04:	4603      	mov	r3, r0
 800bb06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb0a:	e015      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	3328      	adds	r3, #40	; 0x28
 800bb12:	2101      	movs	r1, #1
 800bb14:	4618      	mov	r0, r3
 800bb16:	f002 f8bd 	bl	800dc94 <RCCEx_PLL3_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb20:	e00a      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb28:	e006      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb2a:	bf00      	nop
 800bb2c:	e004      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bb40:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb4e:	4a35      	ldr	r2, [pc, #212]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb50:	430b      	orrs	r3, r1
 800bb52:	6513      	str	r3, [r2, #80]	; 0x50
 800bb54:	e003      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bb6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	d058      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb8a:	d033      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb90:	d82c      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb96:	d02f      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb9c:	d826      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bba2:	d02b      	beq.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bba8:	d820      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bbaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbae:	d012      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bbb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbb4:	d81a      	bhi.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d022      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bbba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbbe:	d115      	bne.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f001 ffb1 	bl	800db30 <RCCEx_PLL2_Config>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bbd4:	e015      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbda:	3328      	adds	r3, #40	; 0x28
 800bbdc:	2101      	movs	r1, #1
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f002 f858 	bl	800dc94 <RCCEx_PLL3_Config>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bbea:	e00a      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbf2:	e006      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbf4:	bf00      	nop
 800bbf6:	e004      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbf8:	bf00      	nop
 800bbfa:	e002      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbfc:	bf00      	nop
 800bbfe:	e000      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10e      	bne.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc0a:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc1a:	4a02      	ldr	r2, [pc, #8]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc20:	e006      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bc22:	bf00      	nop
 800bc24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bc3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc40:	2300      	movs	r3, #0
 800bc42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	d037      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc5a:	d00e      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bc5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc60:	d816      	bhi.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d018      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc6a:	d111      	bne.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc6c:	4bc4      	ldr	r3, [pc, #784]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc70:	4ac3      	ldr	r2, [pc, #780]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc78:	e00f      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7e:	3308      	adds	r3, #8
 800bc80:	2101      	movs	r1, #1
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 ff54 	bl	800db30 <RCCEx_PLL2_Config>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc8e:	e004      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc96:	e000      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bca2:	4bb7      	ldr	r3, [pc, #732]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb0:	4ab3      	ldr	r2, [pc, #716]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	6513      	str	r3, [r2, #80]	; 0x50
 800bcb6:	e003      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	d039      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce6:	2b03      	cmp	r3, #3
 800bce8:	d81c      	bhi.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd2d 	.word	0x0800bd2d
 800bcf4:	0800bd01 	.word	0x0800bd01
 800bcf8:	0800bd0f 	.word	0x0800bd0f
 800bcfc:	0800bd2d 	.word	0x0800bd2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd00:	4b9f      	ldr	r3, [pc, #636]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4a9e      	ldr	r2, [pc, #632]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd0c:	e00f      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd12:	3308      	adds	r3, #8
 800bd14:	2102      	movs	r1, #2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f001 ff0a 	bl	800db30 <RCCEx_PLL2_Config>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd22:	e004      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd24:	2301      	movs	r3, #1
 800bd26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd2a:	e000      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bd2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10a      	bne.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd36:	4b92      	ldr	r3, [pc, #584]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd3a:	f023 0103 	bic.w	r1, r3, #3
 800bd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd44:	4a8e      	ldr	r2, [pc, #568]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd46:	430b      	orrs	r3, r1
 800bd48:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd4a:	e003      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bd60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd64:	2300      	movs	r3, #0
 800bd66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f000 8099 	beq.w	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd76:	4b83      	ldr	r3, [pc, #524]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a82      	ldr	r2, [pc, #520]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd82:	f7f8 f919 	bl	8003fb8 <HAL_GetTick>
 800bd86:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd8a:	e00b      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd8c:	f7f8 f914 	bl	8003fb8 <HAL_GetTick>
 800bd90:	4602      	mov	r2, r0
 800bd92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b64      	cmp	r3, #100	; 0x64
 800bd9a:	d903      	bls.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bda2:	e005      	b.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bda4:	4b77      	ldr	r3, [pc, #476]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0ed      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bdb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d173      	bne.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bdb8:	4b71      	ldr	r3, [pc, #452]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdc4:	4053      	eors	r3, r2
 800bdc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d015      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdce:	4b6c      	ldr	r3, [pc, #432]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdda:	4b69      	ldr	r3, [pc, #420]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdde:	4a68      	ldr	r2, [pc, #416]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bde4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bde6:	4b66      	ldr	r3, [pc, #408]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdea:	4a65      	ldr	r2, [pc, #404]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdf0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bdf2:	4a63      	ldr	r2, [pc, #396]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdf8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be06:	d118      	bne.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be08:	f7f8 f8d6 	bl	8003fb8 <HAL_GetTick>
 800be0c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be10:	e00d      	b.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be12:	f7f8 f8d1 	bl	8003fb8 <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800be1c:	1ad2      	subs	r2, r2, r3
 800be1e:	f241 3388 	movw	r3, #5000	; 0x1388
 800be22:	429a      	cmp	r2, r3
 800be24:	d903      	bls.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800be2c:	e005      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be2e:	4b54      	ldr	r3, [pc, #336]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0eb      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800be3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d129      	bne.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be52:	d10e      	bne.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800be54:	4b4a      	ldr	r3, [pc, #296]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800be5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be64:	091a      	lsrs	r2, r3, #4
 800be66:	4b48      	ldr	r3, [pc, #288]	; (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be68:	4013      	ands	r3, r2
 800be6a:	4a45      	ldr	r2, [pc, #276]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6c:	430b      	orrs	r3, r1
 800be6e:	6113      	str	r3, [r2, #16]
 800be70:	e005      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be72:	4b43      	ldr	r3, [pc, #268]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	4a42      	ldr	r2, [pc, #264]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be7c:	6113      	str	r3, [r2, #16]
 800be7e:	4b40      	ldr	r3, [pc, #256]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800be82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be8e:	4a3c      	ldr	r2, [pc, #240]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be90:	430b      	orrs	r3, r1
 800be92:	6713      	str	r3, [r2, #112]	; 0x70
 800be94:	e008      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800be9e:	e003      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f002 0301 	and.w	r3, r2, #1
 800beb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800beb8:	2300      	movs	r3, #0
 800beba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bebe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	f000 808f 	beq.w	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800beca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bed0:	2b28      	cmp	r3, #40	; 0x28
 800bed2:	d871      	bhi.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bed4:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bfc1 	.word	0x0800bfc1
 800bee0:	0800bfb9 	.word	0x0800bfb9
 800bee4:	0800bfb9 	.word	0x0800bfb9
 800bee8:	0800bfb9 	.word	0x0800bfb9
 800beec:	0800bfb9 	.word	0x0800bfb9
 800bef0:	0800bfb9 	.word	0x0800bfb9
 800bef4:	0800bfb9 	.word	0x0800bfb9
 800bef8:	0800bfb9 	.word	0x0800bfb9
 800befc:	0800bf8d 	.word	0x0800bf8d
 800bf00:	0800bfb9 	.word	0x0800bfb9
 800bf04:	0800bfb9 	.word	0x0800bfb9
 800bf08:	0800bfb9 	.word	0x0800bfb9
 800bf0c:	0800bfb9 	.word	0x0800bfb9
 800bf10:	0800bfb9 	.word	0x0800bfb9
 800bf14:	0800bfb9 	.word	0x0800bfb9
 800bf18:	0800bfb9 	.word	0x0800bfb9
 800bf1c:	0800bfa3 	.word	0x0800bfa3
 800bf20:	0800bfb9 	.word	0x0800bfb9
 800bf24:	0800bfb9 	.word	0x0800bfb9
 800bf28:	0800bfb9 	.word	0x0800bfb9
 800bf2c:	0800bfb9 	.word	0x0800bfb9
 800bf30:	0800bfb9 	.word	0x0800bfb9
 800bf34:	0800bfb9 	.word	0x0800bfb9
 800bf38:	0800bfb9 	.word	0x0800bfb9
 800bf3c:	0800bfc1 	.word	0x0800bfc1
 800bf40:	0800bfb9 	.word	0x0800bfb9
 800bf44:	0800bfb9 	.word	0x0800bfb9
 800bf48:	0800bfb9 	.word	0x0800bfb9
 800bf4c:	0800bfb9 	.word	0x0800bfb9
 800bf50:	0800bfb9 	.word	0x0800bfb9
 800bf54:	0800bfb9 	.word	0x0800bfb9
 800bf58:	0800bfb9 	.word	0x0800bfb9
 800bf5c:	0800bfc1 	.word	0x0800bfc1
 800bf60:	0800bfb9 	.word	0x0800bfb9
 800bf64:	0800bfb9 	.word	0x0800bfb9
 800bf68:	0800bfb9 	.word	0x0800bfb9
 800bf6c:	0800bfb9 	.word	0x0800bfb9
 800bf70:	0800bfb9 	.word	0x0800bfb9
 800bf74:	0800bfb9 	.word	0x0800bfb9
 800bf78:	0800bfb9 	.word	0x0800bfb9
 800bf7c:	0800bfc1 	.word	0x0800bfc1
 800bf80:	58024400 	.word	0x58024400
 800bf84:	58024800 	.word	0x58024800
 800bf88:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf90:	3308      	adds	r3, #8
 800bf92:	2101      	movs	r1, #1
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 fdcb 	bl	800db30 <RCCEx_PLL2_Config>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bfa0:	e00f      	b.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa6:	3328      	adds	r3, #40	; 0x28
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f001 fe72 	bl	800dc94 <RCCEx_PLL3_Config>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bfb6:	e004      	b.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bfbe:	e000      	b.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bfc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10a      	bne.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bfca:	4bbf      	ldr	r3, [pc, #764]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd8:	4abb      	ldr	r2, [pc, #748]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfda:	430b      	orrs	r3, r1
 800bfdc:	6553      	str	r3, [r2, #84]	; 0x54
 800bfde:	e003      	b.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfe4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f002 0302 	and.w	r3, r2, #2
 800bff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bff8:	2300      	movs	r3, #0
 800bffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bffe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c002:	460b      	mov	r3, r1
 800c004:	4313      	orrs	r3, r2
 800c006:	d041      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c00e:	2b05      	cmp	r3, #5
 800c010:	d824      	bhi.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c012:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c065 	.word	0x0800c065
 800c01c:	0800c031 	.word	0x0800c031
 800c020:	0800c047 	.word	0x0800c047
 800c024:	0800c065 	.word	0x0800c065
 800c028:	0800c065 	.word	0x0800c065
 800c02c:	0800c065 	.word	0x0800c065
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c034:	3308      	adds	r3, #8
 800c036:	2101      	movs	r1, #1
 800c038:	4618      	mov	r0, r3
 800c03a:	f001 fd79 	bl	800db30 <RCCEx_PLL2_Config>
 800c03e:	4603      	mov	r3, r0
 800c040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c044:	e00f      	b.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c04a:	3328      	adds	r3, #40	; 0x28
 800c04c:	2101      	movs	r1, #1
 800c04e:	4618      	mov	r0, r3
 800c050:	f001 fe20 	bl	800dc94 <RCCEx_PLL3_Config>
 800c054:	4603      	mov	r3, r0
 800c056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c05a:	e004      	b.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c062:	e000      	b.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c064:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c066:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10a      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c06e:	4b96      	ldr	r3, [pc, #600]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c072:	f023 0107 	bic.w	r1, r3, #7
 800c076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c07a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c07c:	4a92      	ldr	r2, [pc, #584]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c07e:	430b      	orrs	r3, r1
 800c080:	6553      	str	r3, [r2, #84]	; 0x54
 800c082:	e003      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f002 0304 	and.w	r3, r2, #4
 800c098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c09c:	2300      	movs	r3, #0
 800c09e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	d044      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b4:	2b05      	cmp	r3, #5
 800c0b6:	d825      	bhi.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c0b8:	a201      	add	r2, pc, #4	; (adr r2, 800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0be:	bf00      	nop
 800c0c0:	0800c10d 	.word	0x0800c10d
 800c0c4:	0800c0d9 	.word	0x0800c0d9
 800c0c8:	0800c0ef 	.word	0x0800c0ef
 800c0cc:	0800c10d 	.word	0x0800c10d
 800c0d0:	0800c10d 	.word	0x0800c10d
 800c0d4:	0800c10d 	.word	0x0800c10d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0dc:	3308      	adds	r3, #8
 800c0de:	2101      	movs	r1, #1
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f001 fd25 	bl	800db30 <RCCEx_PLL2_Config>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0ec:	e00f      	b.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f2:	3328      	adds	r3, #40	; 0x28
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 fdcc 	bl	800dc94 <RCCEx_PLL3_Config>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c102:	e004      	b.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c10a:	e000      	b.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c10e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c116:	4b6c      	ldr	r3, [pc, #432]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11a:	f023 0107 	bic.w	r1, r3, #7
 800c11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c126:	4a68      	ldr	r2, [pc, #416]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c128:	430b      	orrs	r3, r1
 800c12a:	6593      	str	r3, [r2, #88]	; 0x58
 800c12c:	e003      	b.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c132:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	f002 0320 	and.w	r3, r2, #32
 800c142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c146:	2300      	movs	r3, #0
 800c148:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c14c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c150:	460b      	mov	r3, r1
 800c152:	4313      	orrs	r3, r2
 800c154:	d055      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c162:	d033      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c168:	d82c      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c16a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c16e:	d02f      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c174:	d826      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c17a:	d02b      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c17c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c180:	d820      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c186:	d012      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c18c:	d81a      	bhi.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d022      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c196:	d115      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c19c:	3308      	adds	r3, #8
 800c19e:	2100      	movs	r1, #0
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f001 fcc5 	bl	800db30 <RCCEx_PLL2_Config>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c1ac:	e015      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b2:	3328      	adds	r3, #40	; 0x28
 800c1b4:	2102      	movs	r1, #2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f001 fd6c 	bl	800dc94 <RCCEx_PLL3_Config>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c1c2:	e00a      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1ca:	e006      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1cc:	bf00      	nop
 800c1ce:	e004      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1d0:	bf00      	nop
 800c1d2:	e002      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1d4:	bf00      	nop
 800c1d6:	e000      	b.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10b      	bne.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1e2:	4b39      	ldr	r3, [pc, #228]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1f2:	4a35      	ldr	r2, [pc, #212]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1f4:	430b      	orrs	r3, r1
 800c1f6:	6553      	str	r3, [r2, #84]	; 0x54
 800c1f8:	e003      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c20e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c212:	2300      	movs	r3, #0
 800c214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c218:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c21c:	460b      	mov	r3, r1
 800c21e:	4313      	orrs	r3, r2
 800c220:	d058      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c22a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c22e:	d033      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c230:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c234:	d82c      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c23a:	d02f      	beq.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c240:	d826      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c242:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c246:	d02b      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c248:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c24c:	d820      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c24e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c252:	d012      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c258:	d81a      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d022      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c25e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c262:	d115      	bne.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c268:	3308      	adds	r3, #8
 800c26a:	2100      	movs	r1, #0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 fc5f 	bl	800db30 <RCCEx_PLL2_Config>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c278:	e015      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c27e:	3328      	adds	r3, #40	; 0x28
 800c280:	2102      	movs	r1, #2
 800c282:	4618      	mov	r0, r3
 800c284:	f001 fd06 	bl	800dc94 <RCCEx_PLL3_Config>
 800c288:	4603      	mov	r3, r0
 800c28a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c28e:	e00a      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c296:	e006      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c298:	bf00      	nop
 800c29a:	e004      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c29c:	bf00      	nop
 800c29e:	e002      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c2a0:	bf00      	nop
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c2a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10e      	bne.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2be:	4a02      	ldr	r2, [pc, #8]	; (800c2c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2c0:	430b      	orrs	r3, r1
 800c2c2:	6593      	str	r3, [r2, #88]	; 0x58
 800c2c4:	e006      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c2c6:	bf00      	nop
 800c2c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c2e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	d055      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c300:	d033      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c302:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c306:	d82c      	bhi.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c30c:	d02f      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c30e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c312:	d826      	bhi.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c314:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c318:	d02b      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c31a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c31e:	d820      	bhi.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c324:	d012      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c32a:	d81a      	bhi.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d022      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c334:	d115      	bne.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c33a:	3308      	adds	r3, #8
 800c33c:	2100      	movs	r1, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fbf6 	bl	800db30 <RCCEx_PLL2_Config>
 800c344:	4603      	mov	r3, r0
 800c346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c34a:	e015      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c350:	3328      	adds	r3, #40	; 0x28
 800c352:	2102      	movs	r1, #2
 800c354:	4618      	mov	r0, r3
 800c356:	f001 fc9d 	bl	800dc94 <RCCEx_PLL3_Config>
 800c35a:	4603      	mov	r3, r0
 800c35c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c360:	e00a      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c368:	e006      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c36a:	bf00      	nop
 800c36c:	e004      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c36e:	bf00      	nop
 800c370:	e002      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c372:	bf00      	nop
 800c374:	e000      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c376:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c378:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c380:	4ba0      	ldr	r3, [pc, #640]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c384:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c390:	4a9c      	ldr	r2, [pc, #624]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c392:	430b      	orrs	r3, r1
 800c394:	6593      	str	r3, [r2, #88]	; 0x58
 800c396:	e003      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c398:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c39c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a8:	f002 0308 	and.w	r3, r2, #8
 800c3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	d01e      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3cc:	d10c      	bne.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d2:	3328      	adds	r3, #40	; 0x28
 800c3d4:	2102      	movs	r1, #2
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 fc5c 	bl	800dc94 <RCCEx_PLL3_Config>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c3e8:	4b86      	ldr	r3, [pc, #536]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f8:	4a82      	ldr	r2, [pc, #520]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f002 0310 	and.w	r3, r2, #16
 800c40a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c40e:	2300      	movs	r3, #0
 800c410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c414:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c418:	460b      	mov	r3, r1
 800c41a:	4313      	orrs	r3, r2
 800c41c:	d01e      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c42a:	d10c      	bne.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c430:	3328      	adds	r3, #40	; 0x28
 800c432:	2102      	movs	r1, #2
 800c434:	4618      	mov	r0, r3
 800c436:	f001 fc2d 	bl	800dc94 <RCCEx_PLL3_Config>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c446:	4b6f      	ldr	r3, [pc, #444]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c44a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c456:	4a6b      	ldr	r2, [pc, #428]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c458:	430b      	orrs	r3, r1
 800c45a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c468:	67bb      	str	r3, [r7, #120]	; 0x78
 800c46a:	2300      	movs	r3, #0
 800c46c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c46e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c472:	460b      	mov	r3, r1
 800c474:	4313      	orrs	r3, r2
 800c476:	d03e      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c484:	d022      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c48a:	d81b      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c494:	d00b      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c496:	e015      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49c:	3308      	adds	r3, #8
 800c49e:	2100      	movs	r1, #0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f001 fb45 	bl	800db30 <RCCEx_PLL2_Config>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c4ac:	e00f      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b2:	3328      	adds	r3, #40	; 0x28
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f001 fbec 	bl	800dc94 <RCCEx_PLL3_Config>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c4c2:	e004      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c4ca:	e000      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c4cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4d6:	4b4b      	ldr	r3, [pc, #300]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4e6:	4a47      	ldr	r2, [pc, #284]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	6593      	str	r3, [r2, #88]	; 0x58
 800c4ec:	e003      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c502:	673b      	str	r3, [r7, #112]	; 0x70
 800c504:	2300      	movs	r3, #0
 800c506:	677b      	str	r3, [r7, #116]	; 0x74
 800c508:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c50c:	460b      	mov	r3, r1
 800c50e:	4313      	orrs	r3, r2
 800c510:	d03b      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c51a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c51e:	d01f      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c524:	d818      	bhi.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c52a:	d003      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c52c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c530:	d007      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c532:	e011      	b.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c534:	4b33      	ldr	r3, [pc, #204]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c538:	4a32      	ldr	r2, [pc, #200]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c53a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c53e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c540:	e00f      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c546:	3328      	adds	r3, #40	; 0x28
 800c548:	2101      	movs	r1, #1
 800c54a:	4618      	mov	r0, r3
 800c54c:	f001 fba2 	bl	800dc94 <RCCEx_PLL3_Config>
 800c550:	4603      	mov	r3, r0
 800c552:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c556:	e004      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c55e:	e000      	b.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c562:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10b      	bne.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c56a:	4b26      	ldr	r3, [pc, #152]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c57a:	4a22      	ldr	r2, [pc, #136]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c57c:	430b      	orrs	r3, r1
 800c57e:	6553      	str	r3, [r2, #84]	; 0x54
 800c580:	e003      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c582:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c586:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c596:	66bb      	str	r3, [r7, #104]	; 0x68
 800c598:	2300      	movs	r3, #0
 800c59a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c59c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	d034      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b4:	d007      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c5b6:	e011      	b.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5b8:	4b12      	ldr	r3, [pc, #72]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5bc:	4a11      	ldr	r2, [pc, #68]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c5c4:	e00e      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	2102      	movs	r1, #2
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f001 faae 	bl	800db30 <RCCEx_PLL2_Config>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c5da:	e003      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10d      	bne.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c5ec:	4b05      	ldr	r3, [pc, #20]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5fa:	4a02      	ldr	r2, [pc, #8]	; (800c604 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c600:	e006      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c602:	bf00      	nop
 800c604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c60c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c61c:	663b      	str	r3, [r7, #96]	; 0x60
 800c61e:	2300      	movs	r3, #0
 800c620:	667b      	str	r3, [r7, #100]	; 0x64
 800c622:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c626:	460b      	mov	r3, r1
 800c628:	4313      	orrs	r3, r2
 800c62a:	d00c      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c630:	3328      	adds	r3, #40	; 0x28
 800c632:	2102      	movs	r1, #2
 800c634:	4618      	mov	r0, r3
 800c636:	f001 fb2d 	bl	800dc94 <RCCEx_PLL3_Config>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c652:	65bb      	str	r3, [r7, #88]	; 0x58
 800c654:	2300      	movs	r3, #0
 800c656:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c658:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c65c:	460b      	mov	r3, r1
 800c65e:	4313      	orrs	r3, r2
 800c660:	d036      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c66c:	d018      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c66e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c672:	d811      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c678:	d014      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c67a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c67e:	d80b      	bhi.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c680:	2b00      	cmp	r3, #0
 800c682:	d011      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c688:	d106      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c68a:	4bb7      	ldr	r3, [pc, #732]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68e:	4ab6      	ldr	r2, [pc, #728]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c694:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c696:	e008      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c69e:	e004      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c6a0:	bf00      	nop
 800c6a2:	e002      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c6a4:	bf00      	nop
 800c6a6:	e000      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c6b2:	4bad      	ldr	r3, [pc, #692]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c0:	4aa9      	ldr	r2, [pc, #676]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6c2:	430b      	orrs	r3, r1
 800c6c4:	6553      	str	r3, [r2, #84]	; 0x54
 800c6c6:	e003      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c6dc:	653b      	str	r3, [r7, #80]	; 0x50
 800c6de:	2300      	movs	r3, #0
 800c6e0:	657b      	str	r3, [r7, #84]	; 0x54
 800c6e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	d009      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c6ec:	4b9e      	ldr	r3, [pc, #632]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6fa:	4a9b      	ldr	r2, [pc, #620]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6fc:	430b      	orrs	r3, r1
 800c6fe:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c70c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c70e:	2300      	movs	r3, #0
 800c710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c712:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c716:	460b      	mov	r3, r1
 800c718:	4313      	orrs	r3, r2
 800c71a:	d009      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c71c:	4b92      	ldr	r3, [pc, #584]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c720:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c72a:	4a8f      	ldr	r2, [pc, #572]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c72c:	430b      	orrs	r3, r1
 800c72e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c73c:	643b      	str	r3, [r7, #64]	; 0x40
 800c73e:	2300      	movs	r3, #0
 800c740:	647b      	str	r3, [r7, #68]	; 0x44
 800c742:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c746:	460b      	mov	r3, r1
 800c748:	4313      	orrs	r3, r2
 800c74a:	d00e      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c74c:	4b86      	ldr	r3, [pc, #536]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	4a85      	ldr	r2, [pc, #532]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c752:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c756:	6113      	str	r3, [r2, #16]
 800c758:	4b83      	ldr	r3, [pc, #524]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c75a:	6919      	ldr	r1, [r3, #16]
 800c75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c764:	4a80      	ldr	r2, [pc, #512]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c766:	430b      	orrs	r3, r1
 800c768:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c776:	63bb      	str	r3, [r7, #56]	; 0x38
 800c778:	2300      	movs	r3, #0
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c77c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c780:	460b      	mov	r3, r1
 800c782:	4313      	orrs	r3, r2
 800c784:	d009      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c786:	4b78      	ldr	r3, [pc, #480]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c78a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c794:	4a74      	ldr	r2, [pc, #464]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c796:	430b      	orrs	r3, r1
 800c798:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	d00a      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c7b6:	4b6c      	ldr	r3, [pc, #432]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ba:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7c6:	4a68      	ldr	r2, [pc, #416]	; (800c968 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7c8:	430b      	orrs	r3, r1
 800c7ca:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	62b9      	str	r1, [r7, #40]	; 0x28
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	d011      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f001 f99d 	bl	800db30 <RCCEx_PLL2_Config>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c808:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	2100      	movs	r1, #0
 800c816:	6239      	str	r1, [r7, #32]
 800c818:	f003 0302 	and.w	r3, r3, #2
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
 800c81e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c822:	460b      	mov	r3, r1
 800c824:	4313      	orrs	r3, r2
 800c826:	d011      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c82c:	3308      	adds	r3, #8
 800c82e:	2101      	movs	r1, #1
 800c830:	4618      	mov	r0, r3
 800c832:	f001 f97d 	bl	800db30 <RCCEx_PLL2_Config>
 800c836:	4603      	mov	r3, r0
 800c838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c83c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c840:	2b00      	cmp	r3, #0
 800c842:	d003      	beq.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c844:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c848:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	2100      	movs	r1, #0
 800c856:	61b9      	str	r1, [r7, #24]
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	61fb      	str	r3, [r7, #28]
 800c85e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c862:	460b      	mov	r3, r1
 800c864:	4313      	orrs	r3, r2
 800c866:	d011      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c86c:	3308      	adds	r3, #8
 800c86e:	2102      	movs	r1, #2
 800c870:	4618      	mov	r0, r3
 800c872:	f001 f95d 	bl	800db30 <RCCEx_PLL2_Config>
 800c876:	4603      	mov	r3, r0
 800c878:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c87c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c880:	2b00      	cmp	r3, #0
 800c882:	d003      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c888:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	2100      	movs	r1, #0
 800c896:	6139      	str	r1, [r7, #16]
 800c898:	f003 0308 	and.w	r3, r3, #8
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	d011      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ac:	3328      	adds	r3, #40	; 0x28
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f001 f9ef 	bl	800dc94 <RCCEx_PLL3_Config>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	f003 0310 	and.w	r3, r3, #16
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	d011      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ec:	3328      	adds	r3, #40	; 0x28
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 f9cf 	bl	800dc94 <RCCEx_PLL3_Config>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c900:	2b00      	cmp	r3, #0
 800c902:	d003      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c904:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c908:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	2100      	movs	r1, #0
 800c916:	6039      	str	r1, [r7, #0]
 800c918:	f003 0320 	and.w	r3, r3, #32
 800c91c:	607b      	str	r3, [r7, #4]
 800c91e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c922:	460b      	mov	r3, r1
 800c924:	4313      	orrs	r3, r2
 800c926:	d011      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92c:	3328      	adds	r3, #40	; 0x28
 800c92e:	2102      	movs	r1, #2
 800c930:	4618      	mov	r0, r3
 800c932:	f001 f9af 	bl	800dc94 <RCCEx_PLL3_Config>
 800c936:	4603      	mov	r3, r0
 800c938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c93c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c944:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c948:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c94c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	e000      	b.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c960:	46bd      	mov	sp, r7
 800c962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c966:	bf00      	nop
 800c968:	58024400 	.word	0x58024400

0800c96c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b090      	sub	sp, #64	; 0x40
 800c970:	af00      	add	r7, sp, #0
 800c972:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c97a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c97e:	430b      	orrs	r3, r1
 800c980:	f040 8094 	bne.w	800caac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c984:	4b9b      	ldr	r3, [pc, #620]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c988:	f003 0307 	and.w	r3, r3, #7
 800c98c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	2b04      	cmp	r3, #4
 800c992:	f200 8087 	bhi.w	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c996:	a201      	add	r2, pc, #4	; (adr r2, 800c99c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99c:	0800c9b1 	.word	0x0800c9b1
 800c9a0:	0800c9d9 	.word	0x0800c9d9
 800c9a4:	0800ca01 	.word	0x0800ca01
 800c9a8:	0800ca9d 	.word	0x0800ca9d
 800c9ac:	0800ca29 	.word	0x0800ca29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9b0:	4b90      	ldr	r3, [pc, #576]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9bc:	d108      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 ff62 	bl	800d88c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9cc:	f000 bc93 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d4:	f000 bc8f 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9d8:	4b86      	ldr	r3, [pc, #536]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9e4:	d108      	bne.n	800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e6:	f107 0318 	add.w	r3, r7, #24
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 fca6 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9f4:	f000 bc7f 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fc:	f000 bc7b 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca00:	4b7c      	ldr	r3, [pc, #496]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca0c:	d108      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca0e:	f107 030c 	add.w	r3, r7, #12
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 fde6 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca1c:	f000 bc6b 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca24:	f000 bc67 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca28:	4b72      	ldr	r3, [pc, #456]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca32:	4b70      	ldr	r3, [pc, #448]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	2b04      	cmp	r3, #4
 800ca3c:	d10c      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ca3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d109      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca44:	4b6b      	ldr	r3, [pc, #428]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	08db      	lsrs	r3, r3, #3
 800ca4a:	f003 0303 	and.w	r3, r3, #3
 800ca4e:	4a6a      	ldr	r2, [pc, #424]	; (800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ca50:	fa22 f303 	lsr.w	r3, r2, r3
 800ca54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca56:	e01f      	b.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca58:	4b66      	ldr	r3, [pc, #408]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca64:	d106      	bne.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca6c:	d102      	bne.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca6e:	4b63      	ldr	r3, [pc, #396]	; (800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca72:	e011      	b.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca74:	4b5f      	ldr	r3, [pc, #380]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca80:	d106      	bne.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ca82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca88:	d102      	bne.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca8a:	4b5d      	ldr	r3, [pc, #372]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca8e:	e003      	b.n	800ca98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca94:	f000 bc2f 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca98:	f000 bc2d 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca9c:	4b59      	ldr	r3, [pc, #356]	; (800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa0:	f000 bc29 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa8:	f000 bc25 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800caac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cab4:	430b      	orrs	r3, r1
 800cab6:	f040 80a7 	bne.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800caba:	4b4e      	ldr	r3, [pc, #312]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cabc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cabe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cac2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800caca:	d054      	beq.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cad2:	f200 808b 	bhi.w	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cadc:	f000 8083 	beq.w	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cae6:	f200 8081 	bhi.w	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800caf0:	d02f      	beq.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800caf8:	d878      	bhi.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d004      	beq.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb06:	d012      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cb08:	e070      	b.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb0a:	4b3a      	ldr	r3, [pc, #232]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb16:	d107      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 feb5 	bl	800d88c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e3e6      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2c:	e3e3      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb2e:	4b31      	ldr	r3, [pc, #196]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb3a:	d107      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb3c:	f107 0318 	add.w	r3, r7, #24
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fbfb 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4a:	e3d4      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e3d1      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb52:	4b28      	ldr	r3, [pc, #160]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb5e:	d107      	bne.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb60:	f107 030c 	add.w	r3, r7, #12
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fd3d 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb6e:	e3c2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb74:	e3bf      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb76:	4b1f      	ldr	r3, [pc, #124]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb80:	4b1c      	ldr	r3, [pc, #112]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f003 0304 	and.w	r3, r3, #4
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	d10c      	bne.n	800cba6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d109      	bne.n	800cba6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb92:	4b18      	ldr	r3, [pc, #96]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	08db      	lsrs	r3, r3, #3
 800cb98:	f003 0303 	and.w	r3, r3, #3
 800cb9c:	4a16      	ldr	r2, [pc, #88]	; (800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba4:	e01e      	b.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cba6:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb2:	d106      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbba:	d102      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbc0:	e010      	b.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbc2:	4b0c      	ldr	r3, [pc, #48]	; (800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbce:	d106      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd6:	d102      	bne.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbd8:	4b09      	ldr	r3, [pc, #36]	; (800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbdc:	e002      	b.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbe2:	e388      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbe4:	e387      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbe6:	4b07      	ldr	r3, [pc, #28]	; (800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbea:	e384      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf0:	e381      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbf2:	bf00      	nop
 800cbf4:	58024400 	.word	0x58024400
 800cbf8:	03d09000 	.word	0x03d09000
 800cbfc:	003d0900 	.word	0x003d0900
 800cc00:	02faf080 	.word	0x02faf080
 800cc04:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cc08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc0c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cc10:	430b      	orrs	r3, r1
 800cc12:	f040 809c 	bne.w	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc16:	4b9e      	ldr	r3, [pc, #632]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cc1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc26:	d054      	beq.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc2e:	f200 808b 	bhi.w	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc38:	f000 8083 	beq.w	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc42:	f200 8081 	bhi.w	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc4c:	d02f      	beq.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc54:	d878      	bhi.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d004      	beq.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc62:	d012      	beq.n	800cc8a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cc64:	e070      	b.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc66:	4b8a      	ldr	r3, [pc, #552]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc72:	d107      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 fe07 	bl	800d88c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc82:	e338      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc88:	e335      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc8a:	4b81      	ldr	r3, [pc, #516]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc96:	d107      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc98:	f107 0318 	add.w	r3, r7, #24
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 fb4d 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca6:	e326      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccac:	e323      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccae:	4b78      	ldr	r3, [pc, #480]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccba:	d107      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccbc:	f107 030c 	add.w	r3, r7, #12
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 fc8f 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccca:	e314      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd0:	e311      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccd2:	4b6f      	ldr	r3, [pc, #444]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccdc:	4b6c      	ldr	r3, [pc, #432]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d10c      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d109      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccee:	4b68      	ldr	r3, [pc, #416]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	08db      	lsrs	r3, r3, #3
 800ccf4:	f003 0303 	and.w	r3, r3, #3
 800ccf8:	4a66      	ldr	r2, [pc, #408]	; (800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ccfa:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd00:	e01e      	b.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd02:	4b63      	ldr	r3, [pc, #396]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd0e:	d106      	bne.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd16:	d102      	bne.n	800cd1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd18:	4b5f      	ldr	r3, [pc, #380]	; (800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1c:	e010      	b.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd1e:	4b5c      	ldr	r3, [pc, #368]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd2a:	d106      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd32:	d102      	bne.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd34:	4b59      	ldr	r3, [pc, #356]	; (800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd38:	e002      	b.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd3e:	e2da      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd40:	e2d9      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd42:	4b57      	ldr	r3, [pc, #348]	; (800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cd44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd46:	e2d6      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd4c:	e2d3      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd52:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cd56:	430b      	orrs	r3, r1
 800cd58:	f040 80a7 	bne.w	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cd5c:	4b4c      	ldr	r3, [pc, #304]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cd64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd6c:	d055      	beq.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd74:	f200 8096 	bhi.w	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd7e:	f000 8084 	beq.w	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd88:	f200 808c 	bhi.w	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd92:	d030      	beq.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd9a:	f200 8083 	bhi.w	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d004      	beq.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdaa:	d012      	beq.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cdac:	e07a      	b.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdae:	4b38      	ldr	r3, [pc, #224]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdba:	d107      	bne.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fd63 	bl	800d88c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdca:	e294      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd0:	e291      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdd2:	4b2f      	ldr	r3, [pc, #188]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdde:	d107      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cde0:	f107 0318 	add.w	r3, r7, #24
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 faa9 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdee:	e282      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf4:	e27f      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdf6:	4b26      	ldr	r3, [pc, #152]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce02:	d107      	bne.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce04:	f107 030c 	add.w	r3, r7, #12
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f000 fbeb 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce12:	e270      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce18:	e26d      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce1a:	4b1d      	ldr	r3, [pc, #116]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce24:	4b1a      	ldr	r3, [pc, #104]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	d10c      	bne.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ce30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d109      	bne.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce36:	4b16      	ldr	r3, [pc, #88]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	08db      	lsrs	r3, r3, #3
 800ce3c:	f003 0303 	and.w	r3, r3, #3
 800ce40:	4a14      	ldr	r2, [pc, #80]	; (800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ce42:	fa22 f303 	lsr.w	r3, r2, r3
 800ce46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce48:	e01e      	b.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce4a:	4b11      	ldr	r3, [pc, #68]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce56:	d106      	bne.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ce58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce5e:	d102      	bne.n	800ce66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce60:	4b0d      	ldr	r3, [pc, #52]	; (800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce64:	e010      	b.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce66:	4b0a      	ldr	r3, [pc, #40]	; (800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce72:	d106      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ce74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce7a:	d102      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce7c:	4b07      	ldr	r3, [pc, #28]	; (800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce80:	e002      	b.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce86:	e236      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce88:	e235      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce8e:	e232      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce90:	58024400 	.word	0x58024400
 800ce94:	03d09000 	.word	0x03d09000
 800ce98:	003d0900 	.word	0x003d0900
 800ce9c:	02faf080 	.word	0x02faf080
 800cea0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea8:	e225      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ceaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceae:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ceb2:	430b      	orrs	r3, r1
 800ceb4:	f040 8085 	bne.w	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ceb8:	4b9c      	ldr	r3, [pc, #624]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ceba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cebc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cec0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cec8:	d06b      	beq.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ced0:	d874      	bhi.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ced8:	d056      	beq.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cedc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cee0:	d86c      	bhi.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cee8:	d03b      	beq.n	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cef0:	d864      	bhi.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cef8:	d021      	beq.n	800cf3e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf00:	d85c      	bhi.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d004      	beq.n	800cf12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf0e:	d004      	beq.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cf10:	e054      	b.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf12:	f7fe fb5f 	bl	800b5d4 <HAL_RCC_GetPCLK1Freq>
 800cf16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf18:	e1ed      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf1a:	4b84      	ldr	r3, [pc, #528]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf26:	d107      	bne.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf28:	f107 0318 	add.w	r3, r7, #24
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 fa05 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf36:	e1de      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf3c:	e1db      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf3e:	4b7b      	ldr	r3, [pc, #492]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf4a:	d107      	bne.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf4c:	f107 030c 	add.w	r3, r7, #12
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fb47 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf5a:	e1cc      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf60:	e1c9      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf62:	4b72      	ldr	r3, [pc, #456]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0304 	and.w	r3, r3, #4
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d109      	bne.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf6e:	4b6f      	ldr	r3, [pc, #444]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	08db      	lsrs	r3, r3, #3
 800cf74:	f003 0303 	and.w	r3, r3, #3
 800cf78:	4a6d      	ldr	r2, [pc, #436]	; (800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cf7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf80:	e1b9      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf86:	e1b6      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf88:	4b68      	ldr	r3, [pc, #416]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf94:	d102      	bne.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cf96:	4b67      	ldr	r3, [pc, #412]	; (800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf9a:	e1ac      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa0:	e1a9      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cfa2:	4b62      	ldr	r3, [pc, #392]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfae:	d102      	bne.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cfb0:	4b61      	ldr	r3, [pc, #388]	; (800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb4:	e19f      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfba:	e19c      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfc0:	e199      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cfc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfc6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cfca:	430b      	orrs	r3, r1
 800cfcc:	d173      	bne.n	800d0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cfce:	4b57      	ldr	r3, [pc, #348]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cfd6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfde:	d02f      	beq.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfe6:	d863      	bhi.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d004      	beq.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff4:	d012      	beq.n	800d01c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cff6:	e05b      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cff8:	4b4c      	ldr	r3, [pc, #304]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d004:	d107      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d006:	f107 0318 	add.w	r3, r7, #24
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 f996 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d014:	e16f      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01a:	e16c      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d01c:	4b43      	ldr	r3, [pc, #268]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d028:	d107      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d02a:	f107 030c 	add.w	r3, r7, #12
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 fad8 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d038:	e15d      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03e:	e15a      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d040:	4b3a      	ldr	r3, [pc, #232]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d048:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d04a:	4b38      	ldr	r3, [pc, #224]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0304 	and.w	r3, r3, #4
 800d052:	2b04      	cmp	r3, #4
 800d054:	d10c      	bne.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d109      	bne.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d05c:	4b33      	ldr	r3, [pc, #204]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	08db      	lsrs	r3, r3, #3
 800d062:	f003 0303 	and.w	r3, r3, #3
 800d066:	4a32      	ldr	r2, [pc, #200]	; (800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d068:	fa22 f303 	lsr.w	r3, r2, r3
 800d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d06e:	e01e      	b.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d070:	4b2e      	ldr	r3, [pc, #184]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d07c:	d106      	bne.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d084:	d102      	bne.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d086:	4b2b      	ldr	r3, [pc, #172]	; (800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d08a:	e010      	b.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d08c:	4b27      	ldr	r3, [pc, #156]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d098:	d106      	bne.n	800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0a0:	d102      	bne.n	800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0a2:	4b25      	ldr	r3, [pc, #148]	; (800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0a6:	e002      	b.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d0ac:	e123      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0ae:	e122      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b4:	e11f      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d0b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ba:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	d13c      	bne.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d0c2:	4b1a      	ldr	r3, [pc, #104]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d004      	beq.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0d8:	d012      	beq.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d0da:	e023      	b.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0dc:	4b13      	ldr	r3, [pc, #76]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0e8:	d107      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 fbcc 	bl	800d88c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0f8:	e0fd      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0fe:	e0fa      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d100:	4b0a      	ldr	r3, [pc, #40]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d10c:	d107      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d10e:	f107 0318 	add.w	r3, r7, #24
 800d112:	4618      	mov	r0, r3
 800d114:	f000 f912 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11c:	e0eb      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d122:	e0e8      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d124:	2300      	movs	r3, #0
 800d126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d128:	e0e5      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d12a:	bf00      	nop
 800d12c:	58024400 	.word	0x58024400
 800d130:	03d09000 	.word	0x03d09000
 800d134:	003d0900 	.word	0x003d0900
 800d138:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d13c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d140:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d144:	430b      	orrs	r3, r1
 800d146:	f040 8085 	bne.w	800d254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d14a:	4b6d      	ldr	r3, [pc, #436]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d14e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d152:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d15a:	d06b      	beq.n	800d234 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d162:	d874      	bhi.n	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d16a:	d056      	beq.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d172:	d86c      	bhi.n	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d17a:	d03b      	beq.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d182:	d864      	bhi.n	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d18a:	d021      	beq.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d192:	d85c      	bhi.n	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	2b00      	cmp	r3, #0
 800d198:	d004      	beq.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1a0:	d004      	beq.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d1a2:	e054      	b.n	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d1a4:	f000 f8b4 	bl	800d310 <HAL_RCCEx_GetD3PCLK1Freq>
 800d1a8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1aa:	e0a4      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1ac:	4b54      	ldr	r3, [pc, #336]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1b8:	d107      	bne.n	800d1ca <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ba:	f107 0318 	add.w	r3, r7, #24
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f8bc 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1c8:	e095      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1ce:	e092      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1d0:	4b4b      	ldr	r3, [pc, #300]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1dc:	d107      	bne.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1de:	f107 030c 	add.w	r3, r7, #12
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f000 f9fe 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ec:	e083      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1f2:	e080      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1f4:	4b42      	ldr	r3, [pc, #264]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0304 	and.w	r3, r3, #4
 800d1fc:	2b04      	cmp	r3, #4
 800d1fe:	d109      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d200:	4b3f      	ldr	r3, [pc, #252]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	08db      	lsrs	r3, r3, #3
 800d206:	f003 0303 	and.w	r3, r3, #3
 800d20a:	4a3e      	ldr	r2, [pc, #248]	; (800d304 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d20c:	fa22 f303 	lsr.w	r3, r2, r3
 800d210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d212:	e070      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d218:	e06d      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d21a:	4b39      	ldr	r3, [pc, #228]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d226:	d102      	bne.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d228:	4b37      	ldr	r3, [pc, #220]	; (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d22c:	e063      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d22e:	2300      	movs	r3, #0
 800d230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d232:	e060      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d234:	4b32      	ldr	r3, [pc, #200]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d23c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d240:	d102      	bne.n	800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d242:	4b32      	ldr	r3, [pc, #200]	; (800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d246:	e056      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d248:	2300      	movs	r3, #0
 800d24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d24c:	e053      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d252:	e050      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d254:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d258:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d25c:	430b      	orrs	r3, r1
 800d25e:	d148      	bne.n	800d2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d260:	4b27      	ldr	r3, [pc, #156]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d268:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d270:	d02a      	beq.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d278:	d838      	bhi.n	800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d004      	beq.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d286:	d00d      	beq.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d288:	e030      	b.n	800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d28a:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d296:	d102      	bne.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d298:	4b1c      	ldr	r3, [pc, #112]	; (800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d29c:	e02b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a2:	e028      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2a4:	4b16      	ldr	r3, [pc, #88]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2b0:	d107      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fae8 	bl	800d88c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2c0:	e019      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c6:	e016      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2c8:	4b0d      	ldr	r3, [pc, #52]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2d4:	d107      	bne.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2d6:	f107 0318 	add.w	r3, r7, #24
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 f82e 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2e4:	e007      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ea:	e004      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2f0:	e001      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3740      	adds	r7, #64	; 0x40
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	58024400 	.word	0x58024400
 800d304:	03d09000 	.word	0x03d09000
 800d308:	003d0900 	.word	0x003d0900
 800d30c:	02faf080 	.word	0x02faf080

0800d310 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d314:	f7fe f92e 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 800d318:	4602      	mov	r2, r0
 800d31a:	4b06      	ldr	r3, [pc, #24]	; (800d334 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	091b      	lsrs	r3, r3, #4
 800d320:	f003 0307 	and.w	r3, r3, #7
 800d324:	4904      	ldr	r1, [pc, #16]	; (800d338 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d326:	5ccb      	ldrb	r3, [r1, r3]
 800d328:	f003 031f 	and.w	r3, r3, #31
 800d32c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d330:	4618      	mov	r0, r3
 800d332:	bd80      	pop	{r7, pc}
 800d334:	58024400 	.word	0x58024400
 800d338:	0801f8fc 	.word	0x0801f8fc

0800d33c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b089      	sub	sp, #36	; 0x24
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d344:	4ba1      	ldr	r3, [pc, #644]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d348:	f003 0303 	and.w	r3, r3, #3
 800d34c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d34e:	4b9f      	ldr	r3, [pc, #636]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d352:	0b1b      	lsrs	r3, r3, #12
 800d354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d358:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d35a:	4b9c      	ldr	r3, [pc, #624]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35e:	091b      	lsrs	r3, r3, #4
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d366:	4b99      	ldr	r3, [pc, #612]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36a:	08db      	lsrs	r3, r3, #3
 800d36c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	fb02 f303 	mul.w	r3, r2, r3
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	2b00      	cmp	r3, #0
 800d386:	f000 8111 	beq.w	800d5ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	f000 8083 	beq.w	800d498 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	2b02      	cmp	r3, #2
 800d396:	f200 80a1 	bhi.w	800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d003      	beq.n	800d3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d056      	beq.n	800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d3a6:	e099      	b.n	800d4dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3a8:	4b88      	ldr	r3, [pc, #544]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0320 	and.w	r3, r3, #32
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d02d      	beq.n	800d410 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3b4:	4b85      	ldr	r3, [pc, #532]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	08db      	lsrs	r3, r3, #3
 800d3ba:	f003 0303 	and.w	r3, r3, #3
 800d3be:	4a84      	ldr	r2, [pc, #528]	; (800d5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d3c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	ee07 3a90 	vmov	s15, r3
 800d3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3de:	4b7b      	ldr	r3, [pc, #492]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e6:	ee07 3a90 	vmov	s15, r3
 800d3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d40e:	e087      	b.n	800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	ee07 3a90 	vmov	s15, r3
 800d416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d422:	4b6a      	ldr	r3, [pc, #424]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42a:	ee07 3a90 	vmov	s15, r3
 800d42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d432:	ed97 6a03 	vldr	s12, [r7, #12]
 800d436:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d44e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d452:	e065      	b.n	800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	ee07 3a90 	vmov	s15, r3
 800d45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d45e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d466:	4b59      	ldr	r3, [pc, #356]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d476:	ed97 6a03 	vldr	s12, [r7, #12]
 800d47a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d47e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d496:	e043      	b.n	800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	ee07 3a90 	vmov	s15, r3
 800d49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4aa:	4b48      	ldr	r3, [pc, #288]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4da:	e021      	b.n	800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	ee07 3a90 	vmov	s15, r3
 800d4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ee:	4b37      	ldr	r3, [pc, #220]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d502:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d51e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d520:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d524:	0a5b      	lsrs	r3, r3, #9
 800d526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d52a:	ee07 3a90 	vmov	s15, r3
 800d52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d53a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d53e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d546:	ee17 2a90 	vmov	r2, s15
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d54e:	4b1f      	ldr	r3, [pc, #124]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d552:	0c1b      	lsrs	r3, r3, #16
 800d554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d558:	ee07 3a90 	vmov	s15, r3
 800d55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d564:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d568:	edd7 6a07 	vldr	s13, [r7, #28]
 800d56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d574:	ee17 2a90 	vmov	r2, s15
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d57c:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	0e1b      	lsrs	r3, r3, #24
 800d582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d592:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d596:	edd7 6a07 	vldr	s13, [r7, #28]
 800d59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d59e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5a2:	ee17 2a90 	vmov	r2, s15
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d5aa:	e008      	b.n	800d5be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	609a      	str	r2, [r3, #8]
}
 800d5be:	bf00      	nop
 800d5c0:	3724      	adds	r7, #36	; 0x24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	58024400 	.word	0x58024400
 800d5d0:	03d09000 	.word	0x03d09000
 800d5d4:	46000000 	.word	0x46000000
 800d5d8:	4c742400 	.word	0x4c742400
 800d5dc:	4a742400 	.word	0x4a742400
 800d5e0:	4c3ebc20 	.word	0x4c3ebc20

0800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b089      	sub	sp, #36	; 0x24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5ec:	4ba1      	ldr	r3, [pc, #644]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f0:	f003 0303 	and.w	r3, r3, #3
 800d5f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d5f6:	4b9f      	ldr	r3, [pc, #636]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fa:	0d1b      	lsrs	r3, r3, #20
 800d5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d600:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d602:	4b9c      	ldr	r3, [pc, #624]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	0a1b      	lsrs	r3, r3, #8
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d60e:	4b99      	ldr	r3, [pc, #612]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d612:	08db      	lsrs	r3, r3, #3
 800d614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	fb02 f303 	mul.w	r3, r2, r3
 800d61e:	ee07 3a90 	vmov	s15, r3
 800d622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 8111 	beq.w	800d854 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2b02      	cmp	r3, #2
 800d636:	f000 8083 	beq.w	800d740 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	f200 80a1 	bhi.w	800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d003      	beq.n	800d650 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d056      	beq.n	800d6fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d64e:	e099      	b.n	800d784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d650:	4b88      	ldr	r3, [pc, #544]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d02d      	beq.n	800d6b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d65c:	4b85      	ldr	r3, [pc, #532]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	08db      	lsrs	r3, r3, #3
 800d662:	f003 0303 	and.w	r3, r3, #3
 800d666:	4a84      	ldr	r2, [pc, #528]	; (800d878 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d668:	fa22 f303 	lsr.w	r3, r2, r3
 800d66c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	ee07 3a90 	vmov	s15, r3
 800d674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d686:	4b7b      	ldr	r3, [pc, #492]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d68e:	ee07 3a90 	vmov	s15, r3
 800d692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d696:	ed97 6a03 	vldr	s12, [r7, #12]
 800d69a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6b6:	e087      	b.n	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	ee07 3a90 	vmov	s15, r3
 800d6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d880 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ca:	4b6a      	ldr	r3, [pc, #424]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d2:	ee07 3a90 	vmov	s15, r3
 800d6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6fa:	e065      	b.n	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	ee07 3a90 	vmov	s15, r3
 800d702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d706:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d70e:	4b59      	ldr	r3, [pc, #356]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d722:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d73e:	e043      	b.n	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d752:	4b48      	ldr	r3, [pc, #288]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d762:	ed97 6a03 	vldr	s12, [r7, #12]
 800d766:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d782:	e021      	b.n	800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d78e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d796:	4b37      	ldr	r3, [pc, #220]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d79e:	ee07 3a90 	vmov	s15, r3
 800d7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d7c8:	4b2a      	ldr	r3, [pc, #168]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7cc:	0a5b      	lsrs	r3, r3, #9
 800d7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7d2:	ee07 3a90 	vmov	s15, r3
 800d7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ee:	ee17 2a90 	vmov	r2, s15
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d7f6:	4b1f      	ldr	r3, [pc, #124]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fa:	0c1b      	lsrs	r3, r3, #16
 800d7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d800:	ee07 3a90 	vmov	s15, r3
 800d804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d810:	edd7 6a07 	vldr	s13, [r7, #28]
 800d814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81c:	ee17 2a90 	vmov	r2, s15
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d824:	4b13      	ldr	r3, [pc, #76]	; (800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d828:	0e1b      	lsrs	r3, r3, #24
 800d82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d82e:	ee07 3a90 	vmov	s15, r3
 800d832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d84a:	ee17 2a90 	vmov	r2, s15
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d852:	e008      	b.n	800d866 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	609a      	str	r2, [r3, #8]
}
 800d866:	bf00      	nop
 800d868:	3724      	adds	r7, #36	; 0x24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	58024400 	.word	0x58024400
 800d878:	03d09000 	.word	0x03d09000
 800d87c:	46000000 	.word	0x46000000
 800d880:	4c742400 	.word	0x4c742400
 800d884:	4a742400 	.word	0x4a742400
 800d888:	4c3ebc20 	.word	0x4c3ebc20

0800d88c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b089      	sub	sp, #36	; 0x24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d894:	4ba0      	ldr	r3, [pc, #640]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d898:	f003 0303 	and.w	r3, r3, #3
 800d89c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d89e:	4b9e      	ldr	r3, [pc, #632]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a2:	091b      	lsrs	r3, r3, #4
 800d8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d8aa:	4b9b      	ldr	r3, [pc, #620]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d8b4:	4b98      	ldr	r3, [pc, #608]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b8:	08db      	lsrs	r3, r3, #3
 800d8ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8be:	693a      	ldr	r2, [r7, #16]
 800d8c0:	fb02 f303 	mul.w	r3, r2, r3
 800d8c4:	ee07 3a90 	vmov	s15, r3
 800d8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 8111 	beq.w	800dafa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	f000 8083 	beq.w	800d9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	f200 80a1 	bhi.w	800da2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d056      	beq.n	800d9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d8f4:	e099      	b.n	800da2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8f6:	4b88      	ldr	r3, [pc, #544]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d02d      	beq.n	800d95e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d902:	4b85      	ldr	r3, [pc, #532]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	08db      	lsrs	r3, r3, #3
 800d908:	f003 0303 	and.w	r3, r3, #3
 800d90c:	4a83      	ldr	r2, [pc, #524]	; (800db1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d90e:	fa22 f303 	lsr.w	r3, r2, r3
 800d912:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	ee07 3a90 	vmov	s15, r3
 800d91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	ee07 3a90 	vmov	s15, r3
 800d924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d92c:	4b7a      	ldr	r3, [pc, #488]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d934:	ee07 3a90 	vmov	s15, r3
 800d938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d93c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d940:	eddf 5a77 	vldr	s11, [pc, #476]	; 800db20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d94c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d954:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d958:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d95c:	e087      	b.n	800da6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	ee07 3a90 	vmov	s15, r3
 800d964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d968:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800db24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d970:	4b69      	ldr	r3, [pc, #420]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d978:	ee07 3a90 	vmov	s15, r3
 800d97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d980:	ed97 6a03 	vldr	s12, [r7, #12]
 800d984:	eddf 5a66 	vldr	s11, [pc, #408]	; 800db20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d98c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d99c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9a0:	e065      	b.n	800da6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	ee07 3a90 	vmov	s15, r3
 800d9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800db28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d9b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b4:	4b58      	ldr	r3, [pc, #352]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800db20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9e4:	e043      	b.n	800da6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	ee07 3a90 	vmov	s15, r3
 800d9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800db2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f8:	4b47      	ldr	r3, [pc, #284]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da00:	ee07 3a90 	vmov	s15, r3
 800da04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da08:	ed97 6a03 	vldr	s12, [r7, #12]
 800da0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800db20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da28:	e021      	b.n	800da6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	ee07 3a90 	vmov	s15, r3
 800da30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da34:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800db24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da3c:	4b36      	ldr	r3, [pc, #216]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da44:	ee07 3a90 	vmov	s15, r3
 800da48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800da50:	eddf 5a33 	vldr	s11, [pc, #204]	; 800db20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da6e:	4b2a      	ldr	r3, [pc, #168]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da72:	0a5b      	lsrs	r3, r3, #9
 800da74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da78:	ee07 3a90 	vmov	s15, r3
 800da7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da88:	edd7 6a07 	vldr	s13, [r7, #28]
 800da8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da94:	ee17 2a90 	vmov	r2, s15
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da9c:	4b1e      	ldr	r3, [pc, #120]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa0:	0c1b      	lsrs	r3, r3, #16
 800daa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dab6:	edd7 6a07 	vldr	s13, [r7, #28]
 800daba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dabe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac2:	ee17 2a90 	vmov	r2, s15
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800daca:	4b13      	ldr	r3, [pc, #76]	; (800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dace:	0e1b      	lsrs	r3, r3, #24
 800dad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad4:	ee07 3a90 	vmov	s15, r3
 800dad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dadc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dae4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daf0:	ee17 2a90 	vmov	r2, s15
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800daf8:	e008      	b.n	800db0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	609a      	str	r2, [r3, #8]
}
 800db0c:	bf00      	nop
 800db0e:	3724      	adds	r7, #36	; 0x24
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	58024400 	.word	0x58024400
 800db1c:	03d09000 	.word	0x03d09000
 800db20:	46000000 	.word	0x46000000
 800db24:	4c742400 	.word	0x4c742400
 800db28:	4a742400 	.word	0x4a742400
 800db2c:	4c3ebc20 	.word	0x4c3ebc20

0800db30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db3e:	4b53      	ldr	r3, [pc, #332]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800db40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db42:	f003 0303 	and.w	r3, r3, #3
 800db46:	2b03      	cmp	r3, #3
 800db48:	d101      	bne.n	800db4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e099      	b.n	800dc82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db4e:	4b4f      	ldr	r3, [pc, #316]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a4e      	ldr	r2, [pc, #312]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800db54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db5a:	f7f6 fa2d 	bl	8003fb8 <HAL_GetTick>
 800db5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db60:	e008      	b.n	800db74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db62:	f7f6 fa29 	bl	8003fb8 <HAL_GetTick>
 800db66:	4602      	mov	r2, r0
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d901      	bls.n	800db74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db70:	2303      	movs	r3, #3
 800db72:	e086      	b.n	800dc82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db74:	4b45      	ldr	r3, [pc, #276]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1f0      	bne.n	800db62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db80:	4b42      	ldr	r3, [pc, #264]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800db82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	031b      	lsls	r3, r3, #12
 800db8e:	493f      	ldr	r1, [pc, #252]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800db90:	4313      	orrs	r3, r2
 800db92:	628b      	str	r3, [r1, #40]	; 0x28
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	3b01      	subs	r3, #1
 800db9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	3b01      	subs	r3, #1
 800dba4:	025b      	lsls	r3, r3, #9
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	041b      	lsls	r3, r3, #16
 800dbb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	061b      	lsls	r3, r3, #24
 800dbc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dbc4:	4931      	ldr	r1, [pc, #196]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dbca:	4b30      	ldr	r3, [pc, #192]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	492d      	ldr	r1, [pc, #180]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbdc:	4b2b      	ldr	r3, [pc, #172]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe0:	f023 0220 	bic.w	r2, r3, #32
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	4928      	ldr	r1, [pc, #160]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbea:	4313      	orrs	r3, r2
 800dbec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dbee:	4b27      	ldr	r3, [pc, #156]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf2:	4a26      	ldr	r2, [pc, #152]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbf4:	f023 0310 	bic.w	r3, r3, #16
 800dbf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbfa:	4b24      	ldr	r3, [pc, #144]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dbfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbfe:	4b24      	ldr	r3, [pc, #144]	; (800dc90 <RCCEx_PLL2_Config+0x160>)
 800dc00:	4013      	ands	r3, r2
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	69d2      	ldr	r2, [r2, #28]
 800dc06:	00d2      	lsls	r2, r2, #3
 800dc08:	4920      	ldr	r1, [pc, #128]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dc0e:	4b1f      	ldr	r3, [pc, #124]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	4a1e      	ldr	r2, [pc, #120]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc14:	f043 0310 	orr.w	r3, r3, #16
 800dc18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d106      	bne.n	800dc2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc20:	4b1a      	ldr	r3, [pc, #104]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc24:	4a19      	ldr	r2, [pc, #100]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc2c:	e00f      	b.n	800dc4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d106      	bne.n	800dc42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc34:	4b15      	ldr	r3, [pc, #84]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	4a14      	ldr	r2, [pc, #80]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc40:	e005      	b.n	800dc4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc46:	4a11      	ldr	r2, [pc, #68]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc4e:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a0e      	ldr	r2, [pc, #56]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc5a:	f7f6 f9ad 	bl	8003fb8 <HAL_GetTick>
 800dc5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc60:	e008      	b.n	800dc74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc62:	f7f6 f9a9 	bl	8003fb8 <HAL_GetTick>
 800dc66:	4602      	mov	r2, r0
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	1ad3      	subs	r3, r2, r3
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	d901      	bls.n	800dc74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc70:	2303      	movs	r3, #3
 800dc72:	e006      	b.n	800dc82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc74:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <RCCEx_PLL2_Config+0x15c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0f0      	beq.n	800dc62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	ffff0007 	.word	0xffff0007

0800dc94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dca2:	4b53      	ldr	r3, [pc, #332]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca6:	f003 0303 	and.w	r3, r3, #3
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d101      	bne.n	800dcb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e099      	b.n	800dde6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dcb2:	4b4f      	ldr	r3, [pc, #316]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a4e      	ldr	r2, [pc, #312]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dcb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dcbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcbe:	f7f6 f97b 	bl	8003fb8 <HAL_GetTick>
 800dcc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcc4:	e008      	b.n	800dcd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcc6:	f7f6 f977 	bl	8003fb8 <HAL_GetTick>
 800dcca:	4602      	mov	r2, r0
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d901      	bls.n	800dcd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	e086      	b.n	800dde6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcd8:	4b45      	ldr	r3, [pc, #276]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1f0      	bne.n	800dcc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dce4:	4b42      	ldr	r3, [pc, #264]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	051b      	lsls	r3, r3, #20
 800dcf2:	493f      	ldr	r1, [pc, #252]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	628b      	str	r3, [r1, #40]	; 0x28
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	025b      	lsls	r3, r3, #9
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	431a      	orrs	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	041b      	lsls	r3, r3, #16
 800dd16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	061b      	lsls	r3, r3, #24
 800dd24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd28:	4931      	ldr	r1, [pc, #196]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd2e:	4b30      	ldr	r3, [pc, #192]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	492d      	ldr	r1, [pc, #180]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd40:	4b2b      	ldr	r3, [pc, #172]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	699b      	ldr	r3, [r3, #24]
 800dd4c:	4928      	ldr	r1, [pc, #160]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd52:	4b27      	ldr	r3, [pc, #156]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd56:	4a26      	ldr	r2, [pc, #152]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd62:	4b24      	ldr	r3, [pc, #144]	; (800ddf4 <RCCEx_PLL3_Config+0x160>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	69d2      	ldr	r2, [r2, #28]
 800dd6a:	00d2      	lsls	r2, r2, #3
 800dd6c:	4920      	ldr	r1, [pc, #128]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd72:	4b1f      	ldr	r3, [pc, #124]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	4a1e      	ldr	r2, [pc, #120]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd84:	4b1a      	ldr	r3, [pc, #104]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd88:	4a19      	ldr	r2, [pc, #100]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dd8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd90:	e00f      	b.n	800ddb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d106      	bne.n	800dda6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd98:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9c:	4a14      	ldr	r2, [pc, #80]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dd9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dda2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dda4:	e005      	b.n	800ddb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dda6:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800dda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddaa:	4a11      	ldr	r2, [pc, #68]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800ddac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ddb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a0e      	ldr	r2, [pc, #56]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800ddb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddbe:	f7f6 f8fb 	bl	8003fb8 <HAL_GetTick>
 800ddc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddc4:	e008      	b.n	800ddd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddc6:	f7f6 f8f7 	bl	8003fb8 <HAL_GetTick>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d901      	bls.n	800ddd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e006      	b.n	800dde6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddd8:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <RCCEx_PLL3_Config+0x15c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d0f0      	beq.n	800ddc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	58024400 	.word	0x58024400
 800ddf4:	ffff0007 	.word	0xffff0007

0800ddf8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b08a      	sub	sp, #40	; 0x28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e075      	b.n	800def6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7f5 f963 	bl	80030e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2204      	movs	r2, #4
 800de26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f868 	bl	800df00 <HAL_SD_InitCard>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e05d      	b.n	800def6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800de3a:	f107 0308 	add.w	r3, r7, #8
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fdaf 	bl	800e9a4 <HAL_SD_GetCardStatus>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	e052      	b.n	800def6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800de50:	7e3b      	ldrb	r3, [r7, #24]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800de56:	7e7b      	ldrb	r3, [r7, #25]
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de60:	2b01      	cmp	r3, #1
 800de62:	d10a      	bne.n	800de7a <HAL_SD_Init+0x82>
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	2b00      	cmp	r3, #0
 800de68:	d102      	bne.n	800de70 <HAL_SD_Init+0x78>
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d004      	beq.n	800de7a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de76:	659a      	str	r2, [r3, #88]	; 0x58
 800de78:	e00b      	b.n	800de92 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d104      	bne.n	800de8c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de88:	659a      	str	r2, [r3, #88]	; 0x58
 800de8a:	e002      	b.n	800de92 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fe6d 	bl	800eb78 <HAL_SD_ConfigWideBusOperation>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e026      	b.n	800def6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800dea8:	f7f6 f886 	bl	8003fb8 <HAL_GetTick>
 800deac:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800deae:	e011      	b.n	800ded4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800deb0:	f7f6 f882 	bl	8003fb8 <HAL_GetTick>
 800deb4:	4602      	mov	r2, r0
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800debe:	d109      	bne.n	800ded4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dec6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ded0:	2303      	movs	r3, #3
 800ded2:	e010      	b.n	800def6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 ff61 	bl	800ed9c <HAL_SD_GetCardState>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b04      	cmp	r3, #4
 800dede:	d1e7      	bne.n	800deb0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2201      	movs	r2, #1
 800def0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3728      	adds	r7, #40	; 0x28
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df00:	b590      	push	{r4, r7, lr}
 800df02:	b08d      	sub	sp, #52	; 0x34
 800df04:	af02      	add	r7, sp, #8
 800df06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800df08:	2300      	movs	r3, #0
 800df0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800df0c:	2300      	movs	r3, #0
 800df0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800df10:	2300      	movs	r3, #0
 800df12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800df14:	2300      	movs	r3, #0
 800df16:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800df18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800df1c:	f04f 0100 	mov.w	r1, #0
 800df20:	f7fe fd24 	bl	800c96c <HAL_RCCEx_GetPeriphCLKFreq>
 800df24:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d109      	bne.n	800df40 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800df3a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e070      	b.n	800e022 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	0a1b      	lsrs	r3, r3, #8
 800df44:	4a39      	ldr	r2, [pc, #228]	; (800e02c <HAL_SD_InitCard+0x12c>)
 800df46:	fba2 2303 	umull	r2, r3, r2, r3
 800df4a:	091b      	lsrs	r3, r3, #4
 800df4c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681c      	ldr	r4, [r3, #0]
 800df52:	466a      	mov	r2, sp
 800df54:	f107 0318 	add.w	r3, r7, #24
 800df58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df5c:	e882 0003 	stmia.w	r2, {r0, r1}
 800df60:	f107 030c 	add.w	r3, r7, #12
 800df64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df66:	4620      	mov	r0, r4
 800df68:	f004 fec4 	bl	8012cf4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f004 ff07 	bl	8012d84 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d005      	beq.n	800df88 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df82:	fbb2 f3f3 	udiv	r3, r2, r3
 800df86:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d007      	beq.n	800df9e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800df8e:	4a28      	ldr	r2, [pc, #160]	; (800e030 <HAL_SD_InitCard+0x130>)
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	fbb2 f3f3 	udiv	r3, r2, r3
 800df96:	3301      	adds	r3, #1
 800df98:	4618      	mov	r0, r3
 800df9a:	f7f6 f819 	bl	8003fd0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 ffea 	bl	800ef78 <SD_PowerON>
 800dfa4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e02e      	b.n	800e022 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 ff09 	bl	800eddc <SD_InitCard>
 800dfca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00b      	beq.n	800dfea <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	431a      	orrs	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e01b      	b.n	800e022 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dff2:	4618      	mov	r0, r3
 800dff4:	f004 ff5c 	bl	8012eb0 <SDMMC_CmdBlockLength>
 800dff8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00f      	beq.n	800e020 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a0b      	ldr	r2, [pc, #44]	; (800e034 <HAL_SD_InitCard+0x134>)
 800e006:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	431a      	orrs	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e000      	b.n	800e022 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	372c      	adds	r7, #44	; 0x2c
 800e026:	46bd      	mov	sp, r7
 800e028:	bd90      	pop	{r4, r7, pc}
 800e02a:	bf00      	nop
 800e02c:	014f8b59 	.word	0x014f8b59
 800e030:	00012110 	.word	0x00012110
 800e034:	1fe00fff 	.word	0x1fe00fff

0800e038 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b08c      	sub	sp, #48	; 0x30
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
 800e044:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d107      	bne.n	800e060 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e08d      	b.n	800e17c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b01      	cmp	r3, #1
 800e06a:	f040 8086 	bne.w	800e17a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	441a      	add	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e07e:	429a      	cmp	r2, r3
 800e080:	d907      	bls.n	800e092 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e074      	b.n	800e17c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2203      	movs	r2, #3
 800e096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	025a      	lsls	r2, r3, #9
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d002      	beq.n	800e0be <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	025b      	lsls	r3, r3, #9
 800e0bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e0be:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	025b      	lsls	r3, r3, #9
 800e0c8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e0ca:	2390      	movs	r3, #144	; 0x90
 800e0cc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f107 0210 	add.w	r2, r7, #16
 800e0e2:	4611      	mov	r1, r2
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f004 feb7 	bl	8012e58 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68da      	ldr	r2, [r3, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0f8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2201      	movs	r2, #1
 800e108:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d90a      	bls.n	800e126 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2282      	movs	r2, #130	; 0x82
 800e114:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e11c:	4618      	mov	r0, r3
 800e11e:	f004 ff0d 	bl	8012f3c <SDMMC_CmdReadMultiBlock>
 800e122:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e124:	e009      	b.n	800e13a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2281      	movs	r2, #129	; 0x81
 800e12a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e132:	4618      	mov	r0, r3
 800e134:	f004 fedf 	bl	8012ef6 <SDMMC_CmdReadSingleBlock>
 800e138:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d012      	beq.n	800e166 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a0f      	ldr	r2, [pc, #60]	; (800e184 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	431a      	orrs	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e00a      	b.n	800e17c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e174:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	e000      	b.n	800e17c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e17a:	2302      	movs	r3, #2
  }
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3730      	adds	r7, #48	; 0x30
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	1fe00fff 	.word	0x1fe00fff

0800e188 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08c      	sub	sp, #48	; 0x30
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]
 800e194:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d107      	bne.n	800e1b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e08d      	b.n	800e2cc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	f040 8086 	bne.w	800e2ca <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	441a      	add	r2, r3
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d907      	bls.n	800e1e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e074      	b.n	800e2cc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	025a      	lsls	r2, r3, #9
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e204:	2b01      	cmp	r3, #1
 800e206:	d002      	beq.n	800e20e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	025b      	lsls	r3, r3, #9
 800e20c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e20e:	f04f 33ff 	mov.w	r3, #4294967295
 800e212:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	025b      	lsls	r3, r3, #9
 800e218:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e21a:	2390      	movs	r3, #144	; 0x90
 800e21c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e21e:	2300      	movs	r3, #0
 800e220:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e222:	2300      	movs	r3, #0
 800e224:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e226:	2300      	movs	r3, #0
 800e228:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f107 0210 	add.w	r2, r7, #16
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f004 fe0f 	bl	8012e58 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68da      	ldr	r2, [r3, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e248:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2201      	movs	r2, #1
 800e258:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d90a      	bls.n	800e276 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	22a0      	movs	r2, #160	; 0xa0
 800e264:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e26c:	4618      	mov	r0, r3
 800e26e:	f004 feab 	bl	8012fc8 <SDMMC_CmdWriteMultiBlock>
 800e272:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e274:	e009      	b.n	800e28a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2290      	movs	r2, #144	; 0x90
 800e27a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e282:	4618      	mov	r0, r3
 800e284:	f004 fe7d 	bl	8012f82 <SDMMC_CmdWriteSingleBlock>
 800e288:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d012      	beq.n	800e2b6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a0f      	ldr	r2, [pc, #60]	; (800e2d4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e00a      	b.n	800e2cc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e2c4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e000      	b.n	800e2cc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e2ca:	2302      	movs	r3, #2
  }
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3730      	adds	r7, #48	; 0x30
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	1fe00fff 	.word	0x1fe00fff

0800e2d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d008      	beq.n	800e306 <HAL_SD_IRQHandler+0x2e>
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d003      	beq.n	800e306 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f001 f926 	bl	800f550 <SD_Read_IT>
 800e304:	e19a      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 80ac 	beq.w	800e46e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e31e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	4b59      	ldr	r3, [pc, #356]	; (800e490 <HAL_SD_IRQHandler+0x1b8>)
 800e32c:	400b      	ands	r3, r1
 800e32e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e33e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68da      	ldr	r2, [r3, #12]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e34e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f003 0308 	and.w	r3, r3, #8
 800e356:	2b00      	cmp	r3, #0
 800e358:	d038      	beq.n	800e3cc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f003 0302 	and.w	r3, r3, #2
 800e360:	2b00      	cmp	r3, #0
 800e362:	d104      	bne.n	800e36e <HAL_SD_IRQHandler+0x96>
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f003 0320 	and.w	r3, r3, #32
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d011      	beq.n	800e392 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4618      	mov	r0, r3
 800e374:	f004 fe4c 	bl	8013010 <SDMMC_CmdStopTransfer>
 800e378:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d008      	beq.n	800e392 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	431a      	orrs	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f95b 	bl	800e648 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a3f      	ldr	r2, [pc, #252]	; (800e494 <HAL_SD_IRQHandler+0x1bc>)
 800e398:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f003 0301 	and.w	r3, r3, #1
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d104      	bne.n	800e3bc <HAL_SD_IRQHandler+0xe4>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f003 0302 	and.w	r3, r3, #2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f006 fe55 	bl	801506c <HAL_SD_RxCpltCallback>
 800e3c2:	e13b      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f006 fe47 	bl	8015058 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e3ca:	e137      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 8132 	beq.w	800e63c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f003 0302 	and.w	r3, r3, #2
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d104      	bne.n	800e404 <HAL_SD_IRQHandler+0x12c>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f003 0320 	and.w	r3, r3, #32
 800e400:	2b00      	cmp	r3, #0
 800e402:	d011      	beq.n	800e428 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4618      	mov	r0, r3
 800e40a:	f004 fe01 	bl	8013010 <SDMMC_CmdStopTransfer>
 800e40e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d008      	beq.n	800e428 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	431a      	orrs	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 f910 	bl	800e648 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2201      	movs	r2, #1
 800e42c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f003 0310 	and.w	r3, r3, #16
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d104      	bne.n	800e44a <HAL_SD_IRQHandler+0x172>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f003 0320 	and.w	r3, r3, #32
 800e446:	2b00      	cmp	r3, #0
 800e448:	d002      	beq.n	800e450 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f006 fe04 	bl	8015058 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	2b00      	cmp	r3, #0
 800e458:	d105      	bne.n	800e466 <HAL_SD_IRQHandler+0x18e>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f003 0302 	and.w	r3, r3, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 80eb 	beq.w	800e63c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f006 fe00 	bl	801506c <HAL_SD_RxCpltCallback>
}
 800e46c:	e0e6      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00d      	beq.n	800e498 <HAL_SD_IRQHandler+0x1c0>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f003 0308 	and.w	r3, r3, #8
 800e482:	2b00      	cmp	r3, #0
 800e484:	d008      	beq.n	800e498 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f001 f8a8 	bl	800f5dc <SD_Write_IT>
 800e48c:	e0d6      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
 800e48e:	bf00      	nop
 800e490:	ffff3ec5 	.word	0xffff3ec5
 800e494:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 809d 	beq.w	800e5e2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ae:	f003 0302 	and.w	r3, r3, #2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d005      	beq.n	800e4c2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ba:	f043 0202 	orr.w	r2, r3, #2
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	f003 0308 	and.w	r3, r3, #8
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d005      	beq.n	800e4dc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d4:	f043 0208 	orr.w	r2, r3, #8
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e2:	f003 0320 	and.w	r3, r3, #32
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d005      	beq.n	800e4f6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ee:	f043 0220 	orr.w	r2, r3, #32
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fc:	f003 0310 	and.w	r3, r3, #16
 800e500:	2b00      	cmp	r3, #0
 800e502:	d005      	beq.n	800e510 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e508:	f043 0210 	orr.w	r2, r3, #16
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a4b      	ldr	r2, [pc, #300]	; (800e644 <HAL_SD_IRQHandler+0x36c>)
 800e516:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e526:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	68da      	ldr	r2, [r3, #12]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e536:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e546:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	68da      	ldr	r2, [r3, #12]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e556:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f004 fd57 	bl	8013010 <SDMMC_CmdStopTransfer>
 800e562:	4602      	mov	r2, r0
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e568:	431a      	orrs	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68da      	ldr	r2, [r3, #12]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e57c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e586:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f003 0308 	and.w	r3, r3, #8
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00a      	beq.n	800e5a8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f851 	bl	800e648 <HAL_SD_ErrorCallback>
}
 800e5a6:	e049      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d044      	beq.n	800e63c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d040      	beq.n	800e63c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e5c8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f834 	bl	800e648 <HAL_SD_ErrorCallback>
}
 800e5e0:	e02c      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d025      	beq.n	800e63c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10c      	bne.n	800e622 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f003 0320 	and.w	r3, r3, #32
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f001 f84a 	bl	800f6ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e618:	e010      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f001 f832 	bl	800f684 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e620:	e00c      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f003 0320 	and.w	r3, r3, #32
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d003      	beq.n	800e634 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f001 f833 	bl	800f698 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e632:	e003      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f001 f81b 	bl	800f670 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e63a:	e7ff      	b.n	800e63c <HAL_SD_IRQHandler+0x364>
 800e63c:	bf00      	nop
 800e63e:	3710      	adds	r7, #16
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	18000f3a 	.word	0x18000f3a

0800e648 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e650:	bf00      	nop
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e66a:	0f9b      	lsrs	r3, r3, #30
 800e66c:	b2da      	uxtb	r2, r3
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e676:	0e9b      	lsrs	r3, r3, #26
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	f003 030f 	and.w	r3, r3, #15
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e688:	0e1b      	lsrs	r3, r3, #24
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	f003 0303 	and.w	r3, r3, #3
 800e690:	b2da      	uxtb	r2, r3
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e69a:	0c1b      	lsrs	r3, r3, #16
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6a6:	0a1b      	lsrs	r3, r3, #8
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6bc:	0d1b      	lsrs	r3, r3, #20
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6c8:	0c1b      	lsrs	r3, r3, #16
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	f003 030f 	and.w	r3, r3, #15
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6da:	0bdb      	lsrs	r3, r3, #15
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6ec:	0b9b      	lsrs	r3, r3, #14
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6fe:	0b5b      	lsrs	r3, r3, #13
 800e700:	b2db      	uxtb	r3, r3
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	b2da      	uxtb	r2, r3
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e710:	0b1b      	lsrs	r3, r3, #12
 800e712:	b2db      	uxtb	r3, r3
 800e714:	f003 0301 	and.w	r3, r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2200      	movs	r2, #0
 800e722:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d163      	bne.n	800e7f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e730:	009a      	lsls	r2, r3, #2
 800e732:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e736:	4013      	ands	r3, r2
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e73c:	0f92      	lsrs	r2, r2, #30
 800e73e:	431a      	orrs	r2, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e748:	0edb      	lsrs	r3, r3, #27
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	f003 0307 	and.w	r3, r3, #7
 800e750:	b2da      	uxtb	r2, r3
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75a:	0e1b      	lsrs	r3, r3, #24
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	b2da      	uxtb	r2, r3
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e76c:	0d5b      	lsrs	r3, r3, #21
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	f003 0307 	and.w	r3, r3, #7
 800e774:	b2da      	uxtb	r2, r3
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e77e:	0c9b      	lsrs	r3, r3, #18
 800e780:	b2db      	uxtb	r3, r3
 800e782:	f003 0307 	and.w	r3, r3, #7
 800e786:	b2da      	uxtb	r2, r3
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e790:	0bdb      	lsrs	r3, r3, #15
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f003 0307 	and.w	r3, r3, #7
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	7e1b      	ldrb	r3, [r3, #24]
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	f003 0307 	and.w	r3, r3, #7
 800e7b2:	3302      	adds	r3, #2
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e7be:	fb03 f202 	mul.w	r2, r3, r2
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	7a1b      	ldrb	r3, [r3, #8]
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f003 030f 	and.w	r3, r3, #15
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	409a      	lsls	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e7e0:	0a52      	lsrs	r2, r2, #9
 800e7e2:	fb03 f202 	mul.w	r2, r3, r2
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7f0:	655a      	str	r2, [r3, #84]	; 0x54
 800e7f2:	e031      	b.n	800e858 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d11d      	bne.n	800e838 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e800:	041b      	lsls	r3, r3, #16
 800e802:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e80a:	0c1b      	lsrs	r3, r3, #16
 800e80c:	431a      	orrs	r2, r3
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	691b      	ldr	r3, [r3, #16]
 800e816:	3301      	adds	r3, #1
 800e818:	029a      	lsls	r2, r3, #10
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e82c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	655a      	str	r2, [r3, #84]	; 0x54
 800e836:	e00f      	b.n	800e858 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a58      	ldr	r2, [pc, #352]	; (800e9a0 <HAL_SD_GetCardCSD+0x344>)
 800e83e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e854:	2301      	movs	r3, #1
 800e856:	e09d      	b.n	800e994 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e85c:	0b9b      	lsrs	r3, r3, #14
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	f003 0301 	and.w	r3, r3, #1
 800e864:	b2da      	uxtb	r2, r3
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e86e:	09db      	lsrs	r3, r3, #7
 800e870:	b2db      	uxtb	r3, r3
 800e872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e876:	b2da      	uxtb	r2, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e880:	b2db      	uxtb	r3, r3
 800e882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e886:	b2da      	uxtb	r2, r3
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e890:	0fdb      	lsrs	r3, r3, #31
 800e892:	b2da      	uxtb	r2, r3
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e89c:	0f5b      	lsrs	r3, r3, #29
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	f003 0303 	and.w	r3, r3, #3
 800e8a4:	b2da      	uxtb	r2, r3
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ae:	0e9b      	lsrs	r3, r3, #26
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8c0:	0d9b      	lsrs	r3, r3, #22
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 030f 	and.w	r3, r3, #15
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8d2:	0d5b      	lsrs	r3, r3, #21
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	f003 0301 	and.w	r3, r3, #1
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ee:	0c1b      	lsrs	r3, r3, #16
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	f003 0301 	and.w	r3, r3, #1
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e902:	0bdb      	lsrs	r3, r3, #15
 800e904:	b2db      	uxtb	r3, r3
 800e906:	f003 0301 	and.w	r3, r3, #1
 800e90a:	b2da      	uxtb	r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e916:	0b9b      	lsrs	r3, r3, #14
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	f003 0301 	and.w	r3, r3, #1
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e92a:	0b5b      	lsrs	r3, r3, #13
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	b2da      	uxtb	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e93e:	0b1b      	lsrs	r3, r3, #12
 800e940:	b2db      	uxtb	r3, r3
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	b2da      	uxtb	r2, r3
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e952:	0a9b      	lsrs	r3, r3, #10
 800e954:	b2db      	uxtb	r3, r3
 800e956:	f003 0303 	and.w	r3, r3, #3
 800e95a:	b2da      	uxtb	r2, r3
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e966:	0a1b      	lsrs	r3, r3, #8
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	f003 0303 	and.w	r3, r3, #3
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e97a:	085b      	lsrs	r3, r3, #1
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e982:	b2da      	uxtb	r2, r3
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	1fe00fff 	.word	0x1fe00fff

0800e9a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b094      	sub	sp, #80	; 0x50
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b03      	cmp	r3, #3
 800e9be:	d101      	bne.n	800e9c4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e0a7      	b.n	800eb14 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e9c4:	f107 0308 	add.w	r3, r7, #8
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fb62 	bl	800f094 <SD_SendSDStatus>
 800e9d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d011      	beq.n	800e9fc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a4f      	ldr	r2, [pc, #316]	; (800eb1c <HAL_SD_GetCardStatus+0x178>)
 800e9de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9e6:	431a      	orrs	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e9fa:	e070      	b.n	800eade <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	099b      	lsrs	r3, r3, #6
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 0303 	and.w	r3, r3, #3
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	095b      	lsrs	r3, r3, #5
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	0a1b      	lsrs	r3, r3, #8
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	0e1b      	lsrs	r3, r3, #24
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	061a      	lsls	r2, r3, #24
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	021b      	lsls	r3, r3, #8
 800ea3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea42:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	0a1b      	lsrs	r3, r3, #8
 800ea48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ea4c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	0e1b      	lsrs	r3, r3, #24
 800ea52:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	b2da      	uxtb	r2, r3
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	0a1b      	lsrs	r3, r3, #8
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	0d1b      	lsrs	r3, r3, #20
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	f003 030f 	and.w	r3, r3, #15
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	0c1b      	lsrs	r3, r3, #16
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	0a9b      	lsrs	r3, r3, #10
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	0a1b      	lsrs	r3, r3, #8
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	f003 0303 	and.w	r3, r3, #3
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	091b      	lsrs	r3, r3, #4
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	f003 030f 	and.w	r3, r3, #15
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	f003 030f 	and.w	r3, r3, #15
 800eace:	b2da      	uxtb	r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	0e1b      	lsrs	r3, r3, #24
 800ead8:	b2da      	uxtb	r2, r3
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eae6:	4618      	mov	r0, r3
 800eae8:	f004 f9e2 	bl	8012eb0 <SDMMC_CmdBlockLength>
 800eaec:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eaee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00d      	beq.n	800eb10 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a08      	ldr	r2, [pc, #32]	; (800eb1c <HAL_SD_GetCardStatus+0x178>)
 800eafa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb00:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800eb10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3750      	adds	r7, #80	; 0x50
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	1fe00fff 	.word	0x1fe00fff

0800eb20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800eb78:	b590      	push	{r4, r7, lr}
 800eb7a:	b08d      	sub	sp, #52	; 0x34
 800eb7c:	af02      	add	r7, sp, #8
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2203      	movs	r2, #3
 800eb8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb94:	2b03      	cmp	r3, #3
 800eb96:	d02e      	beq.n	800ebf6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb9e:	d106      	bne.n	800ebae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	635a      	str	r2, [r3, #52]	; 0x34
 800ebac:	e029      	b.n	800ec02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebb4:	d10a      	bne.n	800ebcc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 fb64 	bl	800f284 <SD_WideBus_Enable>
 800ebbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebc2:	6a3b      	ldr	r3, [r7, #32]
 800ebc4:	431a      	orrs	r2, r3
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	635a      	str	r2, [r3, #52]	; 0x34
 800ebca:	e01a      	b.n	800ec02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10a      	bne.n	800ebe8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 fba1 	bl	800f31a <SD_WideBus_Disable>
 800ebd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebde:	6a3b      	ldr	r3, [r7, #32]
 800ebe0:	431a      	orrs	r2, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	635a      	str	r2, [r3, #52]	; 0x34
 800ebe6:	e00c      	b.n	800ec02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	635a      	str	r2, [r3, #52]	; 0x34
 800ebf4:	e005      	b.n	800ec02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebfa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d007      	beq.n	800ec1a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a5f      	ldr	r2, [pc, #380]	; (800ed8c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ec10:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ec12:	2301      	movs	r3, #1
 800ec14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec18:	e096      	b.n	800ed48 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ec1a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ec1e:	f04f 0100 	mov.w	r1, #0
 800ec22:	f7fd fea3 	bl	800c96c <HAL_RCCEx_GetPeriphCLKFreq>
 800ec26:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 8083 	beq.w	800ed36 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	695a      	ldr	r2, [r3, #20]
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	4950      	ldr	r1, [pc, #320]	; (800ed90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ec4e:	fba1 1303 	umull	r1, r3, r1, r3
 800ec52:	0e1b      	lsrs	r3, r3, #24
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d303      	bcc.n	800ec60 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	695b      	ldr	r3, [r3, #20]
 800ec5c:	61bb      	str	r3, [r7, #24]
 800ec5e:	e05a      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec68:	d103      	bne.n	800ec72 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	61bb      	str	r3, [r7, #24]
 800ec70:	e051      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec7a:	d126      	bne.n	800ecca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	695b      	ldr	r3, [r3, #20]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10e      	bne.n	800eca2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	4a43      	ldr	r2, [pc, #268]	; (800ed94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d906      	bls.n	800ec9a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	4a40      	ldr	r2, [pc, #256]	; (800ed90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ec90:	fba2 2303 	umull	r2, r3, r2, r3
 800ec94:	0e5b      	lsrs	r3, r3, #25
 800ec96:	61bb      	str	r3, [r7, #24]
 800ec98:	e03d      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	695b      	ldr	r3, [r3, #20]
 800ec9e:	61bb      	str	r3, [r7, #24]
 800eca0:	e039      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	69fa      	ldr	r2, [r7, #28]
 800ecaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecae:	4a39      	ldr	r2, [pc, #228]	; (800ed94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d906      	bls.n	800ecc2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	4a36      	ldr	r2, [pc, #216]	; (800ed90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ecb8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecbc:	0e5b      	lsrs	r3, r3, #25
 800ecbe:	61bb      	str	r3, [r7, #24]
 800ecc0:	e029      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	61bb      	str	r3, [r7, #24]
 800ecc8:	e025      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10e      	bne.n	800ecf0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	4a30      	ldr	r2, [pc, #192]	; (800ed98 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d906      	bls.n	800ece8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	4a2c      	ldr	r2, [pc, #176]	; (800ed90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ecde:	fba2 2303 	umull	r2, r3, r2, r3
 800ece2:	0e1b      	lsrs	r3, r3, #24
 800ece4:	61bb      	str	r3, [r7, #24]
 800ece6:	e016      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	695b      	ldr	r3, [r3, #20]
 800ecec:	61bb      	str	r3, [r7, #24]
 800ecee:	e012      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	695b      	ldr	r3, [r3, #20]
 800ecf4:	005b      	lsls	r3, r3, #1
 800ecf6:	69fa      	ldr	r2, [r7, #28]
 800ecf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecfc:	4a26      	ldr	r2, [pc, #152]	; (800ed98 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d906      	bls.n	800ed10 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	4a22      	ldr	r2, [pc, #136]	; (800ed90 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed06:	fba2 2303 	umull	r2, r3, r2, r3
 800ed0a:	0e1b      	lsrs	r3, r3, #24
 800ed0c:	61bb      	str	r3, [r7, #24]
 800ed0e:	e002      	b.n	800ed16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	695b      	ldr	r3, [r3, #20]
 800ed14:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681c      	ldr	r4, [r3, #0]
 800ed1a:	466a      	mov	r2, sp
 800ed1c:	f107 0314 	add.w	r3, r7, #20
 800ed20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed24:	e882 0003 	stmia.w	r2, {r0, r1}
 800ed28:	f107 0308 	add.w	r3, r7, #8
 800ed2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f003 ffe0 	bl	8012cf4 <SDMMC_Init>
 800ed34:	e008      	b.n	800ed48 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed50:	4618      	mov	r0, r3
 800ed52:	f004 f8ad 	bl	8012eb0 <SDMMC_CmdBlockLength>
 800ed56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed58:	6a3b      	ldr	r3, [r7, #32]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00c      	beq.n	800ed78 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4a0a      	ldr	r2, [pc, #40]	; (800ed8c <HAL_SD_ConfigWideBusOperation+0x214>)
 800ed64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	431a      	orrs	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ed80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	372c      	adds	r7, #44	; 0x2c
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd90      	pop	{r4, r7, pc}
 800ed8c:	1fe00fff 	.word	0x1fe00fff
 800ed90:	55e63b89 	.word	0x55e63b89
 800ed94:	02faf080 	.word	0x02faf080
 800ed98:	017d7840 	.word	0x017d7840

0800ed9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800eda4:	2300      	movs	r3, #0
 800eda6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800eda8:	f107 030c 	add.w	r3, r7, #12
 800edac:	4619      	mov	r1, r3
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 fa40 	bl	800f234 <SD_SendStatus>
 800edb4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d005      	beq.n	800edc8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	431a      	orrs	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	0a5b      	lsrs	r3, r3, #9
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800edd2:	693b      	ldr	r3, [r7, #16]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b090      	sub	sp, #64	; 0x40
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ede8:	f7f5 f8e6 	bl	8003fb8 <HAL_GetTick>
 800edec:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f003 ffd7 	bl	8012da6 <SDMMC_GetPowerState>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d102      	bne.n	800ee04 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800edfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ee02:	e0b5      	b.n	800ef70 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee08:	2b03      	cmp	r3, #3
 800ee0a:	d02e      	beq.n	800ee6a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4618      	mov	r0, r3
 800ee12:	f004 fa22 	bl	801325a <SDMMC_CmdSendCID>
 800ee16:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ee18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <SD_InitCard+0x46>
    {
      return errorstate;
 800ee1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee20:	e0a6      	b.n	800ef70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2100      	movs	r1, #0
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f004 f802 	bl	8012e32 <SDMMC_GetResponse>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2104      	movs	r1, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f003 fff9 	bl	8012e32 <SDMMC_GetResponse>
 800ee40:	4602      	mov	r2, r0
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2108      	movs	r1, #8
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f003 fff0 	bl	8012e32 <SDMMC_GetResponse>
 800ee52:	4602      	mov	r2, r0
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	210c      	movs	r1, #12
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f003 ffe7 	bl	8012e32 <SDMMC_GetResponse>
 800ee64:	4602      	mov	r2, r0
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6e:	2b03      	cmp	r3, #3
 800ee70:	d01d      	beq.n	800eeae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ee72:	e019      	b.n	800eea8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f107 020a 	add.w	r2, r7, #10
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f004 fa2a 	bl	80132d8 <SDMMC_CmdSetRelAdd>
 800ee84:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ee8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8e:	e06f      	b.n	800ef70 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ee90:	f7f5 f892 	bl	8003fb8 <HAL_GetTick>
 800ee94:	4602      	mov	r2, r0
 800ee96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	f241 3287 	movw	r2, #4999	; 0x1387
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d902      	bls.n	800eea8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800eea2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eea6:	e063      	b.n	800ef70 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800eea8:	897b      	ldrh	r3, [r7, #10]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0e2      	beq.n	800ee74 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb2:	2b03      	cmp	r3, #3
 800eeb4:	d036      	beq.n	800ef24 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800eeb6:	897b      	ldrh	r3, [r7, #10]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eec6:	041b      	lsls	r3, r3, #16
 800eec8:	4619      	mov	r1, r3
 800eeca:	4610      	mov	r0, r2
 800eecc:	f004 f9e4 	bl	8013298 <SDMMC_CmdSendCSD>
 800eed0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <SD_InitCard+0x100>
    {
      return errorstate;
 800eed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeda:	e049      	b.n	800ef70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2100      	movs	r1, #0
 800eee2:	4618      	mov	r0, r3
 800eee4:	f003 ffa5 	bl	8012e32 <SDMMC_GetResponse>
 800eee8:	4602      	mov	r2, r0
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2104      	movs	r1, #4
 800eef4:	4618      	mov	r0, r3
 800eef6:	f003 ff9c 	bl	8012e32 <SDMMC_GetResponse>
 800eefa:	4602      	mov	r2, r0
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2108      	movs	r1, #8
 800ef06:	4618      	mov	r0, r3
 800ef08:	f003 ff93 	bl	8012e32 <SDMMC_GetResponse>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	210c      	movs	r1, #12
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f003 ff8a 	bl	8012e32 <SDMMC_GetResponse>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2104      	movs	r1, #4
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f003 ff81 	bl	8012e32 <SDMMC_GetResponse>
 800ef30:	4603      	mov	r3, r0
 800ef32:	0d1a      	lsrs	r2, r3, #20
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ef38:	f107 030c 	add.w	r3, r7, #12
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff fb8c 	bl	800e65c <HAL_SD_GetCardCSD>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d002      	beq.n	800ef50 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef4e:	e00f      	b.n	800ef70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef58:	041b      	lsls	r3, r3, #16
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	4610      	mov	r0, r2
 800ef5e:	f004 f893 	bl	8013088 <SDMMC_CmdSelDesel>
 800ef62:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <SD_InitCard+0x192>
  {
    return errorstate;
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6c:	e000      	b.n	800ef70 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3740      	adds	r7, #64	; 0x40
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef80:	2300      	movs	r3, #0
 800ef82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ef84:	2300      	movs	r3, #0
 800ef86:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f004 f89c 	bl	80130ce <SDMMC_CmdGoIdleState>
 800ef96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	e072      	b.n	800f088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f004 f8af 	bl	801310a <SDMMC_CmdOperCond>
 800efac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efb4:	d10d      	bne.n	800efd2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f004 f884 	bl	80130ce <SDMMC_CmdGoIdleState>
 800efc6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d004      	beq.n	800efd8 <SD_PowerON+0x60>
    {
      return errorstate;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	e05a      	b.n	800f088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2201      	movs	r2, #1
 800efd6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d137      	bne.n	800f050 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2100      	movs	r1, #0
 800efe6:	4618      	mov	r0, r3
 800efe8:	f004 f8af 	bl	801314a <SDMMC_CmdAppCommand>
 800efec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d02d      	beq.n	800f050 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eff4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eff8:	e046      	b.n	800f088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2100      	movs	r1, #0
 800f000:	4618      	mov	r0, r3
 800f002:	f004 f8a2 	bl	801314a <SDMMC_CmdAppCommand>
 800f006:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d001      	beq.n	800f012 <SD_PowerON+0x9a>
    {
      return errorstate;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	e03a      	b.n	800f088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	491e      	ldr	r1, [pc, #120]	; (800f090 <SD_PowerON+0x118>)
 800f018:	4618      	mov	r0, r3
 800f01a:	f004 f8b9 	bl	8013190 <SDMMC_CmdAppOperCommand>
 800f01e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f026:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f02a:	e02d      	b.n	800f088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2100      	movs	r1, #0
 800f032:	4618      	mov	r0, r3
 800f034:	f003 fefd 	bl	8012e32 <SDMMC_GetResponse>
 800f038:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	0fdb      	lsrs	r3, r3, #31
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d101      	bne.n	800f046 <SD_PowerON+0xce>
 800f042:	2301      	movs	r3, #1
 800f044:	e000      	b.n	800f048 <SD_PowerON+0xd0>
 800f046:	2300      	movs	r3, #0
 800f048:	613b      	str	r3, [r7, #16]

    count++;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	3301      	adds	r3, #1
 800f04e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f056:	4293      	cmp	r3, r2
 800f058:	d802      	bhi.n	800f060 <SD_PowerON+0xe8>
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d0cc      	beq.n	800effa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f066:	4293      	cmp	r3, r2
 800f068:	d902      	bls.n	800f070 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f06a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f06e:	e00b      	b.n	800f088 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d002      	beq.n	800f086 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2201      	movs	r2, #1
 800f084:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	c1100000 	.word	0xc1100000

0800f094 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b08c      	sub	sp, #48	; 0x30
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f09e:	f7f4 ff8b 	bl	8003fb8 <HAL_GetTick>
 800f0a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f003 febf 	bl	8012e32 <SDMMC_GetResponse>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0be:	d102      	bne.n	800f0c6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f0c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0c4:	e0b0      	b.n	800f228 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2140      	movs	r1, #64	; 0x40
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f003 feef 	bl	8012eb0 <SDMMC_CmdBlockLength>
 800f0d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0d4:	6a3b      	ldr	r3, [r7, #32]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d005      	beq.n	800f0e6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	e0a0      	b.n	800f228 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ee:	041b      	lsls	r3, r3, #16
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	f004 f829 	bl	801314a <SDMMC_CmdAppCommand>
 800f0f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d005      	beq.n	800f10c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	e08d      	b.n	800f228 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f10c:	f04f 33ff 	mov.w	r3, #4294967295
 800f110:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f112:	2340      	movs	r3, #64	; 0x40
 800f114:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f116:	2360      	movs	r3, #96	; 0x60
 800f118:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f11a:	2302      	movs	r3, #2
 800f11c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f11e:	2300      	movs	r3, #0
 800f120:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f122:	2301      	movs	r3, #1
 800f124:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f107 0208 	add.w	r2, r7, #8
 800f12e:	4611      	mov	r1, r2
 800f130:	4618      	mov	r0, r3
 800f132:	f003 fe91 	bl	8012e58 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f004 f911 	bl	8013362 <SDMMC_CmdStatusRegister>
 800f140:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d02b      	beq.n	800f1a0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f150:	6a3b      	ldr	r3, [r7, #32]
 800f152:	e069      	b.n	800f228 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f15a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d013      	beq.n	800f18a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f162:	2300      	movs	r3, #0
 800f164:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f166:	e00d      	b.n	800f184 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4618      	mov	r0, r3
 800f16e:	f003 fdeb 	bl	8012d48 <SDMMC_ReadFIFO>
 800f172:	4602      	mov	r2, r0
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	601a      	str	r2, [r3, #0]
        pData++;
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	3304      	adds	r3, #4
 800f17c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f180:	3301      	adds	r3, #1
 800f182:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	2b07      	cmp	r3, #7
 800f188:	d9ee      	bls.n	800f168 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f18a:	f7f4 ff15 	bl	8003fb8 <HAL_GetTick>
 800f18e:	4602      	mov	r2, r0
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f198:	d102      	bne.n	800f1a0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f19a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f19e:	e043      	b.n	800f228 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d0d2      	beq.n	800f154 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1b4:	f003 0308 	and.w	r3, r3, #8
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d001      	beq.n	800f1c0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f1bc:	2308      	movs	r3, #8
 800f1be:	e033      	b.n	800f228 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1c6:	f003 0302 	and.w	r3, r3, #2
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	e02a      	b.n	800f228 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d017      	beq.n	800f210 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f1e0:	2320      	movs	r3, #32
 800f1e2:	e021      	b.n	800f228 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f003 fdad 	bl	8012d48 <SDMMC_ReadFIFO>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	601a      	str	r2, [r3, #0]
    pData++;
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f1fa:	f7f4 fedd 	bl	8003fb8 <HAL_GetTick>
 800f1fe:	4602      	mov	r2, r0
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	1ad3      	subs	r3, r2, r3
 800f204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f208:	d102      	bne.n	800f210 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f20a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f20e:	e00b      	b.n	800f228 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1e2      	bne.n	800f1e4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a03      	ldr	r2, [pc, #12]	; (800f230 <SD_SendSDStatus+0x19c>)
 800f224:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3730      	adds	r7, #48	; 0x30
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	18000f3a 	.word	0x18000f3a

0800f234 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d102      	bne.n	800f24a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f244:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f248:	e018      	b.n	800f27c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f252:	041b      	lsls	r3, r3, #16
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f004 f860 	bl	801331c <SDMMC_CmdSendStatus>
 800f25c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d001      	beq.n	800f268 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	e009      	b.n	800f27c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2100      	movs	r1, #0
 800f26e:	4618      	mov	r0, r3
 800f270:	f003 fddf 	bl	8012e32 <SDMMC_GetResponse>
 800f274:	4602      	mov	r2, r0
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f28c:	2300      	movs	r3, #0
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	2300      	movs	r3, #0
 800f292:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2100      	movs	r1, #0
 800f29a:	4618      	mov	r0, r3
 800f29c:	f003 fdc9 	bl	8012e32 <SDMMC_GetResponse>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2aa:	d102      	bne.n	800f2b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f2ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2b0:	e02f      	b.n	800f312 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f2b2:	f107 030c 	add.w	r3, r7, #12
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 f879 	bl	800f3b0 <SD_FindSCR>
 800f2be:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	e023      	b.n	800f312 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d01c      	beq.n	800f30e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2dc:	041b      	lsls	r3, r3, #16
 800f2de:	4619      	mov	r1, r3
 800f2e0:	4610      	mov	r0, r2
 800f2e2:	f003 ff32 	bl	801314a <SDMMC_CmdAppCommand>
 800f2e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d001      	beq.n	800f2f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	e00f      	b.n	800f312 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2102      	movs	r1, #2
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f003 ff69 	bl	80131d0 <SDMMC_CmdBusWidth>
 800f2fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	e003      	b.n	800f312 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f30a:	2300      	movs	r3, #0
 800f30c:	e001      	b.n	800f312 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f30e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b086      	sub	sp, #24
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]
 800f326:	2300      	movs	r3, #0
 800f328:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2100      	movs	r1, #0
 800f330:	4618      	mov	r0, r3
 800f332:	f003 fd7e 	bl	8012e32 <SDMMC_GetResponse>
 800f336:	4603      	mov	r3, r0
 800f338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f33c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f340:	d102      	bne.n	800f348 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f346:	e02f      	b.n	800f3a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f348:	f107 030c 	add.w	r3, r7, #12
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f82e 	bl	800f3b0 <SD_FindSCR>
 800f354:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d001      	beq.n	800f360 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	e023      	b.n	800f3a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f366:	2b00      	cmp	r3, #0
 800f368:	d01c      	beq.n	800f3a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f372:	041b      	lsls	r3, r3, #16
 800f374:	4619      	mov	r1, r3
 800f376:	4610      	mov	r0, r2
 800f378:	f003 fee7 	bl	801314a <SDMMC_CmdAppCommand>
 800f37c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	e00f      	b.n	800f3a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2100      	movs	r1, #0
 800f38e:	4618      	mov	r0, r3
 800f390:	f003 ff1e 	bl	80131d0 <SDMMC_CmdBusWidth>
 800f394:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	e003      	b.n	800f3a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	e001      	b.n	800f3a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f3a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3718      	adds	r7, #24
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b08e      	sub	sp, #56	; 0x38
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f3ba:	f7f4 fdfd 	bl	8003fb8 <HAL_GetTick>
 800f3be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	60bb      	str	r3, [r7, #8]
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2108      	movs	r1, #8
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f003 fd6a 	bl	8012eb0 <SDMMC_CmdBlockLength>
 800f3dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d001      	beq.n	800f3e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	e0ad      	b.n	800f544 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f0:	041b      	lsls	r3, r3, #16
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	f003 fea8 	bl	801314a <SDMMC_CmdAppCommand>
 800f3fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f404:	e09e      	b.n	800f544 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f406:	f04f 33ff 	mov.w	r3, #4294967295
 800f40a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f40c:	2308      	movs	r3, #8
 800f40e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f410:	2330      	movs	r3, #48	; 0x30
 800f412:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f414:	2302      	movs	r3, #2
 800f416:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f418:	2300      	movs	r3, #0
 800f41a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f41c:	2301      	movs	r3, #1
 800f41e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f107 0210 	add.w	r2, r7, #16
 800f428:	4611      	mov	r1, r2
 800f42a:	4618      	mov	r0, r3
 800f42c:	f003 fd14 	bl	8012e58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4618      	mov	r0, r3
 800f436:	f003 feee 	bl	8013216 <SDMMC_CmdSendSCR>
 800f43a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d027      	beq.n	800f492 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	e07e      	b.n	800f544 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f450:	2b00      	cmp	r3, #0
 800f452:	d113      	bne.n	800f47c <SD_FindSCR+0xcc>
 800f454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f456:	2b00      	cmp	r3, #0
 800f458:	d110      	bne.n	800f47c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4618      	mov	r0, r3
 800f460:	f003 fc72 	bl	8012d48 <SDMMC_ReadFIFO>
 800f464:	4603      	mov	r3, r0
 800f466:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f003 fc6b 	bl	8012d48 <SDMMC_ReadFIFO>
 800f472:	4603      	mov	r3, r0
 800f474:	60fb      	str	r3, [r7, #12]
      index++;
 800f476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f478:	3301      	adds	r3, #1
 800f47a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f47c:	f7f4 fd9c 	bl	8003fb8 <HAL_GetTick>
 800f480:	4602      	mov	r2, r0
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f48a:	d102      	bne.n	800f492 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f48c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f490:	e058      	b.n	800f544 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f498:	f240 532a 	movw	r3, #1322	; 0x52a
 800f49c:	4013      	ands	r3, r2
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d0d1      	beq.n	800f446 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d005      	beq.n	800f4bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2208      	movs	r2, #8
 800f4b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f4b8:	2308      	movs	r3, #8
 800f4ba:	e043      	b.n	800f544 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d005      	beq.n	800f4d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2202      	movs	r2, #2
 800f4d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f4d2:	2302      	movs	r3, #2
 800f4d4:	e036      	b.n	800f544 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4dc:	f003 0320 	and.w	r3, r3, #32
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d005      	beq.n	800f4f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2220      	movs	r2, #32
 800f4ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f4ec:	2320      	movs	r3, #32
 800f4ee:	e029      	b.n	800f544 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4a15      	ldr	r2, [pc, #84]	; (800f54c <SD_FindSCR+0x19c>)
 800f4f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	061a      	lsls	r2, r3, #24
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	021b      	lsls	r3, r3, #8
 800f500:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f504:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	0a1b      	lsrs	r3, r3, #8
 800f50a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f50e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	0e1b      	lsrs	r3, r3, #24
 800f514:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f518:	601a      	str	r2, [r3, #0]
    scr++;
 800f51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51c:	3304      	adds	r3, #4
 800f51e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	061a      	lsls	r2, r3, #24
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	021b      	lsls	r3, r3, #8
 800f528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f52c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	0a1b      	lsrs	r3, r3, #8
 800f532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f536:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	0e1b      	lsrs	r3, r3, #24
 800f53c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f540:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3738      	adds	r7, #56	; 0x38
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	18000f3a 	.word	0x18000f3a

0800f550 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f562:	2b1f      	cmp	r3, #31
 800f564:	d936      	bls.n	800f5d4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f566:	2300      	movs	r3, #0
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e027      	b.n	800f5bc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4618      	mov	r0, r3
 800f572:	f003 fbe9 	bl	8012d48 <SDMMC_ReadFIFO>
 800f576:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	3301      	adds	r3, #1
 800f584:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	0a1b      	lsrs	r3, r3, #8
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	3301      	adds	r3, #1
 800f594:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	0c1b      	lsrs	r3, r3, #16
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	0e1b      	lsrs	r3, r3, #24
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	617b      	str	r3, [r7, #20]
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	2b07      	cmp	r3, #7
 800f5c0:	d9d4      	bls.n	800f56c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	693a      	ldr	r2, [r7, #16]
 800f5c6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5cc:	f1a3 0220 	sub.w	r2, r3, #32
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f5d4:	bf00      	nop
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a1b      	ldr	r3, [r3, #32]
 800f5ee:	2b1f      	cmp	r3, #31
 800f5f0:	d93a      	bls.n	800f668 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	617b      	str	r3, [r7, #20]
 800f5f6:	e02b      	b.n	800f650 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	3301      	adds	r3, #1
 800f602:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	021a      	lsls	r2, r3, #8
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	4313      	orrs	r3, r2
 800f60e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	3301      	adds	r3, #1
 800f614:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	041a      	lsls	r2, r3, #16
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	4313      	orrs	r3, r2
 800f620:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	3301      	adds	r3, #1
 800f626:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	061a      	lsls	r2, r3, #24
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	4313      	orrs	r3, r2
 800f632:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	3301      	adds	r3, #1
 800f638:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f107 020c 	add.w	r2, r7, #12
 800f642:	4611      	mov	r1, r2
 800f644:	4618      	mov	r0, r3
 800f646:	f003 fb8c 	bl	8012d62 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	3301      	adds	r3, #1
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2b07      	cmp	r3, #7
 800f654:	d9d0      	bls.n	800f5f8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	693a      	ldr	r2, [r7, #16]
 800f65a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a1b      	ldr	r3, [r3, #32]
 800f660:	f1a3 0220 	sub.w	r2, r3, #32
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	621a      	str	r2, [r3, #32]
  }
}
 800f668:	bf00      	nop
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f678:	bf00      	nop
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d101      	bne.n	800f6d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e10f      	b.n	800f8f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a87      	ldr	r2, [pc, #540]	; (800f8fc <HAL_SPI_Init+0x23c>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d00f      	beq.n	800f702 <HAL_SPI_Init+0x42>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a86      	ldr	r2, [pc, #536]	; (800f900 <HAL_SPI_Init+0x240>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d00a      	beq.n	800f702 <HAL_SPI_Init+0x42>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a84      	ldr	r2, [pc, #528]	; (800f904 <HAL_SPI_Init+0x244>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d005      	beq.n	800f702 <HAL_SPI_Init+0x42>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	2b0f      	cmp	r3, #15
 800f6fc:	d901      	bls.n	800f702 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f6fe:	2301      	movs	r3, #1
 800f700:	e0f7      	b.n	800f8f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fd5a 	bl	80101bc <SPI_GetPacketSize>
 800f708:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a7b      	ldr	r2, [pc, #492]	; (800f8fc <HAL_SPI_Init+0x23c>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00c      	beq.n	800f72e <HAL_SPI_Init+0x6e>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a79      	ldr	r2, [pc, #484]	; (800f900 <HAL_SPI_Init+0x240>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d007      	beq.n	800f72e <HAL_SPI_Init+0x6e>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a78      	ldr	r2, [pc, #480]	; (800f904 <HAL_SPI_Init+0x244>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d002      	beq.n	800f72e <HAL_SPI_Init+0x6e>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2b08      	cmp	r3, #8
 800f72c:	d811      	bhi.n	800f752 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f732:	4a72      	ldr	r2, [pc, #456]	; (800f8fc <HAL_SPI_Init+0x23c>)
 800f734:	4293      	cmp	r3, r2
 800f736:	d009      	beq.n	800f74c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a70      	ldr	r2, [pc, #448]	; (800f900 <HAL_SPI_Init+0x240>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d004      	beq.n	800f74c <HAL_SPI_Init+0x8c>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a6f      	ldr	r2, [pc, #444]	; (800f904 <HAL_SPI_Init+0x244>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d104      	bne.n	800f756 <HAL_SPI_Init+0x96>
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2b10      	cmp	r3, #16
 800f750:	d901      	bls.n	800f756 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	e0cd      	b.n	800f8f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d106      	bne.n	800f770 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7f3 fd94 	bl	8003298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2202      	movs	r2, #2
 800f774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f022 0201 	bic.w	r2, r2, #1
 800f786:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f792:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	699b      	ldr	r3, [r3, #24]
 800f798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f79c:	d119      	bne.n	800f7d2 <HAL_SPI_Init+0x112>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7a6:	d103      	bne.n	800f7b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d008      	beq.n	800f7c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d10c      	bne.n	800f7d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f7bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7c0:	d107      	bne.n	800f7d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f7d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00f      	beq.n	800f7fe <HAL_SPI_Init+0x13e>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	2b06      	cmp	r3, #6
 800f7e4:	d90b      	bls.n	800f7fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	430a      	orrs	r2, r1
 800f7fa:	601a      	str	r2, [r3, #0]
 800f7fc:	e007      	b.n	800f80e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f80c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	69da      	ldr	r2, [r3, #28]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f816:	431a      	orrs	r2, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	431a      	orrs	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f820:	ea42 0103 	orr.w	r1, r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68da      	ldr	r2, [r3, #12]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	430a      	orrs	r2, r1
 800f82e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f838:	431a      	orrs	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f83e:	431a      	orrs	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	699b      	ldr	r3, [r3, #24]
 800f844:	431a      	orrs	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	431a      	orrs	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	431a      	orrs	r2, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	431a      	orrs	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	431a      	orrs	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f862:	431a      	orrs	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	431a      	orrs	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f86e:	ea42 0103 	orr.w	r1, r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	430a      	orrs	r2, r1
 800f87c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d113      	bne.n	800f8ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f898:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f8ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f022 0201 	bic.w	r2, r2, #1
 800f8bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00a      	beq.n	800f8e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	430a      	orrs	r2, r1
 800f8de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	40013000 	.word	0x40013000
 800f900:	40003800 	.word	0x40003800
 800f904:	40003c00 	.word	0x40003c00

0800f908 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08a      	sub	sp, #40	; 0x28
 800f90c:	af02      	add	r7, sp, #8
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	603b      	str	r3, [r7, #0]
 800f914:	4613      	mov	r3, r2
 800f916:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3320      	adds	r3, #32
 800f91e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d101      	bne.n	800f932 <HAL_SPI_Transmit+0x2a>
 800f92e:	2302      	movs	r3, #2
 800f930:	e1e1      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2201      	movs	r2, #1
 800f936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f93a:	f7f4 fb3d 	bl	8003fb8 <HAL_GetTick>
 800f93e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d007      	beq.n	800f95c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f94c:	2302      	movs	r3, #2
 800f94e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2200      	movs	r2, #0
 800f954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f958:	7efb      	ldrb	r3, [r7, #27]
 800f95a:	e1cc      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <HAL_SPI_Transmit+0x60>
 800f962:	88fb      	ldrh	r3, [r7, #6]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d107      	bne.n	800f978 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f968:	2301      	movs	r3, #1
 800f96a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2200      	movs	r2, #0
 800f970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f974:	7efb      	ldrb	r3, [r7, #27]
 800f976:	e1be      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2203      	movs	r2, #3
 800f97c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2200      	movs	r2, #0
 800f984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	88fa      	ldrh	r2, [r7, #6]
 800f992:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	88fa      	ldrh	r2, [r7, #6]
 800f99a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f9c8:	d108      	bne.n	800f9dc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	e009      	b.n	800f9f0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f9ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	4b96      	ldr	r3, [pc, #600]	; (800fc50 <HAL_SPI_Transmit+0x348>)
 800f9f8:	4013      	ands	r3, r2
 800f9fa:	88f9      	ldrh	r1, [r7, #6]
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	6812      	ldr	r2, [r2, #0]
 800fa00:	430b      	orrs	r3, r1
 800fa02:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f042 0201 	orr.w	r2, r2, #1
 800fa12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa1c:	d107      	bne.n	800fa2e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	2b0f      	cmp	r3, #15
 800fa34:	d947      	bls.n	800fac6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fa36:	e03f      	b.n	800fab8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	f003 0302 	and.w	r3, r3, #2
 800fa42:	2b02      	cmp	r3, #2
 800fa44:	d114      	bne.n	800fa70 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6812      	ldr	r2, [r2, #0]
 800fa50:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa56:	1d1a      	adds	r2, r3, #4
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	3b01      	subs	r3, #1
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fa6e:	e023      	b.n	800fab8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa70:	f7f4 faa2 	bl	8003fb8 <HAL_GetTick>
 800fa74:	4602      	mov	r2, r0
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	1ad3      	subs	r3, r2, r3
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d803      	bhi.n	800fa88 <HAL_SPI_Transmit+0x180>
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa86:	d102      	bne.n	800fa8e <HAL_SPI_Transmit+0x186>
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d114      	bne.n	800fab8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	f000 fac6 	bl	8010020 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2200      	movs	r2, #0
 800fa98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2201      	movs	r2, #1
 800fab0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fab4:	2303      	movs	r3, #3
 800fab6:	e11e      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1b9      	bne.n	800fa38 <HAL_SPI_Transmit+0x130>
 800fac4:	e0f1      	b.n	800fcaa <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	2b07      	cmp	r3, #7
 800facc:	f240 80e6 	bls.w	800fc9c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fad0:	e05d      	b.n	800fb8e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	695b      	ldr	r3, [r3, #20]
 800fad8:	f003 0302 	and.w	r3, r3, #2
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d132      	bne.n	800fb46 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d918      	bls.n	800fb1e <HAL_SPI_Transmit+0x216>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d014      	beq.n	800fb1e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6812      	ldr	r2, [r2, #0]
 800fafe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb04:	1d1a      	adds	r2, r3, #4
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	3b02      	subs	r3, #2
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fb1c:	e037      	b.n	800fb8e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb22:	881a      	ldrh	r2, [r3, #0]
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb2c:	1c9a      	adds	r2, r3, #2
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fb44:	e023      	b.n	800fb8e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb46:	f7f4 fa37 	bl	8003fb8 <HAL_GetTick>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	683a      	ldr	r2, [r7, #0]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d803      	bhi.n	800fb5e <HAL_SPI_Transmit+0x256>
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5c:	d102      	bne.n	800fb64 <HAL_SPI_Transmit+0x25c>
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d114      	bne.n	800fb8e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f000 fa5b 	bl	8010020 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2201      	movs	r2, #1
 800fb86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	e0b3      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d19b      	bne.n	800fad2 <HAL_SPI_Transmit+0x1ca>
 800fb9a:	e086      	b.n	800fcaa <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	f003 0302 	and.w	r3, r3, #2
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	d154      	bne.n	800fc54 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d918      	bls.n	800fbe8 <HAL_SPI_Transmit+0x2e0>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbba:	2b40      	cmp	r3, #64	; 0x40
 800fbbc:	d914      	bls.n	800fbe8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6812      	ldr	r2, [r2, #0]
 800fbc8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbce:	1d1a      	adds	r2, r3, #4
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	3b04      	subs	r3, #4
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fbe6:	e059      	b.n	800fc9c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d917      	bls.n	800fc24 <HAL_SPI_Transmit+0x31c>
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d013      	beq.n	800fc24 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc00:	881a      	ldrh	r2, [r3, #0]
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc0a:	1c9a      	adds	r2, r3, #2
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	3b02      	subs	r3, #2
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc22:	e03b      	b.n	800fc9c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	3320      	adds	r3, #32
 800fc2e:	7812      	ldrb	r2, [r2, #0]
 800fc30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc36:	1c5a      	adds	r2, r3, #1
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	3b01      	subs	r3, #1
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc4e:	e025      	b.n	800fc9c <HAL_SPI_Transmit+0x394>
 800fc50:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc54:	f7f4 f9b0 	bl	8003fb8 <HAL_GetTick>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d803      	bhi.n	800fc6c <HAL_SPI_Transmit+0x364>
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc6a:	d102      	bne.n	800fc72 <HAL_SPI_Transmit+0x36a>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d114      	bne.n	800fc9c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f000 f9d4 	bl	8010020 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc98:	2303      	movs	r3, #3
 800fc9a:	e02c      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f47f af79 	bne.w	800fb9c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	2108      	movs	r1, #8
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f000 fa53 	bl	8010160 <SPI_WaitOnFlagUntilTimeout>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d007      	beq.n	800fcd0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcc6:	f043 0220 	orr.w	r2, r3, #32
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 f9a5 	bl	8010020 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2201      	movs	r2, #1
 800fce2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d001      	beq.n	800fcf4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e000      	b.n	800fcf6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fcf4:	7efb      	ldrb	r3, [r7, #27]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3720      	adds	r7, #32
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop

0800fd00 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b088      	sub	sp, #32
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	603b      	str	r3, [r7, #0]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fd10:	2300      	movs	r3, #0
 800fd12:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	3330      	adds	r3, #48	; 0x30
 800fd1a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d101      	bne.n	800fd2a <HAL_SPI_Receive+0x2a>
 800fd26:	2302      	movs	r3, #2
 800fd28:	e173      	b.n	8010012 <HAL_SPI_Receive+0x312>
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd32:	f7f4 f941 	bl	8003fb8 <HAL_GetTick>
 800fd36:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d007      	beq.n	800fd54 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800fd44:	2302      	movs	r3, #2
 800fd46:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fd50:	7ffb      	ldrb	r3, [r7, #31]
 800fd52:	e15e      	b.n	8010012 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d002      	beq.n	800fd60 <HAL_SPI_Receive+0x60>
 800fd5a:	88fb      	ldrh	r3, [r7, #6]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d107      	bne.n	800fd70 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800fd60:	2301      	movs	r3, #1
 800fd62:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fd6c:	7ffb      	ldrb	r3, [r7, #31]
 800fd6e:	e150      	b.n	8010012 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2204      	movs	r2, #4
 800fd74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	88fa      	ldrh	r2, [r7, #6]
 800fd8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	88fa      	ldrh	r2, [r7, #6]
 800fd92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fdc0:	d108      	bne.n	800fdd4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	e009      	b.n	800fde8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	68db      	ldr	r3, [r3, #12]
 800fdda:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fde6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	4b8b      	ldr	r3, [pc, #556]	; (801001c <HAL_SPI_Receive+0x31c>)
 800fdf0:	4013      	ands	r3, r2
 800fdf2:	88f9      	ldrh	r1, [r7, #6]
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	6812      	ldr	r2, [r2, #0]
 800fdf8:	430b      	orrs	r3, r1
 800fdfa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f042 0201 	orr.w	r2, r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe14:	d107      	bne.n	800fe26 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	2b0f      	cmp	r3, #15
 800fe2c:	d948      	bls.n	800fec0 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fe2e:	e040      	b.n	800feb2 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	695a      	ldr	r2, [r3, #20]
 800fe36:	f248 0308 	movw	r3, #32776	; 0x8008
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d014      	beq.n	800fe6a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fe4a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe50:	1d1a      	adds	r2, r3, #4
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fe68:	e023      	b.n	800feb2 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe6a:	f7f4 f8a5 	bl	8003fb8 <HAL_GetTick>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	683a      	ldr	r2, [r7, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d803      	bhi.n	800fe82 <HAL_SPI_Receive+0x182>
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe80:	d102      	bne.n	800fe88 <HAL_SPI_Receive+0x188>
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d114      	bne.n	800feb2 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f000 f8c9 	bl	8010020 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2200      	movs	r2, #0
 800fe92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2201      	movs	r2, #1
 800feaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800feae:	2303      	movs	r3, #3
 800feb0:	e0af      	b.n	8010012 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800feb8:	b29b      	uxth	r3, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	d1b8      	bne.n	800fe30 <HAL_SPI_Receive+0x130>
 800febe:	e095      	b.n	800ffec <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	2b07      	cmp	r3, #7
 800fec6:	f240 808b 	bls.w	800ffe0 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800feca:	e03f      	b.n	800ff4c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	695b      	ldr	r3, [r3, #20]
 800fed2:	f003 0301 	and.w	r3, r3, #1
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d114      	bne.n	800ff04 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fede:	69ba      	ldr	r2, [r7, #24]
 800fee0:	8812      	ldrh	r2, [r2, #0]
 800fee2:	b292      	uxth	r2, r2
 800fee4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800feea:	1c9a      	adds	r2, r3, #2
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	3b01      	subs	r3, #1
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff02:	e023      	b.n	800ff4c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff04:	f7f4 f858 	bl	8003fb8 <HAL_GetTick>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	1ad3      	subs	r3, r2, r3
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d803      	bhi.n	800ff1c <HAL_SPI_Receive+0x21c>
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff1a:	d102      	bne.n	800ff22 <HAL_SPI_Receive+0x222>
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d114      	bne.n	800ff4c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f000 f87c 	bl	8010020 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2201      	movs	r2, #1
 800ff44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff48:	2303      	movs	r3, #3
 800ff4a:	e062      	b.n	8010012 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1b9      	bne.n	800fecc <HAL_SPI_Receive+0x1cc>
 800ff58:	e048      	b.n	800ffec <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	695b      	ldr	r3, [r3, #20]
 800ff60:	f003 0301 	and.w	r3, r3, #1
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d117      	bne.n	800ff98 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff74:	7812      	ldrb	r2, [r2, #0]
 800ff76:	b2d2      	uxtb	r2, r2
 800ff78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff7e:	1c5a      	adds	r2, r3, #1
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff96:	e023      	b.n	800ffe0 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff98:	f7f4 f80e 	bl	8003fb8 <HAL_GetTick>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	683a      	ldr	r2, [r7, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d803      	bhi.n	800ffb0 <HAL_SPI_Receive+0x2b0>
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffae:	d102      	bne.n	800ffb6 <HAL_SPI_Receive+0x2b6>
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d114      	bne.n	800ffe0 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f000 f832 	bl	8010020 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e018      	b.n	8010012 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1b6      	bne.n	800ff5a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f000 f817 	bl	8010020 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2201      	movs	r2, #1
 800fffe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8010010:	7ffb      	ldrb	r3, [r7, #31]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3720      	adds	r7, #32
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	ffff0000 	.word	0xffff0000

08010020 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	699a      	ldr	r2, [r3, #24]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f042 0208 	orr.w	r2, r2, #8
 801003e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	699a      	ldr	r2, [r3, #24]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f042 0210 	orr.w	r2, r2, #16
 801004e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f022 0201 	bic.w	r2, r2, #1
 801005e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6919      	ldr	r1, [r3, #16]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	4b3c      	ldr	r3, [pc, #240]	; (801015c <SPI_CloseTransfer+0x13c>)
 801006c:	400b      	ands	r3, r1
 801006e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	689a      	ldr	r2, [r3, #8]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801007e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b04      	cmp	r3, #4
 801008a:	d014      	beq.n	80100b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f003 0320 	and.w	r3, r3, #32
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00f      	beq.n	80100b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801009c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	699a      	ldr	r2, [r3, #24]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f042 0220 	orr.w	r2, r2, #32
 80100b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b03      	cmp	r3, #3
 80100c0:	d014      	beq.n	80100ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00f      	beq.n	80100ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100d2:	f043 0204 	orr.w	r2, r3, #4
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	699a      	ldr	r2, [r3, #24]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00f      	beq.n	8010116 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100fc:	f043 0201 	orr.w	r2, r3, #1
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	699a      	ldr	r2, [r3, #24]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010114:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00f      	beq.n	8010140 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010126:	f043 0208 	orr.w	r2, r3, #8
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	699a      	ldr	r2, [r3, #24]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801013e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010150:	bf00      	nop
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr
 801015c:	fffffc90 	.word	0xfffffc90

08010160 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	603b      	str	r3, [r7, #0]
 801016c:	4613      	mov	r3, r2
 801016e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010170:	e010      	b.n	8010194 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010172:	f7f3 ff21 	bl	8003fb8 <HAL_GetTick>
 8010176:	4602      	mov	r2, r0
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	683a      	ldr	r2, [r7, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d803      	bhi.n	801018a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010188:	d102      	bne.n	8010190 <SPI_WaitOnFlagUntilTimeout+0x30>
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d101      	bne.n	8010194 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010190:	2303      	movs	r3, #3
 8010192:	e00f      	b.n	80101b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	695a      	ldr	r2, [r3, #20]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	4013      	ands	r3, r2
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	bf0c      	ite	eq
 80101a4:	2301      	moveq	r3, #1
 80101a6:	2300      	movne	r3, #0
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	461a      	mov	r2, r3
 80101ac:	79fb      	ldrb	r3, [r7, #7]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d0df      	beq.n	8010172 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80101b2:	2300      	movs	r3, #0
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3710      	adds	r7, #16
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80101bc:	b480      	push	{r7}
 80101be:	b085      	sub	sp, #20
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101c8:	095b      	lsrs	r3, r3, #5
 80101ca:	3301      	adds	r3, #1
 80101cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	3301      	adds	r3, #1
 80101d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	3307      	adds	r3, #7
 80101da:	08db      	lsrs	r3, r3, #3
 80101dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	68fa      	ldr	r2, [r7, #12]
 80101e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3714      	adds	r7, #20
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr

080101f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b082      	sub	sp, #8
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d101      	bne.n	8010204 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010200:	2301      	movs	r3, #1
 8010202:	e049      	b.n	8010298 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801020a:	b2db      	uxtb	r3, r3
 801020c:	2b00      	cmp	r3, #0
 801020e:	d106      	bne.n	801021e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7f3 fa8f 	bl	800373c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2202      	movs	r2, #2
 8010222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	3304      	adds	r3, #4
 801022e:	4619      	mov	r1, r3
 8010230:	4610      	mov	r0, r2
 8010232:	f000 ff29 	bl	8011088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2201      	movs	r2, #1
 801023a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2201      	movs	r2, #1
 8010242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2201      	movs	r2, #1
 801024a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2201      	movs	r2, #1
 801025a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2201      	movs	r2, #1
 8010262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2201      	movs	r2, #1
 801026a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2201      	movs	r2, #1
 8010272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2201      	movs	r2, #1
 801027a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2201      	movs	r2, #1
 8010282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2201      	movs	r2, #1
 801028a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2201      	movs	r2, #1
 8010292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80102ae:	2301      	movs	r3, #1
 80102b0:	e049      	b.n	8010346 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d106      	bne.n	80102cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7f3 f8a2 	bl	8003410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2202      	movs	r2, #2
 80102d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	3304      	adds	r3, #4
 80102dc:	4619      	mov	r1, r3
 80102de:	4610      	mov	r0, r2
 80102e0:	f000 fed2 	bl	8011088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2201      	movs	r2, #1
 8010330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2201      	movs	r2, #1
 8010340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}
	...

08010350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d109      	bne.n	8010374 <HAL_TIM_PWM_Start+0x24>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010366:	b2db      	uxtb	r3, r3
 8010368:	2b01      	cmp	r3, #1
 801036a:	bf14      	ite	ne
 801036c:	2301      	movne	r3, #1
 801036e:	2300      	moveq	r3, #0
 8010370:	b2db      	uxtb	r3, r3
 8010372:	e03c      	b.n	80103ee <HAL_TIM_PWM_Start+0x9e>
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	2b04      	cmp	r3, #4
 8010378:	d109      	bne.n	801038e <HAL_TIM_PWM_Start+0x3e>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010380:	b2db      	uxtb	r3, r3
 8010382:	2b01      	cmp	r3, #1
 8010384:	bf14      	ite	ne
 8010386:	2301      	movne	r3, #1
 8010388:	2300      	moveq	r3, #0
 801038a:	b2db      	uxtb	r3, r3
 801038c:	e02f      	b.n	80103ee <HAL_TIM_PWM_Start+0x9e>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	2b08      	cmp	r3, #8
 8010392:	d109      	bne.n	80103a8 <HAL_TIM_PWM_Start+0x58>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801039a:	b2db      	uxtb	r3, r3
 801039c:	2b01      	cmp	r3, #1
 801039e:	bf14      	ite	ne
 80103a0:	2301      	movne	r3, #1
 80103a2:	2300      	moveq	r3, #0
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	e022      	b.n	80103ee <HAL_TIM_PWM_Start+0x9e>
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	2b0c      	cmp	r3, #12
 80103ac:	d109      	bne.n	80103c2 <HAL_TIM_PWM_Start+0x72>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	bf14      	ite	ne
 80103ba:	2301      	movne	r3, #1
 80103bc:	2300      	moveq	r3, #0
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	e015      	b.n	80103ee <HAL_TIM_PWM_Start+0x9e>
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	2b10      	cmp	r3, #16
 80103c6:	d109      	bne.n	80103dc <HAL_TIM_PWM_Start+0x8c>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	bf14      	ite	ne
 80103d4:	2301      	movne	r3, #1
 80103d6:	2300      	moveq	r3, #0
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	e008      	b.n	80103ee <HAL_TIM_PWM_Start+0x9e>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	bf14      	ite	ne
 80103e8:	2301      	movne	r3, #1
 80103ea:	2300      	moveq	r3, #0
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d001      	beq.n	80103f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80103f2:	2301      	movs	r3, #1
 80103f4:	e0ab      	b.n	801054e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d104      	bne.n	8010406 <HAL_TIM_PWM_Start+0xb6>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2202      	movs	r2, #2
 8010400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010404:	e023      	b.n	801044e <HAL_TIM_PWM_Start+0xfe>
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b04      	cmp	r3, #4
 801040a:	d104      	bne.n	8010416 <HAL_TIM_PWM_Start+0xc6>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2202      	movs	r2, #2
 8010410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010414:	e01b      	b.n	801044e <HAL_TIM_PWM_Start+0xfe>
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	2b08      	cmp	r3, #8
 801041a:	d104      	bne.n	8010426 <HAL_TIM_PWM_Start+0xd6>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2202      	movs	r2, #2
 8010420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010424:	e013      	b.n	801044e <HAL_TIM_PWM_Start+0xfe>
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2b0c      	cmp	r3, #12
 801042a:	d104      	bne.n	8010436 <HAL_TIM_PWM_Start+0xe6>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2202      	movs	r2, #2
 8010430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010434:	e00b      	b.n	801044e <HAL_TIM_PWM_Start+0xfe>
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	2b10      	cmp	r3, #16
 801043a:	d104      	bne.n	8010446 <HAL_TIM_PWM_Start+0xf6>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2202      	movs	r2, #2
 8010440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010444:	e003      	b.n	801044e <HAL_TIM_PWM_Start+0xfe>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2202      	movs	r2, #2
 801044a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2201      	movs	r2, #1
 8010454:	6839      	ldr	r1, [r7, #0]
 8010456:	4618      	mov	r0, r3
 8010458:	f001 f992 	bl	8011780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a3d      	ldr	r2, [pc, #244]	; (8010558 <HAL_TIM_PWM_Start+0x208>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d013      	beq.n	801048e <HAL_TIM_PWM_Start+0x13e>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a3c      	ldr	r2, [pc, #240]	; (801055c <HAL_TIM_PWM_Start+0x20c>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d00e      	beq.n	801048e <HAL_TIM_PWM_Start+0x13e>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a3a      	ldr	r2, [pc, #232]	; (8010560 <HAL_TIM_PWM_Start+0x210>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d009      	beq.n	801048e <HAL_TIM_PWM_Start+0x13e>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4a39      	ldr	r2, [pc, #228]	; (8010564 <HAL_TIM_PWM_Start+0x214>)
 8010480:	4293      	cmp	r3, r2
 8010482:	d004      	beq.n	801048e <HAL_TIM_PWM_Start+0x13e>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a37      	ldr	r2, [pc, #220]	; (8010568 <HAL_TIM_PWM_Start+0x218>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d101      	bne.n	8010492 <HAL_TIM_PWM_Start+0x142>
 801048e:	2301      	movs	r3, #1
 8010490:	e000      	b.n	8010494 <HAL_TIM_PWM_Start+0x144>
 8010492:	2300      	movs	r3, #0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d007      	beq.n	80104a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80104a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a2a      	ldr	r2, [pc, #168]	; (8010558 <HAL_TIM_PWM_Start+0x208>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d02c      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104ba:	d027      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a2a      	ldr	r2, [pc, #168]	; (801056c <HAL_TIM_PWM_Start+0x21c>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d022      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4a29      	ldr	r2, [pc, #164]	; (8010570 <HAL_TIM_PWM_Start+0x220>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d01d      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	4a27      	ldr	r2, [pc, #156]	; (8010574 <HAL_TIM_PWM_Start+0x224>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d018      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4a1f      	ldr	r2, [pc, #124]	; (801055c <HAL_TIM_PWM_Start+0x20c>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d013      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a23      	ldr	r2, [pc, #140]	; (8010578 <HAL_TIM_PWM_Start+0x228>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d00e      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4a1b      	ldr	r2, [pc, #108]	; (8010560 <HAL_TIM_PWM_Start+0x210>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d009      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4a1f      	ldr	r2, [pc, #124]	; (801057c <HAL_TIM_PWM_Start+0x22c>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d004      	beq.n	801050c <HAL_TIM_PWM_Start+0x1bc>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	4a1e      	ldr	r2, [pc, #120]	; (8010580 <HAL_TIM_PWM_Start+0x230>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d115      	bne.n	8010538 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	689a      	ldr	r2, [r3, #8]
 8010512:	4b1c      	ldr	r3, [pc, #112]	; (8010584 <HAL_TIM_PWM_Start+0x234>)
 8010514:	4013      	ands	r3, r2
 8010516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2b06      	cmp	r3, #6
 801051c:	d015      	beq.n	801054a <HAL_TIM_PWM_Start+0x1fa>
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010524:	d011      	beq.n	801054a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f042 0201 	orr.w	r2, r2, #1
 8010534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010536:	e008      	b.n	801054a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f042 0201 	orr.w	r2, r2, #1
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	e000      	b.n	801054c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801054a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	40010000 	.word	0x40010000
 801055c:	40010400 	.word	0x40010400
 8010560:	40014000 	.word	0x40014000
 8010564:	40014400 	.word	0x40014400
 8010568:	40014800 	.word	0x40014800
 801056c:	40000400 	.word	0x40000400
 8010570:	40000800 	.word	0x40000800
 8010574:	40000c00 	.word	0x40000c00
 8010578:	40001800 	.word	0x40001800
 801057c:	4000e000 	.word	0x4000e000
 8010580:	4000e400 	.word	0x4000e400
 8010584:	00010007 	.word	0x00010007

08010588 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010596:	2300      	movs	r3, #0
 8010598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d109      	bne.n	80105b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	bf0c      	ite	eq
 80105ac:	2301      	moveq	r3, #1
 80105ae:	2300      	movne	r3, #0
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	e03c      	b.n	801062e <HAL_TIM_PWM_Start_DMA+0xa6>
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	2b04      	cmp	r3, #4
 80105b8:	d109      	bne.n	80105ce <HAL_TIM_PWM_Start_DMA+0x46>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	2b02      	cmp	r3, #2
 80105c4:	bf0c      	ite	eq
 80105c6:	2301      	moveq	r3, #1
 80105c8:	2300      	movne	r3, #0
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	e02f      	b.n	801062e <HAL_TIM_PWM_Start_DMA+0xa6>
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	2b08      	cmp	r3, #8
 80105d2:	d109      	bne.n	80105e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b02      	cmp	r3, #2
 80105de:	bf0c      	ite	eq
 80105e0:	2301      	moveq	r3, #1
 80105e2:	2300      	movne	r3, #0
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	e022      	b.n	801062e <HAL_TIM_PWM_Start_DMA+0xa6>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b0c      	cmp	r3, #12
 80105ec:	d109      	bne.n	8010602 <HAL_TIM_PWM_Start_DMA+0x7a>
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	2b02      	cmp	r3, #2
 80105f8:	bf0c      	ite	eq
 80105fa:	2301      	moveq	r3, #1
 80105fc:	2300      	movne	r3, #0
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	e015      	b.n	801062e <HAL_TIM_PWM_Start_DMA+0xa6>
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	2b10      	cmp	r3, #16
 8010606:	d109      	bne.n	801061c <HAL_TIM_PWM_Start_DMA+0x94>
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801060e:	b2db      	uxtb	r3, r3
 8010610:	2b02      	cmp	r3, #2
 8010612:	bf0c      	ite	eq
 8010614:	2301      	moveq	r3, #1
 8010616:	2300      	movne	r3, #0
 8010618:	b2db      	uxtb	r3, r3
 801061a:	e008      	b.n	801062e <HAL_TIM_PWM_Start_DMA+0xa6>
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b02      	cmp	r3, #2
 8010626:	bf0c      	ite	eq
 8010628:	2301      	moveq	r3, #1
 801062a:	2300      	movne	r3, #0
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8010632:	2302      	movs	r3, #2
 8010634:	e1ba      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d109      	bne.n	8010650 <HAL_TIM_PWM_Start_DMA+0xc8>
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010642:	b2db      	uxtb	r3, r3
 8010644:	2b01      	cmp	r3, #1
 8010646:	bf0c      	ite	eq
 8010648:	2301      	moveq	r3, #1
 801064a:	2300      	movne	r3, #0
 801064c:	b2db      	uxtb	r3, r3
 801064e:	e03c      	b.n	80106ca <HAL_TIM_PWM_Start_DMA+0x142>
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	2b04      	cmp	r3, #4
 8010654:	d109      	bne.n	801066a <HAL_TIM_PWM_Start_DMA+0xe2>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b01      	cmp	r3, #1
 8010660:	bf0c      	ite	eq
 8010662:	2301      	moveq	r3, #1
 8010664:	2300      	movne	r3, #0
 8010666:	b2db      	uxtb	r3, r3
 8010668:	e02f      	b.n	80106ca <HAL_TIM_PWM_Start_DMA+0x142>
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2b08      	cmp	r3, #8
 801066e:	d109      	bne.n	8010684 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b01      	cmp	r3, #1
 801067a:	bf0c      	ite	eq
 801067c:	2301      	moveq	r3, #1
 801067e:	2300      	movne	r3, #0
 8010680:	b2db      	uxtb	r3, r3
 8010682:	e022      	b.n	80106ca <HAL_TIM_PWM_Start_DMA+0x142>
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	2b0c      	cmp	r3, #12
 8010688:	d109      	bne.n	801069e <HAL_TIM_PWM_Start_DMA+0x116>
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010690:	b2db      	uxtb	r3, r3
 8010692:	2b01      	cmp	r3, #1
 8010694:	bf0c      	ite	eq
 8010696:	2301      	moveq	r3, #1
 8010698:	2300      	movne	r3, #0
 801069a:	b2db      	uxtb	r3, r3
 801069c:	e015      	b.n	80106ca <HAL_TIM_PWM_Start_DMA+0x142>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	2b10      	cmp	r3, #16
 80106a2:	d109      	bne.n	80106b8 <HAL_TIM_PWM_Start_DMA+0x130>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	2b01      	cmp	r3, #1
 80106ae:	bf0c      	ite	eq
 80106b0:	2301      	moveq	r3, #1
 80106b2:	2300      	movne	r3, #0
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	e008      	b.n	80106ca <HAL_TIM_PWM_Start_DMA+0x142>
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	bf0c      	ite	eq
 80106c4:	2301      	moveq	r3, #1
 80106c6:	2300      	movne	r3, #0
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d034      	beq.n	8010738 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d002      	beq.n	80106da <HAL_TIM_PWM_Start_DMA+0x152>
 80106d4:	887b      	ldrh	r3, [r7, #2]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d101      	bne.n	80106de <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	e166      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d104      	bne.n	80106ee <HAL_TIM_PWM_Start_DMA+0x166>
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2202      	movs	r2, #2
 80106e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106ec:	e026      	b.n	801073c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	2b04      	cmp	r3, #4
 80106f2:	d104      	bne.n	80106fe <HAL_TIM_PWM_Start_DMA+0x176>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2202      	movs	r2, #2
 80106f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106fc:	e01e      	b.n	801073c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b08      	cmp	r3, #8
 8010702:	d104      	bne.n	801070e <HAL_TIM_PWM_Start_DMA+0x186>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2202      	movs	r2, #2
 8010708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801070c:	e016      	b.n	801073c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b0c      	cmp	r3, #12
 8010712:	d104      	bne.n	801071e <HAL_TIM_PWM_Start_DMA+0x196>
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2202      	movs	r2, #2
 8010718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801071c:	e00e      	b.n	801073c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	2b10      	cmp	r3, #16
 8010722:	d104      	bne.n	801072e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2202      	movs	r2, #2
 8010728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801072c:	e006      	b.n	801073c <HAL_TIM_PWM_Start_DMA+0x1b4>
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2202      	movs	r2, #2
 8010732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010736:	e001      	b.n	801073c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010738:	2301      	movs	r3, #1
 801073a:	e137      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2b0c      	cmp	r3, #12
 8010740:	f200 80ae 	bhi.w	80108a0 <HAL_TIM_PWM_Start_DMA+0x318>
 8010744:	a201      	add	r2, pc, #4	; (adr r2, 801074c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8010746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074a:	bf00      	nop
 801074c:	08010781 	.word	0x08010781
 8010750:	080108a1 	.word	0x080108a1
 8010754:	080108a1 	.word	0x080108a1
 8010758:	080108a1 	.word	0x080108a1
 801075c:	080107c9 	.word	0x080107c9
 8010760:	080108a1 	.word	0x080108a1
 8010764:	080108a1 	.word	0x080108a1
 8010768:	080108a1 	.word	0x080108a1
 801076c:	08010811 	.word	0x08010811
 8010770:	080108a1 	.word	0x080108a1
 8010774:	080108a1 	.word	0x080108a1
 8010778:	080108a1 	.word	0x080108a1
 801077c:	08010859 	.word	0x08010859
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010784:	4a8b      	ldr	r2, [pc, #556]	; (80109b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010786:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078c:	4a8a      	ldr	r2, [pc, #552]	; (80109b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 801078e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010794:	4a89      	ldr	r2, [pc, #548]	; (80109bc <HAL_TIM_PWM_Start_DMA+0x434>)
 8010796:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801079c:	6879      	ldr	r1, [r7, #4]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	3334      	adds	r3, #52	; 0x34
 80107a4:	461a      	mov	r2, r3
 80107a6:	887b      	ldrh	r3, [r7, #2]
 80107a8:	f7f6 f872 	bl	8006890 <HAL_DMA_Start_IT>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d001      	beq.n	80107b6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80107b2:	2301      	movs	r3, #1
 80107b4:	e0fa      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	68da      	ldr	r2, [r3, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107c4:	60da      	str	r2, [r3, #12]
      break;
 80107c6:	e06e      	b.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107cc:	4a79      	ldr	r2, [pc, #484]	; (80109b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80107ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107d4:	4a78      	ldr	r2, [pc, #480]	; (80109b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 80107d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107dc:	4a77      	ldr	r2, [pc, #476]	; (80109bc <HAL_TIM_PWM_Start_DMA+0x434>)
 80107de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80107e4:	6879      	ldr	r1, [r7, #4]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	3338      	adds	r3, #56	; 0x38
 80107ec:	461a      	mov	r2, r3
 80107ee:	887b      	ldrh	r3, [r7, #2]
 80107f0:	f7f6 f84e 	bl	8006890 <HAL_DMA_Start_IT>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	e0d6      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	68da      	ldr	r2, [r3, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801080c:	60da      	str	r2, [r3, #12]
      break;
 801080e:	e04a      	b.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010814:	4a67      	ldr	r2, [pc, #412]	; (80109b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010816:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081c:	4a66      	ldr	r2, [pc, #408]	; (80109b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 801081e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010824:	4a65      	ldr	r2, [pc, #404]	; (80109bc <HAL_TIM_PWM_Start_DMA+0x434>)
 8010826:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801082c:	6879      	ldr	r1, [r7, #4]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	333c      	adds	r3, #60	; 0x3c
 8010834:	461a      	mov	r2, r3
 8010836:	887b      	ldrh	r3, [r7, #2]
 8010838:	f7f6 f82a 	bl	8006890 <HAL_DMA_Start_IT>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	e0b2      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	68da      	ldr	r2, [r3, #12]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010854:	60da      	str	r2, [r3, #12]
      break;
 8010856:	e026      	b.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085c:	4a55      	ldr	r2, [pc, #340]	; (80109b4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801085e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010864:	4a54      	ldr	r2, [pc, #336]	; (80109b8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010866:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086c:	4a53      	ldr	r2, [pc, #332]	; (80109bc <HAL_TIM_PWM_Start_DMA+0x434>)
 801086e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010874:	6879      	ldr	r1, [r7, #4]
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	3340      	adds	r3, #64	; 0x40
 801087c:	461a      	mov	r2, r3
 801087e:	887b      	ldrh	r3, [r7, #2]
 8010880:	f7f6 f806 	bl	8006890 <HAL_DMA_Start_IT>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d001      	beq.n	801088e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801088a:	2301      	movs	r3, #1
 801088c:	e08e      	b.n	80109ac <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	68da      	ldr	r2, [r3, #12]
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801089c:	60da      	str	r2, [r3, #12]
      break;
 801089e:	e002      	b.n	80108a6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80108a0:	2301      	movs	r3, #1
 80108a2:	75fb      	strb	r3, [r7, #23]
      break;
 80108a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80108a6:	7dfb      	ldrb	r3, [r7, #23]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d17e      	bne.n	80109aa <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2201      	movs	r2, #1
 80108b2:	68b9      	ldr	r1, [r7, #8]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 ff63 	bl	8011780 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a40      	ldr	r2, [pc, #256]	; (80109c0 <HAL_TIM_PWM_Start_DMA+0x438>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d013      	beq.n	80108ec <HAL_TIM_PWM_Start_DMA+0x364>
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a3e      	ldr	r2, [pc, #248]	; (80109c4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d00e      	beq.n	80108ec <HAL_TIM_PWM_Start_DMA+0x364>
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4a3d      	ldr	r2, [pc, #244]	; (80109c8 <HAL_TIM_PWM_Start_DMA+0x440>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d009      	beq.n	80108ec <HAL_TIM_PWM_Start_DMA+0x364>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a3b      	ldr	r2, [pc, #236]	; (80109cc <HAL_TIM_PWM_Start_DMA+0x444>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d004      	beq.n	80108ec <HAL_TIM_PWM_Start_DMA+0x364>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a3a      	ldr	r2, [pc, #232]	; (80109d0 <HAL_TIM_PWM_Start_DMA+0x448>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d101      	bne.n	80108f0 <HAL_TIM_PWM_Start_DMA+0x368>
 80108ec:	2301      	movs	r3, #1
 80108ee:	e000      	b.n	80108f2 <HAL_TIM_PWM_Start_DMA+0x36a>
 80108f0:	2300      	movs	r3, #0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d007      	beq.n	8010906 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a2d      	ldr	r2, [pc, #180]	; (80109c0 <HAL_TIM_PWM_Start_DMA+0x438>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d02c      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010918:	d027      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4a2d      	ldr	r2, [pc, #180]	; (80109d4 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010920:	4293      	cmp	r3, r2
 8010922:	d022      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4a2b      	ldr	r2, [pc, #172]	; (80109d8 <HAL_TIM_PWM_Start_DMA+0x450>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d01d      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4a2a      	ldr	r2, [pc, #168]	; (80109dc <HAL_TIM_PWM_Start_DMA+0x454>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d018      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	4a21      	ldr	r2, [pc, #132]	; (80109c4 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d013      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4a26      	ldr	r2, [pc, #152]	; (80109e0 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010948:	4293      	cmp	r3, r2
 801094a:	d00e      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	4a1d      	ldr	r2, [pc, #116]	; (80109c8 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d009      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a22      	ldr	r2, [pc, #136]	; (80109e4 <HAL_TIM_PWM_Start_DMA+0x45c>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d004      	beq.n	801096a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a20      	ldr	r2, [pc, #128]	; (80109e8 <HAL_TIM_PWM_Start_DMA+0x460>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d115      	bne.n	8010996 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	689a      	ldr	r2, [r3, #8]
 8010970:	4b1e      	ldr	r3, [pc, #120]	; (80109ec <HAL_TIM_PWM_Start_DMA+0x464>)
 8010972:	4013      	ands	r3, r2
 8010974:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	2b06      	cmp	r3, #6
 801097a:	d015      	beq.n	80109a8 <HAL_TIM_PWM_Start_DMA+0x420>
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010982:	d011      	beq.n	80109a8 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f042 0201 	orr.w	r2, r2, #1
 8010992:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010994:	e008      	b.n	80109a8 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f042 0201 	orr.w	r2, r2, #1
 80109a4:	601a      	str	r2, [r3, #0]
 80109a6:	e000      	b.n	80109aa <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80109aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	3718      	adds	r7, #24
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	08010f77 	.word	0x08010f77
 80109b8:	0801101f 	.word	0x0801101f
 80109bc:	08010ee5 	.word	0x08010ee5
 80109c0:	40010000 	.word	0x40010000
 80109c4:	40010400 	.word	0x40010400
 80109c8:	40014000 	.word	0x40014000
 80109cc:	40014400 	.word	0x40014400
 80109d0:	40014800 	.word	0x40014800
 80109d4:	40000400 	.word	0x40000400
 80109d8:	40000800 	.word	0x40000800
 80109dc:	40000c00 	.word	0x40000c00
 80109e0:	40001800 	.word	0x40001800
 80109e4:	4000e000 	.word	0x4000e000
 80109e8:	4000e400 	.word	0x4000e400
 80109ec:	00010007 	.word	0x00010007

080109f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	691b      	ldr	r3, [r3, #16]
 80109fe:	f003 0302 	and.w	r3, r3, #2
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	d122      	bne.n	8010a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	f003 0302 	and.w	r3, r3, #2
 8010a10:	2b02      	cmp	r3, #2
 8010a12:	d11b      	bne.n	8010a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f06f 0202 	mvn.w	r2, #2
 8010a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2201      	movs	r2, #1
 8010a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	699b      	ldr	r3, [r3, #24]
 8010a2a:	f003 0303 	and.w	r3, r3, #3
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d003      	beq.n	8010a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 fa24 	bl	8010e80 <HAL_TIM_IC_CaptureCallback>
 8010a38:	e005      	b.n	8010a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa16 	bl	8010e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 fa27 	bl	8010e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	691b      	ldr	r3, [r3, #16]
 8010a52:	f003 0304 	and.w	r3, r3, #4
 8010a56:	2b04      	cmp	r3, #4
 8010a58:	d122      	bne.n	8010aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	f003 0304 	and.w	r3, r3, #4
 8010a64:	2b04      	cmp	r3, #4
 8010a66:	d11b      	bne.n	8010aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f06f 0204 	mvn.w	r2, #4
 8010a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2202      	movs	r2, #2
 8010a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	699b      	ldr	r3, [r3, #24]
 8010a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d003      	beq.n	8010a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 f9fa 	bl	8010e80 <HAL_TIM_IC_CaptureCallback>
 8010a8c:	e005      	b.n	8010a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 f9ec 	bl	8010e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f9fd 	bl	8010e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	f003 0308 	and.w	r3, r3, #8
 8010aaa:	2b08      	cmp	r3, #8
 8010aac:	d122      	bne.n	8010af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	f003 0308 	and.w	r3, r3, #8
 8010ab8:	2b08      	cmp	r3, #8
 8010aba:	d11b      	bne.n	8010af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f06f 0208 	mvn.w	r2, #8
 8010ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2204      	movs	r2, #4
 8010aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	69db      	ldr	r3, [r3, #28]
 8010ad2:	f003 0303 	and.w	r3, r3, #3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d003      	beq.n	8010ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 f9d0 	bl	8010e80 <HAL_TIM_IC_CaptureCallback>
 8010ae0:	e005      	b.n	8010aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f9c2 	bl	8010e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f9d3 	bl	8010e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	f003 0310 	and.w	r3, r3, #16
 8010afe:	2b10      	cmp	r3, #16
 8010b00:	d122      	bne.n	8010b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	f003 0310 	and.w	r3, r3, #16
 8010b0c:	2b10      	cmp	r3, #16
 8010b0e:	d11b      	bne.n	8010b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f06f 0210 	mvn.w	r2, #16
 8010b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2208      	movs	r2, #8
 8010b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	69db      	ldr	r3, [r3, #28]
 8010b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d003      	beq.n	8010b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 f9a6 	bl	8010e80 <HAL_TIM_IC_CaptureCallback>
 8010b34:	e005      	b.n	8010b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f998 	bl	8010e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f000 f9a9 	bl	8010e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2200      	movs	r2, #0
 8010b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	691b      	ldr	r3, [r3, #16]
 8010b4e:	f003 0301 	and.w	r3, r3, #1
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d10e      	bne.n	8010b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d107      	bne.n	8010b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f06f 0201 	mvn.w	r2, #1
 8010b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 f972 	bl	8010e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	691b      	ldr	r3, [r3, #16]
 8010b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b7e:	2b80      	cmp	r3, #128	; 0x80
 8010b80:	d10e      	bne.n	8010ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b8c:	2b80      	cmp	r3, #128	; 0x80
 8010b8e:	d107      	bne.n	8010ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 febc 	bl	8011918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bae:	d10e      	bne.n	8010bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bba:	2b80      	cmp	r3, #128	; 0x80
 8010bbc:	d107      	bne.n	8010bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 feaf 	bl	801192c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd8:	2b40      	cmp	r3, #64	; 0x40
 8010bda:	d10e      	bne.n	8010bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010be6:	2b40      	cmp	r3, #64	; 0x40
 8010be8:	d107      	bne.n	8010bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 f961 	bl	8010ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	f003 0320 	and.w	r3, r3, #32
 8010c04:	2b20      	cmp	r3, #32
 8010c06:	d10e      	bne.n	8010c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	f003 0320 	and.w	r3, r3, #32
 8010c12:	2b20      	cmp	r3, #32
 8010c14:	d107      	bne.n	8010c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f06f 0220 	mvn.w	r2, #32
 8010c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 fe6f 	bl	8011904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010c26:	bf00      	nop
 8010c28:	3708      	adds	r7, #8
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
	...

08010c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d101      	bne.n	8010c4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010c4a:	2302      	movs	r3, #2
 8010c4c:	e0ff      	b.n	8010e4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2201      	movs	r2, #1
 8010c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2b14      	cmp	r3, #20
 8010c5a:	f200 80f0 	bhi.w	8010e3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010c5e:	a201      	add	r2, pc, #4	; (adr r2, 8010c64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c64:	08010cb9 	.word	0x08010cb9
 8010c68:	08010e3f 	.word	0x08010e3f
 8010c6c:	08010e3f 	.word	0x08010e3f
 8010c70:	08010e3f 	.word	0x08010e3f
 8010c74:	08010cf9 	.word	0x08010cf9
 8010c78:	08010e3f 	.word	0x08010e3f
 8010c7c:	08010e3f 	.word	0x08010e3f
 8010c80:	08010e3f 	.word	0x08010e3f
 8010c84:	08010d3b 	.word	0x08010d3b
 8010c88:	08010e3f 	.word	0x08010e3f
 8010c8c:	08010e3f 	.word	0x08010e3f
 8010c90:	08010e3f 	.word	0x08010e3f
 8010c94:	08010d7b 	.word	0x08010d7b
 8010c98:	08010e3f 	.word	0x08010e3f
 8010c9c:	08010e3f 	.word	0x08010e3f
 8010ca0:	08010e3f 	.word	0x08010e3f
 8010ca4:	08010dbd 	.word	0x08010dbd
 8010ca8:	08010e3f 	.word	0x08010e3f
 8010cac:	08010e3f 	.word	0x08010e3f
 8010cb0:	08010e3f 	.word	0x08010e3f
 8010cb4:	08010dfd 	.word	0x08010dfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	68b9      	ldr	r1, [r7, #8]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f000 fa88 	bl	80111d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	699a      	ldr	r2, [r3, #24]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f042 0208 	orr.w	r2, r2, #8
 8010cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	699a      	ldr	r2, [r3, #24]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f022 0204 	bic.w	r2, r2, #4
 8010ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	6999      	ldr	r1, [r3, #24]
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	691a      	ldr	r2, [r3, #16]
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	430a      	orrs	r2, r1
 8010cf4:	619a      	str	r2, [r3, #24]
      break;
 8010cf6:	e0a5      	b.n	8010e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	68b9      	ldr	r1, [r7, #8]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f000 faf8 	bl	80112f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	699a      	ldr	r2, [r3, #24]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	699a      	ldr	r2, [r3, #24]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	6999      	ldr	r1, [r3, #24]
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	691b      	ldr	r3, [r3, #16]
 8010d2e:	021a      	lsls	r2, r3, #8
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	430a      	orrs	r2, r1
 8010d36:	619a      	str	r2, [r3, #24]
      break;
 8010d38:	e084      	b.n	8010e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	68b9      	ldr	r1, [r7, #8]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f000 fb61 	bl	8011408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	69da      	ldr	r2, [r3, #28]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f042 0208 	orr.w	r2, r2, #8
 8010d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	69da      	ldr	r2, [r3, #28]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f022 0204 	bic.w	r2, r2, #4
 8010d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	69d9      	ldr	r1, [r3, #28]
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	691a      	ldr	r2, [r3, #16]
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	430a      	orrs	r2, r1
 8010d76:	61da      	str	r2, [r3, #28]
      break;
 8010d78:	e064      	b.n	8010e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68b9      	ldr	r1, [r7, #8]
 8010d80:	4618      	mov	r0, r3
 8010d82:	f000 fbc9 	bl	8011518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	69da      	ldr	r2, [r3, #28]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	69da      	ldr	r2, [r3, #28]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	69d9      	ldr	r1, [r3, #28]
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	021a      	lsls	r2, r3, #8
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	430a      	orrs	r2, r1
 8010db8:	61da      	str	r2, [r3, #28]
      break;
 8010dba:	e043      	b.n	8010e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68b9      	ldr	r1, [r7, #8]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 fc12 	bl	80115ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f042 0208 	orr.w	r2, r2, #8
 8010dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f022 0204 	bic.w	r2, r2, #4
 8010de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	691a      	ldr	r2, [r3, #16]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	430a      	orrs	r2, r1
 8010df8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010dfa:	e023      	b.n	8010e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	68b9      	ldr	r1, [r7, #8]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f000 fc56 	bl	80116b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	021a      	lsls	r2, r3, #8
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	430a      	orrs	r2, r1
 8010e3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e3c:	e002      	b.n	8010e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	75fb      	strb	r3, [r7, #23]
      break;
 8010e42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2200      	movs	r2, #0
 8010e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3718      	adds	r7, #24
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop

08010e58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010e60:	bf00      	nop
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010e74:	bf00      	nop
 8010e76:	370c      	adds	r7, #12
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010e80:	b480      	push	{r7}
 8010e82:	b083      	sub	sp, #12
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e88:	bf00      	nop
 8010e8a:	370c      	adds	r7, #12
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010e9c:	bf00      	nop
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010eb0:	bf00      	nop
 8010eb2:	370c      	adds	r7, #12
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010ed8:	bf00      	nop
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b084      	sub	sp, #16
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d107      	bne.n	8010f0c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2201      	movs	r2, #1
 8010f00:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2201      	movs	r2, #1
 8010f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f0a:	e02a      	b.n	8010f62 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d107      	bne.n	8010f26 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2202      	movs	r2, #2
 8010f1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f24:	e01d      	b.n	8010f62 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d107      	bne.n	8010f40 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2204      	movs	r2, #4
 8010f34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f3e:	e010      	b.n	8010f62 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d107      	bne.n	8010f5a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2208      	movs	r2, #8
 8010f4e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2201      	movs	r2, #1
 8010f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010f58:	e003      	b.n	8010f62 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010f62:	68f8      	ldr	r0, [r7, #12]
 8010f64:	f7ff ffb4 	bl	8010ed0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	771a      	strb	r2, [r3, #28]
}
 8010f6e:	bf00      	nop
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b084      	sub	sp, #16
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f82:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d10b      	bne.n	8010fa6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2201      	movs	r2, #1
 8010f92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	69db      	ldr	r3, [r3, #28]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d136      	bne.n	801100a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010fa4:	e031      	b.n	801100a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d10b      	bne.n	8010fc8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2202      	movs	r2, #2
 8010fb4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	69db      	ldr	r3, [r3, #28]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d125      	bne.n	801100a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010fc6:	e020      	b.n	801100a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fcc:	687a      	ldr	r2, [r7, #4]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d10b      	bne.n	8010fea <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2204      	movs	r2, #4
 8010fd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	69db      	ldr	r3, [r3, #28]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d114      	bne.n	801100a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	2201      	movs	r2, #1
 8010fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010fe8:	e00f      	b.n	801100a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d10a      	bne.n	801100a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2208      	movs	r2, #8
 8010ff8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	69db      	ldr	r3, [r3, #28]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d103      	bne.n	801100a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2201      	movs	r2, #1
 8011006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	f7ff ff42 	bl	8010e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2200      	movs	r2, #0
 8011014:	771a      	strb	r2, [r3, #28]
}
 8011016:	bf00      	nop
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801101e:	b580      	push	{r7, lr}
 8011020:	b084      	sub	sp, #16
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	429a      	cmp	r2, r3
 8011034:	d103      	bne.n	801103e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2201      	movs	r2, #1
 801103a:	771a      	strb	r2, [r3, #28]
 801103c:	e019      	b.n	8011072 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	429a      	cmp	r2, r3
 8011046:	d103      	bne.n	8011050 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2202      	movs	r2, #2
 801104c:	771a      	strb	r2, [r3, #28]
 801104e:	e010      	b.n	8011072 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	429a      	cmp	r2, r3
 8011058:	d103      	bne.n	8011062 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2204      	movs	r2, #4
 801105e:	771a      	strb	r2, [r3, #28]
 8011060:	e007      	b.n	8011072 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011066:	687a      	ldr	r2, [r7, #4]
 8011068:	429a      	cmp	r2, r3
 801106a:	d102      	bne.n	8011072 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2208      	movs	r2, #8
 8011070:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8011072:	68f8      	ldr	r0, [r7, #12]
 8011074:	f7ff ff18 	bl	8010ea8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2200      	movs	r2, #0
 801107c:	771a      	strb	r2, [r3, #28]
}
 801107e:	bf00      	nop
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
	...

08011088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	4a44      	ldr	r2, [pc, #272]	; (80111ac <TIM_Base_SetConfig+0x124>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d013      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110a6:	d00f      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	4a41      	ldr	r2, [pc, #260]	; (80111b0 <TIM_Base_SetConfig+0x128>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d00b      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a40      	ldr	r2, [pc, #256]	; (80111b4 <TIM_Base_SetConfig+0x12c>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d007      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4a3f      	ldr	r2, [pc, #252]	; (80111b8 <TIM_Base_SetConfig+0x130>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d003      	beq.n	80110c8 <TIM_Base_SetConfig+0x40>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4a3e      	ldr	r2, [pc, #248]	; (80111bc <TIM_Base_SetConfig+0x134>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d108      	bne.n	80110da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	4313      	orrs	r3, r2
 80110d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	4a33      	ldr	r2, [pc, #204]	; (80111ac <TIM_Base_SetConfig+0x124>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d027      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110e8:	d023      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4a30      	ldr	r2, [pc, #192]	; (80111b0 <TIM_Base_SetConfig+0x128>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d01f      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4a2f      	ldr	r2, [pc, #188]	; (80111b4 <TIM_Base_SetConfig+0x12c>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d01b      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a2e      	ldr	r2, [pc, #184]	; (80111b8 <TIM_Base_SetConfig+0x130>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d017      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4a2d      	ldr	r2, [pc, #180]	; (80111bc <TIM_Base_SetConfig+0x134>)
 8011106:	4293      	cmp	r3, r2
 8011108:	d013      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4a2c      	ldr	r2, [pc, #176]	; (80111c0 <TIM_Base_SetConfig+0x138>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d00f      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	4a2b      	ldr	r2, [pc, #172]	; (80111c4 <TIM_Base_SetConfig+0x13c>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d00b      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4a2a      	ldr	r2, [pc, #168]	; (80111c8 <TIM_Base_SetConfig+0x140>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d007      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4a29      	ldr	r2, [pc, #164]	; (80111cc <TIM_Base_SetConfig+0x144>)
 8011126:	4293      	cmp	r3, r2
 8011128:	d003      	beq.n	8011132 <TIM_Base_SetConfig+0xaa>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4a28      	ldr	r2, [pc, #160]	; (80111d0 <TIM_Base_SetConfig+0x148>)
 801112e:	4293      	cmp	r3, r2
 8011130:	d108      	bne.n	8011144 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	4313      	orrs	r3, r2
 8011142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	695b      	ldr	r3, [r3, #20]
 801114e:	4313      	orrs	r3, r2
 8011150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	689a      	ldr	r2, [r3, #8]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a10      	ldr	r2, [pc, #64]	; (80111ac <TIM_Base_SetConfig+0x124>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d00f      	beq.n	8011190 <TIM_Base_SetConfig+0x108>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4a12      	ldr	r2, [pc, #72]	; (80111bc <TIM_Base_SetConfig+0x134>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d00b      	beq.n	8011190 <TIM_Base_SetConfig+0x108>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4a11      	ldr	r2, [pc, #68]	; (80111c0 <TIM_Base_SetConfig+0x138>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d007      	beq.n	8011190 <TIM_Base_SetConfig+0x108>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4a10      	ldr	r2, [pc, #64]	; (80111c4 <TIM_Base_SetConfig+0x13c>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d003      	beq.n	8011190 <TIM_Base_SetConfig+0x108>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4a0f      	ldr	r2, [pc, #60]	; (80111c8 <TIM_Base_SetConfig+0x140>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d103      	bne.n	8011198 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	691a      	ldr	r2, [r3, #16]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2201      	movs	r2, #1
 801119c:	615a      	str	r2, [r3, #20]
}
 801119e:	bf00      	nop
 80111a0:	3714      	adds	r7, #20
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	40010000 	.word	0x40010000
 80111b0:	40000400 	.word	0x40000400
 80111b4:	40000800 	.word	0x40000800
 80111b8:	40000c00 	.word	0x40000c00
 80111bc:	40010400 	.word	0x40010400
 80111c0:	40014000 	.word	0x40014000
 80111c4:	40014400 	.word	0x40014400
 80111c8:	40014800 	.word	0x40014800
 80111cc:	4000e000 	.word	0x4000e000
 80111d0:	4000e400 	.word	0x4000e400

080111d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b087      	sub	sp, #28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6a1b      	ldr	r3, [r3, #32]
 80111e2:	f023 0201 	bic.w	r2, r3, #1
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6a1b      	ldr	r3, [r3, #32]
 80111ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	4b37      	ldr	r3, [pc, #220]	; (80112dc <TIM_OC1_SetConfig+0x108>)
 8011200:	4013      	ands	r3, r2
 8011202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f023 0303 	bic.w	r3, r3, #3
 801120a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	4313      	orrs	r3, r2
 8011214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	f023 0302 	bic.w	r3, r3, #2
 801121c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	4313      	orrs	r3, r2
 8011226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	4a2d      	ldr	r2, [pc, #180]	; (80112e0 <TIM_OC1_SetConfig+0x10c>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d00f      	beq.n	8011250 <TIM_OC1_SetConfig+0x7c>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4a2c      	ldr	r2, [pc, #176]	; (80112e4 <TIM_OC1_SetConfig+0x110>)
 8011234:	4293      	cmp	r3, r2
 8011236:	d00b      	beq.n	8011250 <TIM_OC1_SetConfig+0x7c>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	4a2b      	ldr	r2, [pc, #172]	; (80112e8 <TIM_OC1_SetConfig+0x114>)
 801123c:	4293      	cmp	r3, r2
 801123e:	d007      	beq.n	8011250 <TIM_OC1_SetConfig+0x7c>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	4a2a      	ldr	r2, [pc, #168]	; (80112ec <TIM_OC1_SetConfig+0x118>)
 8011244:	4293      	cmp	r3, r2
 8011246:	d003      	beq.n	8011250 <TIM_OC1_SetConfig+0x7c>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	4a29      	ldr	r2, [pc, #164]	; (80112f0 <TIM_OC1_SetConfig+0x11c>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d10c      	bne.n	801126a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	f023 0308 	bic.w	r3, r3, #8
 8011256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	4313      	orrs	r3, r2
 8011260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	f023 0304 	bic.w	r3, r3, #4
 8011268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4a1c      	ldr	r2, [pc, #112]	; (80112e0 <TIM_OC1_SetConfig+0x10c>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d00f      	beq.n	8011292 <TIM_OC1_SetConfig+0xbe>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4a1b      	ldr	r2, [pc, #108]	; (80112e4 <TIM_OC1_SetConfig+0x110>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d00b      	beq.n	8011292 <TIM_OC1_SetConfig+0xbe>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4a1a      	ldr	r2, [pc, #104]	; (80112e8 <TIM_OC1_SetConfig+0x114>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d007      	beq.n	8011292 <TIM_OC1_SetConfig+0xbe>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4a19      	ldr	r2, [pc, #100]	; (80112ec <TIM_OC1_SetConfig+0x118>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d003      	beq.n	8011292 <TIM_OC1_SetConfig+0xbe>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	4a18      	ldr	r2, [pc, #96]	; (80112f0 <TIM_OC1_SetConfig+0x11c>)
 801128e:	4293      	cmp	r3, r2
 8011290:	d111      	bne.n	80112b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80112a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	695b      	ldr	r3, [r3, #20]
 80112a6:	693a      	ldr	r2, [r7, #16]
 80112a8:	4313      	orrs	r3, r2
 80112aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	699b      	ldr	r3, [r3, #24]
 80112b0:	693a      	ldr	r2, [r7, #16]
 80112b2:	4313      	orrs	r3, r2
 80112b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	693a      	ldr	r2, [r7, #16]
 80112ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	68fa      	ldr	r2, [r7, #12]
 80112c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	697a      	ldr	r2, [r7, #20]
 80112ce:	621a      	str	r2, [r3, #32]
}
 80112d0:	bf00      	nop
 80112d2:	371c      	adds	r7, #28
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr
 80112dc:	fffeff8f 	.word	0xfffeff8f
 80112e0:	40010000 	.word	0x40010000
 80112e4:	40010400 	.word	0x40010400
 80112e8:	40014000 	.word	0x40014000
 80112ec:	40014400 	.word	0x40014400
 80112f0:	40014800 	.word	0x40014800

080112f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	f023 0210 	bic.w	r2, r3, #16
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6a1b      	ldr	r3, [r3, #32]
 801130e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801131c:	68fa      	ldr	r2, [r7, #12]
 801131e:	4b34      	ldr	r3, [pc, #208]	; (80113f0 <TIM_OC2_SetConfig+0xfc>)
 8011320:	4013      	ands	r3, r2
 8011322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801132a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	021b      	lsls	r3, r3, #8
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	4313      	orrs	r3, r2
 8011336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	f023 0320 	bic.w	r3, r3, #32
 801133e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	011b      	lsls	r3, r3, #4
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	4313      	orrs	r3, r2
 801134a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4a29      	ldr	r2, [pc, #164]	; (80113f4 <TIM_OC2_SetConfig+0x100>)
 8011350:	4293      	cmp	r3, r2
 8011352:	d003      	beq.n	801135c <TIM_OC2_SetConfig+0x68>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	4a28      	ldr	r2, [pc, #160]	; (80113f8 <TIM_OC2_SetConfig+0x104>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d10d      	bne.n	8011378 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	011b      	lsls	r3, r3, #4
 801136a:	697a      	ldr	r2, [r7, #20]
 801136c:	4313      	orrs	r3, r2
 801136e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	4a1e      	ldr	r2, [pc, #120]	; (80113f4 <TIM_OC2_SetConfig+0x100>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d00f      	beq.n	80113a0 <TIM_OC2_SetConfig+0xac>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4a1d      	ldr	r2, [pc, #116]	; (80113f8 <TIM_OC2_SetConfig+0x104>)
 8011384:	4293      	cmp	r3, r2
 8011386:	d00b      	beq.n	80113a0 <TIM_OC2_SetConfig+0xac>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4a1c      	ldr	r2, [pc, #112]	; (80113fc <TIM_OC2_SetConfig+0x108>)
 801138c:	4293      	cmp	r3, r2
 801138e:	d007      	beq.n	80113a0 <TIM_OC2_SetConfig+0xac>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4a1b      	ldr	r2, [pc, #108]	; (8011400 <TIM_OC2_SetConfig+0x10c>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d003      	beq.n	80113a0 <TIM_OC2_SetConfig+0xac>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a1a      	ldr	r2, [pc, #104]	; (8011404 <TIM_OC2_SetConfig+0x110>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d113      	bne.n	80113c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80113a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80113ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	695b      	ldr	r3, [r3, #20]
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	693a      	ldr	r2, [r7, #16]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	699b      	ldr	r3, [r3, #24]
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	693a      	ldr	r2, [r7, #16]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	693a      	ldr	r2, [r7, #16]
 80113cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	685a      	ldr	r2, [r3, #4]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	697a      	ldr	r2, [r7, #20]
 80113e0:	621a      	str	r2, [r3, #32]
}
 80113e2:	bf00      	nop
 80113e4:	371c      	adds	r7, #28
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	feff8fff 	.word	0xfeff8fff
 80113f4:	40010000 	.word	0x40010000
 80113f8:	40010400 	.word	0x40010400
 80113fc:	40014000 	.word	0x40014000
 8011400:	40014400 	.word	0x40014400
 8011404:	40014800 	.word	0x40014800

08011408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011408:	b480      	push	{r7}
 801140a:	b087      	sub	sp, #28
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6a1b      	ldr	r3, [r3, #32]
 8011416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6a1b      	ldr	r3, [r3, #32]
 8011422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	69db      	ldr	r3, [r3, #28]
 801142e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	4b33      	ldr	r3, [pc, #204]	; (8011500 <TIM_OC3_SetConfig+0xf8>)
 8011434:	4013      	ands	r3, r2
 8011436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f023 0303 	bic.w	r3, r3, #3
 801143e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	4313      	orrs	r3, r2
 8011448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	021b      	lsls	r3, r3, #8
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	4313      	orrs	r3, r2
 801145c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4a28      	ldr	r2, [pc, #160]	; (8011504 <TIM_OC3_SetConfig+0xfc>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d003      	beq.n	801146e <TIM_OC3_SetConfig+0x66>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4a27      	ldr	r2, [pc, #156]	; (8011508 <TIM_OC3_SetConfig+0x100>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d10d      	bne.n	801148a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	021b      	lsls	r3, r3, #8
 801147c:	697a      	ldr	r2, [r7, #20]
 801147e:	4313      	orrs	r3, r2
 8011480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4a1d      	ldr	r2, [pc, #116]	; (8011504 <TIM_OC3_SetConfig+0xfc>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d00f      	beq.n	80114b2 <TIM_OC3_SetConfig+0xaa>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	4a1c      	ldr	r2, [pc, #112]	; (8011508 <TIM_OC3_SetConfig+0x100>)
 8011496:	4293      	cmp	r3, r2
 8011498:	d00b      	beq.n	80114b2 <TIM_OC3_SetConfig+0xaa>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4a1b      	ldr	r2, [pc, #108]	; (801150c <TIM_OC3_SetConfig+0x104>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d007      	beq.n	80114b2 <TIM_OC3_SetConfig+0xaa>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4a1a      	ldr	r2, [pc, #104]	; (8011510 <TIM_OC3_SetConfig+0x108>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d003      	beq.n	80114b2 <TIM_OC3_SetConfig+0xaa>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4a19      	ldr	r2, [pc, #100]	; (8011514 <TIM_OC3_SetConfig+0x10c>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d113      	bne.n	80114da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80114b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80114c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	695b      	ldr	r3, [r3, #20]
 80114c6:	011b      	lsls	r3, r3, #4
 80114c8:	693a      	ldr	r2, [r7, #16]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	699b      	ldr	r3, [r3, #24]
 80114d2:	011b      	lsls	r3, r3, #4
 80114d4:	693a      	ldr	r2, [r7, #16]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	693a      	ldr	r2, [r7, #16]
 80114de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	685a      	ldr	r2, [r3, #4]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	697a      	ldr	r2, [r7, #20]
 80114f2:	621a      	str	r2, [r3, #32]
}
 80114f4:	bf00      	nop
 80114f6:	371c      	adds	r7, #28
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	fffeff8f 	.word	0xfffeff8f
 8011504:	40010000 	.word	0x40010000
 8011508:	40010400 	.word	0x40010400
 801150c:	40014000 	.word	0x40014000
 8011510:	40014400 	.word	0x40014400
 8011514:	40014800 	.word	0x40014800

08011518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011518:	b480      	push	{r7}
 801151a:	b087      	sub	sp, #28
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a1b      	ldr	r3, [r3, #32]
 8011526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6a1b      	ldr	r3, [r3, #32]
 8011532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	69db      	ldr	r3, [r3, #28]
 801153e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011540:	68fa      	ldr	r2, [r7, #12]
 8011542:	4b24      	ldr	r3, [pc, #144]	; (80115d4 <TIM_OC4_SetConfig+0xbc>)
 8011544:	4013      	ands	r3, r2
 8011546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801154e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	021b      	lsls	r3, r3, #8
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	4313      	orrs	r3, r2
 801155a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	031b      	lsls	r3, r3, #12
 801156a:	693a      	ldr	r2, [r7, #16]
 801156c:	4313      	orrs	r3, r2
 801156e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	4a19      	ldr	r2, [pc, #100]	; (80115d8 <TIM_OC4_SetConfig+0xc0>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d00f      	beq.n	8011598 <TIM_OC4_SetConfig+0x80>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	4a18      	ldr	r2, [pc, #96]	; (80115dc <TIM_OC4_SetConfig+0xc4>)
 801157c:	4293      	cmp	r3, r2
 801157e:	d00b      	beq.n	8011598 <TIM_OC4_SetConfig+0x80>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	4a17      	ldr	r2, [pc, #92]	; (80115e0 <TIM_OC4_SetConfig+0xc8>)
 8011584:	4293      	cmp	r3, r2
 8011586:	d007      	beq.n	8011598 <TIM_OC4_SetConfig+0x80>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	4a16      	ldr	r2, [pc, #88]	; (80115e4 <TIM_OC4_SetConfig+0xcc>)
 801158c:	4293      	cmp	r3, r2
 801158e:	d003      	beq.n	8011598 <TIM_OC4_SetConfig+0x80>
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	4a15      	ldr	r2, [pc, #84]	; (80115e8 <TIM_OC4_SetConfig+0xd0>)
 8011594:	4293      	cmp	r3, r2
 8011596:	d109      	bne.n	80115ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801159e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	695b      	ldr	r3, [r3, #20]
 80115a4:	019b      	lsls	r3, r3, #6
 80115a6:	697a      	ldr	r2, [r7, #20]
 80115a8:	4313      	orrs	r3, r2
 80115aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	697a      	ldr	r2, [r7, #20]
 80115b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	68fa      	ldr	r2, [r7, #12]
 80115b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	685a      	ldr	r2, [r3, #4]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	693a      	ldr	r2, [r7, #16]
 80115c4:	621a      	str	r2, [r3, #32]
}
 80115c6:	bf00      	nop
 80115c8:	371c      	adds	r7, #28
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr
 80115d2:	bf00      	nop
 80115d4:	feff8fff 	.word	0xfeff8fff
 80115d8:	40010000 	.word	0x40010000
 80115dc:	40010400 	.word	0x40010400
 80115e0:	40014000 	.word	0x40014000
 80115e4:	40014400 	.word	0x40014400
 80115e8:	40014800 	.word	0x40014800

080115ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b087      	sub	sp, #28
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	4b21      	ldr	r3, [pc, #132]	; (801169c <TIM_OC5_SetConfig+0xb0>)
 8011618:	4013      	ands	r3, r2
 801161a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	4313      	orrs	r3, r2
 8011624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801162c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	041b      	lsls	r3, r3, #16
 8011634:	693a      	ldr	r2, [r7, #16]
 8011636:	4313      	orrs	r3, r2
 8011638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	4a18      	ldr	r2, [pc, #96]	; (80116a0 <TIM_OC5_SetConfig+0xb4>)
 801163e:	4293      	cmp	r3, r2
 8011640:	d00f      	beq.n	8011662 <TIM_OC5_SetConfig+0x76>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	4a17      	ldr	r2, [pc, #92]	; (80116a4 <TIM_OC5_SetConfig+0xb8>)
 8011646:	4293      	cmp	r3, r2
 8011648:	d00b      	beq.n	8011662 <TIM_OC5_SetConfig+0x76>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4a16      	ldr	r2, [pc, #88]	; (80116a8 <TIM_OC5_SetConfig+0xbc>)
 801164e:	4293      	cmp	r3, r2
 8011650:	d007      	beq.n	8011662 <TIM_OC5_SetConfig+0x76>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4a15      	ldr	r2, [pc, #84]	; (80116ac <TIM_OC5_SetConfig+0xc0>)
 8011656:	4293      	cmp	r3, r2
 8011658:	d003      	beq.n	8011662 <TIM_OC5_SetConfig+0x76>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	4a14      	ldr	r2, [pc, #80]	; (80116b0 <TIM_OC5_SetConfig+0xc4>)
 801165e:	4293      	cmp	r3, r2
 8011660:	d109      	bne.n	8011676 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011668:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	695b      	ldr	r3, [r3, #20]
 801166e:	021b      	lsls	r3, r3, #8
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	4313      	orrs	r3, r2
 8011674:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	68fa      	ldr	r2, [r7, #12]
 8011680:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	693a      	ldr	r2, [r7, #16]
 801168e:	621a      	str	r2, [r3, #32]
}
 8011690:	bf00      	nop
 8011692:	371c      	adds	r7, #28
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	fffeff8f 	.word	0xfffeff8f
 80116a0:	40010000 	.word	0x40010000
 80116a4:	40010400 	.word	0x40010400
 80116a8:	40014000 	.word	0x40014000
 80116ac:	40014400 	.word	0x40014400
 80116b0:	40014800 	.word	0x40014800

080116b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a1b      	ldr	r3, [r3, #32]
 80116c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	4b22      	ldr	r3, [pc, #136]	; (8011768 <TIM_OC6_SetConfig+0xb4>)
 80116e0:	4013      	ands	r3, r2
 80116e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	021b      	lsls	r3, r3, #8
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	4313      	orrs	r3, r2
 80116ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80116f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	051b      	lsls	r3, r3, #20
 80116fe:	693a      	ldr	r2, [r7, #16]
 8011700:	4313      	orrs	r3, r2
 8011702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	4a19      	ldr	r2, [pc, #100]	; (801176c <TIM_OC6_SetConfig+0xb8>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d00f      	beq.n	801172c <TIM_OC6_SetConfig+0x78>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4a18      	ldr	r2, [pc, #96]	; (8011770 <TIM_OC6_SetConfig+0xbc>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d00b      	beq.n	801172c <TIM_OC6_SetConfig+0x78>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	4a17      	ldr	r2, [pc, #92]	; (8011774 <TIM_OC6_SetConfig+0xc0>)
 8011718:	4293      	cmp	r3, r2
 801171a:	d007      	beq.n	801172c <TIM_OC6_SetConfig+0x78>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4a16      	ldr	r2, [pc, #88]	; (8011778 <TIM_OC6_SetConfig+0xc4>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d003      	beq.n	801172c <TIM_OC6_SetConfig+0x78>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4a15      	ldr	r2, [pc, #84]	; (801177c <TIM_OC6_SetConfig+0xc8>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d109      	bne.n	8011740 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	695b      	ldr	r3, [r3, #20]
 8011738:	029b      	lsls	r3, r3, #10
 801173a:	697a      	ldr	r2, [r7, #20]
 801173c:	4313      	orrs	r3, r2
 801173e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	697a      	ldr	r2, [r7, #20]
 8011744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	685a      	ldr	r2, [r3, #4]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	693a      	ldr	r2, [r7, #16]
 8011758:	621a      	str	r2, [r3, #32]
}
 801175a:	bf00      	nop
 801175c:	371c      	adds	r7, #28
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	feff8fff 	.word	0xfeff8fff
 801176c:	40010000 	.word	0x40010000
 8011770:	40010400 	.word	0x40010400
 8011774:	40014000 	.word	0x40014000
 8011778:	40014400 	.word	0x40014400
 801177c:	40014800 	.word	0x40014800

08011780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011780:	b480      	push	{r7}
 8011782:	b087      	sub	sp, #28
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	f003 031f 	and.w	r3, r3, #31
 8011792:	2201      	movs	r2, #1
 8011794:	fa02 f303 	lsl.w	r3, r2, r3
 8011798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	6a1a      	ldr	r2, [r3, #32]
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	43db      	mvns	r3, r3
 80117a2:	401a      	ands	r2, r3
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6a1a      	ldr	r2, [r3, #32]
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	f003 031f 	and.w	r3, r3, #31
 80117b2:	6879      	ldr	r1, [r7, #4]
 80117b4:	fa01 f303 	lsl.w	r3, r1, r3
 80117b8:	431a      	orrs	r2, r3
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	621a      	str	r2, [r3, #32]
}
 80117be:	bf00      	nop
 80117c0:	371c      	adds	r7, #28
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
	...

080117cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b085      	sub	sp, #20
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d101      	bne.n	80117e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80117e0:	2302      	movs	r3, #2
 80117e2:	e077      	b.n	80118d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2202      	movs	r2, #2
 80117f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	689b      	ldr	r3, [r3, #8]
 8011802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a35      	ldr	r2, [pc, #212]	; (80118e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d004      	beq.n	8011818 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	4a34      	ldr	r2, [pc, #208]	; (80118e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d108      	bne.n	801182a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801181e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	4313      	orrs	r3, r2
 8011828:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011830:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	4313      	orrs	r3, r2
 801183a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	4a25      	ldr	r2, [pc, #148]	; (80118e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d02c      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011856:	d027      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a22      	ldr	r2, [pc, #136]	; (80118e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d022      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4a21      	ldr	r2, [pc, #132]	; (80118ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d01d      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4a1f      	ldr	r2, [pc, #124]	; (80118f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d018      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4a1a      	ldr	r2, [pc, #104]	; (80118e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d013      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a1b      	ldr	r2, [pc, #108]	; (80118f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d00e      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4a1a      	ldr	r2, [pc, #104]	; (80118f8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d009      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a18      	ldr	r2, [pc, #96]	; (80118fc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d004      	beq.n	80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	4a17      	ldr	r2, [pc, #92]	; (8011900 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d10c      	bne.n	80118c2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	68ba      	ldr	r2, [r7, #8]
 80118c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2201      	movs	r2, #1
 80118c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2200      	movs	r2, #0
 80118ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	40010000 	.word	0x40010000
 80118e4:	40010400 	.word	0x40010400
 80118e8:	40000400 	.word	0x40000400
 80118ec:	40000800 	.word	0x40000800
 80118f0:	40000c00 	.word	0x40000c00
 80118f4:	40001800 	.word	0x40001800
 80118f8:	40014000 	.word	0x40014000
 80118fc:	4000e000 	.word	0x4000e000
 8011900:	4000e400 	.word	0x4000e400

08011904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011918:	b480      	push	{r7}
 801191a:	b083      	sub	sp, #12
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011920:	bf00      	nop
 8011922:	370c      	adds	r7, #12
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011934:	bf00      	nop
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d101      	bne.n	8011952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801194e:	2301      	movs	r3, #1
 8011950:	e042      	b.n	80119d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011958:	2b00      	cmp	r3, #0
 801195a:	d106      	bne.n	801196a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2200      	movs	r2, #0
 8011960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f7f1 ffe7 	bl	8003938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2224      	movs	r2, #36	; 0x24
 801196e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	f022 0201 	bic.w	r2, r2, #1
 8011980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f000 f82c 	bl	80119e0 <UART_SetConfig>
 8011988:	4603      	mov	r3, r0
 801198a:	2b01      	cmp	r3, #1
 801198c:	d101      	bne.n	8011992 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801198e:	2301      	movs	r3, #1
 8011990:	e022      	b.n	80119d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011996:	2b00      	cmp	r3, #0
 8011998:	d002      	beq.n	80119a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f000 fe8c 	bl	80126b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	685a      	ldr	r2, [r3, #4]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80119ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	689a      	ldr	r2, [r3, #8]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80119be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f042 0201 	orr.w	r2, r2, #1
 80119ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 ff13 	bl	80127fc <UART_CheckIdleState>
 80119d6:	4603      	mov	r3, r0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3708      	adds	r7, #8
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80119e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80119e4:	b092      	sub	sp, #72	; 0x48
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80119ea:	2300      	movs	r3, #0
 80119ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	689a      	ldr	r2, [r3, #8]
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	691b      	ldr	r3, [r3, #16]
 80119f8:	431a      	orrs	r2, r3
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	695b      	ldr	r3, [r3, #20]
 80119fe:	431a      	orrs	r2, r3
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	69db      	ldr	r3, [r3, #28]
 8011a04:	4313      	orrs	r3, r2
 8011a06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	4bbe      	ldr	r3, [pc, #760]	; (8011d08 <UART_SetConfig+0x328>)
 8011a10:	4013      	ands	r3, r2
 8011a12:	697a      	ldr	r2, [r7, #20]
 8011a14:	6812      	ldr	r2, [r2, #0]
 8011a16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a18:	430b      	orrs	r3, r1
 8011a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	68da      	ldr	r2, [r3, #12]
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	430a      	orrs	r2, r1
 8011a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	699b      	ldr	r3, [r3, #24]
 8011a36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4ab3      	ldr	r2, [pc, #716]	; (8011d0c <UART_SetConfig+0x32c>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d004      	beq.n	8011a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	6a1b      	ldr	r3, [r3, #32]
 8011a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	689a      	ldr	r2, [r3, #8]
 8011a52:	4baf      	ldr	r3, [pc, #700]	; (8011d10 <UART_SetConfig+0x330>)
 8011a54:	4013      	ands	r3, r2
 8011a56:	697a      	ldr	r2, [r7, #20]
 8011a58:	6812      	ldr	r2, [r2, #0]
 8011a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a5c:	430b      	orrs	r3, r1
 8011a5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011a60:	697b      	ldr	r3, [r7, #20]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	f023 010f 	bic.w	r1, r3, #15
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	430a      	orrs	r2, r1
 8011a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4aa6      	ldr	r2, [pc, #664]	; (8011d14 <UART_SetConfig+0x334>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d177      	bne.n	8011b70 <UART_SetConfig+0x190>
 8011a80:	4ba5      	ldr	r3, [pc, #660]	; (8011d18 <UART_SetConfig+0x338>)
 8011a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011a88:	2b28      	cmp	r3, #40	; 0x28
 8011a8a:	d86d      	bhi.n	8011b68 <UART_SetConfig+0x188>
 8011a8c:	a201      	add	r2, pc, #4	; (adr r2, 8011a94 <UART_SetConfig+0xb4>)
 8011a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a92:	bf00      	nop
 8011a94:	08011b39 	.word	0x08011b39
 8011a98:	08011b69 	.word	0x08011b69
 8011a9c:	08011b69 	.word	0x08011b69
 8011aa0:	08011b69 	.word	0x08011b69
 8011aa4:	08011b69 	.word	0x08011b69
 8011aa8:	08011b69 	.word	0x08011b69
 8011aac:	08011b69 	.word	0x08011b69
 8011ab0:	08011b69 	.word	0x08011b69
 8011ab4:	08011b41 	.word	0x08011b41
 8011ab8:	08011b69 	.word	0x08011b69
 8011abc:	08011b69 	.word	0x08011b69
 8011ac0:	08011b69 	.word	0x08011b69
 8011ac4:	08011b69 	.word	0x08011b69
 8011ac8:	08011b69 	.word	0x08011b69
 8011acc:	08011b69 	.word	0x08011b69
 8011ad0:	08011b69 	.word	0x08011b69
 8011ad4:	08011b49 	.word	0x08011b49
 8011ad8:	08011b69 	.word	0x08011b69
 8011adc:	08011b69 	.word	0x08011b69
 8011ae0:	08011b69 	.word	0x08011b69
 8011ae4:	08011b69 	.word	0x08011b69
 8011ae8:	08011b69 	.word	0x08011b69
 8011aec:	08011b69 	.word	0x08011b69
 8011af0:	08011b69 	.word	0x08011b69
 8011af4:	08011b51 	.word	0x08011b51
 8011af8:	08011b69 	.word	0x08011b69
 8011afc:	08011b69 	.word	0x08011b69
 8011b00:	08011b69 	.word	0x08011b69
 8011b04:	08011b69 	.word	0x08011b69
 8011b08:	08011b69 	.word	0x08011b69
 8011b0c:	08011b69 	.word	0x08011b69
 8011b10:	08011b69 	.word	0x08011b69
 8011b14:	08011b59 	.word	0x08011b59
 8011b18:	08011b69 	.word	0x08011b69
 8011b1c:	08011b69 	.word	0x08011b69
 8011b20:	08011b69 	.word	0x08011b69
 8011b24:	08011b69 	.word	0x08011b69
 8011b28:	08011b69 	.word	0x08011b69
 8011b2c:	08011b69 	.word	0x08011b69
 8011b30:	08011b69 	.word	0x08011b69
 8011b34:	08011b61 	.word	0x08011b61
 8011b38:	2301      	movs	r3, #1
 8011b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b3e:	e326      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b40:	2304      	movs	r3, #4
 8011b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b46:	e322      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b48:	2308      	movs	r3, #8
 8011b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b4e:	e31e      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b50:	2310      	movs	r3, #16
 8011b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b56:	e31a      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b58:	2320      	movs	r3, #32
 8011b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b5e:	e316      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b60:	2340      	movs	r3, #64	; 0x40
 8011b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b66:	e312      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b68:	2380      	movs	r3, #128	; 0x80
 8011b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b6e:	e30e      	b.n	801218e <UART_SetConfig+0x7ae>
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4a69      	ldr	r2, [pc, #420]	; (8011d1c <UART_SetConfig+0x33c>)
 8011b76:	4293      	cmp	r3, r2
 8011b78:	d130      	bne.n	8011bdc <UART_SetConfig+0x1fc>
 8011b7a:	4b67      	ldr	r3, [pc, #412]	; (8011d18 <UART_SetConfig+0x338>)
 8011b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b7e:	f003 0307 	and.w	r3, r3, #7
 8011b82:	2b05      	cmp	r3, #5
 8011b84:	d826      	bhi.n	8011bd4 <UART_SetConfig+0x1f4>
 8011b86:	a201      	add	r2, pc, #4	; (adr r2, 8011b8c <UART_SetConfig+0x1ac>)
 8011b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8c:	08011ba5 	.word	0x08011ba5
 8011b90:	08011bad 	.word	0x08011bad
 8011b94:	08011bb5 	.word	0x08011bb5
 8011b98:	08011bbd 	.word	0x08011bbd
 8011b9c:	08011bc5 	.word	0x08011bc5
 8011ba0:	08011bcd 	.word	0x08011bcd
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011baa:	e2f0      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bac:	2304      	movs	r3, #4
 8011bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bb2:	e2ec      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bb4:	2308      	movs	r3, #8
 8011bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bba:	e2e8      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bbc:	2310      	movs	r3, #16
 8011bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc2:	e2e4      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bc4:	2320      	movs	r3, #32
 8011bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bca:	e2e0      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bcc:	2340      	movs	r3, #64	; 0x40
 8011bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bd2:	e2dc      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bd4:	2380      	movs	r3, #128	; 0x80
 8011bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bda:	e2d8      	b.n	801218e <UART_SetConfig+0x7ae>
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4a4f      	ldr	r2, [pc, #316]	; (8011d20 <UART_SetConfig+0x340>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d130      	bne.n	8011c48 <UART_SetConfig+0x268>
 8011be6:	4b4c      	ldr	r3, [pc, #304]	; (8011d18 <UART_SetConfig+0x338>)
 8011be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bea:	f003 0307 	and.w	r3, r3, #7
 8011bee:	2b05      	cmp	r3, #5
 8011bf0:	d826      	bhi.n	8011c40 <UART_SetConfig+0x260>
 8011bf2:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <UART_SetConfig+0x218>)
 8011bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf8:	08011c11 	.word	0x08011c11
 8011bfc:	08011c19 	.word	0x08011c19
 8011c00:	08011c21 	.word	0x08011c21
 8011c04:	08011c29 	.word	0x08011c29
 8011c08:	08011c31 	.word	0x08011c31
 8011c0c:	08011c39 	.word	0x08011c39
 8011c10:	2300      	movs	r3, #0
 8011c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c16:	e2ba      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c18:	2304      	movs	r3, #4
 8011c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c1e:	e2b6      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c20:	2308      	movs	r3, #8
 8011c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c26:	e2b2      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c28:	2310      	movs	r3, #16
 8011c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c2e:	e2ae      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c30:	2320      	movs	r3, #32
 8011c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c36:	e2aa      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c38:	2340      	movs	r3, #64	; 0x40
 8011c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c3e:	e2a6      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c40:	2380      	movs	r3, #128	; 0x80
 8011c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c46:	e2a2      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4a35      	ldr	r2, [pc, #212]	; (8011d24 <UART_SetConfig+0x344>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d130      	bne.n	8011cb4 <UART_SetConfig+0x2d4>
 8011c52:	4b31      	ldr	r3, [pc, #196]	; (8011d18 <UART_SetConfig+0x338>)
 8011c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c56:	f003 0307 	and.w	r3, r3, #7
 8011c5a:	2b05      	cmp	r3, #5
 8011c5c:	d826      	bhi.n	8011cac <UART_SetConfig+0x2cc>
 8011c5e:	a201      	add	r2, pc, #4	; (adr r2, 8011c64 <UART_SetConfig+0x284>)
 8011c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c64:	08011c7d 	.word	0x08011c7d
 8011c68:	08011c85 	.word	0x08011c85
 8011c6c:	08011c8d 	.word	0x08011c8d
 8011c70:	08011c95 	.word	0x08011c95
 8011c74:	08011c9d 	.word	0x08011c9d
 8011c78:	08011ca5 	.word	0x08011ca5
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c82:	e284      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c84:	2304      	movs	r3, #4
 8011c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8a:	e280      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c8c:	2308      	movs	r3, #8
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c92:	e27c      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c94:	2310      	movs	r3, #16
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e278      	b.n	801218e <UART_SetConfig+0x7ae>
 8011c9c:	2320      	movs	r3, #32
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e274      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ca4:	2340      	movs	r3, #64	; 0x40
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011caa:	e270      	b.n	801218e <UART_SetConfig+0x7ae>
 8011cac:	2380      	movs	r3, #128	; 0x80
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb2:	e26c      	b.n	801218e <UART_SetConfig+0x7ae>
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a1b      	ldr	r2, [pc, #108]	; (8011d28 <UART_SetConfig+0x348>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d142      	bne.n	8011d44 <UART_SetConfig+0x364>
 8011cbe:	4b16      	ldr	r3, [pc, #88]	; (8011d18 <UART_SetConfig+0x338>)
 8011cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cc2:	f003 0307 	and.w	r3, r3, #7
 8011cc6:	2b05      	cmp	r3, #5
 8011cc8:	d838      	bhi.n	8011d3c <UART_SetConfig+0x35c>
 8011cca:	a201      	add	r2, pc, #4	; (adr r2, 8011cd0 <UART_SetConfig+0x2f0>)
 8011ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd0:	08011ce9 	.word	0x08011ce9
 8011cd4:	08011cf1 	.word	0x08011cf1
 8011cd8:	08011cf9 	.word	0x08011cf9
 8011cdc:	08011d01 	.word	0x08011d01
 8011ce0:	08011d2d 	.word	0x08011d2d
 8011ce4:	08011d35 	.word	0x08011d35
 8011ce8:	2300      	movs	r3, #0
 8011cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cee:	e24e      	b.n	801218e <UART_SetConfig+0x7ae>
 8011cf0:	2304      	movs	r3, #4
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cf6:	e24a      	b.n	801218e <UART_SetConfig+0x7ae>
 8011cf8:	2308      	movs	r3, #8
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cfe:	e246      	b.n	801218e <UART_SetConfig+0x7ae>
 8011d00:	2310      	movs	r3, #16
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d06:	e242      	b.n	801218e <UART_SetConfig+0x7ae>
 8011d08:	cfff69f3 	.word	0xcfff69f3
 8011d0c:	58000c00 	.word	0x58000c00
 8011d10:	11fff4ff 	.word	0x11fff4ff
 8011d14:	40011000 	.word	0x40011000
 8011d18:	58024400 	.word	0x58024400
 8011d1c:	40004400 	.word	0x40004400
 8011d20:	40004800 	.word	0x40004800
 8011d24:	40004c00 	.word	0x40004c00
 8011d28:	40005000 	.word	0x40005000
 8011d2c:	2320      	movs	r3, #32
 8011d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d32:	e22c      	b.n	801218e <UART_SetConfig+0x7ae>
 8011d34:	2340      	movs	r3, #64	; 0x40
 8011d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d3a:	e228      	b.n	801218e <UART_SetConfig+0x7ae>
 8011d3c:	2380      	movs	r3, #128	; 0x80
 8011d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d42:	e224      	b.n	801218e <UART_SetConfig+0x7ae>
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4ab1      	ldr	r2, [pc, #708]	; (8012010 <UART_SetConfig+0x630>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d176      	bne.n	8011e3c <UART_SetConfig+0x45c>
 8011d4e:	4bb1      	ldr	r3, [pc, #708]	; (8012014 <UART_SetConfig+0x634>)
 8011d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011d56:	2b28      	cmp	r3, #40	; 0x28
 8011d58:	d86c      	bhi.n	8011e34 <UART_SetConfig+0x454>
 8011d5a:	a201      	add	r2, pc, #4	; (adr r2, 8011d60 <UART_SetConfig+0x380>)
 8011d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d60:	08011e05 	.word	0x08011e05
 8011d64:	08011e35 	.word	0x08011e35
 8011d68:	08011e35 	.word	0x08011e35
 8011d6c:	08011e35 	.word	0x08011e35
 8011d70:	08011e35 	.word	0x08011e35
 8011d74:	08011e35 	.word	0x08011e35
 8011d78:	08011e35 	.word	0x08011e35
 8011d7c:	08011e35 	.word	0x08011e35
 8011d80:	08011e0d 	.word	0x08011e0d
 8011d84:	08011e35 	.word	0x08011e35
 8011d88:	08011e35 	.word	0x08011e35
 8011d8c:	08011e35 	.word	0x08011e35
 8011d90:	08011e35 	.word	0x08011e35
 8011d94:	08011e35 	.word	0x08011e35
 8011d98:	08011e35 	.word	0x08011e35
 8011d9c:	08011e35 	.word	0x08011e35
 8011da0:	08011e15 	.word	0x08011e15
 8011da4:	08011e35 	.word	0x08011e35
 8011da8:	08011e35 	.word	0x08011e35
 8011dac:	08011e35 	.word	0x08011e35
 8011db0:	08011e35 	.word	0x08011e35
 8011db4:	08011e35 	.word	0x08011e35
 8011db8:	08011e35 	.word	0x08011e35
 8011dbc:	08011e35 	.word	0x08011e35
 8011dc0:	08011e1d 	.word	0x08011e1d
 8011dc4:	08011e35 	.word	0x08011e35
 8011dc8:	08011e35 	.word	0x08011e35
 8011dcc:	08011e35 	.word	0x08011e35
 8011dd0:	08011e35 	.word	0x08011e35
 8011dd4:	08011e35 	.word	0x08011e35
 8011dd8:	08011e35 	.word	0x08011e35
 8011ddc:	08011e35 	.word	0x08011e35
 8011de0:	08011e25 	.word	0x08011e25
 8011de4:	08011e35 	.word	0x08011e35
 8011de8:	08011e35 	.word	0x08011e35
 8011dec:	08011e35 	.word	0x08011e35
 8011df0:	08011e35 	.word	0x08011e35
 8011df4:	08011e35 	.word	0x08011e35
 8011df8:	08011e35 	.word	0x08011e35
 8011dfc:	08011e35 	.word	0x08011e35
 8011e00:	08011e2d 	.word	0x08011e2d
 8011e04:	2301      	movs	r3, #1
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e0a:	e1c0      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e0c:	2304      	movs	r3, #4
 8011e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e12:	e1bc      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e14:	2308      	movs	r3, #8
 8011e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e1a:	e1b8      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e1c:	2310      	movs	r3, #16
 8011e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e22:	e1b4      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e24:	2320      	movs	r3, #32
 8011e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e2a:	e1b0      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e2c:	2340      	movs	r3, #64	; 0x40
 8011e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e32:	e1ac      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e34:	2380      	movs	r3, #128	; 0x80
 8011e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e3a:	e1a8      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4a75      	ldr	r2, [pc, #468]	; (8012018 <UART_SetConfig+0x638>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d130      	bne.n	8011ea8 <UART_SetConfig+0x4c8>
 8011e46:	4b73      	ldr	r3, [pc, #460]	; (8012014 <UART_SetConfig+0x634>)
 8011e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e4a:	f003 0307 	and.w	r3, r3, #7
 8011e4e:	2b05      	cmp	r3, #5
 8011e50:	d826      	bhi.n	8011ea0 <UART_SetConfig+0x4c0>
 8011e52:	a201      	add	r2, pc, #4	; (adr r2, 8011e58 <UART_SetConfig+0x478>)
 8011e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e58:	08011e71 	.word	0x08011e71
 8011e5c:	08011e79 	.word	0x08011e79
 8011e60:	08011e81 	.word	0x08011e81
 8011e64:	08011e89 	.word	0x08011e89
 8011e68:	08011e91 	.word	0x08011e91
 8011e6c:	08011e99 	.word	0x08011e99
 8011e70:	2300      	movs	r3, #0
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e76:	e18a      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e78:	2304      	movs	r3, #4
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e7e:	e186      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e80:	2308      	movs	r3, #8
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e86:	e182      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e88:	2310      	movs	r3, #16
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8e:	e17e      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e90:	2320      	movs	r3, #32
 8011e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e96:	e17a      	b.n	801218e <UART_SetConfig+0x7ae>
 8011e98:	2340      	movs	r3, #64	; 0x40
 8011e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e9e:	e176      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ea0:	2380      	movs	r3, #128	; 0x80
 8011ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ea6:	e172      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4a5b      	ldr	r2, [pc, #364]	; (801201c <UART_SetConfig+0x63c>)
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d130      	bne.n	8011f14 <UART_SetConfig+0x534>
 8011eb2:	4b58      	ldr	r3, [pc, #352]	; (8012014 <UART_SetConfig+0x634>)
 8011eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eb6:	f003 0307 	and.w	r3, r3, #7
 8011eba:	2b05      	cmp	r3, #5
 8011ebc:	d826      	bhi.n	8011f0c <UART_SetConfig+0x52c>
 8011ebe:	a201      	add	r2, pc, #4	; (adr r2, 8011ec4 <UART_SetConfig+0x4e4>)
 8011ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec4:	08011edd 	.word	0x08011edd
 8011ec8:	08011ee5 	.word	0x08011ee5
 8011ecc:	08011eed 	.word	0x08011eed
 8011ed0:	08011ef5 	.word	0x08011ef5
 8011ed4:	08011efd 	.word	0x08011efd
 8011ed8:	08011f05 	.word	0x08011f05
 8011edc:	2300      	movs	r3, #0
 8011ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ee2:	e154      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ee4:	2304      	movs	r3, #4
 8011ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eea:	e150      	b.n	801218e <UART_SetConfig+0x7ae>
 8011eec:	2308      	movs	r3, #8
 8011eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ef2:	e14c      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ef4:	2310      	movs	r3, #16
 8011ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011efa:	e148      	b.n	801218e <UART_SetConfig+0x7ae>
 8011efc:	2320      	movs	r3, #32
 8011efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f02:	e144      	b.n	801218e <UART_SetConfig+0x7ae>
 8011f04:	2340      	movs	r3, #64	; 0x40
 8011f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f0a:	e140      	b.n	801218e <UART_SetConfig+0x7ae>
 8011f0c:	2380      	movs	r3, #128	; 0x80
 8011f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f12:	e13c      	b.n	801218e <UART_SetConfig+0x7ae>
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a41      	ldr	r2, [pc, #260]	; (8012020 <UART_SetConfig+0x640>)
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	f040 8082 	bne.w	8012024 <UART_SetConfig+0x644>
 8011f20:	4b3c      	ldr	r3, [pc, #240]	; (8012014 <UART_SetConfig+0x634>)
 8011f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f28:	2b28      	cmp	r3, #40	; 0x28
 8011f2a:	d86d      	bhi.n	8012008 <UART_SetConfig+0x628>
 8011f2c:	a201      	add	r2, pc, #4	; (adr r2, 8011f34 <UART_SetConfig+0x554>)
 8011f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f32:	bf00      	nop
 8011f34:	08011fd9 	.word	0x08011fd9
 8011f38:	08012009 	.word	0x08012009
 8011f3c:	08012009 	.word	0x08012009
 8011f40:	08012009 	.word	0x08012009
 8011f44:	08012009 	.word	0x08012009
 8011f48:	08012009 	.word	0x08012009
 8011f4c:	08012009 	.word	0x08012009
 8011f50:	08012009 	.word	0x08012009
 8011f54:	08011fe1 	.word	0x08011fe1
 8011f58:	08012009 	.word	0x08012009
 8011f5c:	08012009 	.word	0x08012009
 8011f60:	08012009 	.word	0x08012009
 8011f64:	08012009 	.word	0x08012009
 8011f68:	08012009 	.word	0x08012009
 8011f6c:	08012009 	.word	0x08012009
 8011f70:	08012009 	.word	0x08012009
 8011f74:	08011fe9 	.word	0x08011fe9
 8011f78:	08012009 	.word	0x08012009
 8011f7c:	08012009 	.word	0x08012009
 8011f80:	08012009 	.word	0x08012009
 8011f84:	08012009 	.word	0x08012009
 8011f88:	08012009 	.word	0x08012009
 8011f8c:	08012009 	.word	0x08012009
 8011f90:	08012009 	.word	0x08012009
 8011f94:	08011ff1 	.word	0x08011ff1
 8011f98:	08012009 	.word	0x08012009
 8011f9c:	08012009 	.word	0x08012009
 8011fa0:	08012009 	.word	0x08012009
 8011fa4:	08012009 	.word	0x08012009
 8011fa8:	08012009 	.word	0x08012009
 8011fac:	08012009 	.word	0x08012009
 8011fb0:	08012009 	.word	0x08012009
 8011fb4:	08011ff9 	.word	0x08011ff9
 8011fb8:	08012009 	.word	0x08012009
 8011fbc:	08012009 	.word	0x08012009
 8011fc0:	08012009 	.word	0x08012009
 8011fc4:	08012009 	.word	0x08012009
 8011fc8:	08012009 	.word	0x08012009
 8011fcc:	08012009 	.word	0x08012009
 8011fd0:	08012009 	.word	0x08012009
 8011fd4:	08012001 	.word	0x08012001
 8011fd8:	2301      	movs	r3, #1
 8011fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fde:	e0d6      	b.n	801218e <UART_SetConfig+0x7ae>
 8011fe0:	2304      	movs	r3, #4
 8011fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fe6:	e0d2      	b.n	801218e <UART_SetConfig+0x7ae>
 8011fe8:	2308      	movs	r3, #8
 8011fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fee:	e0ce      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ff0:	2310      	movs	r3, #16
 8011ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ff6:	e0ca      	b.n	801218e <UART_SetConfig+0x7ae>
 8011ff8:	2320      	movs	r3, #32
 8011ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ffe:	e0c6      	b.n	801218e <UART_SetConfig+0x7ae>
 8012000:	2340      	movs	r3, #64	; 0x40
 8012002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012006:	e0c2      	b.n	801218e <UART_SetConfig+0x7ae>
 8012008:	2380      	movs	r3, #128	; 0x80
 801200a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801200e:	e0be      	b.n	801218e <UART_SetConfig+0x7ae>
 8012010:	40011400 	.word	0x40011400
 8012014:	58024400 	.word	0x58024400
 8012018:	40007800 	.word	0x40007800
 801201c:	40007c00 	.word	0x40007c00
 8012020:	40011800 	.word	0x40011800
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4aad      	ldr	r2, [pc, #692]	; (80122e0 <UART_SetConfig+0x900>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d176      	bne.n	801211c <UART_SetConfig+0x73c>
 801202e:	4bad      	ldr	r3, [pc, #692]	; (80122e4 <UART_SetConfig+0x904>)
 8012030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012036:	2b28      	cmp	r3, #40	; 0x28
 8012038:	d86c      	bhi.n	8012114 <UART_SetConfig+0x734>
 801203a:	a201      	add	r2, pc, #4	; (adr r2, 8012040 <UART_SetConfig+0x660>)
 801203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012040:	080120e5 	.word	0x080120e5
 8012044:	08012115 	.word	0x08012115
 8012048:	08012115 	.word	0x08012115
 801204c:	08012115 	.word	0x08012115
 8012050:	08012115 	.word	0x08012115
 8012054:	08012115 	.word	0x08012115
 8012058:	08012115 	.word	0x08012115
 801205c:	08012115 	.word	0x08012115
 8012060:	080120ed 	.word	0x080120ed
 8012064:	08012115 	.word	0x08012115
 8012068:	08012115 	.word	0x08012115
 801206c:	08012115 	.word	0x08012115
 8012070:	08012115 	.word	0x08012115
 8012074:	08012115 	.word	0x08012115
 8012078:	08012115 	.word	0x08012115
 801207c:	08012115 	.word	0x08012115
 8012080:	080120f5 	.word	0x080120f5
 8012084:	08012115 	.word	0x08012115
 8012088:	08012115 	.word	0x08012115
 801208c:	08012115 	.word	0x08012115
 8012090:	08012115 	.word	0x08012115
 8012094:	08012115 	.word	0x08012115
 8012098:	08012115 	.word	0x08012115
 801209c:	08012115 	.word	0x08012115
 80120a0:	080120fd 	.word	0x080120fd
 80120a4:	08012115 	.word	0x08012115
 80120a8:	08012115 	.word	0x08012115
 80120ac:	08012115 	.word	0x08012115
 80120b0:	08012115 	.word	0x08012115
 80120b4:	08012115 	.word	0x08012115
 80120b8:	08012115 	.word	0x08012115
 80120bc:	08012115 	.word	0x08012115
 80120c0:	08012105 	.word	0x08012105
 80120c4:	08012115 	.word	0x08012115
 80120c8:	08012115 	.word	0x08012115
 80120cc:	08012115 	.word	0x08012115
 80120d0:	08012115 	.word	0x08012115
 80120d4:	08012115 	.word	0x08012115
 80120d8:	08012115 	.word	0x08012115
 80120dc:	08012115 	.word	0x08012115
 80120e0:	0801210d 	.word	0x0801210d
 80120e4:	2301      	movs	r3, #1
 80120e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120ea:	e050      	b.n	801218e <UART_SetConfig+0x7ae>
 80120ec:	2304      	movs	r3, #4
 80120ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120f2:	e04c      	b.n	801218e <UART_SetConfig+0x7ae>
 80120f4:	2308      	movs	r3, #8
 80120f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80120fa:	e048      	b.n	801218e <UART_SetConfig+0x7ae>
 80120fc:	2310      	movs	r3, #16
 80120fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012102:	e044      	b.n	801218e <UART_SetConfig+0x7ae>
 8012104:	2320      	movs	r3, #32
 8012106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801210a:	e040      	b.n	801218e <UART_SetConfig+0x7ae>
 801210c:	2340      	movs	r3, #64	; 0x40
 801210e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012112:	e03c      	b.n	801218e <UART_SetConfig+0x7ae>
 8012114:	2380      	movs	r3, #128	; 0x80
 8012116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801211a:	e038      	b.n	801218e <UART_SetConfig+0x7ae>
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4a71      	ldr	r2, [pc, #452]	; (80122e8 <UART_SetConfig+0x908>)
 8012122:	4293      	cmp	r3, r2
 8012124:	d130      	bne.n	8012188 <UART_SetConfig+0x7a8>
 8012126:	4b6f      	ldr	r3, [pc, #444]	; (80122e4 <UART_SetConfig+0x904>)
 8012128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801212a:	f003 0307 	and.w	r3, r3, #7
 801212e:	2b05      	cmp	r3, #5
 8012130:	d826      	bhi.n	8012180 <UART_SetConfig+0x7a0>
 8012132:	a201      	add	r2, pc, #4	; (adr r2, 8012138 <UART_SetConfig+0x758>)
 8012134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012138:	08012151 	.word	0x08012151
 801213c:	08012159 	.word	0x08012159
 8012140:	08012161 	.word	0x08012161
 8012144:	08012169 	.word	0x08012169
 8012148:	08012171 	.word	0x08012171
 801214c:	08012179 	.word	0x08012179
 8012150:	2302      	movs	r3, #2
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012156:	e01a      	b.n	801218e <UART_SetConfig+0x7ae>
 8012158:	2304      	movs	r3, #4
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215e:	e016      	b.n	801218e <UART_SetConfig+0x7ae>
 8012160:	2308      	movs	r3, #8
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012166:	e012      	b.n	801218e <UART_SetConfig+0x7ae>
 8012168:	2310      	movs	r3, #16
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801216e:	e00e      	b.n	801218e <UART_SetConfig+0x7ae>
 8012170:	2320      	movs	r3, #32
 8012172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012176:	e00a      	b.n	801218e <UART_SetConfig+0x7ae>
 8012178:	2340      	movs	r3, #64	; 0x40
 801217a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801217e:	e006      	b.n	801218e <UART_SetConfig+0x7ae>
 8012180:	2380      	movs	r3, #128	; 0x80
 8012182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012186:	e002      	b.n	801218e <UART_SetConfig+0x7ae>
 8012188:	2380      	movs	r3, #128	; 0x80
 801218a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	4a55      	ldr	r2, [pc, #340]	; (80122e8 <UART_SetConfig+0x908>)
 8012194:	4293      	cmp	r3, r2
 8012196:	f040 80f8 	bne.w	801238a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801219a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801219e:	2b20      	cmp	r3, #32
 80121a0:	dc46      	bgt.n	8012230 <UART_SetConfig+0x850>
 80121a2:	2b02      	cmp	r3, #2
 80121a4:	db75      	blt.n	8012292 <UART_SetConfig+0x8b2>
 80121a6:	3b02      	subs	r3, #2
 80121a8:	2b1e      	cmp	r3, #30
 80121aa:	d872      	bhi.n	8012292 <UART_SetConfig+0x8b2>
 80121ac:	a201      	add	r2, pc, #4	; (adr r2, 80121b4 <UART_SetConfig+0x7d4>)
 80121ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b2:	bf00      	nop
 80121b4:	08012237 	.word	0x08012237
 80121b8:	08012293 	.word	0x08012293
 80121bc:	0801223f 	.word	0x0801223f
 80121c0:	08012293 	.word	0x08012293
 80121c4:	08012293 	.word	0x08012293
 80121c8:	08012293 	.word	0x08012293
 80121cc:	0801224f 	.word	0x0801224f
 80121d0:	08012293 	.word	0x08012293
 80121d4:	08012293 	.word	0x08012293
 80121d8:	08012293 	.word	0x08012293
 80121dc:	08012293 	.word	0x08012293
 80121e0:	08012293 	.word	0x08012293
 80121e4:	08012293 	.word	0x08012293
 80121e8:	08012293 	.word	0x08012293
 80121ec:	0801225f 	.word	0x0801225f
 80121f0:	08012293 	.word	0x08012293
 80121f4:	08012293 	.word	0x08012293
 80121f8:	08012293 	.word	0x08012293
 80121fc:	08012293 	.word	0x08012293
 8012200:	08012293 	.word	0x08012293
 8012204:	08012293 	.word	0x08012293
 8012208:	08012293 	.word	0x08012293
 801220c:	08012293 	.word	0x08012293
 8012210:	08012293 	.word	0x08012293
 8012214:	08012293 	.word	0x08012293
 8012218:	08012293 	.word	0x08012293
 801221c:	08012293 	.word	0x08012293
 8012220:	08012293 	.word	0x08012293
 8012224:	08012293 	.word	0x08012293
 8012228:	08012293 	.word	0x08012293
 801222c:	08012285 	.word	0x08012285
 8012230:	2b40      	cmp	r3, #64	; 0x40
 8012232:	d02a      	beq.n	801228a <UART_SetConfig+0x8aa>
 8012234:	e02d      	b.n	8012292 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012236:	f7fb f86b 	bl	800d310 <HAL_RCCEx_GetD3PCLK1Freq>
 801223a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801223c:	e02f      	b.n	801229e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012242:	4618      	mov	r0, r3
 8012244:	f7fb f87a 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801224c:	e027      	b.n	801229e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801224e:	f107 0318 	add.w	r3, r7, #24
 8012252:	4618      	mov	r0, r3
 8012254:	f7fb f9c6 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801225c:	e01f      	b.n	801229e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801225e:	4b21      	ldr	r3, [pc, #132]	; (80122e4 <UART_SetConfig+0x904>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f003 0320 	and.w	r3, r3, #32
 8012266:	2b00      	cmp	r3, #0
 8012268:	d009      	beq.n	801227e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801226a:	4b1e      	ldr	r3, [pc, #120]	; (80122e4 <UART_SetConfig+0x904>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	08db      	lsrs	r3, r3, #3
 8012270:	f003 0303 	and.w	r3, r3, #3
 8012274:	4a1d      	ldr	r2, [pc, #116]	; (80122ec <UART_SetConfig+0x90c>)
 8012276:	fa22 f303 	lsr.w	r3, r2, r3
 801227a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801227c:	e00f      	b.n	801229e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801227e:	4b1b      	ldr	r3, [pc, #108]	; (80122ec <UART_SetConfig+0x90c>)
 8012280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012282:	e00c      	b.n	801229e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012284:	4b1a      	ldr	r3, [pc, #104]	; (80122f0 <UART_SetConfig+0x910>)
 8012286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012288:	e009      	b.n	801229e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801228a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801228e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012290:	e005      	b.n	801229e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012292:	2300      	movs	r3, #0
 8012294:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012296:	2301      	movs	r3, #1
 8012298:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801229c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801229e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f000 81ee 	beq.w	8012682 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122aa:	4a12      	ldr	r2, [pc, #72]	; (80122f4 <UART_SetConfig+0x914>)
 80122ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122b0:	461a      	mov	r2, r3
 80122b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80122b8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	685a      	ldr	r2, [r3, #4]
 80122be:	4613      	mov	r3, r2
 80122c0:	005b      	lsls	r3, r3, #1
 80122c2:	4413      	add	r3, r2
 80122c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d305      	bcc.n	80122d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80122d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d910      	bls.n	80122f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80122d6:	2301      	movs	r3, #1
 80122d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80122dc:	e1d1      	b.n	8012682 <UART_SetConfig+0xca2>
 80122de:	bf00      	nop
 80122e0:	40011c00 	.word	0x40011c00
 80122e4:	58024400 	.word	0x58024400
 80122e8:	58000c00 	.word	0x58000c00
 80122ec:	03d09000 	.word	0x03d09000
 80122f0:	003d0900 	.word	0x003d0900
 80122f4:	0801f914 	.word	0x0801f914
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fa:	2200      	movs	r2, #0
 80122fc:	60bb      	str	r3, [r7, #8]
 80122fe:	60fa      	str	r2, [r7, #12]
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012304:	4ac0      	ldr	r2, [pc, #768]	; (8012608 <UART_SetConfig+0xc28>)
 8012306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801230a:	b29b      	uxth	r3, r3
 801230c:	2200      	movs	r2, #0
 801230e:	603b      	str	r3, [r7, #0]
 8012310:	607a      	str	r2, [r7, #4]
 8012312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801231a:	f7ee fa1d 	bl	8000758 <__aeabi_uldivmod>
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	4610      	mov	r0, r2
 8012324:	4619      	mov	r1, r3
 8012326:	f04f 0200 	mov.w	r2, #0
 801232a:	f04f 0300 	mov.w	r3, #0
 801232e:	020b      	lsls	r3, r1, #8
 8012330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012334:	0202      	lsls	r2, r0, #8
 8012336:	6979      	ldr	r1, [r7, #20]
 8012338:	6849      	ldr	r1, [r1, #4]
 801233a:	0849      	lsrs	r1, r1, #1
 801233c:	2000      	movs	r0, #0
 801233e:	460c      	mov	r4, r1
 8012340:	4605      	mov	r5, r0
 8012342:	eb12 0804 	adds.w	r8, r2, r4
 8012346:	eb43 0905 	adc.w	r9, r3, r5
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	469a      	mov	sl, r3
 8012352:	4693      	mov	fp, r2
 8012354:	4652      	mov	r2, sl
 8012356:	465b      	mov	r3, fp
 8012358:	4640      	mov	r0, r8
 801235a:	4649      	mov	r1, r9
 801235c:	f7ee f9fc 	bl	8000758 <__aeabi_uldivmod>
 8012360:	4602      	mov	r2, r0
 8012362:	460b      	mov	r3, r1
 8012364:	4613      	mov	r3, r2
 8012366:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801236e:	d308      	bcc.n	8012382 <UART_SetConfig+0x9a2>
 8012370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012376:	d204      	bcs.n	8012382 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801237e:	60da      	str	r2, [r3, #12]
 8012380:	e17f      	b.n	8012682 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012382:	2301      	movs	r3, #1
 8012384:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012388:	e17b      	b.n	8012682 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	69db      	ldr	r3, [r3, #28]
 801238e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012392:	f040 80bd 	bne.w	8012510 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8012396:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801239a:	2b20      	cmp	r3, #32
 801239c:	dc48      	bgt.n	8012430 <UART_SetConfig+0xa50>
 801239e:	2b00      	cmp	r3, #0
 80123a0:	db7b      	blt.n	801249a <UART_SetConfig+0xaba>
 80123a2:	2b20      	cmp	r3, #32
 80123a4:	d879      	bhi.n	801249a <UART_SetConfig+0xaba>
 80123a6:	a201      	add	r2, pc, #4	; (adr r2, 80123ac <UART_SetConfig+0x9cc>)
 80123a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ac:	08012437 	.word	0x08012437
 80123b0:	0801243f 	.word	0x0801243f
 80123b4:	0801249b 	.word	0x0801249b
 80123b8:	0801249b 	.word	0x0801249b
 80123bc:	08012447 	.word	0x08012447
 80123c0:	0801249b 	.word	0x0801249b
 80123c4:	0801249b 	.word	0x0801249b
 80123c8:	0801249b 	.word	0x0801249b
 80123cc:	08012457 	.word	0x08012457
 80123d0:	0801249b 	.word	0x0801249b
 80123d4:	0801249b 	.word	0x0801249b
 80123d8:	0801249b 	.word	0x0801249b
 80123dc:	0801249b 	.word	0x0801249b
 80123e0:	0801249b 	.word	0x0801249b
 80123e4:	0801249b 	.word	0x0801249b
 80123e8:	0801249b 	.word	0x0801249b
 80123ec:	08012467 	.word	0x08012467
 80123f0:	0801249b 	.word	0x0801249b
 80123f4:	0801249b 	.word	0x0801249b
 80123f8:	0801249b 	.word	0x0801249b
 80123fc:	0801249b 	.word	0x0801249b
 8012400:	0801249b 	.word	0x0801249b
 8012404:	0801249b 	.word	0x0801249b
 8012408:	0801249b 	.word	0x0801249b
 801240c:	0801249b 	.word	0x0801249b
 8012410:	0801249b 	.word	0x0801249b
 8012414:	0801249b 	.word	0x0801249b
 8012418:	0801249b 	.word	0x0801249b
 801241c:	0801249b 	.word	0x0801249b
 8012420:	0801249b 	.word	0x0801249b
 8012424:	0801249b 	.word	0x0801249b
 8012428:	0801249b 	.word	0x0801249b
 801242c:	0801248d 	.word	0x0801248d
 8012430:	2b40      	cmp	r3, #64	; 0x40
 8012432:	d02e      	beq.n	8012492 <UART_SetConfig+0xab2>
 8012434:	e031      	b.n	801249a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012436:	f7f9 f8cd 	bl	800b5d4 <HAL_RCC_GetPCLK1Freq>
 801243a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801243c:	e033      	b.n	80124a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801243e:	f7f9 f8df 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 8012442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012444:	e02f      	b.n	80124a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801244a:	4618      	mov	r0, r3
 801244c:	f7fa ff76 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012454:	e027      	b.n	80124a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012456:	f107 0318 	add.w	r3, r7, #24
 801245a:	4618      	mov	r0, r3
 801245c:	f7fb f8c2 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012464:	e01f      	b.n	80124a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012466:	4b69      	ldr	r3, [pc, #420]	; (801260c <UART_SetConfig+0xc2c>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f003 0320 	and.w	r3, r3, #32
 801246e:	2b00      	cmp	r3, #0
 8012470:	d009      	beq.n	8012486 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012472:	4b66      	ldr	r3, [pc, #408]	; (801260c <UART_SetConfig+0xc2c>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	08db      	lsrs	r3, r3, #3
 8012478:	f003 0303 	and.w	r3, r3, #3
 801247c:	4a64      	ldr	r2, [pc, #400]	; (8012610 <UART_SetConfig+0xc30>)
 801247e:	fa22 f303 	lsr.w	r3, r2, r3
 8012482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012484:	e00f      	b.n	80124a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8012486:	4b62      	ldr	r3, [pc, #392]	; (8012610 <UART_SetConfig+0xc30>)
 8012488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801248a:	e00c      	b.n	80124a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801248c:	4b61      	ldr	r3, [pc, #388]	; (8012614 <UART_SetConfig+0xc34>)
 801248e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012490:	e009      	b.n	80124a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012498:	e005      	b.n	80124a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801249a:	2300      	movs	r3, #0
 801249c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801249e:	2301      	movs	r3, #1
 80124a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80124a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80124a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f000 80ea 	beq.w	8012682 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b2:	4a55      	ldr	r2, [pc, #340]	; (8012608 <UART_SetConfig+0xc28>)
 80124b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124b8:	461a      	mov	r2, r3
 80124ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80124c0:	005a      	lsls	r2, r3, #1
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	085b      	lsrs	r3, r3, #1
 80124c8:	441a      	add	r2, r3
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80124d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	2b0f      	cmp	r3, #15
 80124d8:	d916      	bls.n	8012508 <UART_SetConfig+0xb28>
 80124da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124e0:	d212      	bcs.n	8012508 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80124e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	f023 030f 	bic.w	r3, r3, #15
 80124ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80124ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ee:	085b      	lsrs	r3, r3, #1
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	f003 0307 	and.w	r3, r3, #7
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80124fa:	4313      	orrs	r3, r2
 80124fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012504:	60da      	str	r2, [r3, #12]
 8012506:	e0bc      	b.n	8012682 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012508:	2301      	movs	r3, #1
 801250a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801250e:	e0b8      	b.n	8012682 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012510:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012514:	2b20      	cmp	r3, #32
 8012516:	dc4b      	bgt.n	80125b0 <UART_SetConfig+0xbd0>
 8012518:	2b00      	cmp	r3, #0
 801251a:	f2c0 8087 	blt.w	801262c <UART_SetConfig+0xc4c>
 801251e:	2b20      	cmp	r3, #32
 8012520:	f200 8084 	bhi.w	801262c <UART_SetConfig+0xc4c>
 8012524:	a201      	add	r2, pc, #4	; (adr r2, 801252c <UART_SetConfig+0xb4c>)
 8012526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801252a:	bf00      	nop
 801252c:	080125b7 	.word	0x080125b7
 8012530:	080125bf 	.word	0x080125bf
 8012534:	0801262d 	.word	0x0801262d
 8012538:	0801262d 	.word	0x0801262d
 801253c:	080125c7 	.word	0x080125c7
 8012540:	0801262d 	.word	0x0801262d
 8012544:	0801262d 	.word	0x0801262d
 8012548:	0801262d 	.word	0x0801262d
 801254c:	080125d7 	.word	0x080125d7
 8012550:	0801262d 	.word	0x0801262d
 8012554:	0801262d 	.word	0x0801262d
 8012558:	0801262d 	.word	0x0801262d
 801255c:	0801262d 	.word	0x0801262d
 8012560:	0801262d 	.word	0x0801262d
 8012564:	0801262d 	.word	0x0801262d
 8012568:	0801262d 	.word	0x0801262d
 801256c:	080125e7 	.word	0x080125e7
 8012570:	0801262d 	.word	0x0801262d
 8012574:	0801262d 	.word	0x0801262d
 8012578:	0801262d 	.word	0x0801262d
 801257c:	0801262d 	.word	0x0801262d
 8012580:	0801262d 	.word	0x0801262d
 8012584:	0801262d 	.word	0x0801262d
 8012588:	0801262d 	.word	0x0801262d
 801258c:	0801262d 	.word	0x0801262d
 8012590:	0801262d 	.word	0x0801262d
 8012594:	0801262d 	.word	0x0801262d
 8012598:	0801262d 	.word	0x0801262d
 801259c:	0801262d 	.word	0x0801262d
 80125a0:	0801262d 	.word	0x0801262d
 80125a4:	0801262d 	.word	0x0801262d
 80125a8:	0801262d 	.word	0x0801262d
 80125ac:	0801261f 	.word	0x0801261f
 80125b0:	2b40      	cmp	r3, #64	; 0x40
 80125b2:	d037      	beq.n	8012624 <UART_SetConfig+0xc44>
 80125b4:	e03a      	b.n	801262c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80125b6:	f7f9 f80d 	bl	800b5d4 <HAL_RCC_GetPCLK1Freq>
 80125ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80125bc:	e03c      	b.n	8012638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80125be:	f7f9 f81f 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 80125c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80125c4:	e038      	b.n	8012638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80125c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fa feb6 	bl	800d33c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80125d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125d4:	e030      	b.n	8012638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80125d6:	f107 0318 	add.w	r3, r7, #24
 80125da:	4618      	mov	r0, r3
 80125dc:	f7fb f802 	bl	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80125e4:	e028      	b.n	8012638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125e6:	4b09      	ldr	r3, [pc, #36]	; (801260c <UART_SetConfig+0xc2c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f003 0320 	and.w	r3, r3, #32
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d012      	beq.n	8012618 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80125f2:	4b06      	ldr	r3, [pc, #24]	; (801260c <UART_SetConfig+0xc2c>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	08db      	lsrs	r3, r3, #3
 80125f8:	f003 0303 	and.w	r3, r3, #3
 80125fc:	4a04      	ldr	r2, [pc, #16]	; (8012610 <UART_SetConfig+0xc30>)
 80125fe:	fa22 f303 	lsr.w	r3, r2, r3
 8012602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012604:	e018      	b.n	8012638 <UART_SetConfig+0xc58>
 8012606:	bf00      	nop
 8012608:	0801f914 	.word	0x0801f914
 801260c:	58024400 	.word	0x58024400
 8012610:	03d09000 	.word	0x03d09000
 8012614:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012618:	4b24      	ldr	r3, [pc, #144]	; (80126ac <UART_SetConfig+0xccc>)
 801261a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801261c:	e00c      	b.n	8012638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801261e:	4b24      	ldr	r3, [pc, #144]	; (80126b0 <UART_SetConfig+0xcd0>)
 8012620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012622:	e009      	b.n	8012638 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801262a:	e005      	b.n	8012638 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801262c:	2300      	movs	r3, #0
 801262e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012630:	2301      	movs	r3, #1
 8012632:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012636:	bf00      	nop
    }

    if (pclk != 0U)
 8012638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801263a:	2b00      	cmp	r3, #0
 801263c:	d021      	beq.n	8012682 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012642:	4a1c      	ldr	r2, [pc, #112]	; (80126b4 <UART_SetConfig+0xcd4>)
 8012644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012648:	461a      	mov	r2, r3
 801264a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801264c:	fbb3 f2f2 	udiv	r2, r3, r2
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	085b      	lsrs	r3, r3, #1
 8012656:	441a      	add	r2, r3
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012660:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012664:	2b0f      	cmp	r3, #15
 8012666:	d909      	bls.n	801267c <UART_SetConfig+0xc9c>
 8012668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801266e:	d205      	bcs.n	801267c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012672:	b29a      	uxth	r2, r3
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	60da      	str	r2, [r3, #12]
 801267a:	e002      	b.n	8012682 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801267c:	2301      	movs	r3, #1
 801267e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	2201      	movs	r2, #1
 8012686:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	2201      	movs	r2, #1
 801268e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2200      	movs	r2, #0
 8012696:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	2200      	movs	r2, #0
 801269c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801269e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3748      	adds	r7, #72	; 0x48
 80126a6:	46bd      	mov	sp, r7
 80126a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80126ac:	03d09000 	.word	0x03d09000
 80126b0:	003d0900 	.word	0x003d0900
 80126b4:	0801f914 	.word	0x0801f914

080126b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126c4:	f003 0301 	and.w	r3, r3, #1
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d00a      	beq.n	80126e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	430a      	orrs	r2, r1
 80126e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126e6:	f003 0302 	and.w	r3, r3, #2
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00a      	beq.n	8012704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	430a      	orrs	r2, r1
 8012702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012708:	f003 0304 	and.w	r3, r3, #4
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00a      	beq.n	8012726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	430a      	orrs	r2, r1
 8012724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801272a:	f003 0308 	and.w	r3, r3, #8
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00a      	beq.n	8012748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	430a      	orrs	r2, r1
 8012746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801274c:	f003 0310 	and.w	r3, r3, #16
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00a      	beq.n	801276a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	689b      	ldr	r3, [r3, #8]
 801275a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	430a      	orrs	r2, r1
 8012768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801276e:	f003 0320 	and.w	r3, r3, #32
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00a      	beq.n	801278c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	689b      	ldr	r3, [r3, #8]
 801277c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	430a      	orrs	r2, r1
 801278a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012794:	2b00      	cmp	r3, #0
 8012796:	d01a      	beq.n	80127ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	430a      	orrs	r2, r1
 80127ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127b6:	d10a      	bne.n	80127ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	430a      	orrs	r2, r1
 80127cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00a      	beq.n	80127f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	430a      	orrs	r2, r1
 80127ee:	605a      	str	r2, [r3, #4]
  }
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b098      	sub	sp, #96	; 0x60
 8012800:	af02      	add	r7, sp, #8
 8012802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2200      	movs	r2, #0
 8012808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801280c:	f7f1 fbd4 	bl	8003fb8 <HAL_GetTick>
 8012810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f003 0308 	and.w	r3, r3, #8
 801281c:	2b08      	cmp	r3, #8
 801281e:	d12f      	bne.n	8012880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012824:	9300      	str	r3, [sp, #0]
 8012826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012828:	2200      	movs	r2, #0
 801282a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f88e 	bl	8012950 <UART_WaitOnFlagUntilTimeout>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	d022      	beq.n	8012880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	e853 3f00 	ldrex	r3, [r3]
 8012846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801284a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801284e:	653b      	str	r3, [r7, #80]	; 0x50
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	461a      	mov	r2, r3
 8012856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012858:	647b      	str	r3, [r7, #68]	; 0x44
 801285a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801285c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801285e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012860:	e841 2300 	strex	r3, r2, [r1]
 8012864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012868:	2b00      	cmp	r3, #0
 801286a:	d1e6      	bne.n	801283a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2220      	movs	r2, #32
 8012870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801287c:	2303      	movs	r3, #3
 801287e:	e063      	b.n	8012948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f003 0304 	and.w	r3, r3, #4
 801288a:	2b04      	cmp	r3, #4
 801288c:	d149      	bne.n	8012922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801288e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012896:	2200      	movs	r2, #0
 8012898:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f000 f857 	bl	8012950 <UART_WaitOnFlagUntilTimeout>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d03c      	beq.n	8012922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b0:	e853 3f00 	ldrex	r3, [r3]
 80128b4:	623b      	str	r3, [r7, #32]
   return(result);
 80128b6:	6a3b      	ldr	r3, [r7, #32]
 80128b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	461a      	mov	r2, r3
 80128c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128c6:	633b      	str	r3, [r7, #48]	; 0x30
 80128c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ce:	e841 2300 	strex	r3, r2, [r1]
 80128d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80128d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d1e6      	bne.n	80128a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	3308      	adds	r3, #8
 80128e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	e853 3f00 	ldrex	r3, [r3]
 80128e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f023 0301 	bic.w	r3, r3, #1
 80128f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	3308      	adds	r3, #8
 80128f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80128fa:	61fa      	str	r2, [r7, #28]
 80128fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128fe:	69b9      	ldr	r1, [r7, #24]
 8012900:	69fa      	ldr	r2, [r7, #28]
 8012902:	e841 2300 	strex	r3, r2, [r1]
 8012906:	617b      	str	r3, [r7, #20]
   return(result);
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1e5      	bne.n	80128da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2220      	movs	r2, #32
 8012912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801291e:	2303      	movs	r3, #3
 8012920:	e012      	b.n	8012948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2220      	movs	r2, #32
 8012926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2220      	movs	r2, #32
 801292e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2200      	movs	r2, #0
 801293c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2200      	movs	r2, #0
 8012942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	3758      	adds	r7, #88	; 0x58
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	603b      	str	r3, [r7, #0]
 801295c:	4613      	mov	r3, r2
 801295e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012960:	e049      	b.n	80129f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012962:	69bb      	ldr	r3, [r7, #24]
 8012964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012968:	d045      	beq.n	80129f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801296a:	f7f1 fb25 	bl	8003fb8 <HAL_GetTick>
 801296e:	4602      	mov	r2, r0
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	69ba      	ldr	r2, [r7, #24]
 8012976:	429a      	cmp	r2, r3
 8012978:	d302      	bcc.n	8012980 <UART_WaitOnFlagUntilTimeout+0x30>
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012980:	2303      	movs	r3, #3
 8012982:	e048      	b.n	8012a16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f003 0304 	and.w	r3, r3, #4
 801298e:	2b00      	cmp	r3, #0
 8012990:	d031      	beq.n	80129f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	69db      	ldr	r3, [r3, #28]
 8012998:	f003 0308 	and.w	r3, r3, #8
 801299c:	2b08      	cmp	r3, #8
 801299e:	d110      	bne.n	80129c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2208      	movs	r2, #8
 80129a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f000 f839 	bl	8012a20 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2208      	movs	r2, #8
 80129b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2200      	movs	r2, #0
 80129ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80129be:	2301      	movs	r3, #1
 80129c0:	e029      	b.n	8012a16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	69db      	ldr	r3, [r3, #28]
 80129c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80129d0:	d111      	bne.n	80129f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80129da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f000 f81f 	bl	8012a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2220      	movs	r2, #32
 80129e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	2200      	movs	r2, #0
 80129ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80129f2:	2303      	movs	r3, #3
 80129f4:	e00f      	b.n	8012a16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	69da      	ldr	r2, [r3, #28]
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	4013      	ands	r3, r2
 8012a00:	68ba      	ldr	r2, [r7, #8]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	bf0c      	ite	eq
 8012a06:	2301      	moveq	r3, #1
 8012a08:	2300      	movne	r3, #0
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	79fb      	ldrb	r3, [r7, #7]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d0a6      	beq.n	8012962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012a14:	2300      	movs	r3, #0
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
	...

08012a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b095      	sub	sp, #84	; 0x54
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a30:	e853 3f00 	ldrex	r3, [r3]
 8012a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	461a      	mov	r2, r3
 8012a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a46:	643b      	str	r3, [r7, #64]	; 0x40
 8012a48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a4e:	e841 2300 	strex	r3, r2, [r1]
 8012a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1e6      	bne.n	8012a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	3308      	adds	r3, #8
 8012a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a62:	6a3b      	ldr	r3, [r7, #32]
 8012a64:	e853 3f00 	ldrex	r3, [r3]
 8012a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8012a6a:	69fa      	ldr	r2, [r7, #28]
 8012a6c:	4b1e      	ldr	r3, [pc, #120]	; (8012ae8 <UART_EndRxTransfer+0xc8>)
 8012a6e:	4013      	ands	r3, r2
 8012a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	3308      	adds	r3, #8
 8012a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a82:	e841 2300 	strex	r3, r2, [r1]
 8012a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d1e5      	bne.n	8012a5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d118      	bne.n	8012ac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	e853 3f00 	ldrex	r3, [r3]
 8012aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	f023 0310 	bic.w	r3, r3, #16
 8012aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ab4:	61bb      	str	r3, [r7, #24]
 8012ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ab8:	6979      	ldr	r1, [r7, #20]
 8012aba:	69ba      	ldr	r2, [r7, #24]
 8012abc:	e841 2300 	strex	r3, r2, [r1]
 8012ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d1e6      	bne.n	8012a96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2220      	movs	r2, #32
 8012acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012adc:	bf00      	nop
 8012ade:	3754      	adds	r7, #84	; 0x54
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	effffffe 	.word	0xeffffffe

08012aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012afa:	2b01      	cmp	r3, #1
 8012afc:	d101      	bne.n	8012b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8012afe:	2302      	movs	r3, #2
 8012b00:	e027      	b.n	8012b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2201      	movs	r2, #1
 8012b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2224      	movs	r2, #36	; 0x24
 8012b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f022 0201 	bic.w	r2, r2, #1
 8012b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2200      	movs	r2, #0
 8012b36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2220      	movs	r2, #32
 8012b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b50:	2300      	movs	r3, #0
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3714      	adds	r7, #20
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr

08012b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b5e:	b580      	push	{r7, lr}
 8012b60:	b084      	sub	sp, #16
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
 8012b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d101      	bne.n	8012b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012b72:	2302      	movs	r3, #2
 8012b74:	e02d      	b.n	8012bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2224      	movs	r2, #36	; 0x24
 8012b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f022 0201 	bic.w	r2, r2, #1
 8012b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	689b      	ldr	r3, [r3, #8]
 8012ba4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	683a      	ldr	r2, [r7, #0]
 8012bae:	430a      	orrs	r2, r1
 8012bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 f850 	bl	8012c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	68fa      	ldr	r2, [r7, #12]
 8012bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2220      	movs	r2, #32
 8012bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3710      	adds	r7, #16
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b084      	sub	sp, #16
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d101      	bne.n	8012bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012bee:	2302      	movs	r3, #2
 8012bf0:	e02d      	b.n	8012c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2224      	movs	r2, #36	; 0x24
 8012bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f022 0201 	bic.w	r2, r2, #1
 8012c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	689b      	ldr	r3, [r3, #8]
 8012c20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	683a      	ldr	r2, [r7, #0]
 8012c2a:	430a      	orrs	r2, r1
 8012c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f000 f812 	bl	8012c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	68fa      	ldr	r2, [r7, #12]
 8012c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2220      	movs	r2, #32
 8012c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3710      	adds	r7, #16
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
	...

08012c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d108      	bne.n	8012c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2201      	movs	r2, #1
 8012c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012c78:	e031      	b.n	8012cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012c7a:	2310      	movs	r3, #16
 8012c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012c7e:	2310      	movs	r3, #16
 8012c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	689b      	ldr	r3, [r3, #8]
 8012c88:	0e5b      	lsrs	r3, r3, #25
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	f003 0307 	and.w	r3, r3, #7
 8012c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	0f5b      	lsrs	r3, r3, #29
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 0307 	and.w	r3, r3, #7
 8012ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ca2:	7bbb      	ldrb	r3, [r7, #14]
 8012ca4:	7b3a      	ldrb	r2, [r7, #12]
 8012ca6:	4911      	ldr	r1, [pc, #68]	; (8012cec <UARTEx_SetNbDataToProcess+0x94>)
 8012ca8:	5c8a      	ldrb	r2, [r1, r2]
 8012caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012cae:	7b3a      	ldrb	r2, [r7, #12]
 8012cb0:	490f      	ldr	r1, [pc, #60]	; (8012cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8012cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012cc0:	7bfb      	ldrb	r3, [r7, #15]
 8012cc2:	7b7a      	ldrb	r2, [r7, #13]
 8012cc4:	4909      	ldr	r1, [pc, #36]	; (8012cec <UARTEx_SetNbDataToProcess+0x94>)
 8012cc6:	5c8a      	ldrb	r2, [r1, r2]
 8012cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012ccc:	7b7a      	ldrb	r2, [r7, #13]
 8012cce:	4908      	ldr	r1, [pc, #32]	; (8012cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8012cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012cde:	bf00      	nop
 8012ce0:	3714      	adds	r7, #20
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop
 8012cec:	0801f92c 	.word	0x0801f92c
 8012cf0:	0801f934 	.word	0x0801f934

08012cf4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012cf4:	b084      	sub	sp, #16
 8012cf6:	b480      	push	{r7}
 8012cf8:	b085      	sub	sp, #20
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	f107 001c 	add.w	r0, r7, #28
 8012d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012d06:	2300      	movs	r3, #0
 8012d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012d0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012d0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012d0e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012d12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012d16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012d1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012d1c:	68fa      	ldr	r2, [r7, #12]
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	685a      	ldr	r2, [r3, #4]
 8012d26:	4b07      	ldr	r3, [pc, #28]	; (8012d44 <SDMMC_Init+0x50>)
 8012d28:	4013      	ands	r3, r2
 8012d2a:	68fa      	ldr	r2, [r7, #12]
 8012d2c:	431a      	orrs	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012d32:	2300      	movs	r3, #0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3714      	adds	r7, #20
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3e:	b004      	add	sp, #16
 8012d40:	4770      	bx	lr
 8012d42:	bf00      	nop
 8012d44:	ffc02c00 	.word	0xffc02c00

08012d48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr

08012d62 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012d62:	b480      	push	{r7}
 8012d64:	b083      	sub	sp, #12
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
 8012d6a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012d76:	2300      	movs	r3, #0
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr

08012d84 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b083      	sub	sp, #12
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f043 0203 	orr.w	r2, r3, #3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012d98:	2300      	movs	r3, #0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr

08012da6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012da6:	b480      	push	{r7}
 8012da8:	b083      	sub	sp, #12
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	f003 0303 	and.w	r3, r3, #3
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	370c      	adds	r7, #12
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
	...

08012dc4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b085      	sub	sp, #20
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012de2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012de8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012dee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	4313      	orrs	r3, r2
 8012df4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	68da      	ldr	r2, [r3, #12]
 8012dfa:	4b06      	ldr	r3, [pc, #24]	; (8012e14 <SDMMC_SendCommand+0x50>)
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	68fa      	ldr	r2, [r7, #12]
 8012e00:	431a      	orrs	r2, r3
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012e06:	2300      	movs	r3, #0
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3714      	adds	r7, #20
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr
 8012e14:	fffee0c0 	.word	0xfffee0c0

08012e18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b083      	sub	sp, #12
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	691b      	ldr	r3, [r3, #16]
 8012e24:	b2db      	uxtb	r3, r3
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	370c      	adds	r7, #12
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012e32:	b480      	push	{r7}
 8012e34:	b085      	sub	sp, #20
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	6078      	str	r0, [r7, #4]
 8012e3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	3314      	adds	r3, #20
 8012e40:	461a      	mov	r2, r3
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	4413      	add	r3, r2
 8012e46:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3714      	adds	r7, #20
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr

08012e58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b085      	sub	sp, #20
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e7e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012e84:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012e8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e8c:	68fa      	ldr	r2, [r7, #12]
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	431a      	orrs	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012ea2:	2300      	movs	r3, #0

}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3714      	adds	r7, #20
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b088      	sub	sp, #32
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012ebe:	2310      	movs	r3, #16
 8012ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ed2:	f107 0308 	add.w	r3, r7, #8
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7ff ff73 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ee2:	2110      	movs	r1, #16
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f000 fa5f 	bl	80133a8 <SDMMC_GetCmdResp1>
 8012eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012eec:	69fb      	ldr	r3, [r7, #28]
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3720      	adds	r7, #32
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012ef6:	b580      	push	{r7, lr}
 8012ef8:	b088      	sub	sp, #32
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	6078      	str	r0, [r7, #4]
 8012efe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012f04:	2311      	movs	r3, #17
 8012f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f18:	f107 0308 	add.w	r3, r7, #8
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f7ff ff50 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f28:	2111      	movs	r1, #17
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 fa3c 	bl	80133a8 <SDMMC_GetCmdResp1>
 8012f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f32:	69fb      	ldr	r3, [r7, #28]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3720      	adds	r7, #32
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b088      	sub	sp, #32
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012f4a:	2312      	movs	r3, #18
 8012f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f54:	2300      	movs	r3, #0
 8012f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f5e:	f107 0308 	add.w	r3, r7, #8
 8012f62:	4619      	mov	r1, r3
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7ff ff2d 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f6e:	2112      	movs	r1, #18
 8012f70:	6878      	ldr	r0, [r7, #4]
 8012f72:	f000 fa19 	bl	80133a8 <SDMMC_GetCmdResp1>
 8012f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f78:	69fb      	ldr	r3, [r7, #28]
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3720      	adds	r7, #32
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b088      	sub	sp, #32
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012f90:	2318      	movs	r3, #24
 8012f92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fa4:	f107 0308 	add.w	r3, r7, #8
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7ff ff0a 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fb4:	2118      	movs	r1, #24
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 f9f6 	bl	80133a8 <SDMMC_GetCmdResp1>
 8012fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fbe:	69fb      	ldr	r3, [r7, #28]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3720      	adds	r7, #32
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b088      	sub	sp, #32
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012fd6:	2319      	movs	r3, #25
 8012fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fea:	f107 0308 	add.w	r3, r7, #8
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7ff fee7 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ffa:	2119      	movs	r1, #25
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 f9d3 	bl	80133a8 <SDMMC_GetCmdResp1>
 8013002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013004:	69fb      	ldr	r3, [r7, #28]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3720      	adds	r7, #32
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
	...

08013010 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b088      	sub	sp, #32
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013018:	2300      	movs	r3, #0
 801301a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801301c:	230c      	movs	r3, #12
 801301e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013026:	2300      	movs	r3, #0
 8013028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801302a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801302e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013048:	f107 0308 	add.w	r3, r7, #8
 801304c:	4619      	mov	r1, r3
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f7ff feb8 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013054:	4a0b      	ldr	r2, [pc, #44]	; (8013084 <SDMMC_CmdStopTransfer+0x74>)
 8013056:	210c      	movs	r1, #12
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 f9a5 	bl	80133a8 <SDMMC_GetCmdResp1>
 801305e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801306c:	69fb      	ldr	r3, [r7, #28]
 801306e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013072:	d101      	bne.n	8013078 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013074:	2300      	movs	r3, #0
 8013076:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013078:	69fb      	ldr	r3, [r7, #28]
}
 801307a:	4618      	mov	r0, r3
 801307c:	3720      	adds	r7, #32
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	05f5e100 	.word	0x05f5e100

08013088 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b088      	sub	sp, #32
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013096:	2307      	movs	r3, #7
 8013098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801309a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801309e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130a0:	2300      	movs	r3, #0
 80130a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130aa:	f107 0308 	add.w	r3, r7, #8
 80130ae:	4619      	mov	r1, r3
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ff fe87 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80130b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80130ba:	2107      	movs	r1, #7
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 f973 	bl	80133a8 <SDMMC_GetCmdResp1>
 80130c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130c4:	69fb      	ldr	r3, [r7, #28]
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3720      	adds	r7, #32
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b088      	sub	sp, #32
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80130d6:	2300      	movs	r3, #0
 80130d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80130da:	2300      	movs	r3, #0
 80130dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80130de:	2300      	movs	r3, #0
 80130e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130e2:	2300      	movs	r3, #0
 80130e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130ec:	f107 0308 	add.w	r3, r7, #8
 80130f0:	4619      	mov	r1, r3
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7ff fe66 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fb97 	bl	801382c <SDMMC_GetCmdError>
 80130fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013100:	69fb      	ldr	r3, [r7, #28]
}
 8013102:	4618      	mov	r0, r3
 8013104:	3720      	adds	r7, #32
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}

0801310a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801310a:	b580      	push	{r7, lr}
 801310c:	b088      	sub	sp, #32
 801310e:	af00      	add	r7, sp, #0
 8013110:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013112:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013118:	2308      	movs	r3, #8
 801311a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801311c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013122:	2300      	movs	r3, #0
 8013124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801312a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801312c:	f107 0308 	add.w	r3, r7, #8
 8013130:	4619      	mov	r1, r3
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f7ff fe46 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 fb29 	bl	8013790 <SDMMC_GetCmdResp7>
 801313e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013140:	69fb      	ldr	r3, [r7, #28]
}
 8013142:	4618      	mov	r0, r3
 8013144:	3720      	adds	r7, #32
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}

0801314a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801314a:	b580      	push	{r7, lr}
 801314c:	b088      	sub	sp, #32
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
 8013152:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013158:	2337      	movs	r3, #55	; 0x37
 801315a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801315c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013162:	2300      	movs	r3, #0
 8013164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801316a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801316c:	f107 0308 	add.w	r3, r7, #8
 8013170:	4619      	mov	r1, r3
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7ff fe26 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013178:	f241 3288 	movw	r2, #5000	; 0x1388
 801317c:	2137      	movs	r1, #55	; 0x37
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f000 f912 	bl	80133a8 <SDMMC_GetCmdResp1>
 8013184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013186:	69fb      	ldr	r3, [r7, #28]
}
 8013188:	4618      	mov	r0, r3
 801318a:	3720      	adds	r7, #32
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b088      	sub	sp, #32
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801319e:	2329      	movs	r3, #41	; 0x29
 80131a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131a8:	2300      	movs	r3, #0
 80131aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131b2:	f107 0308 	add.w	r3, r7, #8
 80131b6:	4619      	mov	r1, r3
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f7ff fe03 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f000 fa2e 	bl	8013620 <SDMMC_GetCmdResp3>
 80131c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131c6:	69fb      	ldr	r3, [r7, #28]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3720      	adds	r7, #32
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b088      	sub	sp, #32
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80131de:	2306      	movs	r3, #6
 80131e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131e8:	2300      	movs	r3, #0
 80131ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131f2:	f107 0308 	add.w	r3, r7, #8
 80131f6:	4619      	mov	r1, r3
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff fde3 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80131fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013202:	2106      	movs	r1, #6
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 f8cf 	bl	80133a8 <SDMMC_GetCmdResp1>
 801320a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801320c:	69fb      	ldr	r3, [r7, #28]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3720      	adds	r7, #32
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b088      	sub	sp, #32
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801321e:	2300      	movs	r3, #0
 8013220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013222:	2333      	movs	r3, #51	; 0x33
 8013224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013226:	f44f 7380 	mov.w	r3, #256	; 0x100
 801322a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801322c:	2300      	movs	r3, #0
 801322e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013236:	f107 0308 	add.w	r3, r7, #8
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7ff fdc1 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013242:	f241 3288 	movw	r2, #5000	; 0x1388
 8013246:	2133      	movs	r1, #51	; 0x33
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 f8ad 	bl	80133a8 <SDMMC_GetCmdResp1>
 801324e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013250:	69fb      	ldr	r3, [r7, #28]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b088      	sub	sp, #32
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013262:	2300      	movs	r3, #0
 8013264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013266:	2302      	movs	r3, #2
 8013268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801326a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801326e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013270:	2300      	movs	r3, #0
 8013272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801327a:	f107 0308 	add.w	r3, r7, #8
 801327e:	4619      	mov	r1, r3
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f7ff fd9f 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f000 f980 	bl	801358c <SDMMC_GetCmdResp2>
 801328c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801328e:	69fb      	ldr	r3, [r7, #28]
}
 8013290:	4618      	mov	r0, r3
 8013292:	3720      	adds	r7, #32
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b088      	sub	sp, #32
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80132a6:	2309      	movs	r3, #9
 80132a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80132aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80132ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132b0:	2300      	movs	r3, #0
 80132b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132ba:	f107 0308 	add.w	r3, r7, #8
 80132be:	4619      	mov	r1, r3
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff fd7f 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f000 f960 	bl	801358c <SDMMC_GetCmdResp2>
 80132cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132ce:	69fb      	ldr	r3, [r7, #28]
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3720      	adds	r7, #32
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b088      	sub	sp, #32
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80132e2:	2300      	movs	r3, #0
 80132e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80132e6:	2303      	movs	r3, #3
 80132e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80132ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132f0:	2300      	movs	r3, #0
 80132f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132fa:	f107 0308 	add.w	r3, r7, #8
 80132fe:	4619      	mov	r1, r3
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7ff fd5f 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013306:	683a      	ldr	r2, [r7, #0]
 8013308:	2103      	movs	r1, #3
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 f9c8 	bl	80136a0 <SDMMC_GetCmdResp6>
 8013310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013312:	69fb      	ldr	r3, [r7, #28]
}
 8013314:	4618      	mov	r0, r3
 8013316:	3720      	adds	r7, #32
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b088      	sub	sp, #32
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801332a:	230d      	movs	r3, #13
 801332c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801332e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013334:	2300      	movs	r3, #0
 8013336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801333c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801333e:	f107 0308 	add.w	r3, r7, #8
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff fd3d 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801334a:	f241 3288 	movw	r2, #5000	; 0x1388
 801334e:	210d      	movs	r1, #13
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 f829 	bl	80133a8 <SDMMC_GetCmdResp1>
 8013356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013358:	69fb      	ldr	r3, [r7, #28]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3720      	adds	r7, #32
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b088      	sub	sp, #32
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801336a:	2300      	movs	r3, #0
 801336c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801336e:	230d      	movs	r3, #13
 8013370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013378:	2300      	movs	r3, #0
 801337a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801337c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013382:	f107 0308 	add.w	r3, r7, #8
 8013386:	4619      	mov	r1, r3
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff fd1b 	bl	8012dc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013392:	210d      	movs	r1, #13
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f000 f807 	bl	80133a8 <SDMMC_GetCmdResp1>
 801339a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801339c:	69fb      	ldr	r3, [r7, #28]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3720      	adds	r7, #32
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
	...

080133a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b088      	sub	sp, #32
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	460b      	mov	r3, r1
 80133b2:	607a      	str	r2, [r7, #4]
 80133b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80133b6:	4b70      	ldr	r3, [pc, #448]	; (8013578 <SDMMC_GetCmdResp1+0x1d0>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	4a70      	ldr	r2, [pc, #448]	; (801357c <SDMMC_GetCmdResp1+0x1d4>)
 80133bc:	fba2 2303 	umull	r2, r3, r2, r3
 80133c0:	0a5a      	lsrs	r2, r3, #9
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	fb02 f303 	mul.w	r3, r2, r3
 80133c8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	1e5a      	subs	r2, r3, #1
 80133ce:	61fa      	str	r2, [r7, #28]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d102      	bne.n	80133da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80133d8:	e0c9      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133de:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80133e0:	69ba      	ldr	r2, [r7, #24]
 80133e2:	4b67      	ldr	r3, [pc, #412]	; (8013580 <SDMMC_GetCmdResp1+0x1d8>)
 80133e4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d0ef      	beq.n	80133ca <SDMMC_GetCmdResp1+0x22>
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d1ea      	bne.n	80133ca <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133f8:	f003 0304 	and.w	r3, r3, #4
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d004      	beq.n	801340a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2204      	movs	r2, #4
 8013404:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013406:	2304      	movs	r3, #4
 8013408:	e0b1      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d004      	beq.n	8013420 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2201      	movs	r2, #1
 801341a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801341c:	2301      	movs	r3, #1
 801341e:	e0a6      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	4a58      	ldr	r2, [pc, #352]	; (8013584 <SDMMC_GetCmdResp1+0x1dc>)
 8013424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7ff fcf6 	bl	8012e18 <SDMMC_GetCommandResponse>
 801342c:	4603      	mov	r3, r0
 801342e:	461a      	mov	r2, r3
 8013430:	7afb      	ldrb	r3, [r7, #11]
 8013432:	4293      	cmp	r3, r2
 8013434:	d001      	beq.n	801343a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013436:	2301      	movs	r3, #1
 8013438:	e099      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801343a:	2100      	movs	r1, #0
 801343c:	68f8      	ldr	r0, [r7, #12]
 801343e:	f7ff fcf8 	bl	8012e32 <SDMMC_GetResponse>
 8013442:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013444:	697a      	ldr	r2, [r7, #20]
 8013446:	4b50      	ldr	r3, [pc, #320]	; (8013588 <SDMMC_GetCmdResp1+0x1e0>)
 8013448:	4013      	ands	r3, r2
 801344a:	2b00      	cmp	r3, #0
 801344c:	d101      	bne.n	8013452 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801344e:	2300      	movs	r3, #0
 8013450:	e08d      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	2b00      	cmp	r3, #0
 8013456:	da02      	bge.n	801345e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801345c:	e087      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013464:	2b00      	cmp	r3, #0
 8013466:	d001      	beq.n	801346c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013468:	2340      	movs	r3, #64	; 0x40
 801346a:	e080      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013472:	2b00      	cmp	r3, #0
 8013474:	d001      	beq.n	801347a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013476:	2380      	movs	r3, #128	; 0x80
 8013478:	e079      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013488:	e071      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013490:	2b00      	cmp	r3, #0
 8013492:	d002      	beq.n	801349a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013498:	e069      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d002      	beq.n	80134aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80134a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134a8:	e061      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80134b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134b8:	e059      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d002      	beq.n	80134ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80134c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134c8:	e051      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80134d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80134d8:	e049      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80134e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80134e8:	e041      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d002      	beq.n	80134fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80134f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134f8:	e039      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013500:	2b00      	cmp	r3, #0
 8013502:	d002      	beq.n	801350a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013508:	e031      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013510:	2b00      	cmp	r3, #0
 8013512:	d002      	beq.n	801351a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013518:	e029      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013520:	2b00      	cmp	r3, #0
 8013522:	d002      	beq.n	801352a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013528:	e021      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013538:	e019      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013548:	e011      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013550:	2b00      	cmp	r3, #0
 8013552:	d002      	beq.n	801355a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013558:	e009      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	f003 0308 	and.w	r3, r3, #8
 8013560:	2b00      	cmp	r3, #0
 8013562:	d002      	beq.n	801356a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013564:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013568:	e001      	b.n	801356e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801356a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801356e:	4618      	mov	r0, r3
 8013570:	3720      	adds	r7, #32
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	24000000 	.word	0x24000000
 801357c:	10624dd3 	.word	0x10624dd3
 8013580:	00200045 	.word	0x00200045
 8013584:	002000c5 	.word	0x002000c5
 8013588:	fdffe008 	.word	0xfdffe008

0801358c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801358c:	b480      	push	{r7}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013594:	4b1f      	ldr	r3, [pc, #124]	; (8013614 <SDMMC_GetCmdResp2+0x88>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4a1f      	ldr	r2, [pc, #124]	; (8013618 <SDMMC_GetCmdResp2+0x8c>)
 801359a:	fba2 2303 	umull	r2, r3, r2, r3
 801359e:	0a5b      	lsrs	r3, r3, #9
 80135a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80135a4:	fb02 f303 	mul.w	r3, r2, r3
 80135a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	1e5a      	subs	r2, r3, #1
 80135ae:	60fa      	str	r2, [r7, #12]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d102      	bne.n	80135ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135b8:	e026      	b.n	8013608 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d0ef      	beq.n	80135aa <SDMMC_GetCmdResp2+0x1e>
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1ea      	bne.n	80135aa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135d8:	f003 0304 	and.w	r3, r3, #4
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d004      	beq.n	80135ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2204      	movs	r2, #4
 80135e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135e6:	2304      	movs	r3, #4
 80135e8:	e00e      	b.n	8013608 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ee:	f003 0301 	and.w	r3, r3, #1
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d004      	beq.n	8013600 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2201      	movs	r2, #1
 80135fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135fc:	2301      	movs	r3, #1
 80135fe:	e003      	b.n	8013608 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	4a06      	ldr	r2, [pc, #24]	; (801361c <SDMMC_GetCmdResp2+0x90>)
 8013604:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013606:	2300      	movs	r3, #0
}
 8013608:	4618      	mov	r0, r3
 801360a:	3714      	adds	r7, #20
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr
 8013614:	24000000 	.word	0x24000000
 8013618:	10624dd3 	.word	0x10624dd3
 801361c:	002000c5 	.word	0x002000c5

08013620 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013620:	b480      	push	{r7}
 8013622:	b085      	sub	sp, #20
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013628:	4b1a      	ldr	r3, [pc, #104]	; (8013694 <SDMMC_GetCmdResp3+0x74>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	4a1a      	ldr	r2, [pc, #104]	; (8013698 <SDMMC_GetCmdResp3+0x78>)
 801362e:	fba2 2303 	umull	r2, r3, r2, r3
 8013632:	0a5b      	lsrs	r3, r3, #9
 8013634:	f241 3288 	movw	r2, #5000	; 0x1388
 8013638:	fb02 f303 	mul.w	r3, r2, r3
 801363c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	1e5a      	subs	r2, r3, #1
 8013642:	60fa      	str	r2, [r7, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d102      	bne.n	801364e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801364c:	e01b      	b.n	8013686 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013652:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801365a:	2b00      	cmp	r3, #0
 801365c:	d0ef      	beq.n	801363e <SDMMC_GetCmdResp3+0x1e>
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1ea      	bne.n	801363e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801366c:	f003 0304 	and.w	r3, r3, #4
 8013670:	2b00      	cmp	r3, #0
 8013672:	d004      	beq.n	801367e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2204      	movs	r2, #4
 8013678:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801367a:	2304      	movs	r3, #4
 801367c:	e003      	b.n	8013686 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	4a06      	ldr	r2, [pc, #24]	; (801369c <SDMMC_GetCmdResp3+0x7c>)
 8013682:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013684:	2300      	movs	r3, #0
}
 8013686:	4618      	mov	r0, r3
 8013688:	3714      	adds	r7, #20
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop
 8013694:	24000000 	.word	0x24000000
 8013698:	10624dd3 	.word	0x10624dd3
 801369c:	002000c5 	.word	0x002000c5

080136a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b088      	sub	sp, #32
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	460b      	mov	r3, r1
 80136aa:	607a      	str	r2, [r7, #4]
 80136ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80136ae:	4b35      	ldr	r3, [pc, #212]	; (8013784 <SDMMC_GetCmdResp6+0xe4>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	4a35      	ldr	r2, [pc, #212]	; (8013788 <SDMMC_GetCmdResp6+0xe8>)
 80136b4:	fba2 2303 	umull	r2, r3, r2, r3
 80136b8:	0a5b      	lsrs	r3, r3, #9
 80136ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80136be:	fb02 f303 	mul.w	r3, r2, r3
 80136c2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	1e5a      	subs	r2, r3, #1
 80136c8:	61fa      	str	r2, [r7, #28]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d102      	bne.n	80136d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136d2:	e052      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136d8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d0ef      	beq.n	80136c4 <SDMMC_GetCmdResp6+0x24>
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1ea      	bne.n	80136c4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136f2:	f003 0304 	and.w	r3, r3, #4
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d004      	beq.n	8013704 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2204      	movs	r2, #4
 80136fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013700:	2304      	movs	r3, #4
 8013702:	e03a      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013708:	f003 0301 	and.w	r3, r3, #1
 801370c:	2b00      	cmp	r3, #0
 801370e:	d004      	beq.n	801371a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2201      	movs	r2, #1
 8013714:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013716:	2301      	movs	r3, #1
 8013718:	e02f      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f7ff fb7c 	bl	8012e18 <SDMMC_GetCommandResponse>
 8013720:	4603      	mov	r3, r0
 8013722:	461a      	mov	r2, r3
 8013724:	7afb      	ldrb	r3, [r7, #11]
 8013726:	4293      	cmp	r3, r2
 8013728:	d001      	beq.n	801372e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801372a:	2301      	movs	r3, #1
 801372c:	e025      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	4a16      	ldr	r2, [pc, #88]	; (801378c <SDMMC_GetCmdResp6+0xec>)
 8013732:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013734:	2100      	movs	r1, #0
 8013736:	68f8      	ldr	r0, [r7, #12]
 8013738:	f7ff fb7b 	bl	8012e32 <SDMMC_GetResponse>
 801373c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	0c1b      	lsrs	r3, r3, #16
 801374c:	b29a      	uxth	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8013752:	2300      	movs	r3, #0
 8013754:	e011      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801375c:	2b00      	cmp	r3, #0
 801375e:	d002      	beq.n	8013766 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013764:	e009      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013774:	e001      	b.n	801377a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801377a:	4618      	mov	r0, r3
 801377c:	3720      	adds	r7, #32
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	24000000 	.word	0x24000000
 8013788:	10624dd3 	.word	0x10624dd3
 801378c:	002000c5 	.word	0x002000c5

08013790 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013798:	4b22      	ldr	r3, [pc, #136]	; (8013824 <SDMMC_GetCmdResp7+0x94>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	4a22      	ldr	r2, [pc, #136]	; (8013828 <SDMMC_GetCmdResp7+0x98>)
 801379e:	fba2 2303 	umull	r2, r3, r2, r3
 80137a2:	0a5b      	lsrs	r3, r3, #9
 80137a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80137a8:	fb02 f303 	mul.w	r3, r2, r3
 80137ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	1e5a      	subs	r2, r3, #1
 80137b2:	60fa      	str	r2, [r7, #12]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d102      	bne.n	80137be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80137b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80137bc:	e02c      	b.n	8013818 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d0ef      	beq.n	80137ae <SDMMC_GetCmdResp7+0x1e>
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1ea      	bne.n	80137ae <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137dc:	f003 0304 	and.w	r3, r3, #4
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d004      	beq.n	80137ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2204      	movs	r2, #4
 80137e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137ea:	2304      	movs	r3, #4
 80137ec:	e014      	b.n	8013818 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137f2:	f003 0301 	and.w	r3, r3, #1
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d004      	beq.n	8013804 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2201      	movs	r2, #1
 80137fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013800:	2301      	movs	r3, #1
 8013802:	e009      	b.n	8013818 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801380c:	2b00      	cmp	r3, #0
 801380e:	d002      	beq.n	8013816 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2240      	movs	r2, #64	; 0x40
 8013814:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013816:	2300      	movs	r3, #0

}
 8013818:	4618      	mov	r0, r3
 801381a:	3714      	adds	r7, #20
 801381c:	46bd      	mov	sp, r7
 801381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013822:	4770      	bx	lr
 8013824:	24000000 	.word	0x24000000
 8013828:	10624dd3 	.word	0x10624dd3

0801382c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801382c:	b480      	push	{r7}
 801382e:	b085      	sub	sp, #20
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013834:	4b11      	ldr	r3, [pc, #68]	; (801387c <SDMMC_GetCmdError+0x50>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a11      	ldr	r2, [pc, #68]	; (8013880 <SDMMC_GetCmdError+0x54>)
 801383a:	fba2 2303 	umull	r2, r3, r2, r3
 801383e:	0a5b      	lsrs	r3, r3, #9
 8013840:	f241 3288 	movw	r2, #5000	; 0x1388
 8013844:	fb02 f303 	mul.w	r3, r2, r3
 8013848:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	1e5a      	subs	r2, r3, #1
 801384e:	60fa      	str	r2, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d102      	bne.n	801385a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013858:	e009      	b.n	801386e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013862:	2b00      	cmp	r3, #0
 8013864:	d0f1      	beq.n	801384a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4a06      	ldr	r2, [pc, #24]	; (8013884 <SDMMC_GetCmdError+0x58>)
 801386a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801386c:	2300      	movs	r3, #0
}
 801386e:	4618      	mov	r0, r3
 8013870:	3714      	adds	r7, #20
 8013872:	46bd      	mov	sp, r7
 8013874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013878:	4770      	bx	lr
 801387a:	bf00      	nop
 801387c:	24000000 	.word	0x24000000
 8013880:	10624dd3 	.word	0x10624dd3
 8013884:	002000c5 	.word	0x002000c5

08013888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013888:	b084      	sub	sp, #16
 801388a:	b580      	push	{r7, lr}
 801388c:	b084      	sub	sp, #16
 801388e:	af00      	add	r7, sp, #0
 8013890:	6078      	str	r0, [r7, #4]
 8013892:	f107 001c 	add.w	r0, r7, #28
 8013896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	2b01      	cmp	r3, #1
 801389e:	d120      	bne.n	80138e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	68da      	ldr	r2, [r3, #12]
 80138b0:	4b2a      	ldr	r3, [pc, #168]	; (801395c <USB_CoreInit+0xd4>)
 80138b2:	4013      	ands	r3, r2
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	68db      	ldr	r3, [r3, #12]
 80138bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80138c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d105      	bne.n	80138d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f001 faf8 	bl	8014ecc <USB_CoreReset>
 80138dc:	4603      	mov	r3, r0
 80138de:	73fb      	strb	r3, [r7, #15]
 80138e0:	e01a      	b.n	8013918 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	68db      	ldr	r3, [r3, #12]
 80138e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f001 faec 	bl	8014ecc <USB_CoreReset>
 80138f4:	4603      	mov	r3, r0
 80138f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80138f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d106      	bne.n	801390c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013902:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	639a      	str	r2, [r3, #56]	; 0x38
 801390a:	e005      	b.n	8013918 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391a:	2b01      	cmp	r3, #1
 801391c:	d116      	bne.n	801394c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013922:	b29a      	uxth	r2, r3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801392c:	4b0c      	ldr	r3, [pc, #48]	; (8013960 <USB_CoreInit+0xd8>)
 801392e:	4313      	orrs	r3, r2
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	689b      	ldr	r3, [r3, #8]
 8013938:	f043 0206 	orr.w	r2, r3, #6
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	f043 0220 	orr.w	r2, r3, #32
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801394c:	7bfb      	ldrb	r3, [r7, #15]
}
 801394e:	4618      	mov	r0, r3
 8013950:	3710      	adds	r7, #16
 8013952:	46bd      	mov	sp, r7
 8013954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013958:	b004      	add	sp, #16
 801395a:	4770      	bx	lr
 801395c:	ffbdffbf 	.word	0xffbdffbf
 8013960:	03ee0000 	.word	0x03ee0000

08013964 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013964:	b480      	push	{r7}
 8013966:	b087      	sub	sp, #28
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	4613      	mov	r3, r2
 8013970:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013972:	79fb      	ldrb	r3, [r7, #7]
 8013974:	2b02      	cmp	r3, #2
 8013976:	d165      	bne.n	8013a44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	4a41      	ldr	r2, [pc, #260]	; (8013a80 <USB_SetTurnaroundTime+0x11c>)
 801397c:	4293      	cmp	r3, r2
 801397e:	d906      	bls.n	801398e <USB_SetTurnaroundTime+0x2a>
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	4a40      	ldr	r2, [pc, #256]	; (8013a84 <USB_SetTurnaroundTime+0x120>)
 8013984:	4293      	cmp	r3, r2
 8013986:	d202      	bcs.n	801398e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013988:	230f      	movs	r3, #15
 801398a:	617b      	str	r3, [r7, #20]
 801398c:	e062      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	4a3c      	ldr	r2, [pc, #240]	; (8013a84 <USB_SetTurnaroundTime+0x120>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d306      	bcc.n	80139a4 <USB_SetTurnaroundTime+0x40>
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	4a3b      	ldr	r2, [pc, #236]	; (8013a88 <USB_SetTurnaroundTime+0x124>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d202      	bcs.n	80139a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801399e:	230e      	movs	r3, #14
 80139a0:	617b      	str	r3, [r7, #20]
 80139a2:	e057      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	4a38      	ldr	r2, [pc, #224]	; (8013a88 <USB_SetTurnaroundTime+0x124>)
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d306      	bcc.n	80139ba <USB_SetTurnaroundTime+0x56>
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	4a37      	ldr	r2, [pc, #220]	; (8013a8c <USB_SetTurnaroundTime+0x128>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d202      	bcs.n	80139ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80139b4:	230d      	movs	r3, #13
 80139b6:	617b      	str	r3, [r7, #20]
 80139b8:	e04c      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	4a33      	ldr	r2, [pc, #204]	; (8013a8c <USB_SetTurnaroundTime+0x128>)
 80139be:	4293      	cmp	r3, r2
 80139c0:	d306      	bcc.n	80139d0 <USB_SetTurnaroundTime+0x6c>
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	4a32      	ldr	r2, [pc, #200]	; (8013a90 <USB_SetTurnaroundTime+0x12c>)
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d802      	bhi.n	80139d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80139ca:	230c      	movs	r3, #12
 80139cc:	617b      	str	r3, [r7, #20]
 80139ce:	e041      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	4a2f      	ldr	r2, [pc, #188]	; (8013a90 <USB_SetTurnaroundTime+0x12c>)
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d906      	bls.n	80139e6 <USB_SetTurnaroundTime+0x82>
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	4a2e      	ldr	r2, [pc, #184]	; (8013a94 <USB_SetTurnaroundTime+0x130>)
 80139dc:	4293      	cmp	r3, r2
 80139de:	d802      	bhi.n	80139e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80139e0:	230b      	movs	r3, #11
 80139e2:	617b      	str	r3, [r7, #20]
 80139e4:	e036      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	4a2a      	ldr	r2, [pc, #168]	; (8013a94 <USB_SetTurnaroundTime+0x130>)
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d906      	bls.n	80139fc <USB_SetTurnaroundTime+0x98>
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	4a29      	ldr	r2, [pc, #164]	; (8013a98 <USB_SetTurnaroundTime+0x134>)
 80139f2:	4293      	cmp	r3, r2
 80139f4:	d802      	bhi.n	80139fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80139f6:	230a      	movs	r3, #10
 80139f8:	617b      	str	r3, [r7, #20]
 80139fa:	e02b      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	4a26      	ldr	r2, [pc, #152]	; (8013a98 <USB_SetTurnaroundTime+0x134>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d906      	bls.n	8013a12 <USB_SetTurnaroundTime+0xae>
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	4a25      	ldr	r2, [pc, #148]	; (8013a9c <USB_SetTurnaroundTime+0x138>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d202      	bcs.n	8013a12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013a0c:	2309      	movs	r3, #9
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	e020      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	4a21      	ldr	r2, [pc, #132]	; (8013a9c <USB_SetTurnaroundTime+0x138>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d306      	bcc.n	8013a28 <USB_SetTurnaroundTime+0xc4>
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	4a20      	ldr	r2, [pc, #128]	; (8013aa0 <USB_SetTurnaroundTime+0x13c>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d802      	bhi.n	8013a28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013a22:	2308      	movs	r3, #8
 8013a24:	617b      	str	r3, [r7, #20]
 8013a26:	e015      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	4a1d      	ldr	r2, [pc, #116]	; (8013aa0 <USB_SetTurnaroundTime+0x13c>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d906      	bls.n	8013a3e <USB_SetTurnaroundTime+0xda>
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	4a1c      	ldr	r2, [pc, #112]	; (8013aa4 <USB_SetTurnaroundTime+0x140>)
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d202      	bcs.n	8013a3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013a38:	2307      	movs	r3, #7
 8013a3a:	617b      	str	r3, [r7, #20]
 8013a3c:	e00a      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013a3e:	2306      	movs	r3, #6
 8013a40:	617b      	str	r3, [r7, #20]
 8013a42:	e007      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013a44:	79fb      	ldrb	r3, [r7, #7]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d102      	bne.n	8013a50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013a4a:	2309      	movs	r3, #9
 8013a4c:	617b      	str	r3, [r7, #20]
 8013a4e:	e001      	b.n	8013a54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013a50:	2309      	movs	r3, #9
 8013a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	68db      	ldr	r3, [r3, #12]
 8013a58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	68da      	ldr	r2, [r3, #12]
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	029b      	lsls	r3, r3, #10
 8013a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013a6c:	431a      	orrs	r2, r3
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	371c      	adds	r7, #28
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7e:	4770      	bx	lr
 8013a80:	00d8acbf 	.word	0x00d8acbf
 8013a84:	00e4e1c0 	.word	0x00e4e1c0
 8013a88:	00f42400 	.word	0x00f42400
 8013a8c:	01067380 	.word	0x01067380
 8013a90:	011a499f 	.word	0x011a499f
 8013a94:	01312cff 	.word	0x01312cff
 8013a98:	014ca43f 	.word	0x014ca43f
 8013a9c:	016e3600 	.word	0x016e3600
 8013aa0:	01a6ab1f 	.word	0x01a6ab1f
 8013aa4:	01e84800 	.word	0x01e84800

08013aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013aa8:	b480      	push	{r7}
 8013aaa:	b083      	sub	sp, #12
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	689b      	ldr	r3, [r3, #8]
 8013ab4:	f043 0201 	orr.w	r2, r3, #1
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	370c      	adds	r7, #12
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac8:	4770      	bx	lr

08013aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013aca:	b480      	push	{r7}
 8013acc:	b083      	sub	sp, #12
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	f023 0201 	bic.w	r2, r3, #1
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013ade:	2300      	movs	r3, #0
}
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	370c      	adds	r7, #12
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aea:	4770      	bx	lr

08013aec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	460b      	mov	r3, r1
 8013af6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013af8:	2300      	movs	r3, #0
 8013afa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013b08:	78fb      	ldrb	r3, [r7, #3]
 8013b0a:	2b01      	cmp	r3, #1
 8013b0c:	d115      	bne.n	8013b3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b1a:	2001      	movs	r0, #1
 8013b1c:	f7f0 fa58 	bl	8003fd0 <HAL_Delay>
      ms++;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	3301      	adds	r3, #1
 8013b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f001 f93f 	bl	8014daa <USB_GetMode>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d01e      	beq.n	8013b70 <USB_SetCurrentMode+0x84>
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	2b31      	cmp	r3, #49	; 0x31
 8013b36:	d9f0      	bls.n	8013b1a <USB_SetCurrentMode+0x2e>
 8013b38:	e01a      	b.n	8013b70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013b3a:	78fb      	ldrb	r3, [r7, #3]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d115      	bne.n	8013b6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b4c:	2001      	movs	r0, #1
 8013b4e:	f7f0 fa3f 	bl	8003fd0 <HAL_Delay>
      ms++;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	3301      	adds	r3, #1
 8013b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f001 f926 	bl	8014daa <USB_GetMode>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d005      	beq.n	8013b70 <USB_SetCurrentMode+0x84>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2b31      	cmp	r3, #49	; 0x31
 8013b68:	d9f0      	bls.n	8013b4c <USB_SetCurrentMode+0x60>
 8013b6a:	e001      	b.n	8013b70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	e005      	b.n	8013b7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b32      	cmp	r3, #50	; 0x32
 8013b74:	d101      	bne.n	8013b7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013b76:	2301      	movs	r3, #1
 8013b78:	e000      	b.n	8013b7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3710      	adds	r7, #16
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013b84:	b084      	sub	sp, #16
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b086      	sub	sp, #24
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013b96:	2300      	movs	r3, #0
 8013b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	613b      	str	r3, [r7, #16]
 8013ba2:	e009      	b.n	8013bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013ba4:	687a      	ldr	r2, [r7, #4]
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	3340      	adds	r3, #64	; 0x40
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	4413      	add	r3, r2
 8013bae:	2200      	movs	r2, #0
 8013bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	613b      	str	r3, [r7, #16]
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	2b0e      	cmp	r3, #14
 8013bbc:	d9f2      	bls.n	8013ba4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d11c      	bne.n	8013bfe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	68fa      	ldr	r2, [r7, #12]
 8013bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bd2:	f043 0302 	orr.w	r3, r3, #2
 8013bd6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	601a      	str	r2, [r3, #0]
 8013bfc:	e005      	b.n	8013c0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c10:	461a      	mov	r2, r3
 8013c12:	2300      	movs	r3, #0
 8013c14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c24:	461a      	mov	r2, r3
 8013c26:	680b      	ldr	r3, [r1, #0]
 8013c28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d10c      	bne.n	8013c4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d104      	bne.n	8013c40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013c36:	2100      	movs	r1, #0
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f000 f965 	bl	8013f08 <USB_SetDevSpeed>
 8013c3e:	e008      	b.n	8013c52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013c40:	2101      	movs	r1, #1
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 f960 	bl	8013f08 <USB_SetDevSpeed>
 8013c48:	e003      	b.n	8013c52 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013c4a:	2103      	movs	r1, #3
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f000 f95b 	bl	8013f08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013c52:	2110      	movs	r1, #16
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f8f3 	bl	8013e40 <USB_FlushTxFifo>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d001      	beq.n	8013c64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013c60:	2301      	movs	r3, #1
 8013c62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 f91f 	bl	8013ea8 <USB_FlushRxFifo>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d001      	beq.n	8013c74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013c70:	2301      	movs	r3, #1
 8013c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c86:	461a      	mov	r2, r3
 8013c88:	2300      	movs	r3, #0
 8013c8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c92:	461a      	mov	r2, r3
 8013c94:	2300      	movs	r3, #0
 8013c96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013c98:	2300      	movs	r3, #0
 8013c9a:	613b      	str	r3, [r7, #16]
 8013c9c:	e043      	b.n	8013d26 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	015a      	lsls	r2, r3, #5
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cb4:	d118      	bne.n	8013ce8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d10a      	bne.n	8013cd2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	015a      	lsls	r2, r3, #5
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	4413      	add	r3, r2
 8013cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc8:	461a      	mov	r2, r3
 8013cca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013cce:	6013      	str	r3, [r2, #0]
 8013cd0:	e013      	b.n	8013cfa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	015a      	lsls	r2, r3, #5
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	4413      	add	r3, r2
 8013cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cde:	461a      	mov	r2, r3
 8013ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013ce4:	6013      	str	r3, [r2, #0]
 8013ce6:	e008      	b.n	8013cfa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	015a      	lsls	r2, r3, #5
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	4413      	add	r3, r2
 8013cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	015a      	lsls	r2, r3, #5
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	4413      	add	r3, r2
 8013d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d06:	461a      	mov	r2, r3
 8013d08:	2300      	movs	r3, #0
 8013d0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	015a      	lsls	r2, r3, #5
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	4413      	add	r3, r2
 8013d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d18:	461a      	mov	r2, r3
 8013d1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013d1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	3301      	adds	r3, #1
 8013d24:	613b      	str	r3, [r7, #16]
 8013d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d28:	693a      	ldr	r2, [r7, #16]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d3b7      	bcc.n	8013c9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d2e:	2300      	movs	r3, #0
 8013d30:	613b      	str	r3, [r7, #16]
 8013d32:	e043      	b.n	8013dbc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	015a      	lsls	r2, r3, #5
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d4a:	d118      	bne.n	8013d7e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d10a      	bne.n	8013d68 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	015a      	lsls	r2, r3, #5
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	4413      	add	r3, r2
 8013d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d5e:	461a      	mov	r2, r3
 8013d60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d64:	6013      	str	r3, [r2, #0]
 8013d66:	e013      	b.n	8013d90 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	015a      	lsls	r2, r3, #5
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	4413      	add	r3, r2
 8013d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d74:	461a      	mov	r2, r3
 8013d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d7a:	6013      	str	r3, [r2, #0]
 8013d7c:	e008      	b.n	8013d90 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	015a      	lsls	r2, r3, #5
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	4413      	add	r3, r2
 8013d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	015a      	lsls	r2, r3, #5
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	4413      	add	r3, r2
 8013d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	2300      	movs	r3, #0
 8013da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	015a      	lsls	r2, r3, #5
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	4413      	add	r3, r2
 8013daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dae:	461a      	mov	r2, r3
 8013db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013db4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	3301      	adds	r3, #1
 8013dba:	613b      	str	r3, [r7, #16]
 8013dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dbe:	693a      	ldr	r2, [r7, #16]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d3b7      	bcc.n	8013d34 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013dd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013de4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d105      	bne.n	8013df8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	699b      	ldr	r3, [r3, #24]
 8013df0:	f043 0210 	orr.w	r2, r3, #16
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	699a      	ldr	r2, [r3, #24]
 8013dfc:	4b0e      	ldr	r3, [pc, #56]	; (8013e38 <USB_DevInit+0x2b4>)
 8013dfe:	4313      	orrs	r3, r2
 8013e00:	687a      	ldr	r2, [r7, #4]
 8013e02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d005      	beq.n	8013e16 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	699b      	ldr	r3, [r3, #24]
 8013e0e:	f043 0208 	orr.w	r2, r3, #8
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d105      	bne.n	8013e28 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	699a      	ldr	r2, [r3, #24]
 8013e20:	4b06      	ldr	r3, [pc, #24]	; (8013e3c <USB_DevInit+0x2b8>)
 8013e22:	4313      	orrs	r3, r2
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3718      	adds	r7, #24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013e34:	b004      	add	sp, #16
 8013e36:	4770      	bx	lr
 8013e38:	803c3800 	.word	0x803c3800
 8013e3c:	40000004 	.word	0x40000004

08013e40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013e40:	b480      	push	{r7}
 8013e42:	b085      	sub	sp, #20
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	3301      	adds	r3, #1
 8013e52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	4a13      	ldr	r2, [pc, #76]	; (8013ea4 <USB_FlushTxFifo+0x64>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d901      	bls.n	8013e60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013e5c:	2303      	movs	r3, #3
 8013e5e:	e01b      	b.n	8013e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	691b      	ldr	r3, [r3, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	daf2      	bge.n	8013e4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	019b      	lsls	r3, r3, #6
 8013e70:	f043 0220 	orr.w	r2, r3, #32
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	4a08      	ldr	r2, [pc, #32]	; (8013ea4 <USB_FlushTxFifo+0x64>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d901      	bls.n	8013e8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013e86:	2303      	movs	r3, #3
 8013e88:	e006      	b.n	8013e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	691b      	ldr	r3, [r3, #16]
 8013e8e:	f003 0320 	and.w	r3, r3, #32
 8013e92:	2b20      	cmp	r3, #32
 8013e94:	d0f0      	beq.n	8013e78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013e96:	2300      	movs	r3, #0
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3714      	adds	r7, #20
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	00030d40 	.word	0x00030d40

08013ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	4a11      	ldr	r2, [pc, #68]	; (8013f04 <USB_FlushRxFifo+0x5c>)
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d901      	bls.n	8013ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013ec2:	2303      	movs	r3, #3
 8013ec4:	e018      	b.n	8013ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	691b      	ldr	r3, [r3, #16]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	daf2      	bge.n	8013eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2210      	movs	r2, #16
 8013ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3301      	adds	r3, #1
 8013edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	4a08      	ldr	r2, [pc, #32]	; (8013f04 <USB_FlushRxFifo+0x5c>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d901      	bls.n	8013eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013ee6:	2303      	movs	r3, #3
 8013ee8:	e006      	b.n	8013ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	691b      	ldr	r3, [r3, #16]
 8013eee:	f003 0310 	and.w	r3, r3, #16
 8013ef2:	2b10      	cmp	r3, #16
 8013ef4:	d0f0      	beq.n	8013ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3714      	adds	r7, #20
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr
 8013f04:	00030d40 	.word	0x00030d40

08013f08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	460b      	mov	r3, r1
 8013f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	78fb      	ldrb	r3, [r7, #3]
 8013f22:	68f9      	ldr	r1, [r7, #12]
 8013f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013f2c:	2300      	movs	r3, #0
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3714      	adds	r7, #20
 8013f32:	46bd      	mov	sp, r7
 8013f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f38:	4770      	bx	lr

08013f3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013f3a:	b480      	push	{r7}
 8013f3c:	b087      	sub	sp, #28
 8013f3e:	af00      	add	r7, sp, #0
 8013f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f4c:	689b      	ldr	r3, [r3, #8]
 8013f4e:	f003 0306 	and.w	r3, r3, #6
 8013f52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d102      	bne.n	8013f60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	75fb      	strb	r3, [r7, #23]
 8013f5e:	e00a      	b.n	8013f76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	2b02      	cmp	r3, #2
 8013f64:	d002      	beq.n	8013f6c <USB_GetDevSpeed+0x32>
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2b06      	cmp	r3, #6
 8013f6a:	d102      	bne.n	8013f72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013f6c:	2302      	movs	r3, #2
 8013f6e:	75fb      	strb	r3, [r7, #23]
 8013f70:	e001      	b.n	8013f76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013f72:	230f      	movs	r3, #15
 8013f74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	371c      	adds	r7, #28
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	785b      	ldrb	r3, [r3, #1]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d139      	bne.n	8014014 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa6:	69da      	ldr	r2, [r3, #28]
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	f003 030f 	and.w	r3, r3, #15
 8013fb0:	2101      	movs	r1, #1
 8013fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	68f9      	ldr	r1, [r7, #12]
 8013fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	015a      	lsls	r2, r3, #5
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	4413      	add	r3, r2
 8013fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d153      	bne.n	8014080 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	015a      	lsls	r2, r3, #5
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	4413      	add	r3, r2
 8013fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe4:	681a      	ldr	r2, [r3, #0]
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	689b      	ldr	r3, [r3, #8]
 8013fea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	791b      	ldrb	r3, [r3, #4]
 8013ff2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013ff4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	059b      	lsls	r3, r3, #22
 8013ffa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013ffc:	431a      	orrs	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	0159      	lsls	r1, r3, #5
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	440b      	add	r3, r1
 8014006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801400a:	4619      	mov	r1, r3
 801400c:	4b20      	ldr	r3, [pc, #128]	; (8014090 <USB_ActivateEndpoint+0x10c>)
 801400e:	4313      	orrs	r3, r2
 8014010:	600b      	str	r3, [r1, #0]
 8014012:	e035      	b.n	8014080 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801401a:	69da      	ldr	r2, [r3, #28]
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	f003 030f 	and.w	r3, r3, #15
 8014024:	2101      	movs	r1, #1
 8014026:	fa01 f303 	lsl.w	r3, r1, r3
 801402a:	041b      	lsls	r3, r3, #16
 801402c:	68f9      	ldr	r1, [r7, #12]
 801402e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014032:	4313      	orrs	r3, r2
 8014034:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	015a      	lsls	r2, r3, #5
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	4413      	add	r3, r2
 801403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014048:	2b00      	cmp	r3, #0
 801404a:	d119      	bne.n	8014080 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	015a      	lsls	r2, r3, #5
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	4413      	add	r3, r2
 8014054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014058:	681a      	ldr	r2, [r3, #0]
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	689b      	ldr	r3, [r3, #8]
 801405e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	791b      	ldrb	r3, [r3, #4]
 8014066:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014068:	430b      	orrs	r3, r1
 801406a:	431a      	orrs	r2, r3
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	0159      	lsls	r1, r3, #5
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	440b      	add	r3, r1
 8014074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014078:	4619      	mov	r1, r3
 801407a:	4b05      	ldr	r3, [pc, #20]	; (8014090 <USB_ActivateEndpoint+0x10c>)
 801407c:	4313      	orrs	r3, r2
 801407e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3714      	adds	r7, #20
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	10008000 	.word	0x10008000

08014094 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014094:	b480      	push	{r7}
 8014096:	b085      	sub	sp, #20
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
 801409c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	781b      	ldrb	r3, [r3, #0]
 80140a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	785b      	ldrb	r3, [r3, #1]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d161      	bne.n	8014174 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	015a      	lsls	r2, r3, #5
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	4413      	add	r3, r2
 80140b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140c6:	d11f      	bne.n	8014108 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	015a      	lsls	r2, r3, #5
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	4413      	add	r3, r2
 80140d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	68ba      	ldr	r2, [r7, #8]
 80140d8:	0151      	lsls	r1, r2, #5
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	440a      	add	r2, r1
 80140de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80140e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	015a      	lsls	r2, r3, #5
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	4413      	add	r3, r2
 80140f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	68ba      	ldr	r2, [r7, #8]
 80140f8:	0151      	lsls	r1, r2, #5
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	440a      	add	r2, r1
 80140fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014106:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801410e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	f003 030f 	and.w	r3, r3, #15
 8014118:	2101      	movs	r1, #1
 801411a:	fa01 f303 	lsl.w	r3, r1, r3
 801411e:	b29b      	uxth	r3, r3
 8014120:	43db      	mvns	r3, r3
 8014122:	68f9      	ldr	r1, [r7, #12]
 8014124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014128:	4013      	ands	r3, r2
 801412a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014132:	69da      	ldr	r2, [r3, #28]
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	f003 030f 	and.w	r3, r3, #15
 801413c:	2101      	movs	r1, #1
 801413e:	fa01 f303 	lsl.w	r3, r1, r3
 8014142:	b29b      	uxth	r3, r3
 8014144:	43db      	mvns	r3, r3
 8014146:	68f9      	ldr	r1, [r7, #12]
 8014148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801414c:	4013      	ands	r3, r2
 801414e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	015a      	lsls	r2, r3, #5
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	4413      	add	r3, r2
 8014158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801415c:	681a      	ldr	r2, [r3, #0]
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	0159      	lsls	r1, r3, #5
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	440b      	add	r3, r1
 8014166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801416a:	4619      	mov	r1, r3
 801416c:	4b35      	ldr	r3, [pc, #212]	; (8014244 <USB_DeactivateEndpoint+0x1b0>)
 801416e:	4013      	ands	r3, r2
 8014170:	600b      	str	r3, [r1, #0]
 8014172:	e060      	b.n	8014236 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	015a      	lsls	r2, r3, #5
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	4413      	add	r3, r2
 801417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801418a:	d11f      	bne.n	80141cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	015a      	lsls	r2, r3, #5
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	4413      	add	r3, r2
 8014194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	0151      	lsls	r1, r2, #5
 801419e:	68fa      	ldr	r2, [r7, #12]
 80141a0:	440a      	add	r2, r1
 80141a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80141aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	015a      	lsls	r2, r3, #5
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	4413      	add	r3, r2
 80141b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	68ba      	ldr	r2, [r7, #8]
 80141bc:	0151      	lsls	r1, r2, #5
 80141be:	68fa      	ldr	r2, [r7, #12]
 80141c0:	440a      	add	r2, r1
 80141c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80141ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	f003 030f 	and.w	r3, r3, #15
 80141dc:	2101      	movs	r1, #1
 80141de:	fa01 f303 	lsl.w	r3, r1, r3
 80141e2:	041b      	lsls	r3, r3, #16
 80141e4:	43db      	mvns	r3, r3
 80141e6:	68f9      	ldr	r1, [r7, #12]
 80141e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141ec:	4013      	ands	r3, r2
 80141ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141f6:	69da      	ldr	r2, [r3, #28]
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	f003 030f 	and.w	r3, r3, #15
 8014200:	2101      	movs	r1, #1
 8014202:	fa01 f303 	lsl.w	r3, r1, r3
 8014206:	041b      	lsls	r3, r3, #16
 8014208:	43db      	mvns	r3, r3
 801420a:	68f9      	ldr	r1, [r7, #12]
 801420c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014210:	4013      	ands	r3, r2
 8014212:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	015a      	lsls	r2, r3, #5
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	4413      	add	r3, r2
 801421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	0159      	lsls	r1, r3, #5
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	440b      	add	r3, r1
 801422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801422e:	4619      	mov	r1, r3
 8014230:	4b05      	ldr	r3, [pc, #20]	; (8014248 <USB_DeactivateEndpoint+0x1b4>)
 8014232:	4013      	ands	r3, r2
 8014234:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014236:	2300      	movs	r3, #0
}
 8014238:	4618      	mov	r0, r3
 801423a:	3714      	adds	r7, #20
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr
 8014244:	ec337800 	.word	0xec337800
 8014248:	eff37800 	.word	0xeff37800

0801424c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b08a      	sub	sp, #40	; 0x28
 8014250:	af02      	add	r7, sp, #8
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	4613      	mov	r3, r2
 8014258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	785b      	ldrb	r3, [r3, #1]
 8014268:	2b01      	cmp	r3, #1
 801426a:	f040 8181 	bne.w	8014570 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	691b      	ldr	r3, [r3, #16]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d132      	bne.n	80142dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	015a      	lsls	r2, r3, #5
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	4413      	add	r3, r2
 801427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014282:	691a      	ldr	r2, [r3, #16]
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	0159      	lsls	r1, r3, #5
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	440b      	add	r3, r1
 801428c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014290:	4619      	mov	r1, r3
 8014292:	4ba5      	ldr	r3, [pc, #660]	; (8014528 <USB_EPStartXfer+0x2dc>)
 8014294:	4013      	ands	r3, r2
 8014296:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014298:	69bb      	ldr	r3, [r7, #24]
 801429a:	015a      	lsls	r2, r3, #5
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	4413      	add	r3, r2
 80142a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142a4:	691b      	ldr	r3, [r3, #16]
 80142a6:	69ba      	ldr	r2, [r7, #24]
 80142a8:	0151      	lsls	r1, r2, #5
 80142aa:	69fa      	ldr	r2, [r7, #28]
 80142ac:	440a      	add	r2, r1
 80142ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	015a      	lsls	r2, r3, #5
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	4413      	add	r3, r2
 80142c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142c4:	691a      	ldr	r2, [r3, #16]
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	0159      	lsls	r1, r3, #5
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	440b      	add	r3, r1
 80142ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142d2:	4619      	mov	r1, r3
 80142d4:	4b95      	ldr	r3, [pc, #596]	; (801452c <USB_EPStartXfer+0x2e0>)
 80142d6:	4013      	ands	r3, r2
 80142d8:	610b      	str	r3, [r1, #16]
 80142da:	e092      	b.n	8014402 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	015a      	lsls	r2, r3, #5
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	4413      	add	r3, r2
 80142e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142e8:	691a      	ldr	r2, [r3, #16]
 80142ea:	69bb      	ldr	r3, [r7, #24]
 80142ec:	0159      	lsls	r1, r3, #5
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	440b      	add	r3, r1
 80142f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f6:	4619      	mov	r1, r3
 80142f8:	4b8c      	ldr	r3, [pc, #560]	; (801452c <USB_EPStartXfer+0x2e0>)
 80142fa:	4013      	ands	r3, r2
 80142fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	015a      	lsls	r2, r3, #5
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	4413      	add	r3, r2
 8014306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801430a:	691a      	ldr	r2, [r3, #16]
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	0159      	lsls	r1, r3, #5
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	440b      	add	r3, r1
 8014314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014318:	4619      	mov	r1, r3
 801431a:	4b83      	ldr	r3, [pc, #524]	; (8014528 <USB_EPStartXfer+0x2dc>)
 801431c:	4013      	ands	r3, r2
 801431e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014320:	69bb      	ldr	r3, [r7, #24]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d11a      	bne.n	801435c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	691a      	ldr	r2, [r3, #16]
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	689b      	ldr	r3, [r3, #8]
 801432e:	429a      	cmp	r2, r3
 8014330:	d903      	bls.n	801433a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	689a      	ldr	r2, [r3, #8]
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801433a:	69bb      	ldr	r3, [r7, #24]
 801433c:	015a      	lsls	r2, r3, #5
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	4413      	add	r3, r2
 8014342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014346:	691b      	ldr	r3, [r3, #16]
 8014348:	69ba      	ldr	r2, [r7, #24]
 801434a:	0151      	lsls	r1, r2, #5
 801434c:	69fa      	ldr	r2, [r7, #28]
 801434e:	440a      	add	r2, r1
 8014350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014358:	6113      	str	r3, [r2, #16]
 801435a:	e01b      	b.n	8014394 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	015a      	lsls	r2, r3, #5
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	4413      	add	r3, r2
 8014364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014368:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	6919      	ldr	r1, [r3, #16]
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	689b      	ldr	r3, [r3, #8]
 8014372:	440b      	add	r3, r1
 8014374:	1e59      	subs	r1, r3, #1
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	689b      	ldr	r3, [r3, #8]
 801437a:	fbb1 f3f3 	udiv	r3, r1, r3
 801437e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014380:	4b6b      	ldr	r3, [pc, #428]	; (8014530 <USB_EPStartXfer+0x2e4>)
 8014382:	400b      	ands	r3, r1
 8014384:	69b9      	ldr	r1, [r7, #24]
 8014386:	0148      	lsls	r0, r1, #5
 8014388:	69f9      	ldr	r1, [r7, #28]
 801438a:	4401      	add	r1, r0
 801438c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014390:	4313      	orrs	r3, r2
 8014392:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	015a      	lsls	r2, r3, #5
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	4413      	add	r3, r2
 801439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143a0:	691a      	ldr	r2, [r3, #16]
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	691b      	ldr	r3, [r3, #16]
 80143a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143aa:	69b9      	ldr	r1, [r7, #24]
 80143ac:	0148      	lsls	r0, r1, #5
 80143ae:	69f9      	ldr	r1, [r7, #28]
 80143b0:	4401      	add	r1, r0
 80143b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143b6:	4313      	orrs	r3, r2
 80143b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	791b      	ldrb	r3, [r3, #4]
 80143be:	2b01      	cmp	r3, #1
 80143c0:	d11f      	bne.n	8014402 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	015a      	lsls	r2, r3, #5
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	4413      	add	r3, r2
 80143ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	69ba      	ldr	r2, [r7, #24]
 80143d2:	0151      	lsls	r1, r2, #5
 80143d4:	69fa      	ldr	r2, [r7, #28]
 80143d6:	440a      	add	r2, r1
 80143d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80143e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	015a      	lsls	r2, r3, #5
 80143e6:	69fb      	ldr	r3, [r7, #28]
 80143e8:	4413      	add	r3, r2
 80143ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ee:	691b      	ldr	r3, [r3, #16]
 80143f0:	69ba      	ldr	r2, [r7, #24]
 80143f2:	0151      	lsls	r1, r2, #5
 80143f4:	69fa      	ldr	r2, [r7, #28]
 80143f6:	440a      	add	r2, r1
 80143f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014400:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014402:	79fb      	ldrb	r3, [r7, #7]
 8014404:	2b01      	cmp	r3, #1
 8014406:	d14b      	bne.n	80144a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	69db      	ldr	r3, [r3, #28]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d009      	beq.n	8014424 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014410:	69bb      	ldr	r3, [r7, #24]
 8014412:	015a      	lsls	r2, r3, #5
 8014414:	69fb      	ldr	r3, [r7, #28]
 8014416:	4413      	add	r3, r2
 8014418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801441c:	461a      	mov	r2, r3
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	69db      	ldr	r3, [r3, #28]
 8014422:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	791b      	ldrb	r3, [r3, #4]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d128      	bne.n	801447e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014438:	2b00      	cmp	r3, #0
 801443a:	d110      	bne.n	801445e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801443c:	69bb      	ldr	r3, [r7, #24]
 801443e:	015a      	lsls	r2, r3, #5
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	4413      	add	r3, r2
 8014444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	69ba      	ldr	r2, [r7, #24]
 801444c:	0151      	lsls	r1, r2, #5
 801444e:	69fa      	ldr	r2, [r7, #28]
 8014450:	440a      	add	r2, r1
 8014452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801445a:	6013      	str	r3, [r2, #0]
 801445c:	e00f      	b.n	801447e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	015a      	lsls	r2, r3, #5
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	4413      	add	r3, r2
 8014466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	69ba      	ldr	r2, [r7, #24]
 801446e:	0151      	lsls	r1, r2, #5
 8014470:	69fa      	ldr	r2, [r7, #28]
 8014472:	440a      	add	r2, r1
 8014474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801447c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	015a      	lsls	r2, r3, #5
 8014482:	69fb      	ldr	r3, [r7, #28]
 8014484:	4413      	add	r3, r2
 8014486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	0151      	lsls	r1, r2, #5
 8014490:	69fa      	ldr	r2, [r7, #28]
 8014492:	440a      	add	r2, r1
 8014494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014498:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801449c:	6013      	str	r3, [r2, #0]
 801449e:	e16a      	b.n	8014776 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	015a      	lsls	r2, r3, #5
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	4413      	add	r3, r2
 80144a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	69ba      	ldr	r2, [r7, #24]
 80144b0:	0151      	lsls	r1, r2, #5
 80144b2:	69fa      	ldr	r2, [r7, #28]
 80144b4:	440a      	add	r2, r1
 80144b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	791b      	ldrb	r3, [r3, #4]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d015      	beq.n	80144f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	691b      	ldr	r3, [r3, #16]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	f000 8152 	beq.w	8014776 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	f003 030f 	and.w	r3, r3, #15
 80144e2:	2101      	movs	r1, #1
 80144e4:	fa01 f303 	lsl.w	r3, r1, r3
 80144e8:	69f9      	ldr	r1, [r7, #28]
 80144ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144ee:	4313      	orrs	r3, r2
 80144f0:	634b      	str	r3, [r1, #52]	; 0x34
 80144f2:	e140      	b.n	8014776 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144fa:	689b      	ldr	r3, [r3, #8]
 80144fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014500:	2b00      	cmp	r3, #0
 8014502:	d117      	bne.n	8014534 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	015a      	lsls	r2, r3, #5
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	4413      	add	r3, r2
 801450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	69ba      	ldr	r2, [r7, #24]
 8014514:	0151      	lsls	r1, r2, #5
 8014516:	69fa      	ldr	r2, [r7, #28]
 8014518:	440a      	add	r2, r1
 801451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801451e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014522:	6013      	str	r3, [r2, #0]
 8014524:	e016      	b.n	8014554 <USB_EPStartXfer+0x308>
 8014526:	bf00      	nop
 8014528:	e007ffff 	.word	0xe007ffff
 801452c:	fff80000 	.word	0xfff80000
 8014530:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014534:	69bb      	ldr	r3, [r7, #24]
 8014536:	015a      	lsls	r2, r3, #5
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	4413      	add	r3, r2
 801453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	69ba      	ldr	r2, [r7, #24]
 8014544:	0151      	lsls	r1, r2, #5
 8014546:	69fa      	ldr	r2, [r7, #28]
 8014548:	440a      	add	r2, r1
 801454a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014552:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	68d9      	ldr	r1, [r3, #12]
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	781a      	ldrb	r2, [r3, #0]
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	691b      	ldr	r3, [r3, #16]
 8014560:	b298      	uxth	r0, r3
 8014562:	79fb      	ldrb	r3, [r7, #7]
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	4603      	mov	r3, r0
 8014568:	68f8      	ldr	r0, [r7, #12]
 801456a:	f000 f9b9 	bl	80148e0 <USB_WritePacket>
 801456e:	e102      	b.n	8014776 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014570:	69bb      	ldr	r3, [r7, #24]
 8014572:	015a      	lsls	r2, r3, #5
 8014574:	69fb      	ldr	r3, [r7, #28]
 8014576:	4413      	add	r3, r2
 8014578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801457c:	691a      	ldr	r2, [r3, #16]
 801457e:	69bb      	ldr	r3, [r7, #24]
 8014580:	0159      	lsls	r1, r3, #5
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	440b      	add	r3, r1
 8014586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801458a:	4619      	mov	r1, r3
 801458c:	4b7c      	ldr	r3, [pc, #496]	; (8014780 <USB_EPStartXfer+0x534>)
 801458e:	4013      	ands	r3, r2
 8014590:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	015a      	lsls	r2, r3, #5
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	4413      	add	r3, r2
 801459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801459e:	691a      	ldr	r2, [r3, #16]
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	0159      	lsls	r1, r3, #5
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	440b      	add	r3, r1
 80145a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ac:	4619      	mov	r1, r3
 80145ae:	4b75      	ldr	r3, [pc, #468]	; (8014784 <USB_EPStartXfer+0x538>)
 80145b0:	4013      	ands	r3, r2
 80145b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d12f      	bne.n	801461a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	691b      	ldr	r3, [r3, #16]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d003      	beq.n	80145ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	689a      	ldr	r2, [r3, #8]
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	689a      	ldr	r2, [r3, #8]
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	015a      	lsls	r2, r3, #5
 80145d6:	69fb      	ldr	r3, [r7, #28]
 80145d8:	4413      	add	r3, r2
 80145da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145de:	691a      	ldr	r2, [r3, #16]
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	6a1b      	ldr	r3, [r3, #32]
 80145e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145e8:	69b9      	ldr	r1, [r7, #24]
 80145ea:	0148      	lsls	r0, r1, #5
 80145ec:	69f9      	ldr	r1, [r7, #28]
 80145ee:	4401      	add	r1, r0
 80145f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80145f4:	4313      	orrs	r3, r2
 80145f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	015a      	lsls	r2, r3, #5
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	4413      	add	r3, r2
 8014600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	69ba      	ldr	r2, [r7, #24]
 8014608:	0151      	lsls	r1, r2, #5
 801460a:	69fa      	ldr	r2, [r7, #28]
 801460c:	440a      	add	r2, r1
 801460e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014616:	6113      	str	r3, [r2, #16]
 8014618:	e05f      	b.n	80146da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d123      	bne.n	801466a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	015a      	lsls	r2, r3, #5
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	4413      	add	r3, r2
 801462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801462e:	691a      	ldr	r2, [r3, #16]
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	689b      	ldr	r3, [r3, #8]
 8014634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014638:	69b9      	ldr	r1, [r7, #24]
 801463a:	0148      	lsls	r0, r1, #5
 801463c:	69f9      	ldr	r1, [r7, #28]
 801463e:	4401      	add	r1, r0
 8014640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014644:	4313      	orrs	r3, r2
 8014646:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	015a      	lsls	r2, r3, #5
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	4413      	add	r3, r2
 8014650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014654:	691b      	ldr	r3, [r3, #16]
 8014656:	69ba      	ldr	r2, [r7, #24]
 8014658:	0151      	lsls	r1, r2, #5
 801465a:	69fa      	ldr	r2, [r7, #28]
 801465c:	440a      	add	r2, r1
 801465e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014666:	6113      	str	r3, [r2, #16]
 8014668:	e037      	b.n	80146da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	691a      	ldr	r2, [r3, #16]
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	689b      	ldr	r3, [r3, #8]
 8014672:	4413      	add	r3, r2
 8014674:	1e5a      	subs	r2, r3, #1
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	689b      	ldr	r3, [r3, #8]
 801467a:	fbb2 f3f3 	udiv	r3, r2, r3
 801467e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	689b      	ldr	r3, [r3, #8]
 8014684:	8afa      	ldrh	r2, [r7, #22]
 8014686:	fb03 f202 	mul.w	r2, r3, r2
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801468e:	69bb      	ldr	r3, [r7, #24]
 8014690:	015a      	lsls	r2, r3, #5
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	4413      	add	r3, r2
 8014696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801469a:	691a      	ldr	r2, [r3, #16]
 801469c:	8afb      	ldrh	r3, [r7, #22]
 801469e:	04d9      	lsls	r1, r3, #19
 80146a0:	4b39      	ldr	r3, [pc, #228]	; (8014788 <USB_EPStartXfer+0x53c>)
 80146a2:	400b      	ands	r3, r1
 80146a4:	69b9      	ldr	r1, [r7, #24]
 80146a6:	0148      	lsls	r0, r1, #5
 80146a8:	69f9      	ldr	r1, [r7, #28]
 80146aa:	4401      	add	r1, r0
 80146ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80146b0:	4313      	orrs	r3, r2
 80146b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	015a      	lsls	r2, r3, #5
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	4413      	add	r3, r2
 80146bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c0:	691a      	ldr	r2, [r3, #16]
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	6a1b      	ldr	r3, [r3, #32]
 80146c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80146ca:	69b9      	ldr	r1, [r7, #24]
 80146cc:	0148      	lsls	r0, r1, #5
 80146ce:	69f9      	ldr	r1, [r7, #28]
 80146d0:	4401      	add	r1, r0
 80146d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80146d6:	4313      	orrs	r3, r2
 80146d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80146da:	79fb      	ldrb	r3, [r7, #7]
 80146dc:	2b01      	cmp	r3, #1
 80146de:	d10d      	bne.n	80146fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d009      	beq.n	80146fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	68d9      	ldr	r1, [r3, #12]
 80146ec:	69bb      	ldr	r3, [r7, #24]
 80146ee:	015a      	lsls	r2, r3, #5
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	4413      	add	r3, r2
 80146f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146f8:	460a      	mov	r2, r1
 80146fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	791b      	ldrb	r3, [r3, #4]
 8014700:	2b01      	cmp	r3, #1
 8014702:	d128      	bne.n	8014756 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801470a:	689b      	ldr	r3, [r3, #8]
 801470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014710:	2b00      	cmp	r3, #0
 8014712:	d110      	bne.n	8014736 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	015a      	lsls	r2, r3, #5
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	4413      	add	r3, r2
 801471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	69ba      	ldr	r2, [r7, #24]
 8014724:	0151      	lsls	r1, r2, #5
 8014726:	69fa      	ldr	r2, [r7, #28]
 8014728:	440a      	add	r2, r1
 801472a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801472e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014732:	6013      	str	r3, [r2, #0]
 8014734:	e00f      	b.n	8014756 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014736:	69bb      	ldr	r3, [r7, #24]
 8014738:	015a      	lsls	r2, r3, #5
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	4413      	add	r3, r2
 801473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	69ba      	ldr	r2, [r7, #24]
 8014746:	0151      	lsls	r1, r2, #5
 8014748:	69fa      	ldr	r2, [r7, #28]
 801474a:	440a      	add	r2, r1
 801474c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014754:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	015a      	lsls	r2, r3, #5
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	4413      	add	r3, r2
 801475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	69ba      	ldr	r2, [r7, #24]
 8014766:	0151      	lsls	r1, r2, #5
 8014768:	69fa      	ldr	r2, [r7, #28]
 801476a:	440a      	add	r2, r1
 801476c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014776:	2300      	movs	r3, #0
}
 8014778:	4618      	mov	r0, r3
 801477a:	3720      	adds	r7, #32
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	fff80000 	.word	0xfff80000
 8014784:	e007ffff 	.word	0xe007ffff
 8014788:	1ff80000 	.word	0x1ff80000

0801478c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801478c:	b480      	push	{r7}
 801478e:	b087      	sub	sp, #28
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014796:	2300      	movs	r3, #0
 8014798:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801479a:	2300      	movs	r3, #0
 801479c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	785b      	ldrb	r3, [r3, #1]
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d14a      	bne.n	8014840 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	015a      	lsls	r2, r3, #5
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	4413      	add	r3, r2
 80147b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80147be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80147c2:	f040 8086 	bne.w	80148d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	015a      	lsls	r2, r3, #5
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	4413      	add	r3, r2
 80147d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	683a      	ldr	r2, [r7, #0]
 80147d8:	7812      	ldrb	r2, [r2, #0]
 80147da:	0151      	lsls	r1, r2, #5
 80147dc:	693a      	ldr	r2, [r7, #16]
 80147de:	440a      	add	r2, r1
 80147e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80147e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	015a      	lsls	r2, r3, #5
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	4413      	add	r3, r2
 80147f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	683a      	ldr	r2, [r7, #0]
 80147fc:	7812      	ldrb	r2, [r2, #0]
 80147fe:	0151      	lsls	r1, r2, #5
 8014800:	693a      	ldr	r2, [r7, #16]
 8014802:	440a      	add	r2, r1
 8014804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801480c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	3301      	adds	r3, #1
 8014812:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f242 7210 	movw	r2, #10000	; 0x2710
 801481a:	4293      	cmp	r3, r2
 801481c:	d902      	bls.n	8014824 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801481e:	2301      	movs	r3, #1
 8014820:	75fb      	strb	r3, [r7, #23]
          break;
 8014822:	e056      	b.n	80148d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	015a      	lsls	r2, r3, #5
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	4413      	add	r3, r2
 801482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801483c:	d0e7      	beq.n	801480e <USB_EPStopXfer+0x82>
 801483e:	e048      	b.n	80148d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	015a      	lsls	r2, r3, #5
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	4413      	add	r3, r2
 801484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014858:	d13b      	bne.n	80148d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801485a:	683b      	ldr	r3, [r7, #0]
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	015a      	lsls	r2, r3, #5
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	4413      	add	r3, r2
 8014864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	683a      	ldr	r2, [r7, #0]
 801486c:	7812      	ldrb	r2, [r2, #0]
 801486e:	0151      	lsls	r1, r2, #5
 8014870:	693a      	ldr	r2, [r7, #16]
 8014872:	440a      	add	r2, r1
 8014874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801487c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	015a      	lsls	r2, r3, #5
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	4413      	add	r3, r2
 8014888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	683a      	ldr	r2, [r7, #0]
 8014890:	7812      	ldrb	r2, [r2, #0]
 8014892:	0151      	lsls	r1, r2, #5
 8014894:	693a      	ldr	r2, [r7, #16]
 8014896:	440a      	add	r2, r1
 8014898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801489c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80148a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	3301      	adds	r3, #1
 80148a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d902      	bls.n	80148b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80148b2:	2301      	movs	r3, #1
 80148b4:	75fb      	strb	r3, [r7, #23]
          break;
 80148b6:	e00c      	b.n	80148d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	015a      	lsls	r2, r3, #5
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	4413      	add	r3, r2
 80148c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148d0:	d0e7      	beq.n	80148a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80148d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	371c      	adds	r7, #28
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b089      	sub	sp, #36	; 0x24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	4611      	mov	r1, r2
 80148ec:	461a      	mov	r2, r3
 80148ee:	460b      	mov	r3, r1
 80148f0:	71fb      	strb	r3, [r7, #7]
 80148f2:	4613      	mov	r3, r2
 80148f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80148fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014902:	2b00      	cmp	r3, #0
 8014904:	d123      	bne.n	801494e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014906:	88bb      	ldrh	r3, [r7, #4]
 8014908:	3303      	adds	r3, #3
 801490a:	089b      	lsrs	r3, r3, #2
 801490c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801490e:	2300      	movs	r3, #0
 8014910:	61bb      	str	r3, [r7, #24]
 8014912:	e018      	b.n	8014946 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014914:	79fb      	ldrb	r3, [r7, #7]
 8014916:	031a      	lsls	r2, r3, #12
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	4413      	add	r3, r2
 801491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014920:	461a      	mov	r2, r3
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	3301      	adds	r3, #1
 801492c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801492e:	69fb      	ldr	r3, [r7, #28]
 8014930:	3301      	adds	r3, #1
 8014932:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	3301      	adds	r3, #1
 8014938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801493a:	69fb      	ldr	r3, [r7, #28]
 801493c:	3301      	adds	r3, #1
 801493e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	3301      	adds	r3, #1
 8014944:	61bb      	str	r3, [r7, #24]
 8014946:	69ba      	ldr	r2, [r7, #24]
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	429a      	cmp	r2, r3
 801494c:	d3e2      	bcc.n	8014914 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3724      	adds	r7, #36	; 0x24
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr

0801495c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801495c:	b480      	push	{r7}
 801495e:	b08b      	sub	sp, #44	; 0x2c
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	4613      	mov	r3, r2
 8014968:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014972:	88fb      	ldrh	r3, [r7, #6]
 8014974:	089b      	lsrs	r3, r3, #2
 8014976:	b29b      	uxth	r3, r3
 8014978:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801497a:	88fb      	ldrh	r3, [r7, #6]
 801497c:	f003 0303 	and.w	r3, r3, #3
 8014980:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014982:	2300      	movs	r3, #0
 8014984:	623b      	str	r3, [r7, #32]
 8014986:	e014      	b.n	80149b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014988:	69bb      	ldr	r3, [r7, #24]
 801498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801498e:	681a      	ldr	r2, [r3, #0]
 8014990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014992:	601a      	str	r2, [r3, #0]
    pDest++;
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	3301      	adds	r3, #1
 8014998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499c:	3301      	adds	r3, #1
 801499e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a2:	3301      	adds	r3, #1
 80149a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a8:	3301      	adds	r3, #1
 80149aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80149ac:	6a3b      	ldr	r3, [r7, #32]
 80149ae:	3301      	adds	r3, #1
 80149b0:	623b      	str	r3, [r7, #32]
 80149b2:	6a3a      	ldr	r2, [r7, #32]
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d3e6      	bcc.n	8014988 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80149ba:	8bfb      	ldrh	r3, [r7, #30]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d01e      	beq.n	80149fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80149c0:	2300      	movs	r3, #0
 80149c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149ca:	461a      	mov	r2, r3
 80149cc:	f107 0310 	add.w	r3, r7, #16
 80149d0:	6812      	ldr	r2, [r2, #0]
 80149d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80149d4:	693a      	ldr	r2, [r7, #16]
 80149d6:	6a3b      	ldr	r3, [r7, #32]
 80149d8:	b2db      	uxtb	r3, r3
 80149da:	00db      	lsls	r3, r3, #3
 80149dc:	fa22 f303 	lsr.w	r3, r2, r3
 80149e0:	b2da      	uxtb	r2, r3
 80149e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e4:	701a      	strb	r2, [r3, #0]
      i++;
 80149e6:	6a3b      	ldr	r3, [r7, #32]
 80149e8:	3301      	adds	r3, #1
 80149ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80149ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ee:	3301      	adds	r3, #1
 80149f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80149f2:	8bfb      	ldrh	r3, [r7, #30]
 80149f4:	3b01      	subs	r3, #1
 80149f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80149f8:	8bfb      	ldrh	r3, [r7, #30]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d1ea      	bne.n	80149d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80149fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	372c      	adds	r7, #44	; 0x2c
 8014a04:	46bd      	mov	sp, r7
 8014a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0a:	4770      	bx	lr

08014a0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b085      	sub	sp, #20
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	785b      	ldrb	r3, [r3, #1]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d12c      	bne.n	8014a82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	015a      	lsls	r2, r3, #5
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	4413      	add	r3, r2
 8014a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	db12      	blt.n	8014a60 <USB_EPSetStall+0x54>
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d00f      	beq.n	8014a60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	015a      	lsls	r2, r3, #5
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	4413      	add	r3, r2
 8014a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	68ba      	ldr	r2, [r7, #8]
 8014a50:	0151      	lsls	r1, r2, #5
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	440a      	add	r2, r1
 8014a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014a5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	015a      	lsls	r2, r3, #5
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	4413      	add	r3, r2
 8014a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	68ba      	ldr	r2, [r7, #8]
 8014a70:	0151      	lsls	r1, r2, #5
 8014a72:	68fa      	ldr	r2, [r7, #12]
 8014a74:	440a      	add	r2, r1
 8014a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014a7e:	6013      	str	r3, [r2, #0]
 8014a80:	e02b      	b.n	8014ada <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	015a      	lsls	r2, r3, #5
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	4413      	add	r3, r2
 8014a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	db12      	blt.n	8014aba <USB_EPSetStall+0xae>
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d00f      	beq.n	8014aba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	015a      	lsls	r2, r3, #5
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	68ba      	ldr	r2, [r7, #8]
 8014aaa:	0151      	lsls	r1, r2, #5
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	440a      	add	r2, r1
 8014ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014ab8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	015a      	lsls	r2, r3, #5
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	4413      	add	r3, r2
 8014ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	68ba      	ldr	r2, [r7, #8]
 8014aca:	0151      	lsls	r1, r2, #5
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	440a      	add	r2, r1
 8014ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014ad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014ada:	2300      	movs	r3, #0
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3714      	adds	r7, #20
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b085      	sub	sp, #20
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	785b      	ldrb	r3, [r3, #1]
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d128      	bne.n	8014b56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	015a      	lsls	r2, r3, #5
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	68ba      	ldr	r2, [r7, #8]
 8014b14:	0151      	lsls	r1, r2, #5
 8014b16:	68fa      	ldr	r2, [r7, #12]
 8014b18:	440a      	add	r2, r1
 8014b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	791b      	ldrb	r3, [r3, #4]
 8014b28:	2b03      	cmp	r3, #3
 8014b2a:	d003      	beq.n	8014b34 <USB_EPClearStall+0x4c>
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	791b      	ldrb	r3, [r3, #4]
 8014b30:	2b02      	cmp	r3, #2
 8014b32:	d138      	bne.n	8014ba6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	015a      	lsls	r2, r3, #5
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	68ba      	ldr	r2, [r7, #8]
 8014b44:	0151      	lsls	r1, r2, #5
 8014b46:	68fa      	ldr	r2, [r7, #12]
 8014b48:	440a      	add	r2, r1
 8014b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b52:	6013      	str	r3, [r2, #0]
 8014b54:	e027      	b.n	8014ba6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014b56:	68bb      	ldr	r3, [r7, #8]
 8014b58:	015a      	lsls	r2, r3, #5
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	68ba      	ldr	r2, [r7, #8]
 8014b66:	0151      	lsls	r1, r2, #5
 8014b68:	68fa      	ldr	r2, [r7, #12]
 8014b6a:	440a      	add	r2, r1
 8014b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	791b      	ldrb	r3, [r3, #4]
 8014b7a:	2b03      	cmp	r3, #3
 8014b7c:	d003      	beq.n	8014b86 <USB_EPClearStall+0x9e>
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	791b      	ldrb	r3, [r3, #4]
 8014b82:	2b02      	cmp	r3, #2
 8014b84:	d10f      	bne.n	8014ba6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	015a      	lsls	r2, r3, #5
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	4413      	add	r3, r2
 8014b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	68ba      	ldr	r2, [r7, #8]
 8014b96:	0151      	lsls	r1, r2, #5
 8014b98:	68fa      	ldr	r2, [r7, #12]
 8014b9a:	440a      	add	r2, r1
 8014b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ba4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014ba6:	2300      	movs	r3, #0
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3714      	adds	r7, #20
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b085      	sub	sp, #20
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014bd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014bd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	78fb      	ldrb	r3, [r7, #3]
 8014be2:	011b      	lsls	r3, r3, #4
 8014be4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014be8:	68f9      	ldr	r1, [r7, #12]
 8014bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3714      	adds	r7, #20
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr

08014c00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c00:	b480      	push	{r7}
 8014c02:	b085      	sub	sp, #20
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	68fa      	ldr	r2, [r7, #12]
 8014c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c1a:	f023 0303 	bic.w	r3, r3, #3
 8014c1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	68fa      	ldr	r2, [r7, #12]
 8014c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c2e:	f023 0302 	bic.w	r3, r3, #2
 8014c32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c34:	2300      	movs	r3, #0
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3714      	adds	r7, #20
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c40:	4770      	bx	lr

08014c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c42:	b480      	push	{r7}
 8014c44:	b085      	sub	sp, #20
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	68fa      	ldr	r2, [r7, #12]
 8014c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c5c:	f023 0303 	bic.w	r3, r3, #3
 8014c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	68fa      	ldr	r2, [r7, #12]
 8014c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c70:	f043 0302 	orr.w	r3, r3, #2
 8014c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c76:	2300      	movs	r3, #0
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3714      	adds	r7, #20
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014c84:	b480      	push	{r7}
 8014c86:	b085      	sub	sp, #20
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	695b      	ldr	r3, [r3, #20]
 8014c90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	699b      	ldr	r3, [r3, #24]
 8014c96:	68fa      	ldr	r2, [r7, #12]
 8014c98:	4013      	ands	r3, r2
 8014c9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3714      	adds	r7, #20
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca8:	4770      	bx	lr

08014caa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014caa:	b480      	push	{r7}
 8014cac:	b085      	sub	sp, #20
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cbc:	699b      	ldr	r3, [r3, #24]
 8014cbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cc6:	69db      	ldr	r3, [r3, #28]
 8014cc8:	68ba      	ldr	r2, [r7, #8]
 8014cca:	4013      	ands	r3, r2
 8014ccc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	0c1b      	lsrs	r3, r3, #16
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3714      	adds	r7, #20
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr

08014cde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cde:	b480      	push	{r7}
 8014ce0:	b085      	sub	sp, #20
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cf0:	699b      	ldr	r3, [r3, #24]
 8014cf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cfa:	69db      	ldr	r3, [r3, #28]
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	4013      	ands	r3, r2
 8014d00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	b29b      	uxth	r3, r3
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3714      	adds	r7, #20
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d10:	4770      	bx	lr

08014d12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d12:	b480      	push	{r7}
 8014d14:	b085      	sub	sp, #20
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014d22:	78fb      	ldrb	r3, [r7, #3]
 8014d24:	015a      	lsls	r2, r3, #5
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	4413      	add	r3, r2
 8014d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d38:	695b      	ldr	r3, [r3, #20]
 8014d3a:	68ba      	ldr	r2, [r7, #8]
 8014d3c:	4013      	ands	r3, r2
 8014d3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d40:	68bb      	ldr	r3, [r7, #8]
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3714      	adds	r7, #20
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr

08014d4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d4e:	b480      	push	{r7}
 8014d50:	b087      	sub	sp, #28
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
 8014d56:	460b      	mov	r3, r1
 8014d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d64:	691b      	ldr	r3, [r3, #16]
 8014d66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014d72:	78fb      	ldrb	r3, [r7, #3]
 8014d74:	f003 030f 	and.w	r3, r3, #15
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8014d7e:	01db      	lsls	r3, r3, #7
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	693a      	ldr	r2, [r7, #16]
 8014d84:	4313      	orrs	r3, r2
 8014d86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014d88:	78fb      	ldrb	r3, [r7, #3]
 8014d8a:	015a      	lsls	r2, r3, #5
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	4413      	add	r3, r2
 8014d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d94:	689b      	ldr	r3, [r3, #8]
 8014d96:	693a      	ldr	r2, [r7, #16]
 8014d98:	4013      	ands	r3, r2
 8014d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d9c:	68bb      	ldr	r3, [r7, #8]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	371c      	adds	r7, #28
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr

08014daa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014daa:	b480      	push	{r7}
 8014dac:	b083      	sub	sp, #12
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	695b      	ldr	r3, [r3, #20]
 8014db6:	f003 0301 	and.w	r3, r3, #1
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	370c      	adds	r7, #12
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr
	...

08014dc8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b085      	sub	sp, #20
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014de2:	4619      	mov	r1, r3
 8014de4:	4b09      	ldr	r3, [pc, #36]	; (8014e0c <USB_ActivateSetup+0x44>)
 8014de6:	4013      	ands	r3, r2
 8014de8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	68fa      	ldr	r2, [r7, #12]
 8014df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014dfe:	2300      	movs	r3, #0
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3714      	adds	r7, #20
 8014e04:	46bd      	mov	sp, r7
 8014e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0a:	4770      	bx	lr
 8014e0c:	fffff800 	.word	0xfffff800

08014e10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014e10:	b480      	push	{r7}
 8014e12:	b087      	sub	sp, #28
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	60f8      	str	r0, [r7, #12]
 8014e18:	460b      	mov	r3, r1
 8014e1a:	607a      	str	r2, [r7, #4]
 8014e1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	333c      	adds	r3, #60	; 0x3c
 8014e26:	3304      	adds	r3, #4
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	4a26      	ldr	r2, [pc, #152]	; (8014ec8 <USB_EP0_OutStart+0xb8>)
 8014e30:	4293      	cmp	r3, r2
 8014e32:	d90a      	bls.n	8014e4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014e44:	d101      	bne.n	8014e4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014e46:	2300      	movs	r3, #0
 8014e48:	e037      	b.n	8014eba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e50:	461a      	mov	r2, r3
 8014e52:	2300      	movs	r3, #0
 8014e54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e5c:	691b      	ldr	r3, [r3, #16]
 8014e5e:	697a      	ldr	r2, [r7, #20]
 8014e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e70:	691b      	ldr	r3, [r3, #16]
 8014e72:	697a      	ldr	r2, [r7, #20]
 8014e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e78:	f043 0318 	orr.w	r3, r3, #24
 8014e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e84:	691b      	ldr	r3, [r3, #16]
 8014e86:	697a      	ldr	r2, [r7, #20]
 8014e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014e8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014e90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014e92:	7afb      	ldrb	r3, [r7, #11]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d10f      	bne.n	8014eb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e9e:	461a      	mov	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	697a      	ldr	r2, [r7, #20]
 8014eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014eb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014eb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	371c      	adds	r7, #28
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec4:	4770      	bx	lr
 8014ec6:	bf00      	nop
 8014ec8:	4f54300a 	.word	0x4f54300a

08014ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b085      	sub	sp, #20
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	3301      	adds	r3, #1
 8014edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	4a13      	ldr	r2, [pc, #76]	; (8014f30 <USB_CoreReset+0x64>)
 8014ee2:	4293      	cmp	r3, r2
 8014ee4:	d901      	bls.n	8014eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014ee6:	2303      	movs	r3, #3
 8014ee8:	e01b      	b.n	8014f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	691b      	ldr	r3, [r3, #16]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	daf2      	bge.n	8014ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	691b      	ldr	r3, [r3, #16]
 8014efa:	f043 0201 	orr.w	r2, r3, #1
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	3301      	adds	r3, #1
 8014f06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	4a09      	ldr	r2, [pc, #36]	; (8014f30 <USB_CoreReset+0x64>)
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	d901      	bls.n	8014f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014f10:	2303      	movs	r3, #3
 8014f12:	e006      	b.n	8014f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	691b      	ldr	r3, [r3, #16]
 8014f18:	f003 0301 	and.w	r3, r3, #1
 8014f1c:	2b01      	cmp	r3, #1
 8014f1e:	d0f0      	beq.n	8014f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8014f20:	2300      	movs	r3, #0
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3714      	adds	r7, #20
 8014f26:	46bd      	mov	sp, r7
 8014f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop
 8014f30:	00030d40 	.word	0x00030d40

08014f34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014f38:	4904      	ldr	r1, [pc, #16]	; (8014f4c <MX_FATFS_Init+0x18>)
 8014f3a:	4805      	ldr	r0, [pc, #20]	; (8014f50 <MX_FATFS_Init+0x1c>)
 8014f3c:	f005 f906 	bl	801a14c <FATFS_LinkDriver>
 8014f40:	4603      	mov	r3, r0
 8014f42:	461a      	mov	r2, r3
 8014f44:	4b03      	ldr	r3, [pc, #12]	; (8014f54 <MX_FATFS_Init+0x20>)
 8014f46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014f48:	bf00      	nop
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	240016a4 	.word	0x240016a4
 8014f50:	0801f93c 	.word	0x0801f93c
 8014f54:	240016a0 	.word	0x240016a0

08014f58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014f5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr

08014f68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014f72:	f000 f885 	bl	8015080 <BSP_SD_IsDetected>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d001      	beq.n	8014f80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	e012      	b.n	8014fa6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014f80:	480b      	ldr	r0, [pc, #44]	; (8014fb0 <BSP_SD_Init+0x48>)
 8014f82:	f7f8 ff39 	bl	800ddf8 <HAL_SD_Init>
 8014f86:	4603      	mov	r3, r0
 8014f88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014f8a:	79fb      	ldrb	r3, [r7, #7]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d109      	bne.n	8014fa4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014f94:	4806      	ldr	r0, [pc, #24]	; (8014fb0 <BSP_SD_Init+0x48>)
 8014f96:	f7f9 fdef 	bl	800eb78 <HAL_SD_ConfigWideBusOperation>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d001      	beq.n	8014fa4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3708      	adds	r7, #8
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	24000f3c 	.word	0x24000f3c

08014fb4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b086      	sub	sp, #24
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	68ba      	ldr	r2, [r7, #8]
 8014fc8:	68f9      	ldr	r1, [r7, #12]
 8014fca:	4806      	ldr	r0, [pc, #24]	; (8014fe4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014fcc:	f7f9 f834 	bl	800e038 <HAL_SD_ReadBlocks_DMA>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d001      	beq.n	8014fda <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3718      	adds	r7, #24
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	24000f3c 	.word	0x24000f3c

08014fe8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b086      	sub	sp, #24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	68ba      	ldr	r2, [r7, #8]
 8014ffc:	68f9      	ldr	r1, [r7, #12]
 8014ffe:	4806      	ldr	r0, [pc, #24]	; (8015018 <BSP_SD_WriteBlocks_DMA+0x30>)
 8015000:	f7f9 f8c2 	bl	800e188 <HAL_SD_WriteBlocks_DMA>
 8015004:	4603      	mov	r3, r0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d001      	beq.n	801500e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801500a:	2301      	movs	r3, #1
 801500c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015010:	4618      	mov	r0, r3
 8015012:	3718      	adds	r7, #24
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	24000f3c 	.word	0x24000f3c

0801501c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015020:	4805      	ldr	r0, [pc, #20]	; (8015038 <BSP_SD_GetCardState+0x1c>)
 8015022:	f7f9 febb 	bl	800ed9c <HAL_SD_GetCardState>
 8015026:	4603      	mov	r3, r0
 8015028:	2b04      	cmp	r3, #4
 801502a:	bf14      	ite	ne
 801502c:	2301      	movne	r3, #1
 801502e:	2300      	moveq	r3, #0
 8015030:	b2db      	uxtb	r3, r3
}
 8015032:	4618      	mov	r0, r3
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	24000f3c 	.word	0x24000f3c

0801503c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b082      	sub	sp, #8
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8015044:	6879      	ldr	r1, [r7, #4]
 8015046:	4803      	ldr	r0, [pc, #12]	; (8015054 <BSP_SD_GetCardInfo+0x18>)
 8015048:	f7f9 fd6a 	bl	800eb20 <HAL_SD_GetCardInfo>
}
 801504c:	bf00      	nop
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	24000f3c 	.word	0x24000f3c

08015058 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8015060:	f000 f984 	bl	801536c <BSP_SD_WriteCpltCallback>
}
 8015064:	bf00      	nop
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8015074:	f000 f986 	bl	8015384 <BSP_SD_ReadCpltCallback>
}
 8015078:	bf00      	nop
 801507a:	3708      	adds	r7, #8
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015086:	2301      	movs	r3, #1
 8015088:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801508a:	79fb      	ldrb	r3, [r7, #7]
 801508c:	b2db      	uxtb	r3, r3
}
 801508e:	4618      	mov	r0, r3
 8015090:	370c      	adds	r7, #12
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr

0801509a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801509a:	b580      	push	{r7, lr}
 801509c:	b084      	sub	sp, #16
 801509e:	af00      	add	r7, sp, #0
 80150a0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80150a2:	f7ee ff89 	bl	8003fb8 <HAL_GetTick>
 80150a6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80150a8:	e006      	b.n	80150b8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80150aa:	f7ff ffb7 	bl	801501c <BSP_SD_GetCardState>
 80150ae:	4603      	mov	r3, r0
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d101      	bne.n	80150b8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80150b4:	2300      	movs	r3, #0
 80150b6:	e009      	b.n	80150cc <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80150b8:	f7ee ff7e 	bl	8003fb8 <HAL_GetTick>
 80150bc:	4602      	mov	r2, r0
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	687a      	ldr	r2, [r7, #4]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d8f0      	bhi.n	80150aa <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80150c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3710      	adds	r7, #16
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	4603      	mov	r3, r0
 80150dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80150de:	4b0b      	ldr	r3, [pc, #44]	; (801510c <SD_CheckStatus+0x38>)
 80150e0:	2201      	movs	r2, #1
 80150e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80150e4:	f7ff ff9a 	bl	801501c <BSP_SD_GetCardState>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d107      	bne.n	80150fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80150ee:	4b07      	ldr	r3, [pc, #28]	; (801510c <SD_CheckStatus+0x38>)
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	f023 0301 	bic.w	r3, r3, #1
 80150f8:	b2da      	uxtb	r2, r3
 80150fa:	4b04      	ldr	r3, [pc, #16]	; (801510c <SD_CheckStatus+0x38>)
 80150fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80150fe:	4b03      	ldr	r3, [pc, #12]	; (801510c <SD_CheckStatus+0x38>)
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	b2db      	uxtb	r3, r3
}
 8015104:	4618      	mov	r0, r3
 8015106:	3708      	adds	r7, #8
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	2400000d 	.word	0x2400000d

08015110 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	4603      	mov	r3, r0
 8015118:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801511a:	f7ff ff25 	bl	8014f68 <BSP_SD_Init>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d107      	bne.n	8015134 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015124:	79fb      	ldrb	r3, [r7, #7]
 8015126:	4618      	mov	r0, r3
 8015128:	f7ff ffd4 	bl	80150d4 <SD_CheckStatus>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	4b04      	ldr	r3, [pc, #16]	; (8015144 <SD_initialize+0x34>)
 8015132:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015134:	4b03      	ldr	r3, [pc, #12]	; (8015144 <SD_initialize+0x34>)
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	b2db      	uxtb	r3, r3
}
 801513a:	4618      	mov	r0, r3
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}
 8015142:	bf00      	nop
 8015144:	2400000d 	.word	0x2400000d

08015148 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	4603      	mov	r3, r0
 8015150:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015152:	79fb      	ldrb	r3, [r7, #7]
 8015154:	4618      	mov	r0, r3
 8015156:	f7ff ffbd 	bl	80150d4 <SD_CheckStatus>
 801515a:	4603      	mov	r3, r0
}
 801515c:	4618      	mov	r0, r3
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}

08015164 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b086      	sub	sp, #24
 8015168:	af00      	add	r7, sp, #0
 801516a:	60b9      	str	r1, [r7, #8]
 801516c:	607a      	str	r2, [r7, #4]
 801516e:	603b      	str	r3, [r7, #0]
 8015170:	4603      	mov	r3, r0
 8015172:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015174:	2301      	movs	r3, #1
 8015176:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015178:	f247 5030 	movw	r0, #30000	; 0x7530
 801517c:	f7ff ff8d 	bl	801509a <SD_CheckStatusWithTimeout>
 8015180:	4603      	mov	r3, r0
 8015182:	2b00      	cmp	r3, #0
 8015184:	da01      	bge.n	801518a <SD_read+0x26>
  {
    return res;
 8015186:	7dfb      	ldrb	r3, [r7, #23]
 8015188:	e03b      	b.n	8015202 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801518a:	683a      	ldr	r2, [r7, #0]
 801518c:	6879      	ldr	r1, [r7, #4]
 801518e:	68b8      	ldr	r0, [r7, #8]
 8015190:	f7ff ff10 	bl	8014fb4 <BSP_SD_ReadBlocks_DMA>
 8015194:	4603      	mov	r3, r0
 8015196:	2b00      	cmp	r3, #0
 8015198:	d132      	bne.n	8015200 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801519a:	4b1c      	ldr	r3, [pc, #112]	; (801520c <SD_read+0xa8>)
 801519c:	2200      	movs	r2, #0
 801519e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80151a0:	f7ee ff0a 	bl	8003fb8 <HAL_GetTick>
 80151a4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80151a6:	bf00      	nop
 80151a8:	4b18      	ldr	r3, [pc, #96]	; (801520c <SD_read+0xa8>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d108      	bne.n	80151c2 <SD_read+0x5e>
 80151b0:	f7ee ff02 	bl	8003fb8 <HAL_GetTick>
 80151b4:	4602      	mov	r2, r0
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80151be:	4293      	cmp	r3, r2
 80151c0:	d9f2      	bls.n	80151a8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80151c2:	4b12      	ldr	r3, [pc, #72]	; (801520c <SD_read+0xa8>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d102      	bne.n	80151d0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80151ca:	2301      	movs	r3, #1
 80151cc:	75fb      	strb	r3, [r7, #23]
 80151ce:	e017      	b.n	8015200 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80151d0:	4b0e      	ldr	r3, [pc, #56]	; (801520c <SD_read+0xa8>)
 80151d2:	2200      	movs	r2, #0
 80151d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80151d6:	f7ee feef 	bl	8003fb8 <HAL_GetTick>
 80151da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80151dc:	e007      	b.n	80151ee <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80151de:	f7ff ff1d 	bl	801501c <BSP_SD_GetCardState>
 80151e2:	4603      	mov	r3, r0
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d102      	bne.n	80151ee <SD_read+0x8a>
          {
            res = RES_OK;
 80151e8:	2300      	movs	r3, #0
 80151ea:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80151ec:	e008      	b.n	8015200 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80151ee:	f7ee fee3 	bl	8003fb8 <HAL_GetTick>
 80151f2:	4602      	mov	r2, r0
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	1ad3      	subs	r3, r2, r3
 80151f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80151fc:	4293      	cmp	r3, r2
 80151fe:	d9ee      	bls.n	80151de <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8015200:	7dfb      	ldrb	r3, [r7, #23]
}
 8015202:	4618      	mov	r0, r3
 8015204:	3718      	adds	r7, #24
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}
 801520a:	bf00      	nop
 801520c:	240016ac 	.word	0x240016ac

08015210 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b086      	sub	sp, #24
 8015214:	af00      	add	r7, sp, #0
 8015216:	60b9      	str	r1, [r7, #8]
 8015218:	607a      	str	r2, [r7, #4]
 801521a:	603b      	str	r3, [r7, #0]
 801521c:	4603      	mov	r3, r0
 801521e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015220:	2301      	movs	r3, #1
 8015222:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015224:	4b24      	ldr	r3, [pc, #144]	; (80152b8 <SD_write+0xa8>)
 8015226:	2200      	movs	r2, #0
 8015228:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801522a:	f247 5030 	movw	r0, #30000	; 0x7530
 801522e:	f7ff ff34 	bl	801509a <SD_CheckStatusWithTimeout>
 8015232:	4603      	mov	r3, r0
 8015234:	2b00      	cmp	r3, #0
 8015236:	da01      	bge.n	801523c <SD_write+0x2c>
  {
    return res;
 8015238:	7dfb      	ldrb	r3, [r7, #23]
 801523a:	e038      	b.n	80152ae <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801523c:	683a      	ldr	r2, [r7, #0]
 801523e:	6879      	ldr	r1, [r7, #4]
 8015240:	68b8      	ldr	r0, [r7, #8]
 8015242:	f7ff fed1 	bl	8014fe8 <BSP_SD_WriteBlocks_DMA>
 8015246:	4603      	mov	r3, r0
 8015248:	2b00      	cmp	r3, #0
 801524a:	d12f      	bne.n	80152ac <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801524c:	f7ee feb4 	bl	8003fb8 <HAL_GetTick>
 8015250:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015252:	bf00      	nop
 8015254:	4b18      	ldr	r3, [pc, #96]	; (80152b8 <SD_write+0xa8>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d108      	bne.n	801526e <SD_write+0x5e>
 801525c:	f7ee feac 	bl	8003fb8 <HAL_GetTick>
 8015260:	4602      	mov	r2, r0
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	1ad3      	subs	r3, r2, r3
 8015266:	f247 522f 	movw	r2, #29999	; 0x752f
 801526a:	4293      	cmp	r3, r2
 801526c:	d9f2      	bls.n	8015254 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801526e:	4b12      	ldr	r3, [pc, #72]	; (80152b8 <SD_write+0xa8>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d102      	bne.n	801527c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8015276:	2301      	movs	r3, #1
 8015278:	75fb      	strb	r3, [r7, #23]
 801527a:	e017      	b.n	80152ac <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801527c:	4b0e      	ldr	r3, [pc, #56]	; (80152b8 <SD_write+0xa8>)
 801527e:	2200      	movs	r2, #0
 8015280:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015282:	f7ee fe99 	bl	8003fb8 <HAL_GetTick>
 8015286:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015288:	e007      	b.n	801529a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801528a:	f7ff fec7 	bl	801501c <BSP_SD_GetCardState>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	d102      	bne.n	801529a <SD_write+0x8a>
          {
            res = RES_OK;
 8015294:	2300      	movs	r3, #0
 8015296:	75fb      	strb	r3, [r7, #23]
            break;
 8015298:	e008      	b.n	80152ac <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801529a:	f7ee fe8d 	bl	8003fb8 <HAL_GetTick>
 801529e:	4602      	mov	r2, r0
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	1ad3      	subs	r3, r2, r3
 80152a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80152a8:	4293      	cmp	r3, r2
 80152aa:	d9ee      	bls.n	801528a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80152ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	240016a8 	.word	0x240016a8

080152bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b08c      	sub	sp, #48	; 0x30
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	4603      	mov	r3, r0
 80152c4:	603a      	str	r2, [r7, #0]
 80152c6:	71fb      	strb	r3, [r7, #7]
 80152c8:	460b      	mov	r3, r1
 80152ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80152cc:	2301      	movs	r3, #1
 80152ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80152d2:	4b25      	ldr	r3, [pc, #148]	; (8015368 <SD_ioctl+0xac>)
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	f003 0301 	and.w	r3, r3, #1
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d001      	beq.n	80152e4 <SD_ioctl+0x28>
 80152e0:	2303      	movs	r3, #3
 80152e2:	e03c      	b.n	801535e <SD_ioctl+0xa2>

  switch (cmd)
 80152e4:	79bb      	ldrb	r3, [r7, #6]
 80152e6:	2b03      	cmp	r3, #3
 80152e8:	d834      	bhi.n	8015354 <SD_ioctl+0x98>
 80152ea:	a201      	add	r2, pc, #4	; (adr r2, 80152f0 <SD_ioctl+0x34>)
 80152ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152f0:	08015301 	.word	0x08015301
 80152f4:	08015309 	.word	0x08015309
 80152f8:	08015321 	.word	0x08015321
 80152fc:	0801533b 	.word	0x0801533b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015300:	2300      	movs	r3, #0
 8015302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015306:	e028      	b.n	801535a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015308:	f107 0308 	add.w	r3, r7, #8
 801530c:	4618      	mov	r0, r3
 801530e:	f7ff fe95 	bl	801503c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015312:	6a3a      	ldr	r2, [r7, #32]
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015318:	2300      	movs	r3, #0
 801531a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801531e:	e01c      	b.n	801535a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015320:	f107 0308 	add.w	r3, r7, #8
 8015324:	4618      	mov	r0, r3
 8015326:	f7ff fe89 	bl	801503c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532c:	b29a      	uxth	r2, r3
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015332:	2300      	movs	r3, #0
 8015334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015338:	e00f      	b.n	801535a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801533a:	f107 0308 	add.w	r3, r7, #8
 801533e:	4618      	mov	r0, r3
 8015340:	f7ff fe7c 	bl	801503c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015346:	0a5a      	lsrs	r2, r3, #9
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801534c:	2300      	movs	r3, #0
 801534e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015352:	e002      	b.n	801535a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015354:	2304      	movs	r3, #4
 8015356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801535a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801535e:	4618      	mov	r0, r3
 8015360:	3730      	adds	r7, #48	; 0x30
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	2400000d 	.word	0x2400000d

0801536c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801536c:	b480      	push	{r7}
 801536e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015370:	4b03      	ldr	r3, [pc, #12]	; (8015380 <BSP_SD_WriteCpltCallback+0x14>)
 8015372:	2201      	movs	r2, #1
 8015374:	601a      	str	r2, [r3, #0]
}
 8015376:	bf00      	nop
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr
 8015380:	240016a8 	.word	0x240016a8

08015384 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015384:	b480      	push	{r7}
 8015386:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015388:	4b03      	ldr	r3, [pc, #12]	; (8015398 <BSP_SD_ReadCpltCallback+0x14>)
 801538a:	2201      	movs	r2, #1
 801538c:	601a      	str	r2, [r3, #0]
}
 801538e:	bf00      	nop
 8015390:	46bd      	mov	sp, r7
 8015392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015396:	4770      	bx	lr
 8015398:	240016ac 	.word	0x240016ac

0801539c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	460b      	mov	r3, r1
 80153a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80153a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80153ac:	f005 fc74 	bl	801ac98 <USBD_static_malloc>
 80153b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d109      	bne.n	80153cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	32b0      	adds	r2, #176	; 0xb0
 80153c2:	2100      	movs	r1, #0
 80153c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80153c8:	2302      	movs	r3, #2
 80153ca:	e0d4      	b.n	8015576 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80153cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80153d0:	2100      	movs	r1, #0
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f005 fcdc 	bl	801ad90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	32b0      	adds	r2, #176	; 0xb0
 80153e2:	68f9      	ldr	r1, [r7, #12]
 80153e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	32b0      	adds	r2, #176	; 0xb0
 80153f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	7c1b      	ldrb	r3, [r3, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d138      	bne.n	8015476 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015404:	4b5e      	ldr	r3, [pc, #376]	; (8015580 <USBD_CDC_Init+0x1e4>)
 8015406:	7819      	ldrb	r1, [r3, #0]
 8015408:	f44f 7300 	mov.w	r3, #512	; 0x200
 801540c:	2202      	movs	r2, #2
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f005 fb1f 	bl	801aa52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015414:	4b5a      	ldr	r3, [pc, #360]	; (8015580 <USBD_CDC_Init+0x1e4>)
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	f003 020f 	and.w	r2, r3, #15
 801541c:	6879      	ldr	r1, [r7, #4]
 801541e:	4613      	mov	r3, r2
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	4413      	add	r3, r2
 8015424:	009b      	lsls	r3, r3, #2
 8015426:	440b      	add	r3, r1
 8015428:	3324      	adds	r3, #36	; 0x24
 801542a:	2201      	movs	r2, #1
 801542c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801542e:	4b55      	ldr	r3, [pc, #340]	; (8015584 <USBD_CDC_Init+0x1e8>)
 8015430:	7819      	ldrb	r1, [r3, #0]
 8015432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015436:	2202      	movs	r2, #2
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f005 fb0a 	bl	801aa52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801543e:	4b51      	ldr	r3, [pc, #324]	; (8015584 <USBD_CDC_Init+0x1e8>)
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	f003 020f 	and.w	r2, r3, #15
 8015446:	6879      	ldr	r1, [r7, #4]
 8015448:	4613      	mov	r3, r2
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	4413      	add	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	440b      	add	r3, r1
 8015452:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015456:	2201      	movs	r2, #1
 8015458:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801545a:	4b4b      	ldr	r3, [pc, #300]	; (8015588 <USBD_CDC_Init+0x1ec>)
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	f003 020f 	and.w	r2, r3, #15
 8015462:	6879      	ldr	r1, [r7, #4]
 8015464:	4613      	mov	r3, r2
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	4413      	add	r3, r2
 801546a:	009b      	lsls	r3, r3, #2
 801546c:	440b      	add	r3, r1
 801546e:	3326      	adds	r3, #38	; 0x26
 8015470:	2210      	movs	r2, #16
 8015472:	801a      	strh	r2, [r3, #0]
 8015474:	e035      	b.n	80154e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015476:	4b42      	ldr	r3, [pc, #264]	; (8015580 <USBD_CDC_Init+0x1e4>)
 8015478:	7819      	ldrb	r1, [r3, #0]
 801547a:	2340      	movs	r3, #64	; 0x40
 801547c:	2202      	movs	r2, #2
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f005 fae7 	bl	801aa52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015484:	4b3e      	ldr	r3, [pc, #248]	; (8015580 <USBD_CDC_Init+0x1e4>)
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	f003 020f 	and.w	r2, r3, #15
 801548c:	6879      	ldr	r1, [r7, #4]
 801548e:	4613      	mov	r3, r2
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	4413      	add	r3, r2
 8015494:	009b      	lsls	r3, r3, #2
 8015496:	440b      	add	r3, r1
 8015498:	3324      	adds	r3, #36	; 0x24
 801549a:	2201      	movs	r2, #1
 801549c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801549e:	4b39      	ldr	r3, [pc, #228]	; (8015584 <USBD_CDC_Init+0x1e8>)
 80154a0:	7819      	ldrb	r1, [r3, #0]
 80154a2:	2340      	movs	r3, #64	; 0x40
 80154a4:	2202      	movs	r2, #2
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f005 fad3 	bl	801aa52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80154ac:	4b35      	ldr	r3, [pc, #212]	; (8015584 <USBD_CDC_Init+0x1e8>)
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	f003 020f 	and.w	r2, r3, #15
 80154b4:	6879      	ldr	r1, [r7, #4]
 80154b6:	4613      	mov	r3, r2
 80154b8:	009b      	lsls	r3, r3, #2
 80154ba:	4413      	add	r3, r2
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	440b      	add	r3, r1
 80154c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80154c4:	2201      	movs	r2, #1
 80154c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80154c8:	4b2f      	ldr	r3, [pc, #188]	; (8015588 <USBD_CDC_Init+0x1ec>)
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	f003 020f 	and.w	r2, r3, #15
 80154d0:	6879      	ldr	r1, [r7, #4]
 80154d2:	4613      	mov	r3, r2
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	4413      	add	r3, r2
 80154d8:	009b      	lsls	r3, r3, #2
 80154da:	440b      	add	r3, r1
 80154dc:	3326      	adds	r3, #38	; 0x26
 80154de:	2210      	movs	r2, #16
 80154e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80154e2:	4b29      	ldr	r3, [pc, #164]	; (8015588 <USBD_CDC_Init+0x1ec>)
 80154e4:	7819      	ldrb	r1, [r3, #0]
 80154e6:	2308      	movs	r3, #8
 80154e8:	2203      	movs	r2, #3
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f005 fab1 	bl	801aa52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80154f0:	4b25      	ldr	r3, [pc, #148]	; (8015588 <USBD_CDC_Init+0x1ec>)
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	f003 020f 	and.w	r2, r3, #15
 80154f8:	6879      	ldr	r1, [r7, #4]
 80154fa:	4613      	mov	r3, r2
 80154fc:	009b      	lsls	r3, r3, #2
 80154fe:	4413      	add	r3, r2
 8015500:	009b      	lsls	r3, r3, #2
 8015502:	440b      	add	r3, r1
 8015504:	3324      	adds	r3, #36	; 0x24
 8015506:	2201      	movs	r2, #1
 8015508:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2200      	movs	r2, #0
 801550e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015518:	687a      	ldr	r2, [r7, #4]
 801551a:	33b0      	adds	r3, #176	; 0xb0
 801551c:	009b      	lsls	r3, r3, #2
 801551e:	4413      	add	r3, r2
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2200      	movs	r2, #0
 801552a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	2200      	movs	r2, #0
 8015532:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801553c:	2b00      	cmp	r3, #0
 801553e:	d101      	bne.n	8015544 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015540:	2302      	movs	r3, #2
 8015542:	e018      	b.n	8015576 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	7c1b      	ldrb	r3, [r3, #16]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10a      	bne.n	8015562 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801554c:	4b0d      	ldr	r3, [pc, #52]	; (8015584 <USBD_CDC_Init+0x1e8>)
 801554e:	7819      	ldrb	r1, [r3, #0]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015556:	f44f 7300 	mov.w	r3, #512	; 0x200
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f005 fb68 	bl	801ac30 <USBD_LL_PrepareReceive>
 8015560:	e008      	b.n	8015574 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015562:	4b08      	ldr	r3, [pc, #32]	; (8015584 <USBD_CDC_Init+0x1e8>)
 8015564:	7819      	ldrb	r1, [r3, #0]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f005 fb5e 	bl	801ac30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015574:	2300      	movs	r3, #0
}
 8015576:	4618      	mov	r0, r3
 8015578:	3710      	adds	r7, #16
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}
 801557e:	bf00      	nop
 8015580:	24000097 	.word	0x24000097
 8015584:	24000098 	.word	0x24000098
 8015588:	24000099 	.word	0x24000099

0801558c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b082      	sub	sp, #8
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	460b      	mov	r3, r1
 8015596:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015598:	4b3a      	ldr	r3, [pc, #232]	; (8015684 <USBD_CDC_DeInit+0xf8>)
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	4619      	mov	r1, r3
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f005 fa7d 	bl	801aa9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80155a4:	4b37      	ldr	r3, [pc, #220]	; (8015684 <USBD_CDC_DeInit+0xf8>)
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	f003 020f 	and.w	r2, r3, #15
 80155ac:	6879      	ldr	r1, [r7, #4]
 80155ae:	4613      	mov	r3, r2
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	4413      	add	r3, r2
 80155b4:	009b      	lsls	r3, r3, #2
 80155b6:	440b      	add	r3, r1
 80155b8:	3324      	adds	r3, #36	; 0x24
 80155ba:	2200      	movs	r2, #0
 80155bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80155be:	4b32      	ldr	r3, [pc, #200]	; (8015688 <USBD_CDC_DeInit+0xfc>)
 80155c0:	781b      	ldrb	r3, [r3, #0]
 80155c2:	4619      	mov	r1, r3
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f005 fa6a 	bl	801aa9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80155ca:	4b2f      	ldr	r3, [pc, #188]	; (8015688 <USBD_CDC_DeInit+0xfc>)
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	f003 020f 	and.w	r2, r3, #15
 80155d2:	6879      	ldr	r1, [r7, #4]
 80155d4:	4613      	mov	r3, r2
 80155d6:	009b      	lsls	r3, r3, #2
 80155d8:	4413      	add	r3, r2
 80155da:	009b      	lsls	r3, r3, #2
 80155dc:	440b      	add	r3, r1
 80155de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80155e2:	2200      	movs	r2, #0
 80155e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80155e6:	4b29      	ldr	r3, [pc, #164]	; (801568c <USBD_CDC_DeInit+0x100>)
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	4619      	mov	r1, r3
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f005 fa56 	bl	801aa9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80155f2:	4b26      	ldr	r3, [pc, #152]	; (801568c <USBD_CDC_DeInit+0x100>)
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	f003 020f 	and.w	r2, r3, #15
 80155fa:	6879      	ldr	r1, [r7, #4]
 80155fc:	4613      	mov	r3, r2
 80155fe:	009b      	lsls	r3, r3, #2
 8015600:	4413      	add	r3, r2
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	440b      	add	r3, r1
 8015606:	3324      	adds	r3, #36	; 0x24
 8015608:	2200      	movs	r2, #0
 801560a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801560c:	4b1f      	ldr	r3, [pc, #124]	; (801568c <USBD_CDC_DeInit+0x100>)
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	f003 020f 	and.w	r2, r3, #15
 8015614:	6879      	ldr	r1, [r7, #4]
 8015616:	4613      	mov	r3, r2
 8015618:	009b      	lsls	r3, r3, #2
 801561a:	4413      	add	r3, r2
 801561c:	009b      	lsls	r3, r3, #2
 801561e:	440b      	add	r3, r1
 8015620:	3326      	adds	r3, #38	; 0x26
 8015622:	2200      	movs	r2, #0
 8015624:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	32b0      	adds	r2, #176	; 0xb0
 8015630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d01f      	beq.n	8015678 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	33b0      	adds	r3, #176	; 0xb0
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	4413      	add	r3, r2
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	32b0      	adds	r2, #176	; 0xb0
 8015656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801565a:	4618      	mov	r0, r3
 801565c:	f005 fb2a 	bl	801acb4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	32b0      	adds	r2, #176	; 0xb0
 801566a:	2100      	movs	r1, #0
 801566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2200      	movs	r2, #0
 8015674:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015678:	2300      	movs	r3, #0
}
 801567a:	4618      	mov	r0, r3
 801567c:	3708      	adds	r7, #8
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
 8015682:	bf00      	nop
 8015684:	24000097 	.word	0x24000097
 8015688:	24000098 	.word	0x24000098
 801568c:	24000099 	.word	0x24000099

08015690 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b086      	sub	sp, #24
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	32b0      	adds	r2, #176	; 0xb0
 80156a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80156aa:	2300      	movs	r3, #0
 80156ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80156ae:	2300      	movs	r3, #0
 80156b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80156b2:	2300      	movs	r3, #0
 80156b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d101      	bne.n	80156c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80156bc:	2303      	movs	r3, #3
 80156be:	e0bf      	b.n	8015840 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d050      	beq.n	801576e <USBD_CDC_Setup+0xde>
 80156cc:	2b20      	cmp	r3, #32
 80156ce:	f040 80af 	bne.w	8015830 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	88db      	ldrh	r3, [r3, #6]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d03a      	beq.n	8015750 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	b25b      	sxtb	r3, r3
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	da1b      	bge.n	801571c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156ea:	687a      	ldr	r2, [r7, #4]
 80156ec:	33b0      	adds	r3, #176	; 0xb0
 80156ee:	009b      	lsls	r3, r3, #2
 80156f0:	4413      	add	r3, r2
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	689b      	ldr	r3, [r3, #8]
 80156f6:	683a      	ldr	r2, [r7, #0]
 80156f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80156fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80156fc:	683a      	ldr	r2, [r7, #0]
 80156fe:	88d2      	ldrh	r2, [r2, #6]
 8015700:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	88db      	ldrh	r3, [r3, #6]
 8015706:	2b07      	cmp	r3, #7
 8015708:	bf28      	it	cs
 801570a:	2307      	movcs	r3, #7
 801570c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801570e:	693b      	ldr	r3, [r7, #16]
 8015710:	89fa      	ldrh	r2, [r7, #14]
 8015712:	4619      	mov	r1, r3
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f001 fd89 	bl	801722c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801571a:	e090      	b.n	801583e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	785a      	ldrb	r2, [r3, #1]
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	88db      	ldrh	r3, [r3, #6]
 801572a:	2b3f      	cmp	r3, #63	; 0x3f
 801572c:	d803      	bhi.n	8015736 <USBD_CDC_Setup+0xa6>
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	88db      	ldrh	r3, [r3, #6]
 8015732:	b2da      	uxtb	r2, r3
 8015734:	e000      	b.n	8015738 <USBD_CDC_Setup+0xa8>
 8015736:	2240      	movs	r2, #64	; 0x40
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801573e:	6939      	ldr	r1, [r7, #16]
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015746:	461a      	mov	r2, r3
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f001 fd9b 	bl	8017284 <USBD_CtlPrepareRx>
      break;
 801574e:	e076      	b.n	801583e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	33b0      	adds	r3, #176	; 0xb0
 801575a:	009b      	lsls	r3, r3, #2
 801575c:	4413      	add	r3, r2
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	689b      	ldr	r3, [r3, #8]
 8015762:	683a      	ldr	r2, [r7, #0]
 8015764:	7850      	ldrb	r0, [r2, #1]
 8015766:	2200      	movs	r2, #0
 8015768:	6839      	ldr	r1, [r7, #0]
 801576a:	4798      	blx	r3
      break;
 801576c:	e067      	b.n	801583e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	785b      	ldrb	r3, [r3, #1]
 8015772:	2b0b      	cmp	r3, #11
 8015774:	d851      	bhi.n	801581a <USBD_CDC_Setup+0x18a>
 8015776:	a201      	add	r2, pc, #4	; (adr r2, 801577c <USBD_CDC_Setup+0xec>)
 8015778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801577c:	080157ad 	.word	0x080157ad
 8015780:	08015829 	.word	0x08015829
 8015784:	0801581b 	.word	0x0801581b
 8015788:	0801581b 	.word	0x0801581b
 801578c:	0801581b 	.word	0x0801581b
 8015790:	0801581b 	.word	0x0801581b
 8015794:	0801581b 	.word	0x0801581b
 8015798:	0801581b 	.word	0x0801581b
 801579c:	0801581b 	.word	0x0801581b
 80157a0:	0801581b 	.word	0x0801581b
 80157a4:	080157d7 	.word	0x080157d7
 80157a8:	08015801 	.word	0x08015801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b2:	b2db      	uxtb	r3, r3
 80157b4:	2b03      	cmp	r3, #3
 80157b6:	d107      	bne.n	80157c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80157b8:	f107 030a 	add.w	r3, r7, #10
 80157bc:	2202      	movs	r2, #2
 80157be:	4619      	mov	r1, r3
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f001 fd33 	bl	801722c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80157c6:	e032      	b.n	801582e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80157c8:	6839      	ldr	r1, [r7, #0]
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f001 fcbd 	bl	801714a <USBD_CtlError>
            ret = USBD_FAIL;
 80157d0:	2303      	movs	r3, #3
 80157d2:	75fb      	strb	r3, [r7, #23]
          break;
 80157d4:	e02b      	b.n	801582e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	2b03      	cmp	r3, #3
 80157e0:	d107      	bne.n	80157f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80157e2:	f107 030d 	add.w	r3, r7, #13
 80157e6:	2201      	movs	r2, #1
 80157e8:	4619      	mov	r1, r3
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f001 fd1e 	bl	801722c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80157f0:	e01d      	b.n	801582e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80157f2:	6839      	ldr	r1, [r7, #0]
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f001 fca8 	bl	801714a <USBD_CtlError>
            ret = USBD_FAIL;
 80157fa:	2303      	movs	r3, #3
 80157fc:	75fb      	strb	r3, [r7, #23]
          break;
 80157fe:	e016      	b.n	801582e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015806:	b2db      	uxtb	r3, r3
 8015808:	2b03      	cmp	r3, #3
 801580a:	d00f      	beq.n	801582c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801580c:	6839      	ldr	r1, [r7, #0]
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f001 fc9b 	bl	801714a <USBD_CtlError>
            ret = USBD_FAIL;
 8015814:	2303      	movs	r3, #3
 8015816:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015818:	e008      	b.n	801582c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801581a:	6839      	ldr	r1, [r7, #0]
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f001 fc94 	bl	801714a <USBD_CtlError>
          ret = USBD_FAIL;
 8015822:	2303      	movs	r3, #3
 8015824:	75fb      	strb	r3, [r7, #23]
          break;
 8015826:	e002      	b.n	801582e <USBD_CDC_Setup+0x19e>
          break;
 8015828:	bf00      	nop
 801582a:	e008      	b.n	801583e <USBD_CDC_Setup+0x1ae>
          break;
 801582c:	bf00      	nop
      }
      break;
 801582e:	e006      	b.n	801583e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015830:	6839      	ldr	r1, [r7, #0]
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f001 fc89 	bl	801714a <USBD_CtlError>
      ret = USBD_FAIL;
 8015838:	2303      	movs	r3, #3
 801583a:	75fb      	strb	r3, [r7, #23]
      break;
 801583c:	bf00      	nop
  }

  return (uint8_t)ret;
 801583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3718      	adds	r7, #24
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	460b      	mov	r3, r1
 8015852:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801585a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	32b0      	adds	r2, #176	; 0xb0
 8015866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d101      	bne.n	8015872 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801586e:	2303      	movs	r3, #3
 8015870:	e065      	b.n	801593e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	32b0      	adds	r2, #176	; 0xb0
 801587c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015880:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015882:	78fb      	ldrb	r3, [r7, #3]
 8015884:	f003 020f 	and.w	r2, r3, #15
 8015888:	6879      	ldr	r1, [r7, #4]
 801588a:	4613      	mov	r3, r2
 801588c:	009b      	lsls	r3, r3, #2
 801588e:	4413      	add	r3, r2
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	440b      	add	r3, r1
 8015894:	3318      	adds	r3, #24
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d02f      	beq.n	80158fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801589c:	78fb      	ldrb	r3, [r7, #3]
 801589e:	f003 020f 	and.w	r2, r3, #15
 80158a2:	6879      	ldr	r1, [r7, #4]
 80158a4:	4613      	mov	r3, r2
 80158a6:	009b      	lsls	r3, r3, #2
 80158a8:	4413      	add	r3, r2
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	440b      	add	r3, r1
 80158ae:	3318      	adds	r3, #24
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	78fb      	ldrb	r3, [r7, #3]
 80158b4:	f003 010f 	and.w	r1, r3, #15
 80158b8:	68f8      	ldr	r0, [r7, #12]
 80158ba:	460b      	mov	r3, r1
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	440b      	add	r3, r1
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	4403      	add	r3, r0
 80158c4:	3344      	adds	r3, #68	; 0x44
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80158cc:	fb01 f303 	mul.w	r3, r1, r3
 80158d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d112      	bne.n	80158fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80158d6:	78fb      	ldrb	r3, [r7, #3]
 80158d8:	f003 020f 	and.w	r2, r3, #15
 80158dc:	6879      	ldr	r1, [r7, #4]
 80158de:	4613      	mov	r3, r2
 80158e0:	009b      	lsls	r3, r3, #2
 80158e2:	4413      	add	r3, r2
 80158e4:	009b      	lsls	r3, r3, #2
 80158e6:	440b      	add	r3, r1
 80158e8:	3318      	adds	r3, #24
 80158ea:	2200      	movs	r2, #0
 80158ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80158ee:	78f9      	ldrb	r1, [r7, #3]
 80158f0:	2300      	movs	r3, #0
 80158f2:	2200      	movs	r2, #0
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f005 f97a 	bl	801abee <USBD_LL_Transmit>
 80158fa:	e01f      	b.n	801593c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	2200      	movs	r2, #0
 8015900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	33b0      	adds	r3, #176	; 0xb0
 801590e:	009b      	lsls	r3, r3, #2
 8015910:	4413      	add	r3, r2
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	691b      	ldr	r3, [r3, #16]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d010      	beq.n	801593c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015920:	687a      	ldr	r2, [r7, #4]
 8015922:	33b0      	adds	r3, #176	; 0xb0
 8015924:	009b      	lsls	r3, r3, #2
 8015926:	4413      	add	r3, r2
 8015928:	685b      	ldr	r3, [r3, #4]
 801592a:	691b      	ldr	r3, [r3, #16]
 801592c:	68ba      	ldr	r2, [r7, #8]
 801592e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015932:	68ba      	ldr	r2, [r7, #8]
 8015934:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015938:	78fa      	ldrb	r2, [r7, #3]
 801593a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801593c:	2300      	movs	r3, #0
}
 801593e:	4618      	mov	r0, r3
 8015940:	3710      	adds	r7, #16
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015946:	b580      	push	{r7, lr}
 8015948:	b084      	sub	sp, #16
 801594a:	af00      	add	r7, sp, #0
 801594c:	6078      	str	r0, [r7, #4]
 801594e:	460b      	mov	r3, r1
 8015950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	32b0      	adds	r2, #176	; 0xb0
 801595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015960:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	32b0      	adds	r2, #176	; 0xb0
 801596c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d101      	bne.n	8015978 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015974:	2303      	movs	r3, #3
 8015976:	e01a      	b.n	80159ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015978:	78fb      	ldrb	r3, [r7, #3]
 801597a:	4619      	mov	r1, r3
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f005 f978 	bl	801ac72 <USBD_LL_GetRxDataSize>
 8015982:	4602      	mov	r2, r0
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	33b0      	adds	r3, #176	; 0xb0
 8015994:	009b      	lsls	r3, r3, #2
 8015996:	4413      	add	r3, r2
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	68db      	ldr	r3, [r3, #12]
 801599c:	68fa      	ldr	r2, [r7, #12]
 801599e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80159a2:	68fa      	ldr	r2, [r7, #12]
 80159a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80159a8:	4611      	mov	r1, r2
 80159aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80159ac:	2300      	movs	r3, #0
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3710      	adds	r7, #16
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}

080159b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80159b6:	b580      	push	{r7, lr}
 80159b8:	b084      	sub	sp, #16
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	32b0      	adds	r2, #176	; 0xb0
 80159c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d101      	bne.n	80159d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80159d4:	2303      	movs	r3, #3
 80159d6:	e025      	b.n	8015a24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	33b0      	adds	r3, #176	; 0xb0
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	4413      	add	r3, r2
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d01a      	beq.n	8015a22 <USBD_CDC_EP0_RxReady+0x6c>
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80159f2:	2bff      	cmp	r3, #255	; 0xff
 80159f4:	d015      	beq.n	8015a22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	33b0      	adds	r3, #176	; 0xb0
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	4413      	add	r3, r2
 8015a04:	685b      	ldr	r3, [r3, #4]
 8015a06:	689b      	ldr	r3, [r3, #8]
 8015a08:	68fa      	ldr	r2, [r7, #12]
 8015a0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015a0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015a10:	68fa      	ldr	r2, [r7, #12]
 8015a12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a16:	b292      	uxth	r2, r2
 8015a18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	22ff      	movs	r2, #255	; 0xff
 8015a1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015a22:	2300      	movs	r3, #0
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3710      	adds	r7, #16
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015a34:	2182      	movs	r1, #130	; 0x82
 8015a36:	4818      	ldr	r0, [pc, #96]	; (8015a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a38:	f000 fd4f 	bl	80164da <USBD_GetEpDesc>
 8015a3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015a3e:	2101      	movs	r1, #1
 8015a40:	4815      	ldr	r0, [pc, #84]	; (8015a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a42:	f000 fd4a 	bl	80164da <USBD_GetEpDesc>
 8015a46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015a48:	2181      	movs	r1, #129	; 0x81
 8015a4a:	4813      	ldr	r0, [pc, #76]	; (8015a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a4c:	f000 fd45 	bl	80164da <USBD_GetEpDesc>
 8015a50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d002      	beq.n	8015a5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	2210      	movs	r2, #16
 8015a5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d006      	beq.n	8015a72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	2200      	movs	r2, #0
 8015a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a6c:	711a      	strb	r2, [r3, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d006      	beq.n	8015a86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a80:	711a      	strb	r2, [r3, #4]
 8015a82:	2200      	movs	r2, #0
 8015a84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2243      	movs	r2, #67	; 0x43
 8015a8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015a8c:	4b02      	ldr	r3, [pc, #8]	; (8015a98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3718      	adds	r7, #24
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	24000054 	.word	0x24000054

08015a9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b086      	sub	sp, #24
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015aa4:	2182      	movs	r1, #130	; 0x82
 8015aa6:	4818      	ldr	r0, [pc, #96]	; (8015b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015aa8:	f000 fd17 	bl	80164da <USBD_GetEpDesc>
 8015aac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015aae:	2101      	movs	r1, #1
 8015ab0:	4815      	ldr	r0, [pc, #84]	; (8015b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ab2:	f000 fd12 	bl	80164da <USBD_GetEpDesc>
 8015ab6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015ab8:	2181      	movs	r1, #129	; 0x81
 8015aba:	4813      	ldr	r0, [pc, #76]	; (8015b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015abc:	f000 fd0d 	bl	80164da <USBD_GetEpDesc>
 8015ac0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d002      	beq.n	8015ace <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	2210      	movs	r2, #16
 8015acc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d006      	beq.n	8015ae2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	711a      	strb	r2, [r3, #4]
 8015ada:	2200      	movs	r2, #0
 8015adc:	f042 0202 	orr.w	r2, r2, #2
 8015ae0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d006      	beq.n	8015af6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2200      	movs	r2, #0
 8015aec:	711a      	strb	r2, [r3, #4]
 8015aee:	2200      	movs	r2, #0
 8015af0:	f042 0202 	orr.w	r2, r2, #2
 8015af4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2243      	movs	r2, #67	; 0x43
 8015afa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015afc:	4b02      	ldr	r3, [pc, #8]	; (8015b08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3718      	adds	r7, #24
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	24000054 	.word	0x24000054

08015b0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b086      	sub	sp, #24
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b14:	2182      	movs	r1, #130	; 0x82
 8015b16:	4818      	ldr	r0, [pc, #96]	; (8015b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b18:	f000 fcdf 	bl	80164da <USBD_GetEpDesc>
 8015b1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b1e:	2101      	movs	r1, #1
 8015b20:	4815      	ldr	r0, [pc, #84]	; (8015b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b22:	f000 fcda 	bl	80164da <USBD_GetEpDesc>
 8015b26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015b28:	2181      	movs	r1, #129	; 0x81
 8015b2a:	4813      	ldr	r0, [pc, #76]	; (8015b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b2c:	f000 fcd5 	bl	80164da <USBD_GetEpDesc>
 8015b30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	2210      	movs	r2, #16
 8015b3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d006      	beq.n	8015b52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015b44:	693b      	ldr	r3, [r7, #16]
 8015b46:	2200      	movs	r2, #0
 8015b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015b4c:	711a      	strb	r2, [r3, #4]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d006      	beq.n	8015b66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015b60:	711a      	strb	r2, [r3, #4]
 8015b62:	2200      	movs	r2, #0
 8015b64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2243      	movs	r2, #67	; 0x43
 8015b6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b6c:	4b02      	ldr	r3, [pc, #8]	; (8015b78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3718      	adds	r7, #24
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	24000054 	.word	0x24000054

08015b7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015b7c:	b480      	push	{r7}
 8015b7e:	b083      	sub	sp, #12
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	220a      	movs	r2, #10
 8015b88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015b8a:	4b03      	ldr	r3, [pc, #12]	; (8015b98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	370c      	adds	r7, #12
 8015b90:	46bd      	mov	sp, r7
 8015b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b96:	4770      	bx	lr
 8015b98:	24000010 	.word	0x24000010

08015b9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b083      	sub	sp, #12
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d101      	bne.n	8015bb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015bac:	2303      	movs	r3, #3
 8015bae:	e009      	b.n	8015bc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	33b0      	adds	r3, #176	; 0xb0
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	683a      	ldr	r2, [r7, #0]
 8015bc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015bc2:	2300      	movs	r3, #0
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	370c      	adds	r7, #12
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr

08015bd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b087      	sub	sp, #28
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	60b9      	str	r1, [r7, #8]
 8015bda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	32b0      	adds	r2, #176	; 0xb0
 8015be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d101      	bne.n	8015bf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015bf2:	2303      	movs	r3, #3
 8015bf4:	e008      	b.n	8015c08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	68ba      	ldr	r2, [r7, #8]
 8015bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	371c      	adds	r7, #28
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr

08015c14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c14:	b480      	push	{r7}
 8015c16:	b085      	sub	sp, #20
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	32b0      	adds	r2, #176	; 0xb0
 8015c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d101      	bne.n	8015c38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015c34:	2303      	movs	r3, #3
 8015c36:	e004      	b.n	8015c42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	683a      	ldr	r2, [r7, #0]
 8015c3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015c40:	2300      	movs	r3, #0
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3714      	adds	r7, #20
 8015c46:	46bd      	mov	sp, r7
 8015c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4c:	4770      	bx	lr
	...

08015c50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	32b0      	adds	r2, #176	; 0xb0
 8015c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015c68:	2301      	movs	r3, #1
 8015c6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d101      	bne.n	8015c76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015c72:	2303      	movs	r3, #3
 8015c74:	e025      	b.n	8015cc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d11f      	bne.n	8015cc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	2201      	movs	r2, #1
 8015c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015c88:	4b10      	ldr	r3, [pc, #64]	; (8015ccc <USBD_CDC_TransmitPacket+0x7c>)
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	f003 020f 	and.w	r2, r3, #15
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	4613      	mov	r3, r2
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	4413      	add	r3, r2
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	4403      	add	r3, r0
 8015ca2:	3318      	adds	r3, #24
 8015ca4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015ca6:	4b09      	ldr	r3, [pc, #36]	; (8015ccc <USBD_CDC_TransmitPacket+0x7c>)
 8015ca8:	7819      	ldrb	r1, [r3, #0]
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f004 ff99 	bl	801abee <USBD_LL_Transmit>

    ret = USBD_OK;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3710      	adds	r7, #16
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	24000097 	.word	0x24000097

08015cd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b084      	sub	sp, #16
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	32b0      	adds	r2, #176	; 0xb0
 8015ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	32b0      	adds	r2, #176	; 0xb0
 8015cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d101      	bne.n	8015cfe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015cfa:	2303      	movs	r3, #3
 8015cfc:	e018      	b.n	8015d30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	7c1b      	ldrb	r3, [r3, #16]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d10a      	bne.n	8015d1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d06:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <USBD_CDC_ReceivePacket+0x68>)
 8015d08:	7819      	ldrb	r1, [r3, #0]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f004 ff8b 	bl	801ac30 <USBD_LL_PrepareReceive>
 8015d1a:	e008      	b.n	8015d2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d1c:	4b06      	ldr	r3, [pc, #24]	; (8015d38 <USBD_CDC_ReceivePacket+0x68>)
 8015d1e:	7819      	ldrb	r1, [r3, #0]
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d26:	2340      	movs	r3, #64	; 0x40
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f004 ff81 	bl	801ac30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015d2e:	2300      	movs	r3, #0
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3710      	adds	r7, #16
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	24000098 	.word	0x24000098

08015d3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b086      	sub	sp, #24
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	4613      	mov	r3, r2
 8015d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d101      	bne.n	8015d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015d50:	2303      	movs	r3, #3
 8015d52:	e01f      	b.n	8015d94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2200      	movs	r2, #0
 8015d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2200      	movs	r2, #0
 8015d68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d003      	beq.n	8015d7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	68ba      	ldr	r2, [r7, #8]
 8015d76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2201      	movs	r2, #1
 8015d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	79fa      	ldrb	r2, [r7, #7]
 8015d86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015d88:	68f8      	ldr	r0, [r7, #12]
 8015d8a:	f004 fdf5 	bl	801a978 <USBD_LL_Init>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3718      	adds	r7, #24
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}

08015d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015da6:	2300      	movs	r3, #0
 8015da8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015daa:	683b      	ldr	r3, [r7, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015db0:	2303      	movs	r3, #3
 8015db2:	e025      	b.n	8015e00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	683a      	ldr	r2, [r7, #0]
 8015db8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	32ae      	adds	r2, #174	; 0xae
 8015dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00f      	beq.n	8015df0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	32ae      	adds	r2, #174	; 0xae
 8015dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015de0:	f107 020e 	add.w	r2, r7, #14
 8015de4:	4610      	mov	r0, r2
 8015de6:	4798      	blx	r3
 8015de8:	4602      	mov	r2, r0
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015df6:	1c5a      	adds	r2, r3, #1
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015dfe:	2300      	movs	r3, #0
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3710      	adds	r7, #16
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f004 fe03 	bl	801aa1c <USBD_LL_Start>
 8015e16:	4603      	mov	r3, r0
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015e28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	370c      	adds	r7, #12
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e34:	4770      	bx	lr

08015e36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015e36:	b580      	push	{r7, lr}
 8015e38:	b084      	sub	sp, #16
 8015e3a:	af00      	add	r7, sp, #0
 8015e3c:	6078      	str	r0, [r7, #4]
 8015e3e:	460b      	mov	r3, r1
 8015e40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e42:	2300      	movs	r3, #0
 8015e44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d009      	beq.n	8015e64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	78fa      	ldrb	r2, [r7, #3]
 8015e5a:	4611      	mov	r1, r2
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	4798      	blx	r3
 8015e60:	4603      	mov	r3, r0
 8015e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}

08015e6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015e6e:	b580      	push	{r7, lr}
 8015e70:	b084      	sub	sp, #16
 8015e72:	af00      	add	r7, sp, #0
 8015e74:	6078      	str	r0, [r7, #4]
 8015e76:	460b      	mov	r3, r1
 8015e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	78fa      	ldrb	r2, [r7, #3]
 8015e88:	4611      	mov	r1, r2
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	4798      	blx	r3
 8015e8e:	4603      	mov	r3, r0
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d001      	beq.n	8015e98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015e94:	2303      	movs	r3, #3
 8015e96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3710      	adds	r7, #16
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}

08015ea2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015ea2:	b580      	push	{r7, lr}
 8015ea4:	b084      	sub	sp, #16
 8015ea6:	af00      	add	r7, sp, #0
 8015ea8:	6078      	str	r0, [r7, #4]
 8015eaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f001 f90e 	bl	80170d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015ec8:	461a      	mov	r2, r3
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015ed6:	f003 031f 	and.w	r3, r3, #31
 8015eda:	2b02      	cmp	r3, #2
 8015edc:	d01a      	beq.n	8015f14 <USBD_LL_SetupStage+0x72>
 8015ede:	2b02      	cmp	r3, #2
 8015ee0:	d822      	bhi.n	8015f28 <USBD_LL_SetupStage+0x86>
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d002      	beq.n	8015eec <USBD_LL_SetupStage+0x4a>
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	d00a      	beq.n	8015f00 <USBD_LL_SetupStage+0x5e>
 8015eea:	e01d      	b.n	8015f28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f000 fb65 	bl	80165c4 <USBD_StdDevReq>
 8015efa:	4603      	mov	r3, r0
 8015efc:	73fb      	strb	r3, [r7, #15]
      break;
 8015efe:	e020      	b.n	8015f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f06:	4619      	mov	r1, r3
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f000 fbcd 	bl	80166a8 <USBD_StdItfReq>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	73fb      	strb	r3, [r7, #15]
      break;
 8015f12:	e016      	b.n	8015f42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f000 fc2f 	bl	8016780 <USBD_StdEPReq>
 8015f22:	4603      	mov	r3, r0
 8015f24:	73fb      	strb	r3, [r7, #15]
      break;
 8015f26:	e00c      	b.n	8015f42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	4619      	mov	r1, r3
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f004 fdd0 	bl	801aadc <USBD_LL_StallEP>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8015f40:	bf00      	nop
  }

  return ret;
 8015f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f44:	4618      	mov	r0, r3
 8015f46:	3710      	adds	r7, #16
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}

08015f4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b086      	sub	sp, #24
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	460b      	mov	r3, r1
 8015f56:	607a      	str	r2, [r7, #4]
 8015f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015f5e:	7afb      	ldrb	r3, [r7, #11]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d16e      	bne.n	8016042 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015f6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015f72:	2b03      	cmp	r3, #3
 8015f74:	f040 8098 	bne.w	80160a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	689a      	ldr	r2, [r3, #8]
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	68db      	ldr	r3, [r3, #12]
 8015f80:	429a      	cmp	r2, r3
 8015f82:	d913      	bls.n	8015fac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	689a      	ldr	r2, [r3, #8]
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	1ad2      	subs	r2, r2, r3
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	68da      	ldr	r2, [r3, #12]
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	4293      	cmp	r3, r2
 8015f9c:	bf28      	it	cs
 8015f9e:	4613      	movcs	r3, r2
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	6879      	ldr	r1, [r7, #4]
 8015fa4:	68f8      	ldr	r0, [r7, #12]
 8015fa6:	f001 f98a 	bl	80172be <USBD_CtlContinueRx>
 8015faa:	e07d      	b.n	80160a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015fb2:	f003 031f 	and.w	r3, r3, #31
 8015fb6:	2b02      	cmp	r3, #2
 8015fb8:	d014      	beq.n	8015fe4 <USBD_LL_DataOutStage+0x98>
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	d81d      	bhi.n	8015ffa <USBD_LL_DataOutStage+0xae>
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d002      	beq.n	8015fc8 <USBD_LL_DataOutStage+0x7c>
 8015fc2:	2b01      	cmp	r3, #1
 8015fc4:	d003      	beq.n	8015fce <USBD_LL_DataOutStage+0x82>
 8015fc6:	e018      	b.n	8015ffa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	75bb      	strb	r3, [r7, #22]
            break;
 8015fcc:	e018      	b.n	8016000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	68f8      	ldr	r0, [r7, #12]
 8015fda:	f000 fa64 	bl	80164a6 <USBD_CoreFindIF>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	75bb      	strb	r3, [r7, #22]
            break;
 8015fe2:	e00d      	b.n	8016000 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015fea:	b2db      	uxtb	r3, r3
 8015fec:	4619      	mov	r1, r3
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f000 fa66 	bl	80164c0 <USBD_CoreFindEP>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8015ff8:	e002      	b.n	8016000 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8015ffe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016000:	7dbb      	ldrb	r3, [r7, #22]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d119      	bne.n	801603a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801600c:	b2db      	uxtb	r3, r3
 801600e:	2b03      	cmp	r3, #3
 8016010:	d113      	bne.n	801603a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016012:	7dba      	ldrb	r2, [r7, #22]
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	32ae      	adds	r2, #174	; 0xae
 8016018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801601c:	691b      	ldr	r3, [r3, #16]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00b      	beq.n	801603a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016022:	7dba      	ldrb	r2, [r7, #22]
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801602a:	7dba      	ldrb	r2, [r7, #22]
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	32ae      	adds	r2, #174	; 0xae
 8016030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016034:	691b      	ldr	r3, [r3, #16]
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801603a:	68f8      	ldr	r0, [r7, #12]
 801603c:	f001 f950 	bl	80172e0 <USBD_CtlSendStatus>
 8016040:	e032      	b.n	80160a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016042:	7afb      	ldrb	r3, [r7, #11]
 8016044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016048:	b2db      	uxtb	r3, r3
 801604a:	4619      	mov	r1, r3
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	f000 fa37 	bl	80164c0 <USBD_CoreFindEP>
 8016052:	4603      	mov	r3, r0
 8016054:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016056:	7dbb      	ldrb	r3, [r7, #22]
 8016058:	2bff      	cmp	r3, #255	; 0xff
 801605a:	d025      	beq.n	80160a8 <USBD_LL_DataOutStage+0x15c>
 801605c:	7dbb      	ldrb	r3, [r7, #22]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d122      	bne.n	80160a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016068:	b2db      	uxtb	r3, r3
 801606a:	2b03      	cmp	r3, #3
 801606c:	d117      	bne.n	801609e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801606e:	7dba      	ldrb	r2, [r7, #22]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	32ae      	adds	r2, #174	; 0xae
 8016074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016078:	699b      	ldr	r3, [r3, #24]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d00f      	beq.n	801609e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801607e:	7dba      	ldrb	r2, [r7, #22]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016086:	7dba      	ldrb	r2, [r7, #22]
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	32ae      	adds	r2, #174	; 0xae
 801608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016090:	699b      	ldr	r3, [r3, #24]
 8016092:	7afa      	ldrb	r2, [r7, #11]
 8016094:	4611      	mov	r1, r2
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	4798      	blx	r3
 801609a:	4603      	mov	r3, r0
 801609c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801609e:	7dfb      	ldrb	r3, [r7, #23]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d001      	beq.n	80160a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80160a4:	7dfb      	ldrb	r3, [r7, #23]
 80160a6:	e000      	b.n	80160aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80160a8:	2300      	movs	r3, #0
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3718      	adds	r7, #24
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}

080160b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80160b2:	b580      	push	{r7, lr}
 80160b4:	b086      	sub	sp, #24
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	60f8      	str	r0, [r7, #12]
 80160ba:	460b      	mov	r3, r1
 80160bc:	607a      	str	r2, [r7, #4]
 80160be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80160c0:	7afb      	ldrb	r3, [r7, #11]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d16f      	bne.n	80161a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	3314      	adds	r3, #20
 80160ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80160d2:	2b02      	cmp	r3, #2
 80160d4:	d15a      	bne.n	801618c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80160d6:	693b      	ldr	r3, [r7, #16]
 80160d8:	689a      	ldr	r2, [r3, #8]
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	68db      	ldr	r3, [r3, #12]
 80160de:	429a      	cmp	r2, r3
 80160e0:	d914      	bls.n	801610c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	689a      	ldr	r2, [r3, #8]
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	68db      	ldr	r3, [r3, #12]
 80160ea:	1ad2      	subs	r2, r2, r3
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80160f0:	693b      	ldr	r3, [r7, #16]
 80160f2:	689b      	ldr	r3, [r3, #8]
 80160f4:	461a      	mov	r2, r3
 80160f6:	6879      	ldr	r1, [r7, #4]
 80160f8:	68f8      	ldr	r0, [r7, #12]
 80160fa:	f001 f8b2 	bl	8017262 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80160fe:	2300      	movs	r3, #0
 8016100:	2200      	movs	r2, #0
 8016102:	2100      	movs	r1, #0
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f004 fd93 	bl	801ac30 <USBD_LL_PrepareReceive>
 801610a:	e03f      	b.n	801618c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	68da      	ldr	r2, [r3, #12]
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	689b      	ldr	r3, [r3, #8]
 8016114:	429a      	cmp	r2, r3
 8016116:	d11c      	bne.n	8016152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	685a      	ldr	r2, [r3, #4]
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016120:	429a      	cmp	r2, r3
 8016122:	d316      	bcc.n	8016152 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	685a      	ldr	r2, [r3, #4]
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801612e:	429a      	cmp	r2, r3
 8016130:	d20f      	bcs.n	8016152 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016132:	2200      	movs	r2, #0
 8016134:	2100      	movs	r1, #0
 8016136:	68f8      	ldr	r0, [r7, #12]
 8016138:	f001 f893 	bl	8017262 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	2200      	movs	r2, #0
 8016140:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016144:	2300      	movs	r3, #0
 8016146:	2200      	movs	r2, #0
 8016148:	2100      	movs	r1, #0
 801614a:	68f8      	ldr	r0, [r7, #12]
 801614c:	f004 fd70 	bl	801ac30 <USBD_LL_PrepareReceive>
 8016150:	e01c      	b.n	801618c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016158:	b2db      	uxtb	r3, r3
 801615a:	2b03      	cmp	r3, #3
 801615c:	d10f      	bne.n	801617e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d009      	beq.n	801617e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	2200      	movs	r2, #0
 801616e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016178:	68db      	ldr	r3, [r3, #12]
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801617e:	2180      	movs	r1, #128	; 0x80
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	f004 fcab 	bl	801aadc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016186:	68f8      	ldr	r0, [r7, #12]
 8016188:	f001 f8bd 	bl	8017306 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016192:	2b00      	cmp	r3, #0
 8016194:	d03a      	beq.n	801620c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016196:	68f8      	ldr	r0, [r7, #12]
 8016198:	f7ff fe42 	bl	8015e20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	2200      	movs	r2, #0
 80161a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80161a4:	e032      	b.n	801620c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80161a6:	7afb      	ldrb	r3, [r7, #11]
 80161a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	4619      	mov	r1, r3
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f000 f985 	bl	80164c0 <USBD_CoreFindEP>
 80161b6:	4603      	mov	r3, r0
 80161b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161ba:	7dfb      	ldrb	r3, [r7, #23]
 80161bc:	2bff      	cmp	r3, #255	; 0xff
 80161be:	d025      	beq.n	801620c <USBD_LL_DataInStage+0x15a>
 80161c0:	7dfb      	ldrb	r3, [r7, #23]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d122      	bne.n	801620c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	2b03      	cmp	r3, #3
 80161d0:	d11c      	bne.n	801620c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80161d2:	7dfa      	ldrb	r2, [r7, #23]
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	32ae      	adds	r2, #174	; 0xae
 80161d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161dc:	695b      	ldr	r3, [r3, #20]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d014      	beq.n	801620c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80161e2:	7dfa      	ldrb	r2, [r7, #23]
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80161ea:	7dfa      	ldrb	r2, [r7, #23]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	32ae      	adds	r2, #174	; 0xae
 80161f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161f4:	695b      	ldr	r3, [r3, #20]
 80161f6:	7afa      	ldrb	r2, [r7, #11]
 80161f8:	4611      	mov	r1, r2
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	4798      	blx	r3
 80161fe:	4603      	mov	r3, r0
 8016200:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016202:	7dbb      	ldrb	r3, [r7, #22]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d001      	beq.n	801620c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016208:	7dbb      	ldrb	r3, [r7, #22]
 801620a:	e000      	b.n	801620e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801620c:	2300      	movs	r3, #0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3718      	adds	r7, #24
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}

08016216 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016216:	b580      	push	{r7, lr}
 8016218:	b084      	sub	sp, #16
 801621a:	af00      	add	r7, sp, #0
 801621c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801621e:	2300      	movs	r3, #0
 8016220:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2201      	movs	r2, #1
 8016226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2200      	movs	r2, #0
 801622e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	2200      	movs	r2, #0
 801623c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2200      	movs	r2, #0
 8016244:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801624e:	2b00      	cmp	r3, #0
 8016250:	d014      	beq.n	801627c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d00e      	beq.n	801627c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	6852      	ldr	r2, [r2, #4]
 801626a:	b2d2      	uxtb	r2, r2
 801626c:	4611      	mov	r1, r2
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	4798      	blx	r3
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d001      	beq.n	801627c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016278:	2303      	movs	r3, #3
 801627a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801627c:	2340      	movs	r3, #64	; 0x40
 801627e:	2200      	movs	r2, #0
 8016280:	2100      	movs	r1, #0
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f004 fbe5 	bl	801aa52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2201      	movs	r2, #1
 801628c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2240      	movs	r2, #64	; 0x40
 8016294:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016298:	2340      	movs	r3, #64	; 0x40
 801629a:	2200      	movs	r2, #0
 801629c:	2180      	movs	r1, #128	; 0x80
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f004 fbd7 	bl	801aa52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2201      	movs	r2, #1
 80162a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2240      	movs	r2, #64	; 0x40
 80162ae:	621a      	str	r2, [r3, #32]

  return ret;
 80162b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3710      	adds	r7, #16
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}

080162ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80162ba:	b480      	push	{r7}
 80162bc:	b083      	sub	sp, #12
 80162be:	af00      	add	r7, sp, #0
 80162c0:	6078      	str	r0, [r7, #4]
 80162c2:	460b      	mov	r3, r1
 80162c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	78fa      	ldrb	r2, [r7, #3]
 80162ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80162cc:	2300      	movs	r3, #0
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	370c      	adds	r7, #12
 80162d2:	46bd      	mov	sp, r7
 80162d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d8:	4770      	bx	lr

080162da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80162da:	b480      	push	{r7}
 80162dc:	b083      	sub	sp, #12
 80162de:	af00      	add	r7, sp, #0
 80162e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	2b04      	cmp	r3, #4
 80162ec:	d006      	beq.n	80162fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162f4:	b2da      	uxtb	r2, r3
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2204      	movs	r2, #4
 8016300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016304:	2300      	movs	r3, #0
}
 8016306:	4618      	mov	r0, r3
 8016308:	370c      	adds	r7, #12
 801630a:	46bd      	mov	sp, r7
 801630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016310:	4770      	bx	lr

08016312 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016312:	b480      	push	{r7}
 8016314:	b083      	sub	sp, #12
 8016316:	af00      	add	r7, sp, #0
 8016318:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016320:	b2db      	uxtb	r3, r3
 8016322:	2b04      	cmp	r3, #4
 8016324:	d106      	bne.n	8016334 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801632c:	b2da      	uxtb	r2, r3
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016334:	2300      	movs	r3, #0
}
 8016336:	4618      	mov	r0, r3
 8016338:	370c      	adds	r7, #12
 801633a:	46bd      	mov	sp, r7
 801633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016340:	4770      	bx	lr

08016342 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b082      	sub	sp, #8
 8016346:	af00      	add	r7, sp, #0
 8016348:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016350:	b2db      	uxtb	r3, r3
 8016352:	2b03      	cmp	r3, #3
 8016354:	d110      	bne.n	8016378 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801635c:	2b00      	cmp	r3, #0
 801635e:	d00b      	beq.n	8016378 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016366:	69db      	ldr	r3, [r3, #28]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d005      	beq.n	8016378 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016372:	69db      	ldr	r3, [r3, #28]
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016378:	2300      	movs	r3, #0
}
 801637a:	4618      	mov	r0, r3
 801637c:	3708      	adds	r7, #8
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}

08016382 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016382:	b580      	push	{r7, lr}
 8016384:	b082      	sub	sp, #8
 8016386:	af00      	add	r7, sp, #0
 8016388:	6078      	str	r0, [r7, #4]
 801638a:	460b      	mov	r3, r1
 801638c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	32ae      	adds	r2, #174	; 0xae
 8016398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d101      	bne.n	80163a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80163a0:	2303      	movs	r3, #3
 80163a2:	e01c      	b.n	80163de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	2b03      	cmp	r3, #3
 80163ae:	d115      	bne.n	80163dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	32ae      	adds	r2, #174	; 0xae
 80163ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163be:	6a1b      	ldr	r3, [r3, #32]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00b      	beq.n	80163dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	32ae      	adds	r2, #174	; 0xae
 80163ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163d2:	6a1b      	ldr	r3, [r3, #32]
 80163d4:	78fa      	ldrb	r2, [r7, #3]
 80163d6:	4611      	mov	r1, r2
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80163dc:	2300      	movs	r3, #0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3708      	adds	r7, #8
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}

080163e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80163e6:	b580      	push	{r7, lr}
 80163e8:	b082      	sub	sp, #8
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	6078      	str	r0, [r7, #4]
 80163ee:	460b      	mov	r3, r1
 80163f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	32ae      	adds	r2, #174	; 0xae
 80163fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d101      	bne.n	8016408 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016404:	2303      	movs	r3, #3
 8016406:	e01c      	b.n	8016442 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b03      	cmp	r3, #3
 8016412:	d115      	bne.n	8016440 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	32ae      	adds	r2, #174	; 0xae
 801641e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016424:	2b00      	cmp	r3, #0
 8016426:	d00b      	beq.n	8016440 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	32ae      	adds	r2, #174	; 0xae
 8016432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016438:	78fa      	ldrb	r2, [r7, #3]
 801643a:	4611      	mov	r1, r2
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016440:	2300      	movs	r3, #0
}
 8016442:	4618      	mov	r0, r3
 8016444:	3708      	adds	r7, #8
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}

0801644a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801644a:	b480      	push	{r7}
 801644c:	b083      	sub	sp, #12
 801644e:	af00      	add	r7, sp, #0
 8016450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016452:	2300      	movs	r3, #0
}
 8016454:	4618      	mov	r0, r3
 8016456:	370c      	adds	r7, #12
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr

08016460 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016468:	2300      	movs	r3, #0
 801646a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2201      	movs	r2, #1
 8016470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801647a:	2b00      	cmp	r3, #0
 801647c:	d00e      	beq.n	801649c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016484:	685b      	ldr	r3, [r3, #4]
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	6852      	ldr	r2, [r2, #4]
 801648a:	b2d2      	uxtb	r2, r2
 801648c:	4611      	mov	r1, r2
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	4798      	blx	r3
 8016492:	4603      	mov	r3, r0
 8016494:	2b00      	cmp	r3, #0
 8016496:	d001      	beq.n	801649c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016498:	2303      	movs	r3, #3
 801649a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801649c:	7bfb      	ldrb	r3, [r7, #15]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}

080164a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80164a6:	b480      	push	{r7}
 80164a8:	b083      	sub	sp, #12
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	6078      	str	r0, [r7, #4]
 80164ae:	460b      	mov	r3, r1
 80164b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80164b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	370c      	adds	r7, #12
 80164b8:	46bd      	mov	sp, r7
 80164ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164be:	4770      	bx	lr

080164c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b083      	sub	sp, #12
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	460b      	mov	r3, r1
 80164ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80164cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	370c      	adds	r7, #12
 80164d2:	46bd      	mov	sp, r7
 80164d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d8:	4770      	bx	lr

080164da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b086      	sub	sp, #24
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	460b      	mov	r3, r1
 80164e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80164ee:	2300      	movs	r3, #0
 80164f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	885b      	ldrh	r3, [r3, #2]
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	781b      	ldrb	r3, [r3, #0]
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	429a      	cmp	r2, r3
 8016500:	d920      	bls.n	8016544 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	781b      	ldrb	r3, [r3, #0]
 8016506:	b29b      	uxth	r3, r3
 8016508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801650a:	e013      	b.n	8016534 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801650c:	f107 030a 	add.w	r3, r7, #10
 8016510:	4619      	mov	r1, r3
 8016512:	6978      	ldr	r0, [r7, #20]
 8016514:	f000 f81b 	bl	801654e <USBD_GetNextDesc>
 8016518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	785b      	ldrb	r3, [r3, #1]
 801651e:	2b05      	cmp	r3, #5
 8016520:	d108      	bne.n	8016534 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016522:	697b      	ldr	r3, [r7, #20]
 8016524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	789b      	ldrb	r3, [r3, #2]
 801652a:	78fa      	ldrb	r2, [r7, #3]
 801652c:	429a      	cmp	r2, r3
 801652e:	d008      	beq.n	8016542 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016530:	2300      	movs	r3, #0
 8016532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	885b      	ldrh	r3, [r3, #2]
 8016538:	b29a      	uxth	r2, r3
 801653a:	897b      	ldrh	r3, [r7, #10]
 801653c:	429a      	cmp	r2, r3
 801653e:	d8e5      	bhi.n	801650c <USBD_GetEpDesc+0x32>
 8016540:	e000      	b.n	8016544 <USBD_GetEpDesc+0x6a>
          break;
 8016542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016544:	693b      	ldr	r3, [r7, #16]
}
 8016546:	4618      	mov	r0, r3
 8016548:	3718      	adds	r7, #24
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801654e:	b480      	push	{r7}
 8016550:	b085      	sub	sp, #20
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	881a      	ldrh	r2, [r3, #0]
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	b29b      	uxth	r3, r3
 8016566:	4413      	add	r3, r2
 8016568:	b29a      	uxth	r2, r3
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	461a      	mov	r2, r3
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	4413      	add	r3, r2
 8016578:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801657a:	68fb      	ldr	r3, [r7, #12]
}
 801657c:	4618      	mov	r0, r3
 801657e:	3714      	adds	r7, #20
 8016580:	46bd      	mov	sp, r7
 8016582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016586:	4770      	bx	lr

08016588 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016588:	b480      	push	{r7}
 801658a:	b087      	sub	sp, #28
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	781b      	ldrb	r3, [r3, #0]
 8016598:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	3301      	adds	r3, #1
 801659e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80165a0:	697b      	ldr	r3, [r7, #20]
 80165a2:	781b      	ldrb	r3, [r3, #0]
 80165a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80165a6:	8a3b      	ldrh	r3, [r7, #16]
 80165a8:	021b      	lsls	r3, r3, #8
 80165aa:	b21a      	sxth	r2, r3
 80165ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80165b0:	4313      	orrs	r3, r2
 80165b2:	b21b      	sxth	r3, r3
 80165b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80165b6:	89fb      	ldrh	r3, [r7, #14]
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	371c      	adds	r7, #28
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr

080165c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165c4:	b580      	push	{r7, lr}
 80165c6:	b084      	sub	sp, #16
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
 80165cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80165ce:	2300      	movs	r3, #0
 80165d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80165da:	2b40      	cmp	r3, #64	; 0x40
 80165dc:	d005      	beq.n	80165ea <USBD_StdDevReq+0x26>
 80165de:	2b40      	cmp	r3, #64	; 0x40
 80165e0:	d857      	bhi.n	8016692 <USBD_StdDevReq+0xce>
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d00f      	beq.n	8016606 <USBD_StdDevReq+0x42>
 80165e6:	2b20      	cmp	r3, #32
 80165e8:	d153      	bne.n	8016692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	32ae      	adds	r2, #174	; 0xae
 80165f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	6839      	ldr	r1, [r7, #0]
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	4798      	blx	r3
 8016600:	4603      	mov	r3, r0
 8016602:	73fb      	strb	r3, [r7, #15]
      break;
 8016604:	e04a      	b.n	801669c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	785b      	ldrb	r3, [r3, #1]
 801660a:	2b09      	cmp	r3, #9
 801660c:	d83b      	bhi.n	8016686 <USBD_StdDevReq+0xc2>
 801660e:	a201      	add	r2, pc, #4	; (adr r2, 8016614 <USBD_StdDevReq+0x50>)
 8016610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016614:	08016669 	.word	0x08016669
 8016618:	0801667d 	.word	0x0801667d
 801661c:	08016687 	.word	0x08016687
 8016620:	08016673 	.word	0x08016673
 8016624:	08016687 	.word	0x08016687
 8016628:	08016647 	.word	0x08016647
 801662c:	0801663d 	.word	0x0801663d
 8016630:	08016687 	.word	0x08016687
 8016634:	0801665f 	.word	0x0801665f
 8016638:	08016651 	.word	0x08016651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f000 fa3c 	bl	8016abc <USBD_GetDescriptor>
          break;
 8016644:	e024      	b.n	8016690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016646:	6839      	ldr	r1, [r7, #0]
 8016648:	6878      	ldr	r0, [r7, #4]
 801664a:	f000 fba1 	bl	8016d90 <USBD_SetAddress>
          break;
 801664e:	e01f      	b.n	8016690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016650:	6839      	ldr	r1, [r7, #0]
 8016652:	6878      	ldr	r0, [r7, #4]
 8016654:	f000 fbe0 	bl	8016e18 <USBD_SetConfig>
 8016658:	4603      	mov	r3, r0
 801665a:	73fb      	strb	r3, [r7, #15]
          break;
 801665c:	e018      	b.n	8016690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f000 fc83 	bl	8016f6c <USBD_GetConfig>
          break;
 8016666:	e013      	b.n	8016690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016668:	6839      	ldr	r1, [r7, #0]
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f000 fcb4 	bl	8016fd8 <USBD_GetStatus>
          break;
 8016670:	e00e      	b.n	8016690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016672:	6839      	ldr	r1, [r7, #0]
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f000 fce3 	bl	8017040 <USBD_SetFeature>
          break;
 801667a:	e009      	b.n	8016690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801667c:	6839      	ldr	r1, [r7, #0]
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f000 fd07 	bl	8017092 <USBD_ClrFeature>
          break;
 8016684:	e004      	b.n	8016690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016686:	6839      	ldr	r1, [r7, #0]
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f000 fd5e 	bl	801714a <USBD_CtlError>
          break;
 801668e:	bf00      	nop
      }
      break;
 8016690:	e004      	b.n	801669c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016692:	6839      	ldr	r1, [r7, #0]
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f000 fd58 	bl	801714a <USBD_CtlError>
      break;
 801669a:	bf00      	nop
  }

  return ret;
 801669c:	7bfb      	ldrb	r3, [r7, #15]
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3710      	adds	r7, #16
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop

080166a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b084      	sub	sp, #16
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166b2:	2300      	movs	r3, #0
 80166b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	781b      	ldrb	r3, [r3, #0]
 80166ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80166be:	2b40      	cmp	r3, #64	; 0x40
 80166c0:	d005      	beq.n	80166ce <USBD_StdItfReq+0x26>
 80166c2:	2b40      	cmp	r3, #64	; 0x40
 80166c4:	d852      	bhi.n	801676c <USBD_StdItfReq+0xc4>
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d001      	beq.n	80166ce <USBD_StdItfReq+0x26>
 80166ca:	2b20      	cmp	r3, #32
 80166cc:	d14e      	bne.n	801676c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	3b01      	subs	r3, #1
 80166d8:	2b02      	cmp	r3, #2
 80166da:	d840      	bhi.n	801675e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	889b      	ldrh	r3, [r3, #4]
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	d836      	bhi.n	8016754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	889b      	ldrh	r3, [r3, #4]
 80166ea:	b2db      	uxtb	r3, r3
 80166ec:	4619      	mov	r1, r3
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f7ff fed9 	bl	80164a6 <USBD_CoreFindIF>
 80166f4:	4603      	mov	r3, r0
 80166f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80166f8:	7bbb      	ldrb	r3, [r7, #14]
 80166fa:	2bff      	cmp	r3, #255	; 0xff
 80166fc:	d01d      	beq.n	801673a <USBD_StdItfReq+0x92>
 80166fe:	7bbb      	ldrb	r3, [r7, #14]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d11a      	bne.n	801673a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016704:	7bba      	ldrb	r2, [r7, #14]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	32ae      	adds	r2, #174	; 0xae
 801670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801670e:	689b      	ldr	r3, [r3, #8]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d00f      	beq.n	8016734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016714:	7bba      	ldrb	r2, [r7, #14]
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801671c:	7bba      	ldrb	r2, [r7, #14]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	32ae      	adds	r2, #174	; 0xae
 8016722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016726:	689b      	ldr	r3, [r3, #8]
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	4798      	blx	r3
 801672e:	4603      	mov	r3, r0
 8016730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016732:	e004      	b.n	801673e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016734:	2303      	movs	r3, #3
 8016736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016738:	e001      	b.n	801673e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801673a:	2303      	movs	r3, #3
 801673c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	88db      	ldrh	r3, [r3, #6]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d110      	bne.n	8016768 <USBD_StdItfReq+0xc0>
 8016746:	7bfb      	ldrb	r3, [r7, #15]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d10d      	bne.n	8016768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f000 fdc7 	bl	80172e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016752:	e009      	b.n	8016768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016754:	6839      	ldr	r1, [r7, #0]
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f000 fcf7 	bl	801714a <USBD_CtlError>
          break;
 801675c:	e004      	b.n	8016768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801675e:	6839      	ldr	r1, [r7, #0]
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f000 fcf2 	bl	801714a <USBD_CtlError>
          break;
 8016766:	e000      	b.n	801676a <USBD_StdItfReq+0xc2>
          break;
 8016768:	bf00      	nop
      }
      break;
 801676a:	e004      	b.n	8016776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801676c:	6839      	ldr	r1, [r7, #0]
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f000 fceb 	bl	801714a <USBD_CtlError>
      break;
 8016774:	bf00      	nop
  }

  return ret;
 8016776:	7bfb      	ldrb	r3, [r7, #15]
}
 8016778:	4618      	mov	r0, r3
 801677a:	3710      	adds	r7, #16
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801678a:	2300      	movs	r3, #0
 801678c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801678e:	683b      	ldr	r3, [r7, #0]
 8016790:	889b      	ldrh	r3, [r3, #4]
 8016792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801679c:	2b40      	cmp	r3, #64	; 0x40
 801679e:	d007      	beq.n	80167b0 <USBD_StdEPReq+0x30>
 80167a0:	2b40      	cmp	r3, #64	; 0x40
 80167a2:	f200 817f 	bhi.w	8016aa4 <USBD_StdEPReq+0x324>
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d02a      	beq.n	8016800 <USBD_StdEPReq+0x80>
 80167aa:	2b20      	cmp	r3, #32
 80167ac:	f040 817a 	bne.w	8016aa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80167b0:	7bbb      	ldrb	r3, [r7, #14]
 80167b2:	4619      	mov	r1, r3
 80167b4:	6878      	ldr	r0, [r7, #4]
 80167b6:	f7ff fe83 	bl	80164c0 <USBD_CoreFindEP>
 80167ba:	4603      	mov	r3, r0
 80167bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80167be:	7b7b      	ldrb	r3, [r7, #13]
 80167c0:	2bff      	cmp	r3, #255	; 0xff
 80167c2:	f000 8174 	beq.w	8016aae <USBD_StdEPReq+0x32e>
 80167c6:	7b7b      	ldrb	r3, [r7, #13]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	f040 8170 	bne.w	8016aae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80167ce:	7b7a      	ldrb	r2, [r7, #13]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80167d6:	7b7a      	ldrb	r2, [r7, #13]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	32ae      	adds	r2, #174	; 0xae
 80167dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167e0:	689b      	ldr	r3, [r3, #8]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	f000 8163 	beq.w	8016aae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80167e8:	7b7a      	ldrb	r2, [r7, #13]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	32ae      	adds	r2, #174	; 0xae
 80167ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167f2:	689b      	ldr	r3, [r3, #8]
 80167f4:	6839      	ldr	r1, [r7, #0]
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	4798      	blx	r3
 80167fa:	4603      	mov	r3, r0
 80167fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80167fe:	e156      	b.n	8016aae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	785b      	ldrb	r3, [r3, #1]
 8016804:	2b03      	cmp	r3, #3
 8016806:	d008      	beq.n	801681a <USBD_StdEPReq+0x9a>
 8016808:	2b03      	cmp	r3, #3
 801680a:	f300 8145 	bgt.w	8016a98 <USBD_StdEPReq+0x318>
 801680e:	2b00      	cmp	r3, #0
 8016810:	f000 809b 	beq.w	801694a <USBD_StdEPReq+0x1ca>
 8016814:	2b01      	cmp	r3, #1
 8016816:	d03c      	beq.n	8016892 <USBD_StdEPReq+0x112>
 8016818:	e13e      	b.n	8016a98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016820:	b2db      	uxtb	r3, r3
 8016822:	2b02      	cmp	r3, #2
 8016824:	d002      	beq.n	801682c <USBD_StdEPReq+0xac>
 8016826:	2b03      	cmp	r3, #3
 8016828:	d016      	beq.n	8016858 <USBD_StdEPReq+0xd8>
 801682a:	e02c      	b.n	8016886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801682c:	7bbb      	ldrb	r3, [r7, #14]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d00d      	beq.n	801684e <USBD_StdEPReq+0xce>
 8016832:	7bbb      	ldrb	r3, [r7, #14]
 8016834:	2b80      	cmp	r3, #128	; 0x80
 8016836:	d00a      	beq.n	801684e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016838:	7bbb      	ldrb	r3, [r7, #14]
 801683a:	4619      	mov	r1, r3
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f004 f94d 	bl	801aadc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016842:	2180      	movs	r1, #128	; 0x80
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f004 f949 	bl	801aadc <USBD_LL_StallEP>
 801684a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801684c:	e020      	b.n	8016890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801684e:	6839      	ldr	r1, [r7, #0]
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f000 fc7a 	bl	801714a <USBD_CtlError>
              break;
 8016856:	e01b      	b.n	8016890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	885b      	ldrh	r3, [r3, #2]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10e      	bne.n	801687e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016860:	7bbb      	ldrb	r3, [r7, #14]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d00b      	beq.n	801687e <USBD_StdEPReq+0xfe>
 8016866:	7bbb      	ldrb	r3, [r7, #14]
 8016868:	2b80      	cmp	r3, #128	; 0x80
 801686a:	d008      	beq.n	801687e <USBD_StdEPReq+0xfe>
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	88db      	ldrh	r3, [r3, #6]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d104      	bne.n	801687e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016874:	7bbb      	ldrb	r3, [r7, #14]
 8016876:	4619      	mov	r1, r3
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f004 f92f 	bl	801aadc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f000 fd2e 	bl	80172e0 <USBD_CtlSendStatus>

              break;
 8016884:	e004      	b.n	8016890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016886:	6839      	ldr	r1, [r7, #0]
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f000 fc5e 	bl	801714a <USBD_CtlError>
              break;
 801688e:	bf00      	nop
          }
          break;
 8016890:	e107      	b.n	8016aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016898:	b2db      	uxtb	r3, r3
 801689a:	2b02      	cmp	r3, #2
 801689c:	d002      	beq.n	80168a4 <USBD_StdEPReq+0x124>
 801689e:	2b03      	cmp	r3, #3
 80168a0:	d016      	beq.n	80168d0 <USBD_StdEPReq+0x150>
 80168a2:	e04b      	b.n	801693c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168a4:	7bbb      	ldrb	r3, [r7, #14]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d00d      	beq.n	80168c6 <USBD_StdEPReq+0x146>
 80168aa:	7bbb      	ldrb	r3, [r7, #14]
 80168ac:	2b80      	cmp	r3, #128	; 0x80
 80168ae:	d00a      	beq.n	80168c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80168b0:	7bbb      	ldrb	r3, [r7, #14]
 80168b2:	4619      	mov	r1, r3
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f004 f911 	bl	801aadc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80168ba:	2180      	movs	r1, #128	; 0x80
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f004 f90d 	bl	801aadc <USBD_LL_StallEP>
 80168c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80168c4:	e040      	b.n	8016948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80168c6:	6839      	ldr	r1, [r7, #0]
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f000 fc3e 	bl	801714a <USBD_CtlError>
              break;
 80168ce:	e03b      	b.n	8016948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	885b      	ldrh	r3, [r3, #2]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d136      	bne.n	8016946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80168d8:	7bbb      	ldrb	r3, [r7, #14]
 80168da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d004      	beq.n	80168ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80168e2:	7bbb      	ldrb	r3, [r7, #14]
 80168e4:	4619      	mov	r1, r3
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f004 f917 	bl	801ab1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f000 fcf7 	bl	80172e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80168f2:	7bbb      	ldrb	r3, [r7, #14]
 80168f4:	4619      	mov	r1, r3
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f7ff fde2 	bl	80164c0 <USBD_CoreFindEP>
 80168fc:	4603      	mov	r3, r0
 80168fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016900:	7b7b      	ldrb	r3, [r7, #13]
 8016902:	2bff      	cmp	r3, #255	; 0xff
 8016904:	d01f      	beq.n	8016946 <USBD_StdEPReq+0x1c6>
 8016906:	7b7b      	ldrb	r3, [r7, #13]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d11c      	bne.n	8016946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801690c:	7b7a      	ldrb	r2, [r7, #13]
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016914:	7b7a      	ldrb	r2, [r7, #13]
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	32ae      	adds	r2, #174	; 0xae
 801691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801691e:	689b      	ldr	r3, [r3, #8]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d010      	beq.n	8016946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016924:	7b7a      	ldrb	r2, [r7, #13]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	32ae      	adds	r2, #174	; 0xae
 801692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801692e:	689b      	ldr	r3, [r3, #8]
 8016930:	6839      	ldr	r1, [r7, #0]
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	4798      	blx	r3
 8016936:	4603      	mov	r3, r0
 8016938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801693a:	e004      	b.n	8016946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801693c:	6839      	ldr	r1, [r7, #0]
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f000 fc03 	bl	801714a <USBD_CtlError>
              break;
 8016944:	e000      	b.n	8016948 <USBD_StdEPReq+0x1c8>
              break;
 8016946:	bf00      	nop
          }
          break;
 8016948:	e0ab      	b.n	8016aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016950:	b2db      	uxtb	r3, r3
 8016952:	2b02      	cmp	r3, #2
 8016954:	d002      	beq.n	801695c <USBD_StdEPReq+0x1dc>
 8016956:	2b03      	cmp	r3, #3
 8016958:	d032      	beq.n	80169c0 <USBD_StdEPReq+0x240>
 801695a:	e097      	b.n	8016a8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801695c:	7bbb      	ldrb	r3, [r7, #14]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d007      	beq.n	8016972 <USBD_StdEPReq+0x1f2>
 8016962:	7bbb      	ldrb	r3, [r7, #14]
 8016964:	2b80      	cmp	r3, #128	; 0x80
 8016966:	d004      	beq.n	8016972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016968:	6839      	ldr	r1, [r7, #0]
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f000 fbed 	bl	801714a <USBD_CtlError>
                break;
 8016970:	e091      	b.n	8016a96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016976:	2b00      	cmp	r3, #0
 8016978:	da0b      	bge.n	8016992 <USBD_StdEPReq+0x212>
 801697a:	7bbb      	ldrb	r3, [r7, #14]
 801697c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016980:	4613      	mov	r3, r2
 8016982:	009b      	lsls	r3, r3, #2
 8016984:	4413      	add	r3, r2
 8016986:	009b      	lsls	r3, r3, #2
 8016988:	3310      	adds	r3, #16
 801698a:	687a      	ldr	r2, [r7, #4]
 801698c:	4413      	add	r3, r2
 801698e:	3304      	adds	r3, #4
 8016990:	e00b      	b.n	80169aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016992:	7bbb      	ldrb	r3, [r7, #14]
 8016994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016998:	4613      	mov	r3, r2
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	4413      	add	r3, r2
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	4413      	add	r3, r2
 80169a8:	3304      	adds	r3, #4
 80169aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	2200      	movs	r2, #0
 80169b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	2202      	movs	r2, #2
 80169b6:	4619      	mov	r1, r3
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f000 fc37 	bl	801722c <USBD_CtlSendData>
              break;
 80169be:	e06a      	b.n	8016a96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80169c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	da11      	bge.n	80169ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80169c8:	7bbb      	ldrb	r3, [r7, #14]
 80169ca:	f003 020f 	and.w	r2, r3, #15
 80169ce:	6879      	ldr	r1, [r7, #4]
 80169d0:	4613      	mov	r3, r2
 80169d2:	009b      	lsls	r3, r3, #2
 80169d4:	4413      	add	r3, r2
 80169d6:	009b      	lsls	r3, r3, #2
 80169d8:	440b      	add	r3, r1
 80169da:	3324      	adds	r3, #36	; 0x24
 80169dc:	881b      	ldrh	r3, [r3, #0]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d117      	bne.n	8016a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80169e2:	6839      	ldr	r1, [r7, #0]
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f000 fbb0 	bl	801714a <USBD_CtlError>
                  break;
 80169ea:	e054      	b.n	8016a96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80169ec:	7bbb      	ldrb	r3, [r7, #14]
 80169ee:	f003 020f 	and.w	r2, r3, #15
 80169f2:	6879      	ldr	r1, [r7, #4]
 80169f4:	4613      	mov	r3, r2
 80169f6:	009b      	lsls	r3, r3, #2
 80169f8:	4413      	add	r3, r2
 80169fa:	009b      	lsls	r3, r3, #2
 80169fc:	440b      	add	r3, r1
 80169fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016a02:	881b      	ldrh	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d104      	bne.n	8016a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a08:	6839      	ldr	r1, [r7, #0]
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 fb9d 	bl	801714a <USBD_CtlError>
                  break;
 8016a10:	e041      	b.n	8016a96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	da0b      	bge.n	8016a32 <USBD_StdEPReq+0x2b2>
 8016a1a:	7bbb      	ldrb	r3, [r7, #14]
 8016a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a20:	4613      	mov	r3, r2
 8016a22:	009b      	lsls	r3, r3, #2
 8016a24:	4413      	add	r3, r2
 8016a26:	009b      	lsls	r3, r3, #2
 8016a28:	3310      	adds	r3, #16
 8016a2a:	687a      	ldr	r2, [r7, #4]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	3304      	adds	r3, #4
 8016a30:	e00b      	b.n	8016a4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a32:	7bbb      	ldrb	r3, [r7, #14]
 8016a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a38:	4613      	mov	r3, r2
 8016a3a:	009b      	lsls	r3, r3, #2
 8016a3c:	4413      	add	r3, r2
 8016a3e:	009b      	lsls	r3, r3, #2
 8016a40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	4413      	add	r3, r2
 8016a48:	3304      	adds	r3, #4
 8016a4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016a4c:	7bbb      	ldrb	r3, [r7, #14]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d002      	beq.n	8016a58 <USBD_StdEPReq+0x2d8>
 8016a52:	7bbb      	ldrb	r3, [r7, #14]
 8016a54:	2b80      	cmp	r3, #128	; 0x80
 8016a56:	d103      	bne.n	8016a60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	601a      	str	r2, [r3, #0]
 8016a5e:	e00e      	b.n	8016a7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016a60:	7bbb      	ldrb	r3, [r7, #14]
 8016a62:	4619      	mov	r1, r3
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f004 f877 	bl	801ab58 <USBD_LL_IsStallEP>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d003      	beq.n	8016a78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	2201      	movs	r2, #1
 8016a74:	601a      	str	r2, [r3, #0]
 8016a76:	e002      	b.n	8016a7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a7e:	68bb      	ldr	r3, [r7, #8]
 8016a80:	2202      	movs	r2, #2
 8016a82:	4619      	mov	r1, r3
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f000 fbd1 	bl	801722c <USBD_CtlSendData>
              break;
 8016a8a:	e004      	b.n	8016a96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016a8c:	6839      	ldr	r1, [r7, #0]
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 fb5b 	bl	801714a <USBD_CtlError>
              break;
 8016a94:	bf00      	nop
          }
          break;
 8016a96:	e004      	b.n	8016aa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016a98:	6839      	ldr	r1, [r7, #0]
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f000 fb55 	bl	801714a <USBD_CtlError>
          break;
 8016aa0:	bf00      	nop
      }
      break;
 8016aa2:	e005      	b.n	8016ab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f000 fb4f 	bl	801714a <USBD_CtlError>
      break;
 8016aac:	e000      	b.n	8016ab0 <USBD_StdEPReq+0x330>
      break;
 8016aae:	bf00      	nop
  }

  return ret;
 8016ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	3710      	adds	r7, #16
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}
	...

08016abc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016aca:	2300      	movs	r3, #0
 8016acc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016ace:	2300      	movs	r3, #0
 8016ad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	885b      	ldrh	r3, [r3, #2]
 8016ad6:	0a1b      	lsrs	r3, r3, #8
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	3b01      	subs	r3, #1
 8016adc:	2b06      	cmp	r3, #6
 8016ade:	f200 8128 	bhi.w	8016d32 <USBD_GetDescriptor+0x276>
 8016ae2:	a201      	add	r2, pc, #4	; (adr r2, 8016ae8 <USBD_GetDescriptor+0x2c>)
 8016ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ae8:	08016b05 	.word	0x08016b05
 8016aec:	08016b1d 	.word	0x08016b1d
 8016af0:	08016b5d 	.word	0x08016b5d
 8016af4:	08016d33 	.word	0x08016d33
 8016af8:	08016d33 	.word	0x08016d33
 8016afc:	08016cd3 	.word	0x08016cd3
 8016b00:	08016cff 	.word	0x08016cff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	687a      	ldr	r2, [r7, #4]
 8016b0e:	7c12      	ldrb	r2, [r2, #16]
 8016b10:	f107 0108 	add.w	r1, r7, #8
 8016b14:	4610      	mov	r0, r2
 8016b16:	4798      	blx	r3
 8016b18:	60f8      	str	r0, [r7, #12]
      break;
 8016b1a:	e112      	b.n	8016d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	7c1b      	ldrb	r3, [r3, #16]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d10d      	bne.n	8016b40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b2c:	f107 0208 	add.w	r2, r7, #8
 8016b30:	4610      	mov	r0, r2
 8016b32:	4798      	blx	r3
 8016b34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	3301      	adds	r3, #1
 8016b3a:	2202      	movs	r2, #2
 8016b3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016b3e:	e100      	b.n	8016d42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b48:	f107 0208 	add.w	r2, r7, #8
 8016b4c:	4610      	mov	r0, r2
 8016b4e:	4798      	blx	r3
 8016b50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	3301      	adds	r3, #1
 8016b56:	2202      	movs	r2, #2
 8016b58:	701a      	strb	r2, [r3, #0]
      break;
 8016b5a:	e0f2      	b.n	8016d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	885b      	ldrh	r3, [r3, #2]
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	2b05      	cmp	r3, #5
 8016b64:	f200 80ac 	bhi.w	8016cc0 <USBD_GetDescriptor+0x204>
 8016b68:	a201      	add	r2, pc, #4	; (adr r2, 8016b70 <USBD_GetDescriptor+0xb4>)
 8016b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6e:	bf00      	nop
 8016b70:	08016b89 	.word	0x08016b89
 8016b74:	08016bbd 	.word	0x08016bbd
 8016b78:	08016bf1 	.word	0x08016bf1
 8016b7c:	08016c25 	.word	0x08016c25
 8016b80:	08016c59 	.word	0x08016c59
 8016b84:	08016c8d 	.word	0x08016c8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d00b      	beq.n	8016bac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	687a      	ldr	r2, [r7, #4]
 8016b9e:	7c12      	ldrb	r2, [r2, #16]
 8016ba0:	f107 0108 	add.w	r1, r7, #8
 8016ba4:	4610      	mov	r0, r2
 8016ba6:	4798      	blx	r3
 8016ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016baa:	e091      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016bac:	6839      	ldr	r1, [r7, #0]
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f000 facb 	bl	801714a <USBD_CtlError>
            err++;
 8016bb4:	7afb      	ldrb	r3, [r7, #11]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8016bba:	e089      	b.n	8016cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bc2:	689b      	ldr	r3, [r3, #8]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d00b      	beq.n	8016be0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bce:	689b      	ldr	r3, [r3, #8]
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	7c12      	ldrb	r2, [r2, #16]
 8016bd4:	f107 0108 	add.w	r1, r7, #8
 8016bd8:	4610      	mov	r0, r2
 8016bda:	4798      	blx	r3
 8016bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016bde:	e077      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016be0:	6839      	ldr	r1, [r7, #0]
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f000 fab1 	bl	801714a <USBD_CtlError>
            err++;
 8016be8:	7afb      	ldrb	r3, [r7, #11]
 8016bea:	3301      	adds	r3, #1
 8016bec:	72fb      	strb	r3, [r7, #11]
          break;
 8016bee:	e06f      	b.n	8016cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bf6:	68db      	ldr	r3, [r3, #12]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d00b      	beq.n	8016c14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	7c12      	ldrb	r2, [r2, #16]
 8016c08:	f107 0108 	add.w	r1, r7, #8
 8016c0c:	4610      	mov	r0, r2
 8016c0e:	4798      	blx	r3
 8016c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c12:	e05d      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c14:	6839      	ldr	r1, [r7, #0]
 8016c16:	6878      	ldr	r0, [r7, #4]
 8016c18:	f000 fa97 	bl	801714a <USBD_CtlError>
            err++;
 8016c1c:	7afb      	ldrb	r3, [r7, #11]
 8016c1e:	3301      	adds	r3, #1
 8016c20:	72fb      	strb	r3, [r7, #11]
          break;
 8016c22:	e055      	b.n	8016cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c2a:	691b      	ldr	r3, [r3, #16]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d00b      	beq.n	8016c48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c36:	691b      	ldr	r3, [r3, #16]
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	7c12      	ldrb	r2, [r2, #16]
 8016c3c:	f107 0108 	add.w	r1, r7, #8
 8016c40:	4610      	mov	r0, r2
 8016c42:	4798      	blx	r3
 8016c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c46:	e043      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c48:	6839      	ldr	r1, [r7, #0]
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f000 fa7d 	bl	801714a <USBD_CtlError>
            err++;
 8016c50:	7afb      	ldrb	r3, [r7, #11]
 8016c52:	3301      	adds	r3, #1
 8016c54:	72fb      	strb	r3, [r7, #11]
          break;
 8016c56:	e03b      	b.n	8016cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c5e:	695b      	ldr	r3, [r3, #20]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d00b      	beq.n	8016c7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c6a:	695b      	ldr	r3, [r3, #20]
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	7c12      	ldrb	r2, [r2, #16]
 8016c70:	f107 0108 	add.w	r1, r7, #8
 8016c74:	4610      	mov	r0, r2
 8016c76:	4798      	blx	r3
 8016c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c7a:	e029      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c7c:	6839      	ldr	r1, [r7, #0]
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f000 fa63 	bl	801714a <USBD_CtlError>
            err++;
 8016c84:	7afb      	ldrb	r3, [r7, #11]
 8016c86:	3301      	adds	r3, #1
 8016c88:	72fb      	strb	r3, [r7, #11]
          break;
 8016c8a:	e021      	b.n	8016cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c92:	699b      	ldr	r3, [r3, #24]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d00b      	beq.n	8016cb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c9e:	699b      	ldr	r3, [r3, #24]
 8016ca0:	687a      	ldr	r2, [r7, #4]
 8016ca2:	7c12      	ldrb	r2, [r2, #16]
 8016ca4:	f107 0108 	add.w	r1, r7, #8
 8016ca8:	4610      	mov	r0, r2
 8016caa:	4798      	blx	r3
 8016cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cae:	e00f      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016cb0:	6839      	ldr	r1, [r7, #0]
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	f000 fa49 	bl	801714a <USBD_CtlError>
            err++;
 8016cb8:	7afb      	ldrb	r3, [r7, #11]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8016cbe:	e007      	b.n	8016cd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016cc0:	6839      	ldr	r1, [r7, #0]
 8016cc2:	6878      	ldr	r0, [r7, #4]
 8016cc4:	f000 fa41 	bl	801714a <USBD_CtlError>
          err++;
 8016cc8:	7afb      	ldrb	r3, [r7, #11]
 8016cca:	3301      	adds	r3, #1
 8016ccc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016cce:	bf00      	nop
      }
      break;
 8016cd0:	e037      	b.n	8016d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	7c1b      	ldrb	r3, [r3, #16]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d109      	bne.n	8016cee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ce2:	f107 0208 	add.w	r2, r7, #8
 8016ce6:	4610      	mov	r0, r2
 8016ce8:	4798      	blx	r3
 8016cea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016cec:	e029      	b.n	8016d42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016cee:	6839      	ldr	r1, [r7, #0]
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f000 fa2a 	bl	801714a <USBD_CtlError>
        err++;
 8016cf6:	7afb      	ldrb	r3, [r7, #11]
 8016cf8:	3301      	adds	r3, #1
 8016cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8016cfc:	e021      	b.n	8016d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	7c1b      	ldrb	r3, [r3, #16]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d10d      	bne.n	8016d22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d0e:	f107 0208 	add.w	r2, r7, #8
 8016d12:	4610      	mov	r0, r2
 8016d14:	4798      	blx	r3
 8016d16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	2207      	movs	r2, #7
 8016d1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d20:	e00f      	b.n	8016d42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d22:	6839      	ldr	r1, [r7, #0]
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f000 fa10 	bl	801714a <USBD_CtlError>
        err++;
 8016d2a:	7afb      	ldrb	r3, [r7, #11]
 8016d2c:	3301      	adds	r3, #1
 8016d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8016d30:	e007      	b.n	8016d42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016d32:	6839      	ldr	r1, [r7, #0]
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f000 fa08 	bl	801714a <USBD_CtlError>
      err++;
 8016d3a:	7afb      	ldrb	r3, [r7, #11]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8016d40:	bf00      	nop
  }

  if (err != 0U)
 8016d42:	7afb      	ldrb	r3, [r7, #11]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d11e      	bne.n	8016d86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	88db      	ldrh	r3, [r3, #6]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d016      	beq.n	8016d7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016d50:	893b      	ldrh	r3, [r7, #8]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d00e      	beq.n	8016d74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	88da      	ldrh	r2, [r3, #6]
 8016d5a:	893b      	ldrh	r3, [r7, #8]
 8016d5c:	4293      	cmp	r3, r2
 8016d5e:	bf28      	it	cs
 8016d60:	4613      	movcs	r3, r2
 8016d62:	b29b      	uxth	r3, r3
 8016d64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016d66:	893b      	ldrh	r3, [r7, #8]
 8016d68:	461a      	mov	r2, r3
 8016d6a:	68f9      	ldr	r1, [r7, #12]
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f000 fa5d 	bl	801722c <USBD_CtlSendData>
 8016d72:	e009      	b.n	8016d88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016d74:	6839      	ldr	r1, [r7, #0]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f000 f9e7 	bl	801714a <USBD_CtlError>
 8016d7c:	e004      	b.n	8016d88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f000 faae 	bl	80172e0 <USBD_CtlSendStatus>
 8016d84:	e000      	b.n	8016d88 <USBD_GetDescriptor+0x2cc>
    return;
 8016d86:	bf00      	nop
  }
}
 8016d88:	3710      	adds	r7, #16
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
 8016d8e:	bf00      	nop

08016d90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b084      	sub	sp, #16
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
 8016d98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	889b      	ldrh	r3, [r3, #4]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d131      	bne.n	8016e06 <USBD_SetAddress+0x76>
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	88db      	ldrh	r3, [r3, #6]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d12d      	bne.n	8016e06 <USBD_SetAddress+0x76>
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	885b      	ldrh	r3, [r3, #2]
 8016dae:	2b7f      	cmp	r3, #127	; 0x7f
 8016db0:	d829      	bhi.n	8016e06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	885b      	ldrh	r3, [r3, #2]
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016dbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016dc4:	b2db      	uxtb	r3, r3
 8016dc6:	2b03      	cmp	r3, #3
 8016dc8:	d104      	bne.n	8016dd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016dca:	6839      	ldr	r1, [r7, #0]
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f000 f9bc 	bl	801714a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016dd2:	e01d      	b.n	8016e10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	7bfa      	ldrb	r2, [r7, #15]
 8016dd8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016ddc:	7bfb      	ldrb	r3, [r7, #15]
 8016dde:	4619      	mov	r1, r3
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f003 fee5 	bl	801abb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f000 fa7a 	bl	80172e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016dec:	7bfb      	ldrb	r3, [r7, #15]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d004      	beq.n	8016dfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2202      	movs	r2, #2
 8016df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016dfa:	e009      	b.n	8016e10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2201      	movs	r2, #1
 8016e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e04:	e004      	b.n	8016e10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016e06:	6839      	ldr	r1, [r7, #0]
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f000 f99e 	bl	801714a <USBD_CtlError>
  }
}
 8016e0e:	bf00      	nop
 8016e10:	bf00      	nop
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b084      	sub	sp, #16
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016e22:	2300      	movs	r3, #0
 8016e24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	885b      	ldrh	r3, [r3, #2]
 8016e2a:	b2da      	uxtb	r2, r3
 8016e2c:	4b4e      	ldr	r3, [pc, #312]	; (8016f68 <USBD_SetConfig+0x150>)
 8016e2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016e30:	4b4d      	ldr	r3, [pc, #308]	; (8016f68 <USBD_SetConfig+0x150>)
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	2b01      	cmp	r3, #1
 8016e36:	d905      	bls.n	8016e44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016e38:	6839      	ldr	r1, [r7, #0]
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 f985 	bl	801714a <USBD_CtlError>
    return USBD_FAIL;
 8016e40:	2303      	movs	r3, #3
 8016e42:	e08c      	b.n	8016f5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e4a:	b2db      	uxtb	r3, r3
 8016e4c:	2b02      	cmp	r3, #2
 8016e4e:	d002      	beq.n	8016e56 <USBD_SetConfig+0x3e>
 8016e50:	2b03      	cmp	r3, #3
 8016e52:	d029      	beq.n	8016ea8 <USBD_SetConfig+0x90>
 8016e54:	e075      	b.n	8016f42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016e56:	4b44      	ldr	r3, [pc, #272]	; (8016f68 <USBD_SetConfig+0x150>)
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d020      	beq.n	8016ea0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016e5e:	4b42      	ldr	r3, [pc, #264]	; (8016f68 <USBD_SetConfig+0x150>)
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	461a      	mov	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016e68:	4b3f      	ldr	r3, [pc, #252]	; (8016f68 <USBD_SetConfig+0x150>)
 8016e6a:	781b      	ldrb	r3, [r3, #0]
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f7fe ffe1 	bl	8015e36 <USBD_SetClassConfig>
 8016e74:	4603      	mov	r3, r0
 8016e76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016e78:	7bfb      	ldrb	r3, [r7, #15]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d008      	beq.n	8016e90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016e7e:	6839      	ldr	r1, [r7, #0]
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f000 f962 	bl	801714a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2202      	movs	r2, #2
 8016e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016e8e:	e065      	b.n	8016f5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f000 fa25 	bl	80172e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2203      	movs	r2, #3
 8016e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016e9e:	e05d      	b.n	8016f5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f000 fa1d 	bl	80172e0 <USBD_CtlSendStatus>
      break;
 8016ea6:	e059      	b.n	8016f5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016ea8:	4b2f      	ldr	r3, [pc, #188]	; (8016f68 <USBD_SetConfig+0x150>)
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d112      	bne.n	8016ed6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2202      	movs	r2, #2
 8016eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016eb8:	4b2b      	ldr	r3, [pc, #172]	; (8016f68 <USBD_SetConfig+0x150>)
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	461a      	mov	r2, r3
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016ec2:	4b29      	ldr	r3, [pc, #164]	; (8016f68 <USBD_SetConfig+0x150>)
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	4619      	mov	r1, r3
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f7fe ffd0 	bl	8015e6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f000 fa06 	bl	80172e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016ed4:	e042      	b.n	8016f5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016ed6:	4b24      	ldr	r3, [pc, #144]	; (8016f68 <USBD_SetConfig+0x150>)
 8016ed8:	781b      	ldrb	r3, [r3, #0]
 8016eda:	461a      	mov	r2, r3
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	d02a      	beq.n	8016f3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	4619      	mov	r1, r3
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f7fe ffbe 	bl	8015e6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016ef2:	4b1d      	ldr	r3, [pc, #116]	; (8016f68 <USBD_SetConfig+0x150>)
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016efc:	4b1a      	ldr	r3, [pc, #104]	; (8016f68 <USBD_SetConfig+0x150>)
 8016efe:	781b      	ldrb	r3, [r3, #0]
 8016f00:	4619      	mov	r1, r3
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7fe ff97 	bl	8015e36 <USBD_SetClassConfig>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016f0c:	7bfb      	ldrb	r3, [r7, #15]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d00f      	beq.n	8016f32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016f12:	6839      	ldr	r1, [r7, #0]
 8016f14:	6878      	ldr	r0, [r7, #4]
 8016f16:	f000 f918 	bl	801714a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	b2db      	uxtb	r3, r3
 8016f20:	4619      	mov	r1, r3
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	f7fe ffa3 	bl	8015e6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2202      	movs	r2, #2
 8016f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016f30:	e014      	b.n	8016f5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f000 f9d4 	bl	80172e0 <USBD_CtlSendStatus>
      break;
 8016f38:	e010      	b.n	8016f5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f000 f9d0 	bl	80172e0 <USBD_CtlSendStatus>
      break;
 8016f40:	e00c      	b.n	8016f5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016f42:	6839      	ldr	r1, [r7, #0]
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f000 f900 	bl	801714a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f4a:	4b07      	ldr	r3, [pc, #28]	; (8016f68 <USBD_SetConfig+0x150>)
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	4619      	mov	r1, r3
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f7fe ff8c 	bl	8015e6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016f56:	2303      	movs	r3, #3
 8016f58:	73fb      	strb	r3, [r7, #15]
      break;
 8016f5a:	bf00      	nop
  }

  return ret;
 8016f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3710      	adds	r7, #16
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}
 8016f66:	bf00      	nop
 8016f68:	240016b0 	.word	0x240016b0

08016f6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	88db      	ldrh	r3, [r3, #6]
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d004      	beq.n	8016f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016f7e:	6839      	ldr	r1, [r7, #0]
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 f8e2 	bl	801714a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016f86:	e023      	b.n	8016fd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	2b02      	cmp	r3, #2
 8016f92:	dc02      	bgt.n	8016f9a <USBD_GetConfig+0x2e>
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	dc03      	bgt.n	8016fa0 <USBD_GetConfig+0x34>
 8016f98:	e015      	b.n	8016fc6 <USBD_GetConfig+0x5a>
 8016f9a:	2b03      	cmp	r3, #3
 8016f9c:	d00b      	beq.n	8016fb6 <USBD_GetConfig+0x4a>
 8016f9e:	e012      	b.n	8016fc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	3308      	adds	r3, #8
 8016faa:	2201      	movs	r2, #1
 8016fac:	4619      	mov	r1, r3
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f000 f93c 	bl	801722c <USBD_CtlSendData>
        break;
 8016fb4:	e00c      	b.n	8016fd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	3304      	adds	r3, #4
 8016fba:	2201      	movs	r2, #1
 8016fbc:	4619      	mov	r1, r3
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f000 f934 	bl	801722c <USBD_CtlSendData>
        break;
 8016fc4:	e004      	b.n	8016fd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016fc6:	6839      	ldr	r1, [r7, #0]
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f000 f8be 	bl	801714a <USBD_CtlError>
        break;
 8016fce:	bf00      	nop
}
 8016fd0:	bf00      	nop
 8016fd2:	3708      	adds	r7, #8
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b082      	sub	sp, #8
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	3b01      	subs	r3, #1
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	d81e      	bhi.n	801702e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	88db      	ldrh	r3, [r3, #6]
 8016ff4:	2b02      	cmp	r3, #2
 8016ff6:	d004      	beq.n	8017002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016ff8:	6839      	ldr	r1, [r7, #0]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 f8a5 	bl	801714a <USBD_CtlError>
        break;
 8017000:	e01a      	b.n	8017038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	2201      	movs	r2, #1
 8017006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801700e:	2b00      	cmp	r3, #0
 8017010:	d005      	beq.n	801701e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	68db      	ldr	r3, [r3, #12]
 8017016:	f043 0202 	orr.w	r2, r3, #2
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	330c      	adds	r3, #12
 8017022:	2202      	movs	r2, #2
 8017024:	4619      	mov	r1, r3
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f000 f900 	bl	801722c <USBD_CtlSendData>
      break;
 801702c:	e004      	b.n	8017038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801702e:	6839      	ldr	r1, [r7, #0]
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f000 f88a 	bl	801714a <USBD_CtlError>
      break;
 8017036:	bf00      	nop
  }
}
 8017038:	bf00      	nop
 801703a:	3708      	adds	r7, #8
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}

08017040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	885b      	ldrh	r3, [r3, #2]
 801704e:	2b01      	cmp	r3, #1
 8017050:	d107      	bne.n	8017062 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2201      	movs	r2, #1
 8017056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f000 f940 	bl	80172e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017060:	e013      	b.n	801708a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	885b      	ldrh	r3, [r3, #2]
 8017066:	2b02      	cmp	r3, #2
 8017068:	d10b      	bne.n	8017082 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	889b      	ldrh	r3, [r3, #4]
 801706e:	0a1b      	lsrs	r3, r3, #8
 8017070:	b29b      	uxth	r3, r3
 8017072:	b2da      	uxtb	r2, r3
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f000 f930 	bl	80172e0 <USBD_CtlSendStatus>
}
 8017080:	e003      	b.n	801708a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017082:	6839      	ldr	r1, [r7, #0]
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f000 f860 	bl	801714a <USBD_CtlError>
}
 801708a:	bf00      	nop
 801708c:	3708      	adds	r7, #8
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}

08017092 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017092:	b580      	push	{r7, lr}
 8017094:	b082      	sub	sp, #8
 8017096:	af00      	add	r7, sp, #0
 8017098:	6078      	str	r0, [r7, #4]
 801709a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	3b01      	subs	r3, #1
 80170a6:	2b02      	cmp	r3, #2
 80170a8:	d80b      	bhi.n	80170c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	885b      	ldrh	r3, [r3, #2]
 80170ae:	2b01      	cmp	r3, #1
 80170b0:	d10c      	bne.n	80170cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2200      	movs	r2, #0
 80170b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 f910 	bl	80172e0 <USBD_CtlSendStatus>
      }
      break;
 80170c0:	e004      	b.n	80170cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80170c2:	6839      	ldr	r1, [r7, #0]
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	f000 f840 	bl	801714a <USBD_CtlError>
      break;
 80170ca:	e000      	b.n	80170ce <USBD_ClrFeature+0x3c>
      break;
 80170cc:	bf00      	nop
  }
}
 80170ce:	bf00      	nop
 80170d0:	3708      	adds	r7, #8
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}

080170d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80170d6:	b580      	push	{r7, lr}
 80170d8:	b084      	sub	sp, #16
 80170da:	af00      	add	r7, sp, #0
 80170dc:	6078      	str	r0, [r7, #4]
 80170de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	781a      	ldrb	r2, [r3, #0]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	3301      	adds	r3, #1
 80170f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	781a      	ldrb	r2, [r3, #0]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	3301      	adds	r3, #1
 80170fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f7ff fa41 	bl	8016588 <SWAPBYTE>
 8017106:	4603      	mov	r3, r0
 8017108:	461a      	mov	r2, r3
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	3301      	adds	r3, #1
 8017112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	3301      	adds	r3, #1
 8017118:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801711a:	68f8      	ldr	r0, [r7, #12]
 801711c:	f7ff fa34 	bl	8016588 <SWAPBYTE>
 8017120:	4603      	mov	r3, r0
 8017122:	461a      	mov	r2, r3
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	3301      	adds	r3, #1
 801712c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	3301      	adds	r3, #1
 8017132:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017134:	68f8      	ldr	r0, [r7, #12]
 8017136:	f7ff fa27 	bl	8016588 <SWAPBYTE>
 801713a:	4603      	mov	r3, r0
 801713c:	461a      	mov	r2, r3
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	80da      	strh	r2, [r3, #6]
}
 8017142:	bf00      	nop
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}

0801714a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801714a:	b580      	push	{r7, lr}
 801714c:	b082      	sub	sp, #8
 801714e:	af00      	add	r7, sp, #0
 8017150:	6078      	str	r0, [r7, #4]
 8017152:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017154:	2180      	movs	r1, #128	; 0x80
 8017156:	6878      	ldr	r0, [r7, #4]
 8017158:	f003 fcc0 	bl	801aadc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801715c:	2100      	movs	r1, #0
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f003 fcbc 	bl	801aadc <USBD_LL_StallEP>
}
 8017164:	bf00      	nop
 8017166:	3708      	adds	r7, #8
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}

0801716c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b086      	sub	sp, #24
 8017170:	af00      	add	r7, sp, #0
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	60b9      	str	r1, [r7, #8]
 8017176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017178:	2300      	movs	r3, #0
 801717a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d036      	beq.n	80171f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017186:	6938      	ldr	r0, [r7, #16]
 8017188:	f000 f836 	bl	80171f8 <USBD_GetLen>
 801718c:	4603      	mov	r3, r0
 801718e:	3301      	adds	r3, #1
 8017190:	b29b      	uxth	r3, r3
 8017192:	005b      	lsls	r3, r3, #1
 8017194:	b29a      	uxth	r2, r3
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801719a:	7dfb      	ldrb	r3, [r7, #23]
 801719c:	68ba      	ldr	r2, [r7, #8]
 801719e:	4413      	add	r3, r2
 80171a0:	687a      	ldr	r2, [r7, #4]
 80171a2:	7812      	ldrb	r2, [r2, #0]
 80171a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80171a6:	7dfb      	ldrb	r3, [r7, #23]
 80171a8:	3301      	adds	r3, #1
 80171aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80171ac:	7dfb      	ldrb	r3, [r7, #23]
 80171ae:	68ba      	ldr	r2, [r7, #8]
 80171b0:	4413      	add	r3, r2
 80171b2:	2203      	movs	r2, #3
 80171b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80171b6:	7dfb      	ldrb	r3, [r7, #23]
 80171b8:	3301      	adds	r3, #1
 80171ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80171bc:	e013      	b.n	80171e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80171be:	7dfb      	ldrb	r3, [r7, #23]
 80171c0:	68ba      	ldr	r2, [r7, #8]
 80171c2:	4413      	add	r3, r2
 80171c4:	693a      	ldr	r2, [r7, #16]
 80171c6:	7812      	ldrb	r2, [r2, #0]
 80171c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	3301      	adds	r3, #1
 80171ce:	613b      	str	r3, [r7, #16]
    idx++;
 80171d0:	7dfb      	ldrb	r3, [r7, #23]
 80171d2:	3301      	adds	r3, #1
 80171d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80171d6:	7dfb      	ldrb	r3, [r7, #23]
 80171d8:	68ba      	ldr	r2, [r7, #8]
 80171da:	4413      	add	r3, r2
 80171dc:	2200      	movs	r2, #0
 80171de:	701a      	strb	r2, [r3, #0]
    idx++;
 80171e0:	7dfb      	ldrb	r3, [r7, #23]
 80171e2:	3301      	adds	r3, #1
 80171e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d1e7      	bne.n	80171be <USBD_GetString+0x52>
 80171ee:	e000      	b.n	80171f2 <USBD_GetString+0x86>
    return;
 80171f0:	bf00      	nop
  }
}
 80171f2:	3718      	adds	r7, #24
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80171f8:	b480      	push	{r7}
 80171fa:	b085      	sub	sp, #20
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017200:	2300      	movs	r3, #0
 8017202:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017208:	e005      	b.n	8017216 <USBD_GetLen+0x1e>
  {
    len++;
 801720a:	7bfb      	ldrb	r3, [r7, #15]
 801720c:	3301      	adds	r3, #1
 801720e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	3301      	adds	r3, #1
 8017214:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017216:	68bb      	ldr	r3, [r7, #8]
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d1f5      	bne.n	801720a <USBD_GetLen+0x12>
  }

  return len;
 801721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017220:	4618      	mov	r0, r3
 8017222:	3714      	adds	r7, #20
 8017224:	46bd      	mov	sp, r7
 8017226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722a:	4770      	bx	lr

0801722c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b084      	sub	sp, #16
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2202      	movs	r2, #2
 801723c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	687a      	ldr	r2, [r7, #4]
 8017244:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	68ba      	ldr	r2, [r7, #8]
 8017250:	2100      	movs	r1, #0
 8017252:	68f8      	ldr	r0, [r7, #12]
 8017254:	f003 fccb 	bl	801abee <USBD_LL_Transmit>

  return USBD_OK;
 8017258:	2300      	movs	r3, #0
}
 801725a:	4618      	mov	r0, r3
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}

08017262 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017262:	b580      	push	{r7, lr}
 8017264:	b084      	sub	sp, #16
 8017266:	af00      	add	r7, sp, #0
 8017268:	60f8      	str	r0, [r7, #12]
 801726a:	60b9      	str	r1, [r7, #8]
 801726c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	68ba      	ldr	r2, [r7, #8]
 8017272:	2100      	movs	r1, #0
 8017274:	68f8      	ldr	r0, [r7, #12]
 8017276:	f003 fcba 	bl	801abee <USBD_LL_Transmit>

  return USBD_OK;
 801727a:	2300      	movs	r3, #0
}
 801727c:	4618      	mov	r0, r3
 801727e:	3710      	adds	r7, #16
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b084      	sub	sp, #16
 8017288:	af00      	add	r7, sp, #0
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	2203      	movs	r2, #3
 8017294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	687a      	ldr	r2, [r7, #4]
 801729c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	687a      	ldr	r2, [r7, #4]
 80172a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	68ba      	ldr	r2, [r7, #8]
 80172ac:	2100      	movs	r1, #0
 80172ae:	68f8      	ldr	r0, [r7, #12]
 80172b0:	f003 fcbe 	bl	801ac30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80172b4:	2300      	movs	r3, #0
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3710      	adds	r7, #16
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}

080172be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80172be:	b580      	push	{r7, lr}
 80172c0:	b084      	sub	sp, #16
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	60f8      	str	r0, [r7, #12]
 80172c6:	60b9      	str	r1, [r7, #8]
 80172c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	2100      	movs	r1, #0
 80172d0:	68f8      	ldr	r0, [r7, #12]
 80172d2:	f003 fcad 	bl	801ac30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80172d6:	2300      	movs	r3, #0
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3710      	adds	r7, #16
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}

080172e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2204      	movs	r2, #4
 80172ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80172f0:	2300      	movs	r3, #0
 80172f2:	2200      	movs	r2, #0
 80172f4:	2100      	movs	r1, #0
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f003 fc79 	bl	801abee <USBD_LL_Transmit>

  return USBD_OK;
 80172fc:	2300      	movs	r3, #0
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3708      	adds	r7, #8
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}

08017306 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017306:	b580      	push	{r7, lr}
 8017308:	b082      	sub	sp, #8
 801730a:	af00      	add	r7, sp, #0
 801730c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2205      	movs	r2, #5
 8017312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017316:	2300      	movs	r3, #0
 8017318:	2200      	movs	r2, #0
 801731a:	2100      	movs	r1, #0
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f003 fc87 	bl	801ac30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017322:	2300      	movs	r3, #0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	4603      	mov	r3, r0
 8017334:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8017336:	79fb      	ldrb	r3, [r7, #7]
 8017338:	4a08      	ldr	r2, [pc, #32]	; (801735c <disk_status+0x30>)
 801733a:	009b      	lsls	r3, r3, #2
 801733c:	4413      	add	r3, r2
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	79fa      	ldrb	r2, [r7, #7]
 8017344:	4905      	ldr	r1, [pc, #20]	; (801735c <disk_status+0x30>)
 8017346:	440a      	add	r2, r1
 8017348:	7a12      	ldrb	r2, [r2, #8]
 801734a:	4610      	mov	r0, r2
 801734c:	4798      	blx	r3
 801734e:	4603      	mov	r3, r0
 8017350:	73fb      	strb	r3, [r7, #15]
  return stat;
 8017352:	7bfb      	ldrb	r3, [r7, #15]
}
 8017354:	4618      	mov	r0, r3
 8017356:	3710      	adds	r7, #16
 8017358:	46bd      	mov	sp, r7
 801735a:	bd80      	pop	{r7, pc}
 801735c:	240018dc 	.word	0x240018dc

08017360 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b084      	sub	sp, #16
 8017364:	af00      	add	r7, sp, #0
 8017366:	4603      	mov	r3, r0
 8017368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801736a:	2300      	movs	r3, #0
 801736c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801736e:	79fb      	ldrb	r3, [r7, #7]
 8017370:	4a0d      	ldr	r2, [pc, #52]	; (80173a8 <disk_initialize+0x48>)
 8017372:	5cd3      	ldrb	r3, [r2, r3]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d111      	bne.n	801739c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8017378:	79fb      	ldrb	r3, [r7, #7]
 801737a:	4a0b      	ldr	r2, [pc, #44]	; (80173a8 <disk_initialize+0x48>)
 801737c:	2101      	movs	r1, #1
 801737e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017380:	79fb      	ldrb	r3, [r7, #7]
 8017382:	4a09      	ldr	r2, [pc, #36]	; (80173a8 <disk_initialize+0x48>)
 8017384:	009b      	lsls	r3, r3, #2
 8017386:	4413      	add	r3, r2
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	79fa      	ldrb	r2, [r7, #7]
 801738e:	4906      	ldr	r1, [pc, #24]	; (80173a8 <disk_initialize+0x48>)
 8017390:	440a      	add	r2, r1
 8017392:	7a12      	ldrb	r2, [r2, #8]
 8017394:	4610      	mov	r0, r2
 8017396:	4798      	blx	r3
 8017398:	4603      	mov	r3, r0
 801739a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801739c:	7bfb      	ldrb	r3, [r7, #15]
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3710      	adds	r7, #16
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bd80      	pop	{r7, pc}
 80173a6:	bf00      	nop
 80173a8:	240018dc 	.word	0x240018dc

080173ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80173ac:	b590      	push	{r4, r7, lr}
 80173ae:	b087      	sub	sp, #28
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	60b9      	str	r1, [r7, #8]
 80173b4:	607a      	str	r2, [r7, #4]
 80173b6:	603b      	str	r3, [r7, #0]
 80173b8:	4603      	mov	r3, r0
 80173ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
 80173be:	4a0a      	ldr	r2, [pc, #40]	; (80173e8 <disk_read+0x3c>)
 80173c0:	009b      	lsls	r3, r3, #2
 80173c2:	4413      	add	r3, r2
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	689c      	ldr	r4, [r3, #8]
 80173c8:	7bfb      	ldrb	r3, [r7, #15]
 80173ca:	4a07      	ldr	r2, [pc, #28]	; (80173e8 <disk_read+0x3c>)
 80173cc:	4413      	add	r3, r2
 80173ce:	7a18      	ldrb	r0, [r3, #8]
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	687a      	ldr	r2, [r7, #4]
 80173d4:	68b9      	ldr	r1, [r7, #8]
 80173d6:	47a0      	blx	r4
 80173d8:	4603      	mov	r3, r0
 80173da:	75fb      	strb	r3, [r7, #23]
  return res;
 80173dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80173de:	4618      	mov	r0, r3
 80173e0:	371c      	adds	r7, #28
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd90      	pop	{r4, r7, pc}
 80173e6:	bf00      	nop
 80173e8:	240018dc 	.word	0x240018dc

080173ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80173ec:	b590      	push	{r4, r7, lr}
 80173ee:	b087      	sub	sp, #28
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	60b9      	str	r1, [r7, #8]
 80173f4:	607a      	str	r2, [r7, #4]
 80173f6:	603b      	str	r3, [r7, #0]
 80173f8:	4603      	mov	r3, r0
 80173fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80173fc:	7bfb      	ldrb	r3, [r7, #15]
 80173fe:	4a0a      	ldr	r2, [pc, #40]	; (8017428 <disk_write+0x3c>)
 8017400:	009b      	lsls	r3, r3, #2
 8017402:	4413      	add	r3, r2
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	68dc      	ldr	r4, [r3, #12]
 8017408:	7bfb      	ldrb	r3, [r7, #15]
 801740a:	4a07      	ldr	r2, [pc, #28]	; (8017428 <disk_write+0x3c>)
 801740c:	4413      	add	r3, r2
 801740e:	7a18      	ldrb	r0, [r3, #8]
 8017410:	683b      	ldr	r3, [r7, #0]
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	68b9      	ldr	r1, [r7, #8]
 8017416:	47a0      	blx	r4
 8017418:	4603      	mov	r3, r0
 801741a:	75fb      	strb	r3, [r7, #23]
  return res;
 801741c:	7dfb      	ldrb	r3, [r7, #23]
}
 801741e:	4618      	mov	r0, r3
 8017420:	371c      	adds	r7, #28
 8017422:	46bd      	mov	sp, r7
 8017424:	bd90      	pop	{r4, r7, pc}
 8017426:	bf00      	nop
 8017428:	240018dc 	.word	0x240018dc

0801742c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	4603      	mov	r3, r0
 8017434:	603a      	str	r2, [r7, #0]
 8017436:	71fb      	strb	r3, [r7, #7]
 8017438:	460b      	mov	r3, r1
 801743a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801743c:	79fb      	ldrb	r3, [r7, #7]
 801743e:	4a09      	ldr	r2, [pc, #36]	; (8017464 <disk_ioctl+0x38>)
 8017440:	009b      	lsls	r3, r3, #2
 8017442:	4413      	add	r3, r2
 8017444:	685b      	ldr	r3, [r3, #4]
 8017446:	691b      	ldr	r3, [r3, #16]
 8017448:	79fa      	ldrb	r2, [r7, #7]
 801744a:	4906      	ldr	r1, [pc, #24]	; (8017464 <disk_ioctl+0x38>)
 801744c:	440a      	add	r2, r1
 801744e:	7a10      	ldrb	r0, [r2, #8]
 8017450:	79b9      	ldrb	r1, [r7, #6]
 8017452:	683a      	ldr	r2, [r7, #0]
 8017454:	4798      	blx	r3
 8017456:	4603      	mov	r3, r0
 8017458:	73fb      	strb	r3, [r7, #15]
  return res;
 801745a:	7bfb      	ldrb	r3, [r7, #15]
}
 801745c:	4618      	mov	r0, r3
 801745e:	3710      	adds	r7, #16
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}
 8017464:	240018dc 	.word	0x240018dc

08017468 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017468:	b480      	push	{r7}
 801746a:	b085      	sub	sp, #20
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	3301      	adds	r3, #1
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017478:	89fb      	ldrh	r3, [r7, #14]
 801747a:	021b      	lsls	r3, r3, #8
 801747c:	b21a      	sxth	r2, r3
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	b21b      	sxth	r3, r3
 8017484:	4313      	orrs	r3, r2
 8017486:	b21b      	sxth	r3, r3
 8017488:	81fb      	strh	r3, [r7, #14]
	return rv;
 801748a:	89fb      	ldrh	r3, [r7, #14]
}
 801748c:	4618      	mov	r0, r3
 801748e:	3714      	adds	r7, #20
 8017490:	46bd      	mov	sp, r7
 8017492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017496:	4770      	bx	lr

08017498 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8017498:	b480      	push	{r7}
 801749a:	b085      	sub	sp, #20
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	3303      	adds	r3, #3
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	021b      	lsls	r3, r3, #8
 80174ac:	687a      	ldr	r2, [r7, #4]
 80174ae:	3202      	adds	r2, #2
 80174b0:	7812      	ldrb	r2, [r2, #0]
 80174b2:	4313      	orrs	r3, r2
 80174b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	021b      	lsls	r3, r3, #8
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	3201      	adds	r2, #1
 80174be:	7812      	ldrb	r2, [r2, #0]
 80174c0:	4313      	orrs	r3, r2
 80174c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	021b      	lsls	r3, r3, #8
 80174c8:	687a      	ldr	r2, [r7, #4]
 80174ca:	7812      	ldrb	r2, [r2, #0]
 80174cc:	4313      	orrs	r3, r2
 80174ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80174d0:	68fb      	ldr	r3, [r7, #12]
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3714      	adds	r7, #20
 80174d6:	46bd      	mov	sp, r7
 80174d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174dc:	4770      	bx	lr

080174de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80174de:	b480      	push	{r7}
 80174e0:	b083      	sub	sp, #12
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	6078      	str	r0, [r7, #4]
 80174e6:	460b      	mov	r3, r1
 80174e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	1c5a      	adds	r2, r3, #1
 80174ee:	607a      	str	r2, [r7, #4]
 80174f0:	887a      	ldrh	r2, [r7, #2]
 80174f2:	b2d2      	uxtb	r2, r2
 80174f4:	701a      	strb	r2, [r3, #0]
 80174f6:	887b      	ldrh	r3, [r7, #2]
 80174f8:	0a1b      	lsrs	r3, r3, #8
 80174fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	1c5a      	adds	r2, r3, #1
 8017500:	607a      	str	r2, [r7, #4]
 8017502:	887a      	ldrh	r2, [r7, #2]
 8017504:	b2d2      	uxtb	r2, r2
 8017506:	701a      	strb	r2, [r3, #0]
}
 8017508:	bf00      	nop
 801750a:	370c      	adds	r7, #12
 801750c:	46bd      	mov	sp, r7
 801750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017512:	4770      	bx	lr

08017514 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
 801751c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	1c5a      	adds	r2, r3, #1
 8017522:	607a      	str	r2, [r7, #4]
 8017524:	683a      	ldr	r2, [r7, #0]
 8017526:	b2d2      	uxtb	r2, r2
 8017528:	701a      	strb	r2, [r3, #0]
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	0a1b      	lsrs	r3, r3, #8
 801752e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	1c5a      	adds	r2, r3, #1
 8017534:	607a      	str	r2, [r7, #4]
 8017536:	683a      	ldr	r2, [r7, #0]
 8017538:	b2d2      	uxtb	r2, r2
 801753a:	701a      	strb	r2, [r3, #0]
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	0a1b      	lsrs	r3, r3, #8
 8017540:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	1c5a      	adds	r2, r3, #1
 8017546:	607a      	str	r2, [r7, #4]
 8017548:	683a      	ldr	r2, [r7, #0]
 801754a:	b2d2      	uxtb	r2, r2
 801754c:	701a      	strb	r2, [r3, #0]
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	0a1b      	lsrs	r3, r3, #8
 8017552:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	1c5a      	adds	r2, r3, #1
 8017558:	607a      	str	r2, [r7, #4]
 801755a:	683a      	ldr	r2, [r7, #0]
 801755c:	b2d2      	uxtb	r2, r2
 801755e:	701a      	strb	r2, [r3, #0]
}
 8017560:	bf00      	nop
 8017562:	370c      	adds	r7, #12
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801756c:	b480      	push	{r7}
 801756e:	b087      	sub	sp, #28
 8017570:	af00      	add	r7, sp, #0
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	60b9      	str	r1, [r7, #8]
 8017576:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d00d      	beq.n	80175a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017586:	693a      	ldr	r2, [r7, #16]
 8017588:	1c53      	adds	r3, r2, #1
 801758a:	613b      	str	r3, [r7, #16]
 801758c:	697b      	ldr	r3, [r7, #20]
 801758e:	1c59      	adds	r1, r3, #1
 8017590:	6179      	str	r1, [r7, #20]
 8017592:	7812      	ldrb	r2, [r2, #0]
 8017594:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	3b01      	subs	r3, #1
 801759a:	607b      	str	r3, [r7, #4]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d1f1      	bne.n	8017586 <mem_cpy+0x1a>
	}
}
 80175a2:	bf00      	nop
 80175a4:	371c      	adds	r7, #28
 80175a6:	46bd      	mov	sp, r7
 80175a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ac:	4770      	bx	lr

080175ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80175ae:	b480      	push	{r7}
 80175b0:	b087      	sub	sp, #28
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	60f8      	str	r0, [r7, #12]
 80175b6:	60b9      	str	r1, [r7, #8]
 80175b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80175be:	697b      	ldr	r3, [r7, #20]
 80175c0:	1c5a      	adds	r2, r3, #1
 80175c2:	617a      	str	r2, [r7, #20]
 80175c4:	68ba      	ldr	r2, [r7, #8]
 80175c6:	b2d2      	uxtb	r2, r2
 80175c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	3b01      	subs	r3, #1
 80175ce:	607b      	str	r3, [r7, #4]
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d1f3      	bne.n	80175be <mem_set+0x10>
}
 80175d6:	bf00      	nop
 80175d8:	bf00      	nop
 80175da:	371c      	adds	r7, #28
 80175dc:	46bd      	mov	sp, r7
 80175de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e2:	4770      	bx	lr

080175e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80175e4:	b480      	push	{r7}
 80175e6:	b089      	sub	sp, #36	; 0x24
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	60f8      	str	r0, [r7, #12]
 80175ec:	60b9      	str	r1, [r7, #8]
 80175ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	61fb      	str	r3, [r7, #28]
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80175f8:	2300      	movs	r3, #0
 80175fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80175fc:	69fb      	ldr	r3, [r7, #28]
 80175fe:	1c5a      	adds	r2, r3, #1
 8017600:	61fa      	str	r2, [r7, #28]
 8017602:	781b      	ldrb	r3, [r3, #0]
 8017604:	4619      	mov	r1, r3
 8017606:	69bb      	ldr	r3, [r7, #24]
 8017608:	1c5a      	adds	r2, r3, #1
 801760a:	61ba      	str	r2, [r7, #24]
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	1acb      	subs	r3, r1, r3
 8017610:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	3b01      	subs	r3, #1
 8017616:	607b      	str	r3, [r7, #4]
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d002      	beq.n	8017624 <mem_cmp+0x40>
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d0eb      	beq.n	80175fc <mem_cmp+0x18>

	return r;
 8017624:	697b      	ldr	r3, [r7, #20]
}
 8017626:	4618      	mov	r0, r3
 8017628:	3724      	adds	r7, #36	; 0x24
 801762a:	46bd      	mov	sp, r7
 801762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017630:	4770      	bx	lr

08017632 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017632:	b480      	push	{r7}
 8017634:	b083      	sub	sp, #12
 8017636:	af00      	add	r7, sp, #0
 8017638:	6078      	str	r0, [r7, #4]
 801763a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801763c:	e002      	b.n	8017644 <chk_chr+0x12>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	3301      	adds	r3, #1
 8017642:	607b      	str	r3, [r7, #4]
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d005      	beq.n	8017658 <chk_chr+0x26>
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	461a      	mov	r2, r3
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	4293      	cmp	r3, r2
 8017656:	d1f2      	bne.n	801763e <chk_chr+0xc>
	return *str;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	781b      	ldrb	r3, [r3, #0]
}
 801765c:	4618      	mov	r0, r3
 801765e:	370c      	adds	r7, #12
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017668:	b480      	push	{r7}
 801766a:	b085      	sub	sp, #20
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
 8017670:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017672:	2300      	movs	r3, #0
 8017674:	60bb      	str	r3, [r7, #8]
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	60fb      	str	r3, [r7, #12]
 801767a:	e029      	b.n	80176d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801767c:	4a27      	ldr	r2, [pc, #156]	; (801771c <chk_lock+0xb4>)
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	011b      	lsls	r3, r3, #4
 8017682:	4413      	add	r3, r2
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d01d      	beq.n	80176c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801768a:	4a24      	ldr	r2, [pc, #144]	; (801771c <chk_lock+0xb4>)
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	011b      	lsls	r3, r3, #4
 8017690:	4413      	add	r3, r2
 8017692:	681a      	ldr	r2, [r3, #0]
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	429a      	cmp	r2, r3
 801769a:	d116      	bne.n	80176ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801769c:	4a1f      	ldr	r2, [pc, #124]	; (801771c <chk_lock+0xb4>)
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	011b      	lsls	r3, r3, #4
 80176a2:	4413      	add	r3, r2
 80176a4:	3304      	adds	r3, #4
 80176a6:	681a      	ldr	r2, [r3, #0]
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d10c      	bne.n	80176ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80176b0:	4a1a      	ldr	r2, [pc, #104]	; (801771c <chk_lock+0xb4>)
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	011b      	lsls	r3, r3, #4
 80176b6:	4413      	add	r3, r2
 80176b8:	3308      	adds	r3, #8
 80176ba:	681a      	ldr	r2, [r3, #0]
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80176c0:	429a      	cmp	r2, r3
 80176c2:	d102      	bne.n	80176ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80176c4:	e007      	b.n	80176d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80176c6:	2301      	movs	r3, #1
 80176c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	3301      	adds	r3, #1
 80176ce:	60fb      	str	r3, [r7, #12]
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	2b01      	cmp	r3, #1
 80176d4:	d9d2      	bls.n	801767c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	2b02      	cmp	r3, #2
 80176da:	d109      	bne.n	80176f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d102      	bne.n	80176e8 <chk_lock+0x80>
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	2b02      	cmp	r3, #2
 80176e6:	d101      	bne.n	80176ec <chk_lock+0x84>
 80176e8:	2300      	movs	r3, #0
 80176ea:	e010      	b.n	801770e <chk_lock+0xa6>
 80176ec:	2312      	movs	r3, #18
 80176ee:	e00e      	b.n	801770e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d108      	bne.n	8017708 <chk_lock+0xa0>
 80176f6:	4a09      	ldr	r2, [pc, #36]	; (801771c <chk_lock+0xb4>)
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	011b      	lsls	r3, r3, #4
 80176fc:	4413      	add	r3, r2
 80176fe:	330c      	adds	r3, #12
 8017700:	881b      	ldrh	r3, [r3, #0]
 8017702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017706:	d101      	bne.n	801770c <chk_lock+0xa4>
 8017708:	2310      	movs	r3, #16
 801770a:	e000      	b.n	801770e <chk_lock+0xa6>
 801770c:	2300      	movs	r3, #0
}
 801770e:	4618      	mov	r0, r3
 8017710:	3714      	adds	r7, #20
 8017712:	46bd      	mov	sp, r7
 8017714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017718:	4770      	bx	lr
 801771a:	bf00      	nop
 801771c:	240016bc 	.word	0x240016bc

08017720 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017720:	b480      	push	{r7}
 8017722:	b083      	sub	sp, #12
 8017724:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017726:	2300      	movs	r3, #0
 8017728:	607b      	str	r3, [r7, #4]
 801772a:	e002      	b.n	8017732 <enq_lock+0x12>
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	3301      	adds	r3, #1
 8017730:	607b      	str	r3, [r7, #4]
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2b01      	cmp	r3, #1
 8017736:	d806      	bhi.n	8017746 <enq_lock+0x26>
 8017738:	4a09      	ldr	r2, [pc, #36]	; (8017760 <enq_lock+0x40>)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	011b      	lsls	r3, r3, #4
 801773e:	4413      	add	r3, r2
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d1f2      	bne.n	801772c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2b02      	cmp	r3, #2
 801774a:	bf14      	ite	ne
 801774c:	2301      	movne	r3, #1
 801774e:	2300      	moveq	r3, #0
 8017750:	b2db      	uxtb	r3, r3
}
 8017752:	4618      	mov	r0, r3
 8017754:	370c      	adds	r7, #12
 8017756:	46bd      	mov	sp, r7
 8017758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775c:	4770      	bx	lr
 801775e:	bf00      	nop
 8017760:	240016bc 	.word	0x240016bc

08017764 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017764:	b480      	push	{r7}
 8017766:	b085      	sub	sp, #20
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801776e:	2300      	movs	r3, #0
 8017770:	60fb      	str	r3, [r7, #12]
 8017772:	e01f      	b.n	80177b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017774:	4a41      	ldr	r2, [pc, #260]	; (801787c <inc_lock+0x118>)
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	011b      	lsls	r3, r3, #4
 801777a:	4413      	add	r3, r2
 801777c:	681a      	ldr	r2, [r3, #0]
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	429a      	cmp	r2, r3
 8017784:	d113      	bne.n	80177ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017786:	4a3d      	ldr	r2, [pc, #244]	; (801787c <inc_lock+0x118>)
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	011b      	lsls	r3, r3, #4
 801778c:	4413      	add	r3, r2
 801778e:	3304      	adds	r3, #4
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017796:	429a      	cmp	r2, r3
 8017798:	d109      	bne.n	80177ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801779a:	4a38      	ldr	r2, [pc, #224]	; (801787c <inc_lock+0x118>)
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	011b      	lsls	r3, r3, #4
 80177a0:	4413      	add	r3, r2
 80177a2:	3308      	adds	r3, #8
 80177a4:	681a      	ldr	r2, [r3, #0]
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d006      	beq.n	80177bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	3301      	adds	r3, #1
 80177b2:	60fb      	str	r3, [r7, #12]
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d9dc      	bls.n	8017774 <inc_lock+0x10>
 80177ba:	e000      	b.n	80177be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80177bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	2b02      	cmp	r3, #2
 80177c2:	d132      	bne.n	801782a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80177c4:	2300      	movs	r3, #0
 80177c6:	60fb      	str	r3, [r7, #12]
 80177c8:	e002      	b.n	80177d0 <inc_lock+0x6c>
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	3301      	adds	r3, #1
 80177ce:	60fb      	str	r3, [r7, #12]
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2b01      	cmp	r3, #1
 80177d4:	d806      	bhi.n	80177e4 <inc_lock+0x80>
 80177d6:	4a29      	ldr	r2, [pc, #164]	; (801787c <inc_lock+0x118>)
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	011b      	lsls	r3, r3, #4
 80177dc:	4413      	add	r3, r2
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d1f2      	bne.n	80177ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	2b02      	cmp	r3, #2
 80177e8:	d101      	bne.n	80177ee <inc_lock+0x8a>
 80177ea:	2300      	movs	r3, #0
 80177ec:	e040      	b.n	8017870 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	4922      	ldr	r1, [pc, #136]	; (801787c <inc_lock+0x118>)
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	011b      	lsls	r3, r3, #4
 80177f8:	440b      	add	r3, r1
 80177fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	689a      	ldr	r2, [r3, #8]
 8017800:	491e      	ldr	r1, [pc, #120]	; (801787c <inc_lock+0x118>)
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	011b      	lsls	r3, r3, #4
 8017806:	440b      	add	r3, r1
 8017808:	3304      	adds	r3, #4
 801780a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	695a      	ldr	r2, [r3, #20]
 8017810:	491a      	ldr	r1, [pc, #104]	; (801787c <inc_lock+0x118>)
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	011b      	lsls	r3, r3, #4
 8017816:	440b      	add	r3, r1
 8017818:	3308      	adds	r3, #8
 801781a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801781c:	4a17      	ldr	r2, [pc, #92]	; (801787c <inc_lock+0x118>)
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	011b      	lsls	r3, r3, #4
 8017822:	4413      	add	r3, r2
 8017824:	330c      	adds	r3, #12
 8017826:	2200      	movs	r2, #0
 8017828:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d009      	beq.n	8017844 <inc_lock+0xe0>
 8017830:	4a12      	ldr	r2, [pc, #72]	; (801787c <inc_lock+0x118>)
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	011b      	lsls	r3, r3, #4
 8017836:	4413      	add	r3, r2
 8017838:	330c      	adds	r3, #12
 801783a:	881b      	ldrh	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d001      	beq.n	8017844 <inc_lock+0xe0>
 8017840:	2300      	movs	r3, #0
 8017842:	e015      	b.n	8017870 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d108      	bne.n	801785c <inc_lock+0xf8>
 801784a:	4a0c      	ldr	r2, [pc, #48]	; (801787c <inc_lock+0x118>)
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	011b      	lsls	r3, r3, #4
 8017850:	4413      	add	r3, r2
 8017852:	330c      	adds	r3, #12
 8017854:	881b      	ldrh	r3, [r3, #0]
 8017856:	3301      	adds	r3, #1
 8017858:	b29a      	uxth	r2, r3
 801785a:	e001      	b.n	8017860 <inc_lock+0xfc>
 801785c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017860:	4906      	ldr	r1, [pc, #24]	; (801787c <inc_lock+0x118>)
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	011b      	lsls	r3, r3, #4
 8017866:	440b      	add	r3, r1
 8017868:	330c      	adds	r3, #12
 801786a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	3301      	adds	r3, #1
}
 8017870:	4618      	mov	r0, r3
 8017872:	3714      	adds	r7, #20
 8017874:	46bd      	mov	sp, r7
 8017876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787a:	4770      	bx	lr
 801787c:	240016bc 	.word	0x240016bc

08017880 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017880:	b480      	push	{r7}
 8017882:	b085      	sub	sp, #20
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	3b01      	subs	r3, #1
 801788c:	607b      	str	r3, [r7, #4]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2b01      	cmp	r3, #1
 8017892:	d825      	bhi.n	80178e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8017894:	4a17      	ldr	r2, [pc, #92]	; (80178f4 <dec_lock+0x74>)
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	011b      	lsls	r3, r3, #4
 801789a:	4413      	add	r3, r2
 801789c:	330c      	adds	r3, #12
 801789e:	881b      	ldrh	r3, [r3, #0]
 80178a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80178a2:	89fb      	ldrh	r3, [r7, #14]
 80178a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80178a8:	d101      	bne.n	80178ae <dec_lock+0x2e>
 80178aa:	2300      	movs	r3, #0
 80178ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80178ae:	89fb      	ldrh	r3, [r7, #14]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d002      	beq.n	80178ba <dec_lock+0x3a>
 80178b4:	89fb      	ldrh	r3, [r7, #14]
 80178b6:	3b01      	subs	r3, #1
 80178b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80178ba:	4a0e      	ldr	r2, [pc, #56]	; (80178f4 <dec_lock+0x74>)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	011b      	lsls	r3, r3, #4
 80178c0:	4413      	add	r3, r2
 80178c2:	330c      	adds	r3, #12
 80178c4:	89fa      	ldrh	r2, [r7, #14]
 80178c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80178c8:	89fb      	ldrh	r3, [r7, #14]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d105      	bne.n	80178da <dec_lock+0x5a>
 80178ce:	4a09      	ldr	r2, [pc, #36]	; (80178f4 <dec_lock+0x74>)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	011b      	lsls	r3, r3, #4
 80178d4:	4413      	add	r3, r2
 80178d6:	2200      	movs	r2, #0
 80178d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80178da:	2300      	movs	r3, #0
 80178dc:	737b      	strb	r3, [r7, #13]
 80178de:	e001      	b.n	80178e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80178e0:	2302      	movs	r3, #2
 80178e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80178e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	3714      	adds	r7, #20
 80178ea:	46bd      	mov	sp, r7
 80178ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f0:	4770      	bx	lr
 80178f2:	bf00      	nop
 80178f4:	240016bc 	.word	0x240016bc

080178f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80178f8:	b480      	push	{r7}
 80178fa:	b085      	sub	sp, #20
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017900:	2300      	movs	r3, #0
 8017902:	60fb      	str	r3, [r7, #12]
 8017904:	e010      	b.n	8017928 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017906:	4a0d      	ldr	r2, [pc, #52]	; (801793c <clear_lock+0x44>)
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	011b      	lsls	r3, r3, #4
 801790c:	4413      	add	r3, r2
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	687a      	ldr	r2, [r7, #4]
 8017912:	429a      	cmp	r2, r3
 8017914:	d105      	bne.n	8017922 <clear_lock+0x2a>
 8017916:	4a09      	ldr	r2, [pc, #36]	; (801793c <clear_lock+0x44>)
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	011b      	lsls	r3, r3, #4
 801791c:	4413      	add	r3, r2
 801791e:	2200      	movs	r2, #0
 8017920:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	3301      	adds	r3, #1
 8017926:	60fb      	str	r3, [r7, #12]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	2b01      	cmp	r3, #1
 801792c:	d9eb      	bls.n	8017906 <clear_lock+0xe>
	}
}
 801792e:	bf00      	nop
 8017930:	bf00      	nop
 8017932:	3714      	adds	r7, #20
 8017934:	46bd      	mov	sp, r7
 8017936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793a:	4770      	bx	lr
 801793c:	240016bc 	.word	0x240016bc

08017940 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b086      	sub	sp, #24
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017948:	2300      	movs	r3, #0
 801794a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	78db      	ldrb	r3, [r3, #3]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d034      	beq.n	80179be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017958:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	7858      	ldrb	r0, [r3, #1]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017964:	2301      	movs	r3, #1
 8017966:	697a      	ldr	r2, [r7, #20]
 8017968:	f7ff fd40 	bl	80173ec <disk_write>
 801796c:	4603      	mov	r3, r0
 801796e:	2b00      	cmp	r3, #0
 8017970:	d002      	beq.n	8017978 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017972:	2301      	movs	r3, #1
 8017974:	73fb      	strb	r3, [r7, #15]
 8017976:	e022      	b.n	80179be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2200      	movs	r2, #0
 801797c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017982:	697a      	ldr	r2, [r7, #20]
 8017984:	1ad2      	subs	r2, r2, r3
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6a1b      	ldr	r3, [r3, #32]
 801798a:	429a      	cmp	r2, r3
 801798c:	d217      	bcs.n	80179be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	789b      	ldrb	r3, [r3, #2]
 8017992:	613b      	str	r3, [r7, #16]
 8017994:	e010      	b.n	80179b8 <sync_window+0x78>
					wsect += fs->fsize;
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	6a1b      	ldr	r3, [r3, #32]
 801799a:	697a      	ldr	r2, [r7, #20]
 801799c:	4413      	add	r3, r2
 801799e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	7858      	ldrb	r0, [r3, #1]
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80179aa:	2301      	movs	r3, #1
 80179ac:	697a      	ldr	r2, [r7, #20]
 80179ae:	f7ff fd1d 	bl	80173ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	3b01      	subs	r3, #1
 80179b6:	613b      	str	r3, [r7, #16]
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	2b01      	cmp	r3, #1
 80179bc:	d8eb      	bhi.n	8017996 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80179be:	7bfb      	ldrb	r3, [r7, #15]
}
 80179c0:	4618      	mov	r0, r3
 80179c2:	3718      	adds	r7, #24
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}

080179c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b084      	sub	sp, #16
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80179d2:	2300      	movs	r3, #0
 80179d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179da:	683a      	ldr	r2, [r7, #0]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d01b      	beq.n	8017a18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80179e0:	6878      	ldr	r0, [r7, #4]
 80179e2:	f7ff ffad 	bl	8017940 <sync_window>
 80179e6:	4603      	mov	r3, r0
 80179e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80179ea:	7bfb      	ldrb	r3, [r7, #15]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d113      	bne.n	8017a18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	7858      	ldrb	r0, [r3, #1]
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80179fa:	2301      	movs	r3, #1
 80179fc:	683a      	ldr	r2, [r7, #0]
 80179fe:	f7ff fcd5 	bl	80173ac <disk_read>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d004      	beq.n	8017a12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017a08:	f04f 33ff 	mov.w	r3, #4294967295
 8017a0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017a0e:	2301      	movs	r3, #1
 8017a10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	683a      	ldr	r2, [r7, #0]
 8017a16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3710      	adds	r7, #16
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
	...

08017a24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b084      	sub	sp, #16
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f7ff ff87 	bl	8017940 <sync_window>
 8017a32:	4603      	mov	r3, r0
 8017a34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017a36:	7bfb      	ldrb	r3, [r7, #15]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d159      	bne.n	8017af0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	2b03      	cmp	r3, #3
 8017a42:	d149      	bne.n	8017ad8 <sync_fs+0xb4>
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	791b      	ldrb	r3, [r3, #4]
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	d145      	bne.n	8017ad8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	899b      	ldrh	r3, [r3, #12]
 8017a56:	461a      	mov	r2, r3
 8017a58:	2100      	movs	r1, #0
 8017a5a:	f7ff fda8 	bl	80175ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	3338      	adds	r3, #56	; 0x38
 8017a62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017a66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7ff fd37 	bl	80174de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	3338      	adds	r3, #56	; 0x38
 8017a74:	4921      	ldr	r1, [pc, #132]	; (8017afc <sync_fs+0xd8>)
 8017a76:	4618      	mov	r0, r3
 8017a78:	f7ff fd4c 	bl	8017514 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	3338      	adds	r3, #56	; 0x38
 8017a80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017a84:	491e      	ldr	r1, [pc, #120]	; (8017b00 <sync_fs+0xdc>)
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7ff fd44 	bl	8017514 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	3338      	adds	r3, #56	; 0x38
 8017a90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	699b      	ldr	r3, [r3, #24]
 8017a98:	4619      	mov	r1, r3
 8017a9a:	4610      	mov	r0, r2
 8017a9c:	f7ff fd3a 	bl	8017514 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	3338      	adds	r3, #56	; 0x38
 8017aa4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	695b      	ldr	r3, [r3, #20]
 8017aac:	4619      	mov	r1, r3
 8017aae:	4610      	mov	r0, r2
 8017ab0:	f7ff fd30 	bl	8017514 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ab8:	1c5a      	adds	r2, r3, #1
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	7858      	ldrb	r0, [r3, #1]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017acc:	2301      	movs	r3, #1
 8017ace:	f7ff fc8d 	bl	80173ec <disk_write>
			fs->fsi_flag = 0;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	785b      	ldrb	r3, [r3, #1]
 8017adc:	2200      	movs	r2, #0
 8017ade:	2100      	movs	r1, #0
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7ff fca3 	bl	801742c <disk_ioctl>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d001      	beq.n	8017af0 <sync_fs+0xcc>
 8017aec:	2301      	movs	r3, #1
 8017aee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3710      	adds	r7, #16
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	41615252 	.word	0x41615252
 8017b00:	61417272 	.word	0x61417272

08017b04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b083      	sub	sp, #12
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	3b02      	subs	r3, #2
 8017b12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	69db      	ldr	r3, [r3, #28]
 8017b18:	3b02      	subs	r3, #2
 8017b1a:	683a      	ldr	r2, [r7, #0]
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d301      	bcc.n	8017b24 <clust2sect+0x20>
 8017b20:	2300      	movs	r3, #0
 8017b22:	e008      	b.n	8017b36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	895b      	ldrh	r3, [r3, #10]
 8017b28:	461a      	mov	r2, r3
 8017b2a:	683b      	ldr	r3, [r7, #0]
 8017b2c:	fb03 f202 	mul.w	r2, r3, r2
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b34:	4413      	add	r3, r2
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	370c      	adds	r7, #12
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b40:	4770      	bx	lr

08017b42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017b42:	b580      	push	{r7, lr}
 8017b44:	b086      	sub	sp, #24
 8017b46:	af00      	add	r7, sp, #0
 8017b48:	6078      	str	r0, [r7, #4]
 8017b4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	2b01      	cmp	r3, #1
 8017b56:	d904      	bls.n	8017b62 <get_fat+0x20>
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	69db      	ldr	r3, [r3, #28]
 8017b5c:	683a      	ldr	r2, [r7, #0]
 8017b5e:	429a      	cmp	r2, r3
 8017b60:	d302      	bcc.n	8017b68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017b62:	2301      	movs	r3, #1
 8017b64:	617b      	str	r3, [r7, #20]
 8017b66:	e0bb      	b.n	8017ce0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017b68:	f04f 33ff 	mov.w	r3, #4294967295
 8017b6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017b6e:	693b      	ldr	r3, [r7, #16]
 8017b70:	781b      	ldrb	r3, [r3, #0]
 8017b72:	2b03      	cmp	r3, #3
 8017b74:	f000 8083 	beq.w	8017c7e <get_fat+0x13c>
 8017b78:	2b03      	cmp	r3, #3
 8017b7a:	f300 80a7 	bgt.w	8017ccc <get_fat+0x18a>
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	d002      	beq.n	8017b88 <get_fat+0x46>
 8017b82:	2b02      	cmp	r3, #2
 8017b84:	d056      	beq.n	8017c34 <get_fat+0xf2>
 8017b86:	e0a1      	b.n	8017ccc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	60fb      	str	r3, [r7, #12]
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	085b      	lsrs	r3, r3, #1
 8017b90:	68fa      	ldr	r2, [r7, #12]
 8017b92:	4413      	add	r3, r2
 8017b94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017b96:	693b      	ldr	r3, [r7, #16]
 8017b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	899b      	ldrh	r3, [r3, #12]
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ba6:	4413      	add	r3, r2
 8017ba8:	4619      	mov	r1, r3
 8017baa:	6938      	ldr	r0, [r7, #16]
 8017bac:	f7ff ff0c 	bl	80179c8 <move_window>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f040 808d 	bne.w	8017cd2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	1c5a      	adds	r2, r3, #1
 8017bbc:	60fa      	str	r2, [r7, #12]
 8017bbe:	693a      	ldr	r2, [r7, #16]
 8017bc0:	8992      	ldrh	r2, [r2, #12]
 8017bc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8017bc6:	fb01 f202 	mul.w	r2, r1, r2
 8017bca:	1a9b      	subs	r3, r3, r2
 8017bcc:	693a      	ldr	r2, [r7, #16]
 8017bce:	4413      	add	r3, r2
 8017bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017bd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	899b      	ldrh	r3, [r3, #12]
 8017bde:	4619      	mov	r1, r3
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017be6:	4413      	add	r3, r2
 8017be8:	4619      	mov	r1, r3
 8017bea:	6938      	ldr	r0, [r7, #16]
 8017bec:	f7ff feec 	bl	80179c8 <move_window>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d16f      	bne.n	8017cd6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017bf6:	693b      	ldr	r3, [r7, #16]
 8017bf8:	899b      	ldrh	r3, [r3, #12]
 8017bfa:	461a      	mov	r2, r3
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c02:	fb01 f202 	mul.w	r2, r1, r2
 8017c06:	1a9b      	subs	r3, r3, r2
 8017c08:	693a      	ldr	r2, [r7, #16]
 8017c0a:	4413      	add	r3, r2
 8017c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017c10:	021b      	lsls	r3, r3, #8
 8017c12:	461a      	mov	r2, r3
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	4313      	orrs	r3, r2
 8017c18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	f003 0301 	and.w	r3, r3, #1
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d002      	beq.n	8017c2a <get_fat+0xe8>
 8017c24:	68bb      	ldr	r3, [r7, #8]
 8017c26:	091b      	lsrs	r3, r3, #4
 8017c28:	e002      	b.n	8017c30 <get_fat+0xee>
 8017c2a:	68bb      	ldr	r3, [r7, #8]
 8017c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017c30:	617b      	str	r3, [r7, #20]
			break;
 8017c32:	e055      	b.n	8017ce0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	899b      	ldrh	r3, [r3, #12]
 8017c3c:	085b      	lsrs	r3, r3, #1
 8017c3e:	b29b      	uxth	r3, r3
 8017c40:	4619      	mov	r1, r3
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c48:	4413      	add	r3, r2
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	6938      	ldr	r0, [r7, #16]
 8017c4e:	f7ff febb 	bl	80179c8 <move_window>
 8017c52:	4603      	mov	r3, r0
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d140      	bne.n	8017cda <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	005b      	lsls	r3, r3, #1
 8017c62:	693a      	ldr	r2, [r7, #16]
 8017c64:	8992      	ldrh	r2, [r2, #12]
 8017c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8017c6a:	fb00 f202 	mul.w	r2, r0, r2
 8017c6e:	1a9b      	subs	r3, r3, r2
 8017c70:	440b      	add	r3, r1
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7ff fbf8 	bl	8017468 <ld_word>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	617b      	str	r3, [r7, #20]
			break;
 8017c7c:	e030      	b.n	8017ce0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c82:	693b      	ldr	r3, [r7, #16]
 8017c84:	899b      	ldrh	r3, [r3, #12]
 8017c86:	089b      	lsrs	r3, r3, #2
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	4619      	mov	r1, r3
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c92:	4413      	add	r3, r2
 8017c94:	4619      	mov	r1, r3
 8017c96:	6938      	ldr	r0, [r7, #16]
 8017c98:	f7ff fe96 	bl	80179c8 <move_window>
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d11d      	bne.n	8017cde <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ca8:	683b      	ldr	r3, [r7, #0]
 8017caa:	009b      	lsls	r3, r3, #2
 8017cac:	693a      	ldr	r2, [r7, #16]
 8017cae:	8992      	ldrh	r2, [r2, #12]
 8017cb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8017cb4:	fb00 f202 	mul.w	r2, r0, r2
 8017cb8:	1a9b      	subs	r3, r3, r2
 8017cba:	440b      	add	r3, r1
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7ff fbeb 	bl	8017498 <ld_dword>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017cc8:	617b      	str	r3, [r7, #20]
			break;
 8017cca:	e009      	b.n	8017ce0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017ccc:	2301      	movs	r3, #1
 8017cce:	617b      	str	r3, [r7, #20]
 8017cd0:	e006      	b.n	8017ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cd2:	bf00      	nop
 8017cd4:	e004      	b.n	8017ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cd6:	bf00      	nop
 8017cd8:	e002      	b.n	8017ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017cda:	bf00      	nop
 8017cdc:	e000      	b.n	8017ce0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017cde:	bf00      	nop
		}
	}

	return val;
 8017ce0:	697b      	ldr	r3, [r7, #20]
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3718      	adds	r7, #24
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}

08017cea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017cea:	b590      	push	{r4, r7, lr}
 8017cec:	b089      	sub	sp, #36	; 0x24
 8017cee:	af00      	add	r7, sp, #0
 8017cf0:	60f8      	str	r0, [r7, #12]
 8017cf2:	60b9      	str	r1, [r7, #8]
 8017cf4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017cf6:	2302      	movs	r3, #2
 8017cf8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017cfa:	68bb      	ldr	r3, [r7, #8]
 8017cfc:	2b01      	cmp	r3, #1
 8017cfe:	f240 8102 	bls.w	8017f06 <put_fat+0x21c>
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	69db      	ldr	r3, [r3, #28]
 8017d06:	68ba      	ldr	r2, [r7, #8]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	f080 80fc 	bcs.w	8017f06 <put_fat+0x21c>
		switch (fs->fs_type) {
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	2b03      	cmp	r3, #3
 8017d14:	f000 80b6 	beq.w	8017e84 <put_fat+0x19a>
 8017d18:	2b03      	cmp	r3, #3
 8017d1a:	f300 80fd 	bgt.w	8017f18 <put_fat+0x22e>
 8017d1e:	2b01      	cmp	r3, #1
 8017d20:	d003      	beq.n	8017d2a <put_fat+0x40>
 8017d22:	2b02      	cmp	r3, #2
 8017d24:	f000 8083 	beq.w	8017e2e <put_fat+0x144>
 8017d28:	e0f6      	b.n	8017f18 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	61bb      	str	r3, [r7, #24]
 8017d2e:	69bb      	ldr	r3, [r7, #24]
 8017d30:	085b      	lsrs	r3, r3, #1
 8017d32:	69ba      	ldr	r2, [r7, #24]
 8017d34:	4413      	add	r3, r2
 8017d36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	899b      	ldrh	r3, [r3, #12]
 8017d40:	4619      	mov	r1, r3
 8017d42:	69bb      	ldr	r3, [r7, #24]
 8017d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d48:	4413      	add	r3, r2
 8017d4a:	4619      	mov	r1, r3
 8017d4c:	68f8      	ldr	r0, [r7, #12]
 8017d4e:	f7ff fe3b 	bl	80179c8 <move_window>
 8017d52:	4603      	mov	r3, r0
 8017d54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017d56:	7ffb      	ldrb	r3, [r7, #31]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	f040 80d6 	bne.w	8017f0a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017d64:	69bb      	ldr	r3, [r7, #24]
 8017d66:	1c5a      	adds	r2, r3, #1
 8017d68:	61ba      	str	r2, [r7, #24]
 8017d6a:	68fa      	ldr	r2, [r7, #12]
 8017d6c:	8992      	ldrh	r2, [r2, #12]
 8017d6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d72:	fb00 f202 	mul.w	r2, r0, r2
 8017d76:	1a9b      	subs	r3, r3, r2
 8017d78:	440b      	add	r3, r1
 8017d7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	f003 0301 	and.w	r3, r3, #1
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d00d      	beq.n	8017da2 <put_fat+0xb8>
 8017d86:	697b      	ldr	r3, [r7, #20]
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	b25b      	sxtb	r3, r3
 8017d8c:	f003 030f 	and.w	r3, r3, #15
 8017d90:	b25a      	sxtb	r2, r3
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	b2db      	uxtb	r3, r3
 8017d96:	011b      	lsls	r3, r3, #4
 8017d98:	b25b      	sxtb	r3, r3
 8017d9a:	4313      	orrs	r3, r2
 8017d9c:	b25b      	sxtb	r3, r3
 8017d9e:	b2db      	uxtb	r3, r3
 8017da0:	e001      	b.n	8017da6 <put_fat+0xbc>
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	697a      	ldr	r2, [r7, #20]
 8017da8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	2201      	movs	r2, #1
 8017dae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	899b      	ldrh	r3, [r3, #12]
 8017db8:	4619      	mov	r1, r3
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8017dc0:	4413      	add	r3, r2
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	68f8      	ldr	r0, [r7, #12]
 8017dc6:	f7ff fdff 	bl	80179c8 <move_window>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017dce:	7ffb      	ldrb	r3, [r7, #31]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	f040 809c 	bne.w	8017f0e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	899b      	ldrh	r3, [r3, #12]
 8017de0:	461a      	mov	r2, r3
 8017de2:	69bb      	ldr	r3, [r7, #24]
 8017de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8017de8:	fb00 f202 	mul.w	r2, r0, r2
 8017dec:	1a9b      	subs	r3, r3, r2
 8017dee:	440b      	add	r3, r1
 8017df0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	f003 0301 	and.w	r3, r3, #1
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d003      	beq.n	8017e04 <put_fat+0x11a>
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	091b      	lsrs	r3, r3, #4
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	e00e      	b.n	8017e22 <put_fat+0x138>
 8017e04:	697b      	ldr	r3, [r7, #20]
 8017e06:	781b      	ldrb	r3, [r3, #0]
 8017e08:	b25b      	sxtb	r3, r3
 8017e0a:	f023 030f 	bic.w	r3, r3, #15
 8017e0e:	b25a      	sxtb	r2, r3
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	0a1b      	lsrs	r3, r3, #8
 8017e14:	b25b      	sxtb	r3, r3
 8017e16:	f003 030f 	and.w	r3, r3, #15
 8017e1a:	b25b      	sxtb	r3, r3
 8017e1c:	4313      	orrs	r3, r2
 8017e1e:	b25b      	sxtb	r3, r3
 8017e20:	b2db      	uxtb	r3, r3
 8017e22:	697a      	ldr	r2, [r7, #20]
 8017e24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	2201      	movs	r2, #1
 8017e2a:	70da      	strb	r2, [r3, #3]
			break;
 8017e2c:	e074      	b.n	8017f18 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	899b      	ldrh	r3, [r3, #12]
 8017e36:	085b      	lsrs	r3, r3, #1
 8017e38:	b29b      	uxth	r3, r3
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	68bb      	ldr	r3, [r7, #8]
 8017e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e42:	4413      	add	r3, r2
 8017e44:	4619      	mov	r1, r3
 8017e46:	68f8      	ldr	r0, [r7, #12]
 8017e48:	f7ff fdbe 	bl	80179c8 <move_window>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017e50:	7ffb      	ldrb	r3, [r7, #31]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d15d      	bne.n	8017f12 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	005b      	lsls	r3, r3, #1
 8017e60:	68fa      	ldr	r2, [r7, #12]
 8017e62:	8992      	ldrh	r2, [r2, #12]
 8017e64:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e68:	fb00 f202 	mul.w	r2, r0, r2
 8017e6c:	1a9b      	subs	r3, r3, r2
 8017e6e:	440b      	add	r3, r1
 8017e70:	687a      	ldr	r2, [r7, #4]
 8017e72:	b292      	uxth	r2, r2
 8017e74:	4611      	mov	r1, r2
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7ff fb31 	bl	80174de <st_word>
			fs->wflag = 1;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	2201      	movs	r2, #1
 8017e80:	70da      	strb	r2, [r3, #3]
			break;
 8017e82:	e049      	b.n	8017f18 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	899b      	ldrh	r3, [r3, #12]
 8017e8c:	089b      	lsrs	r3, r3, #2
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	4619      	mov	r1, r3
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e98:	4413      	add	r3, r2
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	68f8      	ldr	r0, [r7, #12]
 8017e9e:	f7ff fd93 	bl	80179c8 <move_window>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017ea6:	7ffb      	ldrb	r3, [r7, #31]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d134      	bne.n	8017f16 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	009b      	lsls	r3, r3, #2
 8017ebc:	68fa      	ldr	r2, [r7, #12]
 8017ebe:	8992      	ldrh	r2, [r2, #12]
 8017ec0:	fbb3 f0f2 	udiv	r0, r3, r2
 8017ec4:	fb00 f202 	mul.w	r2, r0, r2
 8017ec8:	1a9b      	subs	r3, r3, r2
 8017eca:	440b      	add	r3, r1
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f7ff fae3 	bl	8017498 <ld_dword>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017ed8:	4323      	orrs	r3, r4
 8017eda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	009b      	lsls	r3, r3, #2
 8017ee6:	68fa      	ldr	r2, [r7, #12]
 8017ee8:	8992      	ldrh	r2, [r2, #12]
 8017eea:	fbb3 f0f2 	udiv	r0, r3, r2
 8017eee:	fb00 f202 	mul.w	r2, r0, r2
 8017ef2:	1a9b      	subs	r3, r3, r2
 8017ef4:	440b      	add	r3, r1
 8017ef6:	6879      	ldr	r1, [r7, #4]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7ff fb0b 	bl	8017514 <st_dword>
			fs->wflag = 1;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	2201      	movs	r2, #1
 8017f02:	70da      	strb	r2, [r3, #3]
			break;
 8017f04:	e008      	b.n	8017f18 <put_fat+0x22e>
		}
	}
 8017f06:	bf00      	nop
 8017f08:	e006      	b.n	8017f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f0a:	bf00      	nop
 8017f0c:	e004      	b.n	8017f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f0e:	bf00      	nop
 8017f10:	e002      	b.n	8017f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f12:	bf00      	nop
 8017f14:	e000      	b.n	8017f18 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f16:	bf00      	nop
	return res;
 8017f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3724      	adds	r7, #36	; 0x24
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd90      	pop	{r4, r7, pc}

08017f22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017f22:	b580      	push	{r7, lr}
 8017f24:	b088      	sub	sp, #32
 8017f26:	af00      	add	r7, sp, #0
 8017f28:	60f8      	str	r0, [r7, #12]
 8017f2a:	60b9      	str	r1, [r7, #8]
 8017f2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	2b01      	cmp	r3, #1
 8017f3c:	d904      	bls.n	8017f48 <remove_chain+0x26>
 8017f3e:	69bb      	ldr	r3, [r7, #24]
 8017f40:	69db      	ldr	r3, [r3, #28]
 8017f42:	68ba      	ldr	r2, [r7, #8]
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d301      	bcc.n	8017f4c <remove_chain+0x2a>
 8017f48:	2302      	movs	r3, #2
 8017f4a:	e04b      	b.n	8017fe4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d00c      	beq.n	8017f6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017f52:	f04f 32ff 	mov.w	r2, #4294967295
 8017f56:	6879      	ldr	r1, [r7, #4]
 8017f58:	69b8      	ldr	r0, [r7, #24]
 8017f5a:	f7ff fec6 	bl	8017cea <put_fat>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017f62:	7ffb      	ldrb	r3, [r7, #31]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d001      	beq.n	8017f6c <remove_chain+0x4a>
 8017f68:	7ffb      	ldrb	r3, [r7, #31]
 8017f6a:	e03b      	b.n	8017fe4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017f6c:	68b9      	ldr	r1, [r7, #8]
 8017f6e:	68f8      	ldr	r0, [r7, #12]
 8017f70:	f7ff fde7 	bl	8017b42 <get_fat>
 8017f74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d031      	beq.n	8017fe0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	2b01      	cmp	r3, #1
 8017f80:	d101      	bne.n	8017f86 <remove_chain+0x64>
 8017f82:	2302      	movs	r3, #2
 8017f84:	e02e      	b.n	8017fe4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f8c:	d101      	bne.n	8017f92 <remove_chain+0x70>
 8017f8e:	2301      	movs	r3, #1
 8017f90:	e028      	b.n	8017fe4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017f92:	2200      	movs	r2, #0
 8017f94:	68b9      	ldr	r1, [r7, #8]
 8017f96:	69b8      	ldr	r0, [r7, #24]
 8017f98:	f7ff fea7 	bl	8017cea <put_fat>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017fa0:	7ffb      	ldrb	r3, [r7, #31]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d001      	beq.n	8017faa <remove_chain+0x88>
 8017fa6:	7ffb      	ldrb	r3, [r7, #31]
 8017fa8:	e01c      	b.n	8017fe4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017faa:	69bb      	ldr	r3, [r7, #24]
 8017fac:	699a      	ldr	r2, [r3, #24]
 8017fae:	69bb      	ldr	r3, [r7, #24]
 8017fb0:	69db      	ldr	r3, [r3, #28]
 8017fb2:	3b02      	subs	r3, #2
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	d20b      	bcs.n	8017fd0 <remove_chain+0xae>
			fs->free_clst++;
 8017fb8:	69bb      	ldr	r3, [r7, #24]
 8017fba:	699b      	ldr	r3, [r3, #24]
 8017fbc:	1c5a      	adds	r2, r3, #1
 8017fbe:	69bb      	ldr	r3, [r7, #24]
 8017fc0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8017fc2:	69bb      	ldr	r3, [r7, #24]
 8017fc4:	791b      	ldrb	r3, [r3, #4]
 8017fc6:	f043 0301 	orr.w	r3, r3, #1
 8017fca:	b2da      	uxtb	r2, r3
 8017fcc:	69bb      	ldr	r3, [r7, #24]
 8017fce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017fd0:	697b      	ldr	r3, [r7, #20]
 8017fd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017fd4:	69bb      	ldr	r3, [r7, #24]
 8017fd6:	69db      	ldr	r3, [r3, #28]
 8017fd8:	68ba      	ldr	r2, [r7, #8]
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d3c6      	bcc.n	8017f6c <remove_chain+0x4a>
 8017fde:	e000      	b.n	8017fe2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017fe0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017fe2:	2300      	movs	r3, #0
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3720      	adds	r7, #32
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}

08017fec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b088      	sub	sp, #32
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
 8017ff4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d10d      	bne.n	801801e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	695b      	ldr	r3, [r3, #20]
 8018006:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018008:	69bb      	ldr	r3, [r7, #24]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d004      	beq.n	8018018 <create_chain+0x2c>
 801800e:	693b      	ldr	r3, [r7, #16]
 8018010:	69db      	ldr	r3, [r3, #28]
 8018012:	69ba      	ldr	r2, [r7, #24]
 8018014:	429a      	cmp	r2, r3
 8018016:	d31b      	bcc.n	8018050 <create_chain+0x64>
 8018018:	2301      	movs	r3, #1
 801801a:	61bb      	str	r3, [r7, #24]
 801801c:	e018      	b.n	8018050 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801801e:	6839      	ldr	r1, [r7, #0]
 8018020:	6878      	ldr	r0, [r7, #4]
 8018022:	f7ff fd8e 	bl	8017b42 <get_fat>
 8018026:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2b01      	cmp	r3, #1
 801802c:	d801      	bhi.n	8018032 <create_chain+0x46>
 801802e:	2301      	movs	r3, #1
 8018030:	e070      	b.n	8018114 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018038:	d101      	bne.n	801803e <create_chain+0x52>
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	e06a      	b.n	8018114 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	69db      	ldr	r3, [r3, #28]
 8018042:	68fa      	ldr	r2, [r7, #12]
 8018044:	429a      	cmp	r2, r3
 8018046:	d201      	bcs.n	801804c <create_chain+0x60>
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	e063      	b.n	8018114 <create_chain+0x128>
		scl = clst;
 801804c:	683b      	ldr	r3, [r7, #0]
 801804e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8018050:	69bb      	ldr	r3, [r7, #24]
 8018052:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	3301      	adds	r3, #1
 8018058:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	69db      	ldr	r3, [r3, #28]
 801805e:	69fa      	ldr	r2, [r7, #28]
 8018060:	429a      	cmp	r2, r3
 8018062:	d307      	bcc.n	8018074 <create_chain+0x88>
				ncl = 2;
 8018064:	2302      	movs	r3, #2
 8018066:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8018068:	69fa      	ldr	r2, [r7, #28]
 801806a:	69bb      	ldr	r3, [r7, #24]
 801806c:	429a      	cmp	r2, r3
 801806e:	d901      	bls.n	8018074 <create_chain+0x88>
 8018070:	2300      	movs	r3, #0
 8018072:	e04f      	b.n	8018114 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018074:	69f9      	ldr	r1, [r7, #28]
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f7ff fd63 	bl	8017b42 <get_fat>
 801807c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d00e      	beq.n	80180a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	2b01      	cmp	r3, #1
 8018088:	d003      	beq.n	8018092 <create_chain+0xa6>
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018090:	d101      	bne.n	8018096 <create_chain+0xaa>
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	e03e      	b.n	8018114 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018096:	69fa      	ldr	r2, [r7, #28]
 8018098:	69bb      	ldr	r3, [r7, #24]
 801809a:	429a      	cmp	r2, r3
 801809c:	d1da      	bne.n	8018054 <create_chain+0x68>
 801809e:	2300      	movs	r3, #0
 80180a0:	e038      	b.n	8018114 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80180a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80180a4:	f04f 32ff 	mov.w	r2, #4294967295
 80180a8:	69f9      	ldr	r1, [r7, #28]
 80180aa:	6938      	ldr	r0, [r7, #16]
 80180ac:	f7ff fe1d 	bl	8017cea <put_fat>
 80180b0:	4603      	mov	r3, r0
 80180b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80180b4:	7dfb      	ldrb	r3, [r7, #23]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d109      	bne.n	80180ce <create_chain+0xe2>
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d006      	beq.n	80180ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80180c0:	69fa      	ldr	r2, [r7, #28]
 80180c2:	6839      	ldr	r1, [r7, #0]
 80180c4:	6938      	ldr	r0, [r7, #16]
 80180c6:	f7ff fe10 	bl	8017cea <put_fat>
 80180ca:	4603      	mov	r3, r0
 80180cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80180ce:	7dfb      	ldrb	r3, [r7, #23]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d116      	bne.n	8018102 <create_chain+0x116>
		fs->last_clst = ncl;
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	69fa      	ldr	r2, [r7, #28]
 80180d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	699a      	ldr	r2, [r3, #24]
 80180de:	693b      	ldr	r3, [r7, #16]
 80180e0:	69db      	ldr	r3, [r3, #28]
 80180e2:	3b02      	subs	r3, #2
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d804      	bhi.n	80180f2 <create_chain+0x106>
 80180e8:	693b      	ldr	r3, [r7, #16]
 80180ea:	699b      	ldr	r3, [r3, #24]
 80180ec:	1e5a      	subs	r2, r3, #1
 80180ee:	693b      	ldr	r3, [r7, #16]
 80180f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	791b      	ldrb	r3, [r3, #4]
 80180f6:	f043 0301 	orr.w	r3, r3, #1
 80180fa:	b2da      	uxtb	r2, r3
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	711a      	strb	r2, [r3, #4]
 8018100:	e007      	b.n	8018112 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018102:	7dfb      	ldrb	r3, [r7, #23]
 8018104:	2b01      	cmp	r3, #1
 8018106:	d102      	bne.n	801810e <create_chain+0x122>
 8018108:	f04f 33ff 	mov.w	r3, #4294967295
 801810c:	e000      	b.n	8018110 <create_chain+0x124>
 801810e:	2301      	movs	r3, #1
 8018110:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8018112:	69fb      	ldr	r3, [r7, #28]
}
 8018114:	4618      	mov	r0, r3
 8018116:	3720      	adds	r7, #32
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}

0801811c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801811c:	b480      	push	{r7}
 801811e:	b087      	sub	sp, #28
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
 8018124:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018130:	3304      	adds	r3, #4
 8018132:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	899b      	ldrh	r3, [r3, #12]
 8018138:	461a      	mov	r2, r3
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018140:	68fa      	ldr	r2, [r7, #12]
 8018142:	8952      	ldrh	r2, [r2, #10]
 8018144:	fbb3 f3f2 	udiv	r3, r3, r2
 8018148:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801814a:	693b      	ldr	r3, [r7, #16]
 801814c:	1d1a      	adds	r2, r3, #4
 801814e:	613a      	str	r2, [r7, #16]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d101      	bne.n	801815e <clmt_clust+0x42>
 801815a:	2300      	movs	r3, #0
 801815c:	e010      	b.n	8018180 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801815e:	697a      	ldr	r2, [r7, #20]
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	429a      	cmp	r2, r3
 8018164:	d307      	bcc.n	8018176 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8018166:	697a      	ldr	r2, [r7, #20]
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	1ad3      	subs	r3, r2, r3
 801816c:	617b      	str	r3, [r7, #20]
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	3304      	adds	r3, #4
 8018172:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018174:	e7e9      	b.n	801814a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8018176:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8018178:	693b      	ldr	r3, [r7, #16]
 801817a:	681a      	ldr	r2, [r3, #0]
 801817c:	697b      	ldr	r3, [r7, #20]
 801817e:	4413      	add	r3, r2
}
 8018180:	4618      	mov	r0, r3
 8018182:	371c      	adds	r7, #28
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr

0801818c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b086      	sub	sp, #24
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80181a2:	d204      	bcs.n	80181ae <dir_sdi+0x22>
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	f003 031f 	and.w	r3, r3, #31
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d001      	beq.n	80181b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80181ae:	2302      	movs	r3, #2
 80181b0:	e071      	b.n	8018296 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	683a      	ldr	r2, [r7, #0]
 80181b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	689b      	ldr	r3, [r3, #8]
 80181bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80181be:	697b      	ldr	r3, [r7, #20]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d106      	bne.n	80181d2 <dir_sdi+0x46>
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	2b02      	cmp	r3, #2
 80181ca:	d902      	bls.n	80181d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80181d2:	697b      	ldr	r3, [r7, #20]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d10c      	bne.n	80181f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	095b      	lsrs	r3, r3, #5
 80181dc:	693a      	ldr	r2, [r7, #16]
 80181de:	8912      	ldrh	r2, [r2, #8]
 80181e0:	4293      	cmp	r3, r2
 80181e2:	d301      	bcc.n	80181e8 <dir_sdi+0x5c>
 80181e4:	2302      	movs	r3, #2
 80181e6:	e056      	b.n	8018296 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80181e8:	693b      	ldr	r3, [r7, #16]
 80181ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	61da      	str	r2, [r3, #28]
 80181f0:	e02d      	b.n	801824e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	895b      	ldrh	r3, [r3, #10]
 80181f6:	461a      	mov	r2, r3
 80181f8:	693b      	ldr	r3, [r7, #16]
 80181fa:	899b      	ldrh	r3, [r3, #12]
 80181fc:	fb02 f303 	mul.w	r3, r2, r3
 8018200:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018202:	e019      	b.n	8018238 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6979      	ldr	r1, [r7, #20]
 8018208:	4618      	mov	r0, r3
 801820a:	f7ff fc9a 	bl	8017b42 <get_fat>
 801820e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018210:	697b      	ldr	r3, [r7, #20]
 8018212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018216:	d101      	bne.n	801821c <dir_sdi+0x90>
 8018218:	2301      	movs	r3, #1
 801821a:	e03c      	b.n	8018296 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	2b01      	cmp	r3, #1
 8018220:	d904      	bls.n	801822c <dir_sdi+0xa0>
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	69db      	ldr	r3, [r3, #28]
 8018226:	697a      	ldr	r2, [r7, #20]
 8018228:	429a      	cmp	r2, r3
 801822a:	d301      	bcc.n	8018230 <dir_sdi+0xa4>
 801822c:	2302      	movs	r3, #2
 801822e:	e032      	b.n	8018296 <dir_sdi+0x10a>
			ofs -= csz;
 8018230:	683a      	ldr	r2, [r7, #0]
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	1ad3      	subs	r3, r2, r3
 8018236:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018238:	683a      	ldr	r2, [r7, #0]
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	429a      	cmp	r2, r3
 801823e:	d2e1      	bcs.n	8018204 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8018240:	6979      	ldr	r1, [r7, #20]
 8018242:	6938      	ldr	r0, [r7, #16]
 8018244:	f7ff fc5e 	bl	8017b04 <clust2sect>
 8018248:	4602      	mov	r2, r0
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	697a      	ldr	r2, [r7, #20]
 8018252:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	69db      	ldr	r3, [r3, #28]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d101      	bne.n	8018260 <dir_sdi+0xd4>
 801825c:	2302      	movs	r3, #2
 801825e:	e01a      	b.n	8018296 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	69da      	ldr	r2, [r3, #28]
 8018264:	693b      	ldr	r3, [r7, #16]
 8018266:	899b      	ldrh	r3, [r3, #12]
 8018268:	4619      	mov	r1, r3
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018270:	441a      	add	r2, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018276:	693b      	ldr	r3, [r7, #16]
 8018278:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801827c:	693b      	ldr	r3, [r7, #16]
 801827e:	899b      	ldrh	r3, [r3, #12]
 8018280:	461a      	mov	r2, r3
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	fbb3 f0f2 	udiv	r0, r3, r2
 8018288:	fb00 f202 	mul.w	r2, r0, r2
 801828c:	1a9b      	subs	r3, r3, r2
 801828e:	18ca      	adds	r2, r1, r3
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018294:	2300      	movs	r3, #0
}
 8018296:	4618      	mov	r0, r3
 8018298:	3718      	adds	r7, #24
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}

0801829e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801829e:	b580      	push	{r7, lr}
 80182a0:	b086      	sub	sp, #24
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	6078      	str	r0, [r7, #4]
 80182a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	695b      	ldr	r3, [r3, #20]
 80182b2:	3320      	adds	r3, #32
 80182b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	69db      	ldr	r3, [r3, #28]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d003      	beq.n	80182c6 <dir_next+0x28>
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80182c4:	d301      	bcc.n	80182ca <dir_next+0x2c>
 80182c6:	2304      	movs	r3, #4
 80182c8:	e0bb      	b.n	8018442 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	899b      	ldrh	r3, [r3, #12]
 80182ce:	461a      	mov	r2, r3
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80182d6:	fb01 f202 	mul.w	r2, r1, r2
 80182da:	1a9b      	subs	r3, r3, r2
 80182dc:	2b00      	cmp	r3, #0
 80182de:	f040 809d 	bne.w	801841c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	69db      	ldr	r3, [r3, #28]
 80182e6:	1c5a      	adds	r2, r3, #1
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	699b      	ldr	r3, [r3, #24]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d10b      	bne.n	801830c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	095b      	lsrs	r3, r3, #5
 80182f8:	68fa      	ldr	r2, [r7, #12]
 80182fa:	8912      	ldrh	r2, [r2, #8]
 80182fc:	4293      	cmp	r3, r2
 80182fe:	f0c0 808d 	bcc.w	801841c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2200      	movs	r2, #0
 8018306:	61da      	str	r2, [r3, #28]
 8018308:	2304      	movs	r3, #4
 801830a:	e09a      	b.n	8018442 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	899b      	ldrh	r3, [r3, #12]
 8018310:	461a      	mov	r2, r3
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	fbb3 f3f2 	udiv	r3, r3, r2
 8018318:	68fa      	ldr	r2, [r7, #12]
 801831a:	8952      	ldrh	r2, [r2, #10]
 801831c:	3a01      	subs	r2, #1
 801831e:	4013      	ands	r3, r2
 8018320:	2b00      	cmp	r3, #0
 8018322:	d17b      	bne.n	801841c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	699b      	ldr	r3, [r3, #24]
 801832a:	4619      	mov	r1, r3
 801832c:	4610      	mov	r0, r2
 801832e:	f7ff fc08 	bl	8017b42 <get_fat>
 8018332:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018334:	697b      	ldr	r3, [r7, #20]
 8018336:	2b01      	cmp	r3, #1
 8018338:	d801      	bhi.n	801833e <dir_next+0xa0>
 801833a:	2302      	movs	r3, #2
 801833c:	e081      	b.n	8018442 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018344:	d101      	bne.n	801834a <dir_next+0xac>
 8018346:	2301      	movs	r3, #1
 8018348:	e07b      	b.n	8018442 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	69db      	ldr	r3, [r3, #28]
 801834e:	697a      	ldr	r2, [r7, #20]
 8018350:	429a      	cmp	r2, r3
 8018352:	d359      	bcc.n	8018408 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d104      	bne.n	8018364 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2200      	movs	r2, #0
 801835e:	61da      	str	r2, [r3, #28]
 8018360:	2304      	movs	r3, #4
 8018362:	e06e      	b.n	8018442 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	699b      	ldr	r3, [r3, #24]
 801836a:	4619      	mov	r1, r3
 801836c:	4610      	mov	r0, r2
 801836e:	f7ff fe3d 	bl	8017fec <create_chain>
 8018372:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018374:	697b      	ldr	r3, [r7, #20]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d101      	bne.n	801837e <dir_next+0xe0>
 801837a:	2307      	movs	r3, #7
 801837c:	e061      	b.n	8018442 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801837e:	697b      	ldr	r3, [r7, #20]
 8018380:	2b01      	cmp	r3, #1
 8018382:	d101      	bne.n	8018388 <dir_next+0xea>
 8018384:	2302      	movs	r3, #2
 8018386:	e05c      	b.n	8018442 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018388:	697b      	ldr	r3, [r7, #20]
 801838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801838e:	d101      	bne.n	8018394 <dir_next+0xf6>
 8018390:	2301      	movs	r3, #1
 8018392:	e056      	b.n	8018442 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018394:	68f8      	ldr	r0, [r7, #12]
 8018396:	f7ff fad3 	bl	8017940 <sync_window>
 801839a:	4603      	mov	r3, r0
 801839c:	2b00      	cmp	r3, #0
 801839e:	d001      	beq.n	80183a4 <dir_next+0x106>
 80183a0:	2301      	movs	r3, #1
 80183a2:	e04e      	b.n	8018442 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	899b      	ldrh	r3, [r3, #12]
 80183ae:	461a      	mov	r2, r3
 80183b0:	2100      	movs	r1, #0
 80183b2:	f7ff f8fc 	bl	80175ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80183b6:	2300      	movs	r3, #0
 80183b8:	613b      	str	r3, [r7, #16]
 80183ba:	6979      	ldr	r1, [r7, #20]
 80183bc:	68f8      	ldr	r0, [r7, #12]
 80183be:	f7ff fba1 	bl	8017b04 <clust2sect>
 80183c2:	4602      	mov	r2, r0
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	635a      	str	r2, [r3, #52]	; 0x34
 80183c8:	e012      	b.n	80183f0 <dir_next+0x152>
						fs->wflag = 1;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	2201      	movs	r2, #1
 80183ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80183d0:	68f8      	ldr	r0, [r7, #12]
 80183d2:	f7ff fab5 	bl	8017940 <sync_window>
 80183d6:	4603      	mov	r3, r0
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d001      	beq.n	80183e0 <dir_next+0x142>
 80183dc:	2301      	movs	r3, #1
 80183de:	e030      	b.n	8018442 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80183e0:	693b      	ldr	r3, [r7, #16]
 80183e2:	3301      	adds	r3, #1
 80183e4:	613b      	str	r3, [r7, #16]
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183ea:	1c5a      	adds	r2, r3, #1
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	635a      	str	r2, [r3, #52]	; 0x34
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	895b      	ldrh	r3, [r3, #10]
 80183f4:	461a      	mov	r2, r3
 80183f6:	693b      	ldr	r3, [r7, #16]
 80183f8:	4293      	cmp	r3, r2
 80183fa:	d3e6      	bcc.n	80183ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018400:	693b      	ldr	r3, [r7, #16]
 8018402:	1ad2      	subs	r2, r2, r3
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	697a      	ldr	r2, [r7, #20]
 801840c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801840e:	6979      	ldr	r1, [r7, #20]
 8018410:	68f8      	ldr	r0, [r7, #12]
 8018412:	f7ff fb77 	bl	8017b04 <clust2sect>
 8018416:	4602      	mov	r2, r0
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	68ba      	ldr	r2, [r7, #8]
 8018420:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	899b      	ldrh	r3, [r3, #12]
 801842c:	461a      	mov	r2, r3
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	fbb3 f0f2 	udiv	r0, r3, r2
 8018434:	fb00 f202 	mul.w	r2, r0, r2
 8018438:	1a9b      	subs	r3, r3, r2
 801843a:	18ca      	adds	r2, r1, r3
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018440:	2300      	movs	r3, #0
}
 8018442:	4618      	mov	r0, r3
 8018444:	3718      	adds	r7, #24
 8018446:	46bd      	mov	sp, r7
 8018448:	bd80      	pop	{r7, pc}

0801844a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801844a:	b580      	push	{r7, lr}
 801844c:	b086      	sub	sp, #24
 801844e:	af00      	add	r7, sp, #0
 8018450:	6078      	str	r0, [r7, #4]
 8018452:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801845a:	2100      	movs	r1, #0
 801845c:	6878      	ldr	r0, [r7, #4]
 801845e:	f7ff fe95 	bl	801818c <dir_sdi>
 8018462:	4603      	mov	r3, r0
 8018464:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018466:	7dfb      	ldrb	r3, [r7, #23]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d12b      	bne.n	80184c4 <dir_alloc+0x7a>
		n = 0;
 801846c:	2300      	movs	r3, #0
 801846e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	69db      	ldr	r3, [r3, #28]
 8018474:	4619      	mov	r1, r3
 8018476:	68f8      	ldr	r0, [r7, #12]
 8018478:	f7ff faa6 	bl	80179c8 <move_window>
 801847c:	4603      	mov	r3, r0
 801847e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018480:	7dfb      	ldrb	r3, [r7, #23]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d11d      	bne.n	80184c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	6a1b      	ldr	r3, [r3, #32]
 801848a:	781b      	ldrb	r3, [r3, #0]
 801848c:	2be5      	cmp	r3, #229	; 0xe5
 801848e:	d004      	beq.n	801849a <dir_alloc+0x50>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6a1b      	ldr	r3, [r3, #32]
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d107      	bne.n	80184aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801849a:	693b      	ldr	r3, [r7, #16]
 801849c:	3301      	adds	r3, #1
 801849e:	613b      	str	r3, [r7, #16]
 80184a0:	693a      	ldr	r2, [r7, #16]
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d102      	bne.n	80184ae <dir_alloc+0x64>
 80184a8:	e00c      	b.n	80184c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80184aa:	2300      	movs	r3, #0
 80184ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80184ae:	2101      	movs	r1, #1
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f7ff fef4 	bl	801829e <dir_next>
 80184b6:	4603      	mov	r3, r0
 80184b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80184ba:	7dfb      	ldrb	r3, [r7, #23]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d0d7      	beq.n	8018470 <dir_alloc+0x26>
 80184c0:	e000      	b.n	80184c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80184c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80184c4:	7dfb      	ldrb	r3, [r7, #23]
 80184c6:	2b04      	cmp	r3, #4
 80184c8:	d101      	bne.n	80184ce <dir_alloc+0x84>
 80184ca:	2307      	movs	r3, #7
 80184cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80184ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80184d0:	4618      	mov	r0, r3
 80184d2:	3718      	adds	r7, #24
 80184d4:	46bd      	mov	sp, r7
 80184d6:	bd80      	pop	{r7, pc}

080184d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b084      	sub	sp, #16
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
 80184e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80184e2:	683b      	ldr	r3, [r7, #0]
 80184e4:	331a      	adds	r3, #26
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7fe ffbe 	bl	8017468 <ld_word>
 80184ec:	4603      	mov	r3, r0
 80184ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	2b03      	cmp	r3, #3
 80184f6:	d109      	bne.n	801850c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	3314      	adds	r3, #20
 80184fc:	4618      	mov	r0, r3
 80184fe:	f7fe ffb3 	bl	8017468 <ld_word>
 8018502:	4603      	mov	r3, r0
 8018504:	041b      	lsls	r3, r3, #16
 8018506:	68fa      	ldr	r2, [r7, #12]
 8018508:	4313      	orrs	r3, r2
 801850a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801850c:	68fb      	ldr	r3, [r7, #12]
}
 801850e:	4618      	mov	r0, r3
 8018510:	3710      	adds	r7, #16
 8018512:	46bd      	mov	sp, r7
 8018514:	bd80      	pop	{r7, pc}

08018516 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018516:	b580      	push	{r7, lr}
 8018518:	b084      	sub	sp, #16
 801851a:	af00      	add	r7, sp, #0
 801851c:	60f8      	str	r0, [r7, #12]
 801851e:	60b9      	str	r1, [r7, #8]
 8018520:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	331a      	adds	r3, #26
 8018526:	687a      	ldr	r2, [r7, #4]
 8018528:	b292      	uxth	r2, r2
 801852a:	4611      	mov	r1, r2
 801852c:	4618      	mov	r0, r3
 801852e:	f7fe ffd6 	bl	80174de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	2b03      	cmp	r3, #3
 8018538:	d109      	bne.n	801854e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	f103 0214 	add.w	r2, r3, #20
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	0c1b      	lsrs	r3, r3, #16
 8018544:	b29b      	uxth	r3, r3
 8018546:	4619      	mov	r1, r3
 8018548:	4610      	mov	r0, r2
 801854a:	f7fe ffc8 	bl	80174de <st_word>
	}
}
 801854e:	bf00      	nop
 8018550:	3710      	adds	r7, #16
 8018552:	46bd      	mov	sp, r7
 8018554:	bd80      	pop	{r7, pc}
	...

08018558 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018558:	b590      	push	{r4, r7, lr}
 801855a:	b087      	sub	sp, #28
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	331a      	adds	r3, #26
 8018566:	4618      	mov	r0, r3
 8018568:	f7fe ff7e 	bl	8017468 <ld_word>
 801856c:	4603      	mov	r3, r0
 801856e:	2b00      	cmp	r3, #0
 8018570:	d001      	beq.n	8018576 <cmp_lfn+0x1e>
 8018572:	2300      	movs	r3, #0
 8018574:	e059      	b.n	801862a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	781b      	ldrb	r3, [r3, #0]
 801857a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801857e:	1e5a      	subs	r2, r3, #1
 8018580:	4613      	mov	r3, r2
 8018582:	005b      	lsls	r3, r3, #1
 8018584:	4413      	add	r3, r2
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	4413      	add	r3, r2
 801858a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801858c:	2301      	movs	r3, #1
 801858e:	81fb      	strh	r3, [r7, #14]
 8018590:	2300      	movs	r3, #0
 8018592:	613b      	str	r3, [r7, #16]
 8018594:	e033      	b.n	80185fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018596:	4a27      	ldr	r2, [pc, #156]	; (8018634 <cmp_lfn+0xdc>)
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	4413      	add	r3, r2
 801859c:	781b      	ldrb	r3, [r3, #0]
 801859e:	461a      	mov	r2, r3
 80185a0:	683b      	ldr	r3, [r7, #0]
 80185a2:	4413      	add	r3, r2
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7fe ff5f 	bl	8017468 <ld_word>
 80185aa:	4603      	mov	r3, r0
 80185ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80185ae:	89fb      	ldrh	r3, [r7, #14]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d01a      	beq.n	80185ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	2bfe      	cmp	r3, #254	; 0xfe
 80185b8:	d812      	bhi.n	80185e0 <cmp_lfn+0x88>
 80185ba:	89bb      	ldrh	r3, [r7, #12]
 80185bc:	4618      	mov	r0, r3
 80185be:	f001 fe11 	bl	801a1e4 <ff_wtoupper>
 80185c2:	4603      	mov	r3, r0
 80185c4:	461c      	mov	r4, r3
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	1c5a      	adds	r2, r3, #1
 80185ca:	617a      	str	r2, [r7, #20]
 80185cc:	005b      	lsls	r3, r3, #1
 80185ce:	687a      	ldr	r2, [r7, #4]
 80185d0:	4413      	add	r3, r2
 80185d2:	881b      	ldrh	r3, [r3, #0]
 80185d4:	4618      	mov	r0, r3
 80185d6:	f001 fe05 	bl	801a1e4 <ff_wtoupper>
 80185da:	4603      	mov	r3, r0
 80185dc:	429c      	cmp	r4, r3
 80185de:	d001      	beq.n	80185e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80185e0:	2300      	movs	r3, #0
 80185e2:	e022      	b.n	801862a <cmp_lfn+0xd2>
			}
			wc = uc;
 80185e4:	89bb      	ldrh	r3, [r7, #12]
 80185e6:	81fb      	strh	r3, [r7, #14]
 80185e8:	e006      	b.n	80185f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80185ea:	89bb      	ldrh	r3, [r7, #12]
 80185ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185f0:	4293      	cmp	r3, r2
 80185f2:	d001      	beq.n	80185f8 <cmp_lfn+0xa0>
 80185f4:	2300      	movs	r3, #0
 80185f6:	e018      	b.n	801862a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	3301      	adds	r3, #1
 80185fc:	613b      	str	r3, [r7, #16]
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	2b0c      	cmp	r3, #12
 8018602:	d9c8      	bls.n	8018596 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	781b      	ldrb	r3, [r3, #0]
 8018608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801860c:	2b00      	cmp	r3, #0
 801860e:	d00b      	beq.n	8018628 <cmp_lfn+0xd0>
 8018610:	89fb      	ldrh	r3, [r7, #14]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d008      	beq.n	8018628 <cmp_lfn+0xd0>
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	005b      	lsls	r3, r3, #1
 801861a:	687a      	ldr	r2, [r7, #4]
 801861c:	4413      	add	r3, r2
 801861e:	881b      	ldrh	r3, [r3, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d001      	beq.n	8018628 <cmp_lfn+0xd0>
 8018624:	2300      	movs	r3, #0
 8018626:	e000      	b.n	801862a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018628:	2301      	movs	r3, #1
}
 801862a:	4618      	mov	r0, r3
 801862c:	371c      	adds	r7, #28
 801862e:	46bd      	mov	sp, r7
 8018630:	bd90      	pop	{r4, r7, pc}
 8018632:	bf00      	nop
 8018634:	0801f9d0 	.word	0x0801f9d0

08018638 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b088      	sub	sp, #32
 801863c:	af00      	add	r7, sp, #0
 801863e:	60f8      	str	r0, [r7, #12]
 8018640:	60b9      	str	r1, [r7, #8]
 8018642:	4611      	mov	r1, r2
 8018644:	461a      	mov	r2, r3
 8018646:	460b      	mov	r3, r1
 8018648:	71fb      	strb	r3, [r7, #7]
 801864a:	4613      	mov	r3, r2
 801864c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801864e:	68bb      	ldr	r3, [r7, #8]
 8018650:	330d      	adds	r3, #13
 8018652:	79ba      	ldrb	r2, [r7, #6]
 8018654:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	330b      	adds	r3, #11
 801865a:	220f      	movs	r2, #15
 801865c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801865e:	68bb      	ldr	r3, [r7, #8]
 8018660:	330c      	adds	r3, #12
 8018662:	2200      	movs	r2, #0
 8018664:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	331a      	adds	r3, #26
 801866a:	2100      	movs	r1, #0
 801866c:	4618      	mov	r0, r3
 801866e:	f7fe ff36 	bl	80174de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018672:	79fb      	ldrb	r3, [r7, #7]
 8018674:	1e5a      	subs	r2, r3, #1
 8018676:	4613      	mov	r3, r2
 8018678:	005b      	lsls	r3, r3, #1
 801867a:	4413      	add	r3, r2
 801867c:	009b      	lsls	r3, r3, #2
 801867e:	4413      	add	r3, r2
 8018680:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018682:	2300      	movs	r3, #0
 8018684:	82fb      	strh	r3, [r7, #22]
 8018686:	2300      	movs	r3, #0
 8018688:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801868a:	8afb      	ldrh	r3, [r7, #22]
 801868c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018690:	4293      	cmp	r3, r2
 8018692:	d007      	beq.n	80186a4 <put_lfn+0x6c>
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	1c5a      	adds	r2, r3, #1
 8018698:	61fa      	str	r2, [r7, #28]
 801869a:	005b      	lsls	r3, r3, #1
 801869c:	68fa      	ldr	r2, [r7, #12]
 801869e:	4413      	add	r3, r2
 80186a0:	881b      	ldrh	r3, [r3, #0]
 80186a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80186a4:	4a17      	ldr	r2, [pc, #92]	; (8018704 <put_lfn+0xcc>)
 80186a6:	69bb      	ldr	r3, [r7, #24]
 80186a8:	4413      	add	r3, r2
 80186aa:	781b      	ldrb	r3, [r3, #0]
 80186ac:	461a      	mov	r2, r3
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	4413      	add	r3, r2
 80186b2:	8afa      	ldrh	r2, [r7, #22]
 80186b4:	4611      	mov	r1, r2
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7fe ff11 	bl	80174de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80186bc:	8afb      	ldrh	r3, [r7, #22]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d102      	bne.n	80186c8 <put_lfn+0x90>
 80186c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80186c8:	69bb      	ldr	r3, [r7, #24]
 80186ca:	3301      	adds	r3, #1
 80186cc:	61bb      	str	r3, [r7, #24]
 80186ce:	69bb      	ldr	r3, [r7, #24]
 80186d0:	2b0c      	cmp	r3, #12
 80186d2:	d9da      	bls.n	801868a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80186d4:	8afb      	ldrh	r3, [r7, #22]
 80186d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186da:	4293      	cmp	r3, r2
 80186dc:	d006      	beq.n	80186ec <put_lfn+0xb4>
 80186de:	69fb      	ldr	r3, [r7, #28]
 80186e0:	005b      	lsls	r3, r3, #1
 80186e2:	68fa      	ldr	r2, [r7, #12]
 80186e4:	4413      	add	r3, r2
 80186e6:	881b      	ldrh	r3, [r3, #0]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d103      	bne.n	80186f4 <put_lfn+0xbc>
 80186ec:	79fb      	ldrb	r3, [r7, #7]
 80186ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	79fa      	ldrb	r2, [r7, #7]
 80186f8:	701a      	strb	r2, [r3, #0]
}
 80186fa:	bf00      	nop
 80186fc:	3720      	adds	r7, #32
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
 8018702:	bf00      	nop
 8018704:	0801f9d0 	.word	0x0801f9d0

08018708 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b08c      	sub	sp, #48	; 0x30
 801870c:	af00      	add	r7, sp, #0
 801870e:	60f8      	str	r0, [r7, #12]
 8018710:	60b9      	str	r1, [r7, #8]
 8018712:	607a      	str	r2, [r7, #4]
 8018714:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018716:	220b      	movs	r2, #11
 8018718:	68b9      	ldr	r1, [r7, #8]
 801871a:	68f8      	ldr	r0, [r7, #12]
 801871c:	f7fe ff26 	bl	801756c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018720:	683b      	ldr	r3, [r7, #0]
 8018722:	2b05      	cmp	r3, #5
 8018724:	d929      	bls.n	801877a <gen_numname+0x72>
		sr = seq;
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801872a:	e020      	b.n	801876e <gen_numname+0x66>
			wc = *lfn++;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	1c9a      	adds	r2, r3, #2
 8018730:	607a      	str	r2, [r7, #4]
 8018732:	881b      	ldrh	r3, [r3, #0]
 8018734:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018736:	2300      	movs	r3, #0
 8018738:	62bb      	str	r3, [r7, #40]	; 0x28
 801873a:	e015      	b.n	8018768 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	005a      	lsls	r2, r3, #1
 8018740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018742:	f003 0301 	and.w	r3, r3, #1
 8018746:	4413      	add	r3, r2
 8018748:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801874a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801874c:	085b      	lsrs	r3, r3, #1
 801874e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018756:	2b00      	cmp	r3, #0
 8018758:	d003      	beq.n	8018762 <gen_numname+0x5a>
 801875a:	69fa      	ldr	r2, [r7, #28]
 801875c:	4b30      	ldr	r3, [pc, #192]	; (8018820 <gen_numname+0x118>)
 801875e:	4053      	eors	r3, r2
 8018760:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8018762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018764:	3301      	adds	r3, #1
 8018766:	62bb      	str	r3, [r7, #40]	; 0x28
 8018768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801876a:	2b0f      	cmp	r3, #15
 801876c:	d9e6      	bls.n	801873c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	881b      	ldrh	r3, [r3, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d1da      	bne.n	801872c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801877a:	2307      	movs	r3, #7
 801877c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	b2db      	uxtb	r3, r3
 8018782:	f003 030f 	and.w	r3, r3, #15
 8018786:	b2db      	uxtb	r3, r3
 8018788:	3330      	adds	r3, #48	; 0x30
 801878a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801878e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018792:	2b39      	cmp	r3, #57	; 0x39
 8018794:	d904      	bls.n	80187a0 <gen_numname+0x98>
 8018796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801879a:	3307      	adds	r3, #7
 801879c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80187a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a2:	1e5a      	subs	r2, r3, #1
 80187a4:	62ba      	str	r2, [r7, #40]	; 0x28
 80187a6:	3330      	adds	r3, #48	; 0x30
 80187a8:	443b      	add	r3, r7
 80187aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80187ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	091b      	lsrs	r3, r3, #4
 80187b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d1df      	bne.n	801877e <gen_numname+0x76>
	ns[i] = '~';
 80187be:	f107 0214 	add.w	r2, r7, #20
 80187c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c4:	4413      	add	r3, r2
 80187c6:	227e      	movs	r2, #126	; 0x7e
 80187c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80187ca:	2300      	movs	r3, #0
 80187cc:	627b      	str	r3, [r7, #36]	; 0x24
 80187ce:	e002      	b.n	80187d6 <gen_numname+0xce>
 80187d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d2:	3301      	adds	r3, #1
 80187d4:	627b      	str	r3, [r7, #36]	; 0x24
 80187d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187da:	429a      	cmp	r2, r3
 80187dc:	d205      	bcs.n	80187ea <gen_numname+0xe2>
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	4413      	add	r3, r2
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	2b20      	cmp	r3, #32
 80187e8:	d1f2      	bne.n	80187d0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80187ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ec:	2b07      	cmp	r3, #7
 80187ee:	d807      	bhi.n	8018800 <gen_numname+0xf8>
 80187f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f2:	1c5a      	adds	r2, r3, #1
 80187f4:	62ba      	str	r2, [r7, #40]	; 0x28
 80187f6:	3330      	adds	r3, #48	; 0x30
 80187f8:	443b      	add	r3, r7
 80187fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80187fe:	e000      	b.n	8018802 <gen_numname+0xfa>
 8018800:	2120      	movs	r1, #32
 8018802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018804:	1c5a      	adds	r2, r3, #1
 8018806:	627a      	str	r2, [r7, #36]	; 0x24
 8018808:	68fa      	ldr	r2, [r7, #12]
 801880a:	4413      	add	r3, r2
 801880c:	460a      	mov	r2, r1
 801880e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8018810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018812:	2b07      	cmp	r3, #7
 8018814:	d9e9      	bls.n	80187ea <gen_numname+0xe2>
}
 8018816:	bf00      	nop
 8018818:	bf00      	nop
 801881a:	3730      	adds	r7, #48	; 0x30
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}
 8018820:	00011021 	.word	0x00011021

08018824 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018824:	b480      	push	{r7}
 8018826:	b085      	sub	sp, #20
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801882c:	2300      	movs	r3, #0
 801882e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018830:	230b      	movs	r3, #11
 8018832:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018834:	7bfb      	ldrb	r3, [r7, #15]
 8018836:	b2da      	uxtb	r2, r3
 8018838:	0852      	lsrs	r2, r2, #1
 801883a:	01db      	lsls	r3, r3, #7
 801883c:	4313      	orrs	r3, r2
 801883e:	b2da      	uxtb	r2, r3
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	1c59      	adds	r1, r3, #1
 8018844:	6079      	str	r1, [r7, #4]
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	4413      	add	r3, r2
 801884a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801884c:	68bb      	ldr	r3, [r7, #8]
 801884e:	3b01      	subs	r3, #1
 8018850:	60bb      	str	r3, [r7, #8]
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d1ed      	bne.n	8018834 <sum_sfn+0x10>
	return sum;
 8018858:	7bfb      	ldrb	r3, [r7, #15]
}
 801885a:	4618      	mov	r0, r3
 801885c:	3714      	adds	r7, #20
 801885e:	46bd      	mov	sp, r7
 8018860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018864:	4770      	bx	lr

08018866 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8018866:	b580      	push	{r7, lr}
 8018868:	b086      	sub	sp, #24
 801886a:	af00      	add	r7, sp, #0
 801886c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018874:	2100      	movs	r1, #0
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f7ff fc88 	bl	801818c <dir_sdi>
 801887c:	4603      	mov	r3, r0
 801887e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018880:	7dfb      	ldrb	r3, [r7, #23]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d001      	beq.n	801888a <dir_find+0x24>
 8018886:	7dfb      	ldrb	r3, [r7, #23]
 8018888:	e0a9      	b.n	80189de <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801888a:	23ff      	movs	r3, #255	; 0xff
 801888c:	753b      	strb	r3, [r7, #20]
 801888e:	7d3b      	ldrb	r3, [r7, #20]
 8018890:	757b      	strb	r3, [r7, #21]
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f04f 32ff 	mov.w	r2, #4294967295
 8018898:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	69db      	ldr	r3, [r3, #28]
 801889e:	4619      	mov	r1, r3
 80188a0:	6938      	ldr	r0, [r7, #16]
 80188a2:	f7ff f891 	bl	80179c8 <move_window>
 80188a6:	4603      	mov	r3, r0
 80188a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80188aa:	7dfb      	ldrb	r3, [r7, #23]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	f040 8090 	bne.w	80189d2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	6a1b      	ldr	r3, [r3, #32]
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80188ba:	7dbb      	ldrb	r3, [r7, #22]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d102      	bne.n	80188c6 <dir_find+0x60>
 80188c0:	2304      	movs	r3, #4
 80188c2:	75fb      	strb	r3, [r7, #23]
 80188c4:	e08a      	b.n	80189dc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	6a1b      	ldr	r3, [r3, #32]
 80188ca:	330b      	adds	r3, #11
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188d2:	73fb      	strb	r3, [r7, #15]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	7bfa      	ldrb	r2, [r7, #15]
 80188d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80188da:	7dbb      	ldrb	r3, [r7, #22]
 80188dc:	2be5      	cmp	r3, #229	; 0xe5
 80188de:	d007      	beq.n	80188f0 <dir_find+0x8a>
 80188e0:	7bfb      	ldrb	r3, [r7, #15]
 80188e2:	f003 0308 	and.w	r3, r3, #8
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d009      	beq.n	80188fe <dir_find+0x98>
 80188ea:	7bfb      	ldrb	r3, [r7, #15]
 80188ec:	2b0f      	cmp	r3, #15
 80188ee:	d006      	beq.n	80188fe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80188f0:	23ff      	movs	r3, #255	; 0xff
 80188f2:	757b      	strb	r3, [r7, #21]
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	f04f 32ff 	mov.w	r2, #4294967295
 80188fa:	631a      	str	r2, [r3, #48]	; 0x30
 80188fc:	e05e      	b.n	80189bc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80188fe:	7bfb      	ldrb	r3, [r7, #15]
 8018900:	2b0f      	cmp	r3, #15
 8018902:	d136      	bne.n	8018972 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801890a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801890e:	2b00      	cmp	r3, #0
 8018910:	d154      	bne.n	80189bc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018912:	7dbb      	ldrb	r3, [r7, #22]
 8018914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018918:	2b00      	cmp	r3, #0
 801891a:	d00d      	beq.n	8018938 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6a1b      	ldr	r3, [r3, #32]
 8018920:	7b5b      	ldrb	r3, [r3, #13]
 8018922:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018924:	7dbb      	ldrb	r3, [r7, #22]
 8018926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801892a:	75bb      	strb	r3, [r7, #22]
 801892c:	7dbb      	ldrb	r3, [r7, #22]
 801892e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	695a      	ldr	r2, [r3, #20]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018938:	7dba      	ldrb	r2, [r7, #22]
 801893a:	7d7b      	ldrb	r3, [r7, #21]
 801893c:	429a      	cmp	r2, r3
 801893e:	d115      	bne.n	801896c <dir_find+0x106>
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	6a1b      	ldr	r3, [r3, #32]
 8018944:	330d      	adds	r3, #13
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	7d3a      	ldrb	r2, [r7, #20]
 801894a:	429a      	cmp	r2, r3
 801894c:	d10e      	bne.n	801896c <dir_find+0x106>
 801894e:	693b      	ldr	r3, [r7, #16]
 8018950:	691a      	ldr	r2, [r3, #16]
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6a1b      	ldr	r3, [r3, #32]
 8018956:	4619      	mov	r1, r3
 8018958:	4610      	mov	r0, r2
 801895a:	f7ff fdfd 	bl	8018558 <cmp_lfn>
 801895e:	4603      	mov	r3, r0
 8018960:	2b00      	cmp	r3, #0
 8018962:	d003      	beq.n	801896c <dir_find+0x106>
 8018964:	7d7b      	ldrb	r3, [r7, #21]
 8018966:	3b01      	subs	r3, #1
 8018968:	b2db      	uxtb	r3, r3
 801896a:	e000      	b.n	801896e <dir_find+0x108>
 801896c:	23ff      	movs	r3, #255	; 0xff
 801896e:	757b      	strb	r3, [r7, #21]
 8018970:	e024      	b.n	80189bc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018972:	7d7b      	ldrb	r3, [r7, #21]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d109      	bne.n	801898c <dir_find+0x126>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6a1b      	ldr	r3, [r3, #32]
 801897c:	4618      	mov	r0, r3
 801897e:	f7ff ff51 	bl	8018824 <sum_sfn>
 8018982:	4603      	mov	r3, r0
 8018984:	461a      	mov	r2, r3
 8018986:	7d3b      	ldrb	r3, [r7, #20]
 8018988:	4293      	cmp	r3, r2
 801898a:	d024      	beq.n	80189d6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018992:	f003 0301 	and.w	r3, r3, #1
 8018996:	2b00      	cmp	r3, #0
 8018998:	d10a      	bne.n	80189b0 <dir_find+0x14a>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	6a18      	ldr	r0, [r3, #32]
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	3324      	adds	r3, #36	; 0x24
 80189a2:	220b      	movs	r2, #11
 80189a4:	4619      	mov	r1, r3
 80189a6:	f7fe fe1d 	bl	80175e4 <mem_cmp>
 80189aa:	4603      	mov	r3, r0
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d014      	beq.n	80189da <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80189b0:	23ff      	movs	r3, #255	; 0xff
 80189b2:	757b      	strb	r3, [r7, #21]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	f04f 32ff 	mov.w	r2, #4294967295
 80189ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80189bc:	2100      	movs	r1, #0
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f7ff fc6d 	bl	801829e <dir_next>
 80189c4:	4603      	mov	r3, r0
 80189c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80189c8:	7dfb      	ldrb	r3, [r7, #23]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f43f af65 	beq.w	801889a <dir_find+0x34>
 80189d0:	e004      	b.n	80189dc <dir_find+0x176>
		if (res != FR_OK) break;
 80189d2:	bf00      	nop
 80189d4:	e002      	b.n	80189dc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80189d6:	bf00      	nop
 80189d8:	e000      	b.n	80189dc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80189da:	bf00      	nop

	return res;
 80189dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80189de:	4618      	mov	r0, r3
 80189e0:	3718      	adds	r7, #24
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}
	...

080189e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b08c      	sub	sp, #48	; 0x30
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80189fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d001      	beq.n	8018a08 <dir_register+0x20>
 8018a04:	2306      	movs	r3, #6
 8018a06:	e0e0      	b.n	8018bca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018a08:	2300      	movs	r3, #0
 8018a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8018a0c:	e002      	b.n	8018a14 <dir_register+0x2c>
 8018a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a10:	3301      	adds	r3, #1
 8018a12:	627b      	str	r3, [r7, #36]	; 0x24
 8018a14:	69fb      	ldr	r3, [r7, #28]
 8018a16:	691a      	ldr	r2, [r3, #16]
 8018a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a1a:	005b      	lsls	r3, r3, #1
 8018a1c:	4413      	add	r3, r2
 8018a1e:	881b      	ldrh	r3, [r3, #0]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d1f4      	bne.n	8018a0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018a2a:	f107 030c 	add.w	r3, r7, #12
 8018a2e:	220c      	movs	r2, #12
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7fe fd9b 	bl	801756c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018a36:	7dfb      	ldrb	r3, [r7, #23]
 8018a38:	f003 0301 	and.w	r3, r3, #1
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d032      	beq.n	8018aa6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	2240      	movs	r2, #64	; 0x40
 8018a44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018a48:	2301      	movs	r3, #1
 8018a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a4c:	e016      	b.n	8018a7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018a54:	69fb      	ldr	r3, [r7, #28]
 8018a56:	691a      	ldr	r2, [r3, #16]
 8018a58:	f107 010c 	add.w	r1, r7, #12
 8018a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a5e:	f7ff fe53 	bl	8018708 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7ff feff 	bl	8018866 <dir_find>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d106      	bne.n	8018a84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a78:	3301      	adds	r3, #1
 8018a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a7e:	2b63      	cmp	r3, #99	; 0x63
 8018a80:	d9e5      	bls.n	8018a4e <dir_register+0x66>
 8018a82:	e000      	b.n	8018a86 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018a84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a88:	2b64      	cmp	r3, #100	; 0x64
 8018a8a:	d101      	bne.n	8018a90 <dir_register+0xa8>
 8018a8c:	2307      	movs	r3, #7
 8018a8e:	e09c      	b.n	8018bca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a94:	2b04      	cmp	r3, #4
 8018a96:	d002      	beq.n	8018a9e <dir_register+0xb6>
 8018a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a9c:	e095      	b.n	8018bca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018a9e:	7dfa      	ldrb	r2, [r7, #23]
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018aa6:	7dfb      	ldrb	r3, [r7, #23]
 8018aa8:	f003 0302 	and.w	r3, r3, #2
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d007      	beq.n	8018ac0 <dir_register+0xd8>
 8018ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab2:	330c      	adds	r3, #12
 8018ab4:	4a47      	ldr	r2, [pc, #284]	; (8018bd4 <dir_register+0x1ec>)
 8018ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8018aba:	089b      	lsrs	r3, r3, #2
 8018abc:	3301      	adds	r3, #1
 8018abe:	e000      	b.n	8018ac2 <dir_register+0xda>
 8018ac0:	2301      	movs	r3, #1
 8018ac2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018ac4:	6a39      	ldr	r1, [r7, #32]
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f7ff fcbf 	bl	801844a <dir_alloc>
 8018acc:	4603      	mov	r3, r0
 8018ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d148      	bne.n	8018b6c <dir_register+0x184>
 8018ada:	6a3b      	ldr	r3, [r7, #32]
 8018adc:	3b01      	subs	r3, #1
 8018ade:	623b      	str	r3, [r7, #32]
 8018ae0:	6a3b      	ldr	r3, [r7, #32]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d042      	beq.n	8018b6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	695a      	ldr	r2, [r3, #20]
 8018aea:	6a3b      	ldr	r3, [r7, #32]
 8018aec:	015b      	lsls	r3, r3, #5
 8018aee:	1ad3      	subs	r3, r2, r3
 8018af0:	4619      	mov	r1, r3
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f7ff fb4a 	bl	801818c <dir_sdi>
 8018af8:	4603      	mov	r3, r0
 8018afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d132      	bne.n	8018b6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	3324      	adds	r3, #36	; 0x24
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f7ff fe8a 	bl	8018824 <sum_sfn>
 8018b10:	4603      	mov	r3, r0
 8018b12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	69db      	ldr	r3, [r3, #28]
 8018b18:	4619      	mov	r1, r3
 8018b1a:	69f8      	ldr	r0, [r7, #28]
 8018b1c:	f7fe ff54 	bl	80179c8 <move_window>
 8018b20:	4603      	mov	r3, r0
 8018b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d11d      	bne.n	8018b6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018b2e:	69fb      	ldr	r3, [r7, #28]
 8018b30:	6918      	ldr	r0, [r3, #16]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6a19      	ldr	r1, [r3, #32]
 8018b36:	6a3b      	ldr	r3, [r7, #32]
 8018b38:	b2da      	uxtb	r2, r3
 8018b3a:	7efb      	ldrb	r3, [r7, #27]
 8018b3c:	f7ff fd7c 	bl	8018638 <put_lfn>
				fs->wflag = 1;
 8018b40:	69fb      	ldr	r3, [r7, #28]
 8018b42:	2201      	movs	r2, #1
 8018b44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018b46:	2100      	movs	r1, #0
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	f7ff fba8 	bl	801829e <dir_next>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d107      	bne.n	8018b6c <dir_register+0x184>
 8018b5c:	6a3b      	ldr	r3, [r7, #32]
 8018b5e:	3b01      	subs	r3, #1
 8018b60:	623b      	str	r3, [r7, #32]
 8018b62:	6a3b      	ldr	r3, [r7, #32]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d1d5      	bne.n	8018b14 <dir_register+0x12c>
 8018b68:	e000      	b.n	8018b6c <dir_register+0x184>
				if (res != FR_OK) break;
 8018b6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d128      	bne.n	8018bc6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	69db      	ldr	r3, [r3, #28]
 8018b78:	4619      	mov	r1, r3
 8018b7a:	69f8      	ldr	r0, [r7, #28]
 8018b7c:	f7fe ff24 	bl	80179c8 <move_window>
 8018b80:	4603      	mov	r3, r0
 8018b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d11b      	bne.n	8018bc6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6a1b      	ldr	r3, [r3, #32]
 8018b92:	2220      	movs	r2, #32
 8018b94:	2100      	movs	r1, #0
 8018b96:	4618      	mov	r0, r3
 8018b98:	f7fe fd09 	bl	80175ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6a18      	ldr	r0, [r3, #32]
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	3324      	adds	r3, #36	; 0x24
 8018ba4:	220b      	movs	r2, #11
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	f7fe fce0 	bl	801756c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6a1b      	ldr	r3, [r3, #32]
 8018bb6:	330c      	adds	r3, #12
 8018bb8:	f002 0218 	and.w	r2, r2, #24
 8018bbc:	b2d2      	uxtb	r2, r2
 8018bbe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018bc0:	69fb      	ldr	r3, [r7, #28]
 8018bc2:	2201      	movs	r2, #1
 8018bc4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3730      	adds	r7, #48	; 0x30
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop
 8018bd4:	4ec4ec4f 	.word	0x4ec4ec4f

08018bd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b08a      	sub	sp, #40	; 0x28
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	613b      	str	r3, [r7, #16]
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	691b      	ldr	r3, [r3, #16]
 8018bee:	60fb      	str	r3, [r7, #12]
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	617b      	str	r3, [r7, #20]
 8018bf4:	697b      	ldr	r3, [r7, #20]
 8018bf6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018bf8:	69bb      	ldr	r3, [r7, #24]
 8018bfa:	1c5a      	adds	r2, r3, #1
 8018bfc:	61ba      	str	r2, [r7, #24]
 8018bfe:	693a      	ldr	r2, [r7, #16]
 8018c00:	4413      	add	r3, r2
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c08:	2b1f      	cmp	r3, #31
 8018c0a:	d940      	bls.n	8018c8e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c0e:	2b2f      	cmp	r3, #47	; 0x2f
 8018c10:	d006      	beq.n	8018c20 <create_name+0x48>
 8018c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c14:	2b5c      	cmp	r3, #92	; 0x5c
 8018c16:	d110      	bne.n	8018c3a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018c18:	e002      	b.n	8018c20 <create_name+0x48>
 8018c1a:	69bb      	ldr	r3, [r7, #24]
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	61bb      	str	r3, [r7, #24]
 8018c20:	693a      	ldr	r2, [r7, #16]
 8018c22:	69bb      	ldr	r3, [r7, #24]
 8018c24:	4413      	add	r3, r2
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	2b2f      	cmp	r3, #47	; 0x2f
 8018c2a:	d0f6      	beq.n	8018c1a <create_name+0x42>
 8018c2c:	693a      	ldr	r2, [r7, #16]
 8018c2e:	69bb      	ldr	r3, [r7, #24]
 8018c30:	4413      	add	r3, r2
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	2b5c      	cmp	r3, #92	; 0x5c
 8018c36:	d0f0      	beq.n	8018c1a <create_name+0x42>
			break;
 8018c38:	e02a      	b.n	8018c90 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	2bfe      	cmp	r3, #254	; 0xfe
 8018c3e:	d901      	bls.n	8018c44 <create_name+0x6c>
 8018c40:	2306      	movs	r3, #6
 8018c42:	e17d      	b.n	8018f40 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c4c:	2101      	movs	r1, #1
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f001 fa8c 	bl	801a16c <ff_convert>
 8018c54:	4603      	mov	r3, r0
 8018c56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d101      	bne.n	8018c62 <create_name+0x8a>
 8018c5e:	2306      	movs	r3, #6
 8018c60:	e16e      	b.n	8018f40 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c64:	2b7f      	cmp	r3, #127	; 0x7f
 8018c66:	d809      	bhi.n	8018c7c <create_name+0xa4>
 8018c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	488d      	ldr	r0, [pc, #564]	; (8018ea4 <create_name+0x2cc>)
 8018c6e:	f7fe fce0 	bl	8017632 <chk_chr>
 8018c72:	4603      	mov	r3, r0
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d001      	beq.n	8018c7c <create_name+0xa4>
 8018c78:	2306      	movs	r3, #6
 8018c7a:	e161      	b.n	8018f40 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	1c5a      	adds	r2, r3, #1
 8018c80:	617a      	str	r2, [r7, #20]
 8018c82:	005b      	lsls	r3, r3, #1
 8018c84:	68fa      	ldr	r2, [r7, #12]
 8018c86:	4413      	add	r3, r2
 8018c88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018c8c:	e7b4      	b.n	8018bf8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018c8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018c90:	693a      	ldr	r2, [r7, #16]
 8018c92:	69bb      	ldr	r3, [r7, #24]
 8018c94:	441a      	add	r2, r3
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c9c:	2b1f      	cmp	r3, #31
 8018c9e:	d801      	bhi.n	8018ca4 <create_name+0xcc>
 8018ca0:	2304      	movs	r3, #4
 8018ca2:	e000      	b.n	8018ca6 <create_name+0xce>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018caa:	e011      	b.n	8018cd0 <create_name+0xf8>
		w = lfn[di - 1];
 8018cac:	697a      	ldr	r2, [r7, #20]
 8018cae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018cb2:	4413      	add	r3, r2
 8018cb4:	005b      	lsls	r3, r3, #1
 8018cb6:	68fa      	ldr	r2, [r7, #12]
 8018cb8:	4413      	add	r3, r2
 8018cba:	881b      	ldrh	r3, [r3, #0]
 8018cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cc0:	2b20      	cmp	r3, #32
 8018cc2:	d002      	beq.n	8018cca <create_name+0xf2>
 8018cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8018cc8:	d106      	bne.n	8018cd8 <create_name+0x100>
		di--;
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	3b01      	subs	r3, #1
 8018cce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018cd0:	697b      	ldr	r3, [r7, #20]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d1ea      	bne.n	8018cac <create_name+0xd4>
 8018cd6:	e000      	b.n	8018cda <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018cd8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	005b      	lsls	r3, r3, #1
 8018cde:	68fa      	ldr	r2, [r7, #12]
 8018ce0:	4413      	add	r3, r2
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d101      	bne.n	8018cf0 <create_name+0x118>
 8018cec:	2306      	movs	r3, #6
 8018cee:	e127      	b.n	8018f40 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	3324      	adds	r3, #36	; 0x24
 8018cf4:	220b      	movs	r2, #11
 8018cf6:	2120      	movs	r1, #32
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7fe fc58 	bl	80175ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018cfe:	2300      	movs	r3, #0
 8018d00:	61bb      	str	r3, [r7, #24]
 8018d02:	e002      	b.n	8018d0a <create_name+0x132>
 8018d04:	69bb      	ldr	r3, [r7, #24]
 8018d06:	3301      	adds	r3, #1
 8018d08:	61bb      	str	r3, [r7, #24]
 8018d0a:	69bb      	ldr	r3, [r7, #24]
 8018d0c:	005b      	lsls	r3, r3, #1
 8018d0e:	68fa      	ldr	r2, [r7, #12]
 8018d10:	4413      	add	r3, r2
 8018d12:	881b      	ldrh	r3, [r3, #0]
 8018d14:	2b20      	cmp	r3, #32
 8018d16:	d0f5      	beq.n	8018d04 <create_name+0x12c>
 8018d18:	69bb      	ldr	r3, [r7, #24]
 8018d1a:	005b      	lsls	r3, r3, #1
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	4413      	add	r3, r2
 8018d20:	881b      	ldrh	r3, [r3, #0]
 8018d22:	2b2e      	cmp	r3, #46	; 0x2e
 8018d24:	d0ee      	beq.n	8018d04 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018d26:	69bb      	ldr	r3, [r7, #24]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d009      	beq.n	8018d40 <create_name+0x168>
 8018d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d30:	f043 0303 	orr.w	r3, r3, #3
 8018d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018d38:	e002      	b.n	8018d40 <create_name+0x168>
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	3b01      	subs	r3, #1
 8018d3e:	617b      	str	r3, [r7, #20]
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d009      	beq.n	8018d5a <create_name+0x182>
 8018d46:	697a      	ldr	r2, [r7, #20]
 8018d48:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d4c:	4413      	add	r3, r2
 8018d4e:	005b      	lsls	r3, r3, #1
 8018d50:	68fa      	ldr	r2, [r7, #12]
 8018d52:	4413      	add	r3, r2
 8018d54:	881b      	ldrh	r3, [r3, #0]
 8018d56:	2b2e      	cmp	r3, #46	; 0x2e
 8018d58:	d1ef      	bne.n	8018d3a <create_name+0x162>

	i = b = 0; ni = 8;
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018d60:	2300      	movs	r3, #0
 8018d62:	623b      	str	r3, [r7, #32]
 8018d64:	2308      	movs	r3, #8
 8018d66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018d68:	69bb      	ldr	r3, [r7, #24]
 8018d6a:	1c5a      	adds	r2, r3, #1
 8018d6c:	61ba      	str	r2, [r7, #24]
 8018d6e:	005b      	lsls	r3, r3, #1
 8018d70:	68fa      	ldr	r2, [r7, #12]
 8018d72:	4413      	add	r3, r2
 8018d74:	881b      	ldrh	r3, [r3, #0]
 8018d76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	f000 8090 	beq.w	8018ea0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d82:	2b20      	cmp	r3, #32
 8018d84:	d006      	beq.n	8018d94 <create_name+0x1bc>
 8018d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d88:	2b2e      	cmp	r3, #46	; 0x2e
 8018d8a:	d10a      	bne.n	8018da2 <create_name+0x1ca>
 8018d8c:	69ba      	ldr	r2, [r7, #24]
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	429a      	cmp	r2, r3
 8018d92:	d006      	beq.n	8018da2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d98:	f043 0303 	orr.w	r3, r3, #3
 8018d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018da0:	e07d      	b.n	8018e9e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018da2:	6a3a      	ldr	r2, [r7, #32]
 8018da4:	69fb      	ldr	r3, [r7, #28]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d203      	bcs.n	8018db2 <create_name+0x1da>
 8018daa:	69ba      	ldr	r2, [r7, #24]
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d123      	bne.n	8018dfa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018db2:	69fb      	ldr	r3, [r7, #28]
 8018db4:	2b0b      	cmp	r3, #11
 8018db6:	d106      	bne.n	8018dc6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dbc:	f043 0303 	orr.w	r3, r3, #3
 8018dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018dc4:	e075      	b.n	8018eb2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018dc6:	69ba      	ldr	r2, [r7, #24]
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d005      	beq.n	8018dda <create_name+0x202>
 8018dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dd2:	f043 0303 	orr.w	r3, r3, #3
 8018dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018dda:	69ba      	ldr	r2, [r7, #24]
 8018ddc:	697b      	ldr	r3, [r7, #20]
 8018dde:	429a      	cmp	r2, r3
 8018de0:	d866      	bhi.n	8018eb0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	61bb      	str	r3, [r7, #24]
 8018de6:	2308      	movs	r3, #8
 8018de8:	623b      	str	r3, [r7, #32]
 8018dea:	230b      	movs	r3, #11
 8018dec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018dee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018df2:	009b      	lsls	r3, r3, #2
 8018df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018df8:	e051      	b.n	8018e9e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8018dfe:	d914      	bls.n	8018e2a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e02:	2100      	movs	r1, #0
 8018e04:	4618      	mov	r0, r3
 8018e06:	f001 f9b1 	bl	801a16c <ff_convert>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d004      	beq.n	8018e1e <create_name+0x246>
 8018e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e16:	3b80      	subs	r3, #128	; 0x80
 8018e18:	4a23      	ldr	r2, [pc, #140]	; (8018ea8 <create_name+0x2d0>)
 8018e1a:	5cd3      	ldrb	r3, [r2, r3]
 8018e1c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e22:	f043 0302 	orr.w	r3, r3, #2
 8018e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d007      	beq.n	8018e40 <create_name+0x268>
 8018e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e32:	4619      	mov	r1, r3
 8018e34:	481d      	ldr	r0, [pc, #116]	; (8018eac <create_name+0x2d4>)
 8018e36:	f7fe fbfc 	bl	8017632 <chk_chr>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d008      	beq.n	8018e52 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018e40:	235f      	movs	r3, #95	; 0x5f
 8018e42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e48:	f043 0303 	orr.w	r3, r3, #3
 8018e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e50:	e01b      	b.n	8018e8a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e54:	2b40      	cmp	r3, #64	; 0x40
 8018e56:	d909      	bls.n	8018e6c <create_name+0x294>
 8018e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e5a:	2b5a      	cmp	r3, #90	; 0x5a
 8018e5c:	d806      	bhi.n	8018e6c <create_name+0x294>
					b |= 2;
 8018e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e62:	f043 0302 	orr.w	r3, r3, #2
 8018e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e6a:	e00e      	b.n	8018e8a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e6e:	2b60      	cmp	r3, #96	; 0x60
 8018e70:	d90b      	bls.n	8018e8a <create_name+0x2b2>
 8018e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e74:	2b7a      	cmp	r3, #122	; 0x7a
 8018e76:	d808      	bhi.n	8018e8a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018e78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e7c:	f043 0301 	orr.w	r3, r3, #1
 8018e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e86:	3b20      	subs	r3, #32
 8018e88:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018e8a:	6a3b      	ldr	r3, [r7, #32]
 8018e8c:	1c5a      	adds	r2, r3, #1
 8018e8e:	623a      	str	r2, [r7, #32]
 8018e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e92:	b2d1      	uxtb	r1, r2
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	4413      	add	r3, r2
 8018e98:	460a      	mov	r2, r1
 8018e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018e9e:	e763      	b.n	8018d68 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018ea0:	bf00      	nop
 8018ea2:	e006      	b.n	8018eb2 <create_name+0x2da>
 8018ea4:	0801f808 	.word	0x0801f808
 8018ea8:	0801f950 	.word	0x0801f950
 8018eac:	0801f814 	.word	0x0801f814
			if (si > di) break;			/* No extension */
 8018eb0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018eb8:	2be5      	cmp	r3, #229	; 0xe5
 8018eba:	d103      	bne.n	8018ec4 <create_name+0x2ec>
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2205      	movs	r2, #5
 8018ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018ec4:	69fb      	ldr	r3, [r7, #28]
 8018ec6:	2b08      	cmp	r3, #8
 8018ec8:	d104      	bne.n	8018ed4 <create_name+0x2fc>
 8018eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ece:	009b      	lsls	r3, r3, #2
 8018ed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ed8:	f003 030c 	and.w	r3, r3, #12
 8018edc:	2b0c      	cmp	r3, #12
 8018ede:	d005      	beq.n	8018eec <create_name+0x314>
 8018ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ee4:	f003 0303 	and.w	r3, r3, #3
 8018ee8:	2b03      	cmp	r3, #3
 8018eea:	d105      	bne.n	8018ef8 <create_name+0x320>
 8018eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ef0:	f043 0302 	orr.w	r3, r3, #2
 8018ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018efc:	f003 0302 	and.w	r3, r3, #2
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d117      	bne.n	8018f34 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018f04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f08:	f003 0303 	and.w	r3, r3, #3
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	d105      	bne.n	8018f1c <create_name+0x344>
 8018f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f14:	f043 0310 	orr.w	r3, r3, #16
 8018f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f20:	f003 030c 	and.w	r3, r3, #12
 8018f24:	2b04      	cmp	r3, #4
 8018f26:	d105      	bne.n	8018f34 <create_name+0x35c>
 8018f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f2c:	f043 0308 	orr.w	r3, r3, #8
 8018f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018f3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018f3e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018f40:	4618      	mov	r0, r3
 8018f42:	3728      	adds	r7, #40	; 0x28
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd80      	pop	{r7, pc}

08018f48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b086      	sub	sp, #24
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
 8018f50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018f56:	693b      	ldr	r3, [r7, #16]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018f5c:	e002      	b.n	8018f64 <follow_path+0x1c>
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	3301      	adds	r3, #1
 8018f62:	603b      	str	r3, [r7, #0]
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	2b2f      	cmp	r3, #47	; 0x2f
 8018f6a:	d0f8      	beq.n	8018f5e <follow_path+0x16>
 8018f6c:	683b      	ldr	r3, [r7, #0]
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	2b5c      	cmp	r3, #92	; 0x5c
 8018f72:	d0f4      	beq.n	8018f5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018f74:	693b      	ldr	r3, [r7, #16]
 8018f76:	2200      	movs	r2, #0
 8018f78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	781b      	ldrb	r3, [r3, #0]
 8018f7e:	2b1f      	cmp	r3, #31
 8018f80:	d80a      	bhi.n	8018f98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	2280      	movs	r2, #128	; 0x80
 8018f86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018f8a:	2100      	movs	r1, #0
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f7ff f8fd 	bl	801818c <dir_sdi>
 8018f92:	4603      	mov	r3, r0
 8018f94:	75fb      	strb	r3, [r7, #23]
 8018f96:	e048      	b.n	801902a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018f98:	463b      	mov	r3, r7
 8018f9a:	4619      	mov	r1, r3
 8018f9c:	6878      	ldr	r0, [r7, #4]
 8018f9e:	f7ff fe1b 	bl	8018bd8 <create_name>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018fa6:	7dfb      	ldrb	r3, [r7, #23]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d139      	bne.n	8019020 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	f7ff fc5a 	bl	8018866 <dir_find>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018fbc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018fbe:	7dfb      	ldrb	r3, [r7, #23]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d00a      	beq.n	8018fda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018fc4:	7dfb      	ldrb	r3, [r7, #23]
 8018fc6:	2b04      	cmp	r3, #4
 8018fc8:	d12c      	bne.n	8019024 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018fca:	7afb      	ldrb	r3, [r7, #11]
 8018fcc:	f003 0304 	and.w	r3, r3, #4
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d127      	bne.n	8019024 <follow_path+0xdc>
 8018fd4:	2305      	movs	r3, #5
 8018fd6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018fd8:	e024      	b.n	8019024 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018fda:	7afb      	ldrb	r3, [r7, #11]
 8018fdc:	f003 0304 	and.w	r3, r3, #4
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d121      	bne.n	8019028 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018fe4:	693b      	ldr	r3, [r7, #16]
 8018fe6:	799b      	ldrb	r3, [r3, #6]
 8018fe8:	f003 0310 	and.w	r3, r3, #16
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d102      	bne.n	8018ff6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018ff0:	2305      	movs	r3, #5
 8018ff2:	75fb      	strb	r3, [r7, #23]
 8018ff4:	e019      	b.n	801902a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	695b      	ldr	r3, [r3, #20]
 8019000:	68fa      	ldr	r2, [r7, #12]
 8019002:	8992      	ldrh	r2, [r2, #12]
 8019004:	fbb3 f0f2 	udiv	r0, r3, r2
 8019008:	fb00 f202 	mul.w	r2, r0, r2
 801900c:	1a9b      	subs	r3, r3, r2
 801900e:	440b      	add	r3, r1
 8019010:	4619      	mov	r1, r3
 8019012:	68f8      	ldr	r0, [r7, #12]
 8019014:	f7ff fa60 	bl	80184d8 <ld_clust>
 8019018:	4602      	mov	r2, r0
 801901a:	693b      	ldr	r3, [r7, #16]
 801901c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801901e:	e7bb      	b.n	8018f98 <follow_path+0x50>
			if (res != FR_OK) break;
 8019020:	bf00      	nop
 8019022:	e002      	b.n	801902a <follow_path+0xe2>
				break;
 8019024:	bf00      	nop
 8019026:	e000      	b.n	801902a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019028:	bf00      	nop
			}
		}
	}

	return res;
 801902a:	7dfb      	ldrb	r3, [r7, #23]
}
 801902c:	4618      	mov	r0, r3
 801902e:	3718      	adds	r7, #24
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}

08019034 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019034:	b480      	push	{r7}
 8019036:	b087      	sub	sp, #28
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801903c:	f04f 33ff 	mov.w	r3, #4294967295
 8019040:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d031      	beq.n	80190ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	617b      	str	r3, [r7, #20]
 8019050:	e002      	b.n	8019058 <get_ldnumber+0x24>
 8019052:	697b      	ldr	r3, [r7, #20]
 8019054:	3301      	adds	r3, #1
 8019056:	617b      	str	r3, [r7, #20]
 8019058:	697b      	ldr	r3, [r7, #20]
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	2b1f      	cmp	r3, #31
 801905e:	d903      	bls.n	8019068 <get_ldnumber+0x34>
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	781b      	ldrb	r3, [r3, #0]
 8019064:	2b3a      	cmp	r3, #58	; 0x3a
 8019066:	d1f4      	bne.n	8019052 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	2b3a      	cmp	r3, #58	; 0x3a
 801906e:	d11c      	bne.n	80190aa <get_ldnumber+0x76>
			tp = *path;
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	1c5a      	adds	r2, r3, #1
 801907a:	60fa      	str	r2, [r7, #12]
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	3b30      	subs	r3, #48	; 0x30
 8019080:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	2b09      	cmp	r3, #9
 8019086:	d80e      	bhi.n	80190a6 <get_ldnumber+0x72>
 8019088:	68fa      	ldr	r2, [r7, #12]
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	429a      	cmp	r2, r3
 801908e:	d10a      	bne.n	80190a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d107      	bne.n	80190a6 <get_ldnumber+0x72>
					vol = (int)i;
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801909a:	697b      	ldr	r3, [r7, #20]
 801909c:	3301      	adds	r3, #1
 801909e:	617b      	str	r3, [r7, #20]
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	697a      	ldr	r2, [r7, #20]
 80190a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	e002      	b.n	80190b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80190aa:	2300      	movs	r3, #0
 80190ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80190ae:	693b      	ldr	r3, [r7, #16]
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	371c      	adds	r7, #28
 80190b4:	46bd      	mov	sp, r7
 80190b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ba:	4770      	bx	lr

080190bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b082      	sub	sp, #8
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
 80190c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2200      	movs	r2, #0
 80190ca:	70da      	strb	r2, [r3, #3]
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	f04f 32ff 	mov.w	r2, #4294967295
 80190d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80190d4:	6839      	ldr	r1, [r7, #0]
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f7fe fc76 	bl	80179c8 <move_window>
 80190dc:	4603      	mov	r3, r0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d001      	beq.n	80190e6 <check_fs+0x2a>
 80190e2:	2304      	movs	r3, #4
 80190e4:	e038      	b.n	8019158 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	3338      	adds	r3, #56	; 0x38
 80190ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7fe f9ba 	bl	8017468 <ld_word>
 80190f4:	4603      	mov	r3, r0
 80190f6:	461a      	mov	r2, r3
 80190f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80190fc:	429a      	cmp	r2, r3
 80190fe:	d001      	beq.n	8019104 <check_fs+0x48>
 8019100:	2303      	movs	r3, #3
 8019102:	e029      	b.n	8019158 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801910a:	2be9      	cmp	r3, #233	; 0xe9
 801910c:	d009      	beq.n	8019122 <check_fs+0x66>
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019114:	2beb      	cmp	r3, #235	; 0xeb
 8019116:	d11e      	bne.n	8019156 <check_fs+0x9a>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801911e:	2b90      	cmp	r3, #144	; 0x90
 8019120:	d119      	bne.n	8019156 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	3338      	adds	r3, #56	; 0x38
 8019126:	3336      	adds	r3, #54	; 0x36
 8019128:	4618      	mov	r0, r3
 801912a:	f7fe f9b5 	bl	8017498 <ld_dword>
 801912e:	4603      	mov	r3, r0
 8019130:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019134:	4a0a      	ldr	r2, [pc, #40]	; (8019160 <check_fs+0xa4>)
 8019136:	4293      	cmp	r3, r2
 8019138:	d101      	bne.n	801913e <check_fs+0x82>
 801913a:	2300      	movs	r3, #0
 801913c:	e00c      	b.n	8019158 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	3338      	adds	r3, #56	; 0x38
 8019142:	3352      	adds	r3, #82	; 0x52
 8019144:	4618      	mov	r0, r3
 8019146:	f7fe f9a7 	bl	8017498 <ld_dword>
 801914a:	4603      	mov	r3, r0
 801914c:	4a05      	ldr	r2, [pc, #20]	; (8019164 <check_fs+0xa8>)
 801914e:	4293      	cmp	r3, r2
 8019150:	d101      	bne.n	8019156 <check_fs+0x9a>
 8019152:	2300      	movs	r3, #0
 8019154:	e000      	b.n	8019158 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8019156:	2302      	movs	r3, #2
}
 8019158:	4618      	mov	r0, r3
 801915a:	3708      	adds	r7, #8
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	00544146 	.word	0x00544146
 8019164:	33544146 	.word	0x33544146

08019168 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b096      	sub	sp, #88	; 0x58
 801916c:	af00      	add	r7, sp, #0
 801916e:	60f8      	str	r0, [r7, #12]
 8019170:	60b9      	str	r1, [r7, #8]
 8019172:	4613      	mov	r3, r2
 8019174:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019176:	68bb      	ldr	r3, [r7, #8]
 8019178:	2200      	movs	r2, #0
 801917a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801917c:	68f8      	ldr	r0, [r7, #12]
 801917e:	f7ff ff59 	bl	8019034 <get_ldnumber>
 8019182:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019186:	2b00      	cmp	r3, #0
 8019188:	da01      	bge.n	801918e <find_volume+0x26>
 801918a:	230b      	movs	r3, #11
 801918c:	e265      	b.n	801965a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801918e:	4a9f      	ldr	r2, [pc, #636]	; (801940c <find_volume+0x2a4>)
 8019190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019196:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919a:	2b00      	cmp	r3, #0
 801919c:	d101      	bne.n	80191a2 <find_volume+0x3a>
 801919e:	230c      	movs	r3, #12
 80191a0:	e25b      	b.n	801965a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80191a2:	68bb      	ldr	r3, [r7, #8]
 80191a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80191a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80191a8:	79fb      	ldrb	r3, [r7, #7]
 80191aa:	f023 0301 	bic.w	r3, r3, #1
 80191ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80191b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d01a      	beq.n	80191ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80191b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ba:	785b      	ldrb	r3, [r3, #1]
 80191bc:	4618      	mov	r0, r3
 80191be:	f7fe f8b5 	bl	801732c <disk_status>
 80191c2:	4603      	mov	r3, r0
 80191c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80191c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80191cc:	f003 0301 	and.w	r3, r3, #1
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d10c      	bne.n	80191ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80191d4:	79fb      	ldrb	r3, [r7, #7]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d007      	beq.n	80191ea <find_volume+0x82>
 80191da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80191de:	f003 0304 	and.w	r3, r3, #4
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d001      	beq.n	80191ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80191e6:	230a      	movs	r3, #10
 80191e8:	e237      	b.n	801965a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80191ea:	2300      	movs	r3, #0
 80191ec:	e235      	b.n	801965a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80191ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f0:	2200      	movs	r2, #0
 80191f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80191f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191f6:	b2da      	uxtb	r2, r3
 80191f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80191fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191fe:	785b      	ldrb	r3, [r3, #1]
 8019200:	4618      	mov	r0, r3
 8019202:	f7fe f8ad 	bl	8017360 <disk_initialize>
 8019206:	4603      	mov	r3, r0
 8019208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801920c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019210:	f003 0301 	and.w	r3, r3, #1
 8019214:	2b00      	cmp	r3, #0
 8019216:	d001      	beq.n	801921c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019218:	2303      	movs	r3, #3
 801921a:	e21e      	b.n	801965a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801921c:	79fb      	ldrb	r3, [r7, #7]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d007      	beq.n	8019232 <find_volume+0xca>
 8019222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019226:	f003 0304 	and.w	r3, r3, #4
 801922a:	2b00      	cmp	r3, #0
 801922c:	d001      	beq.n	8019232 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801922e:	230a      	movs	r3, #10
 8019230:	e213      	b.n	801965a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8019232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019234:	7858      	ldrb	r0, [r3, #1]
 8019236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019238:	330c      	adds	r3, #12
 801923a:	461a      	mov	r2, r3
 801923c:	2102      	movs	r1, #2
 801923e:	f7fe f8f5 	bl	801742c <disk_ioctl>
 8019242:	4603      	mov	r3, r0
 8019244:	2b00      	cmp	r3, #0
 8019246:	d001      	beq.n	801924c <find_volume+0xe4>
 8019248:	2301      	movs	r3, #1
 801924a:	e206      	b.n	801965a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801924e:	899b      	ldrh	r3, [r3, #12]
 8019250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019254:	d80d      	bhi.n	8019272 <find_volume+0x10a>
 8019256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019258:	899b      	ldrh	r3, [r3, #12]
 801925a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801925e:	d308      	bcc.n	8019272 <find_volume+0x10a>
 8019260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019262:	899b      	ldrh	r3, [r3, #12]
 8019264:	461a      	mov	r2, r3
 8019266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019268:	899b      	ldrh	r3, [r3, #12]
 801926a:	3b01      	subs	r3, #1
 801926c:	4013      	ands	r3, r2
 801926e:	2b00      	cmp	r3, #0
 8019270:	d001      	beq.n	8019276 <find_volume+0x10e>
 8019272:	2301      	movs	r3, #1
 8019274:	e1f1      	b.n	801965a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8019276:	2300      	movs	r3, #0
 8019278:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801927a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801927c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801927e:	f7ff ff1d 	bl	80190bc <check_fs>
 8019282:	4603      	mov	r3, r0
 8019284:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801928c:	2b02      	cmp	r3, #2
 801928e:	d149      	bne.n	8019324 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019290:	2300      	movs	r3, #0
 8019292:	643b      	str	r3, [r7, #64]	; 0x40
 8019294:	e01e      	b.n	80192d4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8019296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019298:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801929c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801929e:	011b      	lsls	r3, r3, #4
 80192a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80192a4:	4413      	add	r3, r2
 80192a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80192a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192aa:	3304      	adds	r3, #4
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d006      	beq.n	80192c0 <find_volume+0x158>
 80192b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b4:	3308      	adds	r3, #8
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7fe f8ee 	bl	8017498 <ld_dword>
 80192bc:	4602      	mov	r2, r0
 80192be:	e000      	b.n	80192c2 <find_volume+0x15a>
 80192c0:	2200      	movs	r2, #0
 80192c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192c4:	009b      	lsls	r3, r3, #2
 80192c6:	3358      	adds	r3, #88	; 0x58
 80192c8:	443b      	add	r3, r7
 80192ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80192ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192d0:	3301      	adds	r3, #1
 80192d2:	643b      	str	r3, [r7, #64]	; 0x40
 80192d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192d6:	2b03      	cmp	r3, #3
 80192d8:	d9dd      	bls.n	8019296 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80192da:	2300      	movs	r3, #0
 80192dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80192de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d002      	beq.n	80192ea <find_volume+0x182>
 80192e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192e6:	3b01      	subs	r3, #1
 80192e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80192ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	3358      	adds	r3, #88	; 0x58
 80192f0:	443b      	add	r3, r7
 80192f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80192f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80192f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d005      	beq.n	801930a <find_volume+0x1a2>
 80192fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019302:	f7ff fedb 	bl	80190bc <check_fs>
 8019306:	4603      	mov	r3, r0
 8019308:	e000      	b.n	801930c <find_volume+0x1a4>
 801930a:	2303      	movs	r3, #3
 801930c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8019310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019314:	2b01      	cmp	r3, #1
 8019316:	d905      	bls.n	8019324 <find_volume+0x1bc>
 8019318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801931a:	3301      	adds	r3, #1
 801931c:	643b      	str	r3, [r7, #64]	; 0x40
 801931e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019320:	2b03      	cmp	r3, #3
 8019322:	d9e2      	bls.n	80192ea <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019328:	2b04      	cmp	r3, #4
 801932a:	d101      	bne.n	8019330 <find_volume+0x1c8>
 801932c:	2301      	movs	r3, #1
 801932e:	e194      	b.n	801965a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8019330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019334:	2b01      	cmp	r3, #1
 8019336:	d901      	bls.n	801933c <find_volume+0x1d4>
 8019338:	230d      	movs	r3, #13
 801933a:	e18e      	b.n	801965a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801933e:	3338      	adds	r3, #56	; 0x38
 8019340:	330b      	adds	r3, #11
 8019342:	4618      	mov	r0, r3
 8019344:	f7fe f890 	bl	8017468 <ld_word>
 8019348:	4603      	mov	r3, r0
 801934a:	461a      	mov	r2, r3
 801934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801934e:	899b      	ldrh	r3, [r3, #12]
 8019350:	429a      	cmp	r2, r3
 8019352:	d001      	beq.n	8019358 <find_volume+0x1f0>
 8019354:	230d      	movs	r3, #13
 8019356:	e180      	b.n	801965a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8019358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801935a:	3338      	adds	r3, #56	; 0x38
 801935c:	3316      	adds	r3, #22
 801935e:	4618      	mov	r0, r3
 8019360:	f7fe f882 	bl	8017468 <ld_word>
 8019364:	4603      	mov	r3, r0
 8019366:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8019368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801936a:	2b00      	cmp	r3, #0
 801936c:	d106      	bne.n	801937c <find_volume+0x214>
 801936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019370:	3338      	adds	r3, #56	; 0x38
 8019372:	3324      	adds	r3, #36	; 0x24
 8019374:	4618      	mov	r0, r3
 8019376:	f7fe f88f 	bl	8017498 <ld_dword>
 801937a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801937e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019380:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019384:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801938e:	789b      	ldrb	r3, [r3, #2]
 8019390:	2b01      	cmp	r3, #1
 8019392:	d005      	beq.n	80193a0 <find_volume+0x238>
 8019394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019396:	789b      	ldrb	r3, [r3, #2]
 8019398:	2b02      	cmp	r3, #2
 801939a:	d001      	beq.n	80193a0 <find_volume+0x238>
 801939c:	230d      	movs	r3, #13
 801939e:	e15c      	b.n	801965a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80193a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193a2:	789b      	ldrb	r3, [r3, #2]
 80193a4:	461a      	mov	r2, r3
 80193a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193a8:	fb02 f303 	mul.w	r3, r2, r3
 80193ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80193ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80193b4:	b29a      	uxth	r2, r3
 80193b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80193ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193bc:	895b      	ldrh	r3, [r3, #10]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d008      	beq.n	80193d4 <find_volume+0x26c>
 80193c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193c4:	895b      	ldrh	r3, [r3, #10]
 80193c6:	461a      	mov	r2, r3
 80193c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ca:	895b      	ldrh	r3, [r3, #10]
 80193cc:	3b01      	subs	r3, #1
 80193ce:	4013      	ands	r3, r2
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d001      	beq.n	80193d8 <find_volume+0x270>
 80193d4:	230d      	movs	r3, #13
 80193d6:	e140      	b.n	801965a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80193d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193da:	3338      	adds	r3, #56	; 0x38
 80193dc:	3311      	adds	r3, #17
 80193de:	4618      	mov	r0, r3
 80193e0:	f7fe f842 	bl	8017468 <ld_word>
 80193e4:	4603      	mov	r3, r0
 80193e6:	461a      	mov	r2, r3
 80193e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80193ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ee:	891b      	ldrh	r3, [r3, #8]
 80193f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80193f2:	8992      	ldrh	r2, [r2, #12]
 80193f4:	0952      	lsrs	r2, r2, #5
 80193f6:	b292      	uxth	r2, r2
 80193f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80193fc:	fb01 f202 	mul.w	r2, r1, r2
 8019400:	1a9b      	subs	r3, r3, r2
 8019402:	b29b      	uxth	r3, r3
 8019404:	2b00      	cmp	r3, #0
 8019406:	d003      	beq.n	8019410 <find_volume+0x2a8>
 8019408:	230d      	movs	r3, #13
 801940a:	e126      	b.n	801965a <find_volume+0x4f2>
 801940c:	240016b4 	.word	0x240016b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019412:	3338      	adds	r3, #56	; 0x38
 8019414:	3313      	adds	r3, #19
 8019416:	4618      	mov	r0, r3
 8019418:	f7fe f826 	bl	8017468 <ld_word>
 801941c:	4603      	mov	r3, r0
 801941e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019422:	2b00      	cmp	r3, #0
 8019424:	d106      	bne.n	8019434 <find_volume+0x2cc>
 8019426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019428:	3338      	adds	r3, #56	; 0x38
 801942a:	3320      	adds	r3, #32
 801942c:	4618      	mov	r0, r3
 801942e:	f7fe f833 	bl	8017498 <ld_dword>
 8019432:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019436:	3338      	adds	r3, #56	; 0x38
 8019438:	330e      	adds	r3, #14
 801943a:	4618      	mov	r0, r3
 801943c:	f7fe f814 	bl	8017468 <ld_word>
 8019440:	4603      	mov	r3, r0
 8019442:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8019444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019446:	2b00      	cmp	r3, #0
 8019448:	d101      	bne.n	801944e <find_volume+0x2e6>
 801944a:	230d      	movs	r3, #13
 801944c:	e105      	b.n	801965a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801944e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019452:	4413      	add	r3, r2
 8019454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019456:	8911      	ldrh	r1, [r2, #8]
 8019458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801945a:	8992      	ldrh	r2, [r2, #12]
 801945c:	0952      	lsrs	r2, r2, #5
 801945e:	b292      	uxth	r2, r2
 8019460:	fbb1 f2f2 	udiv	r2, r1, r2
 8019464:	b292      	uxth	r2, r2
 8019466:	4413      	add	r3, r2
 8019468:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801946a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801946e:	429a      	cmp	r2, r3
 8019470:	d201      	bcs.n	8019476 <find_volume+0x30e>
 8019472:	230d      	movs	r3, #13
 8019474:	e0f1      	b.n	801965a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801947a:	1ad3      	subs	r3, r2, r3
 801947c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801947e:	8952      	ldrh	r2, [r2, #10]
 8019480:	fbb3 f3f2 	udiv	r3, r3, r2
 8019484:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019488:	2b00      	cmp	r3, #0
 801948a:	d101      	bne.n	8019490 <find_volume+0x328>
 801948c:	230d      	movs	r3, #13
 801948e:	e0e4      	b.n	801965a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019490:	2303      	movs	r3, #3
 8019492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019498:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801949c:	4293      	cmp	r3, r2
 801949e:	d802      	bhi.n	80194a6 <find_volume+0x33e>
 80194a0:	2302      	movs	r3, #2
 80194a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80194a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80194ac:	4293      	cmp	r3, r2
 80194ae:	d802      	bhi.n	80194b6 <find_volume+0x34e>
 80194b0:	2301      	movs	r3, #1
 80194b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80194b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b8:	1c9a      	adds	r2, r3, #2
 80194ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194bc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80194be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80194c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80194c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80194c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194c8:	441a      	add	r2, r3
 80194ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194cc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80194ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80194d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d2:	441a      	add	r2, r3
 80194d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80194d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80194dc:	2b03      	cmp	r3, #3
 80194de:	d11e      	bne.n	801951e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80194e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e2:	3338      	adds	r3, #56	; 0x38
 80194e4:	332a      	adds	r3, #42	; 0x2a
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7fd ffbe 	bl	8017468 <ld_word>
 80194ec:	4603      	mov	r3, r0
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d001      	beq.n	80194f6 <find_volume+0x38e>
 80194f2:	230d      	movs	r3, #13
 80194f4:	e0b1      	b.n	801965a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80194f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194f8:	891b      	ldrh	r3, [r3, #8]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d001      	beq.n	8019502 <find_volume+0x39a>
 80194fe:	230d      	movs	r3, #13
 8019500:	e0ab      	b.n	801965a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019504:	3338      	adds	r3, #56	; 0x38
 8019506:	332c      	adds	r3, #44	; 0x2c
 8019508:	4618      	mov	r0, r3
 801950a:	f7fd ffc5 	bl	8017498 <ld_dword>
 801950e:	4602      	mov	r2, r0
 8019510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019512:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019516:	69db      	ldr	r3, [r3, #28]
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	647b      	str	r3, [r7, #68]	; 0x44
 801951c:	e01f      	b.n	801955e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019520:	891b      	ldrh	r3, [r3, #8]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d101      	bne.n	801952a <find_volume+0x3c2>
 8019526:	230d      	movs	r3, #13
 8019528:	e097      	b.n	801965a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801952c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801952e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019530:	441a      	add	r2, r3
 8019532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019534:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801953a:	2b02      	cmp	r3, #2
 801953c:	d103      	bne.n	8019546 <find_volume+0x3de>
 801953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019540:	69db      	ldr	r3, [r3, #28]
 8019542:	005b      	lsls	r3, r3, #1
 8019544:	e00a      	b.n	801955c <find_volume+0x3f4>
 8019546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019548:	69da      	ldr	r2, [r3, #28]
 801954a:	4613      	mov	r3, r2
 801954c:	005b      	lsls	r3, r3, #1
 801954e:	4413      	add	r3, r2
 8019550:	085a      	lsrs	r2, r3, #1
 8019552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019554:	69db      	ldr	r3, [r3, #28]
 8019556:	f003 0301 	and.w	r3, r3, #1
 801955a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801955c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019560:	6a1a      	ldr	r2, [r3, #32]
 8019562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019564:	899b      	ldrh	r3, [r3, #12]
 8019566:	4619      	mov	r1, r3
 8019568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801956a:	440b      	add	r3, r1
 801956c:	3b01      	subs	r3, #1
 801956e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019570:	8989      	ldrh	r1, [r1, #12]
 8019572:	fbb3 f3f1 	udiv	r3, r3, r1
 8019576:	429a      	cmp	r2, r3
 8019578:	d201      	bcs.n	801957e <find_volume+0x416>
 801957a:	230d      	movs	r3, #13
 801957c:	e06d      	b.n	801965a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019580:	f04f 32ff 	mov.w	r2, #4294967295
 8019584:	619a      	str	r2, [r3, #24]
 8019586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019588:	699a      	ldr	r2, [r3, #24]
 801958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801958c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019590:	2280      	movs	r2, #128	; 0x80
 8019592:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019598:	2b03      	cmp	r3, #3
 801959a:	d149      	bne.n	8019630 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801959e:	3338      	adds	r3, #56	; 0x38
 80195a0:	3330      	adds	r3, #48	; 0x30
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7fd ff60 	bl	8017468 <ld_word>
 80195a8:	4603      	mov	r3, r0
 80195aa:	2b01      	cmp	r3, #1
 80195ac:	d140      	bne.n	8019630 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80195ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195b0:	3301      	adds	r3, #1
 80195b2:	4619      	mov	r1, r3
 80195b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80195b6:	f7fe fa07 	bl	80179c8 <move_window>
 80195ba:	4603      	mov	r3, r0
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d137      	bne.n	8019630 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80195c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195c2:	2200      	movs	r2, #0
 80195c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80195c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195c8:	3338      	adds	r3, #56	; 0x38
 80195ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7fd ff4a 	bl	8017468 <ld_word>
 80195d4:	4603      	mov	r3, r0
 80195d6:	461a      	mov	r2, r3
 80195d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80195dc:	429a      	cmp	r2, r3
 80195de:	d127      	bne.n	8019630 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80195e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e2:	3338      	adds	r3, #56	; 0x38
 80195e4:	4618      	mov	r0, r3
 80195e6:	f7fd ff57 	bl	8017498 <ld_dword>
 80195ea:	4603      	mov	r3, r0
 80195ec:	4a1d      	ldr	r2, [pc, #116]	; (8019664 <find_volume+0x4fc>)
 80195ee:	4293      	cmp	r3, r2
 80195f0:	d11e      	bne.n	8019630 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80195f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195f4:	3338      	adds	r3, #56	; 0x38
 80195f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7fd ff4c 	bl	8017498 <ld_dword>
 8019600:	4603      	mov	r3, r0
 8019602:	4a19      	ldr	r2, [pc, #100]	; (8019668 <find_volume+0x500>)
 8019604:	4293      	cmp	r3, r2
 8019606:	d113      	bne.n	8019630 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801960a:	3338      	adds	r3, #56	; 0x38
 801960c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019610:	4618      	mov	r0, r3
 8019612:	f7fd ff41 	bl	8017498 <ld_dword>
 8019616:	4602      	mov	r2, r0
 8019618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961e:	3338      	adds	r3, #56	; 0x38
 8019620:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019624:	4618      	mov	r0, r3
 8019626:	f7fd ff37 	bl	8017498 <ld_dword>
 801962a:	4602      	mov	r2, r0
 801962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801962e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019632:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019636:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019638:	4b0c      	ldr	r3, [pc, #48]	; (801966c <find_volume+0x504>)
 801963a:	881b      	ldrh	r3, [r3, #0]
 801963c:	3301      	adds	r3, #1
 801963e:	b29a      	uxth	r2, r3
 8019640:	4b0a      	ldr	r3, [pc, #40]	; (801966c <find_volume+0x504>)
 8019642:	801a      	strh	r2, [r3, #0]
 8019644:	4b09      	ldr	r3, [pc, #36]	; (801966c <find_volume+0x504>)
 8019646:	881a      	ldrh	r2, [r3, #0]
 8019648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801964a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801964e:	4a08      	ldr	r2, [pc, #32]	; (8019670 <find_volume+0x508>)
 8019650:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8019652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019654:	f7fe f950 	bl	80178f8 <clear_lock>
#endif
	return FR_OK;
 8019658:	2300      	movs	r3, #0
}
 801965a:	4618      	mov	r0, r3
 801965c:	3758      	adds	r7, #88	; 0x58
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}
 8019662:	bf00      	nop
 8019664:	41615252 	.word	0x41615252
 8019668:	61417272 	.word	0x61417272
 801966c:	240016b8 	.word	0x240016b8
 8019670:	240016dc 	.word	0x240016dc

08019674 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b084      	sub	sp, #16
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801967e:	2309      	movs	r3, #9
 8019680:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d01c      	beq.n	80196c2 <validate+0x4e>
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d018      	beq.n	80196c2 <validate+0x4e>
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	781b      	ldrb	r3, [r3, #0]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d013      	beq.n	80196c2 <validate+0x4e>
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	889a      	ldrh	r2, [r3, #4]
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	88db      	ldrh	r3, [r3, #6]
 80196a4:	429a      	cmp	r2, r3
 80196a6:	d10c      	bne.n	80196c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	785b      	ldrb	r3, [r3, #1]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7fd fe3c 	bl	801732c <disk_status>
 80196b4:	4603      	mov	r3, r0
 80196b6:	f003 0301 	and.w	r3, r3, #1
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d101      	bne.n	80196c2 <validate+0x4e>
			res = FR_OK;
 80196be:	2300      	movs	r3, #0
 80196c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80196c2:	7bfb      	ldrb	r3, [r7, #15]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d102      	bne.n	80196ce <validate+0x5a>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	e000      	b.n	80196d0 <validate+0x5c>
 80196ce:	2300      	movs	r3, #0
 80196d0:	683a      	ldr	r2, [r7, #0]
 80196d2:	6013      	str	r3, [r2, #0]
	return res;
 80196d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80196d6:	4618      	mov	r0, r3
 80196d8:	3710      	adds	r7, #16
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}
	...

080196e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b088      	sub	sp, #32
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	60f8      	str	r0, [r7, #12]
 80196e8:	60b9      	str	r1, [r7, #8]
 80196ea:	4613      	mov	r3, r2
 80196ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80196ee:	68bb      	ldr	r3, [r7, #8]
 80196f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80196f2:	f107 0310 	add.w	r3, r7, #16
 80196f6:	4618      	mov	r0, r3
 80196f8:	f7ff fc9c 	bl	8019034 <get_ldnumber>
 80196fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80196fe:	69fb      	ldr	r3, [r7, #28]
 8019700:	2b00      	cmp	r3, #0
 8019702:	da01      	bge.n	8019708 <f_mount+0x28>
 8019704:	230b      	movs	r3, #11
 8019706:	e02b      	b.n	8019760 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019708:	4a17      	ldr	r2, [pc, #92]	; (8019768 <f_mount+0x88>)
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019710:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019712:	69bb      	ldr	r3, [r7, #24]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d005      	beq.n	8019724 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019718:	69b8      	ldr	r0, [r7, #24]
 801971a:	f7fe f8ed 	bl	80178f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801971e:	69bb      	ldr	r3, [r7, #24]
 8019720:	2200      	movs	r2, #0
 8019722:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d002      	beq.n	8019730 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	2200      	movs	r2, #0
 801972e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019730:	68fa      	ldr	r2, [r7, #12]
 8019732:	490d      	ldr	r1, [pc, #52]	; (8019768 <f_mount+0x88>)
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d002      	beq.n	8019746 <f_mount+0x66>
 8019740:	79fb      	ldrb	r3, [r7, #7]
 8019742:	2b01      	cmp	r3, #1
 8019744:	d001      	beq.n	801974a <f_mount+0x6a>
 8019746:	2300      	movs	r3, #0
 8019748:	e00a      	b.n	8019760 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801974a:	f107 010c 	add.w	r1, r7, #12
 801974e:	f107 0308 	add.w	r3, r7, #8
 8019752:	2200      	movs	r2, #0
 8019754:	4618      	mov	r0, r3
 8019756:	f7ff fd07 	bl	8019168 <find_volume>
 801975a:	4603      	mov	r3, r0
 801975c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801975e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019760:	4618      	mov	r0, r3
 8019762:	3720      	adds	r7, #32
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	240016b4 	.word	0x240016b4

0801976c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b09a      	sub	sp, #104	; 0x68
 8019770:	af00      	add	r7, sp, #0
 8019772:	60f8      	str	r0, [r7, #12]
 8019774:	60b9      	str	r1, [r7, #8]
 8019776:	4613      	mov	r3, r2
 8019778:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d101      	bne.n	8019784 <f_open+0x18>
 8019780:	2309      	movs	r3, #9
 8019782:	e1bb      	b.n	8019afc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019784:	79fb      	ldrb	r3, [r7, #7]
 8019786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801978a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801978c:	79fa      	ldrb	r2, [r7, #7]
 801978e:	f107 0114 	add.w	r1, r7, #20
 8019792:	f107 0308 	add.w	r3, r7, #8
 8019796:	4618      	mov	r0, r3
 8019798:	f7ff fce6 	bl	8019168 <find_volume>
 801979c:	4603      	mov	r3, r0
 801979e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80197a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f040 819f 	bne.w	8019aea <f_open+0x37e>
		dj.obj.fs = fs;
 80197ac:	697b      	ldr	r3, [r7, #20]
 80197ae:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80197b0:	68ba      	ldr	r2, [r7, #8]
 80197b2:	f107 0318 	add.w	r3, r7, #24
 80197b6:	4611      	mov	r1, r2
 80197b8:	4618      	mov	r0, r3
 80197ba:	f7ff fbc5 	bl	8018f48 <follow_path>
 80197be:	4603      	mov	r3, r0
 80197c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80197c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d11a      	bne.n	8019802 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80197cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80197d0:	b25b      	sxtb	r3, r3
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	da03      	bge.n	80197de <f_open+0x72>
				res = FR_INVALID_NAME;
 80197d6:	2306      	movs	r3, #6
 80197d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80197dc:	e011      	b.n	8019802 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80197de:	79fb      	ldrb	r3, [r7, #7]
 80197e0:	f023 0301 	bic.w	r3, r3, #1
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	bf14      	ite	ne
 80197e8:	2301      	movne	r3, #1
 80197ea:	2300      	moveq	r3, #0
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	461a      	mov	r2, r3
 80197f0:	f107 0318 	add.w	r3, r7, #24
 80197f4:	4611      	mov	r1, r2
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7fd ff36 	bl	8017668 <chk_lock>
 80197fc:	4603      	mov	r3, r0
 80197fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019802:	79fb      	ldrb	r3, [r7, #7]
 8019804:	f003 031c 	and.w	r3, r3, #28
 8019808:	2b00      	cmp	r3, #0
 801980a:	d07f      	beq.n	801990c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801980c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019810:	2b00      	cmp	r3, #0
 8019812:	d017      	beq.n	8019844 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019818:	2b04      	cmp	r3, #4
 801981a:	d10e      	bne.n	801983a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801981c:	f7fd ff80 	bl	8017720 <enq_lock>
 8019820:	4603      	mov	r3, r0
 8019822:	2b00      	cmp	r3, #0
 8019824:	d006      	beq.n	8019834 <f_open+0xc8>
 8019826:	f107 0318 	add.w	r3, r7, #24
 801982a:	4618      	mov	r0, r3
 801982c:	f7ff f8dc 	bl	80189e8 <dir_register>
 8019830:	4603      	mov	r3, r0
 8019832:	e000      	b.n	8019836 <f_open+0xca>
 8019834:	2312      	movs	r3, #18
 8019836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801983a:	79fb      	ldrb	r3, [r7, #7]
 801983c:	f043 0308 	orr.w	r3, r3, #8
 8019840:	71fb      	strb	r3, [r7, #7]
 8019842:	e010      	b.n	8019866 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019844:	7fbb      	ldrb	r3, [r7, #30]
 8019846:	f003 0311 	and.w	r3, r3, #17
 801984a:	2b00      	cmp	r3, #0
 801984c:	d003      	beq.n	8019856 <f_open+0xea>
					res = FR_DENIED;
 801984e:	2307      	movs	r3, #7
 8019850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019854:	e007      	b.n	8019866 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8019856:	79fb      	ldrb	r3, [r7, #7]
 8019858:	f003 0304 	and.w	r3, r3, #4
 801985c:	2b00      	cmp	r3, #0
 801985e:	d002      	beq.n	8019866 <f_open+0xfa>
 8019860:	2308      	movs	r3, #8
 8019862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8019866:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801986a:	2b00      	cmp	r3, #0
 801986c:	d168      	bne.n	8019940 <f_open+0x1d4>
 801986e:	79fb      	ldrb	r3, [r7, #7]
 8019870:	f003 0308 	and.w	r3, r3, #8
 8019874:	2b00      	cmp	r3, #0
 8019876:	d063      	beq.n	8019940 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019878:	f7fb fb6e 	bl	8014f58 <get_fattime>
 801987c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019880:	330e      	adds	r3, #14
 8019882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019884:	4618      	mov	r0, r3
 8019886:	f7fd fe45 	bl	8017514 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801988c:	3316      	adds	r3, #22
 801988e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019890:	4618      	mov	r0, r3
 8019892:	f7fd fe3f 	bl	8017514 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019898:	330b      	adds	r3, #11
 801989a:	2220      	movs	r2, #32
 801989c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80198a2:	4611      	mov	r1, r2
 80198a4:	4618      	mov	r0, r3
 80198a6:	f7fe fe17 	bl	80184d8 <ld_clust>
 80198aa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80198b0:	2200      	movs	r2, #0
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7fe fe2f 	bl	8018516 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80198b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198ba:	331c      	adds	r3, #28
 80198bc:	2100      	movs	r1, #0
 80198be:	4618      	mov	r0, r3
 80198c0:	f7fd fe28 	bl	8017514 <st_dword>
					fs->wflag = 1;
 80198c4:	697b      	ldr	r3, [r7, #20]
 80198c6:	2201      	movs	r2, #1
 80198c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80198ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d037      	beq.n	8019940 <f_open+0x1d4>
						dw = fs->winsect;
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198d4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80198d6:	f107 0318 	add.w	r3, r7, #24
 80198da:	2200      	movs	r2, #0
 80198dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80198de:	4618      	mov	r0, r3
 80198e0:	f7fe fb1f 	bl	8017f22 <remove_chain>
 80198e4:	4603      	mov	r3, r0
 80198e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80198ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d126      	bne.n	8019940 <f_open+0x1d4>
							res = move_window(fs, dw);
 80198f2:	697b      	ldr	r3, [r7, #20]
 80198f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7fe f866 	bl	80179c8 <move_window>
 80198fc:	4603      	mov	r3, r0
 80198fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019906:	3a01      	subs	r2, #1
 8019908:	615a      	str	r2, [r3, #20]
 801990a:	e019      	b.n	8019940 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801990c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019910:	2b00      	cmp	r3, #0
 8019912:	d115      	bne.n	8019940 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019914:	7fbb      	ldrb	r3, [r7, #30]
 8019916:	f003 0310 	and.w	r3, r3, #16
 801991a:	2b00      	cmp	r3, #0
 801991c:	d003      	beq.n	8019926 <f_open+0x1ba>
					res = FR_NO_FILE;
 801991e:	2304      	movs	r3, #4
 8019920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019924:	e00c      	b.n	8019940 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019926:	79fb      	ldrb	r3, [r7, #7]
 8019928:	f003 0302 	and.w	r3, r3, #2
 801992c:	2b00      	cmp	r3, #0
 801992e:	d007      	beq.n	8019940 <f_open+0x1d4>
 8019930:	7fbb      	ldrb	r3, [r7, #30]
 8019932:	f003 0301 	and.w	r3, r3, #1
 8019936:	2b00      	cmp	r3, #0
 8019938:	d002      	beq.n	8019940 <f_open+0x1d4>
						res = FR_DENIED;
 801993a:	2307      	movs	r3, #7
 801993c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019944:	2b00      	cmp	r3, #0
 8019946:	d128      	bne.n	801999a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019948:	79fb      	ldrb	r3, [r7, #7]
 801994a:	f003 0308 	and.w	r3, r3, #8
 801994e:	2b00      	cmp	r3, #0
 8019950:	d003      	beq.n	801995a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8019952:	79fb      	ldrb	r3, [r7, #7]
 8019954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019958:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801995a:	697b      	ldr	r3, [r7, #20]
 801995c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8019962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8019968:	79fb      	ldrb	r3, [r7, #7]
 801996a:	f023 0301 	bic.w	r3, r3, #1
 801996e:	2b00      	cmp	r3, #0
 8019970:	bf14      	ite	ne
 8019972:	2301      	movne	r3, #1
 8019974:	2300      	moveq	r3, #0
 8019976:	b2db      	uxtb	r3, r3
 8019978:	461a      	mov	r2, r3
 801997a:	f107 0318 	add.w	r3, r7, #24
 801997e:	4611      	mov	r1, r2
 8019980:	4618      	mov	r0, r3
 8019982:	f7fd feef 	bl	8017764 <inc_lock>
 8019986:	4602      	mov	r2, r0
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	691b      	ldr	r3, [r3, #16]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d102      	bne.n	801999a <f_open+0x22e>
 8019994:	2302      	movs	r3, #2
 8019996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801999a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f040 80a3 	bne.w	8019aea <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80199a4:	697b      	ldr	r3, [r7, #20]
 80199a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199a8:	4611      	mov	r1, r2
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7fe fd94 	bl	80184d8 <ld_clust>
 80199b0:	4602      	mov	r2, r0
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80199b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199b8:	331c      	adds	r3, #28
 80199ba:	4618      	mov	r0, r3
 80199bc:	f7fd fd6c 	bl	8017498 <ld_dword>
 80199c0:	4602      	mov	r2, r0
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	2200      	movs	r2, #0
 80199ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80199cc:	697a      	ldr	r2, [r7, #20]
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80199d2:	697b      	ldr	r3, [r7, #20]
 80199d4:	88da      	ldrh	r2, [r3, #6]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	79fa      	ldrb	r2, [r7, #7]
 80199de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	2200      	movs	r2, #0
 80199e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2200      	movs	r2, #0
 80199ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2200      	movs	r2, #0
 80199f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	3330      	adds	r3, #48	; 0x30
 80199f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80199fa:	2100      	movs	r1, #0
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7fd fdd6 	bl	80175ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019a02:	79fb      	ldrb	r3, [r7, #7]
 8019a04:	f003 0320 	and.w	r3, r3, #32
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d06e      	beq.n	8019aea <f_open+0x37e>
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	68db      	ldr	r3, [r3, #12]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d06a      	beq.n	8019aea <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	68da      	ldr	r2, [r3, #12]
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019a1c:	697b      	ldr	r3, [r7, #20]
 8019a1e:	895b      	ldrh	r3, [r3, #10]
 8019a20:	461a      	mov	r2, r3
 8019a22:	697b      	ldr	r3, [r7, #20]
 8019a24:	899b      	ldrh	r3, [r3, #12]
 8019a26:	fb02 f303 	mul.w	r3, r2, r3
 8019a2a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	689b      	ldr	r3, [r3, #8]
 8019a30:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	68db      	ldr	r3, [r3, #12]
 8019a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019a38:	e016      	b.n	8019a68 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7fe f87f 	bl	8017b42 <get_fat>
 8019a44:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019a48:	2b01      	cmp	r3, #1
 8019a4a:	d802      	bhi.n	8019a52 <f_open+0x2e6>
 8019a4c:	2302      	movs	r3, #2
 8019a4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a58:	d102      	bne.n	8019a60 <f_open+0x2f4>
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a64:	1ad3      	subs	r3, r2, r3
 8019a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019a68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d103      	bne.n	8019a78 <f_open+0x30c>
 8019a70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d8e0      	bhi.n	8019a3a <f_open+0x2ce>
				}
				fp->clust = clst;
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019a7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019a7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d131      	bne.n	8019aea <f_open+0x37e>
 8019a86:	697b      	ldr	r3, [r7, #20]
 8019a88:	899b      	ldrh	r3, [r3, #12]
 8019a8a:	461a      	mov	r2, r3
 8019a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a92:	fb01 f202 	mul.w	r2, r1, r2
 8019a96:	1a9b      	subs	r3, r3, r2
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d026      	beq.n	8019aea <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019a9c:	697b      	ldr	r3, [r7, #20]
 8019a9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	f7fe f82f 	bl	8017b04 <clust2sect>
 8019aa6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d103      	bne.n	8019ab6 <f_open+0x34a>
						res = FR_INT_ERR;
 8019aae:	2302      	movs	r3, #2
 8019ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019ab4:	e019      	b.n	8019aea <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	899b      	ldrh	r3, [r3, #12]
 8019aba:	461a      	mov	r2, r3
 8019abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8019ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ac4:	441a      	add	r2, r3
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019aca:	697b      	ldr	r3, [r7, #20]
 8019acc:	7858      	ldrb	r0, [r3, #1]
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	6a1a      	ldr	r2, [r3, #32]
 8019ad8:	2301      	movs	r3, #1
 8019ada:	f7fd fc67 	bl	80173ac <disk_read>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d002      	beq.n	8019aea <f_open+0x37e>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019aea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d002      	beq.n	8019af8 <f_open+0x38c>
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	2200      	movs	r2, #0
 8019af6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019af8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	3768      	adds	r7, #104	; 0x68
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd80      	pop	{r7, pc}

08019b04 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b08c      	sub	sp, #48	; 0x30
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	60f8      	str	r0, [r7, #12]
 8019b0c:	60b9      	str	r1, [r7, #8]
 8019b0e:	607a      	str	r2, [r7, #4]
 8019b10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	2200      	movs	r2, #0
 8019b1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	f107 0210 	add.w	r2, r7, #16
 8019b22:	4611      	mov	r1, r2
 8019b24:	4618      	mov	r0, r3
 8019b26:	f7ff fda5 	bl	8019674 <validate>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d107      	bne.n	8019b48 <f_write+0x44>
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	7d5b      	ldrb	r3, [r3, #21]
 8019b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d002      	beq.n	8019b4e <f_write+0x4a>
 8019b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019b4c:	e16a      	b.n	8019e24 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	7d1b      	ldrb	r3, [r3, #20]
 8019b52:	f003 0302 	and.w	r3, r3, #2
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d101      	bne.n	8019b5e <f_write+0x5a>
 8019b5a:	2307      	movs	r3, #7
 8019b5c:	e162      	b.n	8019e24 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	699a      	ldr	r2, [r3, #24]
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	441a      	add	r2, r3
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	699b      	ldr	r3, [r3, #24]
 8019b6a:	429a      	cmp	r2, r3
 8019b6c:	f080 814c 	bcs.w	8019e08 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	699b      	ldr	r3, [r3, #24]
 8019b74:	43db      	mvns	r3, r3
 8019b76:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019b78:	e146      	b.n	8019e08 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	699b      	ldr	r3, [r3, #24]
 8019b7e:	693a      	ldr	r2, [r7, #16]
 8019b80:	8992      	ldrh	r2, [r2, #12]
 8019b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b86:	fb01 f202 	mul.w	r2, r1, r2
 8019b8a:	1a9b      	subs	r3, r3, r2
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	f040 80f1 	bne.w	8019d74 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	699b      	ldr	r3, [r3, #24]
 8019b96:	693a      	ldr	r2, [r7, #16]
 8019b98:	8992      	ldrh	r2, [r2, #12]
 8019b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b9e:	693a      	ldr	r2, [r7, #16]
 8019ba0:	8952      	ldrh	r2, [r2, #10]
 8019ba2:	3a01      	subs	r2, #1
 8019ba4:	4013      	ands	r3, r2
 8019ba6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019ba8:	69bb      	ldr	r3, [r7, #24]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d143      	bne.n	8019c36 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	699b      	ldr	r3, [r3, #24]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d10c      	bne.n	8019bd0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	689b      	ldr	r3, [r3, #8]
 8019bba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d11a      	bne.n	8019bf8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	2100      	movs	r1, #0
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f7fe fa10 	bl	8017fec <create_chain>
 8019bcc:	62b8      	str	r0, [r7, #40]	; 0x28
 8019bce:	e013      	b.n	8019bf8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d007      	beq.n	8019be8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	699b      	ldr	r3, [r3, #24]
 8019bdc:	4619      	mov	r1, r3
 8019bde:	68f8      	ldr	r0, [r7, #12]
 8019be0:	f7fe fa9c 	bl	801811c <clmt_clust>
 8019be4:	62b8      	str	r0, [r7, #40]	; 0x28
 8019be6:	e007      	b.n	8019bf8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019be8:	68fa      	ldr	r2, [r7, #12]
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	69db      	ldr	r3, [r3, #28]
 8019bee:	4619      	mov	r1, r3
 8019bf0:	4610      	mov	r0, r2
 8019bf2:	f7fe f9fb 	bl	8017fec <create_chain>
 8019bf6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	f000 8109 	beq.w	8019e12 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d104      	bne.n	8019c10 <f_write+0x10c>
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	2202      	movs	r2, #2
 8019c0a:	755a      	strb	r2, [r3, #21]
 8019c0c:	2302      	movs	r3, #2
 8019c0e:	e109      	b.n	8019e24 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c16:	d104      	bne.n	8019c22 <f_write+0x11e>
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	2201      	movs	r2, #1
 8019c1c:	755a      	strb	r2, [r3, #21]
 8019c1e:	2301      	movs	r3, #1
 8019c20:	e100      	b.n	8019e24 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c26:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	689b      	ldr	r3, [r3, #8]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d102      	bne.n	8019c36 <f_write+0x132>
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	7d1b      	ldrb	r3, [r3, #20]
 8019c3a:	b25b      	sxtb	r3, r3
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	da18      	bge.n	8019c72 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	7858      	ldrb	r0, [r3, #1]
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	6a1a      	ldr	r2, [r3, #32]
 8019c4e:	2301      	movs	r3, #1
 8019c50:	f7fd fbcc 	bl	80173ec <disk_write>
 8019c54:	4603      	mov	r3, r0
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d004      	beq.n	8019c64 <f_write+0x160>
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	2201      	movs	r2, #1
 8019c5e:	755a      	strb	r2, [r3, #21]
 8019c60:	2301      	movs	r3, #1
 8019c62:	e0df      	b.n	8019e24 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	7d1b      	ldrb	r3, [r3, #20]
 8019c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c6c:	b2da      	uxtb	r2, r3
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019c72:	693a      	ldr	r2, [r7, #16]
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	69db      	ldr	r3, [r3, #28]
 8019c78:	4619      	mov	r1, r3
 8019c7a:	4610      	mov	r0, r2
 8019c7c:	f7fd ff42 	bl	8017b04 <clust2sect>
 8019c80:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019c82:	697b      	ldr	r3, [r7, #20]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d104      	bne.n	8019c92 <f_write+0x18e>
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	2202      	movs	r2, #2
 8019c8c:	755a      	strb	r2, [r3, #21]
 8019c8e:	2302      	movs	r3, #2
 8019c90:	e0c8      	b.n	8019e24 <f_write+0x320>
			sect += csect;
 8019c92:	697a      	ldr	r2, [r7, #20]
 8019c94:	69bb      	ldr	r3, [r7, #24]
 8019c96:	4413      	add	r3, r2
 8019c98:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019c9a:	693b      	ldr	r3, [r7, #16]
 8019c9c:	899b      	ldrh	r3, [r3, #12]
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ca6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019ca8:	6a3b      	ldr	r3, [r7, #32]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d043      	beq.n	8019d36 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019cae:	69ba      	ldr	r2, [r7, #24]
 8019cb0:	6a3b      	ldr	r3, [r7, #32]
 8019cb2:	4413      	add	r3, r2
 8019cb4:	693a      	ldr	r2, [r7, #16]
 8019cb6:	8952      	ldrh	r2, [r2, #10]
 8019cb8:	4293      	cmp	r3, r2
 8019cba:	d905      	bls.n	8019cc8 <f_write+0x1c4>
					cc = fs->csize - csect;
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	895b      	ldrh	r3, [r3, #10]
 8019cc0:	461a      	mov	r2, r3
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	1ad3      	subs	r3, r2, r3
 8019cc6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019cc8:	693b      	ldr	r3, [r7, #16]
 8019cca:	7858      	ldrb	r0, [r3, #1]
 8019ccc:	6a3b      	ldr	r3, [r7, #32]
 8019cce:	697a      	ldr	r2, [r7, #20]
 8019cd0:	69f9      	ldr	r1, [r7, #28]
 8019cd2:	f7fd fb8b 	bl	80173ec <disk_write>
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d004      	beq.n	8019ce6 <f_write+0x1e2>
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	2201      	movs	r2, #1
 8019ce0:	755a      	strb	r2, [r3, #21]
 8019ce2:	2301      	movs	r3, #1
 8019ce4:	e09e      	b.n	8019e24 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	6a1a      	ldr	r2, [r3, #32]
 8019cea:	697b      	ldr	r3, [r7, #20]
 8019cec:	1ad3      	subs	r3, r2, r3
 8019cee:	6a3a      	ldr	r2, [r7, #32]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	d918      	bls.n	8019d26 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	6a1a      	ldr	r2, [r3, #32]
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	1ad3      	subs	r3, r2, r3
 8019d02:	693a      	ldr	r2, [r7, #16]
 8019d04:	8992      	ldrh	r2, [r2, #12]
 8019d06:	fb02 f303 	mul.w	r3, r2, r3
 8019d0a:	69fa      	ldr	r2, [r7, #28]
 8019d0c:	18d1      	adds	r1, r2, r3
 8019d0e:	693b      	ldr	r3, [r7, #16]
 8019d10:	899b      	ldrh	r3, [r3, #12]
 8019d12:	461a      	mov	r2, r3
 8019d14:	f7fd fc2a 	bl	801756c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	7d1b      	ldrb	r3, [r3, #20]
 8019d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d20:	b2da      	uxtb	r2, r3
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019d26:	693b      	ldr	r3, [r7, #16]
 8019d28:	899b      	ldrh	r3, [r3, #12]
 8019d2a:	461a      	mov	r2, r3
 8019d2c:	6a3b      	ldr	r3, [r7, #32]
 8019d2e:	fb02 f303 	mul.w	r3, r2, r3
 8019d32:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019d34:	e04b      	b.n	8019dce <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	6a1b      	ldr	r3, [r3, #32]
 8019d3a:	697a      	ldr	r2, [r7, #20]
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d016      	beq.n	8019d6e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	699a      	ldr	r2, [r3, #24]
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	d210      	bcs.n	8019d6e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019d4c:	693b      	ldr	r3, [r7, #16]
 8019d4e:	7858      	ldrb	r0, [r3, #1]
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019d56:	2301      	movs	r3, #1
 8019d58:	697a      	ldr	r2, [r7, #20]
 8019d5a:	f7fd fb27 	bl	80173ac <disk_read>
 8019d5e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d004      	beq.n	8019d6e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	2201      	movs	r2, #1
 8019d68:	755a      	strb	r2, [r3, #21]
 8019d6a:	2301      	movs	r3, #1
 8019d6c:	e05a      	b.n	8019e24 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	697a      	ldr	r2, [r7, #20]
 8019d72:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019d74:	693b      	ldr	r3, [r7, #16]
 8019d76:	899b      	ldrh	r3, [r3, #12]
 8019d78:	4618      	mov	r0, r3
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	699b      	ldr	r3, [r3, #24]
 8019d7e:	693a      	ldr	r2, [r7, #16]
 8019d80:	8992      	ldrh	r2, [r2, #12]
 8019d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8019d86:	fb01 f202 	mul.w	r2, r1, r2
 8019d8a:	1a9b      	subs	r3, r3, r2
 8019d8c:	1ac3      	subs	r3, r0, r3
 8019d8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d901      	bls.n	8019d9c <f_write+0x298>
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	699b      	ldr	r3, [r3, #24]
 8019da6:	693a      	ldr	r2, [r7, #16]
 8019da8:	8992      	ldrh	r2, [r2, #12]
 8019daa:	fbb3 f0f2 	udiv	r0, r3, r2
 8019dae:	fb00 f202 	mul.w	r2, r0, r2
 8019db2:	1a9b      	subs	r3, r3, r2
 8019db4:	440b      	add	r3, r1
 8019db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019db8:	69f9      	ldr	r1, [r7, #28]
 8019dba:	4618      	mov	r0, r3
 8019dbc:	f7fd fbd6 	bl	801756c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	7d1b      	ldrb	r3, [r3, #20]
 8019dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019dc8:	b2da      	uxtb	r2, r3
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019dce:	69fa      	ldr	r2, [r7, #28]
 8019dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd2:	4413      	add	r3, r2
 8019dd4:	61fb      	str	r3, [r7, #28]
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	699a      	ldr	r2, [r3, #24]
 8019dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ddc:	441a      	add	r2, r3
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	619a      	str	r2, [r3, #24]
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	68da      	ldr	r2, [r3, #12]
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	699b      	ldr	r3, [r3, #24]
 8019dea:	429a      	cmp	r2, r3
 8019dec:	bf38      	it	cc
 8019dee:	461a      	movcc	r2, r3
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	60da      	str	r2, [r3, #12]
 8019df4:	683b      	ldr	r3, [r7, #0]
 8019df6:	681a      	ldr	r2, [r3, #0]
 8019df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dfa:	441a      	add	r2, r3
 8019dfc:	683b      	ldr	r3, [r7, #0]
 8019dfe:	601a      	str	r2, [r3, #0]
 8019e00:	687a      	ldr	r2, [r7, #4]
 8019e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e04:	1ad3      	subs	r3, r2, r3
 8019e06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	f47f aeb5 	bne.w	8019b7a <f_write+0x76>
 8019e10:	e000      	b.n	8019e14 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019e12:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	7d1b      	ldrb	r3, [r3, #20]
 8019e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e1c:	b2da      	uxtb	r2, r3
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019e22:	2300      	movs	r3, #0
}
 8019e24:	4618      	mov	r0, r3
 8019e26:	3730      	adds	r7, #48	; 0x30
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}

08019e2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b086      	sub	sp, #24
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	f107 0208 	add.w	r2, r7, #8
 8019e3a:	4611      	mov	r1, r2
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7ff fc19 	bl	8019674 <validate>
 8019e42:	4603      	mov	r3, r0
 8019e44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019e46:	7dfb      	ldrb	r3, [r7, #23]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d168      	bne.n	8019f1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	7d1b      	ldrb	r3, [r3, #20]
 8019e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d062      	beq.n	8019f1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	7d1b      	ldrb	r3, [r3, #20]
 8019e5c:	b25b      	sxtb	r3, r3
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	da15      	bge.n	8019e8e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019e62:	68bb      	ldr	r3, [r7, #8]
 8019e64:	7858      	ldrb	r0, [r3, #1]
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6a1a      	ldr	r2, [r3, #32]
 8019e70:	2301      	movs	r3, #1
 8019e72:	f7fd fabb 	bl	80173ec <disk_write>
 8019e76:	4603      	mov	r3, r0
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d001      	beq.n	8019e80 <f_sync+0x54>
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	e04f      	b.n	8019f20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	7d1b      	ldrb	r3, [r3, #20]
 8019e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e88:	b2da      	uxtb	r2, r3
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019e8e:	f7fb f863 	bl	8014f58 <get_fattime>
 8019e92:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019e94:	68ba      	ldr	r2, [r7, #8]
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e9a:	4619      	mov	r1, r3
 8019e9c:	4610      	mov	r0, r2
 8019e9e:	f7fd fd93 	bl	80179c8 <move_window>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019ea6:	7dfb      	ldrb	r3, [r7, #23]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d138      	bne.n	8019f1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eb0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	330b      	adds	r3, #11
 8019eb6:	781a      	ldrb	r2, [r3, #0]
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	330b      	adds	r3, #11
 8019ebc:	f042 0220 	orr.w	r2, r2, #32
 8019ec0:	b2d2      	uxtb	r2, r2
 8019ec2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	6818      	ldr	r0, [r3, #0]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	689b      	ldr	r3, [r3, #8]
 8019ecc:	461a      	mov	r2, r3
 8019ece:	68f9      	ldr	r1, [r7, #12]
 8019ed0:	f7fe fb21 	bl	8018516 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	f103 021c 	add.w	r2, r3, #28
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	68db      	ldr	r3, [r3, #12]
 8019ede:	4619      	mov	r1, r3
 8019ee0:	4610      	mov	r0, r2
 8019ee2:	f7fd fb17 	bl	8017514 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	3316      	adds	r3, #22
 8019eea:	6939      	ldr	r1, [r7, #16]
 8019eec:	4618      	mov	r0, r3
 8019eee:	f7fd fb11 	bl	8017514 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	3312      	adds	r3, #18
 8019ef6:	2100      	movs	r1, #0
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7fd faf0 	bl	80174de <st_word>
					fs->wflag = 1;
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	2201      	movs	r2, #1
 8019f02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	4618      	mov	r0, r3
 8019f08:	f7fd fd8c 	bl	8017a24 <sync_fs>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	7d1b      	ldrb	r3, [r3, #20]
 8019f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019f18:	b2da      	uxtb	r2, r3
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019f20:	4618      	mov	r0, r3
 8019f22:	3718      	adds	r7, #24
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}

08019f28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b084      	sub	sp, #16
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f7ff ff7b 	bl	8019e2c <f_sync>
 8019f36:	4603      	mov	r3, r0
 8019f38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019f3a:	7bfb      	ldrb	r3, [r7, #15]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d118      	bne.n	8019f72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f107 0208 	add.w	r2, r7, #8
 8019f46:	4611      	mov	r1, r2
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f7ff fb93 	bl	8019674 <validate>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019f52:	7bfb      	ldrb	r3, [r7, #15]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d10c      	bne.n	8019f72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	691b      	ldr	r3, [r3, #16]
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	f7fd fc8f 	bl	8017880 <dec_lock>
 8019f62:	4603      	mov	r3, r0
 8019f64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019f66:	7bfb      	ldrb	r3, [r7, #15]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d102      	bne.n	8019f72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	2200      	movs	r2, #0
 8019f70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f74:	4618      	mov	r0, r3
 8019f76:	3710      	adds	r7, #16
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bd80      	pop	{r7, pc}

08019f7c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b084      	sub	sp, #16
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
 8019f84:	460b      	mov	r3, r1
 8019f86:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8019f88:	78fb      	ldrb	r3, [r7, #3]
 8019f8a:	2b0a      	cmp	r3, #10
 8019f8c:	d103      	bne.n	8019f96 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8019f8e:	210d      	movs	r1, #13
 8019f90:	6878      	ldr	r0, [r7, #4]
 8019f92:	f7ff fff3 	bl	8019f7c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	685b      	ldr	r3, [r3, #4]
 8019f9a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	db25      	blt.n	8019fee <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	1c5a      	adds	r2, r3, #1
 8019fa6:	60fa      	str	r2, [r7, #12]
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	4413      	add	r3, r2
 8019fac:	78fa      	ldrb	r2, [r7, #3]
 8019fae:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	2b3c      	cmp	r3, #60	; 0x3c
 8019fb4:	dd12      	ble.n	8019fdc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	6818      	ldr	r0, [r3, #0]
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f103 010c 	add.w	r1, r3, #12
 8019fc0:	68fa      	ldr	r2, [r7, #12]
 8019fc2:	f107 0308 	add.w	r3, r7, #8
 8019fc6:	f7ff fd9d 	bl	8019b04 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019fca:	68ba      	ldr	r2, [r7, #8]
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d101      	bne.n	8019fd6 <putc_bfd+0x5a>
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	e001      	b.n	8019fda <putc_bfd+0x5e>
 8019fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8019fda:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	68fa      	ldr	r2, [r7, #12]
 8019fe0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	689b      	ldr	r3, [r3, #8]
 8019fe6:	1c5a      	adds	r2, r3, #1
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	609a      	str	r2, [r3, #8]
 8019fec:	e000      	b.n	8019ff0 <putc_bfd+0x74>
	if (i < 0) return;
 8019fee:	bf00      	nop
}
 8019ff0:	3710      	adds	r7, #16
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}

08019ff6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8019ff6:	b580      	push	{r7, lr}
 8019ff8:	b084      	sub	sp, #16
 8019ffa:	af00      	add	r7, sp, #0
 8019ffc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	685b      	ldr	r3, [r3, #4]
 801a002:	2b00      	cmp	r3, #0
 801a004:	db16      	blt.n	801a034 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6818      	ldr	r0, [r3, #0]
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f103 010c 	add.w	r1, r3, #12
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	685b      	ldr	r3, [r3, #4]
 801a014:	461a      	mov	r2, r3
 801a016:	f107 030c 	add.w	r3, r7, #12
 801a01a:	f7ff fd73 	bl	8019b04 <f_write>
 801a01e:	4603      	mov	r3, r0
 801a020:	2b00      	cmp	r3, #0
 801a022:	d107      	bne.n	801a034 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	68fa      	ldr	r2, [r7, #12]
 801a02a:	4293      	cmp	r3, r2
 801a02c:	d102      	bne.n	801a034 <putc_flush+0x3e>
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	689b      	ldr	r3, [r3, #8]
 801a032:	e001      	b.n	801a038 <putc_flush+0x42>
	return EOF;
 801a034:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a038:	4618      	mov	r0, r3
 801a03a:	3710      	adds	r7, #16
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}

0801a040 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a040:	b480      	push	{r7}
 801a042:	b083      	sub	sp, #12
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	683a      	ldr	r2, [r7, #0]
 801a04e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	2200      	movs	r2, #0
 801a054:	605a      	str	r2, [r3, #4]
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	685a      	ldr	r2, [r3, #4]
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	609a      	str	r2, [r3, #8]
}
 801a05e:	bf00      	nop
 801a060:	370c      	adds	r7, #12
 801a062:	46bd      	mov	sp, r7
 801a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a068:	4770      	bx	lr

0801a06a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a06a:	b580      	push	{r7, lr}
 801a06c:	b096      	sub	sp, #88	; 0x58
 801a06e:	af00      	add	r7, sp, #0
 801a070:	6078      	str	r0, [r7, #4]
 801a072:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a074:	f107 030c 	add.w	r3, r7, #12
 801a078:	6839      	ldr	r1, [r7, #0]
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7ff ffe0 	bl	801a040 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a080:	e009      	b.n	801a096 <f_puts+0x2c>
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	1c5a      	adds	r2, r3, #1
 801a086:	607a      	str	r2, [r7, #4]
 801a088:	781a      	ldrb	r2, [r3, #0]
 801a08a:	f107 030c 	add.w	r3, r7, #12
 801a08e:	4611      	mov	r1, r2
 801a090:	4618      	mov	r0, r3
 801a092:	f7ff ff73 	bl	8019f7c <putc_bfd>
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	781b      	ldrb	r3, [r3, #0]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d1f1      	bne.n	801a082 <f_puts+0x18>
	return putc_flush(&pb);
 801a09e:	f107 030c 	add.w	r3, r7, #12
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f7ff ffa7 	bl	8019ff6 <putc_flush>
 801a0a8:	4603      	mov	r3, r0
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	3758      	adds	r7, #88	; 0x58
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}
	...

0801a0b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a0b4:	b480      	push	{r7}
 801a0b6:	b087      	sub	sp, #28
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	60f8      	str	r0, [r7, #12]
 801a0bc:	60b9      	str	r1, [r7, #8]
 801a0be:	4613      	mov	r3, r2
 801a0c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a0c2:	2301      	movs	r3, #1
 801a0c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a0ca:	4b1f      	ldr	r3, [pc, #124]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0cc:	7a5b      	ldrb	r3, [r3, #9]
 801a0ce:	b2db      	uxtb	r3, r3
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d131      	bne.n	801a138 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a0d4:	4b1c      	ldr	r3, [pc, #112]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0d6:	7a5b      	ldrb	r3, [r3, #9]
 801a0d8:	b2db      	uxtb	r3, r3
 801a0da:	461a      	mov	r2, r3
 801a0dc:	4b1a      	ldr	r3, [pc, #104]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0de:	2100      	movs	r1, #0
 801a0e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a0e2:	4b19      	ldr	r3, [pc, #100]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0e4:	7a5b      	ldrb	r3, [r3, #9]
 801a0e6:	b2db      	uxtb	r3, r3
 801a0e8:	4a17      	ldr	r2, [pc, #92]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0ea:	009b      	lsls	r3, r3, #2
 801a0ec:	4413      	add	r3, r2
 801a0ee:	68fa      	ldr	r2, [r7, #12]
 801a0f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a0f2:	4b15      	ldr	r3, [pc, #84]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0f4:	7a5b      	ldrb	r3, [r3, #9]
 801a0f6:	b2db      	uxtb	r3, r3
 801a0f8:	461a      	mov	r2, r3
 801a0fa:	4b13      	ldr	r3, [pc, #76]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a0fc:	4413      	add	r3, r2
 801a0fe:	79fa      	ldrb	r2, [r7, #7]
 801a100:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a102:	4b11      	ldr	r3, [pc, #68]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a104:	7a5b      	ldrb	r3, [r3, #9]
 801a106:	b2db      	uxtb	r3, r3
 801a108:	1c5a      	adds	r2, r3, #1
 801a10a:	b2d1      	uxtb	r1, r2
 801a10c:	4a0e      	ldr	r2, [pc, #56]	; (801a148 <FATFS_LinkDriverEx+0x94>)
 801a10e:	7251      	strb	r1, [r2, #9]
 801a110:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a112:	7dbb      	ldrb	r3, [r7, #22]
 801a114:	3330      	adds	r3, #48	; 0x30
 801a116:	b2da      	uxtb	r2, r3
 801a118:	68bb      	ldr	r3, [r7, #8]
 801a11a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a11c:	68bb      	ldr	r3, [r7, #8]
 801a11e:	3301      	adds	r3, #1
 801a120:	223a      	movs	r2, #58	; 0x3a
 801a122:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	3302      	adds	r3, #2
 801a128:	222f      	movs	r2, #47	; 0x2f
 801a12a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a12c:	68bb      	ldr	r3, [r7, #8]
 801a12e:	3303      	adds	r3, #3
 801a130:	2200      	movs	r2, #0
 801a132:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a134:	2300      	movs	r3, #0
 801a136:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a138:	7dfb      	ldrb	r3, [r7, #23]
}
 801a13a:	4618      	mov	r0, r3
 801a13c:	371c      	adds	r7, #28
 801a13e:	46bd      	mov	sp, r7
 801a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a144:	4770      	bx	lr
 801a146:	bf00      	nop
 801a148:	240018dc 	.word	0x240018dc

0801a14c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
 801a154:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a156:	2200      	movs	r2, #0
 801a158:	6839      	ldr	r1, [r7, #0]
 801a15a:	6878      	ldr	r0, [r7, #4]
 801a15c:	f7ff ffaa 	bl	801a0b4 <FATFS_LinkDriverEx>
 801a160:	4603      	mov	r3, r0
}
 801a162:	4618      	mov	r0, r3
 801a164:	3708      	adds	r7, #8
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
	...

0801a16c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a16c:	b480      	push	{r7}
 801a16e:	b085      	sub	sp, #20
 801a170:	af00      	add	r7, sp, #0
 801a172:	4603      	mov	r3, r0
 801a174:	6039      	str	r1, [r7, #0]
 801a176:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a178:	88fb      	ldrh	r3, [r7, #6]
 801a17a:	2b7f      	cmp	r3, #127	; 0x7f
 801a17c:	d802      	bhi.n	801a184 <ff_convert+0x18>
		c = chr;
 801a17e:	88fb      	ldrh	r3, [r7, #6]
 801a180:	81fb      	strh	r3, [r7, #14]
 801a182:	e025      	b.n	801a1d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d00b      	beq.n	801a1a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a18a:	88fb      	ldrh	r3, [r7, #6]
 801a18c:	2bff      	cmp	r3, #255	; 0xff
 801a18e:	d805      	bhi.n	801a19c <ff_convert+0x30>
 801a190:	88fb      	ldrh	r3, [r7, #6]
 801a192:	3b80      	subs	r3, #128	; 0x80
 801a194:	4a12      	ldr	r2, [pc, #72]	; (801a1e0 <ff_convert+0x74>)
 801a196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a19a:	e000      	b.n	801a19e <ff_convert+0x32>
 801a19c:	2300      	movs	r3, #0
 801a19e:	81fb      	strh	r3, [r7, #14]
 801a1a0:	e016      	b.n	801a1d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	81fb      	strh	r3, [r7, #14]
 801a1a6:	e009      	b.n	801a1bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a1a8:	89fb      	ldrh	r3, [r7, #14]
 801a1aa:	4a0d      	ldr	r2, [pc, #52]	; (801a1e0 <ff_convert+0x74>)
 801a1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a1b0:	88fa      	ldrh	r2, [r7, #6]
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	d006      	beq.n	801a1c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a1b6:	89fb      	ldrh	r3, [r7, #14]
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	81fb      	strh	r3, [r7, #14]
 801a1bc:	89fb      	ldrh	r3, [r7, #14]
 801a1be:	2b7f      	cmp	r3, #127	; 0x7f
 801a1c0:	d9f2      	bls.n	801a1a8 <ff_convert+0x3c>
 801a1c2:	e000      	b.n	801a1c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a1c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a1c6:	89fb      	ldrh	r3, [r7, #14]
 801a1c8:	3380      	adds	r3, #128	; 0x80
 801a1ca:	b29b      	uxth	r3, r3
 801a1cc:	b2db      	uxtb	r3, r3
 801a1ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a1d0:	89fb      	ldrh	r3, [r7, #14]
}
 801a1d2:	4618      	mov	r0, r3
 801a1d4:	3714      	adds	r7, #20
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop
 801a1e0:	0801f9e0 	.word	0x0801f9e0

0801a1e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a1e4:	b480      	push	{r7}
 801a1e6:	b087      	sub	sp, #28
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a1ee:	88fb      	ldrh	r3, [r7, #6]
 801a1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a1f4:	d201      	bcs.n	801a1fa <ff_wtoupper+0x16>
 801a1f6:	4b3e      	ldr	r3, [pc, #248]	; (801a2f0 <ff_wtoupper+0x10c>)
 801a1f8:	e000      	b.n	801a1fc <ff_wtoupper+0x18>
 801a1fa:	4b3e      	ldr	r3, [pc, #248]	; (801a2f4 <ff_wtoupper+0x110>)
 801a1fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	1c9a      	adds	r2, r3, #2
 801a202:	617a      	str	r2, [r7, #20]
 801a204:	881b      	ldrh	r3, [r3, #0]
 801a206:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a208:	8a7b      	ldrh	r3, [r7, #18]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d068      	beq.n	801a2e0 <ff_wtoupper+0xfc>
 801a20e:	88fa      	ldrh	r2, [r7, #6]
 801a210:	8a7b      	ldrh	r3, [r7, #18]
 801a212:	429a      	cmp	r2, r3
 801a214:	d364      	bcc.n	801a2e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a216:	697b      	ldr	r3, [r7, #20]
 801a218:	1c9a      	adds	r2, r3, #2
 801a21a:	617a      	str	r2, [r7, #20]
 801a21c:	881b      	ldrh	r3, [r3, #0]
 801a21e:	823b      	strh	r3, [r7, #16]
 801a220:	8a3b      	ldrh	r3, [r7, #16]
 801a222:	0a1b      	lsrs	r3, r3, #8
 801a224:	81fb      	strh	r3, [r7, #14]
 801a226:	8a3b      	ldrh	r3, [r7, #16]
 801a228:	b2db      	uxtb	r3, r3
 801a22a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a22c:	88fa      	ldrh	r2, [r7, #6]
 801a22e:	8a79      	ldrh	r1, [r7, #18]
 801a230:	8a3b      	ldrh	r3, [r7, #16]
 801a232:	440b      	add	r3, r1
 801a234:	429a      	cmp	r2, r3
 801a236:	da49      	bge.n	801a2cc <ff_wtoupper+0xe8>
			switch (cmd) {
 801a238:	89fb      	ldrh	r3, [r7, #14]
 801a23a:	2b08      	cmp	r3, #8
 801a23c:	d84f      	bhi.n	801a2de <ff_wtoupper+0xfa>
 801a23e:	a201      	add	r2, pc, #4	; (adr r2, 801a244 <ff_wtoupper+0x60>)
 801a240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a244:	0801a269 	.word	0x0801a269
 801a248:	0801a27b 	.word	0x0801a27b
 801a24c:	0801a291 	.word	0x0801a291
 801a250:	0801a299 	.word	0x0801a299
 801a254:	0801a2a1 	.word	0x0801a2a1
 801a258:	0801a2a9 	.word	0x0801a2a9
 801a25c:	0801a2b1 	.word	0x0801a2b1
 801a260:	0801a2b9 	.word	0x0801a2b9
 801a264:	0801a2c1 	.word	0x0801a2c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a268:	88fa      	ldrh	r2, [r7, #6]
 801a26a:	8a7b      	ldrh	r3, [r7, #18]
 801a26c:	1ad3      	subs	r3, r2, r3
 801a26e:	005b      	lsls	r3, r3, #1
 801a270:	697a      	ldr	r2, [r7, #20]
 801a272:	4413      	add	r3, r2
 801a274:	881b      	ldrh	r3, [r3, #0]
 801a276:	80fb      	strh	r3, [r7, #6]
 801a278:	e027      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a27a:	88fa      	ldrh	r2, [r7, #6]
 801a27c:	8a7b      	ldrh	r3, [r7, #18]
 801a27e:	1ad3      	subs	r3, r2, r3
 801a280:	b29b      	uxth	r3, r3
 801a282:	f003 0301 	and.w	r3, r3, #1
 801a286:	b29b      	uxth	r3, r3
 801a288:	88fa      	ldrh	r2, [r7, #6]
 801a28a:	1ad3      	subs	r3, r2, r3
 801a28c:	80fb      	strh	r3, [r7, #6]
 801a28e:	e01c      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a290:	88fb      	ldrh	r3, [r7, #6]
 801a292:	3b10      	subs	r3, #16
 801a294:	80fb      	strh	r3, [r7, #6]
 801a296:	e018      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a298:	88fb      	ldrh	r3, [r7, #6]
 801a29a:	3b20      	subs	r3, #32
 801a29c:	80fb      	strh	r3, [r7, #6]
 801a29e:	e014      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a2a0:	88fb      	ldrh	r3, [r7, #6]
 801a2a2:	3b30      	subs	r3, #48	; 0x30
 801a2a4:	80fb      	strh	r3, [r7, #6]
 801a2a6:	e010      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a2a8:	88fb      	ldrh	r3, [r7, #6]
 801a2aa:	3b1a      	subs	r3, #26
 801a2ac:	80fb      	strh	r3, [r7, #6]
 801a2ae:	e00c      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a2b0:	88fb      	ldrh	r3, [r7, #6]
 801a2b2:	3308      	adds	r3, #8
 801a2b4:	80fb      	strh	r3, [r7, #6]
 801a2b6:	e008      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a2b8:	88fb      	ldrh	r3, [r7, #6]
 801a2ba:	3b50      	subs	r3, #80	; 0x50
 801a2bc:	80fb      	strh	r3, [r7, #6]
 801a2be:	e004      	b.n	801a2ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a2c0:	88fb      	ldrh	r3, [r7, #6]
 801a2c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a2c6:	80fb      	strh	r3, [r7, #6]
 801a2c8:	bf00      	nop
			}
			break;
 801a2ca:	e008      	b.n	801a2de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a2cc:	89fb      	ldrh	r3, [r7, #14]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d195      	bne.n	801a1fe <ff_wtoupper+0x1a>
 801a2d2:	8a3b      	ldrh	r3, [r7, #16]
 801a2d4:	005b      	lsls	r3, r3, #1
 801a2d6:	697a      	ldr	r2, [r7, #20]
 801a2d8:	4413      	add	r3, r2
 801a2da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a2dc:	e78f      	b.n	801a1fe <ff_wtoupper+0x1a>
			break;
 801a2de:	bf00      	nop
	}

	return chr;
 801a2e0:	88fb      	ldrh	r3, [r7, #6]
}
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	371c      	adds	r7, #28
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ec:	4770      	bx	lr
 801a2ee:	bf00      	nop
 801a2f0:	0801fae0 	.word	0x0801fae0
 801a2f4:	0801fcd4 	.word	0x0801fcd4

0801a2f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	4913      	ldr	r1, [pc, #76]	; (801a34c <MX_USB_DEVICE_Init+0x54>)
 801a300:	4813      	ldr	r0, [pc, #76]	; (801a350 <MX_USB_DEVICE_Init+0x58>)
 801a302:	f7fb fd1b 	bl	8015d3c <USBD_Init>
 801a306:	4603      	mov	r3, r0
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d001      	beq.n	801a310 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a30c:	f7e8 fd1a 	bl	8002d44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a310:	4910      	ldr	r1, [pc, #64]	; (801a354 <MX_USB_DEVICE_Init+0x5c>)
 801a312:	480f      	ldr	r0, [pc, #60]	; (801a350 <MX_USB_DEVICE_Init+0x58>)
 801a314:	f7fb fd42 	bl	8015d9c <USBD_RegisterClass>
 801a318:	4603      	mov	r3, r0
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d001      	beq.n	801a322 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a31e:	f7e8 fd11 	bl	8002d44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a322:	490d      	ldr	r1, [pc, #52]	; (801a358 <MX_USB_DEVICE_Init+0x60>)
 801a324:	480a      	ldr	r0, [pc, #40]	; (801a350 <MX_USB_DEVICE_Init+0x58>)
 801a326:	f7fb fc39 	bl	8015b9c <USBD_CDC_RegisterInterface>
 801a32a:	4603      	mov	r3, r0
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d001      	beq.n	801a334 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a330:	f7e8 fd08 	bl	8002d44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a334:	4806      	ldr	r0, [pc, #24]	; (801a350 <MX_USB_DEVICE_Init+0x58>)
 801a336:	f7fb fd67 	bl	8015e08 <USBD_Start>
 801a33a:	4603      	mov	r3, r0
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d001      	beq.n	801a344 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a340:	f7e8 fd00 	bl	8002d44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a344:	f7f0 f992 	bl	800a66c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a348:	bf00      	nop
 801a34a:	bd80      	pop	{r7, pc}
 801a34c:	240000b0 	.word	0x240000b0
 801a350:	240018e8 	.word	0x240018e8
 801a354:	2400001c 	.word	0x2400001c
 801a358:	2400009c 	.word	0x2400009c

0801a35c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a360:	2200      	movs	r2, #0
 801a362:	4905      	ldr	r1, [pc, #20]	; (801a378 <CDC_Init_HS+0x1c>)
 801a364:	4805      	ldr	r0, [pc, #20]	; (801a37c <CDC_Init_HS+0x20>)
 801a366:	f7fb fc33 	bl	8015bd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a36a:	4905      	ldr	r1, [pc, #20]	; (801a380 <CDC_Init_HS+0x24>)
 801a36c:	4803      	ldr	r0, [pc, #12]	; (801a37c <CDC_Init_HS+0x20>)
 801a36e:	f7fb fc51 	bl	8015c14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a372:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a374:	4618      	mov	r0, r3
 801a376:	bd80      	pop	{r7, pc}
 801a378:	240023c4 	.word	0x240023c4
 801a37c:	240018e8 	.word	0x240018e8
 801a380:	24001bc4 	.word	0x24001bc4

0801a384 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a384:	b480      	push	{r7}
 801a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a388:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a38a:	4618      	mov	r0, r3
 801a38c:	46bd      	mov	sp, r7
 801a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a392:	4770      	bx	lr

0801a394 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a394:	b480      	push	{r7}
 801a396:	b083      	sub	sp, #12
 801a398:	af00      	add	r7, sp, #0
 801a39a:	4603      	mov	r3, r0
 801a39c:	6039      	str	r1, [r7, #0]
 801a39e:	71fb      	strb	r3, [r7, #7]
 801a3a0:	4613      	mov	r3, r2
 801a3a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a3a4:	79fb      	ldrb	r3, [r7, #7]
 801a3a6:	2b23      	cmp	r3, #35	; 0x23
 801a3a8:	d84a      	bhi.n	801a440 <CDC_Control_HS+0xac>
 801a3aa:	a201      	add	r2, pc, #4	; (adr r2, 801a3b0 <CDC_Control_HS+0x1c>)
 801a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3b0:	0801a441 	.word	0x0801a441
 801a3b4:	0801a441 	.word	0x0801a441
 801a3b8:	0801a441 	.word	0x0801a441
 801a3bc:	0801a441 	.word	0x0801a441
 801a3c0:	0801a441 	.word	0x0801a441
 801a3c4:	0801a441 	.word	0x0801a441
 801a3c8:	0801a441 	.word	0x0801a441
 801a3cc:	0801a441 	.word	0x0801a441
 801a3d0:	0801a441 	.word	0x0801a441
 801a3d4:	0801a441 	.word	0x0801a441
 801a3d8:	0801a441 	.word	0x0801a441
 801a3dc:	0801a441 	.word	0x0801a441
 801a3e0:	0801a441 	.word	0x0801a441
 801a3e4:	0801a441 	.word	0x0801a441
 801a3e8:	0801a441 	.word	0x0801a441
 801a3ec:	0801a441 	.word	0x0801a441
 801a3f0:	0801a441 	.word	0x0801a441
 801a3f4:	0801a441 	.word	0x0801a441
 801a3f8:	0801a441 	.word	0x0801a441
 801a3fc:	0801a441 	.word	0x0801a441
 801a400:	0801a441 	.word	0x0801a441
 801a404:	0801a441 	.word	0x0801a441
 801a408:	0801a441 	.word	0x0801a441
 801a40c:	0801a441 	.word	0x0801a441
 801a410:	0801a441 	.word	0x0801a441
 801a414:	0801a441 	.word	0x0801a441
 801a418:	0801a441 	.word	0x0801a441
 801a41c:	0801a441 	.word	0x0801a441
 801a420:	0801a441 	.word	0x0801a441
 801a424:	0801a441 	.word	0x0801a441
 801a428:	0801a441 	.word	0x0801a441
 801a42c:	0801a441 	.word	0x0801a441
 801a430:	0801a441 	.word	0x0801a441
 801a434:	0801a441 	.word	0x0801a441
 801a438:	0801a441 	.word	0x0801a441
 801a43c:	0801a441 	.word	0x0801a441
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a440:	bf00      	nop
  }

  return (USBD_OK);
 801a442:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a444:	4618      	mov	r0, r3
 801a446:	370c      	adds	r7, #12
 801a448:	46bd      	mov	sp, r7
 801a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44e:	4770      	bx	lr

0801a450 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a45a:	6879      	ldr	r1, [r7, #4]
 801a45c:	4805      	ldr	r0, [pc, #20]	; (801a474 <CDC_Receive_HS+0x24>)
 801a45e:	f7fb fbd9 	bl	8015c14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a462:	4804      	ldr	r0, [pc, #16]	; (801a474 <CDC_Receive_HS+0x24>)
 801a464:	f7fb fc34 	bl	8015cd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a468:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a46a:	4618      	mov	r0, r3
 801a46c:	3708      	adds	r7, #8
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}
 801a472:	bf00      	nop
 801a474:	240018e8 	.word	0x240018e8

0801a478 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b084      	sub	sp, #16
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
 801a480:	460b      	mov	r3, r1
 801a482:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a484:	2300      	movs	r3, #0
 801a486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a488:	4b0d      	ldr	r3, [pc, #52]	; (801a4c0 <CDC_Transmit_HS+0x48>)
 801a48a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a48e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a496:	2b00      	cmp	r3, #0
 801a498:	d001      	beq.n	801a49e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a49a:	2301      	movs	r3, #1
 801a49c:	e00b      	b.n	801a4b6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a49e:	887b      	ldrh	r3, [r7, #2]
 801a4a0:	461a      	mov	r2, r3
 801a4a2:	6879      	ldr	r1, [r7, #4]
 801a4a4:	4806      	ldr	r0, [pc, #24]	; (801a4c0 <CDC_Transmit_HS+0x48>)
 801a4a6:	f7fb fb93 	bl	8015bd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a4aa:	4805      	ldr	r0, [pc, #20]	; (801a4c0 <CDC_Transmit_HS+0x48>)
 801a4ac:	f7fb fbd0 	bl	8015c50 <USBD_CDC_TransmitPacket>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3710      	adds	r7, #16
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	240018e8 	.word	0x240018e8

0801a4c4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a4c4:	b480      	push	{r7}
 801a4c6:	b087      	sub	sp, #28
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	60f8      	str	r0, [r7, #12]
 801a4cc:	60b9      	str	r1, [r7, #8]
 801a4ce:	4613      	mov	r3, r2
 801a4d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	371c      	adds	r7, #28
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e4:	4770      	bx	lr
	...

0801a4e8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4e8:	b480      	push	{r7}
 801a4ea:	b083      	sub	sp, #12
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	6039      	str	r1, [r7, #0]
 801a4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	2212      	movs	r2, #18
 801a4f8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a4fa:	4b03      	ldr	r3, [pc, #12]	; (801a508 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	370c      	adds	r7, #12
 801a500:	46bd      	mov	sp, r7
 801a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a506:	4770      	bx	lr
 801a508:	240000cc 	.word	0x240000cc

0801a50c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a50c:	b480      	push	{r7}
 801a50e:	b083      	sub	sp, #12
 801a510:	af00      	add	r7, sp, #0
 801a512:	4603      	mov	r3, r0
 801a514:	6039      	str	r1, [r7, #0]
 801a516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	2204      	movs	r2, #4
 801a51c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a51e:	4b03      	ldr	r3, [pc, #12]	; (801a52c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a520:	4618      	mov	r0, r3
 801a522:	370c      	adds	r7, #12
 801a524:	46bd      	mov	sp, r7
 801a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52a:	4770      	bx	lr
 801a52c:	240000e0 	.word	0x240000e0

0801a530 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b082      	sub	sp, #8
 801a534:	af00      	add	r7, sp, #0
 801a536:	4603      	mov	r3, r0
 801a538:	6039      	str	r1, [r7, #0]
 801a53a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a53c:	79fb      	ldrb	r3, [r7, #7]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d105      	bne.n	801a54e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a542:	683a      	ldr	r2, [r7, #0]
 801a544:	4907      	ldr	r1, [pc, #28]	; (801a564 <USBD_HS_ProductStrDescriptor+0x34>)
 801a546:	4808      	ldr	r0, [pc, #32]	; (801a568 <USBD_HS_ProductStrDescriptor+0x38>)
 801a548:	f7fc fe10 	bl	801716c <USBD_GetString>
 801a54c:	e004      	b.n	801a558 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a54e:	683a      	ldr	r2, [r7, #0]
 801a550:	4904      	ldr	r1, [pc, #16]	; (801a564 <USBD_HS_ProductStrDescriptor+0x34>)
 801a552:	4805      	ldr	r0, [pc, #20]	; (801a568 <USBD_HS_ProductStrDescriptor+0x38>)
 801a554:	f7fc fe0a 	bl	801716c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a558:	4b02      	ldr	r3, [pc, #8]	; (801a564 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	3708      	adds	r7, #8
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd80      	pop	{r7, pc}
 801a562:	bf00      	nop
 801a564:	24002bc4 	.word	0x24002bc4
 801a568:	0801f850 	.word	0x0801f850

0801a56c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b082      	sub	sp, #8
 801a570:	af00      	add	r7, sp, #0
 801a572:	4603      	mov	r3, r0
 801a574:	6039      	str	r1, [r7, #0]
 801a576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a578:	683a      	ldr	r2, [r7, #0]
 801a57a:	4904      	ldr	r1, [pc, #16]	; (801a58c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a57c:	4804      	ldr	r0, [pc, #16]	; (801a590 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a57e:	f7fc fdf5 	bl	801716c <USBD_GetString>
  return USBD_StrDesc;
 801a582:	4b02      	ldr	r3, [pc, #8]	; (801a58c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a584:	4618      	mov	r0, r3
 801a586:	3708      	adds	r7, #8
 801a588:	46bd      	mov	sp, r7
 801a58a:	bd80      	pop	{r7, pc}
 801a58c:	24002bc4 	.word	0x24002bc4
 801a590:	0801f86c 	.word	0x0801f86c

0801a594 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	4603      	mov	r3, r0
 801a59c:	6039      	str	r1, [r7, #0]
 801a59e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a5a0:	683b      	ldr	r3, [r7, #0]
 801a5a2:	221a      	movs	r2, #26
 801a5a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a5a6:	f000 f843 	bl	801a630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a5aa:	4b02      	ldr	r3, [pc, #8]	; (801a5b4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3708      	adds	r7, #8
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}
 801a5b4:	240000e4 	.word	0x240000e4

0801a5b8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b082      	sub	sp, #8
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	4603      	mov	r3, r0
 801a5c0:	6039      	str	r1, [r7, #0]
 801a5c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a5c4:	79fb      	ldrb	r3, [r7, #7]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d105      	bne.n	801a5d6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a5ca:	683a      	ldr	r2, [r7, #0]
 801a5cc:	4907      	ldr	r1, [pc, #28]	; (801a5ec <USBD_HS_ConfigStrDescriptor+0x34>)
 801a5ce:	4808      	ldr	r0, [pc, #32]	; (801a5f0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a5d0:	f7fc fdcc 	bl	801716c <USBD_GetString>
 801a5d4:	e004      	b.n	801a5e0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a5d6:	683a      	ldr	r2, [r7, #0]
 801a5d8:	4904      	ldr	r1, [pc, #16]	; (801a5ec <USBD_HS_ConfigStrDescriptor+0x34>)
 801a5da:	4805      	ldr	r0, [pc, #20]	; (801a5f0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a5dc:	f7fc fdc6 	bl	801716c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5e0:	4b02      	ldr	r3, [pc, #8]	; (801a5ec <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	3708      	adds	r7, #8
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	24002bc4 	.word	0x24002bc4
 801a5f0:	0801f870 	.word	0x0801f870

0801a5f4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b082      	sub	sp, #8
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	6039      	str	r1, [r7, #0]
 801a5fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a600:	79fb      	ldrb	r3, [r7, #7]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d105      	bne.n	801a612 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a606:	683a      	ldr	r2, [r7, #0]
 801a608:	4907      	ldr	r1, [pc, #28]	; (801a628 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a60a:	4808      	ldr	r0, [pc, #32]	; (801a62c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a60c:	f7fc fdae 	bl	801716c <USBD_GetString>
 801a610:	e004      	b.n	801a61c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a612:	683a      	ldr	r2, [r7, #0]
 801a614:	4904      	ldr	r1, [pc, #16]	; (801a628 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a616:	4805      	ldr	r0, [pc, #20]	; (801a62c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a618:	f7fc fda8 	bl	801716c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a61c:	4b02      	ldr	r3, [pc, #8]	; (801a628 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a61e:	4618      	mov	r0, r3
 801a620:	3708      	adds	r7, #8
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}
 801a626:	bf00      	nop
 801a628:	24002bc4 	.word	0x24002bc4
 801a62c:	0801f87c 	.word	0x0801f87c

0801a630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b084      	sub	sp, #16
 801a634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a636:	4b0f      	ldr	r3, [pc, #60]	; (801a674 <Get_SerialNum+0x44>)
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a63c:	4b0e      	ldr	r3, [pc, #56]	; (801a678 <Get_SerialNum+0x48>)
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a642:	4b0e      	ldr	r3, [pc, #56]	; (801a67c <Get_SerialNum+0x4c>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a648:	68fa      	ldr	r2, [r7, #12]
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	4413      	add	r3, r2
 801a64e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d009      	beq.n	801a66a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a656:	2208      	movs	r2, #8
 801a658:	4909      	ldr	r1, [pc, #36]	; (801a680 <Get_SerialNum+0x50>)
 801a65a:	68f8      	ldr	r0, [r7, #12]
 801a65c:	f000 f814 	bl	801a688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a660:	2204      	movs	r2, #4
 801a662:	4908      	ldr	r1, [pc, #32]	; (801a684 <Get_SerialNum+0x54>)
 801a664:	68b8      	ldr	r0, [r7, #8]
 801a666:	f000 f80f 	bl	801a688 <IntToUnicode>
  }
}
 801a66a:	bf00      	nop
 801a66c:	3710      	adds	r7, #16
 801a66e:	46bd      	mov	sp, r7
 801a670:	bd80      	pop	{r7, pc}
 801a672:	bf00      	nop
 801a674:	1ff1e800 	.word	0x1ff1e800
 801a678:	1ff1e804 	.word	0x1ff1e804
 801a67c:	1ff1e808 	.word	0x1ff1e808
 801a680:	240000e6 	.word	0x240000e6
 801a684:	240000f6 	.word	0x240000f6

0801a688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a688:	b480      	push	{r7}
 801a68a:	b087      	sub	sp, #28
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	60f8      	str	r0, [r7, #12]
 801a690:	60b9      	str	r1, [r7, #8]
 801a692:	4613      	mov	r3, r2
 801a694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a696:	2300      	movs	r3, #0
 801a698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a69a:	2300      	movs	r3, #0
 801a69c:	75fb      	strb	r3, [r7, #23]
 801a69e:	e027      	b.n	801a6f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	0f1b      	lsrs	r3, r3, #28
 801a6a4:	2b09      	cmp	r3, #9
 801a6a6:	d80b      	bhi.n	801a6c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	0f1b      	lsrs	r3, r3, #28
 801a6ac:	b2da      	uxtb	r2, r3
 801a6ae:	7dfb      	ldrb	r3, [r7, #23]
 801a6b0:	005b      	lsls	r3, r3, #1
 801a6b2:	4619      	mov	r1, r3
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	440b      	add	r3, r1
 801a6b8:	3230      	adds	r2, #48	; 0x30
 801a6ba:	b2d2      	uxtb	r2, r2
 801a6bc:	701a      	strb	r2, [r3, #0]
 801a6be:	e00a      	b.n	801a6d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	0f1b      	lsrs	r3, r3, #28
 801a6c4:	b2da      	uxtb	r2, r3
 801a6c6:	7dfb      	ldrb	r3, [r7, #23]
 801a6c8:	005b      	lsls	r3, r3, #1
 801a6ca:	4619      	mov	r1, r3
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	440b      	add	r3, r1
 801a6d0:	3237      	adds	r2, #55	; 0x37
 801a6d2:	b2d2      	uxtb	r2, r2
 801a6d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	011b      	lsls	r3, r3, #4
 801a6da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a6dc:	7dfb      	ldrb	r3, [r7, #23]
 801a6de:	005b      	lsls	r3, r3, #1
 801a6e0:	3301      	adds	r3, #1
 801a6e2:	68ba      	ldr	r2, [r7, #8]
 801a6e4:	4413      	add	r3, r2
 801a6e6:	2200      	movs	r2, #0
 801a6e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a6ea:	7dfb      	ldrb	r3, [r7, #23]
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	75fb      	strb	r3, [r7, #23]
 801a6f0:	7dfa      	ldrb	r2, [r7, #23]
 801a6f2:	79fb      	ldrb	r3, [r7, #7]
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	d3d3      	bcc.n	801a6a0 <IntToUnicode+0x18>
  }
}
 801a6f8:	bf00      	nop
 801a6fa:	bf00      	nop
 801a6fc:	371c      	adds	r7, #28
 801a6fe:	46bd      	mov	sp, r7
 801a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a704:	4770      	bx	lr
	...

0801a708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b0b2      	sub	sp, #200	; 0xc8
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a710:	f107 0310 	add.w	r3, r7, #16
 801a714:	22b8      	movs	r2, #184	; 0xb8
 801a716:	2100      	movs	r1, #0
 801a718:	4618      	mov	r0, r3
 801a71a:	f000 fb39 	bl	801ad90 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	4a1a      	ldr	r2, [pc, #104]	; (801a78c <HAL_PCD_MspInit+0x84>)
 801a724:	4293      	cmp	r3, r2
 801a726:	d12c      	bne.n	801a782 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a728:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a72c:	f04f 0300 	mov.w	r3, #0
 801a730:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a734:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a73c:	f107 0310 	add.w	r3, r7, #16
 801a740:	4618      	mov	r0, r3
 801a742:	f7f0 ff73 	bl	800b62c <HAL_RCCEx_PeriphCLKConfig>
 801a746:	4603      	mov	r3, r0
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d001      	beq.n	801a750 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a74c:	f7e8 fafa 	bl	8002d44 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a750:	f7ef ff8c 	bl	800a66c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a754:	4b0e      	ldr	r3, [pc, #56]	; (801a790 <HAL_PCD_MspInit+0x88>)
 801a756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a75a:	4a0d      	ldr	r2, [pc, #52]	; (801a790 <HAL_PCD_MspInit+0x88>)
 801a75c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a760:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a764:	4b0a      	ldr	r3, [pc, #40]	; (801a790 <HAL_PCD_MspInit+0x88>)
 801a766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a76a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a76e:	60fb      	str	r3, [r7, #12]
 801a770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a772:	2200      	movs	r2, #0
 801a774:	2100      	movs	r1, #0
 801a776:	204d      	movs	r0, #77	; 0x4d
 801a778:	f7eb fcfb 	bl	8006172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a77c:	204d      	movs	r0, #77	; 0x4d
 801a77e:	f7eb fd12 	bl	80061a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a782:	bf00      	nop
 801a784:	37c8      	adds	r7, #200	; 0xc8
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
 801a78a:	bf00      	nop
 801a78c:	40040000 	.word	0x40040000
 801a790:	58024400 	.word	0x58024400

0801a794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b082      	sub	sp, #8
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a7a8:	4619      	mov	r1, r3
 801a7aa:	4610      	mov	r0, r2
 801a7ac:	f7fb fb79 	bl	8015ea2 <USBD_LL_SetupStage>
}
 801a7b0:	bf00      	nop
 801a7b2:	3708      	adds	r7, #8
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bd80      	pop	{r7, pc}

0801a7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b082      	sub	sp, #8
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	460b      	mov	r3, r1
 801a7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a7ca:	78fa      	ldrb	r2, [r7, #3]
 801a7cc:	6879      	ldr	r1, [r7, #4]
 801a7ce:	4613      	mov	r3, r2
 801a7d0:	00db      	lsls	r3, r3, #3
 801a7d2:	4413      	add	r3, r2
 801a7d4:	009b      	lsls	r3, r3, #2
 801a7d6:	440b      	add	r3, r1
 801a7d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a7dc:	681a      	ldr	r2, [r3, #0]
 801a7de:	78fb      	ldrb	r3, [r7, #3]
 801a7e0:	4619      	mov	r1, r3
 801a7e2:	f7fb fbb3 	bl	8015f4c <USBD_LL_DataOutStage>
}
 801a7e6:	bf00      	nop
 801a7e8:	3708      	adds	r7, #8
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	bd80      	pop	{r7, pc}

0801a7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7ee:	b580      	push	{r7, lr}
 801a7f0:	b082      	sub	sp, #8
 801a7f2:	af00      	add	r7, sp, #0
 801a7f4:	6078      	str	r0, [r7, #4]
 801a7f6:	460b      	mov	r3, r1
 801a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a800:	78fa      	ldrb	r2, [r7, #3]
 801a802:	6879      	ldr	r1, [r7, #4]
 801a804:	4613      	mov	r3, r2
 801a806:	00db      	lsls	r3, r3, #3
 801a808:	4413      	add	r3, r2
 801a80a:	009b      	lsls	r3, r3, #2
 801a80c:	440b      	add	r3, r1
 801a80e:	3348      	adds	r3, #72	; 0x48
 801a810:	681a      	ldr	r2, [r3, #0]
 801a812:	78fb      	ldrb	r3, [r7, #3]
 801a814:	4619      	mov	r1, r3
 801a816:	f7fb fc4c 	bl	80160b2 <USBD_LL_DataInStage>
}
 801a81a:	bf00      	nop
 801a81c:	3708      	adds	r7, #8
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}

0801a822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a822:	b580      	push	{r7, lr}
 801a824:	b082      	sub	sp, #8
 801a826:	af00      	add	r7, sp, #0
 801a828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a830:	4618      	mov	r0, r3
 801a832:	f7fb fd86 	bl	8016342 <USBD_LL_SOF>
}
 801a836:	bf00      	nop
 801a838:	3708      	adds	r7, #8
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bd80      	pop	{r7, pc}

0801a83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a83e:	b580      	push	{r7, lr}
 801a840:	b084      	sub	sp, #16
 801a842:	af00      	add	r7, sp, #0
 801a844:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a846:	2301      	movs	r3, #1
 801a848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	691b      	ldr	r3, [r3, #16]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d102      	bne.n	801a858 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a852:	2300      	movs	r3, #0
 801a854:	73fb      	strb	r3, [r7, #15]
 801a856:	e008      	b.n	801a86a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	691b      	ldr	r3, [r3, #16]
 801a85c:	2b02      	cmp	r3, #2
 801a85e:	d102      	bne.n	801a866 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a860:	2301      	movs	r3, #1
 801a862:	73fb      	strb	r3, [r7, #15]
 801a864:	e001      	b.n	801a86a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a866:	f7e8 fa6d 	bl	8002d44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a870:	7bfa      	ldrb	r2, [r7, #15]
 801a872:	4611      	mov	r1, r2
 801a874:	4618      	mov	r0, r3
 801a876:	f7fb fd20 	bl	80162ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a880:	4618      	mov	r0, r3
 801a882:	f7fb fcc8 	bl	8016216 <USBD_LL_Reset>
}
 801a886:	bf00      	nop
 801a888:	3710      	adds	r7, #16
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}
	...

0801a890 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b082      	sub	sp, #8
 801a894:	af00      	add	r7, sp, #0
 801a896:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7fb fd1b 	bl	80162da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	6812      	ldr	r2, [r2, #0]
 801a8b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a8b6:	f043 0301 	orr.w	r3, r3, #1
 801a8ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	6a1b      	ldr	r3, [r3, #32]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d005      	beq.n	801a8d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a8c4:	4b04      	ldr	r3, [pc, #16]	; (801a8d8 <HAL_PCD_SuspendCallback+0x48>)
 801a8c6:	691b      	ldr	r3, [r3, #16]
 801a8c8:	4a03      	ldr	r2, [pc, #12]	; (801a8d8 <HAL_PCD_SuspendCallback+0x48>)
 801a8ca:	f043 0306 	orr.w	r3, r3, #6
 801a8ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a8d0:	bf00      	nop
 801a8d2:	3708      	adds	r7, #8
 801a8d4:	46bd      	mov	sp, r7
 801a8d6:	bd80      	pop	{r7, pc}
 801a8d8:	e000ed00 	.word	0xe000ed00

0801a8dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b082      	sub	sp, #8
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f7fb fd11 	bl	8016312 <USBD_LL_Resume>
}
 801a8f0:	bf00      	nop
 801a8f2:	3708      	adds	r7, #8
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	bd80      	pop	{r7, pc}

0801a8f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b082      	sub	sp, #8
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
 801a900:	460b      	mov	r3, r1
 801a902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a90a:	78fa      	ldrb	r2, [r7, #3]
 801a90c:	4611      	mov	r1, r2
 801a90e:	4618      	mov	r0, r3
 801a910:	f7fb fd69 	bl	80163e6 <USBD_LL_IsoOUTIncomplete>
}
 801a914:	bf00      	nop
 801a916:	3708      	adds	r7, #8
 801a918:	46bd      	mov	sp, r7
 801a91a:	bd80      	pop	{r7, pc}

0801a91c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b082      	sub	sp, #8
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	460b      	mov	r3, r1
 801a926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a92e:	78fa      	ldrb	r2, [r7, #3]
 801a930:	4611      	mov	r1, r2
 801a932:	4618      	mov	r0, r3
 801a934:	f7fb fd25 	bl	8016382 <USBD_LL_IsoINIncomplete>
}
 801a938:	bf00      	nop
 801a93a:	3708      	adds	r7, #8
 801a93c:	46bd      	mov	sp, r7
 801a93e:	bd80      	pop	{r7, pc}

0801a940 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b082      	sub	sp, #8
 801a944:	af00      	add	r7, sp, #0
 801a946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a94e:	4618      	mov	r0, r3
 801a950:	f7fb fd7b 	bl	801644a <USBD_LL_DevConnected>
}
 801a954:	bf00      	nop
 801a956:	3708      	adds	r7, #8
 801a958:	46bd      	mov	sp, r7
 801a95a:	bd80      	pop	{r7, pc}

0801a95c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b082      	sub	sp, #8
 801a960:	af00      	add	r7, sp, #0
 801a962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7fb fd78 	bl	8016460 <USBD_LL_DevDisconnected>
}
 801a970:	bf00      	nop
 801a972:	3708      	adds	r7, #8
 801a974:	46bd      	mov	sp, r7
 801a976:	bd80      	pop	{r7, pc}

0801a978 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b082      	sub	sp, #8
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	781b      	ldrb	r3, [r3, #0]
 801a984:	2b01      	cmp	r3, #1
 801a986:	d140      	bne.n	801aa0a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801a988:	4a22      	ldr	r2, [pc, #136]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	4a20      	ldr	r2, [pc, #128]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a994:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801a998:	4b1e      	ldr	r3, [pc, #120]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a99a:	4a1f      	ldr	r2, [pc, #124]	; (801aa18 <USBD_LL_Init+0xa0>)
 801a99c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801a99e:	4b1d      	ldr	r3, [pc, #116]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9a0:	2209      	movs	r2, #9
 801a9a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801a9a4:	4b1b      	ldr	r3, [pc, #108]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9a6:	2202      	movs	r2, #2
 801a9a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801a9aa:	4b1a      	ldr	r3, [pc, #104]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801a9b0:	4b18      	ldr	r3, [pc, #96]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9b2:	2202      	movs	r2, #2
 801a9b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801a9b6:	4b17      	ldr	r3, [pc, #92]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801a9bc:	4b15      	ldr	r3, [pc, #84]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9be:	2200      	movs	r2, #0
 801a9c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801a9c2:	4b14      	ldr	r3, [pc, #80]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801a9c8:	4b12      	ldr	r3, [pc, #72]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801a9ce:	4b11      	ldr	r3, [pc, #68]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801a9d4:	4b0f      	ldr	r3, [pc, #60]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801a9da:	480e      	ldr	r0, [pc, #56]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9dc:	f7ee fb53 	bl	8009086 <HAL_PCD_Init>
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d001      	beq.n	801a9ea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a9e6:	f7e8 f9ad 	bl	8002d44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801a9ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a9ee:	4809      	ldr	r0, [pc, #36]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9f0:	f7ef fdc1 	bl	800a576 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801a9f4:	2280      	movs	r2, #128	; 0x80
 801a9f6:	2100      	movs	r1, #0
 801a9f8:	4806      	ldr	r0, [pc, #24]	; (801aa14 <USBD_LL_Init+0x9c>)
 801a9fa:	f7ef fd75 	bl	800a4e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801a9fe:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801aa02:	2101      	movs	r1, #1
 801aa04:	4803      	ldr	r0, [pc, #12]	; (801aa14 <USBD_LL_Init+0x9c>)
 801aa06:	f7ef fd6f 	bl	800a4e8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801aa0a:	2300      	movs	r3, #0
}
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	3708      	adds	r7, #8
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bd80      	pop	{r7, pc}
 801aa14:	24002dc4 	.word	0x24002dc4
 801aa18:	40040000 	.word	0x40040000

0801aa1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b084      	sub	sp, #16
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa24:	2300      	movs	r3, #0
 801aa26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa28:	2300      	movs	r3, #0
 801aa2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aa32:	4618      	mov	r0, r3
 801aa34:	f7ee fc4b 	bl	80092ce <HAL_PCD_Start>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa3c:	7bfb      	ldrb	r3, [r7, #15]
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f000 f942 	bl	801acc8 <USBD_Get_USB_Status>
 801aa44:	4603      	mov	r3, r0
 801aa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa48:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	3710      	adds	r7, #16
 801aa4e:	46bd      	mov	sp, r7
 801aa50:	bd80      	pop	{r7, pc}

0801aa52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801aa52:	b580      	push	{r7, lr}
 801aa54:	b084      	sub	sp, #16
 801aa56:	af00      	add	r7, sp, #0
 801aa58:	6078      	str	r0, [r7, #4]
 801aa5a:	4608      	mov	r0, r1
 801aa5c:	4611      	mov	r1, r2
 801aa5e:	461a      	mov	r2, r3
 801aa60:	4603      	mov	r3, r0
 801aa62:	70fb      	strb	r3, [r7, #3]
 801aa64:	460b      	mov	r3, r1
 801aa66:	70bb      	strb	r3, [r7, #2]
 801aa68:	4613      	mov	r3, r2
 801aa6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa6c:	2300      	movs	r3, #0
 801aa6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa70:	2300      	movs	r3, #0
 801aa72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aa7a:	78bb      	ldrb	r3, [r7, #2]
 801aa7c:	883a      	ldrh	r2, [r7, #0]
 801aa7e:	78f9      	ldrb	r1, [r7, #3]
 801aa80:	f7ef f94b 	bl	8009d1a <HAL_PCD_EP_Open>
 801aa84:	4603      	mov	r3, r0
 801aa86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa88:	7bfb      	ldrb	r3, [r7, #15]
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	f000 f91c 	bl	801acc8 <USBD_Get_USB_Status>
 801aa90:	4603      	mov	r3, r0
 801aa92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa94:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa96:	4618      	mov	r0, r3
 801aa98:	3710      	adds	r7, #16
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	bd80      	pop	{r7, pc}

0801aa9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa9e:	b580      	push	{r7, lr}
 801aaa0:	b084      	sub	sp, #16
 801aaa2:	af00      	add	r7, sp, #0
 801aaa4:	6078      	str	r0, [r7, #4]
 801aaa6:	460b      	mov	r3, r1
 801aaa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaaa:	2300      	movs	r3, #0
 801aaac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaae:	2300      	movs	r3, #0
 801aab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aab8:	78fa      	ldrb	r2, [r7, #3]
 801aaba:	4611      	mov	r1, r2
 801aabc:	4618      	mov	r0, r3
 801aabe:	f7ef f994 	bl	8009dea <HAL_PCD_EP_Close>
 801aac2:	4603      	mov	r3, r0
 801aac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aac6:	7bfb      	ldrb	r3, [r7, #15]
 801aac8:	4618      	mov	r0, r3
 801aaca:	f000 f8fd 	bl	801acc8 <USBD_Get_USB_Status>
 801aace:	4603      	mov	r3, r0
 801aad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aad2:	7bbb      	ldrb	r3, [r7, #14]
}
 801aad4:	4618      	mov	r0, r3
 801aad6:	3710      	adds	r7, #16
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}

0801aadc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b084      	sub	sp, #16
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
 801aae4:	460b      	mov	r3, r1
 801aae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aae8:	2300      	movs	r3, #0
 801aaea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaec:	2300      	movs	r3, #0
 801aaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aaf6:	78fa      	ldrb	r2, [r7, #3]
 801aaf8:	4611      	mov	r1, r2
 801aafa:	4618      	mov	r0, r3
 801aafc:	f7ef fa4e 	bl	8009f9c <HAL_PCD_EP_SetStall>
 801ab00:	4603      	mov	r3, r0
 801ab02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab04:	7bfb      	ldrb	r3, [r7, #15]
 801ab06:	4618      	mov	r0, r3
 801ab08:	f000 f8de 	bl	801acc8 <USBD_Get_USB_Status>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab10:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab12:	4618      	mov	r0, r3
 801ab14:	3710      	adds	r7, #16
 801ab16:	46bd      	mov	sp, r7
 801ab18:	bd80      	pop	{r7, pc}

0801ab1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab1a:	b580      	push	{r7, lr}
 801ab1c:	b084      	sub	sp, #16
 801ab1e:	af00      	add	r7, sp, #0
 801ab20:	6078      	str	r0, [r7, #4]
 801ab22:	460b      	mov	r3, r1
 801ab24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab26:	2300      	movs	r3, #0
 801ab28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab34:	78fa      	ldrb	r2, [r7, #3]
 801ab36:	4611      	mov	r1, r2
 801ab38:	4618      	mov	r0, r3
 801ab3a:	f7ef fa93 	bl	800a064 <HAL_PCD_EP_ClrStall>
 801ab3e:	4603      	mov	r3, r0
 801ab40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab42:	7bfb      	ldrb	r3, [r7, #15]
 801ab44:	4618      	mov	r0, r3
 801ab46:	f000 f8bf 	bl	801acc8 <USBD_Get_USB_Status>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab4e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab50:	4618      	mov	r0, r3
 801ab52:	3710      	adds	r7, #16
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}

0801ab58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab58:	b480      	push	{r7}
 801ab5a:	b085      	sub	sp, #20
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
 801ab60:	460b      	mov	r3, r1
 801ab62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ab6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	da0b      	bge.n	801ab8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ab74:	78fb      	ldrb	r3, [r7, #3]
 801ab76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ab7a:	68f9      	ldr	r1, [r7, #12]
 801ab7c:	4613      	mov	r3, r2
 801ab7e:	00db      	lsls	r3, r3, #3
 801ab80:	4413      	add	r3, r2
 801ab82:	009b      	lsls	r3, r3, #2
 801ab84:	440b      	add	r3, r1
 801ab86:	333e      	adds	r3, #62	; 0x3e
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	e00b      	b.n	801aba4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ab8c:	78fb      	ldrb	r3, [r7, #3]
 801ab8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ab92:	68f9      	ldr	r1, [r7, #12]
 801ab94:	4613      	mov	r3, r2
 801ab96:	00db      	lsls	r3, r3, #3
 801ab98:	4413      	add	r3, r2
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	440b      	add	r3, r1
 801ab9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801aba2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3714      	adds	r7, #20
 801aba8:	46bd      	mov	sp, r7
 801abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abae:	4770      	bx	lr

0801abb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
 801abb8:	460b      	mov	r3, r1
 801abba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abbc:	2300      	movs	r3, #0
 801abbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abc0:	2300      	movs	r3, #0
 801abc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abca:	78fa      	ldrb	r2, [r7, #3]
 801abcc:	4611      	mov	r1, r2
 801abce:	4618      	mov	r0, r3
 801abd0:	f7ef f87e 	bl	8009cd0 <HAL_PCD_SetAddress>
 801abd4:	4603      	mov	r3, r0
 801abd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abd8:	7bfb      	ldrb	r3, [r7, #15]
 801abda:	4618      	mov	r0, r3
 801abdc:	f000 f874 	bl	801acc8 <USBD_Get_USB_Status>
 801abe0:	4603      	mov	r3, r0
 801abe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abe4:	7bbb      	ldrb	r3, [r7, #14]
}
 801abe6:	4618      	mov	r0, r3
 801abe8:	3710      	adds	r7, #16
 801abea:	46bd      	mov	sp, r7
 801abec:	bd80      	pop	{r7, pc}

0801abee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801abee:	b580      	push	{r7, lr}
 801abf0:	b086      	sub	sp, #24
 801abf2:	af00      	add	r7, sp, #0
 801abf4:	60f8      	str	r0, [r7, #12]
 801abf6:	607a      	str	r2, [r7, #4]
 801abf8:	603b      	str	r3, [r7, #0]
 801abfa:	460b      	mov	r3, r1
 801abfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abfe:	2300      	movs	r3, #0
 801ac00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac02:	2300      	movs	r3, #0
 801ac04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac0c:	7af9      	ldrb	r1, [r7, #11]
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	687a      	ldr	r2, [r7, #4]
 801ac12:	f7ef f988 	bl	8009f26 <HAL_PCD_EP_Transmit>
 801ac16:	4603      	mov	r3, r0
 801ac18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac1a:	7dfb      	ldrb	r3, [r7, #23]
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f000 f853 	bl	801acc8 <USBD_Get_USB_Status>
 801ac22:	4603      	mov	r3, r0
 801ac24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ac26:	7dbb      	ldrb	r3, [r7, #22]
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	3718      	adds	r7, #24
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd80      	pop	{r7, pc}

0801ac30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b086      	sub	sp, #24
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	60f8      	str	r0, [r7, #12]
 801ac38:	607a      	str	r2, [r7, #4]
 801ac3a:	603b      	str	r3, [r7, #0]
 801ac3c:	460b      	mov	r3, r1
 801ac3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac40:	2300      	movs	r3, #0
 801ac42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac44:	2300      	movs	r3, #0
 801ac46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac4e:	7af9      	ldrb	r1, [r7, #11]
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	687a      	ldr	r2, [r7, #4]
 801ac54:	f7ef f913 	bl	8009e7e <HAL_PCD_EP_Receive>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac5c:	7dfb      	ldrb	r3, [r7, #23]
 801ac5e:	4618      	mov	r0, r3
 801ac60:	f000 f832 	bl	801acc8 <USBD_Get_USB_Status>
 801ac64:	4603      	mov	r3, r0
 801ac66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ac68:	7dbb      	ldrb	r3, [r7, #22]
}
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	3718      	adds	r7, #24
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	bd80      	pop	{r7, pc}

0801ac72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac72:	b580      	push	{r7, lr}
 801ac74:	b082      	sub	sp, #8
 801ac76:	af00      	add	r7, sp, #0
 801ac78:	6078      	str	r0, [r7, #4]
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac84:	78fa      	ldrb	r2, [r7, #3]
 801ac86:	4611      	mov	r1, r2
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f7ef f934 	bl	8009ef6 <HAL_PCD_EP_GetRxCount>
 801ac8e:	4603      	mov	r3, r0
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3708      	adds	r7, #8
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}

0801ac98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ac98:	b480      	push	{r7}
 801ac9a:	b083      	sub	sp, #12
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801aca0:	4b03      	ldr	r3, [pc, #12]	; (801acb0 <USBD_static_malloc+0x18>)
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	370c      	adds	r7, #12
 801aca6:	46bd      	mov	sp, r7
 801aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acac:	4770      	bx	lr
 801acae:	bf00      	nop
 801acb0:	240032d0 	.word	0x240032d0

0801acb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801acb4:	b480      	push	{r7}
 801acb6:	b083      	sub	sp, #12
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801acbc:	bf00      	nop
 801acbe:	370c      	adds	r7, #12
 801acc0:	46bd      	mov	sp, r7
 801acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc6:	4770      	bx	lr

0801acc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801acc8:	b480      	push	{r7}
 801acca:	b085      	sub	sp, #20
 801accc:	af00      	add	r7, sp, #0
 801acce:	4603      	mov	r3, r0
 801acd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acd2:	2300      	movs	r3, #0
 801acd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801acd6:	79fb      	ldrb	r3, [r7, #7]
 801acd8:	2b03      	cmp	r3, #3
 801acda:	d817      	bhi.n	801ad0c <USBD_Get_USB_Status+0x44>
 801acdc:	a201      	add	r2, pc, #4	; (adr r2, 801ace4 <USBD_Get_USB_Status+0x1c>)
 801acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ace2:	bf00      	nop
 801ace4:	0801acf5 	.word	0x0801acf5
 801ace8:	0801acfb 	.word	0x0801acfb
 801acec:	0801ad01 	.word	0x0801ad01
 801acf0:	0801ad07 	.word	0x0801ad07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801acf4:	2300      	movs	r3, #0
 801acf6:	73fb      	strb	r3, [r7, #15]
    break;
 801acf8:	e00b      	b.n	801ad12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801acfa:	2303      	movs	r3, #3
 801acfc:	73fb      	strb	r3, [r7, #15]
    break;
 801acfe:	e008      	b.n	801ad12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ad00:	2301      	movs	r3, #1
 801ad02:	73fb      	strb	r3, [r7, #15]
    break;
 801ad04:	e005      	b.n	801ad12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ad06:	2303      	movs	r3, #3
 801ad08:	73fb      	strb	r3, [r7, #15]
    break;
 801ad0a:	e002      	b.n	801ad12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ad0c:	2303      	movs	r3, #3
 801ad0e:	73fb      	strb	r3, [r7, #15]
    break;
 801ad10:	bf00      	nop
  }
  return usb_status;
 801ad12:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad14:	4618      	mov	r0, r3
 801ad16:	3714      	adds	r7, #20
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1e:	4770      	bx	lr

0801ad20 <__errno>:
 801ad20:	4b01      	ldr	r3, [pc, #4]	; (801ad28 <__errno+0x8>)
 801ad22:	6818      	ldr	r0, [r3, #0]
 801ad24:	4770      	bx	lr
 801ad26:	bf00      	nop
 801ad28:	24000100 	.word	0x24000100

0801ad2c <__libc_init_array>:
 801ad2c:	b570      	push	{r4, r5, r6, lr}
 801ad2e:	4d0d      	ldr	r5, [pc, #52]	; (801ad64 <__libc_init_array+0x38>)
 801ad30:	4c0d      	ldr	r4, [pc, #52]	; (801ad68 <__libc_init_array+0x3c>)
 801ad32:	1b64      	subs	r4, r4, r5
 801ad34:	10a4      	asrs	r4, r4, #2
 801ad36:	2600      	movs	r6, #0
 801ad38:	42a6      	cmp	r6, r4
 801ad3a:	d109      	bne.n	801ad50 <__libc_init_array+0x24>
 801ad3c:	4d0b      	ldr	r5, [pc, #44]	; (801ad6c <__libc_init_array+0x40>)
 801ad3e:	4c0c      	ldr	r4, [pc, #48]	; (801ad70 <__libc_init_array+0x44>)
 801ad40:	f004 fb9e 	bl	801f480 <_init>
 801ad44:	1b64      	subs	r4, r4, r5
 801ad46:	10a4      	asrs	r4, r4, #2
 801ad48:	2600      	movs	r6, #0
 801ad4a:	42a6      	cmp	r6, r4
 801ad4c:	d105      	bne.n	801ad5a <__libc_init_array+0x2e>
 801ad4e:	bd70      	pop	{r4, r5, r6, pc}
 801ad50:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad54:	4798      	blx	r3
 801ad56:	3601      	adds	r6, #1
 801ad58:	e7ee      	b.n	801ad38 <__libc_init_array+0xc>
 801ad5a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad5e:	4798      	blx	r3
 801ad60:	3601      	adds	r6, #1
 801ad62:	e7f2      	b.n	801ad4a <__libc_init_array+0x1e>
 801ad64:	0802023c 	.word	0x0802023c
 801ad68:	0802023c 	.word	0x0802023c
 801ad6c:	0802023c 	.word	0x0802023c
 801ad70:	08020240 	.word	0x08020240

0801ad74 <memcpy>:
 801ad74:	440a      	add	r2, r1
 801ad76:	4291      	cmp	r1, r2
 801ad78:	f100 33ff 	add.w	r3, r0, #4294967295
 801ad7c:	d100      	bne.n	801ad80 <memcpy+0xc>
 801ad7e:	4770      	bx	lr
 801ad80:	b510      	push	{r4, lr}
 801ad82:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad86:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ad8a:	4291      	cmp	r1, r2
 801ad8c:	d1f9      	bne.n	801ad82 <memcpy+0xe>
 801ad8e:	bd10      	pop	{r4, pc}

0801ad90 <memset>:
 801ad90:	4402      	add	r2, r0
 801ad92:	4603      	mov	r3, r0
 801ad94:	4293      	cmp	r3, r2
 801ad96:	d100      	bne.n	801ad9a <memset+0xa>
 801ad98:	4770      	bx	lr
 801ad9a:	f803 1b01 	strb.w	r1, [r3], #1
 801ad9e:	e7f9      	b.n	801ad94 <memset+0x4>

0801ada0 <__cvt>:
 801ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ada2:	ed2d 8b02 	vpush	{d8}
 801ada6:	eeb0 8b40 	vmov.f64	d8, d0
 801adaa:	b085      	sub	sp, #20
 801adac:	4617      	mov	r7, r2
 801adae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801adb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801adb2:	ee18 2a90 	vmov	r2, s17
 801adb6:	f025 0520 	bic.w	r5, r5, #32
 801adba:	2a00      	cmp	r2, #0
 801adbc:	bfb6      	itet	lt
 801adbe:	222d      	movlt	r2, #45	; 0x2d
 801adc0:	2200      	movge	r2, #0
 801adc2:	eeb1 8b40 	vneglt.f64	d8, d0
 801adc6:	2d46      	cmp	r5, #70	; 0x46
 801adc8:	460c      	mov	r4, r1
 801adca:	701a      	strb	r2, [r3, #0]
 801adcc:	d004      	beq.n	801add8 <__cvt+0x38>
 801adce:	2d45      	cmp	r5, #69	; 0x45
 801add0:	d100      	bne.n	801add4 <__cvt+0x34>
 801add2:	3401      	adds	r4, #1
 801add4:	2102      	movs	r1, #2
 801add6:	e000      	b.n	801adda <__cvt+0x3a>
 801add8:	2103      	movs	r1, #3
 801adda:	ab03      	add	r3, sp, #12
 801addc:	9301      	str	r3, [sp, #4]
 801adde:	ab02      	add	r3, sp, #8
 801ade0:	9300      	str	r3, [sp, #0]
 801ade2:	4622      	mov	r2, r4
 801ade4:	4633      	mov	r3, r6
 801ade6:	eeb0 0b48 	vmov.f64	d0, d8
 801adea:	f001 fdad 	bl	801c948 <_dtoa_r>
 801adee:	2d47      	cmp	r5, #71	; 0x47
 801adf0:	d101      	bne.n	801adf6 <__cvt+0x56>
 801adf2:	07fb      	lsls	r3, r7, #31
 801adf4:	d51a      	bpl.n	801ae2c <__cvt+0x8c>
 801adf6:	2d46      	cmp	r5, #70	; 0x46
 801adf8:	eb00 0204 	add.w	r2, r0, r4
 801adfc:	d10c      	bne.n	801ae18 <__cvt+0x78>
 801adfe:	7803      	ldrb	r3, [r0, #0]
 801ae00:	2b30      	cmp	r3, #48	; 0x30
 801ae02:	d107      	bne.n	801ae14 <__cvt+0x74>
 801ae04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae0c:	bf1c      	itt	ne
 801ae0e:	f1c4 0401 	rsbne	r4, r4, #1
 801ae12:	6034      	strne	r4, [r6, #0]
 801ae14:	6833      	ldr	r3, [r6, #0]
 801ae16:	441a      	add	r2, r3
 801ae18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae20:	bf08      	it	eq
 801ae22:	9203      	streq	r2, [sp, #12]
 801ae24:	2130      	movs	r1, #48	; 0x30
 801ae26:	9b03      	ldr	r3, [sp, #12]
 801ae28:	4293      	cmp	r3, r2
 801ae2a:	d307      	bcc.n	801ae3c <__cvt+0x9c>
 801ae2c:	9b03      	ldr	r3, [sp, #12]
 801ae2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae30:	1a1b      	subs	r3, r3, r0
 801ae32:	6013      	str	r3, [r2, #0]
 801ae34:	b005      	add	sp, #20
 801ae36:	ecbd 8b02 	vpop	{d8}
 801ae3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae3c:	1c5c      	adds	r4, r3, #1
 801ae3e:	9403      	str	r4, [sp, #12]
 801ae40:	7019      	strb	r1, [r3, #0]
 801ae42:	e7f0      	b.n	801ae26 <__cvt+0x86>

0801ae44 <__exponent>:
 801ae44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae46:	4603      	mov	r3, r0
 801ae48:	2900      	cmp	r1, #0
 801ae4a:	bfb8      	it	lt
 801ae4c:	4249      	neglt	r1, r1
 801ae4e:	f803 2b02 	strb.w	r2, [r3], #2
 801ae52:	bfb4      	ite	lt
 801ae54:	222d      	movlt	r2, #45	; 0x2d
 801ae56:	222b      	movge	r2, #43	; 0x2b
 801ae58:	2909      	cmp	r1, #9
 801ae5a:	7042      	strb	r2, [r0, #1]
 801ae5c:	dd2a      	ble.n	801aeb4 <__exponent+0x70>
 801ae5e:	f10d 0407 	add.w	r4, sp, #7
 801ae62:	46a4      	mov	ip, r4
 801ae64:	270a      	movs	r7, #10
 801ae66:	46a6      	mov	lr, r4
 801ae68:	460a      	mov	r2, r1
 801ae6a:	fb91 f6f7 	sdiv	r6, r1, r7
 801ae6e:	fb07 1516 	mls	r5, r7, r6, r1
 801ae72:	3530      	adds	r5, #48	; 0x30
 801ae74:	2a63      	cmp	r2, #99	; 0x63
 801ae76:	f104 34ff 	add.w	r4, r4, #4294967295
 801ae7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ae7e:	4631      	mov	r1, r6
 801ae80:	dcf1      	bgt.n	801ae66 <__exponent+0x22>
 801ae82:	3130      	adds	r1, #48	; 0x30
 801ae84:	f1ae 0502 	sub.w	r5, lr, #2
 801ae88:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ae8c:	1c44      	adds	r4, r0, #1
 801ae8e:	4629      	mov	r1, r5
 801ae90:	4561      	cmp	r1, ip
 801ae92:	d30a      	bcc.n	801aeaa <__exponent+0x66>
 801ae94:	f10d 0209 	add.w	r2, sp, #9
 801ae98:	eba2 020e 	sub.w	r2, r2, lr
 801ae9c:	4565      	cmp	r5, ip
 801ae9e:	bf88      	it	hi
 801aea0:	2200      	movhi	r2, #0
 801aea2:	4413      	add	r3, r2
 801aea4:	1a18      	subs	r0, r3, r0
 801aea6:	b003      	add	sp, #12
 801aea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aeae:	f804 2f01 	strb.w	r2, [r4, #1]!
 801aeb2:	e7ed      	b.n	801ae90 <__exponent+0x4c>
 801aeb4:	2330      	movs	r3, #48	; 0x30
 801aeb6:	3130      	adds	r1, #48	; 0x30
 801aeb8:	7083      	strb	r3, [r0, #2]
 801aeba:	70c1      	strb	r1, [r0, #3]
 801aebc:	1d03      	adds	r3, r0, #4
 801aebe:	e7f1      	b.n	801aea4 <__exponent+0x60>

0801aec0 <_printf_float>:
 801aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec4:	b08b      	sub	sp, #44	; 0x2c
 801aec6:	460c      	mov	r4, r1
 801aec8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801aecc:	4616      	mov	r6, r2
 801aece:	461f      	mov	r7, r3
 801aed0:	4605      	mov	r5, r0
 801aed2:	f002 fe17 	bl	801db04 <_localeconv_r>
 801aed6:	f8d0 b000 	ldr.w	fp, [r0]
 801aeda:	4658      	mov	r0, fp
 801aedc:	f7e5 fa22 	bl	8000324 <strlen>
 801aee0:	2300      	movs	r3, #0
 801aee2:	9308      	str	r3, [sp, #32]
 801aee4:	f8d8 3000 	ldr.w	r3, [r8]
 801aee8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801aeec:	6822      	ldr	r2, [r4, #0]
 801aeee:	3307      	adds	r3, #7
 801aef0:	f023 0307 	bic.w	r3, r3, #7
 801aef4:	f103 0108 	add.w	r1, r3, #8
 801aef8:	f8c8 1000 	str.w	r1, [r8]
 801aefc:	4682      	mov	sl, r0
 801aefe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801af02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801af06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b168 <_printf_float+0x2a8>
 801af0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801af0e:	eeb0 6bc0 	vabs.f64	d6, d0
 801af12:	eeb4 6b47 	vcmp.f64	d6, d7
 801af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af1a:	dd24      	ble.n	801af66 <_printf_float+0xa6>
 801af1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801af20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af24:	d502      	bpl.n	801af2c <_printf_float+0x6c>
 801af26:	232d      	movs	r3, #45	; 0x2d
 801af28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af2c:	4b90      	ldr	r3, [pc, #576]	; (801b170 <_printf_float+0x2b0>)
 801af2e:	4891      	ldr	r0, [pc, #580]	; (801b174 <_printf_float+0x2b4>)
 801af30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801af34:	bf94      	ite	ls
 801af36:	4698      	movls	r8, r3
 801af38:	4680      	movhi	r8, r0
 801af3a:	2303      	movs	r3, #3
 801af3c:	6123      	str	r3, [r4, #16]
 801af3e:	f022 0204 	bic.w	r2, r2, #4
 801af42:	2300      	movs	r3, #0
 801af44:	6022      	str	r2, [r4, #0]
 801af46:	9304      	str	r3, [sp, #16]
 801af48:	9700      	str	r7, [sp, #0]
 801af4a:	4633      	mov	r3, r6
 801af4c:	aa09      	add	r2, sp, #36	; 0x24
 801af4e:	4621      	mov	r1, r4
 801af50:	4628      	mov	r0, r5
 801af52:	f000 f9d3 	bl	801b2fc <_printf_common>
 801af56:	3001      	adds	r0, #1
 801af58:	f040 808a 	bne.w	801b070 <_printf_float+0x1b0>
 801af5c:	f04f 30ff 	mov.w	r0, #4294967295
 801af60:	b00b      	add	sp, #44	; 0x2c
 801af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af66:	eeb4 0b40 	vcmp.f64	d0, d0
 801af6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af6e:	d709      	bvc.n	801af84 <_printf_float+0xc4>
 801af70:	ee10 3a90 	vmov	r3, s1
 801af74:	2b00      	cmp	r3, #0
 801af76:	bfbc      	itt	lt
 801af78:	232d      	movlt	r3, #45	; 0x2d
 801af7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801af7e:	487e      	ldr	r0, [pc, #504]	; (801b178 <_printf_float+0x2b8>)
 801af80:	4b7e      	ldr	r3, [pc, #504]	; (801b17c <_printf_float+0x2bc>)
 801af82:	e7d5      	b.n	801af30 <_printf_float+0x70>
 801af84:	6863      	ldr	r3, [r4, #4]
 801af86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801af8a:	9104      	str	r1, [sp, #16]
 801af8c:	1c59      	adds	r1, r3, #1
 801af8e:	d13c      	bne.n	801b00a <_printf_float+0x14a>
 801af90:	2306      	movs	r3, #6
 801af92:	6063      	str	r3, [r4, #4]
 801af94:	2300      	movs	r3, #0
 801af96:	9303      	str	r3, [sp, #12]
 801af98:	ab08      	add	r3, sp, #32
 801af9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801af9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801afa2:	ab07      	add	r3, sp, #28
 801afa4:	6861      	ldr	r1, [r4, #4]
 801afa6:	9300      	str	r3, [sp, #0]
 801afa8:	6022      	str	r2, [r4, #0]
 801afaa:	f10d 031b 	add.w	r3, sp, #27
 801afae:	4628      	mov	r0, r5
 801afb0:	f7ff fef6 	bl	801ada0 <__cvt>
 801afb4:	9b04      	ldr	r3, [sp, #16]
 801afb6:	9907      	ldr	r1, [sp, #28]
 801afb8:	2b47      	cmp	r3, #71	; 0x47
 801afba:	4680      	mov	r8, r0
 801afbc:	d108      	bne.n	801afd0 <_printf_float+0x110>
 801afbe:	1cc8      	adds	r0, r1, #3
 801afc0:	db02      	blt.n	801afc8 <_printf_float+0x108>
 801afc2:	6863      	ldr	r3, [r4, #4]
 801afc4:	4299      	cmp	r1, r3
 801afc6:	dd41      	ble.n	801b04c <_printf_float+0x18c>
 801afc8:	f1a9 0902 	sub.w	r9, r9, #2
 801afcc:	fa5f f989 	uxtb.w	r9, r9
 801afd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801afd4:	d820      	bhi.n	801b018 <_printf_float+0x158>
 801afd6:	3901      	subs	r1, #1
 801afd8:	464a      	mov	r2, r9
 801afda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801afde:	9107      	str	r1, [sp, #28]
 801afe0:	f7ff ff30 	bl	801ae44 <__exponent>
 801afe4:	9a08      	ldr	r2, [sp, #32]
 801afe6:	9004      	str	r0, [sp, #16]
 801afe8:	1813      	adds	r3, r2, r0
 801afea:	2a01      	cmp	r2, #1
 801afec:	6123      	str	r3, [r4, #16]
 801afee:	dc02      	bgt.n	801aff6 <_printf_float+0x136>
 801aff0:	6822      	ldr	r2, [r4, #0]
 801aff2:	07d2      	lsls	r2, r2, #31
 801aff4:	d501      	bpl.n	801affa <_printf_float+0x13a>
 801aff6:	3301      	adds	r3, #1
 801aff8:	6123      	str	r3, [r4, #16]
 801affa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d0a2      	beq.n	801af48 <_printf_float+0x88>
 801b002:	232d      	movs	r3, #45	; 0x2d
 801b004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b008:	e79e      	b.n	801af48 <_printf_float+0x88>
 801b00a:	9904      	ldr	r1, [sp, #16]
 801b00c:	2947      	cmp	r1, #71	; 0x47
 801b00e:	d1c1      	bne.n	801af94 <_printf_float+0xd4>
 801b010:	2b00      	cmp	r3, #0
 801b012:	d1bf      	bne.n	801af94 <_printf_float+0xd4>
 801b014:	2301      	movs	r3, #1
 801b016:	e7bc      	b.n	801af92 <_printf_float+0xd2>
 801b018:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b01c:	d118      	bne.n	801b050 <_printf_float+0x190>
 801b01e:	2900      	cmp	r1, #0
 801b020:	6863      	ldr	r3, [r4, #4]
 801b022:	dd0b      	ble.n	801b03c <_printf_float+0x17c>
 801b024:	6121      	str	r1, [r4, #16]
 801b026:	b913      	cbnz	r3, 801b02e <_printf_float+0x16e>
 801b028:	6822      	ldr	r2, [r4, #0]
 801b02a:	07d0      	lsls	r0, r2, #31
 801b02c:	d502      	bpl.n	801b034 <_printf_float+0x174>
 801b02e:	3301      	adds	r3, #1
 801b030:	440b      	add	r3, r1
 801b032:	6123      	str	r3, [r4, #16]
 801b034:	2300      	movs	r3, #0
 801b036:	65a1      	str	r1, [r4, #88]	; 0x58
 801b038:	9304      	str	r3, [sp, #16]
 801b03a:	e7de      	b.n	801affa <_printf_float+0x13a>
 801b03c:	b913      	cbnz	r3, 801b044 <_printf_float+0x184>
 801b03e:	6822      	ldr	r2, [r4, #0]
 801b040:	07d2      	lsls	r2, r2, #31
 801b042:	d501      	bpl.n	801b048 <_printf_float+0x188>
 801b044:	3302      	adds	r3, #2
 801b046:	e7f4      	b.n	801b032 <_printf_float+0x172>
 801b048:	2301      	movs	r3, #1
 801b04a:	e7f2      	b.n	801b032 <_printf_float+0x172>
 801b04c:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b050:	9b08      	ldr	r3, [sp, #32]
 801b052:	4299      	cmp	r1, r3
 801b054:	db05      	blt.n	801b062 <_printf_float+0x1a2>
 801b056:	6823      	ldr	r3, [r4, #0]
 801b058:	6121      	str	r1, [r4, #16]
 801b05a:	07d8      	lsls	r0, r3, #31
 801b05c:	d5ea      	bpl.n	801b034 <_printf_float+0x174>
 801b05e:	1c4b      	adds	r3, r1, #1
 801b060:	e7e7      	b.n	801b032 <_printf_float+0x172>
 801b062:	2900      	cmp	r1, #0
 801b064:	bfd4      	ite	le
 801b066:	f1c1 0202 	rsble	r2, r1, #2
 801b06a:	2201      	movgt	r2, #1
 801b06c:	4413      	add	r3, r2
 801b06e:	e7e0      	b.n	801b032 <_printf_float+0x172>
 801b070:	6823      	ldr	r3, [r4, #0]
 801b072:	055a      	lsls	r2, r3, #21
 801b074:	d407      	bmi.n	801b086 <_printf_float+0x1c6>
 801b076:	6923      	ldr	r3, [r4, #16]
 801b078:	4642      	mov	r2, r8
 801b07a:	4631      	mov	r1, r6
 801b07c:	4628      	mov	r0, r5
 801b07e:	47b8      	blx	r7
 801b080:	3001      	adds	r0, #1
 801b082:	d12a      	bne.n	801b0da <_printf_float+0x21a>
 801b084:	e76a      	b.n	801af5c <_printf_float+0x9c>
 801b086:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b08a:	f240 80e2 	bls.w	801b252 <_printf_float+0x392>
 801b08e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b092:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b09a:	d133      	bne.n	801b104 <_printf_float+0x244>
 801b09c:	4a38      	ldr	r2, [pc, #224]	; (801b180 <_printf_float+0x2c0>)
 801b09e:	2301      	movs	r3, #1
 801b0a0:	4631      	mov	r1, r6
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	47b8      	blx	r7
 801b0a6:	3001      	adds	r0, #1
 801b0a8:	f43f af58 	beq.w	801af5c <_printf_float+0x9c>
 801b0ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b0b0:	429a      	cmp	r2, r3
 801b0b2:	db02      	blt.n	801b0ba <_printf_float+0x1fa>
 801b0b4:	6823      	ldr	r3, [r4, #0]
 801b0b6:	07d8      	lsls	r0, r3, #31
 801b0b8:	d50f      	bpl.n	801b0da <_printf_float+0x21a>
 801b0ba:	4653      	mov	r3, sl
 801b0bc:	465a      	mov	r2, fp
 801b0be:	4631      	mov	r1, r6
 801b0c0:	4628      	mov	r0, r5
 801b0c2:	47b8      	blx	r7
 801b0c4:	3001      	adds	r0, #1
 801b0c6:	f43f af49 	beq.w	801af5c <_printf_float+0x9c>
 801b0ca:	f04f 0800 	mov.w	r8, #0
 801b0ce:	f104 091a 	add.w	r9, r4, #26
 801b0d2:	9b08      	ldr	r3, [sp, #32]
 801b0d4:	3b01      	subs	r3, #1
 801b0d6:	4543      	cmp	r3, r8
 801b0d8:	dc09      	bgt.n	801b0ee <_printf_float+0x22e>
 801b0da:	6823      	ldr	r3, [r4, #0]
 801b0dc:	079b      	lsls	r3, r3, #30
 801b0de:	f100 8108 	bmi.w	801b2f2 <_printf_float+0x432>
 801b0e2:	68e0      	ldr	r0, [r4, #12]
 801b0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0e6:	4298      	cmp	r0, r3
 801b0e8:	bfb8      	it	lt
 801b0ea:	4618      	movlt	r0, r3
 801b0ec:	e738      	b.n	801af60 <_printf_float+0xa0>
 801b0ee:	2301      	movs	r3, #1
 801b0f0:	464a      	mov	r2, r9
 801b0f2:	4631      	mov	r1, r6
 801b0f4:	4628      	mov	r0, r5
 801b0f6:	47b8      	blx	r7
 801b0f8:	3001      	adds	r0, #1
 801b0fa:	f43f af2f 	beq.w	801af5c <_printf_float+0x9c>
 801b0fe:	f108 0801 	add.w	r8, r8, #1
 801b102:	e7e6      	b.n	801b0d2 <_printf_float+0x212>
 801b104:	9b07      	ldr	r3, [sp, #28]
 801b106:	2b00      	cmp	r3, #0
 801b108:	dc3c      	bgt.n	801b184 <_printf_float+0x2c4>
 801b10a:	4a1d      	ldr	r2, [pc, #116]	; (801b180 <_printf_float+0x2c0>)
 801b10c:	2301      	movs	r3, #1
 801b10e:	4631      	mov	r1, r6
 801b110:	4628      	mov	r0, r5
 801b112:	47b8      	blx	r7
 801b114:	3001      	adds	r0, #1
 801b116:	f43f af21 	beq.w	801af5c <_printf_float+0x9c>
 801b11a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b11e:	4313      	orrs	r3, r2
 801b120:	d102      	bne.n	801b128 <_printf_float+0x268>
 801b122:	6823      	ldr	r3, [r4, #0]
 801b124:	07d9      	lsls	r1, r3, #31
 801b126:	d5d8      	bpl.n	801b0da <_printf_float+0x21a>
 801b128:	4653      	mov	r3, sl
 801b12a:	465a      	mov	r2, fp
 801b12c:	4631      	mov	r1, r6
 801b12e:	4628      	mov	r0, r5
 801b130:	47b8      	blx	r7
 801b132:	3001      	adds	r0, #1
 801b134:	f43f af12 	beq.w	801af5c <_printf_float+0x9c>
 801b138:	f04f 0900 	mov.w	r9, #0
 801b13c:	f104 0a1a 	add.w	sl, r4, #26
 801b140:	9b07      	ldr	r3, [sp, #28]
 801b142:	425b      	negs	r3, r3
 801b144:	454b      	cmp	r3, r9
 801b146:	dc01      	bgt.n	801b14c <_printf_float+0x28c>
 801b148:	9b08      	ldr	r3, [sp, #32]
 801b14a:	e795      	b.n	801b078 <_printf_float+0x1b8>
 801b14c:	2301      	movs	r3, #1
 801b14e:	4652      	mov	r2, sl
 801b150:	4631      	mov	r1, r6
 801b152:	4628      	mov	r0, r5
 801b154:	47b8      	blx	r7
 801b156:	3001      	adds	r0, #1
 801b158:	f43f af00 	beq.w	801af5c <_printf_float+0x9c>
 801b15c:	f109 0901 	add.w	r9, r9, #1
 801b160:	e7ee      	b.n	801b140 <_printf_float+0x280>
 801b162:	bf00      	nop
 801b164:	f3af 8000 	nop.w
 801b168:	ffffffff 	.word	0xffffffff
 801b16c:	7fefffff 	.word	0x7fefffff
 801b170:	0801fd94 	.word	0x0801fd94
 801b174:	0801fd98 	.word	0x0801fd98
 801b178:	0801fda0 	.word	0x0801fda0
 801b17c:	0801fd9c 	.word	0x0801fd9c
 801b180:	0801fda4 	.word	0x0801fda4
 801b184:	9a08      	ldr	r2, [sp, #32]
 801b186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b188:	429a      	cmp	r2, r3
 801b18a:	bfa8      	it	ge
 801b18c:	461a      	movge	r2, r3
 801b18e:	2a00      	cmp	r2, #0
 801b190:	4691      	mov	r9, r2
 801b192:	dc38      	bgt.n	801b206 <_printf_float+0x346>
 801b194:	2300      	movs	r3, #0
 801b196:	9305      	str	r3, [sp, #20]
 801b198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b19c:	f104 021a 	add.w	r2, r4, #26
 801b1a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b1a2:	9905      	ldr	r1, [sp, #20]
 801b1a4:	9304      	str	r3, [sp, #16]
 801b1a6:	eba3 0309 	sub.w	r3, r3, r9
 801b1aa:	428b      	cmp	r3, r1
 801b1ac:	dc33      	bgt.n	801b216 <_printf_float+0x356>
 801b1ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b1b2:	429a      	cmp	r2, r3
 801b1b4:	db3c      	blt.n	801b230 <_printf_float+0x370>
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	07da      	lsls	r2, r3, #31
 801b1ba:	d439      	bmi.n	801b230 <_printf_float+0x370>
 801b1bc:	9b08      	ldr	r3, [sp, #32]
 801b1be:	9a04      	ldr	r2, [sp, #16]
 801b1c0:	9907      	ldr	r1, [sp, #28]
 801b1c2:	1a9a      	subs	r2, r3, r2
 801b1c4:	eba3 0901 	sub.w	r9, r3, r1
 801b1c8:	4591      	cmp	r9, r2
 801b1ca:	bfa8      	it	ge
 801b1cc:	4691      	movge	r9, r2
 801b1ce:	f1b9 0f00 	cmp.w	r9, #0
 801b1d2:	dc35      	bgt.n	801b240 <_printf_float+0x380>
 801b1d4:	f04f 0800 	mov.w	r8, #0
 801b1d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b1dc:	f104 0a1a 	add.w	sl, r4, #26
 801b1e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b1e4:	1a9b      	subs	r3, r3, r2
 801b1e6:	eba3 0309 	sub.w	r3, r3, r9
 801b1ea:	4543      	cmp	r3, r8
 801b1ec:	f77f af75 	ble.w	801b0da <_printf_float+0x21a>
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	4652      	mov	r2, sl
 801b1f4:	4631      	mov	r1, r6
 801b1f6:	4628      	mov	r0, r5
 801b1f8:	47b8      	blx	r7
 801b1fa:	3001      	adds	r0, #1
 801b1fc:	f43f aeae 	beq.w	801af5c <_printf_float+0x9c>
 801b200:	f108 0801 	add.w	r8, r8, #1
 801b204:	e7ec      	b.n	801b1e0 <_printf_float+0x320>
 801b206:	4613      	mov	r3, r2
 801b208:	4631      	mov	r1, r6
 801b20a:	4642      	mov	r2, r8
 801b20c:	4628      	mov	r0, r5
 801b20e:	47b8      	blx	r7
 801b210:	3001      	adds	r0, #1
 801b212:	d1bf      	bne.n	801b194 <_printf_float+0x2d4>
 801b214:	e6a2      	b.n	801af5c <_printf_float+0x9c>
 801b216:	2301      	movs	r3, #1
 801b218:	4631      	mov	r1, r6
 801b21a:	4628      	mov	r0, r5
 801b21c:	9204      	str	r2, [sp, #16]
 801b21e:	47b8      	blx	r7
 801b220:	3001      	adds	r0, #1
 801b222:	f43f ae9b 	beq.w	801af5c <_printf_float+0x9c>
 801b226:	9b05      	ldr	r3, [sp, #20]
 801b228:	9a04      	ldr	r2, [sp, #16]
 801b22a:	3301      	adds	r3, #1
 801b22c:	9305      	str	r3, [sp, #20]
 801b22e:	e7b7      	b.n	801b1a0 <_printf_float+0x2e0>
 801b230:	4653      	mov	r3, sl
 801b232:	465a      	mov	r2, fp
 801b234:	4631      	mov	r1, r6
 801b236:	4628      	mov	r0, r5
 801b238:	47b8      	blx	r7
 801b23a:	3001      	adds	r0, #1
 801b23c:	d1be      	bne.n	801b1bc <_printf_float+0x2fc>
 801b23e:	e68d      	b.n	801af5c <_printf_float+0x9c>
 801b240:	9a04      	ldr	r2, [sp, #16]
 801b242:	464b      	mov	r3, r9
 801b244:	4442      	add	r2, r8
 801b246:	4631      	mov	r1, r6
 801b248:	4628      	mov	r0, r5
 801b24a:	47b8      	blx	r7
 801b24c:	3001      	adds	r0, #1
 801b24e:	d1c1      	bne.n	801b1d4 <_printf_float+0x314>
 801b250:	e684      	b.n	801af5c <_printf_float+0x9c>
 801b252:	9a08      	ldr	r2, [sp, #32]
 801b254:	2a01      	cmp	r2, #1
 801b256:	dc01      	bgt.n	801b25c <_printf_float+0x39c>
 801b258:	07db      	lsls	r3, r3, #31
 801b25a:	d537      	bpl.n	801b2cc <_printf_float+0x40c>
 801b25c:	2301      	movs	r3, #1
 801b25e:	4642      	mov	r2, r8
 801b260:	4631      	mov	r1, r6
 801b262:	4628      	mov	r0, r5
 801b264:	47b8      	blx	r7
 801b266:	3001      	adds	r0, #1
 801b268:	f43f ae78 	beq.w	801af5c <_printf_float+0x9c>
 801b26c:	4653      	mov	r3, sl
 801b26e:	465a      	mov	r2, fp
 801b270:	4631      	mov	r1, r6
 801b272:	4628      	mov	r0, r5
 801b274:	47b8      	blx	r7
 801b276:	3001      	adds	r0, #1
 801b278:	f43f ae70 	beq.w	801af5c <_printf_float+0x9c>
 801b27c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b280:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b288:	d01b      	beq.n	801b2c2 <_printf_float+0x402>
 801b28a:	9b08      	ldr	r3, [sp, #32]
 801b28c:	f108 0201 	add.w	r2, r8, #1
 801b290:	3b01      	subs	r3, #1
 801b292:	4631      	mov	r1, r6
 801b294:	4628      	mov	r0, r5
 801b296:	47b8      	blx	r7
 801b298:	3001      	adds	r0, #1
 801b29a:	d10e      	bne.n	801b2ba <_printf_float+0x3fa>
 801b29c:	e65e      	b.n	801af5c <_printf_float+0x9c>
 801b29e:	2301      	movs	r3, #1
 801b2a0:	464a      	mov	r2, r9
 801b2a2:	4631      	mov	r1, r6
 801b2a4:	4628      	mov	r0, r5
 801b2a6:	47b8      	blx	r7
 801b2a8:	3001      	adds	r0, #1
 801b2aa:	f43f ae57 	beq.w	801af5c <_printf_float+0x9c>
 801b2ae:	f108 0801 	add.w	r8, r8, #1
 801b2b2:	9b08      	ldr	r3, [sp, #32]
 801b2b4:	3b01      	subs	r3, #1
 801b2b6:	4543      	cmp	r3, r8
 801b2b8:	dcf1      	bgt.n	801b29e <_printf_float+0x3de>
 801b2ba:	9b04      	ldr	r3, [sp, #16]
 801b2bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b2c0:	e6db      	b.n	801b07a <_printf_float+0x1ba>
 801b2c2:	f04f 0800 	mov.w	r8, #0
 801b2c6:	f104 091a 	add.w	r9, r4, #26
 801b2ca:	e7f2      	b.n	801b2b2 <_printf_float+0x3f2>
 801b2cc:	2301      	movs	r3, #1
 801b2ce:	4642      	mov	r2, r8
 801b2d0:	e7df      	b.n	801b292 <_printf_float+0x3d2>
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	464a      	mov	r2, r9
 801b2d6:	4631      	mov	r1, r6
 801b2d8:	4628      	mov	r0, r5
 801b2da:	47b8      	blx	r7
 801b2dc:	3001      	adds	r0, #1
 801b2de:	f43f ae3d 	beq.w	801af5c <_printf_float+0x9c>
 801b2e2:	f108 0801 	add.w	r8, r8, #1
 801b2e6:	68e3      	ldr	r3, [r4, #12]
 801b2e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b2ea:	1a5b      	subs	r3, r3, r1
 801b2ec:	4543      	cmp	r3, r8
 801b2ee:	dcf0      	bgt.n	801b2d2 <_printf_float+0x412>
 801b2f0:	e6f7      	b.n	801b0e2 <_printf_float+0x222>
 801b2f2:	f04f 0800 	mov.w	r8, #0
 801b2f6:	f104 0919 	add.w	r9, r4, #25
 801b2fa:	e7f4      	b.n	801b2e6 <_printf_float+0x426>

0801b2fc <_printf_common>:
 801b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b300:	4616      	mov	r6, r2
 801b302:	4699      	mov	r9, r3
 801b304:	688a      	ldr	r2, [r1, #8]
 801b306:	690b      	ldr	r3, [r1, #16]
 801b308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b30c:	4293      	cmp	r3, r2
 801b30e:	bfb8      	it	lt
 801b310:	4613      	movlt	r3, r2
 801b312:	6033      	str	r3, [r6, #0]
 801b314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b318:	4607      	mov	r7, r0
 801b31a:	460c      	mov	r4, r1
 801b31c:	b10a      	cbz	r2, 801b322 <_printf_common+0x26>
 801b31e:	3301      	adds	r3, #1
 801b320:	6033      	str	r3, [r6, #0]
 801b322:	6823      	ldr	r3, [r4, #0]
 801b324:	0699      	lsls	r1, r3, #26
 801b326:	bf42      	ittt	mi
 801b328:	6833      	ldrmi	r3, [r6, #0]
 801b32a:	3302      	addmi	r3, #2
 801b32c:	6033      	strmi	r3, [r6, #0]
 801b32e:	6825      	ldr	r5, [r4, #0]
 801b330:	f015 0506 	ands.w	r5, r5, #6
 801b334:	d106      	bne.n	801b344 <_printf_common+0x48>
 801b336:	f104 0a19 	add.w	sl, r4, #25
 801b33a:	68e3      	ldr	r3, [r4, #12]
 801b33c:	6832      	ldr	r2, [r6, #0]
 801b33e:	1a9b      	subs	r3, r3, r2
 801b340:	42ab      	cmp	r3, r5
 801b342:	dc26      	bgt.n	801b392 <_printf_common+0x96>
 801b344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b348:	1e13      	subs	r3, r2, #0
 801b34a:	6822      	ldr	r2, [r4, #0]
 801b34c:	bf18      	it	ne
 801b34e:	2301      	movne	r3, #1
 801b350:	0692      	lsls	r2, r2, #26
 801b352:	d42b      	bmi.n	801b3ac <_printf_common+0xb0>
 801b354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b358:	4649      	mov	r1, r9
 801b35a:	4638      	mov	r0, r7
 801b35c:	47c0      	blx	r8
 801b35e:	3001      	adds	r0, #1
 801b360:	d01e      	beq.n	801b3a0 <_printf_common+0xa4>
 801b362:	6823      	ldr	r3, [r4, #0]
 801b364:	68e5      	ldr	r5, [r4, #12]
 801b366:	6832      	ldr	r2, [r6, #0]
 801b368:	f003 0306 	and.w	r3, r3, #6
 801b36c:	2b04      	cmp	r3, #4
 801b36e:	bf08      	it	eq
 801b370:	1aad      	subeq	r5, r5, r2
 801b372:	68a3      	ldr	r3, [r4, #8]
 801b374:	6922      	ldr	r2, [r4, #16]
 801b376:	bf0c      	ite	eq
 801b378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b37c:	2500      	movne	r5, #0
 801b37e:	4293      	cmp	r3, r2
 801b380:	bfc4      	itt	gt
 801b382:	1a9b      	subgt	r3, r3, r2
 801b384:	18ed      	addgt	r5, r5, r3
 801b386:	2600      	movs	r6, #0
 801b388:	341a      	adds	r4, #26
 801b38a:	42b5      	cmp	r5, r6
 801b38c:	d11a      	bne.n	801b3c4 <_printf_common+0xc8>
 801b38e:	2000      	movs	r0, #0
 801b390:	e008      	b.n	801b3a4 <_printf_common+0xa8>
 801b392:	2301      	movs	r3, #1
 801b394:	4652      	mov	r2, sl
 801b396:	4649      	mov	r1, r9
 801b398:	4638      	mov	r0, r7
 801b39a:	47c0      	blx	r8
 801b39c:	3001      	adds	r0, #1
 801b39e:	d103      	bne.n	801b3a8 <_printf_common+0xac>
 801b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3a8:	3501      	adds	r5, #1
 801b3aa:	e7c6      	b.n	801b33a <_printf_common+0x3e>
 801b3ac:	18e1      	adds	r1, r4, r3
 801b3ae:	1c5a      	adds	r2, r3, #1
 801b3b0:	2030      	movs	r0, #48	; 0x30
 801b3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b3b6:	4422      	add	r2, r4
 801b3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b3c0:	3302      	adds	r3, #2
 801b3c2:	e7c7      	b.n	801b354 <_printf_common+0x58>
 801b3c4:	2301      	movs	r3, #1
 801b3c6:	4622      	mov	r2, r4
 801b3c8:	4649      	mov	r1, r9
 801b3ca:	4638      	mov	r0, r7
 801b3cc:	47c0      	blx	r8
 801b3ce:	3001      	adds	r0, #1
 801b3d0:	d0e6      	beq.n	801b3a0 <_printf_common+0xa4>
 801b3d2:	3601      	adds	r6, #1
 801b3d4:	e7d9      	b.n	801b38a <_printf_common+0x8e>
	...

0801b3d8 <_printf_i>:
 801b3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b3dc:	7e0f      	ldrb	r7, [r1, #24]
 801b3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b3e0:	2f78      	cmp	r7, #120	; 0x78
 801b3e2:	4691      	mov	r9, r2
 801b3e4:	4680      	mov	r8, r0
 801b3e6:	460c      	mov	r4, r1
 801b3e8:	469a      	mov	sl, r3
 801b3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b3ee:	d807      	bhi.n	801b400 <_printf_i+0x28>
 801b3f0:	2f62      	cmp	r7, #98	; 0x62
 801b3f2:	d80a      	bhi.n	801b40a <_printf_i+0x32>
 801b3f4:	2f00      	cmp	r7, #0
 801b3f6:	f000 80d8 	beq.w	801b5aa <_printf_i+0x1d2>
 801b3fa:	2f58      	cmp	r7, #88	; 0x58
 801b3fc:	f000 80a3 	beq.w	801b546 <_printf_i+0x16e>
 801b400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b408:	e03a      	b.n	801b480 <_printf_i+0xa8>
 801b40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b40e:	2b15      	cmp	r3, #21
 801b410:	d8f6      	bhi.n	801b400 <_printf_i+0x28>
 801b412:	a101      	add	r1, pc, #4	; (adr r1, 801b418 <_printf_i+0x40>)
 801b414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b418:	0801b471 	.word	0x0801b471
 801b41c:	0801b485 	.word	0x0801b485
 801b420:	0801b401 	.word	0x0801b401
 801b424:	0801b401 	.word	0x0801b401
 801b428:	0801b401 	.word	0x0801b401
 801b42c:	0801b401 	.word	0x0801b401
 801b430:	0801b485 	.word	0x0801b485
 801b434:	0801b401 	.word	0x0801b401
 801b438:	0801b401 	.word	0x0801b401
 801b43c:	0801b401 	.word	0x0801b401
 801b440:	0801b401 	.word	0x0801b401
 801b444:	0801b591 	.word	0x0801b591
 801b448:	0801b4b5 	.word	0x0801b4b5
 801b44c:	0801b573 	.word	0x0801b573
 801b450:	0801b401 	.word	0x0801b401
 801b454:	0801b401 	.word	0x0801b401
 801b458:	0801b5b3 	.word	0x0801b5b3
 801b45c:	0801b401 	.word	0x0801b401
 801b460:	0801b4b5 	.word	0x0801b4b5
 801b464:	0801b401 	.word	0x0801b401
 801b468:	0801b401 	.word	0x0801b401
 801b46c:	0801b57b 	.word	0x0801b57b
 801b470:	682b      	ldr	r3, [r5, #0]
 801b472:	1d1a      	adds	r2, r3, #4
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	602a      	str	r2, [r5, #0]
 801b478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b480:	2301      	movs	r3, #1
 801b482:	e0a3      	b.n	801b5cc <_printf_i+0x1f4>
 801b484:	6820      	ldr	r0, [r4, #0]
 801b486:	6829      	ldr	r1, [r5, #0]
 801b488:	0606      	lsls	r6, r0, #24
 801b48a:	f101 0304 	add.w	r3, r1, #4
 801b48e:	d50a      	bpl.n	801b4a6 <_printf_i+0xce>
 801b490:	680e      	ldr	r6, [r1, #0]
 801b492:	602b      	str	r3, [r5, #0]
 801b494:	2e00      	cmp	r6, #0
 801b496:	da03      	bge.n	801b4a0 <_printf_i+0xc8>
 801b498:	232d      	movs	r3, #45	; 0x2d
 801b49a:	4276      	negs	r6, r6
 801b49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4a0:	485e      	ldr	r0, [pc, #376]	; (801b61c <_printf_i+0x244>)
 801b4a2:	230a      	movs	r3, #10
 801b4a4:	e019      	b.n	801b4da <_printf_i+0x102>
 801b4a6:	680e      	ldr	r6, [r1, #0]
 801b4a8:	602b      	str	r3, [r5, #0]
 801b4aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b4ae:	bf18      	it	ne
 801b4b0:	b236      	sxthne	r6, r6
 801b4b2:	e7ef      	b.n	801b494 <_printf_i+0xbc>
 801b4b4:	682b      	ldr	r3, [r5, #0]
 801b4b6:	6820      	ldr	r0, [r4, #0]
 801b4b8:	1d19      	adds	r1, r3, #4
 801b4ba:	6029      	str	r1, [r5, #0]
 801b4bc:	0601      	lsls	r1, r0, #24
 801b4be:	d501      	bpl.n	801b4c4 <_printf_i+0xec>
 801b4c0:	681e      	ldr	r6, [r3, #0]
 801b4c2:	e002      	b.n	801b4ca <_printf_i+0xf2>
 801b4c4:	0646      	lsls	r6, r0, #25
 801b4c6:	d5fb      	bpl.n	801b4c0 <_printf_i+0xe8>
 801b4c8:	881e      	ldrh	r6, [r3, #0]
 801b4ca:	4854      	ldr	r0, [pc, #336]	; (801b61c <_printf_i+0x244>)
 801b4cc:	2f6f      	cmp	r7, #111	; 0x6f
 801b4ce:	bf0c      	ite	eq
 801b4d0:	2308      	moveq	r3, #8
 801b4d2:	230a      	movne	r3, #10
 801b4d4:	2100      	movs	r1, #0
 801b4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b4da:	6865      	ldr	r5, [r4, #4]
 801b4dc:	60a5      	str	r5, [r4, #8]
 801b4de:	2d00      	cmp	r5, #0
 801b4e0:	bfa2      	ittt	ge
 801b4e2:	6821      	ldrge	r1, [r4, #0]
 801b4e4:	f021 0104 	bicge.w	r1, r1, #4
 801b4e8:	6021      	strge	r1, [r4, #0]
 801b4ea:	b90e      	cbnz	r6, 801b4f0 <_printf_i+0x118>
 801b4ec:	2d00      	cmp	r5, #0
 801b4ee:	d04d      	beq.n	801b58c <_printf_i+0x1b4>
 801b4f0:	4615      	mov	r5, r2
 801b4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 801b4f6:	fb03 6711 	mls	r7, r3, r1, r6
 801b4fa:	5dc7      	ldrb	r7, [r0, r7]
 801b4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b500:	4637      	mov	r7, r6
 801b502:	42bb      	cmp	r3, r7
 801b504:	460e      	mov	r6, r1
 801b506:	d9f4      	bls.n	801b4f2 <_printf_i+0x11a>
 801b508:	2b08      	cmp	r3, #8
 801b50a:	d10b      	bne.n	801b524 <_printf_i+0x14c>
 801b50c:	6823      	ldr	r3, [r4, #0]
 801b50e:	07de      	lsls	r6, r3, #31
 801b510:	d508      	bpl.n	801b524 <_printf_i+0x14c>
 801b512:	6923      	ldr	r3, [r4, #16]
 801b514:	6861      	ldr	r1, [r4, #4]
 801b516:	4299      	cmp	r1, r3
 801b518:	bfde      	ittt	le
 801b51a:	2330      	movle	r3, #48	; 0x30
 801b51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b520:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b524:	1b52      	subs	r2, r2, r5
 801b526:	6122      	str	r2, [r4, #16]
 801b528:	f8cd a000 	str.w	sl, [sp]
 801b52c:	464b      	mov	r3, r9
 801b52e:	aa03      	add	r2, sp, #12
 801b530:	4621      	mov	r1, r4
 801b532:	4640      	mov	r0, r8
 801b534:	f7ff fee2 	bl	801b2fc <_printf_common>
 801b538:	3001      	adds	r0, #1
 801b53a:	d14c      	bne.n	801b5d6 <_printf_i+0x1fe>
 801b53c:	f04f 30ff 	mov.w	r0, #4294967295
 801b540:	b004      	add	sp, #16
 801b542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b546:	4835      	ldr	r0, [pc, #212]	; (801b61c <_printf_i+0x244>)
 801b548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b54c:	6829      	ldr	r1, [r5, #0]
 801b54e:	6823      	ldr	r3, [r4, #0]
 801b550:	f851 6b04 	ldr.w	r6, [r1], #4
 801b554:	6029      	str	r1, [r5, #0]
 801b556:	061d      	lsls	r5, r3, #24
 801b558:	d514      	bpl.n	801b584 <_printf_i+0x1ac>
 801b55a:	07df      	lsls	r7, r3, #31
 801b55c:	bf44      	itt	mi
 801b55e:	f043 0320 	orrmi.w	r3, r3, #32
 801b562:	6023      	strmi	r3, [r4, #0]
 801b564:	b91e      	cbnz	r6, 801b56e <_printf_i+0x196>
 801b566:	6823      	ldr	r3, [r4, #0]
 801b568:	f023 0320 	bic.w	r3, r3, #32
 801b56c:	6023      	str	r3, [r4, #0]
 801b56e:	2310      	movs	r3, #16
 801b570:	e7b0      	b.n	801b4d4 <_printf_i+0xfc>
 801b572:	6823      	ldr	r3, [r4, #0]
 801b574:	f043 0320 	orr.w	r3, r3, #32
 801b578:	6023      	str	r3, [r4, #0]
 801b57a:	2378      	movs	r3, #120	; 0x78
 801b57c:	4828      	ldr	r0, [pc, #160]	; (801b620 <_printf_i+0x248>)
 801b57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b582:	e7e3      	b.n	801b54c <_printf_i+0x174>
 801b584:	0659      	lsls	r1, r3, #25
 801b586:	bf48      	it	mi
 801b588:	b2b6      	uxthmi	r6, r6
 801b58a:	e7e6      	b.n	801b55a <_printf_i+0x182>
 801b58c:	4615      	mov	r5, r2
 801b58e:	e7bb      	b.n	801b508 <_printf_i+0x130>
 801b590:	682b      	ldr	r3, [r5, #0]
 801b592:	6826      	ldr	r6, [r4, #0]
 801b594:	6961      	ldr	r1, [r4, #20]
 801b596:	1d18      	adds	r0, r3, #4
 801b598:	6028      	str	r0, [r5, #0]
 801b59a:	0635      	lsls	r5, r6, #24
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	d501      	bpl.n	801b5a4 <_printf_i+0x1cc>
 801b5a0:	6019      	str	r1, [r3, #0]
 801b5a2:	e002      	b.n	801b5aa <_printf_i+0x1d2>
 801b5a4:	0670      	lsls	r0, r6, #25
 801b5a6:	d5fb      	bpl.n	801b5a0 <_printf_i+0x1c8>
 801b5a8:	8019      	strh	r1, [r3, #0]
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	6123      	str	r3, [r4, #16]
 801b5ae:	4615      	mov	r5, r2
 801b5b0:	e7ba      	b.n	801b528 <_printf_i+0x150>
 801b5b2:	682b      	ldr	r3, [r5, #0]
 801b5b4:	1d1a      	adds	r2, r3, #4
 801b5b6:	602a      	str	r2, [r5, #0]
 801b5b8:	681d      	ldr	r5, [r3, #0]
 801b5ba:	6862      	ldr	r2, [r4, #4]
 801b5bc:	2100      	movs	r1, #0
 801b5be:	4628      	mov	r0, r5
 801b5c0:	f7e4 febe 	bl	8000340 <memchr>
 801b5c4:	b108      	cbz	r0, 801b5ca <_printf_i+0x1f2>
 801b5c6:	1b40      	subs	r0, r0, r5
 801b5c8:	6060      	str	r0, [r4, #4]
 801b5ca:	6863      	ldr	r3, [r4, #4]
 801b5cc:	6123      	str	r3, [r4, #16]
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5d4:	e7a8      	b.n	801b528 <_printf_i+0x150>
 801b5d6:	6923      	ldr	r3, [r4, #16]
 801b5d8:	462a      	mov	r2, r5
 801b5da:	4649      	mov	r1, r9
 801b5dc:	4640      	mov	r0, r8
 801b5de:	47d0      	blx	sl
 801b5e0:	3001      	adds	r0, #1
 801b5e2:	d0ab      	beq.n	801b53c <_printf_i+0x164>
 801b5e4:	6823      	ldr	r3, [r4, #0]
 801b5e6:	079b      	lsls	r3, r3, #30
 801b5e8:	d413      	bmi.n	801b612 <_printf_i+0x23a>
 801b5ea:	68e0      	ldr	r0, [r4, #12]
 801b5ec:	9b03      	ldr	r3, [sp, #12]
 801b5ee:	4298      	cmp	r0, r3
 801b5f0:	bfb8      	it	lt
 801b5f2:	4618      	movlt	r0, r3
 801b5f4:	e7a4      	b.n	801b540 <_printf_i+0x168>
 801b5f6:	2301      	movs	r3, #1
 801b5f8:	4632      	mov	r2, r6
 801b5fa:	4649      	mov	r1, r9
 801b5fc:	4640      	mov	r0, r8
 801b5fe:	47d0      	blx	sl
 801b600:	3001      	adds	r0, #1
 801b602:	d09b      	beq.n	801b53c <_printf_i+0x164>
 801b604:	3501      	adds	r5, #1
 801b606:	68e3      	ldr	r3, [r4, #12]
 801b608:	9903      	ldr	r1, [sp, #12]
 801b60a:	1a5b      	subs	r3, r3, r1
 801b60c:	42ab      	cmp	r3, r5
 801b60e:	dcf2      	bgt.n	801b5f6 <_printf_i+0x21e>
 801b610:	e7eb      	b.n	801b5ea <_printf_i+0x212>
 801b612:	2500      	movs	r5, #0
 801b614:	f104 0619 	add.w	r6, r4, #25
 801b618:	e7f5      	b.n	801b606 <_printf_i+0x22e>
 801b61a:	bf00      	nop
 801b61c:	0801fda6 	.word	0x0801fda6
 801b620:	0801fdb7 	.word	0x0801fdb7

0801b624 <_scanf_float>:
 801b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b628:	b087      	sub	sp, #28
 801b62a:	4617      	mov	r7, r2
 801b62c:	9303      	str	r3, [sp, #12]
 801b62e:	688b      	ldr	r3, [r1, #8]
 801b630:	1e5a      	subs	r2, r3, #1
 801b632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b636:	bf83      	ittte	hi
 801b638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b63c:	195b      	addhi	r3, r3, r5
 801b63e:	9302      	strhi	r3, [sp, #8]
 801b640:	2300      	movls	r3, #0
 801b642:	bf86      	itte	hi
 801b644:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b648:	608b      	strhi	r3, [r1, #8]
 801b64a:	9302      	strls	r3, [sp, #8]
 801b64c:	680b      	ldr	r3, [r1, #0]
 801b64e:	468b      	mov	fp, r1
 801b650:	2500      	movs	r5, #0
 801b652:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b656:	f84b 3b1c 	str.w	r3, [fp], #28
 801b65a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b65e:	4680      	mov	r8, r0
 801b660:	460c      	mov	r4, r1
 801b662:	465e      	mov	r6, fp
 801b664:	46aa      	mov	sl, r5
 801b666:	46a9      	mov	r9, r5
 801b668:	9501      	str	r5, [sp, #4]
 801b66a:	68a2      	ldr	r2, [r4, #8]
 801b66c:	b152      	cbz	r2, 801b684 <_scanf_float+0x60>
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	2b4e      	cmp	r3, #78	; 0x4e
 801b674:	d864      	bhi.n	801b740 <_scanf_float+0x11c>
 801b676:	2b40      	cmp	r3, #64	; 0x40
 801b678:	d83c      	bhi.n	801b6f4 <_scanf_float+0xd0>
 801b67a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b67e:	b2c8      	uxtb	r0, r1
 801b680:	280e      	cmp	r0, #14
 801b682:	d93a      	bls.n	801b6fa <_scanf_float+0xd6>
 801b684:	f1b9 0f00 	cmp.w	r9, #0
 801b688:	d003      	beq.n	801b692 <_scanf_float+0x6e>
 801b68a:	6823      	ldr	r3, [r4, #0]
 801b68c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b690:	6023      	str	r3, [r4, #0]
 801b692:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b696:	f1ba 0f01 	cmp.w	sl, #1
 801b69a:	f200 8113 	bhi.w	801b8c4 <_scanf_float+0x2a0>
 801b69e:	455e      	cmp	r6, fp
 801b6a0:	f200 8105 	bhi.w	801b8ae <_scanf_float+0x28a>
 801b6a4:	2501      	movs	r5, #1
 801b6a6:	4628      	mov	r0, r5
 801b6a8:	b007      	add	sp, #28
 801b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b6b2:	2a0d      	cmp	r2, #13
 801b6b4:	d8e6      	bhi.n	801b684 <_scanf_float+0x60>
 801b6b6:	a101      	add	r1, pc, #4	; (adr r1, 801b6bc <_scanf_float+0x98>)
 801b6b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b6bc:	0801b7fb 	.word	0x0801b7fb
 801b6c0:	0801b685 	.word	0x0801b685
 801b6c4:	0801b685 	.word	0x0801b685
 801b6c8:	0801b685 	.word	0x0801b685
 801b6cc:	0801b85b 	.word	0x0801b85b
 801b6d0:	0801b833 	.word	0x0801b833
 801b6d4:	0801b685 	.word	0x0801b685
 801b6d8:	0801b685 	.word	0x0801b685
 801b6dc:	0801b809 	.word	0x0801b809
 801b6e0:	0801b685 	.word	0x0801b685
 801b6e4:	0801b685 	.word	0x0801b685
 801b6e8:	0801b685 	.word	0x0801b685
 801b6ec:	0801b685 	.word	0x0801b685
 801b6f0:	0801b7c1 	.word	0x0801b7c1
 801b6f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b6f8:	e7db      	b.n	801b6b2 <_scanf_float+0x8e>
 801b6fa:	290e      	cmp	r1, #14
 801b6fc:	d8c2      	bhi.n	801b684 <_scanf_float+0x60>
 801b6fe:	a001      	add	r0, pc, #4	; (adr r0, 801b704 <_scanf_float+0xe0>)
 801b700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b704:	0801b7b3 	.word	0x0801b7b3
 801b708:	0801b685 	.word	0x0801b685
 801b70c:	0801b7b3 	.word	0x0801b7b3
 801b710:	0801b847 	.word	0x0801b847
 801b714:	0801b685 	.word	0x0801b685
 801b718:	0801b761 	.word	0x0801b761
 801b71c:	0801b79d 	.word	0x0801b79d
 801b720:	0801b79d 	.word	0x0801b79d
 801b724:	0801b79d 	.word	0x0801b79d
 801b728:	0801b79d 	.word	0x0801b79d
 801b72c:	0801b79d 	.word	0x0801b79d
 801b730:	0801b79d 	.word	0x0801b79d
 801b734:	0801b79d 	.word	0x0801b79d
 801b738:	0801b79d 	.word	0x0801b79d
 801b73c:	0801b79d 	.word	0x0801b79d
 801b740:	2b6e      	cmp	r3, #110	; 0x6e
 801b742:	d809      	bhi.n	801b758 <_scanf_float+0x134>
 801b744:	2b60      	cmp	r3, #96	; 0x60
 801b746:	d8b2      	bhi.n	801b6ae <_scanf_float+0x8a>
 801b748:	2b54      	cmp	r3, #84	; 0x54
 801b74a:	d077      	beq.n	801b83c <_scanf_float+0x218>
 801b74c:	2b59      	cmp	r3, #89	; 0x59
 801b74e:	d199      	bne.n	801b684 <_scanf_float+0x60>
 801b750:	2d07      	cmp	r5, #7
 801b752:	d197      	bne.n	801b684 <_scanf_float+0x60>
 801b754:	2508      	movs	r5, #8
 801b756:	e029      	b.n	801b7ac <_scanf_float+0x188>
 801b758:	2b74      	cmp	r3, #116	; 0x74
 801b75a:	d06f      	beq.n	801b83c <_scanf_float+0x218>
 801b75c:	2b79      	cmp	r3, #121	; 0x79
 801b75e:	e7f6      	b.n	801b74e <_scanf_float+0x12a>
 801b760:	6821      	ldr	r1, [r4, #0]
 801b762:	05c8      	lsls	r0, r1, #23
 801b764:	d51a      	bpl.n	801b79c <_scanf_float+0x178>
 801b766:	9b02      	ldr	r3, [sp, #8]
 801b768:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b76c:	6021      	str	r1, [r4, #0]
 801b76e:	f109 0901 	add.w	r9, r9, #1
 801b772:	b11b      	cbz	r3, 801b77c <_scanf_float+0x158>
 801b774:	3b01      	subs	r3, #1
 801b776:	3201      	adds	r2, #1
 801b778:	9302      	str	r3, [sp, #8]
 801b77a:	60a2      	str	r2, [r4, #8]
 801b77c:	68a3      	ldr	r3, [r4, #8]
 801b77e:	3b01      	subs	r3, #1
 801b780:	60a3      	str	r3, [r4, #8]
 801b782:	6923      	ldr	r3, [r4, #16]
 801b784:	3301      	adds	r3, #1
 801b786:	6123      	str	r3, [r4, #16]
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	3b01      	subs	r3, #1
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	607b      	str	r3, [r7, #4]
 801b790:	f340 8084 	ble.w	801b89c <_scanf_float+0x278>
 801b794:	683b      	ldr	r3, [r7, #0]
 801b796:	3301      	adds	r3, #1
 801b798:	603b      	str	r3, [r7, #0]
 801b79a:	e766      	b.n	801b66a <_scanf_float+0x46>
 801b79c:	eb1a 0f05 	cmn.w	sl, r5
 801b7a0:	f47f af70 	bne.w	801b684 <_scanf_float+0x60>
 801b7a4:	6822      	ldr	r2, [r4, #0]
 801b7a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b7aa:	6022      	str	r2, [r4, #0]
 801b7ac:	f806 3b01 	strb.w	r3, [r6], #1
 801b7b0:	e7e4      	b.n	801b77c <_scanf_float+0x158>
 801b7b2:	6822      	ldr	r2, [r4, #0]
 801b7b4:	0610      	lsls	r0, r2, #24
 801b7b6:	f57f af65 	bpl.w	801b684 <_scanf_float+0x60>
 801b7ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b7be:	e7f4      	b.n	801b7aa <_scanf_float+0x186>
 801b7c0:	f1ba 0f00 	cmp.w	sl, #0
 801b7c4:	d10e      	bne.n	801b7e4 <_scanf_float+0x1c0>
 801b7c6:	f1b9 0f00 	cmp.w	r9, #0
 801b7ca:	d10e      	bne.n	801b7ea <_scanf_float+0x1c6>
 801b7cc:	6822      	ldr	r2, [r4, #0]
 801b7ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b7d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b7d6:	d108      	bne.n	801b7ea <_scanf_float+0x1c6>
 801b7d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b7dc:	6022      	str	r2, [r4, #0]
 801b7de:	f04f 0a01 	mov.w	sl, #1
 801b7e2:	e7e3      	b.n	801b7ac <_scanf_float+0x188>
 801b7e4:	f1ba 0f02 	cmp.w	sl, #2
 801b7e8:	d055      	beq.n	801b896 <_scanf_float+0x272>
 801b7ea:	2d01      	cmp	r5, #1
 801b7ec:	d002      	beq.n	801b7f4 <_scanf_float+0x1d0>
 801b7ee:	2d04      	cmp	r5, #4
 801b7f0:	f47f af48 	bne.w	801b684 <_scanf_float+0x60>
 801b7f4:	3501      	adds	r5, #1
 801b7f6:	b2ed      	uxtb	r5, r5
 801b7f8:	e7d8      	b.n	801b7ac <_scanf_float+0x188>
 801b7fa:	f1ba 0f01 	cmp.w	sl, #1
 801b7fe:	f47f af41 	bne.w	801b684 <_scanf_float+0x60>
 801b802:	f04f 0a02 	mov.w	sl, #2
 801b806:	e7d1      	b.n	801b7ac <_scanf_float+0x188>
 801b808:	b97d      	cbnz	r5, 801b82a <_scanf_float+0x206>
 801b80a:	f1b9 0f00 	cmp.w	r9, #0
 801b80e:	f47f af3c 	bne.w	801b68a <_scanf_float+0x66>
 801b812:	6822      	ldr	r2, [r4, #0]
 801b814:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b818:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b81c:	f47f af39 	bne.w	801b692 <_scanf_float+0x6e>
 801b820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b824:	6022      	str	r2, [r4, #0]
 801b826:	2501      	movs	r5, #1
 801b828:	e7c0      	b.n	801b7ac <_scanf_float+0x188>
 801b82a:	2d03      	cmp	r5, #3
 801b82c:	d0e2      	beq.n	801b7f4 <_scanf_float+0x1d0>
 801b82e:	2d05      	cmp	r5, #5
 801b830:	e7de      	b.n	801b7f0 <_scanf_float+0x1cc>
 801b832:	2d02      	cmp	r5, #2
 801b834:	f47f af26 	bne.w	801b684 <_scanf_float+0x60>
 801b838:	2503      	movs	r5, #3
 801b83a:	e7b7      	b.n	801b7ac <_scanf_float+0x188>
 801b83c:	2d06      	cmp	r5, #6
 801b83e:	f47f af21 	bne.w	801b684 <_scanf_float+0x60>
 801b842:	2507      	movs	r5, #7
 801b844:	e7b2      	b.n	801b7ac <_scanf_float+0x188>
 801b846:	6822      	ldr	r2, [r4, #0]
 801b848:	0591      	lsls	r1, r2, #22
 801b84a:	f57f af1b 	bpl.w	801b684 <_scanf_float+0x60>
 801b84e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b852:	6022      	str	r2, [r4, #0]
 801b854:	f8cd 9004 	str.w	r9, [sp, #4]
 801b858:	e7a8      	b.n	801b7ac <_scanf_float+0x188>
 801b85a:	6822      	ldr	r2, [r4, #0]
 801b85c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b860:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b864:	d006      	beq.n	801b874 <_scanf_float+0x250>
 801b866:	0550      	lsls	r0, r2, #21
 801b868:	f57f af0c 	bpl.w	801b684 <_scanf_float+0x60>
 801b86c:	f1b9 0f00 	cmp.w	r9, #0
 801b870:	f43f af0f 	beq.w	801b692 <_scanf_float+0x6e>
 801b874:	0591      	lsls	r1, r2, #22
 801b876:	bf58      	it	pl
 801b878:	9901      	ldrpl	r1, [sp, #4]
 801b87a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b87e:	bf58      	it	pl
 801b880:	eba9 0101 	subpl.w	r1, r9, r1
 801b884:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b888:	bf58      	it	pl
 801b88a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b88e:	6022      	str	r2, [r4, #0]
 801b890:	f04f 0900 	mov.w	r9, #0
 801b894:	e78a      	b.n	801b7ac <_scanf_float+0x188>
 801b896:	f04f 0a03 	mov.w	sl, #3
 801b89a:	e787      	b.n	801b7ac <_scanf_float+0x188>
 801b89c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b8a0:	4639      	mov	r1, r7
 801b8a2:	4640      	mov	r0, r8
 801b8a4:	4798      	blx	r3
 801b8a6:	2800      	cmp	r0, #0
 801b8a8:	f43f aedf 	beq.w	801b66a <_scanf_float+0x46>
 801b8ac:	e6ea      	b.n	801b684 <_scanf_float+0x60>
 801b8ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8b6:	463a      	mov	r2, r7
 801b8b8:	4640      	mov	r0, r8
 801b8ba:	4798      	blx	r3
 801b8bc:	6923      	ldr	r3, [r4, #16]
 801b8be:	3b01      	subs	r3, #1
 801b8c0:	6123      	str	r3, [r4, #16]
 801b8c2:	e6ec      	b.n	801b69e <_scanf_float+0x7a>
 801b8c4:	1e6b      	subs	r3, r5, #1
 801b8c6:	2b06      	cmp	r3, #6
 801b8c8:	d825      	bhi.n	801b916 <_scanf_float+0x2f2>
 801b8ca:	2d02      	cmp	r5, #2
 801b8cc:	d836      	bhi.n	801b93c <_scanf_float+0x318>
 801b8ce:	455e      	cmp	r6, fp
 801b8d0:	f67f aee8 	bls.w	801b6a4 <_scanf_float+0x80>
 801b8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b8dc:	463a      	mov	r2, r7
 801b8de:	4640      	mov	r0, r8
 801b8e0:	4798      	blx	r3
 801b8e2:	6923      	ldr	r3, [r4, #16]
 801b8e4:	3b01      	subs	r3, #1
 801b8e6:	6123      	str	r3, [r4, #16]
 801b8e8:	e7f1      	b.n	801b8ce <_scanf_float+0x2aa>
 801b8ea:	9802      	ldr	r0, [sp, #8]
 801b8ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b8f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b8f4:	9002      	str	r0, [sp, #8]
 801b8f6:	463a      	mov	r2, r7
 801b8f8:	4640      	mov	r0, r8
 801b8fa:	4798      	blx	r3
 801b8fc:	6923      	ldr	r3, [r4, #16]
 801b8fe:	3b01      	subs	r3, #1
 801b900:	6123      	str	r3, [r4, #16]
 801b902:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b906:	fa5f fa8a 	uxtb.w	sl, sl
 801b90a:	f1ba 0f02 	cmp.w	sl, #2
 801b90e:	d1ec      	bne.n	801b8ea <_scanf_float+0x2c6>
 801b910:	3d03      	subs	r5, #3
 801b912:	b2ed      	uxtb	r5, r5
 801b914:	1b76      	subs	r6, r6, r5
 801b916:	6823      	ldr	r3, [r4, #0]
 801b918:	05da      	lsls	r2, r3, #23
 801b91a:	d52f      	bpl.n	801b97c <_scanf_float+0x358>
 801b91c:	055b      	lsls	r3, r3, #21
 801b91e:	d510      	bpl.n	801b942 <_scanf_float+0x31e>
 801b920:	455e      	cmp	r6, fp
 801b922:	f67f aebf 	bls.w	801b6a4 <_scanf_float+0x80>
 801b926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b92a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b92e:	463a      	mov	r2, r7
 801b930:	4640      	mov	r0, r8
 801b932:	4798      	blx	r3
 801b934:	6923      	ldr	r3, [r4, #16]
 801b936:	3b01      	subs	r3, #1
 801b938:	6123      	str	r3, [r4, #16]
 801b93a:	e7f1      	b.n	801b920 <_scanf_float+0x2fc>
 801b93c:	46aa      	mov	sl, r5
 801b93e:	9602      	str	r6, [sp, #8]
 801b940:	e7df      	b.n	801b902 <_scanf_float+0x2de>
 801b942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b946:	6923      	ldr	r3, [r4, #16]
 801b948:	2965      	cmp	r1, #101	; 0x65
 801b94a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b94e:	f106 35ff 	add.w	r5, r6, #4294967295
 801b952:	6123      	str	r3, [r4, #16]
 801b954:	d00c      	beq.n	801b970 <_scanf_float+0x34c>
 801b956:	2945      	cmp	r1, #69	; 0x45
 801b958:	d00a      	beq.n	801b970 <_scanf_float+0x34c>
 801b95a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b95e:	463a      	mov	r2, r7
 801b960:	4640      	mov	r0, r8
 801b962:	4798      	blx	r3
 801b964:	6923      	ldr	r3, [r4, #16]
 801b966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b96a:	3b01      	subs	r3, #1
 801b96c:	1eb5      	subs	r5, r6, #2
 801b96e:	6123      	str	r3, [r4, #16]
 801b970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b974:	463a      	mov	r2, r7
 801b976:	4640      	mov	r0, r8
 801b978:	4798      	blx	r3
 801b97a:	462e      	mov	r6, r5
 801b97c:	6825      	ldr	r5, [r4, #0]
 801b97e:	f015 0510 	ands.w	r5, r5, #16
 801b982:	d14e      	bne.n	801ba22 <_scanf_float+0x3fe>
 801b984:	7035      	strb	r5, [r6, #0]
 801b986:	6823      	ldr	r3, [r4, #0]
 801b988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b990:	d119      	bne.n	801b9c6 <_scanf_float+0x3a2>
 801b992:	9b01      	ldr	r3, [sp, #4]
 801b994:	454b      	cmp	r3, r9
 801b996:	eba3 0209 	sub.w	r2, r3, r9
 801b99a:	d121      	bne.n	801b9e0 <_scanf_float+0x3bc>
 801b99c:	2200      	movs	r2, #0
 801b99e:	4659      	mov	r1, fp
 801b9a0:	4640      	mov	r0, r8
 801b9a2:	f000 fe97 	bl	801c6d4 <_strtod_r>
 801b9a6:	6822      	ldr	r2, [r4, #0]
 801b9a8:	9b03      	ldr	r3, [sp, #12]
 801b9aa:	f012 0f02 	tst.w	r2, #2
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	d021      	beq.n	801b9f6 <_scanf_float+0x3d2>
 801b9b2:	9903      	ldr	r1, [sp, #12]
 801b9b4:	1d1a      	adds	r2, r3, #4
 801b9b6:	600a      	str	r2, [r1, #0]
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	ed83 0b00 	vstr	d0, [r3]
 801b9be:	68e3      	ldr	r3, [r4, #12]
 801b9c0:	3301      	adds	r3, #1
 801b9c2:	60e3      	str	r3, [r4, #12]
 801b9c4:	e66f      	b.n	801b6a6 <_scanf_float+0x82>
 801b9c6:	9b04      	ldr	r3, [sp, #16]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d0e7      	beq.n	801b99c <_scanf_float+0x378>
 801b9cc:	9905      	ldr	r1, [sp, #20]
 801b9ce:	230a      	movs	r3, #10
 801b9d0:	462a      	mov	r2, r5
 801b9d2:	3101      	adds	r1, #1
 801b9d4:	4640      	mov	r0, r8
 801b9d6:	f000 ff05 	bl	801c7e4 <_strtol_r>
 801b9da:	9b04      	ldr	r3, [sp, #16]
 801b9dc:	9e05      	ldr	r6, [sp, #20]
 801b9de:	1ac2      	subs	r2, r0, r3
 801b9e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b9e4:	429e      	cmp	r6, r3
 801b9e6:	bf28      	it	cs
 801b9e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b9ec:	490e      	ldr	r1, [pc, #56]	; (801ba28 <_scanf_float+0x404>)
 801b9ee:	4630      	mov	r0, r6
 801b9f0:	f000 f824 	bl	801ba3c <siprintf>
 801b9f4:	e7d2      	b.n	801b99c <_scanf_float+0x378>
 801b9f6:	9903      	ldr	r1, [sp, #12]
 801b9f8:	f012 0f04 	tst.w	r2, #4
 801b9fc:	f103 0204 	add.w	r2, r3, #4
 801ba00:	600a      	str	r2, [r1, #0]
 801ba02:	d1d9      	bne.n	801b9b8 <_scanf_float+0x394>
 801ba04:	eeb4 0b40 	vcmp.f64	d0, d0
 801ba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0c:	681e      	ldr	r6, [r3, #0]
 801ba0e:	d705      	bvc.n	801ba1c <_scanf_float+0x3f8>
 801ba10:	4806      	ldr	r0, [pc, #24]	; (801ba2c <_scanf_float+0x408>)
 801ba12:	f000 f80d 	bl	801ba30 <nanf>
 801ba16:	ed86 0a00 	vstr	s0, [r6]
 801ba1a:	e7d0      	b.n	801b9be <_scanf_float+0x39a>
 801ba1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ba20:	e7f9      	b.n	801ba16 <_scanf_float+0x3f2>
 801ba22:	2500      	movs	r5, #0
 801ba24:	e63f      	b.n	801b6a6 <_scanf_float+0x82>
 801ba26:	bf00      	nop
 801ba28:	0801fdc8 	.word	0x0801fdc8
 801ba2c:	080201d0 	.word	0x080201d0

0801ba30 <nanf>:
 801ba30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ba38 <nanf+0x8>
 801ba34:	4770      	bx	lr
 801ba36:	bf00      	nop
 801ba38:	7fc00000 	.word	0x7fc00000

0801ba3c <siprintf>:
 801ba3c:	b40e      	push	{r1, r2, r3}
 801ba3e:	b500      	push	{lr}
 801ba40:	b09c      	sub	sp, #112	; 0x70
 801ba42:	ab1d      	add	r3, sp, #116	; 0x74
 801ba44:	9002      	str	r0, [sp, #8]
 801ba46:	9006      	str	r0, [sp, #24]
 801ba48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ba4c:	4809      	ldr	r0, [pc, #36]	; (801ba74 <siprintf+0x38>)
 801ba4e:	9107      	str	r1, [sp, #28]
 801ba50:	9104      	str	r1, [sp, #16]
 801ba52:	4909      	ldr	r1, [pc, #36]	; (801ba78 <siprintf+0x3c>)
 801ba54:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba58:	9105      	str	r1, [sp, #20]
 801ba5a:	6800      	ldr	r0, [r0, #0]
 801ba5c:	9301      	str	r3, [sp, #4]
 801ba5e:	a902      	add	r1, sp, #8
 801ba60:	f002 fe90 	bl	801e784 <_svfiprintf_r>
 801ba64:	9b02      	ldr	r3, [sp, #8]
 801ba66:	2200      	movs	r2, #0
 801ba68:	701a      	strb	r2, [r3, #0]
 801ba6a:	b01c      	add	sp, #112	; 0x70
 801ba6c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba70:	b003      	add	sp, #12
 801ba72:	4770      	bx	lr
 801ba74:	24000100 	.word	0x24000100
 801ba78:	ffff0208 	.word	0xffff0208

0801ba7c <__sread>:
 801ba7c:	b510      	push	{r4, lr}
 801ba7e:	460c      	mov	r4, r1
 801ba80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba84:	f002 ff7e 	bl	801e984 <_read_r>
 801ba88:	2800      	cmp	r0, #0
 801ba8a:	bfab      	itete	ge
 801ba8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ba8e:	89a3      	ldrhlt	r3, [r4, #12]
 801ba90:	181b      	addge	r3, r3, r0
 801ba92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ba96:	bfac      	ite	ge
 801ba98:	6563      	strge	r3, [r4, #84]	; 0x54
 801ba9a:	81a3      	strhlt	r3, [r4, #12]
 801ba9c:	bd10      	pop	{r4, pc}

0801ba9e <__swrite>:
 801ba9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baa2:	461f      	mov	r7, r3
 801baa4:	898b      	ldrh	r3, [r1, #12]
 801baa6:	05db      	lsls	r3, r3, #23
 801baa8:	4605      	mov	r5, r0
 801baaa:	460c      	mov	r4, r1
 801baac:	4616      	mov	r6, r2
 801baae:	d505      	bpl.n	801babc <__swrite+0x1e>
 801bab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bab4:	2302      	movs	r3, #2
 801bab6:	2200      	movs	r2, #0
 801bab8:	f002 f828 	bl	801db0c <_lseek_r>
 801babc:	89a3      	ldrh	r3, [r4, #12]
 801babe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bac6:	81a3      	strh	r3, [r4, #12]
 801bac8:	4632      	mov	r2, r6
 801baca:	463b      	mov	r3, r7
 801bacc:	4628      	mov	r0, r5
 801bace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bad2:	f000 be89 	b.w	801c7e8 <_write_r>

0801bad6 <__sseek>:
 801bad6:	b510      	push	{r4, lr}
 801bad8:	460c      	mov	r4, r1
 801bada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bade:	f002 f815 	bl	801db0c <_lseek_r>
 801bae2:	1c43      	adds	r3, r0, #1
 801bae4:	89a3      	ldrh	r3, [r4, #12]
 801bae6:	bf15      	itete	ne
 801bae8:	6560      	strne	r0, [r4, #84]	; 0x54
 801baea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801baee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801baf2:	81a3      	strheq	r3, [r4, #12]
 801baf4:	bf18      	it	ne
 801baf6:	81a3      	strhne	r3, [r4, #12]
 801baf8:	bd10      	pop	{r4, pc}

0801bafa <__sclose>:
 801bafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bafe:	f000 be85 	b.w	801c80c <_close_r>

0801bb02 <strcat>:
 801bb02:	b510      	push	{r4, lr}
 801bb04:	4602      	mov	r2, r0
 801bb06:	7814      	ldrb	r4, [r2, #0]
 801bb08:	4613      	mov	r3, r2
 801bb0a:	3201      	adds	r2, #1
 801bb0c:	2c00      	cmp	r4, #0
 801bb0e:	d1fa      	bne.n	801bb06 <strcat+0x4>
 801bb10:	3b01      	subs	r3, #1
 801bb12:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb16:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bb1a:	2a00      	cmp	r2, #0
 801bb1c:	d1f9      	bne.n	801bb12 <strcat+0x10>
 801bb1e:	bd10      	pop	{r4, pc}

0801bb20 <strcpy>:
 801bb20:	4603      	mov	r3, r0
 801bb22:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb26:	f803 2b01 	strb.w	r2, [r3], #1
 801bb2a:	2a00      	cmp	r2, #0
 801bb2c:	d1f9      	bne.n	801bb22 <strcpy+0x2>
 801bb2e:	4770      	bx	lr

0801bb30 <sulp>:
 801bb30:	b570      	push	{r4, r5, r6, lr}
 801bb32:	4604      	mov	r4, r0
 801bb34:	460d      	mov	r5, r1
 801bb36:	4616      	mov	r6, r2
 801bb38:	ec45 4b10 	vmov	d0, r4, r5
 801bb3c:	f002 fb84 	bl	801e248 <__ulp>
 801bb40:	b17e      	cbz	r6, 801bb62 <sulp+0x32>
 801bb42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bb46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	dd09      	ble.n	801bb62 <sulp+0x32>
 801bb4e:	051b      	lsls	r3, r3, #20
 801bb50:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801bb54:	2000      	movs	r0, #0
 801bb56:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801bb5a:	ec41 0b17 	vmov	d7, r0, r1
 801bb5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bb62:	bd70      	pop	{r4, r5, r6, pc}
 801bb64:	0000      	movs	r0, r0
	...

0801bb68 <_strtod_l>:
 801bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb6c:	ed2d 8b0e 	vpush	{d8-d14}
 801bb70:	b097      	sub	sp, #92	; 0x5c
 801bb72:	461f      	mov	r7, r3
 801bb74:	2300      	movs	r3, #0
 801bb76:	9312      	str	r3, [sp, #72]	; 0x48
 801bb78:	4ba1      	ldr	r3, [pc, #644]	; (801be00 <_strtod_l+0x298>)
 801bb7a:	920d      	str	r2, [sp, #52]	; 0x34
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	9307      	str	r3, [sp, #28]
 801bb80:	4604      	mov	r4, r0
 801bb82:	4618      	mov	r0, r3
 801bb84:	468b      	mov	fp, r1
 801bb86:	f7e4 fbcd 	bl	8000324 <strlen>
 801bb8a:	f04f 0800 	mov.w	r8, #0
 801bb8e:	4605      	mov	r5, r0
 801bb90:	f04f 0900 	mov.w	r9, #0
 801bb94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bb98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb9a:	7813      	ldrb	r3, [r2, #0]
 801bb9c:	2b2b      	cmp	r3, #43	; 0x2b
 801bb9e:	d04d      	beq.n	801bc3c <_strtod_l+0xd4>
 801bba0:	d83a      	bhi.n	801bc18 <_strtod_l+0xb0>
 801bba2:	2b0d      	cmp	r3, #13
 801bba4:	d833      	bhi.n	801bc0e <_strtod_l+0xa6>
 801bba6:	2b08      	cmp	r3, #8
 801bba8:	d833      	bhi.n	801bc12 <_strtod_l+0xaa>
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d03d      	beq.n	801bc2a <_strtod_l+0xc2>
 801bbae:	2300      	movs	r3, #0
 801bbb0:	9308      	str	r3, [sp, #32]
 801bbb2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bbb4:	7833      	ldrb	r3, [r6, #0]
 801bbb6:	2b30      	cmp	r3, #48	; 0x30
 801bbb8:	f040 80b0 	bne.w	801bd1c <_strtod_l+0x1b4>
 801bbbc:	7873      	ldrb	r3, [r6, #1]
 801bbbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bbc2:	2b58      	cmp	r3, #88	; 0x58
 801bbc4:	d167      	bne.n	801bc96 <_strtod_l+0x12e>
 801bbc6:	9b08      	ldr	r3, [sp, #32]
 801bbc8:	9301      	str	r3, [sp, #4]
 801bbca:	ab12      	add	r3, sp, #72	; 0x48
 801bbcc:	9702      	str	r7, [sp, #8]
 801bbce:	9300      	str	r3, [sp, #0]
 801bbd0:	4a8c      	ldr	r2, [pc, #560]	; (801be04 <_strtod_l+0x29c>)
 801bbd2:	ab13      	add	r3, sp, #76	; 0x4c
 801bbd4:	a911      	add	r1, sp, #68	; 0x44
 801bbd6:	4620      	mov	r0, r4
 801bbd8:	f001 fc8c 	bl	801d4f4 <__gethex>
 801bbdc:	f010 0507 	ands.w	r5, r0, #7
 801bbe0:	4607      	mov	r7, r0
 801bbe2:	d005      	beq.n	801bbf0 <_strtod_l+0x88>
 801bbe4:	2d06      	cmp	r5, #6
 801bbe6:	d12b      	bne.n	801bc40 <_strtod_l+0xd8>
 801bbe8:	3601      	adds	r6, #1
 801bbea:	2300      	movs	r3, #0
 801bbec:	9611      	str	r6, [sp, #68]	; 0x44
 801bbee:	9308      	str	r3, [sp, #32]
 801bbf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	f040 854e 	bne.w	801c694 <_strtod_l+0xb2c>
 801bbf8:	9b08      	ldr	r3, [sp, #32]
 801bbfa:	b1e3      	cbz	r3, 801bc36 <_strtod_l+0xce>
 801bbfc:	ec49 8b17 	vmov	d7, r8, r9
 801bc00:	eeb1 0b47 	vneg.f64	d0, d7
 801bc04:	b017      	add	sp, #92	; 0x5c
 801bc06:	ecbd 8b0e 	vpop	{d8-d14}
 801bc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc0e:	2b20      	cmp	r3, #32
 801bc10:	d1cd      	bne.n	801bbae <_strtod_l+0x46>
 801bc12:	3201      	adds	r2, #1
 801bc14:	9211      	str	r2, [sp, #68]	; 0x44
 801bc16:	e7bf      	b.n	801bb98 <_strtod_l+0x30>
 801bc18:	2b2d      	cmp	r3, #45	; 0x2d
 801bc1a:	d1c8      	bne.n	801bbae <_strtod_l+0x46>
 801bc1c:	2301      	movs	r3, #1
 801bc1e:	9308      	str	r3, [sp, #32]
 801bc20:	1c53      	adds	r3, r2, #1
 801bc22:	9311      	str	r3, [sp, #68]	; 0x44
 801bc24:	7853      	ldrb	r3, [r2, #1]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d1c3      	bne.n	801bbb2 <_strtod_l+0x4a>
 801bc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc2c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	f040 852d 	bne.w	801c690 <_strtod_l+0xb28>
 801bc36:	ec49 8b10 	vmov	d0, r8, r9
 801bc3a:	e7e3      	b.n	801bc04 <_strtod_l+0x9c>
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	e7ee      	b.n	801bc1e <_strtod_l+0xb6>
 801bc40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc42:	b13a      	cbz	r2, 801bc54 <_strtod_l+0xec>
 801bc44:	2135      	movs	r1, #53	; 0x35
 801bc46:	a814      	add	r0, sp, #80	; 0x50
 801bc48:	f002 fc06 	bl	801e458 <__copybits>
 801bc4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bc4e:	4620      	mov	r0, r4
 801bc50:	f001 ffc8 	bl	801dbe4 <_Bfree>
 801bc54:	3d01      	subs	r5, #1
 801bc56:	2d04      	cmp	r5, #4
 801bc58:	d806      	bhi.n	801bc68 <_strtod_l+0x100>
 801bc5a:	e8df f005 	tbb	[pc, r5]
 801bc5e:	030a      	.short	0x030a
 801bc60:	1714      	.short	0x1714
 801bc62:	0a          	.byte	0x0a
 801bc63:	00          	.byte	0x00
 801bc64:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801bc68:	073f      	lsls	r7, r7, #28
 801bc6a:	d5c1      	bpl.n	801bbf0 <_strtod_l+0x88>
 801bc6c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801bc70:	e7be      	b.n	801bbf0 <_strtod_l+0x88>
 801bc72:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801bc76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc78:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bc7c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bc80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801bc84:	e7f0      	b.n	801bc68 <_strtod_l+0x100>
 801bc86:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801be08 <_strtod_l+0x2a0>
 801bc8a:	e7ed      	b.n	801bc68 <_strtod_l+0x100>
 801bc8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801bc90:	f04f 38ff 	mov.w	r8, #4294967295
 801bc94:	e7e8      	b.n	801bc68 <_strtod_l+0x100>
 801bc96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc98:	1c5a      	adds	r2, r3, #1
 801bc9a:	9211      	str	r2, [sp, #68]	; 0x44
 801bc9c:	785b      	ldrb	r3, [r3, #1]
 801bc9e:	2b30      	cmp	r3, #48	; 0x30
 801bca0:	d0f9      	beq.n	801bc96 <_strtod_l+0x12e>
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d0a4      	beq.n	801bbf0 <_strtod_l+0x88>
 801bca6:	2301      	movs	r3, #1
 801bca8:	f04f 0a00 	mov.w	sl, #0
 801bcac:	9304      	str	r3, [sp, #16]
 801bcae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcb0:	930a      	str	r3, [sp, #40]	; 0x28
 801bcb2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801bcb6:	f8cd a018 	str.w	sl, [sp, #24]
 801bcba:	220a      	movs	r2, #10
 801bcbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bcbe:	7807      	ldrb	r7, [r0, #0]
 801bcc0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801bcc4:	b2d9      	uxtb	r1, r3
 801bcc6:	2909      	cmp	r1, #9
 801bcc8:	d92a      	bls.n	801bd20 <_strtod_l+0x1b8>
 801bcca:	9907      	ldr	r1, [sp, #28]
 801bccc:	462a      	mov	r2, r5
 801bcce:	f002 fe83 	bl	801e9d8 <strncmp>
 801bcd2:	2800      	cmp	r0, #0
 801bcd4:	d033      	beq.n	801bd3e <_strtod_l+0x1d6>
 801bcd6:	2000      	movs	r0, #0
 801bcd8:	9b06      	ldr	r3, [sp, #24]
 801bcda:	463a      	mov	r2, r7
 801bcdc:	4601      	mov	r1, r0
 801bcde:	4607      	mov	r7, r0
 801bce0:	2a65      	cmp	r2, #101	; 0x65
 801bce2:	d001      	beq.n	801bce8 <_strtod_l+0x180>
 801bce4:	2a45      	cmp	r2, #69	; 0x45
 801bce6:	d117      	bne.n	801bd18 <_strtod_l+0x1b0>
 801bce8:	b91b      	cbnz	r3, 801bcf2 <_strtod_l+0x18a>
 801bcea:	9b04      	ldr	r3, [sp, #16]
 801bcec:	4303      	orrs	r3, r0
 801bcee:	d09c      	beq.n	801bc2a <_strtod_l+0xc2>
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801bcf6:	f10b 0201 	add.w	r2, fp, #1
 801bcfa:	9211      	str	r2, [sp, #68]	; 0x44
 801bcfc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801bd00:	2a2b      	cmp	r2, #43	; 0x2b
 801bd02:	d071      	beq.n	801bde8 <_strtod_l+0x280>
 801bd04:	2a2d      	cmp	r2, #45	; 0x2d
 801bd06:	d077      	beq.n	801bdf8 <_strtod_l+0x290>
 801bd08:	f04f 0e00 	mov.w	lr, #0
 801bd0c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801bd10:	2d09      	cmp	r5, #9
 801bd12:	d97f      	bls.n	801be14 <_strtod_l+0x2ac>
 801bd14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bd18:	2500      	movs	r5, #0
 801bd1a:	e09b      	b.n	801be54 <_strtod_l+0x2ec>
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	e7c3      	b.n	801bca8 <_strtod_l+0x140>
 801bd20:	9906      	ldr	r1, [sp, #24]
 801bd22:	2908      	cmp	r1, #8
 801bd24:	bfdd      	ittte	le
 801bd26:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bd28:	fb02 3301 	mlale	r3, r2, r1, r3
 801bd2c:	9309      	strle	r3, [sp, #36]	; 0x24
 801bd2e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801bd32:	9b06      	ldr	r3, [sp, #24]
 801bd34:	3001      	adds	r0, #1
 801bd36:	3301      	adds	r3, #1
 801bd38:	9306      	str	r3, [sp, #24]
 801bd3a:	9011      	str	r0, [sp, #68]	; 0x44
 801bd3c:	e7be      	b.n	801bcbc <_strtod_l+0x154>
 801bd3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd40:	195a      	adds	r2, r3, r5
 801bd42:	9211      	str	r2, [sp, #68]	; 0x44
 801bd44:	5d5a      	ldrb	r2, [r3, r5]
 801bd46:	9b06      	ldr	r3, [sp, #24]
 801bd48:	b3a3      	cbz	r3, 801bdb4 <_strtod_l+0x24c>
 801bd4a:	4607      	mov	r7, r0
 801bd4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bd50:	2909      	cmp	r1, #9
 801bd52:	d912      	bls.n	801bd7a <_strtod_l+0x212>
 801bd54:	2101      	movs	r1, #1
 801bd56:	e7c3      	b.n	801bce0 <_strtod_l+0x178>
 801bd58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd5a:	1c5a      	adds	r2, r3, #1
 801bd5c:	9211      	str	r2, [sp, #68]	; 0x44
 801bd5e:	785a      	ldrb	r2, [r3, #1]
 801bd60:	3001      	adds	r0, #1
 801bd62:	2a30      	cmp	r2, #48	; 0x30
 801bd64:	d0f8      	beq.n	801bd58 <_strtod_l+0x1f0>
 801bd66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bd6a:	2b08      	cmp	r3, #8
 801bd6c:	f200 8497 	bhi.w	801c69e <_strtod_l+0xb36>
 801bd70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd72:	930a      	str	r3, [sp, #40]	; 0x28
 801bd74:	4607      	mov	r7, r0
 801bd76:	2000      	movs	r0, #0
 801bd78:	4603      	mov	r3, r0
 801bd7a:	3a30      	subs	r2, #48	; 0x30
 801bd7c:	f100 0101 	add.w	r1, r0, #1
 801bd80:	d012      	beq.n	801bda8 <_strtod_l+0x240>
 801bd82:	440f      	add	r7, r1
 801bd84:	eb00 0c03 	add.w	ip, r0, r3
 801bd88:	4619      	mov	r1, r3
 801bd8a:	250a      	movs	r5, #10
 801bd8c:	4561      	cmp	r1, ip
 801bd8e:	d113      	bne.n	801bdb8 <_strtod_l+0x250>
 801bd90:	1819      	adds	r1, r3, r0
 801bd92:	2908      	cmp	r1, #8
 801bd94:	f103 0301 	add.w	r3, r3, #1
 801bd98:	4403      	add	r3, r0
 801bd9a:	dc1c      	bgt.n	801bdd6 <_strtod_l+0x26e>
 801bd9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd9e:	210a      	movs	r1, #10
 801bda0:	fb01 2200 	mla	r2, r1, r0, r2
 801bda4:	9209      	str	r2, [sp, #36]	; 0x24
 801bda6:	2100      	movs	r1, #0
 801bda8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bdaa:	1c50      	adds	r0, r2, #1
 801bdac:	9011      	str	r0, [sp, #68]	; 0x44
 801bdae:	7852      	ldrb	r2, [r2, #1]
 801bdb0:	4608      	mov	r0, r1
 801bdb2:	e7cb      	b.n	801bd4c <_strtod_l+0x1e4>
 801bdb4:	9806      	ldr	r0, [sp, #24]
 801bdb6:	e7d4      	b.n	801bd62 <_strtod_l+0x1fa>
 801bdb8:	2908      	cmp	r1, #8
 801bdba:	dc04      	bgt.n	801bdc6 <_strtod_l+0x25e>
 801bdbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bdbe:	436e      	muls	r6, r5
 801bdc0:	9609      	str	r6, [sp, #36]	; 0x24
 801bdc2:	3101      	adds	r1, #1
 801bdc4:	e7e2      	b.n	801bd8c <_strtod_l+0x224>
 801bdc6:	f101 0e01 	add.w	lr, r1, #1
 801bdca:	f1be 0f10 	cmp.w	lr, #16
 801bdce:	bfd8      	it	le
 801bdd0:	fb05 fa0a 	mulle.w	sl, r5, sl
 801bdd4:	e7f5      	b.n	801bdc2 <_strtod_l+0x25a>
 801bdd6:	2b10      	cmp	r3, #16
 801bdd8:	bfdc      	itt	le
 801bdda:	210a      	movle	r1, #10
 801bddc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 801bde0:	e7e1      	b.n	801bda6 <_strtod_l+0x23e>
 801bde2:	2700      	movs	r7, #0
 801bde4:	2101      	movs	r1, #1
 801bde6:	e780      	b.n	801bcea <_strtod_l+0x182>
 801bde8:	f04f 0e00 	mov.w	lr, #0
 801bdec:	f10b 0202 	add.w	r2, fp, #2
 801bdf0:	9211      	str	r2, [sp, #68]	; 0x44
 801bdf2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801bdf6:	e789      	b.n	801bd0c <_strtod_l+0x1a4>
 801bdf8:	f04f 0e01 	mov.w	lr, #1
 801bdfc:	e7f6      	b.n	801bdec <_strtod_l+0x284>
 801bdfe:	bf00      	nop
 801be00:	08020018 	.word	0x08020018
 801be04:	0801fdd0 	.word	0x0801fdd0
 801be08:	7ff00000 	.word	0x7ff00000
 801be0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be0e:	1c55      	adds	r5, r2, #1
 801be10:	9511      	str	r5, [sp, #68]	; 0x44
 801be12:	7852      	ldrb	r2, [r2, #1]
 801be14:	2a30      	cmp	r2, #48	; 0x30
 801be16:	d0f9      	beq.n	801be0c <_strtod_l+0x2a4>
 801be18:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801be1c:	2d08      	cmp	r5, #8
 801be1e:	f63f af7b 	bhi.w	801bd18 <_strtod_l+0x1b0>
 801be22:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801be26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be28:	9207      	str	r2, [sp, #28]
 801be2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be2c:	1c55      	adds	r5, r2, #1
 801be2e:	9511      	str	r5, [sp, #68]	; 0x44
 801be30:	7852      	ldrb	r2, [r2, #1]
 801be32:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801be36:	2e09      	cmp	r6, #9
 801be38:	d937      	bls.n	801beaa <_strtod_l+0x342>
 801be3a:	9e07      	ldr	r6, [sp, #28]
 801be3c:	1bad      	subs	r5, r5, r6
 801be3e:	2d08      	cmp	r5, #8
 801be40:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801be44:	dc02      	bgt.n	801be4c <_strtod_l+0x2e4>
 801be46:	4565      	cmp	r5, ip
 801be48:	bfa8      	it	ge
 801be4a:	4665      	movge	r5, ip
 801be4c:	f1be 0f00 	cmp.w	lr, #0
 801be50:	d000      	beq.n	801be54 <_strtod_l+0x2ec>
 801be52:	426d      	negs	r5, r5
 801be54:	2b00      	cmp	r3, #0
 801be56:	d14d      	bne.n	801bef4 <_strtod_l+0x38c>
 801be58:	9b04      	ldr	r3, [sp, #16]
 801be5a:	4303      	orrs	r3, r0
 801be5c:	f47f aec8 	bne.w	801bbf0 <_strtod_l+0x88>
 801be60:	2900      	cmp	r1, #0
 801be62:	f47f aee2 	bne.w	801bc2a <_strtod_l+0xc2>
 801be66:	2a69      	cmp	r2, #105	; 0x69
 801be68:	d027      	beq.n	801beba <_strtod_l+0x352>
 801be6a:	dc24      	bgt.n	801beb6 <_strtod_l+0x34e>
 801be6c:	2a49      	cmp	r2, #73	; 0x49
 801be6e:	d024      	beq.n	801beba <_strtod_l+0x352>
 801be70:	2a4e      	cmp	r2, #78	; 0x4e
 801be72:	f47f aeda 	bne.w	801bc2a <_strtod_l+0xc2>
 801be76:	4996      	ldr	r1, [pc, #600]	; (801c0d0 <_strtod_l+0x568>)
 801be78:	a811      	add	r0, sp, #68	; 0x44
 801be7a:	f001 fd93 	bl	801d9a4 <__match>
 801be7e:	2800      	cmp	r0, #0
 801be80:	f43f aed3 	beq.w	801bc2a <_strtod_l+0xc2>
 801be84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be86:	781b      	ldrb	r3, [r3, #0]
 801be88:	2b28      	cmp	r3, #40	; 0x28
 801be8a:	d12d      	bne.n	801bee8 <_strtod_l+0x380>
 801be8c:	4991      	ldr	r1, [pc, #580]	; (801c0d4 <_strtod_l+0x56c>)
 801be8e:	aa14      	add	r2, sp, #80	; 0x50
 801be90:	a811      	add	r0, sp, #68	; 0x44
 801be92:	f001 fd9b 	bl	801d9cc <__hexnan>
 801be96:	2805      	cmp	r0, #5
 801be98:	d126      	bne.n	801bee8 <_strtod_l+0x380>
 801be9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801be9c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801bea0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801bea4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801bea8:	e6a2      	b.n	801bbf0 <_strtod_l+0x88>
 801beaa:	250a      	movs	r5, #10
 801beac:	fb05 250c 	mla	r5, r5, ip, r2
 801beb0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801beb4:	e7b9      	b.n	801be2a <_strtod_l+0x2c2>
 801beb6:	2a6e      	cmp	r2, #110	; 0x6e
 801beb8:	e7db      	b.n	801be72 <_strtod_l+0x30a>
 801beba:	4987      	ldr	r1, [pc, #540]	; (801c0d8 <_strtod_l+0x570>)
 801bebc:	a811      	add	r0, sp, #68	; 0x44
 801bebe:	f001 fd71 	bl	801d9a4 <__match>
 801bec2:	2800      	cmp	r0, #0
 801bec4:	f43f aeb1 	beq.w	801bc2a <_strtod_l+0xc2>
 801bec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801beca:	4984      	ldr	r1, [pc, #528]	; (801c0dc <_strtod_l+0x574>)
 801becc:	3b01      	subs	r3, #1
 801bece:	a811      	add	r0, sp, #68	; 0x44
 801bed0:	9311      	str	r3, [sp, #68]	; 0x44
 801bed2:	f001 fd67 	bl	801d9a4 <__match>
 801bed6:	b910      	cbnz	r0, 801bede <_strtod_l+0x376>
 801bed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801beda:	3301      	adds	r3, #1
 801bedc:	9311      	str	r3, [sp, #68]	; 0x44
 801bede:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801c0f0 <_strtod_l+0x588>
 801bee2:	f04f 0800 	mov.w	r8, #0
 801bee6:	e683      	b.n	801bbf0 <_strtod_l+0x88>
 801bee8:	487d      	ldr	r0, [pc, #500]	; (801c0e0 <_strtod_l+0x578>)
 801beea:	f002 fd5d 	bl	801e9a8 <nan>
 801beee:	ec59 8b10 	vmov	r8, r9, d0
 801bef2:	e67d      	b.n	801bbf0 <_strtod_l+0x88>
 801bef4:	1bea      	subs	r2, r5, r7
 801bef6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801befa:	9207      	str	r2, [sp, #28]
 801befc:	9a06      	ldr	r2, [sp, #24]
 801befe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801bf02:	2a00      	cmp	r2, #0
 801bf04:	bf08      	it	eq
 801bf06:	461a      	moveq	r2, r3
 801bf08:	2b10      	cmp	r3, #16
 801bf0a:	9206      	str	r2, [sp, #24]
 801bf0c:	461a      	mov	r2, r3
 801bf0e:	bfa8      	it	ge
 801bf10:	2210      	movge	r2, #16
 801bf12:	2b09      	cmp	r3, #9
 801bf14:	ec59 8b17 	vmov	r8, r9, d7
 801bf18:	dd0c      	ble.n	801bf34 <_strtod_l+0x3cc>
 801bf1a:	4972      	ldr	r1, [pc, #456]	; (801c0e4 <_strtod_l+0x57c>)
 801bf1c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801bf20:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801bf24:	ee06 aa90 	vmov	s13, sl
 801bf28:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801bf2c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801bf30:	ec59 8b16 	vmov	r8, r9, d6
 801bf34:	2b0f      	cmp	r3, #15
 801bf36:	dc36      	bgt.n	801bfa6 <_strtod_l+0x43e>
 801bf38:	9907      	ldr	r1, [sp, #28]
 801bf3a:	2900      	cmp	r1, #0
 801bf3c:	f43f ae58 	beq.w	801bbf0 <_strtod_l+0x88>
 801bf40:	dd23      	ble.n	801bf8a <_strtod_l+0x422>
 801bf42:	2916      	cmp	r1, #22
 801bf44:	dc0b      	bgt.n	801bf5e <_strtod_l+0x3f6>
 801bf46:	4b67      	ldr	r3, [pc, #412]	; (801c0e4 <_strtod_l+0x57c>)
 801bf48:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801bf4c:	ed93 7b00 	vldr	d7, [r3]
 801bf50:	ec49 8b16 	vmov	d6, r8, r9
 801bf54:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf58:	ec59 8b17 	vmov	r8, r9, d7
 801bf5c:	e648      	b.n	801bbf0 <_strtod_l+0x88>
 801bf5e:	9807      	ldr	r0, [sp, #28]
 801bf60:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801bf64:	4281      	cmp	r1, r0
 801bf66:	db1e      	blt.n	801bfa6 <_strtod_l+0x43e>
 801bf68:	4a5e      	ldr	r2, [pc, #376]	; (801c0e4 <_strtod_l+0x57c>)
 801bf6a:	f1c3 030f 	rsb	r3, r3, #15
 801bf6e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801bf72:	ed91 7b00 	vldr	d7, [r1]
 801bf76:	ec49 8b16 	vmov	d6, r8, r9
 801bf7a:	1ac3      	subs	r3, r0, r3
 801bf7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801bf80:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf84:	ed92 6b00 	vldr	d6, [r2]
 801bf88:	e7e4      	b.n	801bf54 <_strtod_l+0x3ec>
 801bf8a:	9907      	ldr	r1, [sp, #28]
 801bf8c:	3116      	adds	r1, #22
 801bf8e:	db0a      	blt.n	801bfa6 <_strtod_l+0x43e>
 801bf90:	4b54      	ldr	r3, [pc, #336]	; (801c0e4 <_strtod_l+0x57c>)
 801bf92:	1b7d      	subs	r5, r7, r5
 801bf94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801bf98:	ed95 7b00 	vldr	d7, [r5]
 801bf9c:	ec49 8b16 	vmov	d6, r8, r9
 801bfa0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bfa4:	e7d8      	b.n	801bf58 <_strtod_l+0x3f0>
 801bfa6:	9907      	ldr	r1, [sp, #28]
 801bfa8:	1a9a      	subs	r2, r3, r2
 801bfaa:	440a      	add	r2, r1
 801bfac:	2a00      	cmp	r2, #0
 801bfae:	dd6f      	ble.n	801c090 <_strtod_l+0x528>
 801bfb0:	f012 000f 	ands.w	r0, r2, #15
 801bfb4:	d00a      	beq.n	801bfcc <_strtod_l+0x464>
 801bfb6:	494b      	ldr	r1, [pc, #300]	; (801c0e4 <_strtod_l+0x57c>)
 801bfb8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bfbc:	ed91 7b00 	vldr	d7, [r1]
 801bfc0:	ec49 8b16 	vmov	d6, r8, r9
 801bfc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bfc8:	ec59 8b17 	vmov	r8, r9, d7
 801bfcc:	f032 020f 	bics.w	r2, r2, #15
 801bfd0:	d04f      	beq.n	801c072 <_strtod_l+0x50a>
 801bfd2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801bfd6:	dd22      	ble.n	801c01e <_strtod_l+0x4b6>
 801bfd8:	2500      	movs	r5, #0
 801bfda:	462e      	mov	r6, r5
 801bfdc:	9506      	str	r5, [sp, #24]
 801bfde:	462f      	mov	r7, r5
 801bfe0:	2322      	movs	r3, #34	; 0x22
 801bfe2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801c0f0 <_strtod_l+0x588>
 801bfe6:	6023      	str	r3, [r4, #0]
 801bfe8:	f04f 0800 	mov.w	r8, #0
 801bfec:	9b06      	ldr	r3, [sp, #24]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	f43f adfe 	beq.w	801bbf0 <_strtod_l+0x88>
 801bff4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bff6:	4620      	mov	r0, r4
 801bff8:	f001 fdf4 	bl	801dbe4 <_Bfree>
 801bffc:	4639      	mov	r1, r7
 801bffe:	4620      	mov	r0, r4
 801c000:	f001 fdf0 	bl	801dbe4 <_Bfree>
 801c004:	4631      	mov	r1, r6
 801c006:	4620      	mov	r0, r4
 801c008:	f001 fdec 	bl	801dbe4 <_Bfree>
 801c00c:	9906      	ldr	r1, [sp, #24]
 801c00e:	4620      	mov	r0, r4
 801c010:	f001 fde8 	bl	801dbe4 <_Bfree>
 801c014:	4629      	mov	r1, r5
 801c016:	4620      	mov	r0, r4
 801c018:	f001 fde4 	bl	801dbe4 <_Bfree>
 801c01c:	e5e8      	b.n	801bbf0 <_strtod_l+0x88>
 801c01e:	2000      	movs	r0, #0
 801c020:	ec49 8b17 	vmov	d7, r8, r9
 801c024:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801c0e8 <_strtod_l+0x580>
 801c028:	1112      	asrs	r2, r2, #4
 801c02a:	4601      	mov	r1, r0
 801c02c:	2a01      	cmp	r2, #1
 801c02e:	dc23      	bgt.n	801c078 <_strtod_l+0x510>
 801c030:	b108      	cbz	r0, 801c036 <_strtod_l+0x4ce>
 801c032:	ec59 8b17 	vmov	r8, r9, d7
 801c036:	4a2c      	ldr	r2, [pc, #176]	; (801c0e8 <_strtod_l+0x580>)
 801c038:	482c      	ldr	r0, [pc, #176]	; (801c0ec <_strtod_l+0x584>)
 801c03a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c03e:	ed92 7b00 	vldr	d7, [r2]
 801c042:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c046:	ec49 8b16 	vmov	d6, r8, r9
 801c04a:	4a29      	ldr	r2, [pc, #164]	; (801c0f0 <_strtod_l+0x588>)
 801c04c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c050:	ee17 1a90 	vmov	r1, s15
 801c054:	400a      	ands	r2, r1
 801c056:	4282      	cmp	r2, r0
 801c058:	ec59 8b17 	vmov	r8, r9, d7
 801c05c:	d8bc      	bhi.n	801bfd8 <_strtod_l+0x470>
 801c05e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c062:	4282      	cmp	r2, r0
 801c064:	bf86      	itte	hi
 801c066:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801c0f4 <_strtod_l+0x58c>
 801c06a:	f04f 38ff 	movhi.w	r8, #4294967295
 801c06e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c072:	2200      	movs	r2, #0
 801c074:	9204      	str	r2, [sp, #16]
 801c076:	e078      	b.n	801c16a <_strtod_l+0x602>
 801c078:	07d6      	lsls	r6, r2, #31
 801c07a:	d504      	bpl.n	801c086 <_strtod_l+0x51e>
 801c07c:	ed9c 6b00 	vldr	d6, [ip]
 801c080:	2001      	movs	r0, #1
 801c082:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c086:	3101      	adds	r1, #1
 801c088:	1052      	asrs	r2, r2, #1
 801c08a:	f10c 0c08 	add.w	ip, ip, #8
 801c08e:	e7cd      	b.n	801c02c <_strtod_l+0x4c4>
 801c090:	d0ef      	beq.n	801c072 <_strtod_l+0x50a>
 801c092:	4252      	negs	r2, r2
 801c094:	f012 000f 	ands.w	r0, r2, #15
 801c098:	d00a      	beq.n	801c0b0 <_strtod_l+0x548>
 801c09a:	4912      	ldr	r1, [pc, #72]	; (801c0e4 <_strtod_l+0x57c>)
 801c09c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c0a0:	ed91 7b00 	vldr	d7, [r1]
 801c0a4:	ec49 8b16 	vmov	d6, r8, r9
 801c0a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c0ac:	ec59 8b17 	vmov	r8, r9, d7
 801c0b0:	1112      	asrs	r2, r2, #4
 801c0b2:	d0de      	beq.n	801c072 <_strtod_l+0x50a>
 801c0b4:	2a1f      	cmp	r2, #31
 801c0b6:	dd1f      	ble.n	801c0f8 <_strtod_l+0x590>
 801c0b8:	2500      	movs	r5, #0
 801c0ba:	462e      	mov	r6, r5
 801c0bc:	9506      	str	r5, [sp, #24]
 801c0be:	462f      	mov	r7, r5
 801c0c0:	2322      	movs	r3, #34	; 0x22
 801c0c2:	f04f 0800 	mov.w	r8, #0
 801c0c6:	f04f 0900 	mov.w	r9, #0
 801c0ca:	6023      	str	r3, [r4, #0]
 801c0cc:	e78e      	b.n	801bfec <_strtod_l+0x484>
 801c0ce:	bf00      	nop
 801c0d0:	0801fda1 	.word	0x0801fda1
 801c0d4:	0801fde4 	.word	0x0801fde4
 801c0d8:	0801fd99 	.word	0x0801fd99
 801c0dc:	0801ff24 	.word	0x0801ff24
 801c0e0:	080201d0 	.word	0x080201d0
 801c0e4:	080200b0 	.word	0x080200b0
 801c0e8:	08020088 	.word	0x08020088
 801c0ec:	7ca00000 	.word	0x7ca00000
 801c0f0:	7ff00000 	.word	0x7ff00000
 801c0f4:	7fefffff 	.word	0x7fefffff
 801c0f8:	f012 0110 	ands.w	r1, r2, #16
 801c0fc:	bf18      	it	ne
 801c0fe:	216a      	movne	r1, #106	; 0x6a
 801c100:	9104      	str	r1, [sp, #16]
 801c102:	ec49 8b17 	vmov	d7, r8, r9
 801c106:	49be      	ldr	r1, [pc, #760]	; (801c400 <_strtod_l+0x898>)
 801c108:	2000      	movs	r0, #0
 801c10a:	07d6      	lsls	r6, r2, #31
 801c10c:	d504      	bpl.n	801c118 <_strtod_l+0x5b0>
 801c10e:	ed91 6b00 	vldr	d6, [r1]
 801c112:	2001      	movs	r0, #1
 801c114:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c118:	1052      	asrs	r2, r2, #1
 801c11a:	f101 0108 	add.w	r1, r1, #8
 801c11e:	d1f4      	bne.n	801c10a <_strtod_l+0x5a2>
 801c120:	b108      	cbz	r0, 801c126 <_strtod_l+0x5be>
 801c122:	ec59 8b17 	vmov	r8, r9, d7
 801c126:	9a04      	ldr	r2, [sp, #16]
 801c128:	b1c2      	cbz	r2, 801c15c <_strtod_l+0x5f4>
 801c12a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801c12e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801c132:	2a00      	cmp	r2, #0
 801c134:	4648      	mov	r0, r9
 801c136:	dd11      	ble.n	801c15c <_strtod_l+0x5f4>
 801c138:	2a1f      	cmp	r2, #31
 801c13a:	f340 812e 	ble.w	801c39a <_strtod_l+0x832>
 801c13e:	2a34      	cmp	r2, #52	; 0x34
 801c140:	bfde      	ittt	le
 801c142:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801c146:	f04f 32ff 	movle.w	r2, #4294967295
 801c14a:	fa02 f101 	lslle.w	r1, r2, r1
 801c14e:	f04f 0800 	mov.w	r8, #0
 801c152:	bfcc      	ite	gt
 801c154:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c158:	ea01 0900 	andle.w	r9, r1, r0
 801c15c:	ec49 8b17 	vmov	d7, r8, r9
 801c160:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c168:	d0a6      	beq.n	801c0b8 <_strtod_l+0x550>
 801c16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c16c:	9200      	str	r2, [sp, #0]
 801c16e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c170:	9a06      	ldr	r2, [sp, #24]
 801c172:	4620      	mov	r0, r4
 801c174:	f001 fd9e 	bl	801dcb4 <__s2b>
 801c178:	9006      	str	r0, [sp, #24]
 801c17a:	2800      	cmp	r0, #0
 801c17c:	f43f af2c 	beq.w	801bfd8 <_strtod_l+0x470>
 801c180:	9b07      	ldr	r3, [sp, #28]
 801c182:	1b7d      	subs	r5, r7, r5
 801c184:	2b00      	cmp	r3, #0
 801c186:	bfb4      	ite	lt
 801c188:	462b      	movlt	r3, r5
 801c18a:	2300      	movge	r3, #0
 801c18c:	9309      	str	r3, [sp, #36]	; 0x24
 801c18e:	9b07      	ldr	r3, [sp, #28]
 801c190:	ed9f 9b93 	vldr	d9, [pc, #588]	; 801c3e0 <_strtod_l+0x878>
 801c194:	ed9f ab94 	vldr	d10, [pc, #592]	; 801c3e8 <_strtod_l+0x880>
 801c198:	ed9f bb95 	vldr	d11, [pc, #596]	; 801c3f0 <_strtod_l+0x888>
 801c19c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1a0:	2500      	movs	r5, #0
 801c1a2:	930c      	str	r3, [sp, #48]	; 0x30
 801c1a4:	462e      	mov	r6, r5
 801c1a6:	9b06      	ldr	r3, [sp, #24]
 801c1a8:	4620      	mov	r0, r4
 801c1aa:	6859      	ldr	r1, [r3, #4]
 801c1ac:	f001 fcda 	bl	801db64 <_Balloc>
 801c1b0:	4607      	mov	r7, r0
 801c1b2:	2800      	cmp	r0, #0
 801c1b4:	f43f af14 	beq.w	801bfe0 <_strtod_l+0x478>
 801c1b8:	9b06      	ldr	r3, [sp, #24]
 801c1ba:	691a      	ldr	r2, [r3, #16]
 801c1bc:	3202      	adds	r2, #2
 801c1be:	f103 010c 	add.w	r1, r3, #12
 801c1c2:	0092      	lsls	r2, r2, #2
 801c1c4:	300c      	adds	r0, #12
 801c1c6:	f7fe fdd5 	bl	801ad74 <memcpy>
 801c1ca:	ec49 8b10 	vmov	d0, r8, r9
 801c1ce:	aa14      	add	r2, sp, #80	; 0x50
 801c1d0:	a913      	add	r1, sp, #76	; 0x4c
 801c1d2:	4620      	mov	r0, r4
 801c1d4:	f002 f8b4 	bl	801e340 <__d2b>
 801c1d8:	ec49 8b18 	vmov	d8, r8, r9
 801c1dc:	9012      	str	r0, [sp, #72]	; 0x48
 801c1de:	2800      	cmp	r0, #0
 801c1e0:	f43f aefe 	beq.w	801bfe0 <_strtod_l+0x478>
 801c1e4:	2101      	movs	r1, #1
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	f001 fdfe 	bl	801dde8 <__i2b>
 801c1ec:	4606      	mov	r6, r0
 801c1ee:	2800      	cmp	r0, #0
 801c1f0:	f43f aef6 	beq.w	801bfe0 <_strtod_l+0x478>
 801c1f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c1f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	bfab      	itete	ge
 801c1fc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801c1fe:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801c200:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801c204:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801c208:	bfac      	ite	ge
 801c20a:	eb03 0b02 	addge.w	fp, r3, r2
 801c20e:	eba2 0a03 	sublt.w	sl, r2, r3
 801c212:	9a04      	ldr	r2, [sp, #16]
 801c214:	1a9b      	subs	r3, r3, r2
 801c216:	440b      	add	r3, r1
 801c218:	4a7a      	ldr	r2, [pc, #488]	; (801c404 <_strtod_l+0x89c>)
 801c21a:	3b01      	subs	r3, #1
 801c21c:	4293      	cmp	r3, r2
 801c21e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c222:	f280 80cd 	bge.w	801c3c0 <_strtod_l+0x858>
 801c226:	1ad2      	subs	r2, r2, r3
 801c228:	2a1f      	cmp	r2, #31
 801c22a:	eba1 0102 	sub.w	r1, r1, r2
 801c22e:	f04f 0001 	mov.w	r0, #1
 801c232:	f300 80b9 	bgt.w	801c3a8 <_strtod_l+0x840>
 801c236:	fa00 f302 	lsl.w	r3, r0, r2
 801c23a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c23c:	2300      	movs	r3, #0
 801c23e:	930a      	str	r3, [sp, #40]	; 0x28
 801c240:	eb0b 0301 	add.w	r3, fp, r1
 801c244:	9a04      	ldr	r2, [sp, #16]
 801c246:	459b      	cmp	fp, r3
 801c248:	448a      	add	sl, r1
 801c24a:	4492      	add	sl, r2
 801c24c:	465a      	mov	r2, fp
 801c24e:	bfa8      	it	ge
 801c250:	461a      	movge	r2, r3
 801c252:	4552      	cmp	r2, sl
 801c254:	bfa8      	it	ge
 801c256:	4652      	movge	r2, sl
 801c258:	2a00      	cmp	r2, #0
 801c25a:	bfc2      	ittt	gt
 801c25c:	1a9b      	subgt	r3, r3, r2
 801c25e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c262:	ebab 0b02 	subgt.w	fp, fp, r2
 801c266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c268:	2a00      	cmp	r2, #0
 801c26a:	dd18      	ble.n	801c29e <_strtod_l+0x736>
 801c26c:	4631      	mov	r1, r6
 801c26e:	4620      	mov	r0, r4
 801c270:	930f      	str	r3, [sp, #60]	; 0x3c
 801c272:	f001 fe79 	bl	801df68 <__pow5mult>
 801c276:	4606      	mov	r6, r0
 801c278:	2800      	cmp	r0, #0
 801c27a:	f43f aeb1 	beq.w	801bfe0 <_strtod_l+0x478>
 801c27e:	4601      	mov	r1, r0
 801c280:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c282:	4620      	mov	r0, r4
 801c284:	f001 fdc6 	bl	801de14 <__multiply>
 801c288:	900e      	str	r0, [sp, #56]	; 0x38
 801c28a:	2800      	cmp	r0, #0
 801c28c:	f43f aea8 	beq.w	801bfe0 <_strtod_l+0x478>
 801c290:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c292:	4620      	mov	r0, r4
 801c294:	f001 fca6 	bl	801dbe4 <_Bfree>
 801c298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c29a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c29c:	9212      	str	r2, [sp, #72]	; 0x48
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	f300 8093 	bgt.w	801c3ca <_strtod_l+0x862>
 801c2a4:	9b07      	ldr	r3, [sp, #28]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	dd08      	ble.n	801c2bc <_strtod_l+0x754>
 801c2aa:	4639      	mov	r1, r7
 801c2ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2ae:	4620      	mov	r0, r4
 801c2b0:	f001 fe5a 	bl	801df68 <__pow5mult>
 801c2b4:	4607      	mov	r7, r0
 801c2b6:	2800      	cmp	r0, #0
 801c2b8:	f43f ae92 	beq.w	801bfe0 <_strtod_l+0x478>
 801c2bc:	f1ba 0f00 	cmp.w	sl, #0
 801c2c0:	dd08      	ble.n	801c2d4 <_strtod_l+0x76c>
 801c2c2:	4639      	mov	r1, r7
 801c2c4:	4652      	mov	r2, sl
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	f001 fea8 	bl	801e01c <__lshift>
 801c2cc:	4607      	mov	r7, r0
 801c2ce:	2800      	cmp	r0, #0
 801c2d0:	f43f ae86 	beq.w	801bfe0 <_strtod_l+0x478>
 801c2d4:	f1bb 0f00 	cmp.w	fp, #0
 801c2d8:	dd08      	ble.n	801c2ec <_strtod_l+0x784>
 801c2da:	4631      	mov	r1, r6
 801c2dc:	465a      	mov	r2, fp
 801c2de:	4620      	mov	r0, r4
 801c2e0:	f001 fe9c 	bl	801e01c <__lshift>
 801c2e4:	4606      	mov	r6, r0
 801c2e6:	2800      	cmp	r0, #0
 801c2e8:	f43f ae7a 	beq.w	801bfe0 <_strtod_l+0x478>
 801c2ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c2ee:	463a      	mov	r2, r7
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	f001 ff1f 	bl	801e134 <__mdiff>
 801c2f6:	4605      	mov	r5, r0
 801c2f8:	2800      	cmp	r0, #0
 801c2fa:	f43f ae71 	beq.w	801bfe0 <_strtod_l+0x478>
 801c2fe:	2300      	movs	r3, #0
 801c300:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c304:	60c3      	str	r3, [r0, #12]
 801c306:	4631      	mov	r1, r6
 801c308:	f001 fef8 	bl	801e0fc <__mcmp>
 801c30c:	2800      	cmp	r0, #0
 801c30e:	da7d      	bge.n	801c40c <_strtod_l+0x8a4>
 801c310:	ea5a 0308 	orrs.w	r3, sl, r8
 801c314:	f040 80a3 	bne.w	801c45e <_strtod_l+0x8f6>
 801c318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	f040 809e 	bne.w	801c45e <_strtod_l+0x8f6>
 801c322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c326:	0d1b      	lsrs	r3, r3, #20
 801c328:	051b      	lsls	r3, r3, #20
 801c32a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c32e:	f240 8096 	bls.w	801c45e <_strtod_l+0x8f6>
 801c332:	696b      	ldr	r3, [r5, #20]
 801c334:	b91b      	cbnz	r3, 801c33e <_strtod_l+0x7d6>
 801c336:	692b      	ldr	r3, [r5, #16]
 801c338:	2b01      	cmp	r3, #1
 801c33a:	f340 8090 	ble.w	801c45e <_strtod_l+0x8f6>
 801c33e:	4629      	mov	r1, r5
 801c340:	2201      	movs	r2, #1
 801c342:	4620      	mov	r0, r4
 801c344:	f001 fe6a 	bl	801e01c <__lshift>
 801c348:	4631      	mov	r1, r6
 801c34a:	4605      	mov	r5, r0
 801c34c:	f001 fed6 	bl	801e0fc <__mcmp>
 801c350:	2800      	cmp	r0, #0
 801c352:	f340 8084 	ble.w	801c45e <_strtod_l+0x8f6>
 801c356:	9904      	ldr	r1, [sp, #16]
 801c358:	4a2b      	ldr	r2, [pc, #172]	; (801c408 <_strtod_l+0x8a0>)
 801c35a:	464b      	mov	r3, r9
 801c35c:	2900      	cmp	r1, #0
 801c35e:	f000 809d 	beq.w	801c49c <_strtod_l+0x934>
 801c362:	ea02 0109 	and.w	r1, r2, r9
 801c366:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c36a:	f300 8097 	bgt.w	801c49c <_strtod_l+0x934>
 801c36e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c372:	f77f aea5 	ble.w	801c0c0 <_strtod_l+0x558>
 801c376:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801c3f8 <_strtod_l+0x890>
 801c37a:	ec49 8b16 	vmov	d6, r8, r9
 801c37e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c382:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c386:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c38a:	4313      	orrs	r3, r2
 801c38c:	bf08      	it	eq
 801c38e:	2322      	moveq	r3, #34	; 0x22
 801c390:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c394:	bf08      	it	eq
 801c396:	6023      	streq	r3, [r4, #0]
 801c398:	e62c      	b.n	801bff4 <_strtod_l+0x48c>
 801c39a:	f04f 31ff 	mov.w	r1, #4294967295
 801c39e:	fa01 f202 	lsl.w	r2, r1, r2
 801c3a2:	ea02 0808 	and.w	r8, r2, r8
 801c3a6:	e6d9      	b.n	801c15c <_strtod_l+0x5f4>
 801c3a8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c3ac:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c3b0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c3b4:	33e2      	adds	r3, #226	; 0xe2
 801c3b6:	fa00 f303 	lsl.w	r3, r0, r3
 801c3ba:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801c3be:	e73f      	b.n	801c240 <_strtod_l+0x6d8>
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	2301      	movs	r3, #1
 801c3c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c3c8:	e73a      	b.n	801c240 <_strtod_l+0x6d8>
 801c3ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c3cc:	461a      	mov	r2, r3
 801c3ce:	4620      	mov	r0, r4
 801c3d0:	f001 fe24 	bl	801e01c <__lshift>
 801c3d4:	9012      	str	r0, [sp, #72]	; 0x48
 801c3d6:	2800      	cmp	r0, #0
 801c3d8:	f47f af64 	bne.w	801c2a4 <_strtod_l+0x73c>
 801c3dc:	e600      	b.n	801bfe0 <_strtod_l+0x478>
 801c3de:	bf00      	nop
 801c3e0:	94a03595 	.word	0x94a03595
 801c3e4:	3fcfffff 	.word	0x3fcfffff
 801c3e8:	94a03595 	.word	0x94a03595
 801c3ec:	3fdfffff 	.word	0x3fdfffff
 801c3f0:	35afe535 	.word	0x35afe535
 801c3f4:	3fe00000 	.word	0x3fe00000
 801c3f8:	00000000 	.word	0x00000000
 801c3fc:	39500000 	.word	0x39500000
 801c400:	0801fdf8 	.word	0x0801fdf8
 801c404:	fffffc02 	.word	0xfffffc02
 801c408:	7ff00000 	.word	0x7ff00000
 801c40c:	46cb      	mov	fp, r9
 801c40e:	d15f      	bne.n	801c4d0 <_strtod_l+0x968>
 801c410:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c414:	f1ba 0f00 	cmp.w	sl, #0
 801c418:	d02a      	beq.n	801c470 <_strtod_l+0x908>
 801c41a:	4aa7      	ldr	r2, [pc, #668]	; (801c6b8 <_strtod_l+0xb50>)
 801c41c:	4293      	cmp	r3, r2
 801c41e:	d12b      	bne.n	801c478 <_strtod_l+0x910>
 801c420:	9b04      	ldr	r3, [sp, #16]
 801c422:	4642      	mov	r2, r8
 801c424:	b1fb      	cbz	r3, 801c466 <_strtod_l+0x8fe>
 801c426:	4ba5      	ldr	r3, [pc, #660]	; (801c6bc <_strtod_l+0xb54>)
 801c428:	ea09 0303 	and.w	r3, r9, r3
 801c42c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c430:	f04f 31ff 	mov.w	r1, #4294967295
 801c434:	d81a      	bhi.n	801c46c <_strtod_l+0x904>
 801c436:	0d1b      	lsrs	r3, r3, #20
 801c438:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c43c:	fa01 f303 	lsl.w	r3, r1, r3
 801c440:	429a      	cmp	r2, r3
 801c442:	d119      	bne.n	801c478 <_strtod_l+0x910>
 801c444:	4b9e      	ldr	r3, [pc, #632]	; (801c6c0 <_strtod_l+0xb58>)
 801c446:	459b      	cmp	fp, r3
 801c448:	d102      	bne.n	801c450 <_strtod_l+0x8e8>
 801c44a:	3201      	adds	r2, #1
 801c44c:	f43f adc8 	beq.w	801bfe0 <_strtod_l+0x478>
 801c450:	4b9a      	ldr	r3, [pc, #616]	; (801c6bc <_strtod_l+0xb54>)
 801c452:	ea0b 0303 	and.w	r3, fp, r3
 801c456:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c45a:	f04f 0800 	mov.w	r8, #0
 801c45e:	9b04      	ldr	r3, [sp, #16]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d188      	bne.n	801c376 <_strtod_l+0x80e>
 801c464:	e5c6      	b.n	801bff4 <_strtod_l+0x48c>
 801c466:	f04f 33ff 	mov.w	r3, #4294967295
 801c46a:	e7e9      	b.n	801c440 <_strtod_l+0x8d8>
 801c46c:	460b      	mov	r3, r1
 801c46e:	e7e7      	b.n	801c440 <_strtod_l+0x8d8>
 801c470:	ea53 0308 	orrs.w	r3, r3, r8
 801c474:	f43f af6f 	beq.w	801c356 <_strtod_l+0x7ee>
 801c478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c47a:	b1cb      	cbz	r3, 801c4b0 <_strtod_l+0x948>
 801c47c:	ea13 0f0b 	tst.w	r3, fp
 801c480:	d0ed      	beq.n	801c45e <_strtod_l+0x8f6>
 801c482:	9a04      	ldr	r2, [sp, #16]
 801c484:	4640      	mov	r0, r8
 801c486:	4649      	mov	r1, r9
 801c488:	f1ba 0f00 	cmp.w	sl, #0
 801c48c:	d014      	beq.n	801c4b8 <_strtod_l+0x950>
 801c48e:	f7ff fb4f 	bl	801bb30 <sulp>
 801c492:	ee38 7b00 	vadd.f64	d7, d8, d0
 801c496:	ec59 8b17 	vmov	r8, r9, d7
 801c49a:	e7e0      	b.n	801c45e <_strtod_l+0x8f6>
 801c49c:	4013      	ands	r3, r2
 801c49e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c4a2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c4a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c4aa:	f04f 38ff 	mov.w	r8, #4294967295
 801c4ae:	e7d6      	b.n	801c45e <_strtod_l+0x8f6>
 801c4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4b2:	ea13 0f08 	tst.w	r3, r8
 801c4b6:	e7e3      	b.n	801c480 <_strtod_l+0x918>
 801c4b8:	f7ff fb3a 	bl	801bb30 <sulp>
 801c4bc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801c4c0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801c4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4c8:	ec59 8b10 	vmov	r8, r9, d0
 801c4cc:	d1c7      	bne.n	801c45e <_strtod_l+0x8f6>
 801c4ce:	e5f7      	b.n	801c0c0 <_strtod_l+0x558>
 801c4d0:	4631      	mov	r1, r6
 801c4d2:	4628      	mov	r0, r5
 801c4d4:	f001 ff90 	bl	801e3f8 <__ratio>
 801c4d8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801c4dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4e4:	d865      	bhi.n	801c5b2 <_strtod_l+0xa4a>
 801c4e6:	f1ba 0f00 	cmp.w	sl, #0
 801c4ea:	d042      	beq.n	801c572 <_strtod_l+0xa0a>
 801c4ec:	4b75      	ldr	r3, [pc, #468]	; (801c6c4 <_strtod_l+0xb5c>)
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801c4f4:	4871      	ldr	r0, [pc, #452]	; (801c6bc <_strtod_l+0xb54>)
 801c4f6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801c6d0 <_strtod_l+0xb68>
 801c4fa:	ea0b 0100 	and.w	r1, fp, r0
 801c4fe:	4561      	cmp	r1, ip
 801c500:	f040 808e 	bne.w	801c620 <_strtod_l+0xab8>
 801c504:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801c508:	ec49 8b10 	vmov	d0, r8, r9
 801c50c:	ec43 2b1c 	vmov	d12, r2, r3
 801c510:	910a      	str	r1, [sp, #40]	; 0x28
 801c512:	f001 fe99 	bl	801e248 <__ulp>
 801c516:	ec49 8b1e 	vmov	d14, r8, r9
 801c51a:	4868      	ldr	r0, [pc, #416]	; (801c6bc <_strtod_l+0xb54>)
 801c51c:	eeac eb00 	vfma.f64	d14, d12, d0
 801c520:	ee1e 3a90 	vmov	r3, s29
 801c524:	4a68      	ldr	r2, [pc, #416]	; (801c6c8 <_strtod_l+0xb60>)
 801c526:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c528:	4018      	ands	r0, r3
 801c52a:	4290      	cmp	r0, r2
 801c52c:	ec59 8b1e 	vmov	r8, r9, d14
 801c530:	d94e      	bls.n	801c5d0 <_strtod_l+0xa68>
 801c532:	ee18 3a90 	vmov	r3, s17
 801c536:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c53a:	4293      	cmp	r3, r2
 801c53c:	d104      	bne.n	801c548 <_strtod_l+0x9e0>
 801c53e:	ee18 3a10 	vmov	r3, s16
 801c542:	3301      	adds	r3, #1
 801c544:	f43f ad4c 	beq.w	801bfe0 <_strtod_l+0x478>
 801c548:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801c6c0 <_strtod_l+0xb58>
 801c54c:	f04f 38ff 	mov.w	r8, #4294967295
 801c550:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c552:	4620      	mov	r0, r4
 801c554:	f001 fb46 	bl	801dbe4 <_Bfree>
 801c558:	4639      	mov	r1, r7
 801c55a:	4620      	mov	r0, r4
 801c55c:	f001 fb42 	bl	801dbe4 <_Bfree>
 801c560:	4631      	mov	r1, r6
 801c562:	4620      	mov	r0, r4
 801c564:	f001 fb3e 	bl	801dbe4 <_Bfree>
 801c568:	4629      	mov	r1, r5
 801c56a:	4620      	mov	r0, r4
 801c56c:	f001 fb3a 	bl	801dbe4 <_Bfree>
 801c570:	e619      	b.n	801c1a6 <_strtod_l+0x63e>
 801c572:	f1b8 0f00 	cmp.w	r8, #0
 801c576:	d112      	bne.n	801c59e <_strtod_l+0xa36>
 801c578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c57c:	b9b3      	cbnz	r3, 801c5ac <_strtod_l+0xa44>
 801c57e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801c582:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c58a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c58e:	bf58      	it	pl
 801c590:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801c594:	eeb1 7b4d 	vneg.f64	d7, d13
 801c598:	ec53 2b17 	vmov	r2, r3, d7
 801c59c:	e7aa      	b.n	801c4f4 <_strtod_l+0x98c>
 801c59e:	f1b8 0f01 	cmp.w	r8, #1
 801c5a2:	d103      	bne.n	801c5ac <_strtod_l+0xa44>
 801c5a4:	f1b9 0f00 	cmp.w	r9, #0
 801c5a8:	f43f ad8a 	beq.w	801c0c0 <_strtod_l+0x558>
 801c5ac:	4b47      	ldr	r3, [pc, #284]	; (801c6cc <_strtod_l+0xb64>)
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	e79e      	b.n	801c4f0 <_strtod_l+0x988>
 801c5b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c5b6:	ee20 db0d 	vmul.f64	d13, d0, d13
 801c5ba:	f1ba 0f00 	cmp.w	sl, #0
 801c5be:	d104      	bne.n	801c5ca <_strtod_l+0xa62>
 801c5c0:	eeb1 7b4d 	vneg.f64	d7, d13
 801c5c4:	ec53 2b17 	vmov	r2, r3, d7
 801c5c8:	e794      	b.n	801c4f4 <_strtod_l+0x98c>
 801c5ca:	eeb0 7b4d 	vmov.f64	d7, d13
 801c5ce:	e7f9      	b.n	801c5c4 <_strtod_l+0xa5c>
 801c5d0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801c5d4:	9b04      	ldr	r3, [sp, #16]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d1ba      	bne.n	801c550 <_strtod_l+0x9e8>
 801c5da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c5de:	0d1b      	lsrs	r3, r3, #20
 801c5e0:	051b      	lsls	r3, r3, #20
 801c5e2:	4299      	cmp	r1, r3
 801c5e4:	d1b4      	bne.n	801c550 <_strtod_l+0x9e8>
 801c5e6:	ec51 0b1d 	vmov	r0, r1, d13
 801c5ea:	f7e4 f8cd 	bl	8000788 <__aeabi_d2lz>
 801c5ee:	f7e4 f885 	bl	80006fc <__aeabi_l2d>
 801c5f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c5f6:	ec41 0b17 	vmov	d7, r0, r1
 801c5fa:	ea43 0308 	orr.w	r3, r3, r8
 801c5fe:	ea53 030a 	orrs.w	r3, r3, sl
 801c602:	ee3d db47 	vsub.f64	d13, d13, d7
 801c606:	d03c      	beq.n	801c682 <_strtod_l+0xb1a>
 801c608:	eeb4 dbca 	vcmpe.f64	d13, d10
 801c60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c610:	f53f acf0 	bmi.w	801bff4 <_strtod_l+0x48c>
 801c614:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801c618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c61c:	dd98      	ble.n	801c550 <_strtod_l+0x9e8>
 801c61e:	e4e9      	b.n	801bff4 <_strtod_l+0x48c>
 801c620:	9804      	ldr	r0, [sp, #16]
 801c622:	b1f0      	cbz	r0, 801c662 <_strtod_l+0xafa>
 801c624:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801c628:	d81b      	bhi.n	801c662 <_strtod_l+0xafa>
 801c62a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801c6b0 <_strtod_l+0xb48>
 801c62e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c636:	d811      	bhi.n	801c65c <_strtod_l+0xaf4>
 801c638:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801c63c:	ee1d 3a10 	vmov	r3, s26
 801c640:	2b01      	cmp	r3, #1
 801c642:	bf38      	it	cc
 801c644:	2301      	movcc	r3, #1
 801c646:	ee0d 3a10 	vmov	s26, r3
 801c64a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801c64e:	f1ba 0f00 	cmp.w	sl, #0
 801c652:	d113      	bne.n	801c67c <_strtod_l+0xb14>
 801c654:	eeb1 7b4d 	vneg.f64	d7, d13
 801c658:	ec53 2b17 	vmov	r2, r3, d7
 801c65c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801c660:	1a43      	subs	r3, r0, r1
 801c662:	eeb0 0b48 	vmov.f64	d0, d8
 801c666:	ec43 2b1c 	vmov	d12, r2, r3
 801c66a:	910a      	str	r1, [sp, #40]	; 0x28
 801c66c:	f001 fdec 	bl	801e248 <__ulp>
 801c670:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c672:	eeac 8b00 	vfma.f64	d8, d12, d0
 801c676:	ec59 8b18 	vmov	r8, r9, d8
 801c67a:	e7ab      	b.n	801c5d4 <_strtod_l+0xa6c>
 801c67c:	eeb0 7b4d 	vmov.f64	d7, d13
 801c680:	e7ea      	b.n	801c658 <_strtod_l+0xaf0>
 801c682:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801c686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68a:	f57f af61 	bpl.w	801c550 <_strtod_l+0x9e8>
 801c68e:	e4b1      	b.n	801bff4 <_strtod_l+0x48c>
 801c690:	2300      	movs	r3, #0
 801c692:	9308      	str	r3, [sp, #32]
 801c694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c698:	6013      	str	r3, [r2, #0]
 801c69a:	f7ff baad 	b.w	801bbf8 <_strtod_l+0x90>
 801c69e:	2a65      	cmp	r2, #101	; 0x65
 801c6a0:	f43f ab9f 	beq.w	801bde2 <_strtod_l+0x27a>
 801c6a4:	2a45      	cmp	r2, #69	; 0x45
 801c6a6:	f43f ab9c 	beq.w	801bde2 <_strtod_l+0x27a>
 801c6aa:	2101      	movs	r1, #1
 801c6ac:	f7ff bbd4 	b.w	801be58 <_strtod_l+0x2f0>
 801c6b0:	ffc00000 	.word	0xffc00000
 801c6b4:	41dfffff 	.word	0x41dfffff
 801c6b8:	000fffff 	.word	0x000fffff
 801c6bc:	7ff00000 	.word	0x7ff00000
 801c6c0:	7fefffff 	.word	0x7fefffff
 801c6c4:	3ff00000 	.word	0x3ff00000
 801c6c8:	7c9fffff 	.word	0x7c9fffff
 801c6cc:	bff00000 	.word	0xbff00000
 801c6d0:	7fe00000 	.word	0x7fe00000

0801c6d4 <_strtod_r>:
 801c6d4:	4b01      	ldr	r3, [pc, #4]	; (801c6dc <_strtod_r+0x8>)
 801c6d6:	f7ff ba47 	b.w	801bb68 <_strtod_l>
 801c6da:	bf00      	nop
 801c6dc:	24000168 	.word	0x24000168

0801c6e0 <_strtol_l.constprop.0>:
 801c6e0:	2b01      	cmp	r3, #1
 801c6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e6:	d001      	beq.n	801c6ec <_strtol_l.constprop.0+0xc>
 801c6e8:	2b24      	cmp	r3, #36	; 0x24
 801c6ea:	d906      	bls.n	801c6fa <_strtol_l.constprop.0+0x1a>
 801c6ec:	f7fe fb18 	bl	801ad20 <__errno>
 801c6f0:	2316      	movs	r3, #22
 801c6f2:	6003      	str	r3, [r0, #0]
 801c6f4:	2000      	movs	r0, #0
 801c6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801c7e0 <_strtol_l.constprop.0+0x100>
 801c6fe:	460d      	mov	r5, r1
 801c700:	462e      	mov	r6, r5
 801c702:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c706:	f814 700c 	ldrb.w	r7, [r4, ip]
 801c70a:	f017 0708 	ands.w	r7, r7, #8
 801c70e:	d1f7      	bne.n	801c700 <_strtol_l.constprop.0+0x20>
 801c710:	2c2d      	cmp	r4, #45	; 0x2d
 801c712:	d132      	bne.n	801c77a <_strtol_l.constprop.0+0x9a>
 801c714:	782c      	ldrb	r4, [r5, #0]
 801c716:	2701      	movs	r7, #1
 801c718:	1cb5      	adds	r5, r6, #2
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d05b      	beq.n	801c7d6 <_strtol_l.constprop.0+0xf6>
 801c71e:	2b10      	cmp	r3, #16
 801c720:	d109      	bne.n	801c736 <_strtol_l.constprop.0+0x56>
 801c722:	2c30      	cmp	r4, #48	; 0x30
 801c724:	d107      	bne.n	801c736 <_strtol_l.constprop.0+0x56>
 801c726:	782c      	ldrb	r4, [r5, #0]
 801c728:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c72c:	2c58      	cmp	r4, #88	; 0x58
 801c72e:	d14d      	bne.n	801c7cc <_strtol_l.constprop.0+0xec>
 801c730:	786c      	ldrb	r4, [r5, #1]
 801c732:	2310      	movs	r3, #16
 801c734:	3502      	adds	r5, #2
 801c736:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c73a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c73e:	f04f 0c00 	mov.w	ip, #0
 801c742:	fbb8 f9f3 	udiv	r9, r8, r3
 801c746:	4666      	mov	r6, ip
 801c748:	fb03 8a19 	mls	sl, r3, r9, r8
 801c74c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801c750:	f1be 0f09 	cmp.w	lr, #9
 801c754:	d816      	bhi.n	801c784 <_strtol_l.constprop.0+0xa4>
 801c756:	4674      	mov	r4, lr
 801c758:	42a3      	cmp	r3, r4
 801c75a:	dd24      	ble.n	801c7a6 <_strtol_l.constprop.0+0xc6>
 801c75c:	f1bc 0f00 	cmp.w	ip, #0
 801c760:	db1e      	blt.n	801c7a0 <_strtol_l.constprop.0+0xc0>
 801c762:	45b1      	cmp	r9, r6
 801c764:	d31c      	bcc.n	801c7a0 <_strtol_l.constprop.0+0xc0>
 801c766:	d101      	bne.n	801c76c <_strtol_l.constprop.0+0x8c>
 801c768:	45a2      	cmp	sl, r4
 801c76a:	db19      	blt.n	801c7a0 <_strtol_l.constprop.0+0xc0>
 801c76c:	fb06 4603 	mla	r6, r6, r3, r4
 801c770:	f04f 0c01 	mov.w	ip, #1
 801c774:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c778:	e7e8      	b.n	801c74c <_strtol_l.constprop.0+0x6c>
 801c77a:	2c2b      	cmp	r4, #43	; 0x2b
 801c77c:	bf04      	itt	eq
 801c77e:	782c      	ldrbeq	r4, [r5, #0]
 801c780:	1cb5      	addeq	r5, r6, #2
 801c782:	e7ca      	b.n	801c71a <_strtol_l.constprop.0+0x3a>
 801c784:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801c788:	f1be 0f19 	cmp.w	lr, #25
 801c78c:	d801      	bhi.n	801c792 <_strtol_l.constprop.0+0xb2>
 801c78e:	3c37      	subs	r4, #55	; 0x37
 801c790:	e7e2      	b.n	801c758 <_strtol_l.constprop.0+0x78>
 801c792:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801c796:	f1be 0f19 	cmp.w	lr, #25
 801c79a:	d804      	bhi.n	801c7a6 <_strtol_l.constprop.0+0xc6>
 801c79c:	3c57      	subs	r4, #87	; 0x57
 801c79e:	e7db      	b.n	801c758 <_strtol_l.constprop.0+0x78>
 801c7a0:	f04f 3cff 	mov.w	ip, #4294967295
 801c7a4:	e7e6      	b.n	801c774 <_strtol_l.constprop.0+0x94>
 801c7a6:	f1bc 0f00 	cmp.w	ip, #0
 801c7aa:	da05      	bge.n	801c7b8 <_strtol_l.constprop.0+0xd8>
 801c7ac:	2322      	movs	r3, #34	; 0x22
 801c7ae:	6003      	str	r3, [r0, #0]
 801c7b0:	4646      	mov	r6, r8
 801c7b2:	b942      	cbnz	r2, 801c7c6 <_strtol_l.constprop.0+0xe6>
 801c7b4:	4630      	mov	r0, r6
 801c7b6:	e79e      	b.n	801c6f6 <_strtol_l.constprop.0+0x16>
 801c7b8:	b107      	cbz	r7, 801c7bc <_strtol_l.constprop.0+0xdc>
 801c7ba:	4276      	negs	r6, r6
 801c7bc:	2a00      	cmp	r2, #0
 801c7be:	d0f9      	beq.n	801c7b4 <_strtol_l.constprop.0+0xd4>
 801c7c0:	f1bc 0f00 	cmp.w	ip, #0
 801c7c4:	d000      	beq.n	801c7c8 <_strtol_l.constprop.0+0xe8>
 801c7c6:	1e69      	subs	r1, r5, #1
 801c7c8:	6011      	str	r1, [r2, #0]
 801c7ca:	e7f3      	b.n	801c7b4 <_strtol_l.constprop.0+0xd4>
 801c7cc:	2430      	movs	r4, #48	; 0x30
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d1b1      	bne.n	801c736 <_strtol_l.constprop.0+0x56>
 801c7d2:	2308      	movs	r3, #8
 801c7d4:	e7af      	b.n	801c736 <_strtol_l.constprop.0+0x56>
 801c7d6:	2c30      	cmp	r4, #48	; 0x30
 801c7d8:	d0a5      	beq.n	801c726 <_strtol_l.constprop.0+0x46>
 801c7da:	230a      	movs	r3, #10
 801c7dc:	e7ab      	b.n	801c736 <_strtol_l.constprop.0+0x56>
 801c7de:	bf00      	nop
 801c7e0:	0801fe21 	.word	0x0801fe21

0801c7e4 <_strtol_r>:
 801c7e4:	f7ff bf7c 	b.w	801c6e0 <_strtol_l.constprop.0>

0801c7e8 <_write_r>:
 801c7e8:	b538      	push	{r3, r4, r5, lr}
 801c7ea:	4d07      	ldr	r5, [pc, #28]	; (801c808 <_write_r+0x20>)
 801c7ec:	4604      	mov	r4, r0
 801c7ee:	4608      	mov	r0, r1
 801c7f0:	4611      	mov	r1, r2
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	602a      	str	r2, [r5, #0]
 801c7f6:	461a      	mov	r2, r3
 801c7f8:	f7e7 fa2f 	bl	8003c5a <_write>
 801c7fc:	1c43      	adds	r3, r0, #1
 801c7fe:	d102      	bne.n	801c806 <_write_r+0x1e>
 801c800:	682b      	ldr	r3, [r5, #0]
 801c802:	b103      	cbz	r3, 801c806 <_write_r+0x1e>
 801c804:	6023      	str	r3, [r4, #0]
 801c806:	bd38      	pop	{r3, r4, r5, pc}
 801c808:	240034f8 	.word	0x240034f8

0801c80c <_close_r>:
 801c80c:	b538      	push	{r3, r4, r5, lr}
 801c80e:	4d06      	ldr	r5, [pc, #24]	; (801c828 <_close_r+0x1c>)
 801c810:	2300      	movs	r3, #0
 801c812:	4604      	mov	r4, r0
 801c814:	4608      	mov	r0, r1
 801c816:	602b      	str	r3, [r5, #0]
 801c818:	f7e7 fa3b 	bl	8003c92 <_close>
 801c81c:	1c43      	adds	r3, r0, #1
 801c81e:	d102      	bne.n	801c826 <_close_r+0x1a>
 801c820:	682b      	ldr	r3, [r5, #0]
 801c822:	b103      	cbz	r3, 801c826 <_close_r+0x1a>
 801c824:	6023      	str	r3, [r4, #0]
 801c826:	bd38      	pop	{r3, r4, r5, pc}
 801c828:	240034f8 	.word	0x240034f8

0801c82c <quorem>:
 801c82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c830:	6903      	ldr	r3, [r0, #16]
 801c832:	690c      	ldr	r4, [r1, #16]
 801c834:	42a3      	cmp	r3, r4
 801c836:	4607      	mov	r7, r0
 801c838:	f2c0 8081 	blt.w	801c93e <quorem+0x112>
 801c83c:	3c01      	subs	r4, #1
 801c83e:	f101 0814 	add.w	r8, r1, #20
 801c842:	f100 0514 	add.w	r5, r0, #20
 801c846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c84a:	9301      	str	r3, [sp, #4]
 801c84c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c854:	3301      	adds	r3, #1
 801c856:	429a      	cmp	r2, r3
 801c858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c85c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c860:	fbb2 f6f3 	udiv	r6, r2, r3
 801c864:	d331      	bcc.n	801c8ca <quorem+0x9e>
 801c866:	f04f 0e00 	mov.w	lr, #0
 801c86a:	4640      	mov	r0, r8
 801c86c:	46ac      	mov	ip, r5
 801c86e:	46f2      	mov	sl, lr
 801c870:	f850 2b04 	ldr.w	r2, [r0], #4
 801c874:	b293      	uxth	r3, r2
 801c876:	fb06 e303 	mla	r3, r6, r3, lr
 801c87a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c87e:	b29b      	uxth	r3, r3
 801c880:	ebaa 0303 	sub.w	r3, sl, r3
 801c884:	f8dc a000 	ldr.w	sl, [ip]
 801c888:	0c12      	lsrs	r2, r2, #16
 801c88a:	fa13 f38a 	uxtah	r3, r3, sl
 801c88e:	fb06 e202 	mla	r2, r6, r2, lr
 801c892:	9300      	str	r3, [sp, #0]
 801c894:	9b00      	ldr	r3, [sp, #0]
 801c896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c89a:	b292      	uxth	r2, r2
 801c89c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c8a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8a4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c8a8:	4581      	cmp	r9, r0
 801c8aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8ae:	f84c 3b04 	str.w	r3, [ip], #4
 801c8b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c8b6:	d2db      	bcs.n	801c870 <quorem+0x44>
 801c8b8:	f855 300b 	ldr.w	r3, [r5, fp]
 801c8bc:	b92b      	cbnz	r3, 801c8ca <quorem+0x9e>
 801c8be:	9b01      	ldr	r3, [sp, #4]
 801c8c0:	3b04      	subs	r3, #4
 801c8c2:	429d      	cmp	r5, r3
 801c8c4:	461a      	mov	r2, r3
 801c8c6:	d32e      	bcc.n	801c926 <quorem+0xfa>
 801c8c8:	613c      	str	r4, [r7, #16]
 801c8ca:	4638      	mov	r0, r7
 801c8cc:	f001 fc16 	bl	801e0fc <__mcmp>
 801c8d0:	2800      	cmp	r0, #0
 801c8d2:	db24      	blt.n	801c91e <quorem+0xf2>
 801c8d4:	3601      	adds	r6, #1
 801c8d6:	4628      	mov	r0, r5
 801c8d8:	f04f 0c00 	mov.w	ip, #0
 801c8dc:	f858 2b04 	ldr.w	r2, [r8], #4
 801c8e0:	f8d0 e000 	ldr.w	lr, [r0]
 801c8e4:	b293      	uxth	r3, r2
 801c8e6:	ebac 0303 	sub.w	r3, ip, r3
 801c8ea:	0c12      	lsrs	r2, r2, #16
 801c8ec:	fa13 f38e 	uxtah	r3, r3, lr
 801c8f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c8f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8fe:	45c1      	cmp	r9, r8
 801c900:	f840 3b04 	str.w	r3, [r0], #4
 801c904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c908:	d2e8      	bcs.n	801c8dc <quorem+0xb0>
 801c90a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c90e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c912:	b922      	cbnz	r2, 801c91e <quorem+0xf2>
 801c914:	3b04      	subs	r3, #4
 801c916:	429d      	cmp	r5, r3
 801c918:	461a      	mov	r2, r3
 801c91a:	d30a      	bcc.n	801c932 <quorem+0x106>
 801c91c:	613c      	str	r4, [r7, #16]
 801c91e:	4630      	mov	r0, r6
 801c920:	b003      	add	sp, #12
 801c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c926:	6812      	ldr	r2, [r2, #0]
 801c928:	3b04      	subs	r3, #4
 801c92a:	2a00      	cmp	r2, #0
 801c92c:	d1cc      	bne.n	801c8c8 <quorem+0x9c>
 801c92e:	3c01      	subs	r4, #1
 801c930:	e7c7      	b.n	801c8c2 <quorem+0x96>
 801c932:	6812      	ldr	r2, [r2, #0]
 801c934:	3b04      	subs	r3, #4
 801c936:	2a00      	cmp	r2, #0
 801c938:	d1f0      	bne.n	801c91c <quorem+0xf0>
 801c93a:	3c01      	subs	r4, #1
 801c93c:	e7eb      	b.n	801c916 <quorem+0xea>
 801c93e:	2000      	movs	r0, #0
 801c940:	e7ee      	b.n	801c920 <quorem+0xf4>
 801c942:	0000      	movs	r0, r0
 801c944:	0000      	movs	r0, r0
	...

0801c948 <_dtoa_r>:
 801c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c94c:	ed2d 8b02 	vpush	{d8}
 801c950:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c952:	b091      	sub	sp, #68	; 0x44
 801c954:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c958:	ec59 8b10 	vmov	r8, r9, d0
 801c95c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c95e:	9106      	str	r1, [sp, #24]
 801c960:	4606      	mov	r6, r0
 801c962:	9208      	str	r2, [sp, #32]
 801c964:	930c      	str	r3, [sp, #48]	; 0x30
 801c966:	b975      	cbnz	r5, 801c986 <_dtoa_r+0x3e>
 801c968:	2010      	movs	r0, #16
 801c96a:	f001 f8e1 	bl	801db30 <malloc>
 801c96e:	4602      	mov	r2, r0
 801c970:	6270      	str	r0, [r6, #36]	; 0x24
 801c972:	b920      	cbnz	r0, 801c97e <_dtoa_r+0x36>
 801c974:	4baa      	ldr	r3, [pc, #680]	; (801cc20 <_dtoa_r+0x2d8>)
 801c976:	21ea      	movs	r1, #234	; 0xea
 801c978:	48aa      	ldr	r0, [pc, #680]	; (801cc24 <_dtoa_r+0x2dc>)
 801c97a:	f002 f84f 	bl	801ea1c <__assert_func>
 801c97e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c982:	6005      	str	r5, [r0, #0]
 801c984:	60c5      	str	r5, [r0, #12]
 801c986:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c988:	6819      	ldr	r1, [r3, #0]
 801c98a:	b151      	cbz	r1, 801c9a2 <_dtoa_r+0x5a>
 801c98c:	685a      	ldr	r2, [r3, #4]
 801c98e:	604a      	str	r2, [r1, #4]
 801c990:	2301      	movs	r3, #1
 801c992:	4093      	lsls	r3, r2
 801c994:	608b      	str	r3, [r1, #8]
 801c996:	4630      	mov	r0, r6
 801c998:	f001 f924 	bl	801dbe4 <_Bfree>
 801c99c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c99e:	2200      	movs	r2, #0
 801c9a0:	601a      	str	r2, [r3, #0]
 801c9a2:	f1b9 0300 	subs.w	r3, r9, #0
 801c9a6:	bfbb      	ittet	lt
 801c9a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c9ac:	9303      	strlt	r3, [sp, #12]
 801c9ae:	2300      	movge	r3, #0
 801c9b0:	2201      	movlt	r2, #1
 801c9b2:	bfac      	ite	ge
 801c9b4:	6023      	strge	r3, [r4, #0]
 801c9b6:	6022      	strlt	r2, [r4, #0]
 801c9b8:	4b9b      	ldr	r3, [pc, #620]	; (801cc28 <_dtoa_r+0x2e0>)
 801c9ba:	9c03      	ldr	r4, [sp, #12]
 801c9bc:	43a3      	bics	r3, r4
 801c9be:	d11c      	bne.n	801c9fa <_dtoa_r+0xb2>
 801c9c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c9c2:	f242 730f 	movw	r3, #9999	; 0x270f
 801c9c6:	6013      	str	r3, [r2, #0]
 801c9c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c9cc:	ea53 0308 	orrs.w	r3, r3, r8
 801c9d0:	f000 84fd 	beq.w	801d3ce <_dtoa_r+0xa86>
 801c9d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c9d6:	b963      	cbnz	r3, 801c9f2 <_dtoa_r+0xaa>
 801c9d8:	4b94      	ldr	r3, [pc, #592]	; (801cc2c <_dtoa_r+0x2e4>)
 801c9da:	e01f      	b.n	801ca1c <_dtoa_r+0xd4>
 801c9dc:	4b94      	ldr	r3, [pc, #592]	; (801cc30 <_dtoa_r+0x2e8>)
 801c9de:	9301      	str	r3, [sp, #4]
 801c9e0:	3308      	adds	r3, #8
 801c9e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c9e4:	6013      	str	r3, [r2, #0]
 801c9e6:	9801      	ldr	r0, [sp, #4]
 801c9e8:	b011      	add	sp, #68	; 0x44
 801c9ea:	ecbd 8b02 	vpop	{d8}
 801c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f2:	4b8e      	ldr	r3, [pc, #568]	; (801cc2c <_dtoa_r+0x2e4>)
 801c9f4:	9301      	str	r3, [sp, #4]
 801c9f6:	3303      	adds	r3, #3
 801c9f8:	e7f3      	b.n	801c9e2 <_dtoa_r+0x9a>
 801c9fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 801c9fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ca02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca06:	d10b      	bne.n	801ca20 <_dtoa_r+0xd8>
 801ca08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca0a:	2301      	movs	r3, #1
 801ca0c:	6013      	str	r3, [r2, #0]
 801ca0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	f000 84d9 	beq.w	801d3c8 <_dtoa_r+0xa80>
 801ca16:	4887      	ldr	r0, [pc, #540]	; (801cc34 <_dtoa_r+0x2ec>)
 801ca18:	6018      	str	r0, [r3, #0]
 801ca1a:	1e43      	subs	r3, r0, #1
 801ca1c:	9301      	str	r3, [sp, #4]
 801ca1e:	e7e2      	b.n	801c9e6 <_dtoa_r+0x9e>
 801ca20:	a90f      	add	r1, sp, #60	; 0x3c
 801ca22:	aa0e      	add	r2, sp, #56	; 0x38
 801ca24:	4630      	mov	r0, r6
 801ca26:	eeb0 0b48 	vmov.f64	d0, d8
 801ca2a:	f001 fc89 	bl	801e340 <__d2b>
 801ca2e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801ca32:	4605      	mov	r5, r0
 801ca34:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ca36:	2900      	cmp	r1, #0
 801ca38:	d046      	beq.n	801cac8 <_dtoa_r+0x180>
 801ca3a:	ee18 4a90 	vmov	r4, s17
 801ca3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ca42:	ec53 2b18 	vmov	r2, r3, d8
 801ca46:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801ca4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ca4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ca52:	2400      	movs	r4, #0
 801ca54:	ec43 2b16 	vmov	d6, r2, r3
 801ca58:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801ca5c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cc08 <_dtoa_r+0x2c0>
 801ca60:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ca64:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801cc10 <_dtoa_r+0x2c8>
 801ca68:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ca6c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cc18 <_dtoa_r+0x2d0>
 801ca70:	ee07 1a90 	vmov	s15, r1
 801ca74:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ca78:	eeb0 7b46 	vmov.f64	d7, d6
 801ca7c:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ca80:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ca84:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ca88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca8c:	ee16 ba90 	vmov	fp, s13
 801ca90:	940a      	str	r4, [sp, #40]	; 0x28
 801ca92:	d508      	bpl.n	801caa6 <_dtoa_r+0x15e>
 801ca94:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ca98:	eeb4 6b47 	vcmp.f64	d6, d7
 801ca9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caa0:	bf18      	it	ne
 801caa2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801caa6:	f1bb 0f16 	cmp.w	fp, #22
 801caaa:	d82f      	bhi.n	801cb0c <_dtoa_r+0x1c4>
 801caac:	4b62      	ldr	r3, [pc, #392]	; (801cc38 <_dtoa_r+0x2f0>)
 801caae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cab2:	ed93 7b00 	vldr	d7, [r3]
 801cab6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cabe:	d501      	bpl.n	801cac4 <_dtoa_r+0x17c>
 801cac0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cac4:	2300      	movs	r3, #0
 801cac6:	e022      	b.n	801cb0e <_dtoa_r+0x1c6>
 801cac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801caca:	4401      	add	r1, r0
 801cacc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801cad0:	2b20      	cmp	r3, #32
 801cad2:	bfc1      	itttt	gt
 801cad4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cad8:	fa04 f303 	lslgt.w	r3, r4, r3
 801cadc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801cae0:	fa28 f804 	lsrgt.w	r8, r8, r4
 801cae4:	bfd6      	itet	le
 801cae6:	f1c3 0320 	rsble	r3, r3, #32
 801caea:	ea43 0808 	orrgt.w	r8, r3, r8
 801caee:	fa08 f803 	lslle.w	r8, r8, r3
 801caf2:	ee07 8a90 	vmov	s15, r8
 801caf6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cafa:	3901      	subs	r1, #1
 801cafc:	ee17 4a90 	vmov	r4, s15
 801cb00:	ec53 2b17 	vmov	r2, r3, d7
 801cb04:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801cb08:	2401      	movs	r4, #1
 801cb0a:	e7a3      	b.n	801ca54 <_dtoa_r+0x10c>
 801cb0c:	2301      	movs	r3, #1
 801cb0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb10:	1a43      	subs	r3, r0, r1
 801cb12:	1e5a      	subs	r2, r3, #1
 801cb14:	bf45      	ittet	mi
 801cb16:	f1c3 0301 	rsbmi	r3, r3, #1
 801cb1a:	9304      	strmi	r3, [sp, #16]
 801cb1c:	2300      	movpl	r3, #0
 801cb1e:	2300      	movmi	r3, #0
 801cb20:	9205      	str	r2, [sp, #20]
 801cb22:	bf54      	ite	pl
 801cb24:	9304      	strpl	r3, [sp, #16]
 801cb26:	9305      	strmi	r3, [sp, #20]
 801cb28:	f1bb 0f00 	cmp.w	fp, #0
 801cb2c:	db18      	blt.n	801cb60 <_dtoa_r+0x218>
 801cb2e:	9b05      	ldr	r3, [sp, #20]
 801cb30:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cb34:	445b      	add	r3, fp
 801cb36:	9305      	str	r3, [sp, #20]
 801cb38:	2300      	movs	r3, #0
 801cb3a:	9a06      	ldr	r2, [sp, #24]
 801cb3c:	2a09      	cmp	r2, #9
 801cb3e:	d849      	bhi.n	801cbd4 <_dtoa_r+0x28c>
 801cb40:	2a05      	cmp	r2, #5
 801cb42:	bfc4      	itt	gt
 801cb44:	3a04      	subgt	r2, #4
 801cb46:	9206      	strgt	r2, [sp, #24]
 801cb48:	9a06      	ldr	r2, [sp, #24]
 801cb4a:	f1a2 0202 	sub.w	r2, r2, #2
 801cb4e:	bfcc      	ite	gt
 801cb50:	2400      	movgt	r4, #0
 801cb52:	2401      	movle	r4, #1
 801cb54:	2a03      	cmp	r2, #3
 801cb56:	d848      	bhi.n	801cbea <_dtoa_r+0x2a2>
 801cb58:	e8df f002 	tbb	[pc, r2]
 801cb5c:	3a2c2e0b 	.word	0x3a2c2e0b
 801cb60:	9b04      	ldr	r3, [sp, #16]
 801cb62:	2200      	movs	r2, #0
 801cb64:	eba3 030b 	sub.w	r3, r3, fp
 801cb68:	9304      	str	r3, [sp, #16]
 801cb6a:	9209      	str	r2, [sp, #36]	; 0x24
 801cb6c:	f1cb 0300 	rsb	r3, fp, #0
 801cb70:	e7e3      	b.n	801cb3a <_dtoa_r+0x1f2>
 801cb72:	2200      	movs	r2, #0
 801cb74:	9207      	str	r2, [sp, #28]
 801cb76:	9a08      	ldr	r2, [sp, #32]
 801cb78:	2a00      	cmp	r2, #0
 801cb7a:	dc39      	bgt.n	801cbf0 <_dtoa_r+0x2a8>
 801cb7c:	f04f 0a01 	mov.w	sl, #1
 801cb80:	46d1      	mov	r9, sl
 801cb82:	4652      	mov	r2, sl
 801cb84:	f8cd a020 	str.w	sl, [sp, #32]
 801cb88:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801cb8a:	2100      	movs	r1, #0
 801cb8c:	6079      	str	r1, [r7, #4]
 801cb8e:	2004      	movs	r0, #4
 801cb90:	f100 0c14 	add.w	ip, r0, #20
 801cb94:	4594      	cmp	ip, r2
 801cb96:	6879      	ldr	r1, [r7, #4]
 801cb98:	d92f      	bls.n	801cbfa <_dtoa_r+0x2b2>
 801cb9a:	4630      	mov	r0, r6
 801cb9c:	930d      	str	r3, [sp, #52]	; 0x34
 801cb9e:	f000 ffe1 	bl	801db64 <_Balloc>
 801cba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cba4:	9001      	str	r0, [sp, #4]
 801cba6:	4602      	mov	r2, r0
 801cba8:	2800      	cmp	r0, #0
 801cbaa:	d149      	bne.n	801cc40 <_dtoa_r+0x2f8>
 801cbac:	4b23      	ldr	r3, [pc, #140]	; (801cc3c <_dtoa_r+0x2f4>)
 801cbae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cbb2:	e6e1      	b.n	801c978 <_dtoa_r+0x30>
 801cbb4:	2201      	movs	r2, #1
 801cbb6:	e7dd      	b.n	801cb74 <_dtoa_r+0x22c>
 801cbb8:	2200      	movs	r2, #0
 801cbba:	9207      	str	r2, [sp, #28]
 801cbbc:	9a08      	ldr	r2, [sp, #32]
 801cbbe:	eb0b 0a02 	add.w	sl, fp, r2
 801cbc2:	f10a 0901 	add.w	r9, sl, #1
 801cbc6:	464a      	mov	r2, r9
 801cbc8:	2a01      	cmp	r2, #1
 801cbca:	bfb8      	it	lt
 801cbcc:	2201      	movlt	r2, #1
 801cbce:	e7db      	b.n	801cb88 <_dtoa_r+0x240>
 801cbd0:	2201      	movs	r2, #1
 801cbd2:	e7f2      	b.n	801cbba <_dtoa_r+0x272>
 801cbd4:	2401      	movs	r4, #1
 801cbd6:	2200      	movs	r2, #0
 801cbd8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801cbdc:	f04f 3aff 	mov.w	sl, #4294967295
 801cbe0:	2100      	movs	r1, #0
 801cbe2:	46d1      	mov	r9, sl
 801cbe4:	2212      	movs	r2, #18
 801cbe6:	9108      	str	r1, [sp, #32]
 801cbe8:	e7ce      	b.n	801cb88 <_dtoa_r+0x240>
 801cbea:	2201      	movs	r2, #1
 801cbec:	9207      	str	r2, [sp, #28]
 801cbee:	e7f5      	b.n	801cbdc <_dtoa_r+0x294>
 801cbf0:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cbf4:	46d1      	mov	r9, sl
 801cbf6:	4652      	mov	r2, sl
 801cbf8:	e7c6      	b.n	801cb88 <_dtoa_r+0x240>
 801cbfa:	3101      	adds	r1, #1
 801cbfc:	6079      	str	r1, [r7, #4]
 801cbfe:	0040      	lsls	r0, r0, #1
 801cc00:	e7c6      	b.n	801cb90 <_dtoa_r+0x248>
 801cc02:	bf00      	nop
 801cc04:	f3af 8000 	nop.w
 801cc08:	636f4361 	.word	0x636f4361
 801cc0c:	3fd287a7 	.word	0x3fd287a7
 801cc10:	8b60c8b3 	.word	0x8b60c8b3
 801cc14:	3fc68a28 	.word	0x3fc68a28
 801cc18:	509f79fb 	.word	0x509f79fb
 801cc1c:	3fd34413 	.word	0x3fd34413
 801cc20:	0801ff2e 	.word	0x0801ff2e
 801cc24:	0801ff45 	.word	0x0801ff45
 801cc28:	7ff00000 	.word	0x7ff00000
 801cc2c:	0801ff2a 	.word	0x0801ff2a
 801cc30:	0801ff21 	.word	0x0801ff21
 801cc34:	0801fda5 	.word	0x0801fda5
 801cc38:	080200b0 	.word	0x080200b0
 801cc3c:	0801ffa0 	.word	0x0801ffa0
 801cc40:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cc42:	9901      	ldr	r1, [sp, #4]
 801cc44:	6011      	str	r1, [r2, #0]
 801cc46:	f1b9 0f0e 	cmp.w	r9, #14
 801cc4a:	d86c      	bhi.n	801cd26 <_dtoa_r+0x3de>
 801cc4c:	2c00      	cmp	r4, #0
 801cc4e:	d06a      	beq.n	801cd26 <_dtoa_r+0x3de>
 801cc50:	f1bb 0f00 	cmp.w	fp, #0
 801cc54:	f340 80a0 	ble.w	801cd98 <_dtoa_r+0x450>
 801cc58:	49c1      	ldr	r1, [pc, #772]	; (801cf60 <_dtoa_r+0x618>)
 801cc5a:	f00b 020f 	and.w	r2, fp, #15
 801cc5e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cc62:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cc66:	ed92 7b00 	vldr	d7, [r2]
 801cc6a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801cc6e:	f000 8087 	beq.w	801cd80 <_dtoa_r+0x438>
 801cc72:	4abc      	ldr	r2, [pc, #752]	; (801cf64 <_dtoa_r+0x61c>)
 801cc74:	ed92 6b08 	vldr	d6, [r2, #32]
 801cc78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801cc7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801cc80:	f001 010f 	and.w	r1, r1, #15
 801cc84:	2203      	movs	r2, #3
 801cc86:	48b7      	ldr	r0, [pc, #732]	; (801cf64 <_dtoa_r+0x61c>)
 801cc88:	2900      	cmp	r1, #0
 801cc8a:	d17b      	bne.n	801cd84 <_dtoa_r+0x43c>
 801cc8c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cc90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cc94:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cc98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cc9a:	2900      	cmp	r1, #0
 801cc9c:	f000 80a2 	beq.w	801cde4 <_dtoa_r+0x49c>
 801cca0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cca8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccb0:	f140 8098 	bpl.w	801cde4 <_dtoa_r+0x49c>
 801ccb4:	f1b9 0f00 	cmp.w	r9, #0
 801ccb8:	f000 8094 	beq.w	801cde4 <_dtoa_r+0x49c>
 801ccbc:	f1ba 0f00 	cmp.w	sl, #0
 801ccc0:	dd2f      	ble.n	801cd22 <_dtoa_r+0x3da>
 801ccc2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ccc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ccca:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ccce:	f10b 37ff 	add.w	r7, fp, #4294967295
 801ccd2:	3201      	adds	r2, #1
 801ccd4:	4650      	mov	r0, sl
 801ccd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ccda:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801ccde:	ee07 2a90 	vmov	s15, r2
 801cce2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cce6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ccea:	ee15 4a90 	vmov	r4, s11
 801ccee:	ec52 1b15 	vmov	r1, r2, d5
 801ccf2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	d177      	bne.n	801cdea <_dtoa_r+0x4a2>
 801ccfa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ccfe:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cd02:	ec42 1b17 	vmov	d7, r1, r2
 801cd06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd0e:	f300 8263 	bgt.w	801d1d8 <_dtoa_r+0x890>
 801cd12:	eeb1 7b47 	vneg.f64	d7, d7
 801cd16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd1e:	f100 8258 	bmi.w	801d1d2 <_dtoa_r+0x88a>
 801cd22:	ed8d 8b02 	vstr	d8, [sp, #8]
 801cd26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd28:	2a00      	cmp	r2, #0
 801cd2a:	f2c0 811d 	blt.w	801cf68 <_dtoa_r+0x620>
 801cd2e:	f1bb 0f0e 	cmp.w	fp, #14
 801cd32:	f300 8119 	bgt.w	801cf68 <_dtoa_r+0x620>
 801cd36:	4b8a      	ldr	r3, [pc, #552]	; (801cf60 <_dtoa_r+0x618>)
 801cd38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cd3c:	ed93 6b00 	vldr	d6, [r3]
 801cd40:	9b08      	ldr	r3, [sp, #32]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	f280 80b7 	bge.w	801ceb6 <_dtoa_r+0x56e>
 801cd48:	f1b9 0f00 	cmp.w	r9, #0
 801cd4c:	f300 80b3 	bgt.w	801ceb6 <_dtoa_r+0x56e>
 801cd50:	f040 823f 	bne.w	801d1d2 <_dtoa_r+0x88a>
 801cd54:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cd58:	ee26 6b07 	vmul.f64	d6, d6, d7
 801cd5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cd60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd68:	464c      	mov	r4, r9
 801cd6a:	464f      	mov	r7, r9
 801cd6c:	f280 8215 	bge.w	801d19a <_dtoa_r+0x852>
 801cd70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cd74:	2331      	movs	r3, #49	; 0x31
 801cd76:	f808 3b01 	strb.w	r3, [r8], #1
 801cd7a:	f10b 0b01 	add.w	fp, fp, #1
 801cd7e:	e211      	b.n	801d1a4 <_dtoa_r+0x85c>
 801cd80:	2202      	movs	r2, #2
 801cd82:	e780      	b.n	801cc86 <_dtoa_r+0x33e>
 801cd84:	07cc      	lsls	r4, r1, #31
 801cd86:	d504      	bpl.n	801cd92 <_dtoa_r+0x44a>
 801cd88:	ed90 6b00 	vldr	d6, [r0]
 801cd8c:	3201      	adds	r2, #1
 801cd8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd92:	1049      	asrs	r1, r1, #1
 801cd94:	3008      	adds	r0, #8
 801cd96:	e777      	b.n	801cc88 <_dtoa_r+0x340>
 801cd98:	d022      	beq.n	801cde0 <_dtoa_r+0x498>
 801cd9a:	f1cb 0100 	rsb	r1, fp, #0
 801cd9e:	4a70      	ldr	r2, [pc, #448]	; (801cf60 <_dtoa_r+0x618>)
 801cda0:	f001 000f 	and.w	r0, r1, #15
 801cda4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cda8:	ed92 7b00 	vldr	d7, [r2]
 801cdac:	ee28 7b07 	vmul.f64	d7, d8, d7
 801cdb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cdb4:	486b      	ldr	r0, [pc, #428]	; (801cf64 <_dtoa_r+0x61c>)
 801cdb6:	1109      	asrs	r1, r1, #4
 801cdb8:	2400      	movs	r4, #0
 801cdba:	2202      	movs	r2, #2
 801cdbc:	b929      	cbnz	r1, 801cdca <_dtoa_r+0x482>
 801cdbe:	2c00      	cmp	r4, #0
 801cdc0:	f43f af6a 	beq.w	801cc98 <_dtoa_r+0x350>
 801cdc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cdc8:	e766      	b.n	801cc98 <_dtoa_r+0x350>
 801cdca:	07cf      	lsls	r7, r1, #31
 801cdcc:	d505      	bpl.n	801cdda <_dtoa_r+0x492>
 801cdce:	ed90 6b00 	vldr	d6, [r0]
 801cdd2:	3201      	adds	r2, #1
 801cdd4:	2401      	movs	r4, #1
 801cdd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cdda:	1049      	asrs	r1, r1, #1
 801cddc:	3008      	adds	r0, #8
 801cdde:	e7ed      	b.n	801cdbc <_dtoa_r+0x474>
 801cde0:	2202      	movs	r2, #2
 801cde2:	e759      	b.n	801cc98 <_dtoa_r+0x350>
 801cde4:	465f      	mov	r7, fp
 801cde6:	4648      	mov	r0, r9
 801cde8:	e775      	b.n	801ccd6 <_dtoa_r+0x38e>
 801cdea:	ec42 1b17 	vmov	d7, r1, r2
 801cdee:	4a5c      	ldr	r2, [pc, #368]	; (801cf60 <_dtoa_r+0x618>)
 801cdf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cdf4:	ed12 4b02 	vldr	d4, [r2, #-8]
 801cdf8:	9a01      	ldr	r2, [sp, #4]
 801cdfa:	1814      	adds	r4, r2, r0
 801cdfc:	9a07      	ldr	r2, [sp, #28]
 801cdfe:	b352      	cbz	r2, 801ce56 <_dtoa_r+0x50e>
 801ce00:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ce04:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ce08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce0c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ce10:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ce14:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ce18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ce1c:	ee14 2a90 	vmov	r2, s9
 801ce20:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ce24:	3230      	adds	r2, #48	; 0x30
 801ce26:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ce2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce32:	f808 2b01 	strb.w	r2, [r8], #1
 801ce36:	d439      	bmi.n	801ceac <_dtoa_r+0x564>
 801ce38:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ce3c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce44:	d472      	bmi.n	801cf2c <_dtoa_r+0x5e4>
 801ce46:	45a0      	cmp	r8, r4
 801ce48:	f43f af6b 	beq.w	801cd22 <_dtoa_r+0x3da>
 801ce4c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ce50:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ce54:	e7e0      	b.n	801ce18 <_dtoa_r+0x4d0>
 801ce56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ce5e:	4621      	mov	r1, r4
 801ce60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ce64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ce68:	ee14 2a90 	vmov	r2, s9
 801ce6c:	3230      	adds	r2, #48	; 0x30
 801ce6e:	f808 2b01 	strb.w	r2, [r8], #1
 801ce72:	45a0      	cmp	r8, r4
 801ce74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ce78:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ce7c:	d118      	bne.n	801ceb0 <_dtoa_r+0x568>
 801ce7e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ce82:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ce86:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ce8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce8e:	dc4d      	bgt.n	801cf2c <_dtoa_r+0x5e4>
 801ce90:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ce94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce9c:	f57f af41 	bpl.w	801cd22 <_dtoa_r+0x3da>
 801cea0:	4688      	mov	r8, r1
 801cea2:	3901      	subs	r1, #1
 801cea4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801cea8:	2b30      	cmp	r3, #48	; 0x30
 801ceaa:	d0f9      	beq.n	801cea0 <_dtoa_r+0x558>
 801ceac:	46bb      	mov	fp, r7
 801ceae:	e02a      	b.n	801cf06 <_dtoa_r+0x5be>
 801ceb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ceb4:	e7d6      	b.n	801ce64 <_dtoa_r+0x51c>
 801ceb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ceba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801cebe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cec2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801cec6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801ceca:	ee15 3a10 	vmov	r3, s10
 801cece:	3330      	adds	r3, #48	; 0x30
 801ced0:	f808 3b01 	strb.w	r3, [r8], #1
 801ced4:	9b01      	ldr	r3, [sp, #4]
 801ced6:	eba8 0303 	sub.w	r3, r8, r3
 801ceda:	4599      	cmp	r9, r3
 801cedc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801cee0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801cee4:	d133      	bne.n	801cf4e <_dtoa_r+0x606>
 801cee6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ceea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ceee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cef2:	dc1a      	bgt.n	801cf2a <_dtoa_r+0x5e2>
 801cef4:	eeb4 7b46 	vcmp.f64	d7, d6
 801cef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cefc:	d103      	bne.n	801cf06 <_dtoa_r+0x5be>
 801cefe:	ee15 3a10 	vmov	r3, s10
 801cf02:	07d9      	lsls	r1, r3, #31
 801cf04:	d411      	bmi.n	801cf2a <_dtoa_r+0x5e2>
 801cf06:	4629      	mov	r1, r5
 801cf08:	4630      	mov	r0, r6
 801cf0a:	f000 fe6b 	bl	801dbe4 <_Bfree>
 801cf0e:	2300      	movs	r3, #0
 801cf10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf12:	f888 3000 	strb.w	r3, [r8]
 801cf16:	f10b 0301 	add.w	r3, fp, #1
 801cf1a:	6013      	str	r3, [r2, #0]
 801cf1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	f43f ad61 	beq.w	801c9e6 <_dtoa_r+0x9e>
 801cf24:	f8c3 8000 	str.w	r8, [r3]
 801cf28:	e55d      	b.n	801c9e6 <_dtoa_r+0x9e>
 801cf2a:	465f      	mov	r7, fp
 801cf2c:	4643      	mov	r3, r8
 801cf2e:	4698      	mov	r8, r3
 801cf30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cf34:	2a39      	cmp	r2, #57	; 0x39
 801cf36:	d106      	bne.n	801cf46 <_dtoa_r+0x5fe>
 801cf38:	9a01      	ldr	r2, [sp, #4]
 801cf3a:	429a      	cmp	r2, r3
 801cf3c:	d1f7      	bne.n	801cf2e <_dtoa_r+0x5e6>
 801cf3e:	9901      	ldr	r1, [sp, #4]
 801cf40:	2230      	movs	r2, #48	; 0x30
 801cf42:	3701      	adds	r7, #1
 801cf44:	700a      	strb	r2, [r1, #0]
 801cf46:	781a      	ldrb	r2, [r3, #0]
 801cf48:	3201      	adds	r2, #1
 801cf4a:	701a      	strb	r2, [r3, #0]
 801cf4c:	e7ae      	b.n	801ceac <_dtoa_r+0x564>
 801cf4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cf52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf5a:	d1b2      	bne.n	801cec2 <_dtoa_r+0x57a>
 801cf5c:	e7d3      	b.n	801cf06 <_dtoa_r+0x5be>
 801cf5e:	bf00      	nop
 801cf60:	080200b0 	.word	0x080200b0
 801cf64:	08020088 	.word	0x08020088
 801cf68:	9907      	ldr	r1, [sp, #28]
 801cf6a:	2900      	cmp	r1, #0
 801cf6c:	f000 80d0 	beq.w	801d110 <_dtoa_r+0x7c8>
 801cf70:	9906      	ldr	r1, [sp, #24]
 801cf72:	2901      	cmp	r1, #1
 801cf74:	f300 80b4 	bgt.w	801d0e0 <_dtoa_r+0x798>
 801cf78:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cf7a:	2900      	cmp	r1, #0
 801cf7c:	f000 80ac 	beq.w	801d0d8 <_dtoa_r+0x790>
 801cf80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cf84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cf88:	461c      	mov	r4, r3
 801cf8a:	930a      	str	r3, [sp, #40]	; 0x28
 801cf8c:	9b04      	ldr	r3, [sp, #16]
 801cf8e:	4413      	add	r3, r2
 801cf90:	9304      	str	r3, [sp, #16]
 801cf92:	9b05      	ldr	r3, [sp, #20]
 801cf94:	2101      	movs	r1, #1
 801cf96:	4413      	add	r3, r2
 801cf98:	4630      	mov	r0, r6
 801cf9a:	9305      	str	r3, [sp, #20]
 801cf9c:	f000 ff24 	bl	801dde8 <__i2b>
 801cfa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfa2:	4607      	mov	r7, r0
 801cfa4:	f1b8 0f00 	cmp.w	r8, #0
 801cfa8:	dd0d      	ble.n	801cfc6 <_dtoa_r+0x67e>
 801cfaa:	9a05      	ldr	r2, [sp, #20]
 801cfac:	2a00      	cmp	r2, #0
 801cfae:	dd0a      	ble.n	801cfc6 <_dtoa_r+0x67e>
 801cfb0:	4542      	cmp	r2, r8
 801cfb2:	9904      	ldr	r1, [sp, #16]
 801cfb4:	bfa8      	it	ge
 801cfb6:	4642      	movge	r2, r8
 801cfb8:	1a89      	subs	r1, r1, r2
 801cfba:	9104      	str	r1, [sp, #16]
 801cfbc:	9905      	ldr	r1, [sp, #20]
 801cfbe:	eba8 0802 	sub.w	r8, r8, r2
 801cfc2:	1a8a      	subs	r2, r1, r2
 801cfc4:	9205      	str	r2, [sp, #20]
 801cfc6:	b303      	cbz	r3, 801d00a <_dtoa_r+0x6c2>
 801cfc8:	9a07      	ldr	r2, [sp, #28]
 801cfca:	2a00      	cmp	r2, #0
 801cfcc:	f000 80a5 	beq.w	801d11a <_dtoa_r+0x7d2>
 801cfd0:	2c00      	cmp	r4, #0
 801cfd2:	dd13      	ble.n	801cffc <_dtoa_r+0x6b4>
 801cfd4:	4639      	mov	r1, r7
 801cfd6:	4622      	mov	r2, r4
 801cfd8:	4630      	mov	r0, r6
 801cfda:	930d      	str	r3, [sp, #52]	; 0x34
 801cfdc:	f000 ffc4 	bl	801df68 <__pow5mult>
 801cfe0:	462a      	mov	r2, r5
 801cfe2:	4601      	mov	r1, r0
 801cfe4:	4607      	mov	r7, r0
 801cfe6:	4630      	mov	r0, r6
 801cfe8:	f000 ff14 	bl	801de14 <__multiply>
 801cfec:	4629      	mov	r1, r5
 801cfee:	900a      	str	r0, [sp, #40]	; 0x28
 801cff0:	4630      	mov	r0, r6
 801cff2:	f000 fdf7 	bl	801dbe4 <_Bfree>
 801cff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cffa:	4615      	mov	r5, r2
 801cffc:	1b1a      	subs	r2, r3, r4
 801cffe:	d004      	beq.n	801d00a <_dtoa_r+0x6c2>
 801d000:	4629      	mov	r1, r5
 801d002:	4630      	mov	r0, r6
 801d004:	f000 ffb0 	bl	801df68 <__pow5mult>
 801d008:	4605      	mov	r5, r0
 801d00a:	2101      	movs	r1, #1
 801d00c:	4630      	mov	r0, r6
 801d00e:	f000 feeb 	bl	801dde8 <__i2b>
 801d012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d014:	2b00      	cmp	r3, #0
 801d016:	4604      	mov	r4, r0
 801d018:	f340 8081 	ble.w	801d11e <_dtoa_r+0x7d6>
 801d01c:	461a      	mov	r2, r3
 801d01e:	4601      	mov	r1, r0
 801d020:	4630      	mov	r0, r6
 801d022:	f000 ffa1 	bl	801df68 <__pow5mult>
 801d026:	9b06      	ldr	r3, [sp, #24]
 801d028:	2b01      	cmp	r3, #1
 801d02a:	4604      	mov	r4, r0
 801d02c:	dd7a      	ble.n	801d124 <_dtoa_r+0x7dc>
 801d02e:	2300      	movs	r3, #0
 801d030:	930a      	str	r3, [sp, #40]	; 0x28
 801d032:	6922      	ldr	r2, [r4, #16]
 801d034:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d038:	6910      	ldr	r0, [r2, #16]
 801d03a:	f000 fe85 	bl	801dd48 <__hi0bits>
 801d03e:	f1c0 0020 	rsb	r0, r0, #32
 801d042:	9b05      	ldr	r3, [sp, #20]
 801d044:	4418      	add	r0, r3
 801d046:	f010 001f 	ands.w	r0, r0, #31
 801d04a:	f000 808c 	beq.w	801d166 <_dtoa_r+0x81e>
 801d04e:	f1c0 0220 	rsb	r2, r0, #32
 801d052:	2a04      	cmp	r2, #4
 801d054:	f340 8085 	ble.w	801d162 <_dtoa_r+0x81a>
 801d058:	f1c0 001c 	rsb	r0, r0, #28
 801d05c:	9b04      	ldr	r3, [sp, #16]
 801d05e:	4403      	add	r3, r0
 801d060:	9304      	str	r3, [sp, #16]
 801d062:	9b05      	ldr	r3, [sp, #20]
 801d064:	4403      	add	r3, r0
 801d066:	4480      	add	r8, r0
 801d068:	9305      	str	r3, [sp, #20]
 801d06a:	9b04      	ldr	r3, [sp, #16]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	dd05      	ble.n	801d07c <_dtoa_r+0x734>
 801d070:	4629      	mov	r1, r5
 801d072:	461a      	mov	r2, r3
 801d074:	4630      	mov	r0, r6
 801d076:	f000 ffd1 	bl	801e01c <__lshift>
 801d07a:	4605      	mov	r5, r0
 801d07c:	9b05      	ldr	r3, [sp, #20]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	dd05      	ble.n	801d08e <_dtoa_r+0x746>
 801d082:	4621      	mov	r1, r4
 801d084:	461a      	mov	r2, r3
 801d086:	4630      	mov	r0, r6
 801d088:	f000 ffc8 	bl	801e01c <__lshift>
 801d08c:	4604      	mov	r4, r0
 801d08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d090:	2b00      	cmp	r3, #0
 801d092:	d06a      	beq.n	801d16a <_dtoa_r+0x822>
 801d094:	4621      	mov	r1, r4
 801d096:	4628      	mov	r0, r5
 801d098:	f001 f830 	bl	801e0fc <__mcmp>
 801d09c:	2800      	cmp	r0, #0
 801d09e:	da64      	bge.n	801d16a <_dtoa_r+0x822>
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	4629      	mov	r1, r5
 801d0a4:	220a      	movs	r2, #10
 801d0a6:	4630      	mov	r0, r6
 801d0a8:	f000 fdbe 	bl	801dc28 <__multadd>
 801d0ac:	9b07      	ldr	r3, [sp, #28]
 801d0ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d0b2:	4605      	mov	r5, r0
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	f000 8191 	beq.w	801d3dc <_dtoa_r+0xa94>
 801d0ba:	4639      	mov	r1, r7
 801d0bc:	2300      	movs	r3, #0
 801d0be:	220a      	movs	r2, #10
 801d0c0:	4630      	mov	r0, r6
 801d0c2:	f000 fdb1 	bl	801dc28 <__multadd>
 801d0c6:	f1ba 0f00 	cmp.w	sl, #0
 801d0ca:	4607      	mov	r7, r0
 801d0cc:	f300 808d 	bgt.w	801d1ea <_dtoa_r+0x8a2>
 801d0d0:	9b06      	ldr	r3, [sp, #24]
 801d0d2:	2b02      	cmp	r3, #2
 801d0d4:	dc50      	bgt.n	801d178 <_dtoa_r+0x830>
 801d0d6:	e088      	b.n	801d1ea <_dtoa_r+0x8a2>
 801d0d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d0da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d0de:	e751      	b.n	801cf84 <_dtoa_r+0x63c>
 801d0e0:	f109 34ff 	add.w	r4, r9, #4294967295
 801d0e4:	42a3      	cmp	r3, r4
 801d0e6:	bfbf      	itttt	lt
 801d0e8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801d0ea:	1ae3      	sublt	r3, r4, r3
 801d0ec:	18d2      	addlt	r2, r2, r3
 801d0ee:	9209      	strlt	r2, [sp, #36]	; 0x24
 801d0f0:	bfb6      	itet	lt
 801d0f2:	4623      	movlt	r3, r4
 801d0f4:	1b1c      	subge	r4, r3, r4
 801d0f6:	2400      	movlt	r4, #0
 801d0f8:	f1b9 0f00 	cmp.w	r9, #0
 801d0fc:	bfb5      	itete	lt
 801d0fe:	9a04      	ldrlt	r2, [sp, #16]
 801d100:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801d104:	eba2 0809 	sublt.w	r8, r2, r9
 801d108:	464a      	movge	r2, r9
 801d10a:	bfb8      	it	lt
 801d10c:	2200      	movlt	r2, #0
 801d10e:	e73c      	b.n	801cf8a <_dtoa_r+0x642>
 801d110:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d114:	9f07      	ldr	r7, [sp, #28]
 801d116:	461c      	mov	r4, r3
 801d118:	e744      	b.n	801cfa4 <_dtoa_r+0x65c>
 801d11a:	461a      	mov	r2, r3
 801d11c:	e770      	b.n	801d000 <_dtoa_r+0x6b8>
 801d11e:	9b06      	ldr	r3, [sp, #24]
 801d120:	2b01      	cmp	r3, #1
 801d122:	dc18      	bgt.n	801d156 <_dtoa_r+0x80e>
 801d124:	9b02      	ldr	r3, [sp, #8]
 801d126:	b9b3      	cbnz	r3, 801d156 <_dtoa_r+0x80e>
 801d128:	9b03      	ldr	r3, [sp, #12]
 801d12a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d12e:	b9a2      	cbnz	r2, 801d15a <_dtoa_r+0x812>
 801d130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d134:	0d12      	lsrs	r2, r2, #20
 801d136:	0512      	lsls	r2, r2, #20
 801d138:	b18a      	cbz	r2, 801d15e <_dtoa_r+0x816>
 801d13a:	9b04      	ldr	r3, [sp, #16]
 801d13c:	3301      	adds	r3, #1
 801d13e:	9304      	str	r3, [sp, #16]
 801d140:	9b05      	ldr	r3, [sp, #20]
 801d142:	3301      	adds	r3, #1
 801d144:	9305      	str	r3, [sp, #20]
 801d146:	2301      	movs	r3, #1
 801d148:	930a      	str	r3, [sp, #40]	; 0x28
 801d14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	f47f af70 	bne.w	801d032 <_dtoa_r+0x6ea>
 801d152:	2001      	movs	r0, #1
 801d154:	e775      	b.n	801d042 <_dtoa_r+0x6fa>
 801d156:	2300      	movs	r3, #0
 801d158:	e7f6      	b.n	801d148 <_dtoa_r+0x800>
 801d15a:	9b02      	ldr	r3, [sp, #8]
 801d15c:	e7f4      	b.n	801d148 <_dtoa_r+0x800>
 801d15e:	920a      	str	r2, [sp, #40]	; 0x28
 801d160:	e7f3      	b.n	801d14a <_dtoa_r+0x802>
 801d162:	d082      	beq.n	801d06a <_dtoa_r+0x722>
 801d164:	4610      	mov	r0, r2
 801d166:	301c      	adds	r0, #28
 801d168:	e778      	b.n	801d05c <_dtoa_r+0x714>
 801d16a:	f1b9 0f00 	cmp.w	r9, #0
 801d16e:	dc37      	bgt.n	801d1e0 <_dtoa_r+0x898>
 801d170:	9b06      	ldr	r3, [sp, #24]
 801d172:	2b02      	cmp	r3, #2
 801d174:	dd34      	ble.n	801d1e0 <_dtoa_r+0x898>
 801d176:	46ca      	mov	sl, r9
 801d178:	f1ba 0f00 	cmp.w	sl, #0
 801d17c:	d10d      	bne.n	801d19a <_dtoa_r+0x852>
 801d17e:	4621      	mov	r1, r4
 801d180:	4653      	mov	r3, sl
 801d182:	2205      	movs	r2, #5
 801d184:	4630      	mov	r0, r6
 801d186:	f000 fd4f 	bl	801dc28 <__multadd>
 801d18a:	4601      	mov	r1, r0
 801d18c:	4604      	mov	r4, r0
 801d18e:	4628      	mov	r0, r5
 801d190:	f000 ffb4 	bl	801e0fc <__mcmp>
 801d194:	2800      	cmp	r0, #0
 801d196:	f73f adeb 	bgt.w	801cd70 <_dtoa_r+0x428>
 801d19a:	9b08      	ldr	r3, [sp, #32]
 801d19c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d1a0:	ea6f 0b03 	mvn.w	fp, r3
 801d1a4:	f04f 0900 	mov.w	r9, #0
 801d1a8:	4621      	mov	r1, r4
 801d1aa:	4630      	mov	r0, r6
 801d1ac:	f000 fd1a 	bl	801dbe4 <_Bfree>
 801d1b0:	2f00      	cmp	r7, #0
 801d1b2:	f43f aea8 	beq.w	801cf06 <_dtoa_r+0x5be>
 801d1b6:	f1b9 0f00 	cmp.w	r9, #0
 801d1ba:	d005      	beq.n	801d1c8 <_dtoa_r+0x880>
 801d1bc:	45b9      	cmp	r9, r7
 801d1be:	d003      	beq.n	801d1c8 <_dtoa_r+0x880>
 801d1c0:	4649      	mov	r1, r9
 801d1c2:	4630      	mov	r0, r6
 801d1c4:	f000 fd0e 	bl	801dbe4 <_Bfree>
 801d1c8:	4639      	mov	r1, r7
 801d1ca:	4630      	mov	r0, r6
 801d1cc:	f000 fd0a 	bl	801dbe4 <_Bfree>
 801d1d0:	e699      	b.n	801cf06 <_dtoa_r+0x5be>
 801d1d2:	2400      	movs	r4, #0
 801d1d4:	4627      	mov	r7, r4
 801d1d6:	e7e0      	b.n	801d19a <_dtoa_r+0x852>
 801d1d8:	46bb      	mov	fp, r7
 801d1da:	4604      	mov	r4, r0
 801d1dc:	4607      	mov	r7, r0
 801d1de:	e5c7      	b.n	801cd70 <_dtoa_r+0x428>
 801d1e0:	9b07      	ldr	r3, [sp, #28]
 801d1e2:	46ca      	mov	sl, r9
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	f000 8100 	beq.w	801d3ea <_dtoa_r+0xaa2>
 801d1ea:	f1b8 0f00 	cmp.w	r8, #0
 801d1ee:	dd05      	ble.n	801d1fc <_dtoa_r+0x8b4>
 801d1f0:	4639      	mov	r1, r7
 801d1f2:	4642      	mov	r2, r8
 801d1f4:	4630      	mov	r0, r6
 801d1f6:	f000 ff11 	bl	801e01c <__lshift>
 801d1fa:	4607      	mov	r7, r0
 801d1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d05d      	beq.n	801d2be <_dtoa_r+0x976>
 801d202:	6879      	ldr	r1, [r7, #4]
 801d204:	4630      	mov	r0, r6
 801d206:	f000 fcad 	bl	801db64 <_Balloc>
 801d20a:	4680      	mov	r8, r0
 801d20c:	b928      	cbnz	r0, 801d21a <_dtoa_r+0x8d2>
 801d20e:	4b82      	ldr	r3, [pc, #520]	; (801d418 <_dtoa_r+0xad0>)
 801d210:	4602      	mov	r2, r0
 801d212:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d216:	f7ff bbaf 	b.w	801c978 <_dtoa_r+0x30>
 801d21a:	693a      	ldr	r2, [r7, #16]
 801d21c:	3202      	adds	r2, #2
 801d21e:	0092      	lsls	r2, r2, #2
 801d220:	f107 010c 	add.w	r1, r7, #12
 801d224:	300c      	adds	r0, #12
 801d226:	f7fd fda5 	bl	801ad74 <memcpy>
 801d22a:	2201      	movs	r2, #1
 801d22c:	4641      	mov	r1, r8
 801d22e:	4630      	mov	r0, r6
 801d230:	f000 fef4 	bl	801e01c <__lshift>
 801d234:	9b01      	ldr	r3, [sp, #4]
 801d236:	3301      	adds	r3, #1
 801d238:	9304      	str	r3, [sp, #16]
 801d23a:	9b01      	ldr	r3, [sp, #4]
 801d23c:	4453      	add	r3, sl
 801d23e:	9308      	str	r3, [sp, #32]
 801d240:	9b02      	ldr	r3, [sp, #8]
 801d242:	f003 0301 	and.w	r3, r3, #1
 801d246:	46b9      	mov	r9, r7
 801d248:	9307      	str	r3, [sp, #28]
 801d24a:	4607      	mov	r7, r0
 801d24c:	9b04      	ldr	r3, [sp, #16]
 801d24e:	4621      	mov	r1, r4
 801d250:	3b01      	subs	r3, #1
 801d252:	4628      	mov	r0, r5
 801d254:	9302      	str	r3, [sp, #8]
 801d256:	f7ff fae9 	bl	801c82c <quorem>
 801d25a:	4603      	mov	r3, r0
 801d25c:	3330      	adds	r3, #48	; 0x30
 801d25e:	9005      	str	r0, [sp, #20]
 801d260:	4649      	mov	r1, r9
 801d262:	4628      	mov	r0, r5
 801d264:	9309      	str	r3, [sp, #36]	; 0x24
 801d266:	f000 ff49 	bl	801e0fc <__mcmp>
 801d26a:	463a      	mov	r2, r7
 801d26c:	4682      	mov	sl, r0
 801d26e:	4621      	mov	r1, r4
 801d270:	4630      	mov	r0, r6
 801d272:	f000 ff5f 	bl	801e134 <__mdiff>
 801d276:	68c2      	ldr	r2, [r0, #12]
 801d278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d27a:	4680      	mov	r8, r0
 801d27c:	bb0a      	cbnz	r2, 801d2c2 <_dtoa_r+0x97a>
 801d27e:	4601      	mov	r1, r0
 801d280:	4628      	mov	r0, r5
 801d282:	f000 ff3b 	bl	801e0fc <__mcmp>
 801d286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d288:	4602      	mov	r2, r0
 801d28a:	4641      	mov	r1, r8
 801d28c:	4630      	mov	r0, r6
 801d28e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801d292:	f000 fca7 	bl	801dbe4 <_Bfree>
 801d296:	9b06      	ldr	r3, [sp, #24]
 801d298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d29a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d29e:	ea43 0102 	orr.w	r1, r3, r2
 801d2a2:	9b07      	ldr	r3, [sp, #28]
 801d2a4:	430b      	orrs	r3, r1
 801d2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2a8:	d10d      	bne.n	801d2c6 <_dtoa_r+0x97e>
 801d2aa:	2b39      	cmp	r3, #57	; 0x39
 801d2ac:	d029      	beq.n	801d302 <_dtoa_r+0x9ba>
 801d2ae:	f1ba 0f00 	cmp.w	sl, #0
 801d2b2:	dd01      	ble.n	801d2b8 <_dtoa_r+0x970>
 801d2b4:	9b05      	ldr	r3, [sp, #20]
 801d2b6:	3331      	adds	r3, #49	; 0x31
 801d2b8:	9a02      	ldr	r2, [sp, #8]
 801d2ba:	7013      	strb	r3, [r2, #0]
 801d2bc:	e774      	b.n	801d1a8 <_dtoa_r+0x860>
 801d2be:	4638      	mov	r0, r7
 801d2c0:	e7b8      	b.n	801d234 <_dtoa_r+0x8ec>
 801d2c2:	2201      	movs	r2, #1
 801d2c4:	e7e1      	b.n	801d28a <_dtoa_r+0x942>
 801d2c6:	f1ba 0f00 	cmp.w	sl, #0
 801d2ca:	db06      	blt.n	801d2da <_dtoa_r+0x992>
 801d2cc:	9906      	ldr	r1, [sp, #24]
 801d2ce:	ea41 0a0a 	orr.w	sl, r1, sl
 801d2d2:	9907      	ldr	r1, [sp, #28]
 801d2d4:	ea5a 0101 	orrs.w	r1, sl, r1
 801d2d8:	d120      	bne.n	801d31c <_dtoa_r+0x9d4>
 801d2da:	2a00      	cmp	r2, #0
 801d2dc:	ddec      	ble.n	801d2b8 <_dtoa_r+0x970>
 801d2de:	4629      	mov	r1, r5
 801d2e0:	2201      	movs	r2, #1
 801d2e2:	4630      	mov	r0, r6
 801d2e4:	9304      	str	r3, [sp, #16]
 801d2e6:	f000 fe99 	bl	801e01c <__lshift>
 801d2ea:	4621      	mov	r1, r4
 801d2ec:	4605      	mov	r5, r0
 801d2ee:	f000 ff05 	bl	801e0fc <__mcmp>
 801d2f2:	2800      	cmp	r0, #0
 801d2f4:	9b04      	ldr	r3, [sp, #16]
 801d2f6:	dc02      	bgt.n	801d2fe <_dtoa_r+0x9b6>
 801d2f8:	d1de      	bne.n	801d2b8 <_dtoa_r+0x970>
 801d2fa:	07da      	lsls	r2, r3, #31
 801d2fc:	d5dc      	bpl.n	801d2b8 <_dtoa_r+0x970>
 801d2fe:	2b39      	cmp	r3, #57	; 0x39
 801d300:	d1d8      	bne.n	801d2b4 <_dtoa_r+0x96c>
 801d302:	9a02      	ldr	r2, [sp, #8]
 801d304:	2339      	movs	r3, #57	; 0x39
 801d306:	7013      	strb	r3, [r2, #0]
 801d308:	4643      	mov	r3, r8
 801d30a:	4698      	mov	r8, r3
 801d30c:	3b01      	subs	r3, #1
 801d30e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d312:	2a39      	cmp	r2, #57	; 0x39
 801d314:	d051      	beq.n	801d3ba <_dtoa_r+0xa72>
 801d316:	3201      	adds	r2, #1
 801d318:	701a      	strb	r2, [r3, #0]
 801d31a:	e745      	b.n	801d1a8 <_dtoa_r+0x860>
 801d31c:	2a00      	cmp	r2, #0
 801d31e:	dd03      	ble.n	801d328 <_dtoa_r+0x9e0>
 801d320:	2b39      	cmp	r3, #57	; 0x39
 801d322:	d0ee      	beq.n	801d302 <_dtoa_r+0x9ba>
 801d324:	3301      	adds	r3, #1
 801d326:	e7c7      	b.n	801d2b8 <_dtoa_r+0x970>
 801d328:	9a04      	ldr	r2, [sp, #16]
 801d32a:	9908      	ldr	r1, [sp, #32]
 801d32c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d330:	428a      	cmp	r2, r1
 801d332:	d02b      	beq.n	801d38c <_dtoa_r+0xa44>
 801d334:	4629      	mov	r1, r5
 801d336:	2300      	movs	r3, #0
 801d338:	220a      	movs	r2, #10
 801d33a:	4630      	mov	r0, r6
 801d33c:	f000 fc74 	bl	801dc28 <__multadd>
 801d340:	45b9      	cmp	r9, r7
 801d342:	4605      	mov	r5, r0
 801d344:	f04f 0300 	mov.w	r3, #0
 801d348:	f04f 020a 	mov.w	r2, #10
 801d34c:	4649      	mov	r1, r9
 801d34e:	4630      	mov	r0, r6
 801d350:	d107      	bne.n	801d362 <_dtoa_r+0xa1a>
 801d352:	f000 fc69 	bl	801dc28 <__multadd>
 801d356:	4681      	mov	r9, r0
 801d358:	4607      	mov	r7, r0
 801d35a:	9b04      	ldr	r3, [sp, #16]
 801d35c:	3301      	adds	r3, #1
 801d35e:	9304      	str	r3, [sp, #16]
 801d360:	e774      	b.n	801d24c <_dtoa_r+0x904>
 801d362:	f000 fc61 	bl	801dc28 <__multadd>
 801d366:	4639      	mov	r1, r7
 801d368:	4681      	mov	r9, r0
 801d36a:	2300      	movs	r3, #0
 801d36c:	220a      	movs	r2, #10
 801d36e:	4630      	mov	r0, r6
 801d370:	f000 fc5a 	bl	801dc28 <__multadd>
 801d374:	4607      	mov	r7, r0
 801d376:	e7f0      	b.n	801d35a <_dtoa_r+0xa12>
 801d378:	f1ba 0f00 	cmp.w	sl, #0
 801d37c:	9a01      	ldr	r2, [sp, #4]
 801d37e:	bfcc      	ite	gt
 801d380:	46d0      	movgt	r8, sl
 801d382:	f04f 0801 	movle.w	r8, #1
 801d386:	4490      	add	r8, r2
 801d388:	f04f 0900 	mov.w	r9, #0
 801d38c:	4629      	mov	r1, r5
 801d38e:	2201      	movs	r2, #1
 801d390:	4630      	mov	r0, r6
 801d392:	9302      	str	r3, [sp, #8]
 801d394:	f000 fe42 	bl	801e01c <__lshift>
 801d398:	4621      	mov	r1, r4
 801d39a:	4605      	mov	r5, r0
 801d39c:	f000 feae 	bl	801e0fc <__mcmp>
 801d3a0:	2800      	cmp	r0, #0
 801d3a2:	dcb1      	bgt.n	801d308 <_dtoa_r+0x9c0>
 801d3a4:	d102      	bne.n	801d3ac <_dtoa_r+0xa64>
 801d3a6:	9b02      	ldr	r3, [sp, #8]
 801d3a8:	07db      	lsls	r3, r3, #31
 801d3aa:	d4ad      	bmi.n	801d308 <_dtoa_r+0x9c0>
 801d3ac:	4643      	mov	r3, r8
 801d3ae:	4698      	mov	r8, r3
 801d3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d3b4:	2a30      	cmp	r2, #48	; 0x30
 801d3b6:	d0fa      	beq.n	801d3ae <_dtoa_r+0xa66>
 801d3b8:	e6f6      	b.n	801d1a8 <_dtoa_r+0x860>
 801d3ba:	9a01      	ldr	r2, [sp, #4]
 801d3bc:	429a      	cmp	r2, r3
 801d3be:	d1a4      	bne.n	801d30a <_dtoa_r+0x9c2>
 801d3c0:	f10b 0b01 	add.w	fp, fp, #1
 801d3c4:	2331      	movs	r3, #49	; 0x31
 801d3c6:	e778      	b.n	801d2ba <_dtoa_r+0x972>
 801d3c8:	4b14      	ldr	r3, [pc, #80]	; (801d41c <_dtoa_r+0xad4>)
 801d3ca:	f7ff bb27 	b.w	801ca1c <_dtoa_r+0xd4>
 801d3ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	f47f ab03 	bne.w	801c9dc <_dtoa_r+0x94>
 801d3d6:	4b12      	ldr	r3, [pc, #72]	; (801d420 <_dtoa_r+0xad8>)
 801d3d8:	f7ff bb20 	b.w	801ca1c <_dtoa_r+0xd4>
 801d3dc:	f1ba 0f00 	cmp.w	sl, #0
 801d3e0:	dc03      	bgt.n	801d3ea <_dtoa_r+0xaa2>
 801d3e2:	9b06      	ldr	r3, [sp, #24]
 801d3e4:	2b02      	cmp	r3, #2
 801d3e6:	f73f aec7 	bgt.w	801d178 <_dtoa_r+0x830>
 801d3ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d3ee:	4621      	mov	r1, r4
 801d3f0:	4628      	mov	r0, r5
 801d3f2:	f7ff fa1b 	bl	801c82c <quorem>
 801d3f6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d3fa:	f808 3b01 	strb.w	r3, [r8], #1
 801d3fe:	9a01      	ldr	r2, [sp, #4]
 801d400:	eba8 0202 	sub.w	r2, r8, r2
 801d404:	4592      	cmp	sl, r2
 801d406:	ddb7      	ble.n	801d378 <_dtoa_r+0xa30>
 801d408:	4629      	mov	r1, r5
 801d40a:	2300      	movs	r3, #0
 801d40c:	220a      	movs	r2, #10
 801d40e:	4630      	mov	r0, r6
 801d410:	f000 fc0a 	bl	801dc28 <__multadd>
 801d414:	4605      	mov	r5, r0
 801d416:	e7ea      	b.n	801d3ee <_dtoa_r+0xaa6>
 801d418:	0801ffa0 	.word	0x0801ffa0
 801d41c:	0801fda4 	.word	0x0801fda4
 801d420:	0801ff21 	.word	0x0801ff21

0801d424 <rshift>:
 801d424:	6903      	ldr	r3, [r0, #16]
 801d426:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d42a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d42e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d432:	f100 0414 	add.w	r4, r0, #20
 801d436:	dd45      	ble.n	801d4c4 <rshift+0xa0>
 801d438:	f011 011f 	ands.w	r1, r1, #31
 801d43c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d440:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d444:	d10c      	bne.n	801d460 <rshift+0x3c>
 801d446:	f100 0710 	add.w	r7, r0, #16
 801d44a:	4629      	mov	r1, r5
 801d44c:	42b1      	cmp	r1, r6
 801d44e:	d334      	bcc.n	801d4ba <rshift+0x96>
 801d450:	1a9b      	subs	r3, r3, r2
 801d452:	009b      	lsls	r3, r3, #2
 801d454:	1eea      	subs	r2, r5, #3
 801d456:	4296      	cmp	r6, r2
 801d458:	bf38      	it	cc
 801d45a:	2300      	movcc	r3, #0
 801d45c:	4423      	add	r3, r4
 801d45e:	e015      	b.n	801d48c <rshift+0x68>
 801d460:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d464:	f1c1 0820 	rsb	r8, r1, #32
 801d468:	40cf      	lsrs	r7, r1
 801d46a:	f105 0e04 	add.w	lr, r5, #4
 801d46e:	46a1      	mov	r9, r4
 801d470:	4576      	cmp	r6, lr
 801d472:	46f4      	mov	ip, lr
 801d474:	d815      	bhi.n	801d4a2 <rshift+0x7e>
 801d476:	1a9a      	subs	r2, r3, r2
 801d478:	0092      	lsls	r2, r2, #2
 801d47a:	3a04      	subs	r2, #4
 801d47c:	3501      	adds	r5, #1
 801d47e:	42ae      	cmp	r6, r5
 801d480:	bf38      	it	cc
 801d482:	2200      	movcc	r2, #0
 801d484:	18a3      	adds	r3, r4, r2
 801d486:	50a7      	str	r7, [r4, r2]
 801d488:	b107      	cbz	r7, 801d48c <rshift+0x68>
 801d48a:	3304      	adds	r3, #4
 801d48c:	1b1a      	subs	r2, r3, r4
 801d48e:	42a3      	cmp	r3, r4
 801d490:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d494:	bf08      	it	eq
 801d496:	2300      	moveq	r3, #0
 801d498:	6102      	str	r2, [r0, #16]
 801d49a:	bf08      	it	eq
 801d49c:	6143      	streq	r3, [r0, #20]
 801d49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4a2:	f8dc c000 	ldr.w	ip, [ip]
 801d4a6:	fa0c fc08 	lsl.w	ip, ip, r8
 801d4aa:	ea4c 0707 	orr.w	r7, ip, r7
 801d4ae:	f849 7b04 	str.w	r7, [r9], #4
 801d4b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d4b6:	40cf      	lsrs	r7, r1
 801d4b8:	e7da      	b.n	801d470 <rshift+0x4c>
 801d4ba:	f851 cb04 	ldr.w	ip, [r1], #4
 801d4be:	f847 cf04 	str.w	ip, [r7, #4]!
 801d4c2:	e7c3      	b.n	801d44c <rshift+0x28>
 801d4c4:	4623      	mov	r3, r4
 801d4c6:	e7e1      	b.n	801d48c <rshift+0x68>

0801d4c8 <__hexdig_fun>:
 801d4c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d4cc:	2b09      	cmp	r3, #9
 801d4ce:	d802      	bhi.n	801d4d6 <__hexdig_fun+0xe>
 801d4d0:	3820      	subs	r0, #32
 801d4d2:	b2c0      	uxtb	r0, r0
 801d4d4:	4770      	bx	lr
 801d4d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d4da:	2b05      	cmp	r3, #5
 801d4dc:	d801      	bhi.n	801d4e2 <__hexdig_fun+0x1a>
 801d4de:	3847      	subs	r0, #71	; 0x47
 801d4e0:	e7f7      	b.n	801d4d2 <__hexdig_fun+0xa>
 801d4e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d4e6:	2b05      	cmp	r3, #5
 801d4e8:	d801      	bhi.n	801d4ee <__hexdig_fun+0x26>
 801d4ea:	3827      	subs	r0, #39	; 0x27
 801d4ec:	e7f1      	b.n	801d4d2 <__hexdig_fun+0xa>
 801d4ee:	2000      	movs	r0, #0
 801d4f0:	4770      	bx	lr
	...

0801d4f4 <__gethex>:
 801d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4f8:	ed2d 8b02 	vpush	{d8}
 801d4fc:	b089      	sub	sp, #36	; 0x24
 801d4fe:	ee08 0a10 	vmov	s16, r0
 801d502:	9304      	str	r3, [sp, #16]
 801d504:	4bb4      	ldr	r3, [pc, #720]	; (801d7d8 <__gethex+0x2e4>)
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	9301      	str	r3, [sp, #4]
 801d50a:	4618      	mov	r0, r3
 801d50c:	468b      	mov	fp, r1
 801d50e:	4690      	mov	r8, r2
 801d510:	f7e2 ff08 	bl	8000324 <strlen>
 801d514:	9b01      	ldr	r3, [sp, #4]
 801d516:	f8db 2000 	ldr.w	r2, [fp]
 801d51a:	4403      	add	r3, r0
 801d51c:	4682      	mov	sl, r0
 801d51e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d522:	9305      	str	r3, [sp, #20]
 801d524:	1c93      	adds	r3, r2, #2
 801d526:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d52a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d52e:	32fe      	adds	r2, #254	; 0xfe
 801d530:	18d1      	adds	r1, r2, r3
 801d532:	461f      	mov	r7, r3
 801d534:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d538:	9100      	str	r1, [sp, #0]
 801d53a:	2830      	cmp	r0, #48	; 0x30
 801d53c:	d0f8      	beq.n	801d530 <__gethex+0x3c>
 801d53e:	f7ff ffc3 	bl	801d4c8 <__hexdig_fun>
 801d542:	4604      	mov	r4, r0
 801d544:	2800      	cmp	r0, #0
 801d546:	d13a      	bne.n	801d5be <__gethex+0xca>
 801d548:	9901      	ldr	r1, [sp, #4]
 801d54a:	4652      	mov	r2, sl
 801d54c:	4638      	mov	r0, r7
 801d54e:	f001 fa43 	bl	801e9d8 <strncmp>
 801d552:	4605      	mov	r5, r0
 801d554:	2800      	cmp	r0, #0
 801d556:	d168      	bne.n	801d62a <__gethex+0x136>
 801d558:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d55c:	eb07 060a 	add.w	r6, r7, sl
 801d560:	f7ff ffb2 	bl	801d4c8 <__hexdig_fun>
 801d564:	2800      	cmp	r0, #0
 801d566:	d062      	beq.n	801d62e <__gethex+0x13a>
 801d568:	4633      	mov	r3, r6
 801d56a:	7818      	ldrb	r0, [r3, #0]
 801d56c:	2830      	cmp	r0, #48	; 0x30
 801d56e:	461f      	mov	r7, r3
 801d570:	f103 0301 	add.w	r3, r3, #1
 801d574:	d0f9      	beq.n	801d56a <__gethex+0x76>
 801d576:	f7ff ffa7 	bl	801d4c8 <__hexdig_fun>
 801d57a:	2301      	movs	r3, #1
 801d57c:	fab0 f480 	clz	r4, r0
 801d580:	0964      	lsrs	r4, r4, #5
 801d582:	4635      	mov	r5, r6
 801d584:	9300      	str	r3, [sp, #0]
 801d586:	463a      	mov	r2, r7
 801d588:	4616      	mov	r6, r2
 801d58a:	3201      	adds	r2, #1
 801d58c:	7830      	ldrb	r0, [r6, #0]
 801d58e:	f7ff ff9b 	bl	801d4c8 <__hexdig_fun>
 801d592:	2800      	cmp	r0, #0
 801d594:	d1f8      	bne.n	801d588 <__gethex+0x94>
 801d596:	9901      	ldr	r1, [sp, #4]
 801d598:	4652      	mov	r2, sl
 801d59a:	4630      	mov	r0, r6
 801d59c:	f001 fa1c 	bl	801e9d8 <strncmp>
 801d5a0:	b980      	cbnz	r0, 801d5c4 <__gethex+0xd0>
 801d5a2:	b94d      	cbnz	r5, 801d5b8 <__gethex+0xc4>
 801d5a4:	eb06 050a 	add.w	r5, r6, sl
 801d5a8:	462a      	mov	r2, r5
 801d5aa:	4616      	mov	r6, r2
 801d5ac:	3201      	adds	r2, #1
 801d5ae:	7830      	ldrb	r0, [r6, #0]
 801d5b0:	f7ff ff8a 	bl	801d4c8 <__hexdig_fun>
 801d5b4:	2800      	cmp	r0, #0
 801d5b6:	d1f8      	bne.n	801d5aa <__gethex+0xb6>
 801d5b8:	1bad      	subs	r5, r5, r6
 801d5ba:	00ad      	lsls	r5, r5, #2
 801d5bc:	e004      	b.n	801d5c8 <__gethex+0xd4>
 801d5be:	2400      	movs	r4, #0
 801d5c0:	4625      	mov	r5, r4
 801d5c2:	e7e0      	b.n	801d586 <__gethex+0x92>
 801d5c4:	2d00      	cmp	r5, #0
 801d5c6:	d1f7      	bne.n	801d5b8 <__gethex+0xc4>
 801d5c8:	7833      	ldrb	r3, [r6, #0]
 801d5ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d5ce:	2b50      	cmp	r3, #80	; 0x50
 801d5d0:	d13b      	bne.n	801d64a <__gethex+0x156>
 801d5d2:	7873      	ldrb	r3, [r6, #1]
 801d5d4:	2b2b      	cmp	r3, #43	; 0x2b
 801d5d6:	d02c      	beq.n	801d632 <__gethex+0x13e>
 801d5d8:	2b2d      	cmp	r3, #45	; 0x2d
 801d5da:	d02e      	beq.n	801d63a <__gethex+0x146>
 801d5dc:	1c71      	adds	r1, r6, #1
 801d5de:	f04f 0900 	mov.w	r9, #0
 801d5e2:	7808      	ldrb	r0, [r1, #0]
 801d5e4:	f7ff ff70 	bl	801d4c8 <__hexdig_fun>
 801d5e8:	1e43      	subs	r3, r0, #1
 801d5ea:	b2db      	uxtb	r3, r3
 801d5ec:	2b18      	cmp	r3, #24
 801d5ee:	d82c      	bhi.n	801d64a <__gethex+0x156>
 801d5f0:	f1a0 0210 	sub.w	r2, r0, #16
 801d5f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d5f8:	f7ff ff66 	bl	801d4c8 <__hexdig_fun>
 801d5fc:	1e43      	subs	r3, r0, #1
 801d5fe:	b2db      	uxtb	r3, r3
 801d600:	2b18      	cmp	r3, #24
 801d602:	d91d      	bls.n	801d640 <__gethex+0x14c>
 801d604:	f1b9 0f00 	cmp.w	r9, #0
 801d608:	d000      	beq.n	801d60c <__gethex+0x118>
 801d60a:	4252      	negs	r2, r2
 801d60c:	4415      	add	r5, r2
 801d60e:	f8cb 1000 	str.w	r1, [fp]
 801d612:	b1e4      	cbz	r4, 801d64e <__gethex+0x15a>
 801d614:	9b00      	ldr	r3, [sp, #0]
 801d616:	2b00      	cmp	r3, #0
 801d618:	bf14      	ite	ne
 801d61a:	2700      	movne	r7, #0
 801d61c:	2706      	moveq	r7, #6
 801d61e:	4638      	mov	r0, r7
 801d620:	b009      	add	sp, #36	; 0x24
 801d622:	ecbd 8b02 	vpop	{d8}
 801d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d62a:	463e      	mov	r6, r7
 801d62c:	4625      	mov	r5, r4
 801d62e:	2401      	movs	r4, #1
 801d630:	e7ca      	b.n	801d5c8 <__gethex+0xd4>
 801d632:	f04f 0900 	mov.w	r9, #0
 801d636:	1cb1      	adds	r1, r6, #2
 801d638:	e7d3      	b.n	801d5e2 <__gethex+0xee>
 801d63a:	f04f 0901 	mov.w	r9, #1
 801d63e:	e7fa      	b.n	801d636 <__gethex+0x142>
 801d640:	230a      	movs	r3, #10
 801d642:	fb03 0202 	mla	r2, r3, r2, r0
 801d646:	3a10      	subs	r2, #16
 801d648:	e7d4      	b.n	801d5f4 <__gethex+0x100>
 801d64a:	4631      	mov	r1, r6
 801d64c:	e7df      	b.n	801d60e <__gethex+0x11a>
 801d64e:	1bf3      	subs	r3, r6, r7
 801d650:	3b01      	subs	r3, #1
 801d652:	4621      	mov	r1, r4
 801d654:	2b07      	cmp	r3, #7
 801d656:	dc0b      	bgt.n	801d670 <__gethex+0x17c>
 801d658:	ee18 0a10 	vmov	r0, s16
 801d65c:	f000 fa82 	bl	801db64 <_Balloc>
 801d660:	4604      	mov	r4, r0
 801d662:	b940      	cbnz	r0, 801d676 <__gethex+0x182>
 801d664:	4b5d      	ldr	r3, [pc, #372]	; (801d7dc <__gethex+0x2e8>)
 801d666:	4602      	mov	r2, r0
 801d668:	21de      	movs	r1, #222	; 0xde
 801d66a:	485d      	ldr	r0, [pc, #372]	; (801d7e0 <__gethex+0x2ec>)
 801d66c:	f001 f9d6 	bl	801ea1c <__assert_func>
 801d670:	3101      	adds	r1, #1
 801d672:	105b      	asrs	r3, r3, #1
 801d674:	e7ee      	b.n	801d654 <__gethex+0x160>
 801d676:	f100 0914 	add.w	r9, r0, #20
 801d67a:	f04f 0b00 	mov.w	fp, #0
 801d67e:	f1ca 0301 	rsb	r3, sl, #1
 801d682:	f8cd 9008 	str.w	r9, [sp, #8]
 801d686:	f8cd b000 	str.w	fp, [sp]
 801d68a:	9306      	str	r3, [sp, #24]
 801d68c:	42b7      	cmp	r7, r6
 801d68e:	d340      	bcc.n	801d712 <__gethex+0x21e>
 801d690:	9802      	ldr	r0, [sp, #8]
 801d692:	9b00      	ldr	r3, [sp, #0]
 801d694:	f840 3b04 	str.w	r3, [r0], #4
 801d698:	eba0 0009 	sub.w	r0, r0, r9
 801d69c:	1080      	asrs	r0, r0, #2
 801d69e:	0146      	lsls	r6, r0, #5
 801d6a0:	6120      	str	r0, [r4, #16]
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f000 fb50 	bl	801dd48 <__hi0bits>
 801d6a8:	1a30      	subs	r0, r6, r0
 801d6aa:	f8d8 6000 	ldr.w	r6, [r8]
 801d6ae:	42b0      	cmp	r0, r6
 801d6b0:	dd63      	ble.n	801d77a <__gethex+0x286>
 801d6b2:	1b87      	subs	r7, r0, r6
 801d6b4:	4639      	mov	r1, r7
 801d6b6:	4620      	mov	r0, r4
 801d6b8:	f000 fef1 	bl	801e49e <__any_on>
 801d6bc:	4682      	mov	sl, r0
 801d6be:	b1a8      	cbz	r0, 801d6ec <__gethex+0x1f8>
 801d6c0:	1e7b      	subs	r3, r7, #1
 801d6c2:	1159      	asrs	r1, r3, #5
 801d6c4:	f003 021f 	and.w	r2, r3, #31
 801d6c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d6cc:	f04f 0a01 	mov.w	sl, #1
 801d6d0:	fa0a f202 	lsl.w	r2, sl, r2
 801d6d4:	420a      	tst	r2, r1
 801d6d6:	d009      	beq.n	801d6ec <__gethex+0x1f8>
 801d6d8:	4553      	cmp	r3, sl
 801d6da:	dd05      	ble.n	801d6e8 <__gethex+0x1f4>
 801d6dc:	1eb9      	subs	r1, r7, #2
 801d6de:	4620      	mov	r0, r4
 801d6e0:	f000 fedd 	bl	801e49e <__any_on>
 801d6e4:	2800      	cmp	r0, #0
 801d6e6:	d145      	bne.n	801d774 <__gethex+0x280>
 801d6e8:	f04f 0a02 	mov.w	sl, #2
 801d6ec:	4639      	mov	r1, r7
 801d6ee:	4620      	mov	r0, r4
 801d6f0:	f7ff fe98 	bl	801d424 <rshift>
 801d6f4:	443d      	add	r5, r7
 801d6f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d6fa:	42ab      	cmp	r3, r5
 801d6fc:	da4c      	bge.n	801d798 <__gethex+0x2a4>
 801d6fe:	ee18 0a10 	vmov	r0, s16
 801d702:	4621      	mov	r1, r4
 801d704:	f000 fa6e 	bl	801dbe4 <_Bfree>
 801d708:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d70a:	2300      	movs	r3, #0
 801d70c:	6013      	str	r3, [r2, #0]
 801d70e:	27a3      	movs	r7, #163	; 0xa3
 801d710:	e785      	b.n	801d61e <__gethex+0x12a>
 801d712:	1e73      	subs	r3, r6, #1
 801d714:	9a05      	ldr	r2, [sp, #20]
 801d716:	9303      	str	r3, [sp, #12]
 801d718:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d71c:	4293      	cmp	r3, r2
 801d71e:	d019      	beq.n	801d754 <__gethex+0x260>
 801d720:	f1bb 0f20 	cmp.w	fp, #32
 801d724:	d107      	bne.n	801d736 <__gethex+0x242>
 801d726:	9b02      	ldr	r3, [sp, #8]
 801d728:	9a00      	ldr	r2, [sp, #0]
 801d72a:	f843 2b04 	str.w	r2, [r3], #4
 801d72e:	9302      	str	r3, [sp, #8]
 801d730:	2300      	movs	r3, #0
 801d732:	9300      	str	r3, [sp, #0]
 801d734:	469b      	mov	fp, r3
 801d736:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d73a:	f7ff fec5 	bl	801d4c8 <__hexdig_fun>
 801d73e:	9b00      	ldr	r3, [sp, #0]
 801d740:	f000 000f 	and.w	r0, r0, #15
 801d744:	fa00 f00b 	lsl.w	r0, r0, fp
 801d748:	4303      	orrs	r3, r0
 801d74a:	9300      	str	r3, [sp, #0]
 801d74c:	f10b 0b04 	add.w	fp, fp, #4
 801d750:	9b03      	ldr	r3, [sp, #12]
 801d752:	e00d      	b.n	801d770 <__gethex+0x27c>
 801d754:	9b03      	ldr	r3, [sp, #12]
 801d756:	9a06      	ldr	r2, [sp, #24]
 801d758:	4413      	add	r3, r2
 801d75a:	42bb      	cmp	r3, r7
 801d75c:	d3e0      	bcc.n	801d720 <__gethex+0x22c>
 801d75e:	4618      	mov	r0, r3
 801d760:	9901      	ldr	r1, [sp, #4]
 801d762:	9307      	str	r3, [sp, #28]
 801d764:	4652      	mov	r2, sl
 801d766:	f001 f937 	bl	801e9d8 <strncmp>
 801d76a:	9b07      	ldr	r3, [sp, #28]
 801d76c:	2800      	cmp	r0, #0
 801d76e:	d1d7      	bne.n	801d720 <__gethex+0x22c>
 801d770:	461e      	mov	r6, r3
 801d772:	e78b      	b.n	801d68c <__gethex+0x198>
 801d774:	f04f 0a03 	mov.w	sl, #3
 801d778:	e7b8      	b.n	801d6ec <__gethex+0x1f8>
 801d77a:	da0a      	bge.n	801d792 <__gethex+0x29e>
 801d77c:	1a37      	subs	r7, r6, r0
 801d77e:	4621      	mov	r1, r4
 801d780:	ee18 0a10 	vmov	r0, s16
 801d784:	463a      	mov	r2, r7
 801d786:	f000 fc49 	bl	801e01c <__lshift>
 801d78a:	1bed      	subs	r5, r5, r7
 801d78c:	4604      	mov	r4, r0
 801d78e:	f100 0914 	add.w	r9, r0, #20
 801d792:	f04f 0a00 	mov.w	sl, #0
 801d796:	e7ae      	b.n	801d6f6 <__gethex+0x202>
 801d798:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d79c:	42a8      	cmp	r0, r5
 801d79e:	dd72      	ble.n	801d886 <__gethex+0x392>
 801d7a0:	1b45      	subs	r5, r0, r5
 801d7a2:	42ae      	cmp	r6, r5
 801d7a4:	dc36      	bgt.n	801d814 <__gethex+0x320>
 801d7a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d7aa:	2b02      	cmp	r3, #2
 801d7ac:	d02a      	beq.n	801d804 <__gethex+0x310>
 801d7ae:	2b03      	cmp	r3, #3
 801d7b0:	d02c      	beq.n	801d80c <__gethex+0x318>
 801d7b2:	2b01      	cmp	r3, #1
 801d7b4:	d11c      	bne.n	801d7f0 <__gethex+0x2fc>
 801d7b6:	42ae      	cmp	r6, r5
 801d7b8:	d11a      	bne.n	801d7f0 <__gethex+0x2fc>
 801d7ba:	2e01      	cmp	r6, #1
 801d7bc:	d112      	bne.n	801d7e4 <__gethex+0x2f0>
 801d7be:	9a04      	ldr	r2, [sp, #16]
 801d7c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d7c4:	6013      	str	r3, [r2, #0]
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	6123      	str	r3, [r4, #16]
 801d7ca:	f8c9 3000 	str.w	r3, [r9]
 801d7ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d7d0:	2762      	movs	r7, #98	; 0x62
 801d7d2:	601c      	str	r4, [r3, #0]
 801d7d4:	e723      	b.n	801d61e <__gethex+0x12a>
 801d7d6:	bf00      	nop
 801d7d8:	08020018 	.word	0x08020018
 801d7dc:	0801ffa0 	.word	0x0801ffa0
 801d7e0:	0801ffb1 	.word	0x0801ffb1
 801d7e4:	1e71      	subs	r1, r6, #1
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f000 fe59 	bl	801e49e <__any_on>
 801d7ec:	2800      	cmp	r0, #0
 801d7ee:	d1e6      	bne.n	801d7be <__gethex+0x2ca>
 801d7f0:	ee18 0a10 	vmov	r0, s16
 801d7f4:	4621      	mov	r1, r4
 801d7f6:	f000 f9f5 	bl	801dbe4 <_Bfree>
 801d7fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	6013      	str	r3, [r2, #0]
 801d800:	2750      	movs	r7, #80	; 0x50
 801d802:	e70c      	b.n	801d61e <__gethex+0x12a>
 801d804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d806:	2b00      	cmp	r3, #0
 801d808:	d1f2      	bne.n	801d7f0 <__gethex+0x2fc>
 801d80a:	e7d8      	b.n	801d7be <__gethex+0x2ca>
 801d80c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d1d5      	bne.n	801d7be <__gethex+0x2ca>
 801d812:	e7ed      	b.n	801d7f0 <__gethex+0x2fc>
 801d814:	1e6f      	subs	r7, r5, #1
 801d816:	f1ba 0f00 	cmp.w	sl, #0
 801d81a:	d131      	bne.n	801d880 <__gethex+0x38c>
 801d81c:	b127      	cbz	r7, 801d828 <__gethex+0x334>
 801d81e:	4639      	mov	r1, r7
 801d820:	4620      	mov	r0, r4
 801d822:	f000 fe3c 	bl	801e49e <__any_on>
 801d826:	4682      	mov	sl, r0
 801d828:	117b      	asrs	r3, r7, #5
 801d82a:	2101      	movs	r1, #1
 801d82c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d830:	f007 071f 	and.w	r7, r7, #31
 801d834:	fa01 f707 	lsl.w	r7, r1, r7
 801d838:	421f      	tst	r7, r3
 801d83a:	4629      	mov	r1, r5
 801d83c:	4620      	mov	r0, r4
 801d83e:	bf18      	it	ne
 801d840:	f04a 0a02 	orrne.w	sl, sl, #2
 801d844:	1b76      	subs	r6, r6, r5
 801d846:	f7ff fded 	bl	801d424 <rshift>
 801d84a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d84e:	2702      	movs	r7, #2
 801d850:	f1ba 0f00 	cmp.w	sl, #0
 801d854:	d048      	beq.n	801d8e8 <__gethex+0x3f4>
 801d856:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d85a:	2b02      	cmp	r3, #2
 801d85c:	d015      	beq.n	801d88a <__gethex+0x396>
 801d85e:	2b03      	cmp	r3, #3
 801d860:	d017      	beq.n	801d892 <__gethex+0x39e>
 801d862:	2b01      	cmp	r3, #1
 801d864:	d109      	bne.n	801d87a <__gethex+0x386>
 801d866:	f01a 0f02 	tst.w	sl, #2
 801d86a:	d006      	beq.n	801d87a <__gethex+0x386>
 801d86c:	f8d9 0000 	ldr.w	r0, [r9]
 801d870:	ea4a 0a00 	orr.w	sl, sl, r0
 801d874:	f01a 0f01 	tst.w	sl, #1
 801d878:	d10e      	bne.n	801d898 <__gethex+0x3a4>
 801d87a:	f047 0710 	orr.w	r7, r7, #16
 801d87e:	e033      	b.n	801d8e8 <__gethex+0x3f4>
 801d880:	f04f 0a01 	mov.w	sl, #1
 801d884:	e7d0      	b.n	801d828 <__gethex+0x334>
 801d886:	2701      	movs	r7, #1
 801d888:	e7e2      	b.n	801d850 <__gethex+0x35c>
 801d88a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d88c:	f1c3 0301 	rsb	r3, r3, #1
 801d890:	9315      	str	r3, [sp, #84]	; 0x54
 801d892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d894:	2b00      	cmp	r3, #0
 801d896:	d0f0      	beq.n	801d87a <__gethex+0x386>
 801d898:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d89c:	f104 0314 	add.w	r3, r4, #20
 801d8a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d8a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d8a8:	f04f 0c00 	mov.w	ip, #0
 801d8ac:	4618      	mov	r0, r3
 801d8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801d8b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d8b6:	d01c      	beq.n	801d8f2 <__gethex+0x3fe>
 801d8b8:	3201      	adds	r2, #1
 801d8ba:	6002      	str	r2, [r0, #0]
 801d8bc:	2f02      	cmp	r7, #2
 801d8be:	f104 0314 	add.w	r3, r4, #20
 801d8c2:	d13f      	bne.n	801d944 <__gethex+0x450>
 801d8c4:	f8d8 2000 	ldr.w	r2, [r8]
 801d8c8:	3a01      	subs	r2, #1
 801d8ca:	42b2      	cmp	r2, r6
 801d8cc:	d10a      	bne.n	801d8e4 <__gethex+0x3f0>
 801d8ce:	1171      	asrs	r1, r6, #5
 801d8d0:	2201      	movs	r2, #1
 801d8d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d8d6:	f006 061f 	and.w	r6, r6, #31
 801d8da:	fa02 f606 	lsl.w	r6, r2, r6
 801d8de:	421e      	tst	r6, r3
 801d8e0:	bf18      	it	ne
 801d8e2:	4617      	movne	r7, r2
 801d8e4:	f047 0720 	orr.w	r7, r7, #32
 801d8e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d8ea:	601c      	str	r4, [r3, #0]
 801d8ec:	9b04      	ldr	r3, [sp, #16]
 801d8ee:	601d      	str	r5, [r3, #0]
 801d8f0:	e695      	b.n	801d61e <__gethex+0x12a>
 801d8f2:	4299      	cmp	r1, r3
 801d8f4:	f843 cc04 	str.w	ip, [r3, #-4]
 801d8f8:	d8d8      	bhi.n	801d8ac <__gethex+0x3b8>
 801d8fa:	68a3      	ldr	r3, [r4, #8]
 801d8fc:	459b      	cmp	fp, r3
 801d8fe:	db19      	blt.n	801d934 <__gethex+0x440>
 801d900:	6861      	ldr	r1, [r4, #4]
 801d902:	ee18 0a10 	vmov	r0, s16
 801d906:	3101      	adds	r1, #1
 801d908:	f000 f92c 	bl	801db64 <_Balloc>
 801d90c:	4681      	mov	r9, r0
 801d90e:	b918      	cbnz	r0, 801d918 <__gethex+0x424>
 801d910:	4b1a      	ldr	r3, [pc, #104]	; (801d97c <__gethex+0x488>)
 801d912:	4602      	mov	r2, r0
 801d914:	2184      	movs	r1, #132	; 0x84
 801d916:	e6a8      	b.n	801d66a <__gethex+0x176>
 801d918:	6922      	ldr	r2, [r4, #16]
 801d91a:	3202      	adds	r2, #2
 801d91c:	f104 010c 	add.w	r1, r4, #12
 801d920:	0092      	lsls	r2, r2, #2
 801d922:	300c      	adds	r0, #12
 801d924:	f7fd fa26 	bl	801ad74 <memcpy>
 801d928:	4621      	mov	r1, r4
 801d92a:	ee18 0a10 	vmov	r0, s16
 801d92e:	f000 f959 	bl	801dbe4 <_Bfree>
 801d932:	464c      	mov	r4, r9
 801d934:	6923      	ldr	r3, [r4, #16]
 801d936:	1c5a      	adds	r2, r3, #1
 801d938:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d93c:	6122      	str	r2, [r4, #16]
 801d93e:	2201      	movs	r2, #1
 801d940:	615a      	str	r2, [r3, #20]
 801d942:	e7bb      	b.n	801d8bc <__gethex+0x3c8>
 801d944:	6922      	ldr	r2, [r4, #16]
 801d946:	455a      	cmp	r2, fp
 801d948:	dd0b      	ble.n	801d962 <__gethex+0x46e>
 801d94a:	2101      	movs	r1, #1
 801d94c:	4620      	mov	r0, r4
 801d94e:	f7ff fd69 	bl	801d424 <rshift>
 801d952:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d956:	3501      	adds	r5, #1
 801d958:	42ab      	cmp	r3, r5
 801d95a:	f6ff aed0 	blt.w	801d6fe <__gethex+0x20a>
 801d95e:	2701      	movs	r7, #1
 801d960:	e7c0      	b.n	801d8e4 <__gethex+0x3f0>
 801d962:	f016 061f 	ands.w	r6, r6, #31
 801d966:	d0fa      	beq.n	801d95e <__gethex+0x46a>
 801d968:	4453      	add	r3, sl
 801d96a:	f1c6 0620 	rsb	r6, r6, #32
 801d96e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d972:	f000 f9e9 	bl	801dd48 <__hi0bits>
 801d976:	42b0      	cmp	r0, r6
 801d978:	dbe7      	blt.n	801d94a <__gethex+0x456>
 801d97a:	e7f0      	b.n	801d95e <__gethex+0x46a>
 801d97c:	0801ffa0 	.word	0x0801ffa0

0801d980 <L_shift>:
 801d980:	f1c2 0208 	rsb	r2, r2, #8
 801d984:	0092      	lsls	r2, r2, #2
 801d986:	b570      	push	{r4, r5, r6, lr}
 801d988:	f1c2 0620 	rsb	r6, r2, #32
 801d98c:	6843      	ldr	r3, [r0, #4]
 801d98e:	6804      	ldr	r4, [r0, #0]
 801d990:	fa03 f506 	lsl.w	r5, r3, r6
 801d994:	432c      	orrs	r4, r5
 801d996:	40d3      	lsrs	r3, r2
 801d998:	6004      	str	r4, [r0, #0]
 801d99a:	f840 3f04 	str.w	r3, [r0, #4]!
 801d99e:	4288      	cmp	r0, r1
 801d9a0:	d3f4      	bcc.n	801d98c <L_shift+0xc>
 801d9a2:	bd70      	pop	{r4, r5, r6, pc}

0801d9a4 <__match>:
 801d9a4:	b530      	push	{r4, r5, lr}
 801d9a6:	6803      	ldr	r3, [r0, #0]
 801d9a8:	3301      	adds	r3, #1
 801d9aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9ae:	b914      	cbnz	r4, 801d9b6 <__match+0x12>
 801d9b0:	6003      	str	r3, [r0, #0]
 801d9b2:	2001      	movs	r0, #1
 801d9b4:	bd30      	pop	{r4, r5, pc}
 801d9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d9be:	2d19      	cmp	r5, #25
 801d9c0:	bf98      	it	ls
 801d9c2:	3220      	addls	r2, #32
 801d9c4:	42a2      	cmp	r2, r4
 801d9c6:	d0f0      	beq.n	801d9aa <__match+0x6>
 801d9c8:	2000      	movs	r0, #0
 801d9ca:	e7f3      	b.n	801d9b4 <__match+0x10>

0801d9cc <__hexnan>:
 801d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9d0:	680b      	ldr	r3, [r1, #0]
 801d9d2:	115e      	asrs	r6, r3, #5
 801d9d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d9d8:	f013 031f 	ands.w	r3, r3, #31
 801d9dc:	b087      	sub	sp, #28
 801d9de:	bf18      	it	ne
 801d9e0:	3604      	addne	r6, #4
 801d9e2:	2500      	movs	r5, #0
 801d9e4:	1f37      	subs	r7, r6, #4
 801d9e6:	4690      	mov	r8, r2
 801d9e8:	6802      	ldr	r2, [r0, #0]
 801d9ea:	9301      	str	r3, [sp, #4]
 801d9ec:	4682      	mov	sl, r0
 801d9ee:	f846 5c04 	str.w	r5, [r6, #-4]
 801d9f2:	46b9      	mov	r9, r7
 801d9f4:	463c      	mov	r4, r7
 801d9f6:	9502      	str	r5, [sp, #8]
 801d9f8:	46ab      	mov	fp, r5
 801d9fa:	7851      	ldrb	r1, [r2, #1]
 801d9fc:	1c53      	adds	r3, r2, #1
 801d9fe:	9303      	str	r3, [sp, #12]
 801da00:	b341      	cbz	r1, 801da54 <__hexnan+0x88>
 801da02:	4608      	mov	r0, r1
 801da04:	9205      	str	r2, [sp, #20]
 801da06:	9104      	str	r1, [sp, #16]
 801da08:	f7ff fd5e 	bl	801d4c8 <__hexdig_fun>
 801da0c:	2800      	cmp	r0, #0
 801da0e:	d14f      	bne.n	801dab0 <__hexnan+0xe4>
 801da10:	9904      	ldr	r1, [sp, #16]
 801da12:	9a05      	ldr	r2, [sp, #20]
 801da14:	2920      	cmp	r1, #32
 801da16:	d818      	bhi.n	801da4a <__hexnan+0x7e>
 801da18:	9b02      	ldr	r3, [sp, #8]
 801da1a:	459b      	cmp	fp, r3
 801da1c:	dd13      	ble.n	801da46 <__hexnan+0x7a>
 801da1e:	454c      	cmp	r4, r9
 801da20:	d206      	bcs.n	801da30 <__hexnan+0x64>
 801da22:	2d07      	cmp	r5, #7
 801da24:	dc04      	bgt.n	801da30 <__hexnan+0x64>
 801da26:	462a      	mov	r2, r5
 801da28:	4649      	mov	r1, r9
 801da2a:	4620      	mov	r0, r4
 801da2c:	f7ff ffa8 	bl	801d980 <L_shift>
 801da30:	4544      	cmp	r4, r8
 801da32:	d950      	bls.n	801dad6 <__hexnan+0x10a>
 801da34:	2300      	movs	r3, #0
 801da36:	f1a4 0904 	sub.w	r9, r4, #4
 801da3a:	f844 3c04 	str.w	r3, [r4, #-4]
 801da3e:	f8cd b008 	str.w	fp, [sp, #8]
 801da42:	464c      	mov	r4, r9
 801da44:	461d      	mov	r5, r3
 801da46:	9a03      	ldr	r2, [sp, #12]
 801da48:	e7d7      	b.n	801d9fa <__hexnan+0x2e>
 801da4a:	2929      	cmp	r1, #41	; 0x29
 801da4c:	d156      	bne.n	801dafc <__hexnan+0x130>
 801da4e:	3202      	adds	r2, #2
 801da50:	f8ca 2000 	str.w	r2, [sl]
 801da54:	f1bb 0f00 	cmp.w	fp, #0
 801da58:	d050      	beq.n	801dafc <__hexnan+0x130>
 801da5a:	454c      	cmp	r4, r9
 801da5c:	d206      	bcs.n	801da6c <__hexnan+0xa0>
 801da5e:	2d07      	cmp	r5, #7
 801da60:	dc04      	bgt.n	801da6c <__hexnan+0xa0>
 801da62:	462a      	mov	r2, r5
 801da64:	4649      	mov	r1, r9
 801da66:	4620      	mov	r0, r4
 801da68:	f7ff ff8a 	bl	801d980 <L_shift>
 801da6c:	4544      	cmp	r4, r8
 801da6e:	d934      	bls.n	801dada <__hexnan+0x10e>
 801da70:	f1a8 0204 	sub.w	r2, r8, #4
 801da74:	4623      	mov	r3, r4
 801da76:	f853 1b04 	ldr.w	r1, [r3], #4
 801da7a:	f842 1f04 	str.w	r1, [r2, #4]!
 801da7e:	429f      	cmp	r7, r3
 801da80:	d2f9      	bcs.n	801da76 <__hexnan+0xaa>
 801da82:	1b3b      	subs	r3, r7, r4
 801da84:	f023 0303 	bic.w	r3, r3, #3
 801da88:	3304      	adds	r3, #4
 801da8a:	3401      	adds	r4, #1
 801da8c:	3e03      	subs	r6, #3
 801da8e:	42b4      	cmp	r4, r6
 801da90:	bf88      	it	hi
 801da92:	2304      	movhi	r3, #4
 801da94:	4443      	add	r3, r8
 801da96:	2200      	movs	r2, #0
 801da98:	f843 2b04 	str.w	r2, [r3], #4
 801da9c:	429f      	cmp	r7, r3
 801da9e:	d2fb      	bcs.n	801da98 <__hexnan+0xcc>
 801daa0:	683b      	ldr	r3, [r7, #0]
 801daa2:	b91b      	cbnz	r3, 801daac <__hexnan+0xe0>
 801daa4:	4547      	cmp	r7, r8
 801daa6:	d127      	bne.n	801daf8 <__hexnan+0x12c>
 801daa8:	2301      	movs	r3, #1
 801daaa:	603b      	str	r3, [r7, #0]
 801daac:	2005      	movs	r0, #5
 801daae:	e026      	b.n	801dafe <__hexnan+0x132>
 801dab0:	3501      	adds	r5, #1
 801dab2:	2d08      	cmp	r5, #8
 801dab4:	f10b 0b01 	add.w	fp, fp, #1
 801dab8:	dd06      	ble.n	801dac8 <__hexnan+0xfc>
 801daba:	4544      	cmp	r4, r8
 801dabc:	d9c3      	bls.n	801da46 <__hexnan+0x7a>
 801dabe:	2300      	movs	r3, #0
 801dac0:	f844 3c04 	str.w	r3, [r4, #-4]
 801dac4:	2501      	movs	r5, #1
 801dac6:	3c04      	subs	r4, #4
 801dac8:	6822      	ldr	r2, [r4, #0]
 801daca:	f000 000f 	and.w	r0, r0, #15
 801dace:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801dad2:	6022      	str	r2, [r4, #0]
 801dad4:	e7b7      	b.n	801da46 <__hexnan+0x7a>
 801dad6:	2508      	movs	r5, #8
 801dad8:	e7b5      	b.n	801da46 <__hexnan+0x7a>
 801dada:	9b01      	ldr	r3, [sp, #4]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d0df      	beq.n	801daa0 <__hexnan+0xd4>
 801dae0:	f04f 32ff 	mov.w	r2, #4294967295
 801dae4:	f1c3 0320 	rsb	r3, r3, #32
 801dae8:	fa22 f303 	lsr.w	r3, r2, r3
 801daec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801daf0:	401a      	ands	r2, r3
 801daf2:	f846 2c04 	str.w	r2, [r6, #-4]
 801daf6:	e7d3      	b.n	801daa0 <__hexnan+0xd4>
 801daf8:	3f04      	subs	r7, #4
 801dafa:	e7d1      	b.n	801daa0 <__hexnan+0xd4>
 801dafc:	2004      	movs	r0, #4
 801dafe:	b007      	add	sp, #28
 801db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db04 <_localeconv_r>:
 801db04:	4800      	ldr	r0, [pc, #0]	; (801db08 <_localeconv_r+0x4>)
 801db06:	4770      	bx	lr
 801db08:	24000258 	.word	0x24000258

0801db0c <_lseek_r>:
 801db0c:	b538      	push	{r3, r4, r5, lr}
 801db0e:	4d07      	ldr	r5, [pc, #28]	; (801db2c <_lseek_r+0x20>)
 801db10:	4604      	mov	r4, r0
 801db12:	4608      	mov	r0, r1
 801db14:	4611      	mov	r1, r2
 801db16:	2200      	movs	r2, #0
 801db18:	602a      	str	r2, [r5, #0]
 801db1a:	461a      	mov	r2, r3
 801db1c:	f7e6 f8e0 	bl	8003ce0 <_lseek>
 801db20:	1c43      	adds	r3, r0, #1
 801db22:	d102      	bne.n	801db2a <_lseek_r+0x1e>
 801db24:	682b      	ldr	r3, [r5, #0]
 801db26:	b103      	cbz	r3, 801db2a <_lseek_r+0x1e>
 801db28:	6023      	str	r3, [r4, #0]
 801db2a:	bd38      	pop	{r3, r4, r5, pc}
 801db2c:	240034f8 	.word	0x240034f8

0801db30 <malloc>:
 801db30:	4b02      	ldr	r3, [pc, #8]	; (801db3c <malloc+0xc>)
 801db32:	4601      	mov	r1, r0
 801db34:	6818      	ldr	r0, [r3, #0]
 801db36:	f000 bd55 	b.w	801e5e4 <_malloc_r>
 801db3a:	bf00      	nop
 801db3c:	24000100 	.word	0x24000100

0801db40 <__ascii_mbtowc>:
 801db40:	b082      	sub	sp, #8
 801db42:	b901      	cbnz	r1, 801db46 <__ascii_mbtowc+0x6>
 801db44:	a901      	add	r1, sp, #4
 801db46:	b142      	cbz	r2, 801db5a <__ascii_mbtowc+0x1a>
 801db48:	b14b      	cbz	r3, 801db5e <__ascii_mbtowc+0x1e>
 801db4a:	7813      	ldrb	r3, [r2, #0]
 801db4c:	600b      	str	r3, [r1, #0]
 801db4e:	7812      	ldrb	r2, [r2, #0]
 801db50:	1e10      	subs	r0, r2, #0
 801db52:	bf18      	it	ne
 801db54:	2001      	movne	r0, #1
 801db56:	b002      	add	sp, #8
 801db58:	4770      	bx	lr
 801db5a:	4610      	mov	r0, r2
 801db5c:	e7fb      	b.n	801db56 <__ascii_mbtowc+0x16>
 801db5e:	f06f 0001 	mvn.w	r0, #1
 801db62:	e7f8      	b.n	801db56 <__ascii_mbtowc+0x16>

0801db64 <_Balloc>:
 801db64:	b570      	push	{r4, r5, r6, lr}
 801db66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801db68:	4604      	mov	r4, r0
 801db6a:	460d      	mov	r5, r1
 801db6c:	b976      	cbnz	r6, 801db8c <_Balloc+0x28>
 801db6e:	2010      	movs	r0, #16
 801db70:	f7ff ffde 	bl	801db30 <malloc>
 801db74:	4602      	mov	r2, r0
 801db76:	6260      	str	r0, [r4, #36]	; 0x24
 801db78:	b920      	cbnz	r0, 801db84 <_Balloc+0x20>
 801db7a:	4b18      	ldr	r3, [pc, #96]	; (801dbdc <_Balloc+0x78>)
 801db7c:	4818      	ldr	r0, [pc, #96]	; (801dbe0 <_Balloc+0x7c>)
 801db7e:	2166      	movs	r1, #102	; 0x66
 801db80:	f000 ff4c 	bl	801ea1c <__assert_func>
 801db84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801db88:	6006      	str	r6, [r0, #0]
 801db8a:	60c6      	str	r6, [r0, #12]
 801db8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801db8e:	68f3      	ldr	r3, [r6, #12]
 801db90:	b183      	cbz	r3, 801dbb4 <_Balloc+0x50>
 801db92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801db94:	68db      	ldr	r3, [r3, #12]
 801db96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801db9a:	b9b8      	cbnz	r0, 801dbcc <_Balloc+0x68>
 801db9c:	2101      	movs	r1, #1
 801db9e:	fa01 f605 	lsl.w	r6, r1, r5
 801dba2:	1d72      	adds	r2, r6, #5
 801dba4:	0092      	lsls	r2, r2, #2
 801dba6:	4620      	mov	r0, r4
 801dba8:	f000 fc9a 	bl	801e4e0 <_calloc_r>
 801dbac:	b160      	cbz	r0, 801dbc8 <_Balloc+0x64>
 801dbae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dbb2:	e00e      	b.n	801dbd2 <_Balloc+0x6e>
 801dbb4:	2221      	movs	r2, #33	; 0x21
 801dbb6:	2104      	movs	r1, #4
 801dbb8:	4620      	mov	r0, r4
 801dbba:	f000 fc91 	bl	801e4e0 <_calloc_r>
 801dbbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dbc0:	60f0      	str	r0, [r6, #12]
 801dbc2:	68db      	ldr	r3, [r3, #12]
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d1e4      	bne.n	801db92 <_Balloc+0x2e>
 801dbc8:	2000      	movs	r0, #0
 801dbca:	bd70      	pop	{r4, r5, r6, pc}
 801dbcc:	6802      	ldr	r2, [r0, #0]
 801dbce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dbd8:	e7f7      	b.n	801dbca <_Balloc+0x66>
 801dbda:	bf00      	nop
 801dbdc:	0801ff2e 	.word	0x0801ff2e
 801dbe0:	0802002c 	.word	0x0802002c

0801dbe4 <_Bfree>:
 801dbe4:	b570      	push	{r4, r5, r6, lr}
 801dbe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dbe8:	4605      	mov	r5, r0
 801dbea:	460c      	mov	r4, r1
 801dbec:	b976      	cbnz	r6, 801dc0c <_Bfree+0x28>
 801dbee:	2010      	movs	r0, #16
 801dbf0:	f7ff ff9e 	bl	801db30 <malloc>
 801dbf4:	4602      	mov	r2, r0
 801dbf6:	6268      	str	r0, [r5, #36]	; 0x24
 801dbf8:	b920      	cbnz	r0, 801dc04 <_Bfree+0x20>
 801dbfa:	4b09      	ldr	r3, [pc, #36]	; (801dc20 <_Bfree+0x3c>)
 801dbfc:	4809      	ldr	r0, [pc, #36]	; (801dc24 <_Bfree+0x40>)
 801dbfe:	218a      	movs	r1, #138	; 0x8a
 801dc00:	f000 ff0c 	bl	801ea1c <__assert_func>
 801dc04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dc08:	6006      	str	r6, [r0, #0]
 801dc0a:	60c6      	str	r6, [r0, #12]
 801dc0c:	b13c      	cbz	r4, 801dc1e <_Bfree+0x3a>
 801dc0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801dc10:	6862      	ldr	r2, [r4, #4]
 801dc12:	68db      	ldr	r3, [r3, #12]
 801dc14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dc18:	6021      	str	r1, [r4, #0]
 801dc1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dc1e:	bd70      	pop	{r4, r5, r6, pc}
 801dc20:	0801ff2e 	.word	0x0801ff2e
 801dc24:	0802002c 	.word	0x0802002c

0801dc28 <__multadd>:
 801dc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc2c:	690d      	ldr	r5, [r1, #16]
 801dc2e:	4607      	mov	r7, r0
 801dc30:	460c      	mov	r4, r1
 801dc32:	461e      	mov	r6, r3
 801dc34:	f101 0c14 	add.w	ip, r1, #20
 801dc38:	2000      	movs	r0, #0
 801dc3a:	f8dc 3000 	ldr.w	r3, [ip]
 801dc3e:	b299      	uxth	r1, r3
 801dc40:	fb02 6101 	mla	r1, r2, r1, r6
 801dc44:	0c1e      	lsrs	r6, r3, #16
 801dc46:	0c0b      	lsrs	r3, r1, #16
 801dc48:	fb02 3306 	mla	r3, r2, r6, r3
 801dc4c:	b289      	uxth	r1, r1
 801dc4e:	3001      	adds	r0, #1
 801dc50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dc54:	4285      	cmp	r5, r0
 801dc56:	f84c 1b04 	str.w	r1, [ip], #4
 801dc5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dc5e:	dcec      	bgt.n	801dc3a <__multadd+0x12>
 801dc60:	b30e      	cbz	r6, 801dca6 <__multadd+0x7e>
 801dc62:	68a3      	ldr	r3, [r4, #8]
 801dc64:	42ab      	cmp	r3, r5
 801dc66:	dc19      	bgt.n	801dc9c <__multadd+0x74>
 801dc68:	6861      	ldr	r1, [r4, #4]
 801dc6a:	4638      	mov	r0, r7
 801dc6c:	3101      	adds	r1, #1
 801dc6e:	f7ff ff79 	bl	801db64 <_Balloc>
 801dc72:	4680      	mov	r8, r0
 801dc74:	b928      	cbnz	r0, 801dc82 <__multadd+0x5a>
 801dc76:	4602      	mov	r2, r0
 801dc78:	4b0c      	ldr	r3, [pc, #48]	; (801dcac <__multadd+0x84>)
 801dc7a:	480d      	ldr	r0, [pc, #52]	; (801dcb0 <__multadd+0x88>)
 801dc7c:	21b5      	movs	r1, #181	; 0xb5
 801dc7e:	f000 fecd 	bl	801ea1c <__assert_func>
 801dc82:	6922      	ldr	r2, [r4, #16]
 801dc84:	3202      	adds	r2, #2
 801dc86:	f104 010c 	add.w	r1, r4, #12
 801dc8a:	0092      	lsls	r2, r2, #2
 801dc8c:	300c      	adds	r0, #12
 801dc8e:	f7fd f871 	bl	801ad74 <memcpy>
 801dc92:	4621      	mov	r1, r4
 801dc94:	4638      	mov	r0, r7
 801dc96:	f7ff ffa5 	bl	801dbe4 <_Bfree>
 801dc9a:	4644      	mov	r4, r8
 801dc9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dca0:	3501      	adds	r5, #1
 801dca2:	615e      	str	r6, [r3, #20]
 801dca4:	6125      	str	r5, [r4, #16]
 801dca6:	4620      	mov	r0, r4
 801dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcac:	0801ffa0 	.word	0x0801ffa0
 801dcb0:	0802002c 	.word	0x0802002c

0801dcb4 <__s2b>:
 801dcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcb8:	460c      	mov	r4, r1
 801dcba:	4615      	mov	r5, r2
 801dcbc:	461f      	mov	r7, r3
 801dcbe:	2209      	movs	r2, #9
 801dcc0:	3308      	adds	r3, #8
 801dcc2:	4606      	mov	r6, r0
 801dcc4:	fb93 f3f2 	sdiv	r3, r3, r2
 801dcc8:	2100      	movs	r1, #0
 801dcca:	2201      	movs	r2, #1
 801dccc:	429a      	cmp	r2, r3
 801dcce:	db09      	blt.n	801dce4 <__s2b+0x30>
 801dcd0:	4630      	mov	r0, r6
 801dcd2:	f7ff ff47 	bl	801db64 <_Balloc>
 801dcd6:	b940      	cbnz	r0, 801dcea <__s2b+0x36>
 801dcd8:	4602      	mov	r2, r0
 801dcda:	4b19      	ldr	r3, [pc, #100]	; (801dd40 <__s2b+0x8c>)
 801dcdc:	4819      	ldr	r0, [pc, #100]	; (801dd44 <__s2b+0x90>)
 801dcde:	21ce      	movs	r1, #206	; 0xce
 801dce0:	f000 fe9c 	bl	801ea1c <__assert_func>
 801dce4:	0052      	lsls	r2, r2, #1
 801dce6:	3101      	adds	r1, #1
 801dce8:	e7f0      	b.n	801dccc <__s2b+0x18>
 801dcea:	9b08      	ldr	r3, [sp, #32]
 801dcec:	6143      	str	r3, [r0, #20]
 801dcee:	2d09      	cmp	r5, #9
 801dcf0:	f04f 0301 	mov.w	r3, #1
 801dcf4:	6103      	str	r3, [r0, #16]
 801dcf6:	dd16      	ble.n	801dd26 <__s2b+0x72>
 801dcf8:	f104 0909 	add.w	r9, r4, #9
 801dcfc:	46c8      	mov	r8, r9
 801dcfe:	442c      	add	r4, r5
 801dd00:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dd04:	4601      	mov	r1, r0
 801dd06:	3b30      	subs	r3, #48	; 0x30
 801dd08:	220a      	movs	r2, #10
 801dd0a:	4630      	mov	r0, r6
 801dd0c:	f7ff ff8c 	bl	801dc28 <__multadd>
 801dd10:	45a0      	cmp	r8, r4
 801dd12:	d1f5      	bne.n	801dd00 <__s2b+0x4c>
 801dd14:	f1a5 0408 	sub.w	r4, r5, #8
 801dd18:	444c      	add	r4, r9
 801dd1a:	1b2d      	subs	r5, r5, r4
 801dd1c:	1963      	adds	r3, r4, r5
 801dd1e:	42bb      	cmp	r3, r7
 801dd20:	db04      	blt.n	801dd2c <__s2b+0x78>
 801dd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd26:	340a      	adds	r4, #10
 801dd28:	2509      	movs	r5, #9
 801dd2a:	e7f6      	b.n	801dd1a <__s2b+0x66>
 801dd2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dd30:	4601      	mov	r1, r0
 801dd32:	3b30      	subs	r3, #48	; 0x30
 801dd34:	220a      	movs	r2, #10
 801dd36:	4630      	mov	r0, r6
 801dd38:	f7ff ff76 	bl	801dc28 <__multadd>
 801dd3c:	e7ee      	b.n	801dd1c <__s2b+0x68>
 801dd3e:	bf00      	nop
 801dd40:	0801ffa0 	.word	0x0801ffa0
 801dd44:	0802002c 	.word	0x0802002c

0801dd48 <__hi0bits>:
 801dd48:	0c03      	lsrs	r3, r0, #16
 801dd4a:	041b      	lsls	r3, r3, #16
 801dd4c:	b9d3      	cbnz	r3, 801dd84 <__hi0bits+0x3c>
 801dd4e:	0400      	lsls	r0, r0, #16
 801dd50:	2310      	movs	r3, #16
 801dd52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dd56:	bf04      	itt	eq
 801dd58:	0200      	lsleq	r0, r0, #8
 801dd5a:	3308      	addeq	r3, #8
 801dd5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dd60:	bf04      	itt	eq
 801dd62:	0100      	lsleq	r0, r0, #4
 801dd64:	3304      	addeq	r3, #4
 801dd66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dd6a:	bf04      	itt	eq
 801dd6c:	0080      	lsleq	r0, r0, #2
 801dd6e:	3302      	addeq	r3, #2
 801dd70:	2800      	cmp	r0, #0
 801dd72:	db05      	blt.n	801dd80 <__hi0bits+0x38>
 801dd74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dd78:	f103 0301 	add.w	r3, r3, #1
 801dd7c:	bf08      	it	eq
 801dd7e:	2320      	moveq	r3, #32
 801dd80:	4618      	mov	r0, r3
 801dd82:	4770      	bx	lr
 801dd84:	2300      	movs	r3, #0
 801dd86:	e7e4      	b.n	801dd52 <__hi0bits+0xa>

0801dd88 <__lo0bits>:
 801dd88:	6803      	ldr	r3, [r0, #0]
 801dd8a:	f013 0207 	ands.w	r2, r3, #7
 801dd8e:	4601      	mov	r1, r0
 801dd90:	d00b      	beq.n	801ddaa <__lo0bits+0x22>
 801dd92:	07da      	lsls	r2, r3, #31
 801dd94:	d423      	bmi.n	801ddde <__lo0bits+0x56>
 801dd96:	0798      	lsls	r0, r3, #30
 801dd98:	bf49      	itett	mi
 801dd9a:	085b      	lsrmi	r3, r3, #1
 801dd9c:	089b      	lsrpl	r3, r3, #2
 801dd9e:	2001      	movmi	r0, #1
 801dda0:	600b      	strmi	r3, [r1, #0]
 801dda2:	bf5c      	itt	pl
 801dda4:	600b      	strpl	r3, [r1, #0]
 801dda6:	2002      	movpl	r0, #2
 801dda8:	4770      	bx	lr
 801ddaa:	b298      	uxth	r0, r3
 801ddac:	b9a8      	cbnz	r0, 801ddda <__lo0bits+0x52>
 801ddae:	0c1b      	lsrs	r3, r3, #16
 801ddb0:	2010      	movs	r0, #16
 801ddb2:	b2da      	uxtb	r2, r3
 801ddb4:	b90a      	cbnz	r2, 801ddba <__lo0bits+0x32>
 801ddb6:	3008      	adds	r0, #8
 801ddb8:	0a1b      	lsrs	r3, r3, #8
 801ddba:	071a      	lsls	r2, r3, #28
 801ddbc:	bf04      	itt	eq
 801ddbe:	091b      	lsreq	r3, r3, #4
 801ddc0:	3004      	addeq	r0, #4
 801ddc2:	079a      	lsls	r2, r3, #30
 801ddc4:	bf04      	itt	eq
 801ddc6:	089b      	lsreq	r3, r3, #2
 801ddc8:	3002      	addeq	r0, #2
 801ddca:	07da      	lsls	r2, r3, #31
 801ddcc:	d403      	bmi.n	801ddd6 <__lo0bits+0x4e>
 801ddce:	085b      	lsrs	r3, r3, #1
 801ddd0:	f100 0001 	add.w	r0, r0, #1
 801ddd4:	d005      	beq.n	801dde2 <__lo0bits+0x5a>
 801ddd6:	600b      	str	r3, [r1, #0]
 801ddd8:	4770      	bx	lr
 801ddda:	4610      	mov	r0, r2
 801dddc:	e7e9      	b.n	801ddb2 <__lo0bits+0x2a>
 801ddde:	2000      	movs	r0, #0
 801dde0:	4770      	bx	lr
 801dde2:	2020      	movs	r0, #32
 801dde4:	4770      	bx	lr
	...

0801dde8 <__i2b>:
 801dde8:	b510      	push	{r4, lr}
 801ddea:	460c      	mov	r4, r1
 801ddec:	2101      	movs	r1, #1
 801ddee:	f7ff feb9 	bl	801db64 <_Balloc>
 801ddf2:	4602      	mov	r2, r0
 801ddf4:	b928      	cbnz	r0, 801de02 <__i2b+0x1a>
 801ddf6:	4b05      	ldr	r3, [pc, #20]	; (801de0c <__i2b+0x24>)
 801ddf8:	4805      	ldr	r0, [pc, #20]	; (801de10 <__i2b+0x28>)
 801ddfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ddfe:	f000 fe0d 	bl	801ea1c <__assert_func>
 801de02:	2301      	movs	r3, #1
 801de04:	6144      	str	r4, [r0, #20]
 801de06:	6103      	str	r3, [r0, #16]
 801de08:	bd10      	pop	{r4, pc}
 801de0a:	bf00      	nop
 801de0c:	0801ffa0 	.word	0x0801ffa0
 801de10:	0802002c 	.word	0x0802002c

0801de14 <__multiply>:
 801de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de18:	4691      	mov	r9, r2
 801de1a:	690a      	ldr	r2, [r1, #16]
 801de1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801de20:	429a      	cmp	r2, r3
 801de22:	bfb8      	it	lt
 801de24:	460b      	movlt	r3, r1
 801de26:	460c      	mov	r4, r1
 801de28:	bfbc      	itt	lt
 801de2a:	464c      	movlt	r4, r9
 801de2c:	4699      	movlt	r9, r3
 801de2e:	6927      	ldr	r7, [r4, #16]
 801de30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801de34:	68a3      	ldr	r3, [r4, #8]
 801de36:	6861      	ldr	r1, [r4, #4]
 801de38:	eb07 060a 	add.w	r6, r7, sl
 801de3c:	42b3      	cmp	r3, r6
 801de3e:	b085      	sub	sp, #20
 801de40:	bfb8      	it	lt
 801de42:	3101      	addlt	r1, #1
 801de44:	f7ff fe8e 	bl	801db64 <_Balloc>
 801de48:	b930      	cbnz	r0, 801de58 <__multiply+0x44>
 801de4a:	4602      	mov	r2, r0
 801de4c:	4b44      	ldr	r3, [pc, #272]	; (801df60 <__multiply+0x14c>)
 801de4e:	4845      	ldr	r0, [pc, #276]	; (801df64 <__multiply+0x150>)
 801de50:	f240 115d 	movw	r1, #349	; 0x15d
 801de54:	f000 fde2 	bl	801ea1c <__assert_func>
 801de58:	f100 0514 	add.w	r5, r0, #20
 801de5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801de60:	462b      	mov	r3, r5
 801de62:	2200      	movs	r2, #0
 801de64:	4543      	cmp	r3, r8
 801de66:	d321      	bcc.n	801deac <__multiply+0x98>
 801de68:	f104 0314 	add.w	r3, r4, #20
 801de6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801de70:	f109 0314 	add.w	r3, r9, #20
 801de74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801de78:	9202      	str	r2, [sp, #8]
 801de7a:	1b3a      	subs	r2, r7, r4
 801de7c:	3a15      	subs	r2, #21
 801de7e:	f022 0203 	bic.w	r2, r2, #3
 801de82:	3204      	adds	r2, #4
 801de84:	f104 0115 	add.w	r1, r4, #21
 801de88:	428f      	cmp	r7, r1
 801de8a:	bf38      	it	cc
 801de8c:	2204      	movcc	r2, #4
 801de8e:	9201      	str	r2, [sp, #4]
 801de90:	9a02      	ldr	r2, [sp, #8]
 801de92:	9303      	str	r3, [sp, #12]
 801de94:	429a      	cmp	r2, r3
 801de96:	d80c      	bhi.n	801deb2 <__multiply+0x9e>
 801de98:	2e00      	cmp	r6, #0
 801de9a:	dd03      	ble.n	801dea4 <__multiply+0x90>
 801de9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d05a      	beq.n	801df5a <__multiply+0x146>
 801dea4:	6106      	str	r6, [r0, #16]
 801dea6:	b005      	add	sp, #20
 801dea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deac:	f843 2b04 	str.w	r2, [r3], #4
 801deb0:	e7d8      	b.n	801de64 <__multiply+0x50>
 801deb2:	f8b3 a000 	ldrh.w	sl, [r3]
 801deb6:	f1ba 0f00 	cmp.w	sl, #0
 801deba:	d024      	beq.n	801df06 <__multiply+0xf2>
 801debc:	f104 0e14 	add.w	lr, r4, #20
 801dec0:	46a9      	mov	r9, r5
 801dec2:	f04f 0c00 	mov.w	ip, #0
 801dec6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801deca:	f8d9 1000 	ldr.w	r1, [r9]
 801dece:	fa1f fb82 	uxth.w	fp, r2
 801ded2:	b289      	uxth	r1, r1
 801ded4:	fb0a 110b 	mla	r1, sl, fp, r1
 801ded8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801dedc:	f8d9 2000 	ldr.w	r2, [r9]
 801dee0:	4461      	add	r1, ip
 801dee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dee6:	fb0a c20b 	mla	r2, sl, fp, ip
 801deea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801deee:	b289      	uxth	r1, r1
 801def0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801def4:	4577      	cmp	r7, lr
 801def6:	f849 1b04 	str.w	r1, [r9], #4
 801defa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801defe:	d8e2      	bhi.n	801dec6 <__multiply+0xb2>
 801df00:	9a01      	ldr	r2, [sp, #4]
 801df02:	f845 c002 	str.w	ip, [r5, r2]
 801df06:	9a03      	ldr	r2, [sp, #12]
 801df08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801df0c:	3304      	adds	r3, #4
 801df0e:	f1b9 0f00 	cmp.w	r9, #0
 801df12:	d020      	beq.n	801df56 <__multiply+0x142>
 801df14:	6829      	ldr	r1, [r5, #0]
 801df16:	f104 0c14 	add.w	ip, r4, #20
 801df1a:	46ae      	mov	lr, r5
 801df1c:	f04f 0a00 	mov.w	sl, #0
 801df20:	f8bc b000 	ldrh.w	fp, [ip]
 801df24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801df28:	fb09 220b 	mla	r2, r9, fp, r2
 801df2c:	4492      	add	sl, r2
 801df2e:	b289      	uxth	r1, r1
 801df30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801df34:	f84e 1b04 	str.w	r1, [lr], #4
 801df38:	f85c 2b04 	ldr.w	r2, [ip], #4
 801df3c:	f8be 1000 	ldrh.w	r1, [lr]
 801df40:	0c12      	lsrs	r2, r2, #16
 801df42:	fb09 1102 	mla	r1, r9, r2, r1
 801df46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801df4a:	4567      	cmp	r7, ip
 801df4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801df50:	d8e6      	bhi.n	801df20 <__multiply+0x10c>
 801df52:	9a01      	ldr	r2, [sp, #4]
 801df54:	50a9      	str	r1, [r5, r2]
 801df56:	3504      	adds	r5, #4
 801df58:	e79a      	b.n	801de90 <__multiply+0x7c>
 801df5a:	3e01      	subs	r6, #1
 801df5c:	e79c      	b.n	801de98 <__multiply+0x84>
 801df5e:	bf00      	nop
 801df60:	0801ffa0 	.word	0x0801ffa0
 801df64:	0802002c 	.word	0x0802002c

0801df68 <__pow5mult>:
 801df68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df6c:	4615      	mov	r5, r2
 801df6e:	f012 0203 	ands.w	r2, r2, #3
 801df72:	4606      	mov	r6, r0
 801df74:	460f      	mov	r7, r1
 801df76:	d007      	beq.n	801df88 <__pow5mult+0x20>
 801df78:	4c25      	ldr	r4, [pc, #148]	; (801e010 <__pow5mult+0xa8>)
 801df7a:	3a01      	subs	r2, #1
 801df7c:	2300      	movs	r3, #0
 801df7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801df82:	f7ff fe51 	bl	801dc28 <__multadd>
 801df86:	4607      	mov	r7, r0
 801df88:	10ad      	asrs	r5, r5, #2
 801df8a:	d03d      	beq.n	801e008 <__pow5mult+0xa0>
 801df8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801df8e:	b97c      	cbnz	r4, 801dfb0 <__pow5mult+0x48>
 801df90:	2010      	movs	r0, #16
 801df92:	f7ff fdcd 	bl	801db30 <malloc>
 801df96:	4602      	mov	r2, r0
 801df98:	6270      	str	r0, [r6, #36]	; 0x24
 801df9a:	b928      	cbnz	r0, 801dfa8 <__pow5mult+0x40>
 801df9c:	4b1d      	ldr	r3, [pc, #116]	; (801e014 <__pow5mult+0xac>)
 801df9e:	481e      	ldr	r0, [pc, #120]	; (801e018 <__pow5mult+0xb0>)
 801dfa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dfa4:	f000 fd3a 	bl	801ea1c <__assert_func>
 801dfa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dfac:	6004      	str	r4, [r0, #0]
 801dfae:	60c4      	str	r4, [r0, #12]
 801dfb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dfb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dfb8:	b94c      	cbnz	r4, 801dfce <__pow5mult+0x66>
 801dfba:	f240 2171 	movw	r1, #625	; 0x271
 801dfbe:	4630      	mov	r0, r6
 801dfc0:	f7ff ff12 	bl	801dde8 <__i2b>
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	f8c8 0008 	str.w	r0, [r8, #8]
 801dfca:	4604      	mov	r4, r0
 801dfcc:	6003      	str	r3, [r0, #0]
 801dfce:	f04f 0900 	mov.w	r9, #0
 801dfd2:	07eb      	lsls	r3, r5, #31
 801dfd4:	d50a      	bpl.n	801dfec <__pow5mult+0x84>
 801dfd6:	4639      	mov	r1, r7
 801dfd8:	4622      	mov	r2, r4
 801dfda:	4630      	mov	r0, r6
 801dfdc:	f7ff ff1a 	bl	801de14 <__multiply>
 801dfe0:	4639      	mov	r1, r7
 801dfe2:	4680      	mov	r8, r0
 801dfe4:	4630      	mov	r0, r6
 801dfe6:	f7ff fdfd 	bl	801dbe4 <_Bfree>
 801dfea:	4647      	mov	r7, r8
 801dfec:	106d      	asrs	r5, r5, #1
 801dfee:	d00b      	beq.n	801e008 <__pow5mult+0xa0>
 801dff0:	6820      	ldr	r0, [r4, #0]
 801dff2:	b938      	cbnz	r0, 801e004 <__pow5mult+0x9c>
 801dff4:	4622      	mov	r2, r4
 801dff6:	4621      	mov	r1, r4
 801dff8:	4630      	mov	r0, r6
 801dffa:	f7ff ff0b 	bl	801de14 <__multiply>
 801dffe:	6020      	str	r0, [r4, #0]
 801e000:	f8c0 9000 	str.w	r9, [r0]
 801e004:	4604      	mov	r4, r0
 801e006:	e7e4      	b.n	801dfd2 <__pow5mult+0x6a>
 801e008:	4638      	mov	r0, r7
 801e00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e00e:	bf00      	nop
 801e010:	08020178 	.word	0x08020178
 801e014:	0801ff2e 	.word	0x0801ff2e
 801e018:	0802002c 	.word	0x0802002c

0801e01c <__lshift>:
 801e01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e020:	460c      	mov	r4, r1
 801e022:	6849      	ldr	r1, [r1, #4]
 801e024:	6923      	ldr	r3, [r4, #16]
 801e026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e02a:	68a3      	ldr	r3, [r4, #8]
 801e02c:	4607      	mov	r7, r0
 801e02e:	4691      	mov	r9, r2
 801e030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e034:	f108 0601 	add.w	r6, r8, #1
 801e038:	42b3      	cmp	r3, r6
 801e03a:	db0b      	blt.n	801e054 <__lshift+0x38>
 801e03c:	4638      	mov	r0, r7
 801e03e:	f7ff fd91 	bl	801db64 <_Balloc>
 801e042:	4605      	mov	r5, r0
 801e044:	b948      	cbnz	r0, 801e05a <__lshift+0x3e>
 801e046:	4602      	mov	r2, r0
 801e048:	4b2a      	ldr	r3, [pc, #168]	; (801e0f4 <__lshift+0xd8>)
 801e04a:	482b      	ldr	r0, [pc, #172]	; (801e0f8 <__lshift+0xdc>)
 801e04c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e050:	f000 fce4 	bl	801ea1c <__assert_func>
 801e054:	3101      	adds	r1, #1
 801e056:	005b      	lsls	r3, r3, #1
 801e058:	e7ee      	b.n	801e038 <__lshift+0x1c>
 801e05a:	2300      	movs	r3, #0
 801e05c:	f100 0114 	add.w	r1, r0, #20
 801e060:	f100 0210 	add.w	r2, r0, #16
 801e064:	4618      	mov	r0, r3
 801e066:	4553      	cmp	r3, sl
 801e068:	db37      	blt.n	801e0da <__lshift+0xbe>
 801e06a:	6920      	ldr	r0, [r4, #16]
 801e06c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e070:	f104 0314 	add.w	r3, r4, #20
 801e074:	f019 091f 	ands.w	r9, r9, #31
 801e078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e07c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e080:	d02f      	beq.n	801e0e2 <__lshift+0xc6>
 801e082:	f1c9 0e20 	rsb	lr, r9, #32
 801e086:	468a      	mov	sl, r1
 801e088:	f04f 0c00 	mov.w	ip, #0
 801e08c:	681a      	ldr	r2, [r3, #0]
 801e08e:	fa02 f209 	lsl.w	r2, r2, r9
 801e092:	ea42 020c 	orr.w	r2, r2, ip
 801e096:	f84a 2b04 	str.w	r2, [sl], #4
 801e09a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e09e:	4298      	cmp	r0, r3
 801e0a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e0a4:	d8f2      	bhi.n	801e08c <__lshift+0x70>
 801e0a6:	1b03      	subs	r3, r0, r4
 801e0a8:	3b15      	subs	r3, #21
 801e0aa:	f023 0303 	bic.w	r3, r3, #3
 801e0ae:	3304      	adds	r3, #4
 801e0b0:	f104 0215 	add.w	r2, r4, #21
 801e0b4:	4290      	cmp	r0, r2
 801e0b6:	bf38      	it	cc
 801e0b8:	2304      	movcc	r3, #4
 801e0ba:	f841 c003 	str.w	ip, [r1, r3]
 801e0be:	f1bc 0f00 	cmp.w	ip, #0
 801e0c2:	d001      	beq.n	801e0c8 <__lshift+0xac>
 801e0c4:	f108 0602 	add.w	r6, r8, #2
 801e0c8:	3e01      	subs	r6, #1
 801e0ca:	4638      	mov	r0, r7
 801e0cc:	612e      	str	r6, [r5, #16]
 801e0ce:	4621      	mov	r1, r4
 801e0d0:	f7ff fd88 	bl	801dbe4 <_Bfree>
 801e0d4:	4628      	mov	r0, r5
 801e0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0da:	f842 0f04 	str.w	r0, [r2, #4]!
 801e0de:	3301      	adds	r3, #1
 801e0e0:	e7c1      	b.n	801e066 <__lshift+0x4a>
 801e0e2:	3904      	subs	r1, #4
 801e0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 801e0ec:	4298      	cmp	r0, r3
 801e0ee:	d8f9      	bhi.n	801e0e4 <__lshift+0xc8>
 801e0f0:	e7ea      	b.n	801e0c8 <__lshift+0xac>
 801e0f2:	bf00      	nop
 801e0f4:	0801ffa0 	.word	0x0801ffa0
 801e0f8:	0802002c 	.word	0x0802002c

0801e0fc <__mcmp>:
 801e0fc:	b530      	push	{r4, r5, lr}
 801e0fe:	6902      	ldr	r2, [r0, #16]
 801e100:	690c      	ldr	r4, [r1, #16]
 801e102:	1b12      	subs	r2, r2, r4
 801e104:	d10e      	bne.n	801e124 <__mcmp+0x28>
 801e106:	f100 0314 	add.w	r3, r0, #20
 801e10a:	3114      	adds	r1, #20
 801e10c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e114:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e118:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e11c:	42a5      	cmp	r5, r4
 801e11e:	d003      	beq.n	801e128 <__mcmp+0x2c>
 801e120:	d305      	bcc.n	801e12e <__mcmp+0x32>
 801e122:	2201      	movs	r2, #1
 801e124:	4610      	mov	r0, r2
 801e126:	bd30      	pop	{r4, r5, pc}
 801e128:	4283      	cmp	r3, r0
 801e12a:	d3f3      	bcc.n	801e114 <__mcmp+0x18>
 801e12c:	e7fa      	b.n	801e124 <__mcmp+0x28>
 801e12e:	f04f 32ff 	mov.w	r2, #4294967295
 801e132:	e7f7      	b.n	801e124 <__mcmp+0x28>

0801e134 <__mdiff>:
 801e134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e138:	460c      	mov	r4, r1
 801e13a:	4606      	mov	r6, r0
 801e13c:	4611      	mov	r1, r2
 801e13e:	4620      	mov	r0, r4
 801e140:	4690      	mov	r8, r2
 801e142:	f7ff ffdb 	bl	801e0fc <__mcmp>
 801e146:	1e05      	subs	r5, r0, #0
 801e148:	d110      	bne.n	801e16c <__mdiff+0x38>
 801e14a:	4629      	mov	r1, r5
 801e14c:	4630      	mov	r0, r6
 801e14e:	f7ff fd09 	bl	801db64 <_Balloc>
 801e152:	b930      	cbnz	r0, 801e162 <__mdiff+0x2e>
 801e154:	4b3a      	ldr	r3, [pc, #232]	; (801e240 <__mdiff+0x10c>)
 801e156:	4602      	mov	r2, r0
 801e158:	f240 2132 	movw	r1, #562	; 0x232
 801e15c:	4839      	ldr	r0, [pc, #228]	; (801e244 <__mdiff+0x110>)
 801e15e:	f000 fc5d 	bl	801ea1c <__assert_func>
 801e162:	2301      	movs	r3, #1
 801e164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e16c:	bfa4      	itt	ge
 801e16e:	4643      	movge	r3, r8
 801e170:	46a0      	movge	r8, r4
 801e172:	4630      	mov	r0, r6
 801e174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e178:	bfa6      	itte	ge
 801e17a:	461c      	movge	r4, r3
 801e17c:	2500      	movge	r5, #0
 801e17e:	2501      	movlt	r5, #1
 801e180:	f7ff fcf0 	bl	801db64 <_Balloc>
 801e184:	b920      	cbnz	r0, 801e190 <__mdiff+0x5c>
 801e186:	4b2e      	ldr	r3, [pc, #184]	; (801e240 <__mdiff+0x10c>)
 801e188:	4602      	mov	r2, r0
 801e18a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e18e:	e7e5      	b.n	801e15c <__mdiff+0x28>
 801e190:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e194:	6926      	ldr	r6, [r4, #16]
 801e196:	60c5      	str	r5, [r0, #12]
 801e198:	f104 0914 	add.w	r9, r4, #20
 801e19c:	f108 0514 	add.w	r5, r8, #20
 801e1a0:	f100 0e14 	add.w	lr, r0, #20
 801e1a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e1a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e1ac:	f108 0210 	add.w	r2, r8, #16
 801e1b0:	46f2      	mov	sl, lr
 801e1b2:	2100      	movs	r1, #0
 801e1b4:	f859 3b04 	ldr.w	r3, [r9], #4
 801e1b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e1bc:	fa1f f883 	uxth.w	r8, r3
 801e1c0:	fa11 f18b 	uxtah	r1, r1, fp
 801e1c4:	0c1b      	lsrs	r3, r3, #16
 801e1c6:	eba1 0808 	sub.w	r8, r1, r8
 801e1ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e1ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e1d2:	fa1f f888 	uxth.w	r8, r8
 801e1d6:	1419      	asrs	r1, r3, #16
 801e1d8:	454e      	cmp	r6, r9
 801e1da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e1de:	f84a 3b04 	str.w	r3, [sl], #4
 801e1e2:	d8e7      	bhi.n	801e1b4 <__mdiff+0x80>
 801e1e4:	1b33      	subs	r3, r6, r4
 801e1e6:	3b15      	subs	r3, #21
 801e1e8:	f023 0303 	bic.w	r3, r3, #3
 801e1ec:	3304      	adds	r3, #4
 801e1ee:	3415      	adds	r4, #21
 801e1f0:	42a6      	cmp	r6, r4
 801e1f2:	bf38      	it	cc
 801e1f4:	2304      	movcc	r3, #4
 801e1f6:	441d      	add	r5, r3
 801e1f8:	4473      	add	r3, lr
 801e1fa:	469e      	mov	lr, r3
 801e1fc:	462e      	mov	r6, r5
 801e1fe:	4566      	cmp	r6, ip
 801e200:	d30e      	bcc.n	801e220 <__mdiff+0xec>
 801e202:	f10c 0203 	add.w	r2, ip, #3
 801e206:	1b52      	subs	r2, r2, r5
 801e208:	f022 0203 	bic.w	r2, r2, #3
 801e20c:	3d03      	subs	r5, #3
 801e20e:	45ac      	cmp	ip, r5
 801e210:	bf38      	it	cc
 801e212:	2200      	movcc	r2, #0
 801e214:	441a      	add	r2, r3
 801e216:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e21a:	b17b      	cbz	r3, 801e23c <__mdiff+0x108>
 801e21c:	6107      	str	r7, [r0, #16]
 801e21e:	e7a3      	b.n	801e168 <__mdiff+0x34>
 801e220:	f856 8b04 	ldr.w	r8, [r6], #4
 801e224:	fa11 f288 	uxtah	r2, r1, r8
 801e228:	1414      	asrs	r4, r2, #16
 801e22a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e22e:	b292      	uxth	r2, r2
 801e230:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e234:	f84e 2b04 	str.w	r2, [lr], #4
 801e238:	1421      	asrs	r1, r4, #16
 801e23a:	e7e0      	b.n	801e1fe <__mdiff+0xca>
 801e23c:	3f01      	subs	r7, #1
 801e23e:	e7ea      	b.n	801e216 <__mdiff+0xe2>
 801e240:	0801ffa0 	.word	0x0801ffa0
 801e244:	0802002c 	.word	0x0802002c

0801e248 <__ulp>:
 801e248:	b082      	sub	sp, #8
 801e24a:	ed8d 0b00 	vstr	d0, [sp]
 801e24e:	9b01      	ldr	r3, [sp, #4]
 801e250:	4912      	ldr	r1, [pc, #72]	; (801e29c <__ulp+0x54>)
 801e252:	4019      	ands	r1, r3
 801e254:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e258:	2900      	cmp	r1, #0
 801e25a:	dd05      	ble.n	801e268 <__ulp+0x20>
 801e25c:	2200      	movs	r2, #0
 801e25e:	460b      	mov	r3, r1
 801e260:	ec43 2b10 	vmov	d0, r2, r3
 801e264:	b002      	add	sp, #8
 801e266:	4770      	bx	lr
 801e268:	4249      	negs	r1, r1
 801e26a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e26e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e272:	f04f 0200 	mov.w	r2, #0
 801e276:	f04f 0300 	mov.w	r3, #0
 801e27a:	da04      	bge.n	801e286 <__ulp+0x3e>
 801e27c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e280:	fa41 f300 	asr.w	r3, r1, r0
 801e284:	e7ec      	b.n	801e260 <__ulp+0x18>
 801e286:	f1a0 0114 	sub.w	r1, r0, #20
 801e28a:	291e      	cmp	r1, #30
 801e28c:	bfda      	itte	le
 801e28e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e292:	fa20 f101 	lsrle.w	r1, r0, r1
 801e296:	2101      	movgt	r1, #1
 801e298:	460a      	mov	r2, r1
 801e29a:	e7e1      	b.n	801e260 <__ulp+0x18>
 801e29c:	7ff00000 	.word	0x7ff00000

0801e2a0 <__b2d>:
 801e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2a2:	6905      	ldr	r5, [r0, #16]
 801e2a4:	f100 0714 	add.w	r7, r0, #20
 801e2a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e2ac:	1f2e      	subs	r6, r5, #4
 801e2ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	f7ff fd48 	bl	801dd48 <__hi0bits>
 801e2b8:	f1c0 0320 	rsb	r3, r0, #32
 801e2bc:	280a      	cmp	r0, #10
 801e2be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e33c <__b2d+0x9c>
 801e2c2:	600b      	str	r3, [r1, #0]
 801e2c4:	dc14      	bgt.n	801e2f0 <__b2d+0x50>
 801e2c6:	f1c0 0e0b 	rsb	lr, r0, #11
 801e2ca:	fa24 f10e 	lsr.w	r1, r4, lr
 801e2ce:	42b7      	cmp	r7, r6
 801e2d0:	ea41 030c 	orr.w	r3, r1, ip
 801e2d4:	bf34      	ite	cc
 801e2d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e2da:	2100      	movcs	r1, #0
 801e2dc:	3015      	adds	r0, #21
 801e2de:	fa04 f000 	lsl.w	r0, r4, r0
 801e2e2:	fa21 f10e 	lsr.w	r1, r1, lr
 801e2e6:	ea40 0201 	orr.w	r2, r0, r1
 801e2ea:	ec43 2b10 	vmov	d0, r2, r3
 801e2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2f0:	42b7      	cmp	r7, r6
 801e2f2:	bf3a      	itte	cc
 801e2f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e2f8:	f1a5 0608 	subcc.w	r6, r5, #8
 801e2fc:	2100      	movcs	r1, #0
 801e2fe:	380b      	subs	r0, #11
 801e300:	d017      	beq.n	801e332 <__b2d+0x92>
 801e302:	f1c0 0c20 	rsb	ip, r0, #32
 801e306:	fa04 f500 	lsl.w	r5, r4, r0
 801e30a:	42be      	cmp	r6, r7
 801e30c:	fa21 f40c 	lsr.w	r4, r1, ip
 801e310:	ea45 0504 	orr.w	r5, r5, r4
 801e314:	bf8c      	ite	hi
 801e316:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e31a:	2400      	movls	r4, #0
 801e31c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e320:	fa01 f000 	lsl.w	r0, r1, r0
 801e324:	fa24 f40c 	lsr.w	r4, r4, ip
 801e328:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e32c:	ea40 0204 	orr.w	r2, r0, r4
 801e330:	e7db      	b.n	801e2ea <__b2d+0x4a>
 801e332:	ea44 030c 	orr.w	r3, r4, ip
 801e336:	460a      	mov	r2, r1
 801e338:	e7d7      	b.n	801e2ea <__b2d+0x4a>
 801e33a:	bf00      	nop
 801e33c:	3ff00000 	.word	0x3ff00000

0801e340 <__d2b>:
 801e340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e344:	4689      	mov	r9, r1
 801e346:	2101      	movs	r1, #1
 801e348:	ec57 6b10 	vmov	r6, r7, d0
 801e34c:	4690      	mov	r8, r2
 801e34e:	f7ff fc09 	bl	801db64 <_Balloc>
 801e352:	4604      	mov	r4, r0
 801e354:	b930      	cbnz	r0, 801e364 <__d2b+0x24>
 801e356:	4602      	mov	r2, r0
 801e358:	4b25      	ldr	r3, [pc, #148]	; (801e3f0 <__d2b+0xb0>)
 801e35a:	4826      	ldr	r0, [pc, #152]	; (801e3f4 <__d2b+0xb4>)
 801e35c:	f240 310a 	movw	r1, #778	; 0x30a
 801e360:	f000 fb5c 	bl	801ea1c <__assert_func>
 801e364:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e36c:	bb35      	cbnz	r5, 801e3bc <__d2b+0x7c>
 801e36e:	2e00      	cmp	r6, #0
 801e370:	9301      	str	r3, [sp, #4]
 801e372:	d028      	beq.n	801e3c6 <__d2b+0x86>
 801e374:	4668      	mov	r0, sp
 801e376:	9600      	str	r6, [sp, #0]
 801e378:	f7ff fd06 	bl	801dd88 <__lo0bits>
 801e37c:	9900      	ldr	r1, [sp, #0]
 801e37e:	b300      	cbz	r0, 801e3c2 <__d2b+0x82>
 801e380:	9a01      	ldr	r2, [sp, #4]
 801e382:	f1c0 0320 	rsb	r3, r0, #32
 801e386:	fa02 f303 	lsl.w	r3, r2, r3
 801e38a:	430b      	orrs	r3, r1
 801e38c:	40c2      	lsrs	r2, r0
 801e38e:	6163      	str	r3, [r4, #20]
 801e390:	9201      	str	r2, [sp, #4]
 801e392:	9b01      	ldr	r3, [sp, #4]
 801e394:	61a3      	str	r3, [r4, #24]
 801e396:	2b00      	cmp	r3, #0
 801e398:	bf14      	ite	ne
 801e39a:	2202      	movne	r2, #2
 801e39c:	2201      	moveq	r2, #1
 801e39e:	6122      	str	r2, [r4, #16]
 801e3a0:	b1d5      	cbz	r5, 801e3d8 <__d2b+0x98>
 801e3a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e3a6:	4405      	add	r5, r0
 801e3a8:	f8c9 5000 	str.w	r5, [r9]
 801e3ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e3b0:	f8c8 0000 	str.w	r0, [r8]
 801e3b4:	4620      	mov	r0, r4
 801e3b6:	b003      	add	sp, #12
 801e3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e3c0:	e7d5      	b.n	801e36e <__d2b+0x2e>
 801e3c2:	6161      	str	r1, [r4, #20]
 801e3c4:	e7e5      	b.n	801e392 <__d2b+0x52>
 801e3c6:	a801      	add	r0, sp, #4
 801e3c8:	f7ff fcde 	bl	801dd88 <__lo0bits>
 801e3cc:	9b01      	ldr	r3, [sp, #4]
 801e3ce:	6163      	str	r3, [r4, #20]
 801e3d0:	2201      	movs	r2, #1
 801e3d2:	6122      	str	r2, [r4, #16]
 801e3d4:	3020      	adds	r0, #32
 801e3d6:	e7e3      	b.n	801e3a0 <__d2b+0x60>
 801e3d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e3dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e3e0:	f8c9 0000 	str.w	r0, [r9]
 801e3e4:	6918      	ldr	r0, [r3, #16]
 801e3e6:	f7ff fcaf 	bl	801dd48 <__hi0bits>
 801e3ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e3ee:	e7df      	b.n	801e3b0 <__d2b+0x70>
 801e3f0:	0801ffa0 	.word	0x0801ffa0
 801e3f4:	0802002c 	.word	0x0802002c

0801e3f8 <__ratio>:
 801e3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3fc:	4688      	mov	r8, r1
 801e3fe:	4669      	mov	r1, sp
 801e400:	4681      	mov	r9, r0
 801e402:	f7ff ff4d 	bl	801e2a0 <__b2d>
 801e406:	a901      	add	r1, sp, #4
 801e408:	4640      	mov	r0, r8
 801e40a:	ec55 4b10 	vmov	r4, r5, d0
 801e40e:	ee10 aa10 	vmov	sl, s0
 801e412:	f7ff ff45 	bl	801e2a0 <__b2d>
 801e416:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e41a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e41e:	1a59      	subs	r1, r3, r1
 801e420:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e424:	1ad3      	subs	r3, r2, r3
 801e426:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e42a:	ec57 6b10 	vmov	r6, r7, d0
 801e42e:	2b00      	cmp	r3, #0
 801e430:	bfd6      	itet	le
 801e432:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e436:	462a      	movgt	r2, r5
 801e438:	463a      	movle	r2, r7
 801e43a:	46ab      	mov	fp, r5
 801e43c:	bfd6      	itet	le
 801e43e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801e442:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801e446:	ee00 3a90 	vmovle	s1, r3
 801e44a:	ec4b ab17 	vmov	d7, sl, fp
 801e44e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801e452:	b003      	add	sp, #12
 801e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e458 <__copybits>:
 801e458:	3901      	subs	r1, #1
 801e45a:	b570      	push	{r4, r5, r6, lr}
 801e45c:	1149      	asrs	r1, r1, #5
 801e45e:	6914      	ldr	r4, [r2, #16]
 801e460:	3101      	adds	r1, #1
 801e462:	f102 0314 	add.w	r3, r2, #20
 801e466:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e46a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e46e:	1f05      	subs	r5, r0, #4
 801e470:	42a3      	cmp	r3, r4
 801e472:	d30c      	bcc.n	801e48e <__copybits+0x36>
 801e474:	1aa3      	subs	r3, r4, r2
 801e476:	3b11      	subs	r3, #17
 801e478:	f023 0303 	bic.w	r3, r3, #3
 801e47c:	3211      	adds	r2, #17
 801e47e:	42a2      	cmp	r2, r4
 801e480:	bf88      	it	hi
 801e482:	2300      	movhi	r3, #0
 801e484:	4418      	add	r0, r3
 801e486:	2300      	movs	r3, #0
 801e488:	4288      	cmp	r0, r1
 801e48a:	d305      	bcc.n	801e498 <__copybits+0x40>
 801e48c:	bd70      	pop	{r4, r5, r6, pc}
 801e48e:	f853 6b04 	ldr.w	r6, [r3], #4
 801e492:	f845 6f04 	str.w	r6, [r5, #4]!
 801e496:	e7eb      	b.n	801e470 <__copybits+0x18>
 801e498:	f840 3b04 	str.w	r3, [r0], #4
 801e49c:	e7f4      	b.n	801e488 <__copybits+0x30>

0801e49e <__any_on>:
 801e49e:	f100 0214 	add.w	r2, r0, #20
 801e4a2:	6900      	ldr	r0, [r0, #16]
 801e4a4:	114b      	asrs	r3, r1, #5
 801e4a6:	4298      	cmp	r0, r3
 801e4a8:	b510      	push	{r4, lr}
 801e4aa:	db11      	blt.n	801e4d0 <__any_on+0x32>
 801e4ac:	dd0a      	ble.n	801e4c4 <__any_on+0x26>
 801e4ae:	f011 011f 	ands.w	r1, r1, #31
 801e4b2:	d007      	beq.n	801e4c4 <__any_on+0x26>
 801e4b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e4b8:	fa24 f001 	lsr.w	r0, r4, r1
 801e4bc:	fa00 f101 	lsl.w	r1, r0, r1
 801e4c0:	428c      	cmp	r4, r1
 801e4c2:	d10b      	bne.n	801e4dc <__any_on+0x3e>
 801e4c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e4c8:	4293      	cmp	r3, r2
 801e4ca:	d803      	bhi.n	801e4d4 <__any_on+0x36>
 801e4cc:	2000      	movs	r0, #0
 801e4ce:	bd10      	pop	{r4, pc}
 801e4d0:	4603      	mov	r3, r0
 801e4d2:	e7f7      	b.n	801e4c4 <__any_on+0x26>
 801e4d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e4d8:	2900      	cmp	r1, #0
 801e4da:	d0f5      	beq.n	801e4c8 <__any_on+0x2a>
 801e4dc:	2001      	movs	r0, #1
 801e4de:	e7f6      	b.n	801e4ce <__any_on+0x30>

0801e4e0 <_calloc_r>:
 801e4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e4e2:	fba1 2402 	umull	r2, r4, r1, r2
 801e4e6:	b94c      	cbnz	r4, 801e4fc <_calloc_r+0x1c>
 801e4e8:	4611      	mov	r1, r2
 801e4ea:	9201      	str	r2, [sp, #4]
 801e4ec:	f000 f87a 	bl	801e5e4 <_malloc_r>
 801e4f0:	9a01      	ldr	r2, [sp, #4]
 801e4f2:	4605      	mov	r5, r0
 801e4f4:	b930      	cbnz	r0, 801e504 <_calloc_r+0x24>
 801e4f6:	4628      	mov	r0, r5
 801e4f8:	b003      	add	sp, #12
 801e4fa:	bd30      	pop	{r4, r5, pc}
 801e4fc:	220c      	movs	r2, #12
 801e4fe:	6002      	str	r2, [r0, #0]
 801e500:	2500      	movs	r5, #0
 801e502:	e7f8      	b.n	801e4f6 <_calloc_r+0x16>
 801e504:	4621      	mov	r1, r4
 801e506:	f7fc fc43 	bl	801ad90 <memset>
 801e50a:	e7f4      	b.n	801e4f6 <_calloc_r+0x16>

0801e50c <_free_r>:
 801e50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e50e:	2900      	cmp	r1, #0
 801e510:	d044      	beq.n	801e59c <_free_r+0x90>
 801e512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e516:	9001      	str	r0, [sp, #4]
 801e518:	2b00      	cmp	r3, #0
 801e51a:	f1a1 0404 	sub.w	r4, r1, #4
 801e51e:	bfb8      	it	lt
 801e520:	18e4      	addlt	r4, r4, r3
 801e522:	f000 fc7f 	bl	801ee24 <__malloc_lock>
 801e526:	4a1e      	ldr	r2, [pc, #120]	; (801e5a0 <_free_r+0x94>)
 801e528:	9801      	ldr	r0, [sp, #4]
 801e52a:	6813      	ldr	r3, [r2, #0]
 801e52c:	b933      	cbnz	r3, 801e53c <_free_r+0x30>
 801e52e:	6063      	str	r3, [r4, #4]
 801e530:	6014      	str	r4, [r2, #0]
 801e532:	b003      	add	sp, #12
 801e534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e538:	f000 bc7a 	b.w	801ee30 <__malloc_unlock>
 801e53c:	42a3      	cmp	r3, r4
 801e53e:	d908      	bls.n	801e552 <_free_r+0x46>
 801e540:	6825      	ldr	r5, [r4, #0]
 801e542:	1961      	adds	r1, r4, r5
 801e544:	428b      	cmp	r3, r1
 801e546:	bf01      	itttt	eq
 801e548:	6819      	ldreq	r1, [r3, #0]
 801e54a:	685b      	ldreq	r3, [r3, #4]
 801e54c:	1949      	addeq	r1, r1, r5
 801e54e:	6021      	streq	r1, [r4, #0]
 801e550:	e7ed      	b.n	801e52e <_free_r+0x22>
 801e552:	461a      	mov	r2, r3
 801e554:	685b      	ldr	r3, [r3, #4]
 801e556:	b10b      	cbz	r3, 801e55c <_free_r+0x50>
 801e558:	42a3      	cmp	r3, r4
 801e55a:	d9fa      	bls.n	801e552 <_free_r+0x46>
 801e55c:	6811      	ldr	r1, [r2, #0]
 801e55e:	1855      	adds	r5, r2, r1
 801e560:	42a5      	cmp	r5, r4
 801e562:	d10b      	bne.n	801e57c <_free_r+0x70>
 801e564:	6824      	ldr	r4, [r4, #0]
 801e566:	4421      	add	r1, r4
 801e568:	1854      	adds	r4, r2, r1
 801e56a:	42a3      	cmp	r3, r4
 801e56c:	6011      	str	r1, [r2, #0]
 801e56e:	d1e0      	bne.n	801e532 <_free_r+0x26>
 801e570:	681c      	ldr	r4, [r3, #0]
 801e572:	685b      	ldr	r3, [r3, #4]
 801e574:	6053      	str	r3, [r2, #4]
 801e576:	4421      	add	r1, r4
 801e578:	6011      	str	r1, [r2, #0]
 801e57a:	e7da      	b.n	801e532 <_free_r+0x26>
 801e57c:	d902      	bls.n	801e584 <_free_r+0x78>
 801e57e:	230c      	movs	r3, #12
 801e580:	6003      	str	r3, [r0, #0]
 801e582:	e7d6      	b.n	801e532 <_free_r+0x26>
 801e584:	6825      	ldr	r5, [r4, #0]
 801e586:	1961      	adds	r1, r4, r5
 801e588:	428b      	cmp	r3, r1
 801e58a:	bf04      	itt	eq
 801e58c:	6819      	ldreq	r1, [r3, #0]
 801e58e:	685b      	ldreq	r3, [r3, #4]
 801e590:	6063      	str	r3, [r4, #4]
 801e592:	bf04      	itt	eq
 801e594:	1949      	addeq	r1, r1, r5
 801e596:	6021      	streq	r1, [r4, #0]
 801e598:	6054      	str	r4, [r2, #4]
 801e59a:	e7ca      	b.n	801e532 <_free_r+0x26>
 801e59c:	b003      	add	sp, #12
 801e59e:	bd30      	pop	{r4, r5, pc}
 801e5a0:	240034f0 	.word	0x240034f0

0801e5a4 <sbrk_aligned>:
 801e5a4:	b570      	push	{r4, r5, r6, lr}
 801e5a6:	4e0e      	ldr	r6, [pc, #56]	; (801e5e0 <sbrk_aligned+0x3c>)
 801e5a8:	460c      	mov	r4, r1
 801e5aa:	6831      	ldr	r1, [r6, #0]
 801e5ac:	4605      	mov	r5, r0
 801e5ae:	b911      	cbnz	r1, 801e5b6 <sbrk_aligned+0x12>
 801e5b0:	f000 fa02 	bl	801e9b8 <_sbrk_r>
 801e5b4:	6030      	str	r0, [r6, #0]
 801e5b6:	4621      	mov	r1, r4
 801e5b8:	4628      	mov	r0, r5
 801e5ba:	f000 f9fd 	bl	801e9b8 <_sbrk_r>
 801e5be:	1c43      	adds	r3, r0, #1
 801e5c0:	d00a      	beq.n	801e5d8 <sbrk_aligned+0x34>
 801e5c2:	1cc4      	adds	r4, r0, #3
 801e5c4:	f024 0403 	bic.w	r4, r4, #3
 801e5c8:	42a0      	cmp	r0, r4
 801e5ca:	d007      	beq.n	801e5dc <sbrk_aligned+0x38>
 801e5cc:	1a21      	subs	r1, r4, r0
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	f000 f9f2 	bl	801e9b8 <_sbrk_r>
 801e5d4:	3001      	adds	r0, #1
 801e5d6:	d101      	bne.n	801e5dc <sbrk_aligned+0x38>
 801e5d8:	f04f 34ff 	mov.w	r4, #4294967295
 801e5dc:	4620      	mov	r0, r4
 801e5de:	bd70      	pop	{r4, r5, r6, pc}
 801e5e0:	240034f4 	.word	0x240034f4

0801e5e4 <_malloc_r>:
 801e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5e8:	1ccd      	adds	r5, r1, #3
 801e5ea:	f025 0503 	bic.w	r5, r5, #3
 801e5ee:	3508      	adds	r5, #8
 801e5f0:	2d0c      	cmp	r5, #12
 801e5f2:	bf38      	it	cc
 801e5f4:	250c      	movcc	r5, #12
 801e5f6:	2d00      	cmp	r5, #0
 801e5f8:	4607      	mov	r7, r0
 801e5fa:	db01      	blt.n	801e600 <_malloc_r+0x1c>
 801e5fc:	42a9      	cmp	r1, r5
 801e5fe:	d905      	bls.n	801e60c <_malloc_r+0x28>
 801e600:	230c      	movs	r3, #12
 801e602:	603b      	str	r3, [r7, #0]
 801e604:	2600      	movs	r6, #0
 801e606:	4630      	mov	r0, r6
 801e608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e60c:	4e2e      	ldr	r6, [pc, #184]	; (801e6c8 <_malloc_r+0xe4>)
 801e60e:	f000 fc09 	bl	801ee24 <__malloc_lock>
 801e612:	6833      	ldr	r3, [r6, #0]
 801e614:	461c      	mov	r4, r3
 801e616:	bb34      	cbnz	r4, 801e666 <_malloc_r+0x82>
 801e618:	4629      	mov	r1, r5
 801e61a:	4638      	mov	r0, r7
 801e61c:	f7ff ffc2 	bl	801e5a4 <sbrk_aligned>
 801e620:	1c43      	adds	r3, r0, #1
 801e622:	4604      	mov	r4, r0
 801e624:	d14d      	bne.n	801e6c2 <_malloc_r+0xde>
 801e626:	6834      	ldr	r4, [r6, #0]
 801e628:	4626      	mov	r6, r4
 801e62a:	2e00      	cmp	r6, #0
 801e62c:	d140      	bne.n	801e6b0 <_malloc_r+0xcc>
 801e62e:	6823      	ldr	r3, [r4, #0]
 801e630:	4631      	mov	r1, r6
 801e632:	4638      	mov	r0, r7
 801e634:	eb04 0803 	add.w	r8, r4, r3
 801e638:	f000 f9be 	bl	801e9b8 <_sbrk_r>
 801e63c:	4580      	cmp	r8, r0
 801e63e:	d13a      	bne.n	801e6b6 <_malloc_r+0xd2>
 801e640:	6821      	ldr	r1, [r4, #0]
 801e642:	3503      	adds	r5, #3
 801e644:	1a6d      	subs	r5, r5, r1
 801e646:	f025 0503 	bic.w	r5, r5, #3
 801e64a:	3508      	adds	r5, #8
 801e64c:	2d0c      	cmp	r5, #12
 801e64e:	bf38      	it	cc
 801e650:	250c      	movcc	r5, #12
 801e652:	4629      	mov	r1, r5
 801e654:	4638      	mov	r0, r7
 801e656:	f7ff ffa5 	bl	801e5a4 <sbrk_aligned>
 801e65a:	3001      	adds	r0, #1
 801e65c:	d02b      	beq.n	801e6b6 <_malloc_r+0xd2>
 801e65e:	6823      	ldr	r3, [r4, #0]
 801e660:	442b      	add	r3, r5
 801e662:	6023      	str	r3, [r4, #0]
 801e664:	e00e      	b.n	801e684 <_malloc_r+0xa0>
 801e666:	6822      	ldr	r2, [r4, #0]
 801e668:	1b52      	subs	r2, r2, r5
 801e66a:	d41e      	bmi.n	801e6aa <_malloc_r+0xc6>
 801e66c:	2a0b      	cmp	r2, #11
 801e66e:	d916      	bls.n	801e69e <_malloc_r+0xba>
 801e670:	1961      	adds	r1, r4, r5
 801e672:	42a3      	cmp	r3, r4
 801e674:	6025      	str	r5, [r4, #0]
 801e676:	bf18      	it	ne
 801e678:	6059      	strne	r1, [r3, #4]
 801e67a:	6863      	ldr	r3, [r4, #4]
 801e67c:	bf08      	it	eq
 801e67e:	6031      	streq	r1, [r6, #0]
 801e680:	5162      	str	r2, [r4, r5]
 801e682:	604b      	str	r3, [r1, #4]
 801e684:	4638      	mov	r0, r7
 801e686:	f104 060b 	add.w	r6, r4, #11
 801e68a:	f000 fbd1 	bl	801ee30 <__malloc_unlock>
 801e68e:	f026 0607 	bic.w	r6, r6, #7
 801e692:	1d23      	adds	r3, r4, #4
 801e694:	1af2      	subs	r2, r6, r3
 801e696:	d0b6      	beq.n	801e606 <_malloc_r+0x22>
 801e698:	1b9b      	subs	r3, r3, r6
 801e69a:	50a3      	str	r3, [r4, r2]
 801e69c:	e7b3      	b.n	801e606 <_malloc_r+0x22>
 801e69e:	6862      	ldr	r2, [r4, #4]
 801e6a0:	42a3      	cmp	r3, r4
 801e6a2:	bf0c      	ite	eq
 801e6a4:	6032      	streq	r2, [r6, #0]
 801e6a6:	605a      	strne	r2, [r3, #4]
 801e6a8:	e7ec      	b.n	801e684 <_malloc_r+0xa0>
 801e6aa:	4623      	mov	r3, r4
 801e6ac:	6864      	ldr	r4, [r4, #4]
 801e6ae:	e7b2      	b.n	801e616 <_malloc_r+0x32>
 801e6b0:	4634      	mov	r4, r6
 801e6b2:	6876      	ldr	r6, [r6, #4]
 801e6b4:	e7b9      	b.n	801e62a <_malloc_r+0x46>
 801e6b6:	230c      	movs	r3, #12
 801e6b8:	603b      	str	r3, [r7, #0]
 801e6ba:	4638      	mov	r0, r7
 801e6bc:	f000 fbb8 	bl	801ee30 <__malloc_unlock>
 801e6c0:	e7a1      	b.n	801e606 <_malloc_r+0x22>
 801e6c2:	6025      	str	r5, [r4, #0]
 801e6c4:	e7de      	b.n	801e684 <_malloc_r+0xa0>
 801e6c6:	bf00      	nop
 801e6c8:	240034f0 	.word	0x240034f0

0801e6cc <__ssputs_r>:
 801e6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6d0:	688e      	ldr	r6, [r1, #8]
 801e6d2:	429e      	cmp	r6, r3
 801e6d4:	4682      	mov	sl, r0
 801e6d6:	460c      	mov	r4, r1
 801e6d8:	4690      	mov	r8, r2
 801e6da:	461f      	mov	r7, r3
 801e6dc:	d838      	bhi.n	801e750 <__ssputs_r+0x84>
 801e6de:	898a      	ldrh	r2, [r1, #12]
 801e6e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e6e4:	d032      	beq.n	801e74c <__ssputs_r+0x80>
 801e6e6:	6825      	ldr	r5, [r4, #0]
 801e6e8:	6909      	ldr	r1, [r1, #16]
 801e6ea:	eba5 0901 	sub.w	r9, r5, r1
 801e6ee:	6965      	ldr	r5, [r4, #20]
 801e6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e6f8:	3301      	adds	r3, #1
 801e6fa:	444b      	add	r3, r9
 801e6fc:	106d      	asrs	r5, r5, #1
 801e6fe:	429d      	cmp	r5, r3
 801e700:	bf38      	it	cc
 801e702:	461d      	movcc	r5, r3
 801e704:	0553      	lsls	r3, r2, #21
 801e706:	d531      	bpl.n	801e76c <__ssputs_r+0xa0>
 801e708:	4629      	mov	r1, r5
 801e70a:	f7ff ff6b 	bl	801e5e4 <_malloc_r>
 801e70e:	4606      	mov	r6, r0
 801e710:	b950      	cbnz	r0, 801e728 <__ssputs_r+0x5c>
 801e712:	230c      	movs	r3, #12
 801e714:	f8ca 3000 	str.w	r3, [sl]
 801e718:	89a3      	ldrh	r3, [r4, #12]
 801e71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e71e:	81a3      	strh	r3, [r4, #12]
 801e720:	f04f 30ff 	mov.w	r0, #4294967295
 801e724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e728:	6921      	ldr	r1, [r4, #16]
 801e72a:	464a      	mov	r2, r9
 801e72c:	f7fc fb22 	bl	801ad74 <memcpy>
 801e730:	89a3      	ldrh	r3, [r4, #12]
 801e732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e73a:	81a3      	strh	r3, [r4, #12]
 801e73c:	6126      	str	r6, [r4, #16]
 801e73e:	6165      	str	r5, [r4, #20]
 801e740:	444e      	add	r6, r9
 801e742:	eba5 0509 	sub.w	r5, r5, r9
 801e746:	6026      	str	r6, [r4, #0]
 801e748:	60a5      	str	r5, [r4, #8]
 801e74a:	463e      	mov	r6, r7
 801e74c:	42be      	cmp	r6, r7
 801e74e:	d900      	bls.n	801e752 <__ssputs_r+0x86>
 801e750:	463e      	mov	r6, r7
 801e752:	6820      	ldr	r0, [r4, #0]
 801e754:	4632      	mov	r2, r6
 801e756:	4641      	mov	r1, r8
 801e758:	f000 fb4a 	bl	801edf0 <memmove>
 801e75c:	68a3      	ldr	r3, [r4, #8]
 801e75e:	1b9b      	subs	r3, r3, r6
 801e760:	60a3      	str	r3, [r4, #8]
 801e762:	6823      	ldr	r3, [r4, #0]
 801e764:	4433      	add	r3, r6
 801e766:	6023      	str	r3, [r4, #0]
 801e768:	2000      	movs	r0, #0
 801e76a:	e7db      	b.n	801e724 <__ssputs_r+0x58>
 801e76c:	462a      	mov	r2, r5
 801e76e:	f000 fb65 	bl	801ee3c <_realloc_r>
 801e772:	4606      	mov	r6, r0
 801e774:	2800      	cmp	r0, #0
 801e776:	d1e1      	bne.n	801e73c <__ssputs_r+0x70>
 801e778:	6921      	ldr	r1, [r4, #16]
 801e77a:	4650      	mov	r0, sl
 801e77c:	f7ff fec6 	bl	801e50c <_free_r>
 801e780:	e7c7      	b.n	801e712 <__ssputs_r+0x46>
	...

0801e784 <_svfiprintf_r>:
 801e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e788:	4698      	mov	r8, r3
 801e78a:	898b      	ldrh	r3, [r1, #12]
 801e78c:	061b      	lsls	r3, r3, #24
 801e78e:	b09d      	sub	sp, #116	; 0x74
 801e790:	4607      	mov	r7, r0
 801e792:	460d      	mov	r5, r1
 801e794:	4614      	mov	r4, r2
 801e796:	d50e      	bpl.n	801e7b6 <_svfiprintf_r+0x32>
 801e798:	690b      	ldr	r3, [r1, #16]
 801e79a:	b963      	cbnz	r3, 801e7b6 <_svfiprintf_r+0x32>
 801e79c:	2140      	movs	r1, #64	; 0x40
 801e79e:	f7ff ff21 	bl	801e5e4 <_malloc_r>
 801e7a2:	6028      	str	r0, [r5, #0]
 801e7a4:	6128      	str	r0, [r5, #16]
 801e7a6:	b920      	cbnz	r0, 801e7b2 <_svfiprintf_r+0x2e>
 801e7a8:	230c      	movs	r3, #12
 801e7aa:	603b      	str	r3, [r7, #0]
 801e7ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e7b0:	e0d1      	b.n	801e956 <_svfiprintf_r+0x1d2>
 801e7b2:	2340      	movs	r3, #64	; 0x40
 801e7b4:	616b      	str	r3, [r5, #20]
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	9309      	str	r3, [sp, #36]	; 0x24
 801e7ba:	2320      	movs	r3, #32
 801e7bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e7c0:	f8cd 800c 	str.w	r8, [sp, #12]
 801e7c4:	2330      	movs	r3, #48	; 0x30
 801e7c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e970 <_svfiprintf_r+0x1ec>
 801e7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e7ce:	f04f 0901 	mov.w	r9, #1
 801e7d2:	4623      	mov	r3, r4
 801e7d4:	469a      	mov	sl, r3
 801e7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7da:	b10a      	cbz	r2, 801e7e0 <_svfiprintf_r+0x5c>
 801e7dc:	2a25      	cmp	r2, #37	; 0x25
 801e7de:	d1f9      	bne.n	801e7d4 <_svfiprintf_r+0x50>
 801e7e0:	ebba 0b04 	subs.w	fp, sl, r4
 801e7e4:	d00b      	beq.n	801e7fe <_svfiprintf_r+0x7a>
 801e7e6:	465b      	mov	r3, fp
 801e7e8:	4622      	mov	r2, r4
 801e7ea:	4629      	mov	r1, r5
 801e7ec:	4638      	mov	r0, r7
 801e7ee:	f7ff ff6d 	bl	801e6cc <__ssputs_r>
 801e7f2:	3001      	adds	r0, #1
 801e7f4:	f000 80aa 	beq.w	801e94c <_svfiprintf_r+0x1c8>
 801e7f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e7fa:	445a      	add	r2, fp
 801e7fc:	9209      	str	r2, [sp, #36]	; 0x24
 801e7fe:	f89a 3000 	ldrb.w	r3, [sl]
 801e802:	2b00      	cmp	r3, #0
 801e804:	f000 80a2 	beq.w	801e94c <_svfiprintf_r+0x1c8>
 801e808:	2300      	movs	r3, #0
 801e80a:	f04f 32ff 	mov.w	r2, #4294967295
 801e80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e812:	f10a 0a01 	add.w	sl, sl, #1
 801e816:	9304      	str	r3, [sp, #16]
 801e818:	9307      	str	r3, [sp, #28]
 801e81a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e81e:	931a      	str	r3, [sp, #104]	; 0x68
 801e820:	4654      	mov	r4, sl
 801e822:	2205      	movs	r2, #5
 801e824:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e828:	4851      	ldr	r0, [pc, #324]	; (801e970 <_svfiprintf_r+0x1ec>)
 801e82a:	f7e1 fd89 	bl	8000340 <memchr>
 801e82e:	9a04      	ldr	r2, [sp, #16]
 801e830:	b9d8      	cbnz	r0, 801e86a <_svfiprintf_r+0xe6>
 801e832:	06d0      	lsls	r0, r2, #27
 801e834:	bf44      	itt	mi
 801e836:	2320      	movmi	r3, #32
 801e838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e83c:	0711      	lsls	r1, r2, #28
 801e83e:	bf44      	itt	mi
 801e840:	232b      	movmi	r3, #43	; 0x2b
 801e842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e846:	f89a 3000 	ldrb.w	r3, [sl]
 801e84a:	2b2a      	cmp	r3, #42	; 0x2a
 801e84c:	d015      	beq.n	801e87a <_svfiprintf_r+0xf6>
 801e84e:	9a07      	ldr	r2, [sp, #28]
 801e850:	4654      	mov	r4, sl
 801e852:	2000      	movs	r0, #0
 801e854:	f04f 0c0a 	mov.w	ip, #10
 801e858:	4621      	mov	r1, r4
 801e85a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e85e:	3b30      	subs	r3, #48	; 0x30
 801e860:	2b09      	cmp	r3, #9
 801e862:	d94e      	bls.n	801e902 <_svfiprintf_r+0x17e>
 801e864:	b1b0      	cbz	r0, 801e894 <_svfiprintf_r+0x110>
 801e866:	9207      	str	r2, [sp, #28]
 801e868:	e014      	b.n	801e894 <_svfiprintf_r+0x110>
 801e86a:	eba0 0308 	sub.w	r3, r0, r8
 801e86e:	fa09 f303 	lsl.w	r3, r9, r3
 801e872:	4313      	orrs	r3, r2
 801e874:	9304      	str	r3, [sp, #16]
 801e876:	46a2      	mov	sl, r4
 801e878:	e7d2      	b.n	801e820 <_svfiprintf_r+0x9c>
 801e87a:	9b03      	ldr	r3, [sp, #12]
 801e87c:	1d19      	adds	r1, r3, #4
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	9103      	str	r1, [sp, #12]
 801e882:	2b00      	cmp	r3, #0
 801e884:	bfbb      	ittet	lt
 801e886:	425b      	neglt	r3, r3
 801e888:	f042 0202 	orrlt.w	r2, r2, #2
 801e88c:	9307      	strge	r3, [sp, #28]
 801e88e:	9307      	strlt	r3, [sp, #28]
 801e890:	bfb8      	it	lt
 801e892:	9204      	strlt	r2, [sp, #16]
 801e894:	7823      	ldrb	r3, [r4, #0]
 801e896:	2b2e      	cmp	r3, #46	; 0x2e
 801e898:	d10c      	bne.n	801e8b4 <_svfiprintf_r+0x130>
 801e89a:	7863      	ldrb	r3, [r4, #1]
 801e89c:	2b2a      	cmp	r3, #42	; 0x2a
 801e89e:	d135      	bne.n	801e90c <_svfiprintf_r+0x188>
 801e8a0:	9b03      	ldr	r3, [sp, #12]
 801e8a2:	1d1a      	adds	r2, r3, #4
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	9203      	str	r2, [sp, #12]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	bfb8      	it	lt
 801e8ac:	f04f 33ff 	movlt.w	r3, #4294967295
 801e8b0:	3402      	adds	r4, #2
 801e8b2:	9305      	str	r3, [sp, #20]
 801e8b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e980 <_svfiprintf_r+0x1fc>
 801e8b8:	7821      	ldrb	r1, [r4, #0]
 801e8ba:	2203      	movs	r2, #3
 801e8bc:	4650      	mov	r0, sl
 801e8be:	f7e1 fd3f 	bl	8000340 <memchr>
 801e8c2:	b140      	cbz	r0, 801e8d6 <_svfiprintf_r+0x152>
 801e8c4:	2340      	movs	r3, #64	; 0x40
 801e8c6:	eba0 000a 	sub.w	r0, r0, sl
 801e8ca:	fa03 f000 	lsl.w	r0, r3, r0
 801e8ce:	9b04      	ldr	r3, [sp, #16]
 801e8d0:	4303      	orrs	r3, r0
 801e8d2:	3401      	adds	r4, #1
 801e8d4:	9304      	str	r3, [sp, #16]
 801e8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8da:	4826      	ldr	r0, [pc, #152]	; (801e974 <_svfiprintf_r+0x1f0>)
 801e8dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e8e0:	2206      	movs	r2, #6
 801e8e2:	f7e1 fd2d 	bl	8000340 <memchr>
 801e8e6:	2800      	cmp	r0, #0
 801e8e8:	d038      	beq.n	801e95c <_svfiprintf_r+0x1d8>
 801e8ea:	4b23      	ldr	r3, [pc, #140]	; (801e978 <_svfiprintf_r+0x1f4>)
 801e8ec:	bb1b      	cbnz	r3, 801e936 <_svfiprintf_r+0x1b2>
 801e8ee:	9b03      	ldr	r3, [sp, #12]
 801e8f0:	3307      	adds	r3, #7
 801e8f2:	f023 0307 	bic.w	r3, r3, #7
 801e8f6:	3308      	adds	r3, #8
 801e8f8:	9303      	str	r3, [sp, #12]
 801e8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8fc:	4433      	add	r3, r6
 801e8fe:	9309      	str	r3, [sp, #36]	; 0x24
 801e900:	e767      	b.n	801e7d2 <_svfiprintf_r+0x4e>
 801e902:	fb0c 3202 	mla	r2, ip, r2, r3
 801e906:	460c      	mov	r4, r1
 801e908:	2001      	movs	r0, #1
 801e90a:	e7a5      	b.n	801e858 <_svfiprintf_r+0xd4>
 801e90c:	2300      	movs	r3, #0
 801e90e:	3401      	adds	r4, #1
 801e910:	9305      	str	r3, [sp, #20]
 801e912:	4619      	mov	r1, r3
 801e914:	f04f 0c0a 	mov.w	ip, #10
 801e918:	4620      	mov	r0, r4
 801e91a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e91e:	3a30      	subs	r2, #48	; 0x30
 801e920:	2a09      	cmp	r2, #9
 801e922:	d903      	bls.n	801e92c <_svfiprintf_r+0x1a8>
 801e924:	2b00      	cmp	r3, #0
 801e926:	d0c5      	beq.n	801e8b4 <_svfiprintf_r+0x130>
 801e928:	9105      	str	r1, [sp, #20]
 801e92a:	e7c3      	b.n	801e8b4 <_svfiprintf_r+0x130>
 801e92c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e930:	4604      	mov	r4, r0
 801e932:	2301      	movs	r3, #1
 801e934:	e7f0      	b.n	801e918 <_svfiprintf_r+0x194>
 801e936:	ab03      	add	r3, sp, #12
 801e938:	9300      	str	r3, [sp, #0]
 801e93a:	462a      	mov	r2, r5
 801e93c:	4b0f      	ldr	r3, [pc, #60]	; (801e97c <_svfiprintf_r+0x1f8>)
 801e93e:	a904      	add	r1, sp, #16
 801e940:	4638      	mov	r0, r7
 801e942:	f7fc fabd 	bl	801aec0 <_printf_float>
 801e946:	1c42      	adds	r2, r0, #1
 801e948:	4606      	mov	r6, r0
 801e94a:	d1d6      	bne.n	801e8fa <_svfiprintf_r+0x176>
 801e94c:	89ab      	ldrh	r3, [r5, #12]
 801e94e:	065b      	lsls	r3, r3, #25
 801e950:	f53f af2c 	bmi.w	801e7ac <_svfiprintf_r+0x28>
 801e954:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e956:	b01d      	add	sp, #116	; 0x74
 801e958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e95c:	ab03      	add	r3, sp, #12
 801e95e:	9300      	str	r3, [sp, #0]
 801e960:	462a      	mov	r2, r5
 801e962:	4b06      	ldr	r3, [pc, #24]	; (801e97c <_svfiprintf_r+0x1f8>)
 801e964:	a904      	add	r1, sp, #16
 801e966:	4638      	mov	r0, r7
 801e968:	f7fc fd36 	bl	801b3d8 <_printf_i>
 801e96c:	e7eb      	b.n	801e946 <_svfiprintf_r+0x1c2>
 801e96e:	bf00      	nop
 801e970:	08020184 	.word	0x08020184
 801e974:	0802018e 	.word	0x0802018e
 801e978:	0801aec1 	.word	0x0801aec1
 801e97c:	0801e6cd 	.word	0x0801e6cd
 801e980:	0802018a 	.word	0x0802018a

0801e984 <_read_r>:
 801e984:	b538      	push	{r3, r4, r5, lr}
 801e986:	4d07      	ldr	r5, [pc, #28]	; (801e9a4 <_read_r+0x20>)
 801e988:	4604      	mov	r4, r0
 801e98a:	4608      	mov	r0, r1
 801e98c:	4611      	mov	r1, r2
 801e98e:	2200      	movs	r2, #0
 801e990:	602a      	str	r2, [r5, #0]
 801e992:	461a      	mov	r2, r3
 801e994:	f7e5 f944 	bl	8003c20 <_read>
 801e998:	1c43      	adds	r3, r0, #1
 801e99a:	d102      	bne.n	801e9a2 <_read_r+0x1e>
 801e99c:	682b      	ldr	r3, [r5, #0]
 801e99e:	b103      	cbz	r3, 801e9a2 <_read_r+0x1e>
 801e9a0:	6023      	str	r3, [r4, #0]
 801e9a2:	bd38      	pop	{r3, r4, r5, pc}
 801e9a4:	240034f8 	.word	0x240034f8

0801e9a8 <nan>:
 801e9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e9b0 <nan+0x8>
 801e9ac:	4770      	bx	lr
 801e9ae:	bf00      	nop
 801e9b0:	00000000 	.word	0x00000000
 801e9b4:	7ff80000 	.word	0x7ff80000

0801e9b8 <_sbrk_r>:
 801e9b8:	b538      	push	{r3, r4, r5, lr}
 801e9ba:	4d06      	ldr	r5, [pc, #24]	; (801e9d4 <_sbrk_r+0x1c>)
 801e9bc:	2300      	movs	r3, #0
 801e9be:	4604      	mov	r4, r0
 801e9c0:	4608      	mov	r0, r1
 801e9c2:	602b      	str	r3, [r5, #0]
 801e9c4:	f7e5 f99a 	bl	8003cfc <_sbrk>
 801e9c8:	1c43      	adds	r3, r0, #1
 801e9ca:	d102      	bne.n	801e9d2 <_sbrk_r+0x1a>
 801e9cc:	682b      	ldr	r3, [r5, #0]
 801e9ce:	b103      	cbz	r3, 801e9d2 <_sbrk_r+0x1a>
 801e9d0:	6023      	str	r3, [r4, #0]
 801e9d2:	bd38      	pop	{r3, r4, r5, pc}
 801e9d4:	240034f8 	.word	0x240034f8

0801e9d8 <strncmp>:
 801e9d8:	b510      	push	{r4, lr}
 801e9da:	b17a      	cbz	r2, 801e9fc <strncmp+0x24>
 801e9dc:	4603      	mov	r3, r0
 801e9de:	3901      	subs	r1, #1
 801e9e0:	1884      	adds	r4, r0, r2
 801e9e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e9e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e9ea:	4290      	cmp	r0, r2
 801e9ec:	d101      	bne.n	801e9f2 <strncmp+0x1a>
 801e9ee:	42a3      	cmp	r3, r4
 801e9f0:	d101      	bne.n	801e9f6 <strncmp+0x1e>
 801e9f2:	1a80      	subs	r0, r0, r2
 801e9f4:	bd10      	pop	{r4, pc}
 801e9f6:	2800      	cmp	r0, #0
 801e9f8:	d1f3      	bne.n	801e9e2 <strncmp+0xa>
 801e9fa:	e7fa      	b.n	801e9f2 <strncmp+0x1a>
 801e9fc:	4610      	mov	r0, r2
 801e9fe:	e7f9      	b.n	801e9f4 <strncmp+0x1c>

0801ea00 <__ascii_wctomb>:
 801ea00:	b149      	cbz	r1, 801ea16 <__ascii_wctomb+0x16>
 801ea02:	2aff      	cmp	r2, #255	; 0xff
 801ea04:	bf85      	ittet	hi
 801ea06:	238a      	movhi	r3, #138	; 0x8a
 801ea08:	6003      	strhi	r3, [r0, #0]
 801ea0a:	700a      	strbls	r2, [r1, #0]
 801ea0c:	f04f 30ff 	movhi.w	r0, #4294967295
 801ea10:	bf98      	it	ls
 801ea12:	2001      	movls	r0, #1
 801ea14:	4770      	bx	lr
 801ea16:	4608      	mov	r0, r1
 801ea18:	4770      	bx	lr
	...

0801ea1c <__assert_func>:
 801ea1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ea1e:	4614      	mov	r4, r2
 801ea20:	461a      	mov	r2, r3
 801ea22:	4b09      	ldr	r3, [pc, #36]	; (801ea48 <__assert_func+0x2c>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	4605      	mov	r5, r0
 801ea28:	68d8      	ldr	r0, [r3, #12]
 801ea2a:	b14c      	cbz	r4, 801ea40 <__assert_func+0x24>
 801ea2c:	4b07      	ldr	r3, [pc, #28]	; (801ea4c <__assert_func+0x30>)
 801ea2e:	9100      	str	r1, [sp, #0]
 801ea30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ea34:	4906      	ldr	r1, [pc, #24]	; (801ea50 <__assert_func+0x34>)
 801ea36:	462b      	mov	r3, r5
 801ea38:	f000 f9a6 	bl	801ed88 <fiprintf>
 801ea3c:	f000 fc46 	bl	801f2cc <abort>
 801ea40:	4b04      	ldr	r3, [pc, #16]	; (801ea54 <__assert_func+0x38>)
 801ea42:	461c      	mov	r4, r3
 801ea44:	e7f3      	b.n	801ea2e <__assert_func+0x12>
 801ea46:	bf00      	nop
 801ea48:	24000100 	.word	0x24000100
 801ea4c:	08020195 	.word	0x08020195
 801ea50:	080201a2 	.word	0x080201a2
 801ea54:	080201d0 	.word	0x080201d0

0801ea58 <__sflush_r>:
 801ea58:	898a      	ldrh	r2, [r1, #12]
 801ea5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea5e:	4605      	mov	r5, r0
 801ea60:	0710      	lsls	r0, r2, #28
 801ea62:	460c      	mov	r4, r1
 801ea64:	d458      	bmi.n	801eb18 <__sflush_r+0xc0>
 801ea66:	684b      	ldr	r3, [r1, #4]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	dc05      	bgt.n	801ea78 <__sflush_r+0x20>
 801ea6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	dc02      	bgt.n	801ea78 <__sflush_r+0x20>
 801ea72:	2000      	movs	r0, #0
 801ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea7a:	2e00      	cmp	r6, #0
 801ea7c:	d0f9      	beq.n	801ea72 <__sflush_r+0x1a>
 801ea7e:	2300      	movs	r3, #0
 801ea80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ea84:	682f      	ldr	r7, [r5, #0]
 801ea86:	602b      	str	r3, [r5, #0]
 801ea88:	d032      	beq.n	801eaf0 <__sflush_r+0x98>
 801ea8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ea8c:	89a3      	ldrh	r3, [r4, #12]
 801ea8e:	075a      	lsls	r2, r3, #29
 801ea90:	d505      	bpl.n	801ea9e <__sflush_r+0x46>
 801ea92:	6863      	ldr	r3, [r4, #4]
 801ea94:	1ac0      	subs	r0, r0, r3
 801ea96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ea98:	b10b      	cbz	r3, 801ea9e <__sflush_r+0x46>
 801ea9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea9c:	1ac0      	subs	r0, r0, r3
 801ea9e:	2300      	movs	r3, #0
 801eaa0:	4602      	mov	r2, r0
 801eaa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eaa4:	6a21      	ldr	r1, [r4, #32]
 801eaa6:	4628      	mov	r0, r5
 801eaa8:	47b0      	blx	r6
 801eaaa:	1c43      	adds	r3, r0, #1
 801eaac:	89a3      	ldrh	r3, [r4, #12]
 801eaae:	d106      	bne.n	801eabe <__sflush_r+0x66>
 801eab0:	6829      	ldr	r1, [r5, #0]
 801eab2:	291d      	cmp	r1, #29
 801eab4:	d82c      	bhi.n	801eb10 <__sflush_r+0xb8>
 801eab6:	4a2a      	ldr	r2, [pc, #168]	; (801eb60 <__sflush_r+0x108>)
 801eab8:	40ca      	lsrs	r2, r1
 801eaba:	07d6      	lsls	r6, r2, #31
 801eabc:	d528      	bpl.n	801eb10 <__sflush_r+0xb8>
 801eabe:	2200      	movs	r2, #0
 801eac0:	6062      	str	r2, [r4, #4]
 801eac2:	04d9      	lsls	r1, r3, #19
 801eac4:	6922      	ldr	r2, [r4, #16]
 801eac6:	6022      	str	r2, [r4, #0]
 801eac8:	d504      	bpl.n	801ead4 <__sflush_r+0x7c>
 801eaca:	1c42      	adds	r2, r0, #1
 801eacc:	d101      	bne.n	801ead2 <__sflush_r+0x7a>
 801eace:	682b      	ldr	r3, [r5, #0]
 801ead0:	b903      	cbnz	r3, 801ead4 <__sflush_r+0x7c>
 801ead2:	6560      	str	r0, [r4, #84]	; 0x54
 801ead4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ead6:	602f      	str	r7, [r5, #0]
 801ead8:	2900      	cmp	r1, #0
 801eada:	d0ca      	beq.n	801ea72 <__sflush_r+0x1a>
 801eadc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eae0:	4299      	cmp	r1, r3
 801eae2:	d002      	beq.n	801eaea <__sflush_r+0x92>
 801eae4:	4628      	mov	r0, r5
 801eae6:	f7ff fd11 	bl	801e50c <_free_r>
 801eaea:	2000      	movs	r0, #0
 801eaec:	6360      	str	r0, [r4, #52]	; 0x34
 801eaee:	e7c1      	b.n	801ea74 <__sflush_r+0x1c>
 801eaf0:	6a21      	ldr	r1, [r4, #32]
 801eaf2:	2301      	movs	r3, #1
 801eaf4:	4628      	mov	r0, r5
 801eaf6:	47b0      	blx	r6
 801eaf8:	1c41      	adds	r1, r0, #1
 801eafa:	d1c7      	bne.n	801ea8c <__sflush_r+0x34>
 801eafc:	682b      	ldr	r3, [r5, #0]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d0c4      	beq.n	801ea8c <__sflush_r+0x34>
 801eb02:	2b1d      	cmp	r3, #29
 801eb04:	d001      	beq.n	801eb0a <__sflush_r+0xb2>
 801eb06:	2b16      	cmp	r3, #22
 801eb08:	d101      	bne.n	801eb0e <__sflush_r+0xb6>
 801eb0a:	602f      	str	r7, [r5, #0]
 801eb0c:	e7b1      	b.n	801ea72 <__sflush_r+0x1a>
 801eb0e:	89a3      	ldrh	r3, [r4, #12]
 801eb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb14:	81a3      	strh	r3, [r4, #12]
 801eb16:	e7ad      	b.n	801ea74 <__sflush_r+0x1c>
 801eb18:	690f      	ldr	r7, [r1, #16]
 801eb1a:	2f00      	cmp	r7, #0
 801eb1c:	d0a9      	beq.n	801ea72 <__sflush_r+0x1a>
 801eb1e:	0793      	lsls	r3, r2, #30
 801eb20:	680e      	ldr	r6, [r1, #0]
 801eb22:	bf08      	it	eq
 801eb24:	694b      	ldreq	r3, [r1, #20]
 801eb26:	600f      	str	r7, [r1, #0]
 801eb28:	bf18      	it	ne
 801eb2a:	2300      	movne	r3, #0
 801eb2c:	eba6 0807 	sub.w	r8, r6, r7
 801eb30:	608b      	str	r3, [r1, #8]
 801eb32:	f1b8 0f00 	cmp.w	r8, #0
 801eb36:	dd9c      	ble.n	801ea72 <__sflush_r+0x1a>
 801eb38:	6a21      	ldr	r1, [r4, #32]
 801eb3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eb3c:	4643      	mov	r3, r8
 801eb3e:	463a      	mov	r2, r7
 801eb40:	4628      	mov	r0, r5
 801eb42:	47b0      	blx	r6
 801eb44:	2800      	cmp	r0, #0
 801eb46:	dc06      	bgt.n	801eb56 <__sflush_r+0xfe>
 801eb48:	89a3      	ldrh	r3, [r4, #12]
 801eb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb4e:	81a3      	strh	r3, [r4, #12]
 801eb50:	f04f 30ff 	mov.w	r0, #4294967295
 801eb54:	e78e      	b.n	801ea74 <__sflush_r+0x1c>
 801eb56:	4407      	add	r7, r0
 801eb58:	eba8 0800 	sub.w	r8, r8, r0
 801eb5c:	e7e9      	b.n	801eb32 <__sflush_r+0xda>
 801eb5e:	bf00      	nop
 801eb60:	20400001 	.word	0x20400001

0801eb64 <_fflush_r>:
 801eb64:	b538      	push	{r3, r4, r5, lr}
 801eb66:	690b      	ldr	r3, [r1, #16]
 801eb68:	4605      	mov	r5, r0
 801eb6a:	460c      	mov	r4, r1
 801eb6c:	b913      	cbnz	r3, 801eb74 <_fflush_r+0x10>
 801eb6e:	2500      	movs	r5, #0
 801eb70:	4628      	mov	r0, r5
 801eb72:	bd38      	pop	{r3, r4, r5, pc}
 801eb74:	b118      	cbz	r0, 801eb7e <_fflush_r+0x1a>
 801eb76:	6983      	ldr	r3, [r0, #24]
 801eb78:	b90b      	cbnz	r3, 801eb7e <_fflush_r+0x1a>
 801eb7a:	f000 f887 	bl	801ec8c <__sinit>
 801eb7e:	4b14      	ldr	r3, [pc, #80]	; (801ebd0 <_fflush_r+0x6c>)
 801eb80:	429c      	cmp	r4, r3
 801eb82:	d11b      	bne.n	801ebbc <_fflush_r+0x58>
 801eb84:	686c      	ldr	r4, [r5, #4]
 801eb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d0ef      	beq.n	801eb6e <_fflush_r+0xa>
 801eb8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eb90:	07d0      	lsls	r0, r2, #31
 801eb92:	d404      	bmi.n	801eb9e <_fflush_r+0x3a>
 801eb94:	0599      	lsls	r1, r3, #22
 801eb96:	d402      	bmi.n	801eb9e <_fflush_r+0x3a>
 801eb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb9a:	f000 f927 	bl	801edec <__retarget_lock_acquire_recursive>
 801eb9e:	4628      	mov	r0, r5
 801eba0:	4621      	mov	r1, r4
 801eba2:	f7ff ff59 	bl	801ea58 <__sflush_r>
 801eba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eba8:	07da      	lsls	r2, r3, #31
 801ebaa:	4605      	mov	r5, r0
 801ebac:	d4e0      	bmi.n	801eb70 <_fflush_r+0xc>
 801ebae:	89a3      	ldrh	r3, [r4, #12]
 801ebb0:	059b      	lsls	r3, r3, #22
 801ebb2:	d4dd      	bmi.n	801eb70 <_fflush_r+0xc>
 801ebb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebb6:	f000 f91a 	bl	801edee <__retarget_lock_release_recursive>
 801ebba:	e7d9      	b.n	801eb70 <_fflush_r+0xc>
 801ebbc:	4b05      	ldr	r3, [pc, #20]	; (801ebd4 <_fflush_r+0x70>)
 801ebbe:	429c      	cmp	r4, r3
 801ebc0:	d101      	bne.n	801ebc6 <_fflush_r+0x62>
 801ebc2:	68ac      	ldr	r4, [r5, #8]
 801ebc4:	e7df      	b.n	801eb86 <_fflush_r+0x22>
 801ebc6:	4b04      	ldr	r3, [pc, #16]	; (801ebd8 <_fflush_r+0x74>)
 801ebc8:	429c      	cmp	r4, r3
 801ebca:	bf08      	it	eq
 801ebcc:	68ec      	ldreq	r4, [r5, #12]
 801ebce:	e7da      	b.n	801eb86 <_fflush_r+0x22>
 801ebd0:	080201f4 	.word	0x080201f4
 801ebd4:	08020214 	.word	0x08020214
 801ebd8:	080201d4 	.word	0x080201d4

0801ebdc <std>:
 801ebdc:	2300      	movs	r3, #0
 801ebde:	b510      	push	{r4, lr}
 801ebe0:	4604      	mov	r4, r0
 801ebe2:	e9c0 3300 	strd	r3, r3, [r0]
 801ebe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ebea:	6083      	str	r3, [r0, #8]
 801ebec:	8181      	strh	r1, [r0, #12]
 801ebee:	6643      	str	r3, [r0, #100]	; 0x64
 801ebf0:	81c2      	strh	r2, [r0, #14]
 801ebf2:	6183      	str	r3, [r0, #24]
 801ebf4:	4619      	mov	r1, r3
 801ebf6:	2208      	movs	r2, #8
 801ebf8:	305c      	adds	r0, #92	; 0x5c
 801ebfa:	f7fc f8c9 	bl	801ad90 <memset>
 801ebfe:	4b05      	ldr	r3, [pc, #20]	; (801ec14 <std+0x38>)
 801ec00:	6263      	str	r3, [r4, #36]	; 0x24
 801ec02:	4b05      	ldr	r3, [pc, #20]	; (801ec18 <std+0x3c>)
 801ec04:	62a3      	str	r3, [r4, #40]	; 0x28
 801ec06:	4b05      	ldr	r3, [pc, #20]	; (801ec1c <std+0x40>)
 801ec08:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ec0a:	4b05      	ldr	r3, [pc, #20]	; (801ec20 <std+0x44>)
 801ec0c:	6224      	str	r4, [r4, #32]
 801ec0e:	6323      	str	r3, [r4, #48]	; 0x30
 801ec10:	bd10      	pop	{r4, pc}
 801ec12:	bf00      	nop
 801ec14:	0801ba7d 	.word	0x0801ba7d
 801ec18:	0801ba9f 	.word	0x0801ba9f
 801ec1c:	0801bad7 	.word	0x0801bad7
 801ec20:	0801bafb 	.word	0x0801bafb

0801ec24 <_cleanup_r>:
 801ec24:	4901      	ldr	r1, [pc, #4]	; (801ec2c <_cleanup_r+0x8>)
 801ec26:	f000 b8c1 	b.w	801edac <_fwalk_reent>
 801ec2a:	bf00      	nop
 801ec2c:	0801eb65 	.word	0x0801eb65

0801ec30 <__sfmoreglue>:
 801ec30:	b570      	push	{r4, r5, r6, lr}
 801ec32:	2268      	movs	r2, #104	; 0x68
 801ec34:	1e4d      	subs	r5, r1, #1
 801ec36:	4355      	muls	r5, r2
 801ec38:	460e      	mov	r6, r1
 801ec3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ec3e:	f7ff fcd1 	bl	801e5e4 <_malloc_r>
 801ec42:	4604      	mov	r4, r0
 801ec44:	b140      	cbz	r0, 801ec58 <__sfmoreglue+0x28>
 801ec46:	2100      	movs	r1, #0
 801ec48:	e9c0 1600 	strd	r1, r6, [r0]
 801ec4c:	300c      	adds	r0, #12
 801ec4e:	60a0      	str	r0, [r4, #8]
 801ec50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ec54:	f7fc f89c 	bl	801ad90 <memset>
 801ec58:	4620      	mov	r0, r4
 801ec5a:	bd70      	pop	{r4, r5, r6, pc}

0801ec5c <__sfp_lock_acquire>:
 801ec5c:	4801      	ldr	r0, [pc, #4]	; (801ec64 <__sfp_lock_acquire+0x8>)
 801ec5e:	f000 b8c5 	b.w	801edec <__retarget_lock_acquire_recursive>
 801ec62:	bf00      	nop
 801ec64:	240034fd 	.word	0x240034fd

0801ec68 <__sfp_lock_release>:
 801ec68:	4801      	ldr	r0, [pc, #4]	; (801ec70 <__sfp_lock_release+0x8>)
 801ec6a:	f000 b8c0 	b.w	801edee <__retarget_lock_release_recursive>
 801ec6e:	bf00      	nop
 801ec70:	240034fd 	.word	0x240034fd

0801ec74 <__sinit_lock_acquire>:
 801ec74:	4801      	ldr	r0, [pc, #4]	; (801ec7c <__sinit_lock_acquire+0x8>)
 801ec76:	f000 b8b9 	b.w	801edec <__retarget_lock_acquire_recursive>
 801ec7a:	bf00      	nop
 801ec7c:	240034fe 	.word	0x240034fe

0801ec80 <__sinit_lock_release>:
 801ec80:	4801      	ldr	r0, [pc, #4]	; (801ec88 <__sinit_lock_release+0x8>)
 801ec82:	f000 b8b4 	b.w	801edee <__retarget_lock_release_recursive>
 801ec86:	bf00      	nop
 801ec88:	240034fe 	.word	0x240034fe

0801ec8c <__sinit>:
 801ec8c:	b510      	push	{r4, lr}
 801ec8e:	4604      	mov	r4, r0
 801ec90:	f7ff fff0 	bl	801ec74 <__sinit_lock_acquire>
 801ec94:	69a3      	ldr	r3, [r4, #24]
 801ec96:	b11b      	cbz	r3, 801eca0 <__sinit+0x14>
 801ec98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ec9c:	f7ff bff0 	b.w	801ec80 <__sinit_lock_release>
 801eca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801eca4:	6523      	str	r3, [r4, #80]	; 0x50
 801eca6:	4b13      	ldr	r3, [pc, #76]	; (801ecf4 <__sinit+0x68>)
 801eca8:	4a13      	ldr	r2, [pc, #76]	; (801ecf8 <__sinit+0x6c>)
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	62a2      	str	r2, [r4, #40]	; 0x28
 801ecae:	42a3      	cmp	r3, r4
 801ecb0:	bf04      	itt	eq
 801ecb2:	2301      	moveq	r3, #1
 801ecb4:	61a3      	streq	r3, [r4, #24]
 801ecb6:	4620      	mov	r0, r4
 801ecb8:	f000 f820 	bl	801ecfc <__sfp>
 801ecbc:	6060      	str	r0, [r4, #4]
 801ecbe:	4620      	mov	r0, r4
 801ecc0:	f000 f81c 	bl	801ecfc <__sfp>
 801ecc4:	60a0      	str	r0, [r4, #8]
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f000 f818 	bl	801ecfc <__sfp>
 801eccc:	2200      	movs	r2, #0
 801ecce:	60e0      	str	r0, [r4, #12]
 801ecd0:	2104      	movs	r1, #4
 801ecd2:	6860      	ldr	r0, [r4, #4]
 801ecd4:	f7ff ff82 	bl	801ebdc <std>
 801ecd8:	68a0      	ldr	r0, [r4, #8]
 801ecda:	2201      	movs	r2, #1
 801ecdc:	2109      	movs	r1, #9
 801ecde:	f7ff ff7d 	bl	801ebdc <std>
 801ece2:	68e0      	ldr	r0, [r4, #12]
 801ece4:	2202      	movs	r2, #2
 801ece6:	2112      	movs	r1, #18
 801ece8:	f7ff ff78 	bl	801ebdc <std>
 801ecec:	2301      	movs	r3, #1
 801ecee:	61a3      	str	r3, [r4, #24]
 801ecf0:	e7d2      	b.n	801ec98 <__sinit+0xc>
 801ecf2:	bf00      	nop
 801ecf4:	0801fd90 	.word	0x0801fd90
 801ecf8:	0801ec25 	.word	0x0801ec25

0801ecfc <__sfp>:
 801ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecfe:	4607      	mov	r7, r0
 801ed00:	f7ff ffac 	bl	801ec5c <__sfp_lock_acquire>
 801ed04:	4b1e      	ldr	r3, [pc, #120]	; (801ed80 <__sfp+0x84>)
 801ed06:	681e      	ldr	r6, [r3, #0]
 801ed08:	69b3      	ldr	r3, [r6, #24]
 801ed0a:	b913      	cbnz	r3, 801ed12 <__sfp+0x16>
 801ed0c:	4630      	mov	r0, r6
 801ed0e:	f7ff ffbd 	bl	801ec8c <__sinit>
 801ed12:	3648      	adds	r6, #72	; 0x48
 801ed14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ed18:	3b01      	subs	r3, #1
 801ed1a:	d503      	bpl.n	801ed24 <__sfp+0x28>
 801ed1c:	6833      	ldr	r3, [r6, #0]
 801ed1e:	b30b      	cbz	r3, 801ed64 <__sfp+0x68>
 801ed20:	6836      	ldr	r6, [r6, #0]
 801ed22:	e7f7      	b.n	801ed14 <__sfp+0x18>
 801ed24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ed28:	b9d5      	cbnz	r5, 801ed60 <__sfp+0x64>
 801ed2a:	4b16      	ldr	r3, [pc, #88]	; (801ed84 <__sfp+0x88>)
 801ed2c:	60e3      	str	r3, [r4, #12]
 801ed2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ed32:	6665      	str	r5, [r4, #100]	; 0x64
 801ed34:	f000 f859 	bl	801edea <__retarget_lock_init_recursive>
 801ed38:	f7ff ff96 	bl	801ec68 <__sfp_lock_release>
 801ed3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ed40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ed44:	6025      	str	r5, [r4, #0]
 801ed46:	61a5      	str	r5, [r4, #24]
 801ed48:	2208      	movs	r2, #8
 801ed4a:	4629      	mov	r1, r5
 801ed4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ed50:	f7fc f81e 	bl	801ad90 <memset>
 801ed54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ed58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed60:	3468      	adds	r4, #104	; 0x68
 801ed62:	e7d9      	b.n	801ed18 <__sfp+0x1c>
 801ed64:	2104      	movs	r1, #4
 801ed66:	4638      	mov	r0, r7
 801ed68:	f7ff ff62 	bl	801ec30 <__sfmoreglue>
 801ed6c:	4604      	mov	r4, r0
 801ed6e:	6030      	str	r0, [r6, #0]
 801ed70:	2800      	cmp	r0, #0
 801ed72:	d1d5      	bne.n	801ed20 <__sfp+0x24>
 801ed74:	f7ff ff78 	bl	801ec68 <__sfp_lock_release>
 801ed78:	230c      	movs	r3, #12
 801ed7a:	603b      	str	r3, [r7, #0]
 801ed7c:	e7ee      	b.n	801ed5c <__sfp+0x60>
 801ed7e:	bf00      	nop
 801ed80:	0801fd90 	.word	0x0801fd90
 801ed84:	ffff0001 	.word	0xffff0001

0801ed88 <fiprintf>:
 801ed88:	b40e      	push	{r1, r2, r3}
 801ed8a:	b503      	push	{r0, r1, lr}
 801ed8c:	4601      	mov	r1, r0
 801ed8e:	ab03      	add	r3, sp, #12
 801ed90:	4805      	ldr	r0, [pc, #20]	; (801eda8 <fiprintf+0x20>)
 801ed92:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed96:	6800      	ldr	r0, [r0, #0]
 801ed98:	9301      	str	r3, [sp, #4]
 801ed9a:	f000 f8a7 	bl	801eeec <_vfiprintf_r>
 801ed9e:	b002      	add	sp, #8
 801eda0:	f85d eb04 	ldr.w	lr, [sp], #4
 801eda4:	b003      	add	sp, #12
 801eda6:	4770      	bx	lr
 801eda8:	24000100 	.word	0x24000100

0801edac <_fwalk_reent>:
 801edac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edb0:	4606      	mov	r6, r0
 801edb2:	4688      	mov	r8, r1
 801edb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801edb8:	2700      	movs	r7, #0
 801edba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801edbe:	f1b9 0901 	subs.w	r9, r9, #1
 801edc2:	d505      	bpl.n	801edd0 <_fwalk_reent+0x24>
 801edc4:	6824      	ldr	r4, [r4, #0]
 801edc6:	2c00      	cmp	r4, #0
 801edc8:	d1f7      	bne.n	801edba <_fwalk_reent+0xe>
 801edca:	4638      	mov	r0, r7
 801edcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edd0:	89ab      	ldrh	r3, [r5, #12]
 801edd2:	2b01      	cmp	r3, #1
 801edd4:	d907      	bls.n	801ede6 <_fwalk_reent+0x3a>
 801edd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801edda:	3301      	adds	r3, #1
 801eddc:	d003      	beq.n	801ede6 <_fwalk_reent+0x3a>
 801edde:	4629      	mov	r1, r5
 801ede0:	4630      	mov	r0, r6
 801ede2:	47c0      	blx	r8
 801ede4:	4307      	orrs	r7, r0
 801ede6:	3568      	adds	r5, #104	; 0x68
 801ede8:	e7e9      	b.n	801edbe <_fwalk_reent+0x12>

0801edea <__retarget_lock_init_recursive>:
 801edea:	4770      	bx	lr

0801edec <__retarget_lock_acquire_recursive>:
 801edec:	4770      	bx	lr

0801edee <__retarget_lock_release_recursive>:
 801edee:	4770      	bx	lr

0801edf0 <memmove>:
 801edf0:	4288      	cmp	r0, r1
 801edf2:	b510      	push	{r4, lr}
 801edf4:	eb01 0402 	add.w	r4, r1, r2
 801edf8:	d902      	bls.n	801ee00 <memmove+0x10>
 801edfa:	4284      	cmp	r4, r0
 801edfc:	4623      	mov	r3, r4
 801edfe:	d807      	bhi.n	801ee10 <memmove+0x20>
 801ee00:	1e43      	subs	r3, r0, #1
 801ee02:	42a1      	cmp	r1, r4
 801ee04:	d008      	beq.n	801ee18 <memmove+0x28>
 801ee06:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee0e:	e7f8      	b.n	801ee02 <memmove+0x12>
 801ee10:	4402      	add	r2, r0
 801ee12:	4601      	mov	r1, r0
 801ee14:	428a      	cmp	r2, r1
 801ee16:	d100      	bne.n	801ee1a <memmove+0x2a>
 801ee18:	bd10      	pop	{r4, pc}
 801ee1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ee1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ee22:	e7f7      	b.n	801ee14 <memmove+0x24>

0801ee24 <__malloc_lock>:
 801ee24:	4801      	ldr	r0, [pc, #4]	; (801ee2c <__malloc_lock+0x8>)
 801ee26:	f7ff bfe1 	b.w	801edec <__retarget_lock_acquire_recursive>
 801ee2a:	bf00      	nop
 801ee2c:	240034fc 	.word	0x240034fc

0801ee30 <__malloc_unlock>:
 801ee30:	4801      	ldr	r0, [pc, #4]	; (801ee38 <__malloc_unlock+0x8>)
 801ee32:	f7ff bfdc 	b.w	801edee <__retarget_lock_release_recursive>
 801ee36:	bf00      	nop
 801ee38:	240034fc 	.word	0x240034fc

0801ee3c <_realloc_r>:
 801ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee40:	4680      	mov	r8, r0
 801ee42:	4614      	mov	r4, r2
 801ee44:	460e      	mov	r6, r1
 801ee46:	b921      	cbnz	r1, 801ee52 <_realloc_r+0x16>
 801ee48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee4c:	4611      	mov	r1, r2
 801ee4e:	f7ff bbc9 	b.w	801e5e4 <_malloc_r>
 801ee52:	b92a      	cbnz	r2, 801ee60 <_realloc_r+0x24>
 801ee54:	f7ff fb5a 	bl	801e50c <_free_r>
 801ee58:	4625      	mov	r5, r4
 801ee5a:	4628      	mov	r0, r5
 801ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee60:	f000 faa0 	bl	801f3a4 <_malloc_usable_size_r>
 801ee64:	4284      	cmp	r4, r0
 801ee66:	4607      	mov	r7, r0
 801ee68:	d802      	bhi.n	801ee70 <_realloc_r+0x34>
 801ee6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ee6e:	d812      	bhi.n	801ee96 <_realloc_r+0x5a>
 801ee70:	4621      	mov	r1, r4
 801ee72:	4640      	mov	r0, r8
 801ee74:	f7ff fbb6 	bl	801e5e4 <_malloc_r>
 801ee78:	4605      	mov	r5, r0
 801ee7a:	2800      	cmp	r0, #0
 801ee7c:	d0ed      	beq.n	801ee5a <_realloc_r+0x1e>
 801ee7e:	42bc      	cmp	r4, r7
 801ee80:	4622      	mov	r2, r4
 801ee82:	4631      	mov	r1, r6
 801ee84:	bf28      	it	cs
 801ee86:	463a      	movcs	r2, r7
 801ee88:	f7fb ff74 	bl	801ad74 <memcpy>
 801ee8c:	4631      	mov	r1, r6
 801ee8e:	4640      	mov	r0, r8
 801ee90:	f7ff fb3c 	bl	801e50c <_free_r>
 801ee94:	e7e1      	b.n	801ee5a <_realloc_r+0x1e>
 801ee96:	4635      	mov	r5, r6
 801ee98:	e7df      	b.n	801ee5a <_realloc_r+0x1e>

0801ee9a <__sfputc_r>:
 801ee9a:	6893      	ldr	r3, [r2, #8]
 801ee9c:	3b01      	subs	r3, #1
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	b410      	push	{r4}
 801eea2:	6093      	str	r3, [r2, #8]
 801eea4:	da08      	bge.n	801eeb8 <__sfputc_r+0x1e>
 801eea6:	6994      	ldr	r4, [r2, #24]
 801eea8:	42a3      	cmp	r3, r4
 801eeaa:	db01      	blt.n	801eeb0 <__sfputc_r+0x16>
 801eeac:	290a      	cmp	r1, #10
 801eeae:	d103      	bne.n	801eeb8 <__sfputc_r+0x1e>
 801eeb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eeb4:	f000 b94a 	b.w	801f14c <__swbuf_r>
 801eeb8:	6813      	ldr	r3, [r2, #0]
 801eeba:	1c58      	adds	r0, r3, #1
 801eebc:	6010      	str	r0, [r2, #0]
 801eebe:	7019      	strb	r1, [r3, #0]
 801eec0:	4608      	mov	r0, r1
 801eec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eec6:	4770      	bx	lr

0801eec8 <__sfputs_r>:
 801eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeca:	4606      	mov	r6, r0
 801eecc:	460f      	mov	r7, r1
 801eece:	4614      	mov	r4, r2
 801eed0:	18d5      	adds	r5, r2, r3
 801eed2:	42ac      	cmp	r4, r5
 801eed4:	d101      	bne.n	801eeda <__sfputs_r+0x12>
 801eed6:	2000      	movs	r0, #0
 801eed8:	e007      	b.n	801eeea <__sfputs_r+0x22>
 801eeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eede:	463a      	mov	r2, r7
 801eee0:	4630      	mov	r0, r6
 801eee2:	f7ff ffda 	bl	801ee9a <__sfputc_r>
 801eee6:	1c43      	adds	r3, r0, #1
 801eee8:	d1f3      	bne.n	801eed2 <__sfputs_r+0xa>
 801eeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801eeec <_vfiprintf_r>:
 801eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eef0:	460d      	mov	r5, r1
 801eef2:	b09d      	sub	sp, #116	; 0x74
 801eef4:	4614      	mov	r4, r2
 801eef6:	4698      	mov	r8, r3
 801eef8:	4606      	mov	r6, r0
 801eefa:	b118      	cbz	r0, 801ef04 <_vfiprintf_r+0x18>
 801eefc:	6983      	ldr	r3, [r0, #24]
 801eefe:	b90b      	cbnz	r3, 801ef04 <_vfiprintf_r+0x18>
 801ef00:	f7ff fec4 	bl	801ec8c <__sinit>
 801ef04:	4b89      	ldr	r3, [pc, #548]	; (801f12c <_vfiprintf_r+0x240>)
 801ef06:	429d      	cmp	r5, r3
 801ef08:	d11b      	bne.n	801ef42 <_vfiprintf_r+0x56>
 801ef0a:	6875      	ldr	r5, [r6, #4]
 801ef0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef0e:	07d9      	lsls	r1, r3, #31
 801ef10:	d405      	bmi.n	801ef1e <_vfiprintf_r+0x32>
 801ef12:	89ab      	ldrh	r3, [r5, #12]
 801ef14:	059a      	lsls	r2, r3, #22
 801ef16:	d402      	bmi.n	801ef1e <_vfiprintf_r+0x32>
 801ef18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef1a:	f7ff ff67 	bl	801edec <__retarget_lock_acquire_recursive>
 801ef1e:	89ab      	ldrh	r3, [r5, #12]
 801ef20:	071b      	lsls	r3, r3, #28
 801ef22:	d501      	bpl.n	801ef28 <_vfiprintf_r+0x3c>
 801ef24:	692b      	ldr	r3, [r5, #16]
 801ef26:	b9eb      	cbnz	r3, 801ef64 <_vfiprintf_r+0x78>
 801ef28:	4629      	mov	r1, r5
 801ef2a:	4630      	mov	r0, r6
 801ef2c:	f000 f960 	bl	801f1f0 <__swsetup_r>
 801ef30:	b1c0      	cbz	r0, 801ef64 <_vfiprintf_r+0x78>
 801ef32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef34:	07dc      	lsls	r4, r3, #31
 801ef36:	d50e      	bpl.n	801ef56 <_vfiprintf_r+0x6a>
 801ef38:	f04f 30ff 	mov.w	r0, #4294967295
 801ef3c:	b01d      	add	sp, #116	; 0x74
 801ef3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef42:	4b7b      	ldr	r3, [pc, #492]	; (801f130 <_vfiprintf_r+0x244>)
 801ef44:	429d      	cmp	r5, r3
 801ef46:	d101      	bne.n	801ef4c <_vfiprintf_r+0x60>
 801ef48:	68b5      	ldr	r5, [r6, #8]
 801ef4a:	e7df      	b.n	801ef0c <_vfiprintf_r+0x20>
 801ef4c:	4b79      	ldr	r3, [pc, #484]	; (801f134 <_vfiprintf_r+0x248>)
 801ef4e:	429d      	cmp	r5, r3
 801ef50:	bf08      	it	eq
 801ef52:	68f5      	ldreq	r5, [r6, #12]
 801ef54:	e7da      	b.n	801ef0c <_vfiprintf_r+0x20>
 801ef56:	89ab      	ldrh	r3, [r5, #12]
 801ef58:	0598      	lsls	r0, r3, #22
 801ef5a:	d4ed      	bmi.n	801ef38 <_vfiprintf_r+0x4c>
 801ef5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef5e:	f7ff ff46 	bl	801edee <__retarget_lock_release_recursive>
 801ef62:	e7e9      	b.n	801ef38 <_vfiprintf_r+0x4c>
 801ef64:	2300      	movs	r3, #0
 801ef66:	9309      	str	r3, [sp, #36]	; 0x24
 801ef68:	2320      	movs	r3, #32
 801ef6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ef6e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ef72:	2330      	movs	r3, #48	; 0x30
 801ef74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f138 <_vfiprintf_r+0x24c>
 801ef78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ef7c:	f04f 0901 	mov.w	r9, #1
 801ef80:	4623      	mov	r3, r4
 801ef82:	469a      	mov	sl, r3
 801ef84:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef88:	b10a      	cbz	r2, 801ef8e <_vfiprintf_r+0xa2>
 801ef8a:	2a25      	cmp	r2, #37	; 0x25
 801ef8c:	d1f9      	bne.n	801ef82 <_vfiprintf_r+0x96>
 801ef8e:	ebba 0b04 	subs.w	fp, sl, r4
 801ef92:	d00b      	beq.n	801efac <_vfiprintf_r+0xc0>
 801ef94:	465b      	mov	r3, fp
 801ef96:	4622      	mov	r2, r4
 801ef98:	4629      	mov	r1, r5
 801ef9a:	4630      	mov	r0, r6
 801ef9c:	f7ff ff94 	bl	801eec8 <__sfputs_r>
 801efa0:	3001      	adds	r0, #1
 801efa2:	f000 80aa 	beq.w	801f0fa <_vfiprintf_r+0x20e>
 801efa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efa8:	445a      	add	r2, fp
 801efaa:	9209      	str	r2, [sp, #36]	; 0x24
 801efac:	f89a 3000 	ldrb.w	r3, [sl]
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	f000 80a2 	beq.w	801f0fa <_vfiprintf_r+0x20e>
 801efb6:	2300      	movs	r3, #0
 801efb8:	f04f 32ff 	mov.w	r2, #4294967295
 801efbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801efc0:	f10a 0a01 	add.w	sl, sl, #1
 801efc4:	9304      	str	r3, [sp, #16]
 801efc6:	9307      	str	r3, [sp, #28]
 801efc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801efcc:	931a      	str	r3, [sp, #104]	; 0x68
 801efce:	4654      	mov	r4, sl
 801efd0:	2205      	movs	r2, #5
 801efd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efd6:	4858      	ldr	r0, [pc, #352]	; (801f138 <_vfiprintf_r+0x24c>)
 801efd8:	f7e1 f9b2 	bl	8000340 <memchr>
 801efdc:	9a04      	ldr	r2, [sp, #16]
 801efde:	b9d8      	cbnz	r0, 801f018 <_vfiprintf_r+0x12c>
 801efe0:	06d1      	lsls	r1, r2, #27
 801efe2:	bf44      	itt	mi
 801efe4:	2320      	movmi	r3, #32
 801efe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801efea:	0713      	lsls	r3, r2, #28
 801efec:	bf44      	itt	mi
 801efee:	232b      	movmi	r3, #43	; 0x2b
 801eff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801eff4:	f89a 3000 	ldrb.w	r3, [sl]
 801eff8:	2b2a      	cmp	r3, #42	; 0x2a
 801effa:	d015      	beq.n	801f028 <_vfiprintf_r+0x13c>
 801effc:	9a07      	ldr	r2, [sp, #28]
 801effe:	4654      	mov	r4, sl
 801f000:	2000      	movs	r0, #0
 801f002:	f04f 0c0a 	mov.w	ip, #10
 801f006:	4621      	mov	r1, r4
 801f008:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f00c:	3b30      	subs	r3, #48	; 0x30
 801f00e:	2b09      	cmp	r3, #9
 801f010:	d94e      	bls.n	801f0b0 <_vfiprintf_r+0x1c4>
 801f012:	b1b0      	cbz	r0, 801f042 <_vfiprintf_r+0x156>
 801f014:	9207      	str	r2, [sp, #28]
 801f016:	e014      	b.n	801f042 <_vfiprintf_r+0x156>
 801f018:	eba0 0308 	sub.w	r3, r0, r8
 801f01c:	fa09 f303 	lsl.w	r3, r9, r3
 801f020:	4313      	orrs	r3, r2
 801f022:	9304      	str	r3, [sp, #16]
 801f024:	46a2      	mov	sl, r4
 801f026:	e7d2      	b.n	801efce <_vfiprintf_r+0xe2>
 801f028:	9b03      	ldr	r3, [sp, #12]
 801f02a:	1d19      	adds	r1, r3, #4
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	9103      	str	r1, [sp, #12]
 801f030:	2b00      	cmp	r3, #0
 801f032:	bfbb      	ittet	lt
 801f034:	425b      	neglt	r3, r3
 801f036:	f042 0202 	orrlt.w	r2, r2, #2
 801f03a:	9307      	strge	r3, [sp, #28]
 801f03c:	9307      	strlt	r3, [sp, #28]
 801f03e:	bfb8      	it	lt
 801f040:	9204      	strlt	r2, [sp, #16]
 801f042:	7823      	ldrb	r3, [r4, #0]
 801f044:	2b2e      	cmp	r3, #46	; 0x2e
 801f046:	d10c      	bne.n	801f062 <_vfiprintf_r+0x176>
 801f048:	7863      	ldrb	r3, [r4, #1]
 801f04a:	2b2a      	cmp	r3, #42	; 0x2a
 801f04c:	d135      	bne.n	801f0ba <_vfiprintf_r+0x1ce>
 801f04e:	9b03      	ldr	r3, [sp, #12]
 801f050:	1d1a      	adds	r2, r3, #4
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	9203      	str	r2, [sp, #12]
 801f056:	2b00      	cmp	r3, #0
 801f058:	bfb8      	it	lt
 801f05a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f05e:	3402      	adds	r4, #2
 801f060:	9305      	str	r3, [sp, #20]
 801f062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f148 <_vfiprintf_r+0x25c>
 801f066:	7821      	ldrb	r1, [r4, #0]
 801f068:	2203      	movs	r2, #3
 801f06a:	4650      	mov	r0, sl
 801f06c:	f7e1 f968 	bl	8000340 <memchr>
 801f070:	b140      	cbz	r0, 801f084 <_vfiprintf_r+0x198>
 801f072:	2340      	movs	r3, #64	; 0x40
 801f074:	eba0 000a 	sub.w	r0, r0, sl
 801f078:	fa03 f000 	lsl.w	r0, r3, r0
 801f07c:	9b04      	ldr	r3, [sp, #16]
 801f07e:	4303      	orrs	r3, r0
 801f080:	3401      	adds	r4, #1
 801f082:	9304      	str	r3, [sp, #16]
 801f084:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f088:	482c      	ldr	r0, [pc, #176]	; (801f13c <_vfiprintf_r+0x250>)
 801f08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f08e:	2206      	movs	r2, #6
 801f090:	f7e1 f956 	bl	8000340 <memchr>
 801f094:	2800      	cmp	r0, #0
 801f096:	d03f      	beq.n	801f118 <_vfiprintf_r+0x22c>
 801f098:	4b29      	ldr	r3, [pc, #164]	; (801f140 <_vfiprintf_r+0x254>)
 801f09a:	bb1b      	cbnz	r3, 801f0e4 <_vfiprintf_r+0x1f8>
 801f09c:	9b03      	ldr	r3, [sp, #12]
 801f09e:	3307      	adds	r3, #7
 801f0a0:	f023 0307 	bic.w	r3, r3, #7
 801f0a4:	3308      	adds	r3, #8
 801f0a6:	9303      	str	r3, [sp, #12]
 801f0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0aa:	443b      	add	r3, r7
 801f0ac:	9309      	str	r3, [sp, #36]	; 0x24
 801f0ae:	e767      	b.n	801ef80 <_vfiprintf_r+0x94>
 801f0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 801f0b4:	460c      	mov	r4, r1
 801f0b6:	2001      	movs	r0, #1
 801f0b8:	e7a5      	b.n	801f006 <_vfiprintf_r+0x11a>
 801f0ba:	2300      	movs	r3, #0
 801f0bc:	3401      	adds	r4, #1
 801f0be:	9305      	str	r3, [sp, #20]
 801f0c0:	4619      	mov	r1, r3
 801f0c2:	f04f 0c0a 	mov.w	ip, #10
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0cc:	3a30      	subs	r2, #48	; 0x30
 801f0ce:	2a09      	cmp	r2, #9
 801f0d0:	d903      	bls.n	801f0da <_vfiprintf_r+0x1ee>
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d0c5      	beq.n	801f062 <_vfiprintf_r+0x176>
 801f0d6:	9105      	str	r1, [sp, #20]
 801f0d8:	e7c3      	b.n	801f062 <_vfiprintf_r+0x176>
 801f0da:	fb0c 2101 	mla	r1, ip, r1, r2
 801f0de:	4604      	mov	r4, r0
 801f0e0:	2301      	movs	r3, #1
 801f0e2:	e7f0      	b.n	801f0c6 <_vfiprintf_r+0x1da>
 801f0e4:	ab03      	add	r3, sp, #12
 801f0e6:	9300      	str	r3, [sp, #0]
 801f0e8:	462a      	mov	r2, r5
 801f0ea:	4b16      	ldr	r3, [pc, #88]	; (801f144 <_vfiprintf_r+0x258>)
 801f0ec:	a904      	add	r1, sp, #16
 801f0ee:	4630      	mov	r0, r6
 801f0f0:	f7fb fee6 	bl	801aec0 <_printf_float>
 801f0f4:	4607      	mov	r7, r0
 801f0f6:	1c78      	adds	r0, r7, #1
 801f0f8:	d1d6      	bne.n	801f0a8 <_vfiprintf_r+0x1bc>
 801f0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f0fc:	07d9      	lsls	r1, r3, #31
 801f0fe:	d405      	bmi.n	801f10c <_vfiprintf_r+0x220>
 801f100:	89ab      	ldrh	r3, [r5, #12]
 801f102:	059a      	lsls	r2, r3, #22
 801f104:	d402      	bmi.n	801f10c <_vfiprintf_r+0x220>
 801f106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f108:	f7ff fe71 	bl	801edee <__retarget_lock_release_recursive>
 801f10c:	89ab      	ldrh	r3, [r5, #12]
 801f10e:	065b      	lsls	r3, r3, #25
 801f110:	f53f af12 	bmi.w	801ef38 <_vfiprintf_r+0x4c>
 801f114:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f116:	e711      	b.n	801ef3c <_vfiprintf_r+0x50>
 801f118:	ab03      	add	r3, sp, #12
 801f11a:	9300      	str	r3, [sp, #0]
 801f11c:	462a      	mov	r2, r5
 801f11e:	4b09      	ldr	r3, [pc, #36]	; (801f144 <_vfiprintf_r+0x258>)
 801f120:	a904      	add	r1, sp, #16
 801f122:	4630      	mov	r0, r6
 801f124:	f7fc f958 	bl	801b3d8 <_printf_i>
 801f128:	e7e4      	b.n	801f0f4 <_vfiprintf_r+0x208>
 801f12a:	bf00      	nop
 801f12c:	080201f4 	.word	0x080201f4
 801f130:	08020214 	.word	0x08020214
 801f134:	080201d4 	.word	0x080201d4
 801f138:	08020184 	.word	0x08020184
 801f13c:	0802018e 	.word	0x0802018e
 801f140:	0801aec1 	.word	0x0801aec1
 801f144:	0801eec9 	.word	0x0801eec9
 801f148:	0802018a 	.word	0x0802018a

0801f14c <__swbuf_r>:
 801f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f14e:	460e      	mov	r6, r1
 801f150:	4614      	mov	r4, r2
 801f152:	4605      	mov	r5, r0
 801f154:	b118      	cbz	r0, 801f15e <__swbuf_r+0x12>
 801f156:	6983      	ldr	r3, [r0, #24]
 801f158:	b90b      	cbnz	r3, 801f15e <__swbuf_r+0x12>
 801f15a:	f7ff fd97 	bl	801ec8c <__sinit>
 801f15e:	4b21      	ldr	r3, [pc, #132]	; (801f1e4 <__swbuf_r+0x98>)
 801f160:	429c      	cmp	r4, r3
 801f162:	d12b      	bne.n	801f1bc <__swbuf_r+0x70>
 801f164:	686c      	ldr	r4, [r5, #4]
 801f166:	69a3      	ldr	r3, [r4, #24]
 801f168:	60a3      	str	r3, [r4, #8]
 801f16a:	89a3      	ldrh	r3, [r4, #12]
 801f16c:	071a      	lsls	r2, r3, #28
 801f16e:	d52f      	bpl.n	801f1d0 <__swbuf_r+0x84>
 801f170:	6923      	ldr	r3, [r4, #16]
 801f172:	b36b      	cbz	r3, 801f1d0 <__swbuf_r+0x84>
 801f174:	6923      	ldr	r3, [r4, #16]
 801f176:	6820      	ldr	r0, [r4, #0]
 801f178:	1ac0      	subs	r0, r0, r3
 801f17a:	6963      	ldr	r3, [r4, #20]
 801f17c:	b2f6      	uxtb	r6, r6
 801f17e:	4283      	cmp	r3, r0
 801f180:	4637      	mov	r7, r6
 801f182:	dc04      	bgt.n	801f18e <__swbuf_r+0x42>
 801f184:	4621      	mov	r1, r4
 801f186:	4628      	mov	r0, r5
 801f188:	f7ff fcec 	bl	801eb64 <_fflush_r>
 801f18c:	bb30      	cbnz	r0, 801f1dc <__swbuf_r+0x90>
 801f18e:	68a3      	ldr	r3, [r4, #8]
 801f190:	3b01      	subs	r3, #1
 801f192:	60a3      	str	r3, [r4, #8]
 801f194:	6823      	ldr	r3, [r4, #0]
 801f196:	1c5a      	adds	r2, r3, #1
 801f198:	6022      	str	r2, [r4, #0]
 801f19a:	701e      	strb	r6, [r3, #0]
 801f19c:	6963      	ldr	r3, [r4, #20]
 801f19e:	3001      	adds	r0, #1
 801f1a0:	4283      	cmp	r3, r0
 801f1a2:	d004      	beq.n	801f1ae <__swbuf_r+0x62>
 801f1a4:	89a3      	ldrh	r3, [r4, #12]
 801f1a6:	07db      	lsls	r3, r3, #31
 801f1a8:	d506      	bpl.n	801f1b8 <__swbuf_r+0x6c>
 801f1aa:	2e0a      	cmp	r6, #10
 801f1ac:	d104      	bne.n	801f1b8 <__swbuf_r+0x6c>
 801f1ae:	4621      	mov	r1, r4
 801f1b0:	4628      	mov	r0, r5
 801f1b2:	f7ff fcd7 	bl	801eb64 <_fflush_r>
 801f1b6:	b988      	cbnz	r0, 801f1dc <__swbuf_r+0x90>
 801f1b8:	4638      	mov	r0, r7
 801f1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1bc:	4b0a      	ldr	r3, [pc, #40]	; (801f1e8 <__swbuf_r+0x9c>)
 801f1be:	429c      	cmp	r4, r3
 801f1c0:	d101      	bne.n	801f1c6 <__swbuf_r+0x7a>
 801f1c2:	68ac      	ldr	r4, [r5, #8]
 801f1c4:	e7cf      	b.n	801f166 <__swbuf_r+0x1a>
 801f1c6:	4b09      	ldr	r3, [pc, #36]	; (801f1ec <__swbuf_r+0xa0>)
 801f1c8:	429c      	cmp	r4, r3
 801f1ca:	bf08      	it	eq
 801f1cc:	68ec      	ldreq	r4, [r5, #12]
 801f1ce:	e7ca      	b.n	801f166 <__swbuf_r+0x1a>
 801f1d0:	4621      	mov	r1, r4
 801f1d2:	4628      	mov	r0, r5
 801f1d4:	f000 f80c 	bl	801f1f0 <__swsetup_r>
 801f1d8:	2800      	cmp	r0, #0
 801f1da:	d0cb      	beq.n	801f174 <__swbuf_r+0x28>
 801f1dc:	f04f 37ff 	mov.w	r7, #4294967295
 801f1e0:	e7ea      	b.n	801f1b8 <__swbuf_r+0x6c>
 801f1e2:	bf00      	nop
 801f1e4:	080201f4 	.word	0x080201f4
 801f1e8:	08020214 	.word	0x08020214
 801f1ec:	080201d4 	.word	0x080201d4

0801f1f0 <__swsetup_r>:
 801f1f0:	4b32      	ldr	r3, [pc, #200]	; (801f2bc <__swsetup_r+0xcc>)
 801f1f2:	b570      	push	{r4, r5, r6, lr}
 801f1f4:	681d      	ldr	r5, [r3, #0]
 801f1f6:	4606      	mov	r6, r0
 801f1f8:	460c      	mov	r4, r1
 801f1fa:	b125      	cbz	r5, 801f206 <__swsetup_r+0x16>
 801f1fc:	69ab      	ldr	r3, [r5, #24]
 801f1fe:	b913      	cbnz	r3, 801f206 <__swsetup_r+0x16>
 801f200:	4628      	mov	r0, r5
 801f202:	f7ff fd43 	bl	801ec8c <__sinit>
 801f206:	4b2e      	ldr	r3, [pc, #184]	; (801f2c0 <__swsetup_r+0xd0>)
 801f208:	429c      	cmp	r4, r3
 801f20a:	d10f      	bne.n	801f22c <__swsetup_r+0x3c>
 801f20c:	686c      	ldr	r4, [r5, #4]
 801f20e:	89a3      	ldrh	r3, [r4, #12]
 801f210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f214:	0719      	lsls	r1, r3, #28
 801f216:	d42c      	bmi.n	801f272 <__swsetup_r+0x82>
 801f218:	06dd      	lsls	r5, r3, #27
 801f21a:	d411      	bmi.n	801f240 <__swsetup_r+0x50>
 801f21c:	2309      	movs	r3, #9
 801f21e:	6033      	str	r3, [r6, #0]
 801f220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f224:	81a3      	strh	r3, [r4, #12]
 801f226:	f04f 30ff 	mov.w	r0, #4294967295
 801f22a:	e03e      	b.n	801f2aa <__swsetup_r+0xba>
 801f22c:	4b25      	ldr	r3, [pc, #148]	; (801f2c4 <__swsetup_r+0xd4>)
 801f22e:	429c      	cmp	r4, r3
 801f230:	d101      	bne.n	801f236 <__swsetup_r+0x46>
 801f232:	68ac      	ldr	r4, [r5, #8]
 801f234:	e7eb      	b.n	801f20e <__swsetup_r+0x1e>
 801f236:	4b24      	ldr	r3, [pc, #144]	; (801f2c8 <__swsetup_r+0xd8>)
 801f238:	429c      	cmp	r4, r3
 801f23a:	bf08      	it	eq
 801f23c:	68ec      	ldreq	r4, [r5, #12]
 801f23e:	e7e6      	b.n	801f20e <__swsetup_r+0x1e>
 801f240:	0758      	lsls	r0, r3, #29
 801f242:	d512      	bpl.n	801f26a <__swsetup_r+0x7a>
 801f244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f246:	b141      	cbz	r1, 801f25a <__swsetup_r+0x6a>
 801f248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f24c:	4299      	cmp	r1, r3
 801f24e:	d002      	beq.n	801f256 <__swsetup_r+0x66>
 801f250:	4630      	mov	r0, r6
 801f252:	f7ff f95b 	bl	801e50c <_free_r>
 801f256:	2300      	movs	r3, #0
 801f258:	6363      	str	r3, [r4, #52]	; 0x34
 801f25a:	89a3      	ldrh	r3, [r4, #12]
 801f25c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f260:	81a3      	strh	r3, [r4, #12]
 801f262:	2300      	movs	r3, #0
 801f264:	6063      	str	r3, [r4, #4]
 801f266:	6923      	ldr	r3, [r4, #16]
 801f268:	6023      	str	r3, [r4, #0]
 801f26a:	89a3      	ldrh	r3, [r4, #12]
 801f26c:	f043 0308 	orr.w	r3, r3, #8
 801f270:	81a3      	strh	r3, [r4, #12]
 801f272:	6923      	ldr	r3, [r4, #16]
 801f274:	b94b      	cbnz	r3, 801f28a <__swsetup_r+0x9a>
 801f276:	89a3      	ldrh	r3, [r4, #12]
 801f278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f280:	d003      	beq.n	801f28a <__swsetup_r+0x9a>
 801f282:	4621      	mov	r1, r4
 801f284:	4630      	mov	r0, r6
 801f286:	f000 f84d 	bl	801f324 <__smakebuf_r>
 801f28a:	89a0      	ldrh	r0, [r4, #12]
 801f28c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f290:	f010 0301 	ands.w	r3, r0, #1
 801f294:	d00a      	beq.n	801f2ac <__swsetup_r+0xbc>
 801f296:	2300      	movs	r3, #0
 801f298:	60a3      	str	r3, [r4, #8]
 801f29a:	6963      	ldr	r3, [r4, #20]
 801f29c:	425b      	negs	r3, r3
 801f29e:	61a3      	str	r3, [r4, #24]
 801f2a0:	6923      	ldr	r3, [r4, #16]
 801f2a2:	b943      	cbnz	r3, 801f2b6 <__swsetup_r+0xc6>
 801f2a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f2a8:	d1ba      	bne.n	801f220 <__swsetup_r+0x30>
 801f2aa:	bd70      	pop	{r4, r5, r6, pc}
 801f2ac:	0781      	lsls	r1, r0, #30
 801f2ae:	bf58      	it	pl
 801f2b0:	6963      	ldrpl	r3, [r4, #20]
 801f2b2:	60a3      	str	r3, [r4, #8]
 801f2b4:	e7f4      	b.n	801f2a0 <__swsetup_r+0xb0>
 801f2b6:	2000      	movs	r0, #0
 801f2b8:	e7f7      	b.n	801f2aa <__swsetup_r+0xba>
 801f2ba:	bf00      	nop
 801f2bc:	24000100 	.word	0x24000100
 801f2c0:	080201f4 	.word	0x080201f4
 801f2c4:	08020214 	.word	0x08020214
 801f2c8:	080201d4 	.word	0x080201d4

0801f2cc <abort>:
 801f2cc:	b508      	push	{r3, lr}
 801f2ce:	2006      	movs	r0, #6
 801f2d0:	f000 f898 	bl	801f404 <raise>
 801f2d4:	2001      	movs	r0, #1
 801f2d6:	f7e4 fc99 	bl	8003c0c <_exit>

0801f2da <__swhatbuf_r>:
 801f2da:	b570      	push	{r4, r5, r6, lr}
 801f2dc:	460e      	mov	r6, r1
 801f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2e2:	2900      	cmp	r1, #0
 801f2e4:	b096      	sub	sp, #88	; 0x58
 801f2e6:	4614      	mov	r4, r2
 801f2e8:	461d      	mov	r5, r3
 801f2ea:	da08      	bge.n	801f2fe <__swhatbuf_r+0x24>
 801f2ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f2f0:	2200      	movs	r2, #0
 801f2f2:	602a      	str	r2, [r5, #0]
 801f2f4:	061a      	lsls	r2, r3, #24
 801f2f6:	d410      	bmi.n	801f31a <__swhatbuf_r+0x40>
 801f2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f2fc:	e00e      	b.n	801f31c <__swhatbuf_r+0x42>
 801f2fe:	466a      	mov	r2, sp
 801f300:	f000 f89c 	bl	801f43c <_fstat_r>
 801f304:	2800      	cmp	r0, #0
 801f306:	dbf1      	blt.n	801f2ec <__swhatbuf_r+0x12>
 801f308:	9a01      	ldr	r2, [sp, #4]
 801f30a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f30e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f312:	425a      	negs	r2, r3
 801f314:	415a      	adcs	r2, r3
 801f316:	602a      	str	r2, [r5, #0]
 801f318:	e7ee      	b.n	801f2f8 <__swhatbuf_r+0x1e>
 801f31a:	2340      	movs	r3, #64	; 0x40
 801f31c:	2000      	movs	r0, #0
 801f31e:	6023      	str	r3, [r4, #0]
 801f320:	b016      	add	sp, #88	; 0x58
 801f322:	bd70      	pop	{r4, r5, r6, pc}

0801f324 <__smakebuf_r>:
 801f324:	898b      	ldrh	r3, [r1, #12]
 801f326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f328:	079d      	lsls	r5, r3, #30
 801f32a:	4606      	mov	r6, r0
 801f32c:	460c      	mov	r4, r1
 801f32e:	d507      	bpl.n	801f340 <__smakebuf_r+0x1c>
 801f330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f334:	6023      	str	r3, [r4, #0]
 801f336:	6123      	str	r3, [r4, #16]
 801f338:	2301      	movs	r3, #1
 801f33a:	6163      	str	r3, [r4, #20]
 801f33c:	b002      	add	sp, #8
 801f33e:	bd70      	pop	{r4, r5, r6, pc}
 801f340:	ab01      	add	r3, sp, #4
 801f342:	466a      	mov	r2, sp
 801f344:	f7ff ffc9 	bl	801f2da <__swhatbuf_r>
 801f348:	9900      	ldr	r1, [sp, #0]
 801f34a:	4605      	mov	r5, r0
 801f34c:	4630      	mov	r0, r6
 801f34e:	f7ff f949 	bl	801e5e4 <_malloc_r>
 801f352:	b948      	cbnz	r0, 801f368 <__smakebuf_r+0x44>
 801f354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f358:	059a      	lsls	r2, r3, #22
 801f35a:	d4ef      	bmi.n	801f33c <__smakebuf_r+0x18>
 801f35c:	f023 0303 	bic.w	r3, r3, #3
 801f360:	f043 0302 	orr.w	r3, r3, #2
 801f364:	81a3      	strh	r3, [r4, #12]
 801f366:	e7e3      	b.n	801f330 <__smakebuf_r+0xc>
 801f368:	4b0d      	ldr	r3, [pc, #52]	; (801f3a0 <__smakebuf_r+0x7c>)
 801f36a:	62b3      	str	r3, [r6, #40]	; 0x28
 801f36c:	89a3      	ldrh	r3, [r4, #12]
 801f36e:	6020      	str	r0, [r4, #0]
 801f370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f374:	81a3      	strh	r3, [r4, #12]
 801f376:	9b00      	ldr	r3, [sp, #0]
 801f378:	6163      	str	r3, [r4, #20]
 801f37a:	9b01      	ldr	r3, [sp, #4]
 801f37c:	6120      	str	r0, [r4, #16]
 801f37e:	b15b      	cbz	r3, 801f398 <__smakebuf_r+0x74>
 801f380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f384:	4630      	mov	r0, r6
 801f386:	f000 f86b 	bl	801f460 <_isatty_r>
 801f38a:	b128      	cbz	r0, 801f398 <__smakebuf_r+0x74>
 801f38c:	89a3      	ldrh	r3, [r4, #12]
 801f38e:	f023 0303 	bic.w	r3, r3, #3
 801f392:	f043 0301 	orr.w	r3, r3, #1
 801f396:	81a3      	strh	r3, [r4, #12]
 801f398:	89a0      	ldrh	r0, [r4, #12]
 801f39a:	4305      	orrs	r5, r0
 801f39c:	81a5      	strh	r5, [r4, #12]
 801f39e:	e7cd      	b.n	801f33c <__smakebuf_r+0x18>
 801f3a0:	0801ec25 	.word	0x0801ec25

0801f3a4 <_malloc_usable_size_r>:
 801f3a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3a8:	1f18      	subs	r0, r3, #4
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	bfbc      	itt	lt
 801f3ae:	580b      	ldrlt	r3, [r1, r0]
 801f3b0:	18c0      	addlt	r0, r0, r3
 801f3b2:	4770      	bx	lr

0801f3b4 <_raise_r>:
 801f3b4:	291f      	cmp	r1, #31
 801f3b6:	b538      	push	{r3, r4, r5, lr}
 801f3b8:	4604      	mov	r4, r0
 801f3ba:	460d      	mov	r5, r1
 801f3bc:	d904      	bls.n	801f3c8 <_raise_r+0x14>
 801f3be:	2316      	movs	r3, #22
 801f3c0:	6003      	str	r3, [r0, #0]
 801f3c2:	f04f 30ff 	mov.w	r0, #4294967295
 801f3c6:	bd38      	pop	{r3, r4, r5, pc}
 801f3c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f3ca:	b112      	cbz	r2, 801f3d2 <_raise_r+0x1e>
 801f3cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f3d0:	b94b      	cbnz	r3, 801f3e6 <_raise_r+0x32>
 801f3d2:	4620      	mov	r0, r4
 801f3d4:	f000 f830 	bl	801f438 <_getpid_r>
 801f3d8:	462a      	mov	r2, r5
 801f3da:	4601      	mov	r1, r0
 801f3dc:	4620      	mov	r0, r4
 801f3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f3e2:	f000 b817 	b.w	801f414 <_kill_r>
 801f3e6:	2b01      	cmp	r3, #1
 801f3e8:	d00a      	beq.n	801f400 <_raise_r+0x4c>
 801f3ea:	1c59      	adds	r1, r3, #1
 801f3ec:	d103      	bne.n	801f3f6 <_raise_r+0x42>
 801f3ee:	2316      	movs	r3, #22
 801f3f0:	6003      	str	r3, [r0, #0]
 801f3f2:	2001      	movs	r0, #1
 801f3f4:	e7e7      	b.n	801f3c6 <_raise_r+0x12>
 801f3f6:	2400      	movs	r4, #0
 801f3f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f3fc:	4628      	mov	r0, r5
 801f3fe:	4798      	blx	r3
 801f400:	2000      	movs	r0, #0
 801f402:	e7e0      	b.n	801f3c6 <_raise_r+0x12>

0801f404 <raise>:
 801f404:	4b02      	ldr	r3, [pc, #8]	; (801f410 <raise+0xc>)
 801f406:	4601      	mov	r1, r0
 801f408:	6818      	ldr	r0, [r3, #0]
 801f40a:	f7ff bfd3 	b.w	801f3b4 <_raise_r>
 801f40e:	bf00      	nop
 801f410:	24000100 	.word	0x24000100

0801f414 <_kill_r>:
 801f414:	b538      	push	{r3, r4, r5, lr}
 801f416:	4d07      	ldr	r5, [pc, #28]	; (801f434 <_kill_r+0x20>)
 801f418:	2300      	movs	r3, #0
 801f41a:	4604      	mov	r4, r0
 801f41c:	4608      	mov	r0, r1
 801f41e:	4611      	mov	r1, r2
 801f420:	602b      	str	r3, [r5, #0]
 801f422:	f7e4 fbe3 	bl	8003bec <_kill>
 801f426:	1c43      	adds	r3, r0, #1
 801f428:	d102      	bne.n	801f430 <_kill_r+0x1c>
 801f42a:	682b      	ldr	r3, [r5, #0]
 801f42c:	b103      	cbz	r3, 801f430 <_kill_r+0x1c>
 801f42e:	6023      	str	r3, [r4, #0]
 801f430:	bd38      	pop	{r3, r4, r5, pc}
 801f432:	bf00      	nop
 801f434:	240034f8 	.word	0x240034f8

0801f438 <_getpid_r>:
 801f438:	f7e4 bbd0 	b.w	8003bdc <_getpid>

0801f43c <_fstat_r>:
 801f43c:	b538      	push	{r3, r4, r5, lr}
 801f43e:	4d07      	ldr	r5, [pc, #28]	; (801f45c <_fstat_r+0x20>)
 801f440:	2300      	movs	r3, #0
 801f442:	4604      	mov	r4, r0
 801f444:	4608      	mov	r0, r1
 801f446:	4611      	mov	r1, r2
 801f448:	602b      	str	r3, [r5, #0]
 801f44a:	f7e4 fc2e 	bl	8003caa <_fstat>
 801f44e:	1c43      	adds	r3, r0, #1
 801f450:	d102      	bne.n	801f458 <_fstat_r+0x1c>
 801f452:	682b      	ldr	r3, [r5, #0]
 801f454:	b103      	cbz	r3, 801f458 <_fstat_r+0x1c>
 801f456:	6023      	str	r3, [r4, #0]
 801f458:	bd38      	pop	{r3, r4, r5, pc}
 801f45a:	bf00      	nop
 801f45c:	240034f8 	.word	0x240034f8

0801f460 <_isatty_r>:
 801f460:	b538      	push	{r3, r4, r5, lr}
 801f462:	4d06      	ldr	r5, [pc, #24]	; (801f47c <_isatty_r+0x1c>)
 801f464:	2300      	movs	r3, #0
 801f466:	4604      	mov	r4, r0
 801f468:	4608      	mov	r0, r1
 801f46a:	602b      	str	r3, [r5, #0]
 801f46c:	f7e4 fc2d 	bl	8003cca <_isatty>
 801f470:	1c43      	adds	r3, r0, #1
 801f472:	d102      	bne.n	801f47a <_isatty_r+0x1a>
 801f474:	682b      	ldr	r3, [r5, #0]
 801f476:	b103      	cbz	r3, 801f47a <_isatty_r+0x1a>
 801f478:	6023      	str	r3, [r4, #0]
 801f47a:	bd38      	pop	{r3, r4, r5, pc}
 801f47c:	240034f8 	.word	0x240034f8

0801f480 <_init>:
 801f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f482:	bf00      	nop
 801f484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f486:	bc08      	pop	{r3}
 801f488:	469e      	mov	lr, r3
 801f48a:	4770      	bx	lr

0801f48c <_fini>:
 801f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f48e:	bf00      	nop
 801f490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f492:	bc08      	pop	{r3}
 801f494:	469e      	mov	lr, r3
 801f496:	4770      	bx	lr
